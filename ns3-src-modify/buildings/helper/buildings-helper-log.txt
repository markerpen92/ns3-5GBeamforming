diff ../../NS3-WiGig/src/buildings/helper/building-allocator.cc ../../ns-3-dev/src/buildings/helper/building-allocator.cc
55c55
<     .AddAttribute ("GridWidth", "The number of objects laid out on a line.",
---
>     .AddAttribute ("GridWidth", "The number of objects layed out on a line.",
diff ../../NS3-WiGig/src/buildings/helper/building-position-allocator.cc ../../ns-3-dev/src/buildings/helper/building-position-allocator.cc
19d18
<  *         Michele Polese <michele.polese@gmail.com> for the OutdoorPositionAllocator class
33,34d31
< #include "ns3/string.h"
< #include "ns3/pointer.h"
110,224d106
< NS_OBJECT_ENSURE_REGISTERED (OutdoorPositionAllocator);
< 
< OutdoorPositionAllocator::OutdoorPositionAllocator ()
< {
< }
< 
< TypeId
< OutdoorPositionAllocator::GetTypeId (void)
< {
<   static TypeId tid = TypeId ("ns3::OutdoorPositionAllocator")
<     .SetParent<PositionAllocator> ()
<     .SetGroupName ("Buildings")
<     .AddConstructor<OutdoorPositionAllocator> ()
<     .AddAttribute ("X",
<                    "A random variable which represents the x coordinate of a position in a random box.",
<                    StringValue ("ns3::UniformRandomVariable[Min=0.0|Max=1.0]"),
<                    MakePointerAccessor (&OutdoorPositionAllocator::m_x),
<                    MakePointerChecker<RandomVariableStream> ())
<     .AddAttribute ("Y",
<                    "A random variable which represents the y coordinate of a position in a random box.",
<                    StringValue ("ns3::UniformRandomVariable[Min=0.0|Max=1.0]"),
<                    MakePointerAccessor (&OutdoorPositionAllocator::m_y),
<                    MakePointerChecker<RandomVariableStream> ())
<     .AddAttribute ("Z",
<                    "A random variable which represents the z coordinate of a position in a random box.",
<                    StringValue ("ns3::UniformRandomVariable[Min=0.0|Max=1.0]"),
<                    MakePointerAccessor (&OutdoorPositionAllocator::m_z),
<                    MakePointerChecker<RandomVariableStream> ())
<     .AddAttribute ("MaxAttempts",
<                    "Maximum number of attempts for the rejection sampling before giving up.",
<                    UintegerValue (1000),
<                    MakeUintegerAccessor (&OutdoorPositionAllocator::m_maxAttempts),
<                    MakeUintegerChecker<uint32_t> ())
<   ;
< 
<   return tid;
< }
< 
< void
< OutdoorPositionAllocator::SetX (Ptr<RandomVariableStream> x)
< {
<   m_x = x;
< }
< void
< OutdoorPositionAllocator::SetY (Ptr<RandomVariableStream> y)
< {
<   m_y = y;
< }
< void
< OutdoorPositionAllocator::SetZ (Ptr<RandomVariableStream> z)
< {
<   m_z = z;
< }
< 
< Vector
< OutdoorPositionAllocator::GetNext () const
< {
<   NS_ABORT_MSG_IF (BuildingList::GetNBuildings () == 0, "no building found");
< 
<   bool outdoor = false;
<   uint32_t attempts = 0;
<   Vector position = Vector (0,0,0);
< 
<   while (!outdoor && attempts < m_maxAttempts)
<     {
<       // get a random position
<       double x = m_x->GetValue ();
<       double y = m_y->GetValue ();
<       double z = m_z->GetValue ();
< 
<       position = Vector (x, y, z);
< 
<       NS_LOG_INFO ("Position " << position);
< 
<       bool inside = false;
<       for (BuildingList::Iterator bit = BuildingList::Begin (); bit != BuildingList::End (); ++bit)
<         {
<           if ((*bit)->IsInside (position))
<             {
<               NS_LOG_INFO ("Position " << position << " is inside the building with boundaries "
<                                        << (*bit)->GetBoundaries ().xMin << " " << (*bit)->GetBoundaries ().xMax << " "
<                                        << (*bit)->GetBoundaries ().yMin << " " << (*bit)->GetBoundaries ().yMax << " "
<                                        << (*bit)->GetBoundaries ().zMin << " " << (*bit)->GetBoundaries ().zMax);
<               inside = true;
<               break;
<             }
<         }
< 
<       if (inside)
<         {
<           NS_LOG_INFO ("Inside a building, attempt " << attempts << " out of " << m_maxAttempts);
<           attempts++;
<         }
<       else
<         {
<           NS_LOG_INFO ("Outdoor position found " << position);
<           outdoor = true;
<         }
<     }
< 
<   NS_ABORT_MSG_IF (attempts >= m_maxAttempts, "Too many attempts, give up");
<   NS_ABORT_MSG_IF (!outdoor, "Still indoor, give up");
<   return position;
< }
< 
< int64_t
< OutdoorPositionAllocator::AssignStreams (int64_t stream)
< {
<   m_x->SetStream (stream);
<   m_y->SetStream (stream + 1);
<   m_z->SetStream (stream + 2);
<   return 3;
< }
< 
< 
333c215
<       bmm->MakeConsistent (mm);
---
>       BuildingsHelper::MakeConsistent (mm);
diff ../../NS3-WiGig/src/buildings/helper/building-position-allocator.h ../../ns-3-dev/src/buildings/helper/building-position-allocator.h
19d18
<  *         Michele Polese <michele.polese@gmail.com> for the OutdoorPositionAllocator class
36,37c35,36
<  * Allocate each position by randomly choosing a building from the list
<  * of all buildings, and then randomly choosing a position inside the building.
---
>  * Allocate each position by randomly chosing a building from the list
>  * of all buildings, and then randomly chosing a position inside the building.
70,127d68
< /**
<  * \ingroup buildings
<  * \brief allocate outdoor positions
<  *
<  * Allocate positions outside of existing buildings using rejection sampling.
<  * This class extracts a random position in a box defined by the three 
<  * RandomVariableStreams for the X, Y and Z dimensions (similarly to 
<  * RandomBoxPositionAllocator), until a position is found that is outdoors 
<  * with respect to all of the buildings in the scenario, or a maximum number 
<  * of attempts is reached.  The RandomVariableStream and the maximum number 
<  * of attempts can be set using attributes.  If the maximum number of 
<  * attempts is reached, then the simulation aborts due to failure of properly
<  * positioning the node.
<  */
< class OutdoorPositionAllocator : public PositionAllocator
< {
< public:
<   OutdoorPositionAllocator ();
< 
<   // inherited from Object
<   static TypeId GetTypeId (void);
< 
<   // inherited from PositionAllocator
<   virtual Vector GetNext (void) const;
< 
<   /**
<    * \brief Set the random variable stream object that generates x-positions
<    * \param x pointer to a RandomVariableStream object
<    */
<   void SetX (Ptr<RandomVariableStream> x);
<   /**
<    * \brief Set the random variable stream object that generates y-positions
<    * \param y pointer to a RandomVariableStream object
<    */
<   void SetY (Ptr<RandomVariableStream> y);
<   /**
<    * \brief Set the random variable stream object that generates z-positions
<    * \param z pointer to a RandomVariableStream object
<    */
<   void SetZ (Ptr<RandomVariableStream> z);
< 
<   /**
<    * Assign a fixed random variable stream number to the random variables
<    * used by this model.  Return the number of streams (possibly zero) that
<    * have been assigned.
<    *
<    * \param stream first stream index to use
<    * \return the number of stream indices assigned by this model
<    */
<   int64_t AssignStreams (int64_t stream);
< 
< private:
<   Ptr<RandomVariableStream> m_x; //!< pointer to x's random variable stream
<   Ptr<RandomVariableStream> m_y; //!< pointer to y's random variable stream
<   Ptr<RandomVariableStream> m_z; //!< pointer to z's random variable stream
< 
<   uint32_t m_maxAttempts; //!< maximum number of attempts before giving up
< };
130,131c71,72
<  * Allocate each position by randomly choosing a room from the list
<  * of all buildings, and then randomly choosing a position inside the room.
---
>  * Allocate each position by randomly chosing a room from the list
>  * of all buildings, and then randomly chosing a position inside the room.
diff ../../NS3-WiGig/src/buildings/helper/buildings-helper.cc ../../ns-3-dev/src/buildings/helper/buildings-helper.cc
56d55
< 
70a70
>           MakeConsistent (mm);
73d72
<           bmm->MakeConsistent (mm);
91c90
<           NS_ABORT_MSG_UNLESS (found == false, " MobilityBuildingInfo already inside another building!");
---
>           NS_ABORT_MSG_UNLESS (found == false, " MobilityBuildingInfo already inside another building!");		
95,97c94,96
<           uint16_t roomY = (*bit)->GetRoomY (pos);
<           bmm->SetIndoor (*bit, floor, roomX, roomY);
<         }
---
>           uint16_t roomY = (*bit)->GetRoomY (pos);	   
>           bmm->SetIndoor (*bit, floor, roomX, roomY);	      
>         }		    	  
diff ../../NS3-WiGig/src/buildings/helper/buildings-helper.h ../../ns-3-dev/src/buildings/helper/buildings-helper.h
52c52
<   * \brief This method goes through the whole NodeList and, for each node in
---
>   * This method goes through the whole NodeList and, for each node in
54,58c54
<   * the MobilityModel of that node.
<   *
<   * \deprecated This method will go away in future release of ns-3.
<   * A node position will be make consistent by the method \c IsInside () of
<   * \c MobilityBuildingInfo class.
---
>   * the MobilityModel of that node. 
61d56
<   NS_DEPRECATED
64,74c59,65
<    * \brief Make the given mobility model consistent, by determining whether
<    * its position falls inside any of the building in BuildingList, and
<    * updating accordingly the BuildingInfo aggregated with the MobilityModel.
<    *
<    * \param mm the mobility model to be made consistent
<    *
<    * \deprecated This method will go away in future release of ns-3.
<    * See instead \c MakeConsistent method of \c MobilityBuildingInfo class.
<    */
<   NS_DEPRECATED
<   static void MakeConsistent (Ptr<MobilityModel> mm);
---
>   * Make the given mobility model consistent, by determining whether
>   * its position falls inside any of the building in BuildingList, and
>   * updating accordingly the BuildingInfo aggregated with the MobilityModel.
>   *
>   * \param bmm the mobility model to be made consistent
>   */
>   static void MakeConsistent (Ptr<MobilityModel> bmm);
