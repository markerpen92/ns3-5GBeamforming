diff ../../NS3-WiGig/src/buildings/bindings/callbacks_list.py ../../ns-3-dev/src/buildings/bindings/callbacks_list.py
2,5c2,4
<     ['ns3::ObjectBase *', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'],
<     ['void', 'ns3::Ptr<ns3::NetDevice>', 'ns3::Ptr<const ns3::Packet>', 'unsigned short', 'const ns3::Address &', 'const ns3::Address &', 'ns3::NetDevice::PacketType', 'ns3::empty', 'ns3::empty', 'ns3::empty'],
<     ['void', 'ns3::Ptr<ns3::NetDevice>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'],
<     ['void', 'ns3::Ptr<const ns3::MobilityModel>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'],
---
>     ['void', 'ns3::Ptr<ns3::NetDevice>', 'ns3::Ptr<ns3::Packet const>', 'unsigned short', 'ns3::Address const&', 'ns3::Address const&', 'ns3::NetDevice::PacketType', 'ns3::empty', 'ns3::empty', 'ns3::empty'],
>     ['void', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'],
>     ['unsigned char', 'ns3::Ptr<ns3::QueueItem>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'],
diff ../../NS3-WiGig/src/buildings/bindings/modulegen__gcc_ILP32.py ../../ns-3-dev/src/buildings/bindings/modulegen__gcc_ILP32.py
23,24d22
<     ## propagation-environment.h (module 'propagation'): ns3::EnvironmentType [enumeration]
<     module.add_enum('EnvironmentType', ['UrbanEnvironment', 'SubUrbanEnvironment', 'OpenAreasEnvironment'], import_from_module='ns.propagation')
26a25,26
>     ## propagation-environment.h (module 'propagation'): ns3::EnvironmentType [enumeration]
>     module.add_enum('EnvironmentType', ['UrbanEnvironment', 'SubUrbanEnvironment', 'OpenAreasEnvironment'], import_from_module='ns.propagation')
34,37c34
<     module.add_class('Item', outer_class=root_module['ns3::AttributeConstructionList'], import_from_module='ns.core')
<     typehandlers.add_type_alias('std::list< ns3::AttributeConstructionList::Item > const_iterator', 'ns3::AttributeConstructionList::CIterator')
<     typehandlers.add_type_alias('std::list< ns3::AttributeConstructionList::Item > const_iterator*', 'ns3::AttributeConstructionList::CIterator*')
<     typehandlers.add_type_alias('std::list< ns3::AttributeConstructionList::Item > const_iterator&', 'ns3::AttributeConstructionList::CIterator&')
---
>     module.add_class('Item', import_from_module='ns.core', outer_class=root_module['ns3::AttributeConstructionList'])
42,45d38
<     ## buffer.h (module 'network'): ns3::Buffer [class]
<     module.add_class('Buffer', import_from_module='ns.network')
<     ## buffer.h (module 'network'): ns3::Buffer::Iterator [class]
<     module.add_class('Iterator', outer_class=root_module['ns3::Buffer'], import_from_module='ns.network')
48,50d40
<     typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::Building > > const_iterator', 'ns3::BuildingContainer::Iterator')
<     typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::Building > > const_iterator*', 'ns3::BuildingContainer::Iterator*')
<     typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::Building > > const_iterator&', 'ns3::BuildingContainer::Iterator&')
53,55d42
<     typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::Building > > const_iterator', 'ns3::BuildingList::Iterator')
<     typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::Building > > const_iterator*', 'ns3::BuildingList::Iterator*')
<     typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::Building > > const_iterator&', 'ns3::BuildingList::Iterator&')
58,67d44
<     ## packet.h (module 'network'): ns3::ByteTagIterator [class]
<     module.add_class('ByteTagIterator', import_from_module='ns.network')
<     ## packet.h (module 'network'): ns3::ByteTagIterator::Item [class]
<     module.add_class('Item', outer_class=root_module['ns3::ByteTagIterator'], import_from_module='ns.network')
<     ## byte-tag-list.h (module 'network'): ns3::ByteTagList [class]
<     module.add_class('ByteTagList', import_from_module='ns.network')
<     ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator [class]
<     module.add_class('Iterator', outer_class=root_module['ns3::ByteTagList'], import_from_module='ns.network')
<     ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator::Item [struct]
<     module.add_class('Item', outer_class=root_module['ns3::ByteTagList::Iterator'], import_from_module='ns.network')
72,87d48
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::AttributeAccessor> [struct]
<     module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::AttributeAccessor'])
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::AttributeChecker> [struct]
<     module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::AttributeChecker'])
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::AttributeValue> [struct]
<     module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::AttributeValue'])
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::CallbackImplBase> [struct]
<     module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::CallbackImplBase'])
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::Hash::Implementation> [struct]
<     module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::Hash::Implementation'])
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::NixVector> [struct]
<     module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::NixVector'])
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::Packet> [struct]
<     module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::Packet'])
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::TraceSourceAccessor> [struct]
<     module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::TraceSourceAccessor'])
102,112d62
<     ## mac48-address.h (module 'network'): ns3::Mac48Address [class]
<     module.add_class('Mac48Address', import_from_module='ns.network')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Mac48Address )', 'ns3::Mac48Address::TracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Mac48Address )*', 'ns3::Mac48Address::TracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Mac48Address )&', 'ns3::Mac48Address::TracedCallback&')
<     ## mac48-address.h (module 'network'): ns3::Mac48Address [class]
<     root_module['ns3::Mac48Address'].implicitly_converts_to(root_module['ns3::Address'])
<     ## mac8-address.h (module 'network'): ns3::Mac8Address [class]
<     module.add_class('Mac8Address', import_from_module='ns.network')
<     ## mac8-address.h (module 'network'): ns3::Mac8Address [class]
<     root_module['ns3::Mac8Address'].implicitly_converts_to(root_module['ns3::Address'])
115,117d64
<     typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::Node > > const_iterator', 'ns3::NodeContainer::Iterator')
<     typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::Node > > const_iterator*', 'ns3::NodeContainer::Iterator*')
<     typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::Node > > const_iterator&', 'ns3::NodeContainer::Iterator&')
119c66
<     module.add_class('ObjectBase', import_from_module='ns.core', allow_subclassing=True)
---
>     module.add_class('ObjectBase', allow_subclassing=True, import_from_module='ns.core')
124,139d70
<     ## packet-metadata.h (module 'network'): ns3::PacketMetadata [class]
<     module.add_class('PacketMetadata', import_from_module='ns.network')
<     ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item [struct]
<     module.add_class('Item', outer_class=root_module['ns3::PacketMetadata'], import_from_module='ns.network')
<     ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item::ItemType [enumeration]
<     module.add_enum('ItemType', ['PAYLOAD', 'HEADER', 'TRAILER'], outer_class=root_module['ns3::PacketMetadata::Item'], import_from_module='ns.network')
<     ## packet-metadata.h (module 'network'): ns3::PacketMetadata::ItemIterator [class]
<     module.add_class('ItemIterator', outer_class=root_module['ns3::PacketMetadata'], import_from_module='ns.network')
<     ## packet.h (module 'network'): ns3::PacketTagIterator [class]
<     module.add_class('PacketTagIterator', import_from_module='ns.network')
<     ## packet.h (module 'network'): ns3::PacketTagIterator::Item [class]
<     module.add_class('Item', outer_class=root_module['ns3::PacketTagIterator'], import_from_module='ns.network')
<     ## packet-tag-list.h (module 'network'): ns3::PacketTagList [class]
<     module.add_class('PacketTagList', import_from_module='ns.network')
<     ## packet-tag-list.h (module 'network'): ns3::PacketTagList::TagData [struct]
<     module.add_class('TagData', outer_class=root_module['ns3::PacketTagList'], import_from_module='ns.network')
141,143c72
<     module.add_class('SimpleRefCount', template_parameters=['ns3::Object', 'ns3::ObjectBase', 'ns3::ObjectDeleter'], parent=root_module['ns3::ObjectBase'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), import_from_module='ns.core', automatic_type_narrowing=True)
<     ## tag.h (module 'network'): ns3::Tag [class]
<     module.add_class('Tag', import_from_module='ns.network', parent=root_module['ns3::ObjectBase'])
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::Object', 'ns3::ObjectBase', 'ns3::ObjectDeleter'], parent=root_module['ns3::ObjectBase'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
155c84
<     module.add_class('AttributeInformation', outer_class=root_module['ns3::TypeId'], import_from_module='ns.core')
---
>     module.add_class('AttributeInformation', import_from_module='ns.core', outer_class=root_module['ns3::TypeId'])
157,160c86
<     module.add_class('TraceSourceInformation', outer_class=root_module['ns3::TypeId'], import_from_module='ns.core')
<     typehandlers.add_type_alias('uint32_t', 'ns3::TypeId::hash_t')
<     typehandlers.add_type_alias('uint32_t*', 'ns3::TypeId::hash_t*')
<     typehandlers.add_type_alias('uint32_t&', 'ns3::TypeId::hash_t&')
---
>     module.add_class('TraceSourceInformation', import_from_module='ns.core', outer_class=root_module['ns3::TypeId'])
167c93
<     ## int64x64-128.h (module 'core'): ns3::int64x64_t [class]
---
>     ## int64x64-double.h (module 'core'): ns3::int64x64_t [class]
169c95
<     ## int64x64-128.h (module 'core'): ns3::int64x64_t::impl_type [enumeration]
---
>     ## int64x64-double.h (module 'core'): ns3::int64x64_t::impl_type [enumeration]
171,174d96
<     ## chunk.h (module 'network'): ns3::Chunk [class]
<     module.add_class('Chunk', import_from_module='ns.network', parent=root_module['ns3::ObjectBase'])
<     ## header.h (module 'network'): ns3::Header [class]
<     module.add_class('Header', import_from_module='ns.network', parent=root_module['ns3::Chunk'])
178c100
<     module.add_class('AggregateIterator', outer_class=root_module['ns3::Object'], import_from_module='ns.core')
---
>     module.add_class('AggregateIterator', import_from_module='ns.core', outer_class=root_module['ns3::Object'])
204c126
<     module.add_class('SimpleRefCount', template_parameters=['ns3::AttributeAccessor', 'ns3::empty', 'ns3::DefaultDeleter<ns3::AttributeAccessor>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), import_from_module='ns.core', automatic_type_narrowing=True)
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::AttributeAccessor', 'ns3::empty', 'ns3::DefaultDeleter<ns3::AttributeAccessor>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
206c128
<     module.add_class('SimpleRefCount', template_parameters=['ns3::AttributeChecker', 'ns3::empty', 'ns3::DefaultDeleter<ns3::AttributeChecker>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), import_from_module='ns.core', automatic_type_narrowing=True)
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::AttributeChecker', 'ns3::empty', 'ns3::DefaultDeleter<ns3::AttributeChecker>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
208c130
<     module.add_class('SimpleRefCount', template_parameters=['ns3::AttributeValue', 'ns3::empty', 'ns3::DefaultDeleter<ns3::AttributeValue>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), import_from_module='ns.core', automatic_type_narrowing=True)
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::AttributeValue', 'ns3::empty', 'ns3::DefaultDeleter<ns3::AttributeValue>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
210c132
<     module.add_class('SimpleRefCount', template_parameters=['ns3::CallbackImplBase', 'ns3::empty', 'ns3::DefaultDeleter<ns3::CallbackImplBase>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), import_from_module='ns.core', automatic_type_narrowing=True)
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::CallbackImplBase', 'ns3::empty', 'ns3::DefaultDeleter<ns3::CallbackImplBase>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
212,216c134,138
<     module.add_class('SimpleRefCount', template_parameters=['ns3::Hash::Implementation', 'ns3::empty', 'ns3::DefaultDeleter<ns3::Hash::Implementation>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), import_from_module='ns.core', automatic_type_narrowing=True)
<     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::NixVector, ns3::empty, ns3::DefaultDeleter<ns3::NixVector> > [class]
<     module.add_class('SimpleRefCount', template_parameters=['ns3::NixVector', 'ns3::empty', 'ns3::DefaultDeleter<ns3::NixVector>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), import_from_module='ns.core', automatic_type_narrowing=True)
<     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Packet, ns3::empty, ns3::DefaultDeleter<ns3::Packet> > [class]
<     module.add_class('SimpleRefCount', template_parameters=['ns3::Packet', 'ns3::empty', 'ns3::DefaultDeleter<ns3::Packet>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), import_from_module='ns.core', automatic_type_narrowing=True)
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::Hash::Implementation', 'ns3::empty', 'ns3::DefaultDeleter<ns3::Hash::Implementation>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
>     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::NetDeviceQueue, ns3::empty, ns3::DefaultDeleter<ns3::NetDeviceQueue> > [class]
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::NetDeviceQueue', 'ns3::empty', 'ns3::DefaultDeleter<ns3::NetDeviceQueue>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
>     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::QueueItem, ns3::empty, ns3::DefaultDeleter<ns3::QueueItem> > [class]
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::QueueItem', 'ns3::empty', 'ns3::DefaultDeleter<ns3::QueueItem>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
218c140
<     module.add_class('SimpleRefCount', template_parameters=['ns3::TraceSourceAccessor', 'ns3::empty', 'ns3::DefaultDeleter<ns3::TraceSourceAccessor>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), import_from_module='ns.core', automatic_type_narrowing=True)
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::TraceSourceAccessor', 'ns3::empty', 'ns3::DefaultDeleter<ns3::TraceSourceAccessor>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
225,227d146
<     typehandlers.add_type_alias('void ( * ) ( ns3::Time )', 'ns3::Time::TracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Time )*', 'ns3::Time::TracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Time )&', 'ns3::Time::TracedCallback&')
232,233d150
<     ## trailer.h (module 'network'): ns3::Trailer [class]
<     module.add_class('Trailer', import_from_module='ns.network', parent=root_module['ns3::Chunk'])
251c168
<     module.add_class('AttributeChecker', import_from_module='ns.core', parent=root_module['ns3::SimpleRefCount< ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker> >'], allow_subclassing=False, automatic_type_narrowing=True)
---
>     module.add_class('AttributeChecker', allow_subclassing=False, automatic_type_narrowing=True, import_from_module='ns.core', parent=root_module['ns3::SimpleRefCount< ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker> >'])
253c170
<     module.add_class('AttributeValue', import_from_module='ns.core', parent=root_module['ns3::SimpleRefCount< ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue> >'], allow_subclassing=False, automatic_type_narrowing=True)
---
>     module.add_class('AttributeValue', allow_subclassing=False, automatic_type_narrowing=True, import_from_module='ns.core', parent=root_module['ns3::SimpleRefCount< ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue> >'])
272,277d188
<     ## channel-condition-model.h (module 'propagation'): ns3::ChannelCondition [class]
<     module.add_class('ChannelCondition', import_from_module='ns.propagation', parent=root_module['ns3::Object'])
<     ## channel-condition-model.h (module 'propagation'): ns3::ChannelCondition::LosConditionValue [enumeration]
<     module.add_enum('LosConditionValue', ['LOS', 'NLOS'], outer_class=root_module['ns3::ChannelCondition'], import_from_module='ns.propagation')
<     ## channel-condition-model.h (module 'propagation'): ns3::ChannelConditionModel [class]
<     module.add_class('ChannelConditionModel', import_from_module='ns.propagation', parent=root_module['ns3::Object'])
334,337d244
<     ## mac48-address.h (module 'network'): ns3::Mac48AddressChecker [class]
<     module.add_class('Mac48AddressChecker', import_from_module='ns.network', parent=root_module['ns3::AttributeChecker'])
<     ## mac48-address.h (module 'network'): ns3::Mac48AddressValue [class]
<     module.add_class('Mac48AddressValue', import_from_module='ns.network', parent=root_module['ns3::AttributeValue'])
342,346d248
<     ## mobility-model.h (module 'mobility'): ns3::MobilityModel [class]
<     module.add_class('MobilityModel', import_from_module='ns.mobility', parent=root_module['ns3::Object'])
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::MobilityModel const > )', 'ns3::MobilityModel::TracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::MobilityModel const > )*', 'ns3::MobilityModel::TracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::MobilityModel const > )&', 'ns3::MobilityModel::TracedCallback&')
353,365c255,258
<     typehandlers.add_type_alias('void ( * ) (  )', 'ns3::NetDevice::LinkChangeTracedCallback')
<     typehandlers.add_type_alias('void ( * ) (  )*', 'ns3::NetDevice::LinkChangeTracedCallback*')
<     typehandlers.add_type_alias('void ( * ) (  )&', 'ns3::NetDevice::LinkChangeTracedCallback&')
<     typehandlers.add_type_alias('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::NetDevice::ReceiveCallback')
<     typehandlers.add_type_alias('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::NetDevice::ReceiveCallback*')
<     typehandlers.add_type_alias('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::NetDevice::ReceiveCallback&')
<     typehandlers.add_type_alias('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >', 'ns3::NetDevice::PromiscReceiveCallback')
<     typehandlers.add_type_alias('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::NetDevice::PromiscReceiveCallback*')
<     typehandlers.add_type_alias('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::NetDevice::PromiscReceiveCallback&')
<     ## channel-condition-model.h (module 'propagation'): ns3::NeverLosChannelConditionModel [class]
<     module.add_class('NeverLosChannelConditionModel', import_from_module='ns.propagation', parent=root_module['ns3::ChannelConditionModel'])
<     ## nix-vector.h (module 'network'): ns3::NixVector [class]
<     module.add_class('NixVector', import_from_module='ns.network', parent=root_module['ns3::SimpleRefCount< ns3::NixVector, ns3::empty, ns3::DefaultDeleter<ns3::NixVector> >'])
---
>     ## net-device.h (module 'network'): ns3::NetDeviceQueue [class]
>     module.add_class('NetDeviceQueue', import_from_module='ns.network', parent=root_module['ns3::SimpleRefCount< ns3::NetDeviceQueue, ns3::empty, ns3::DefaultDeleter<ns3::NetDeviceQueue> >'])
>     ## net-device.h (module 'network'): ns3::NetDeviceQueueInterface [class]
>     module.add_class('NetDeviceQueueInterface', import_from_module='ns.network', parent=root_module['ns3::Object'])
368,373d260
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >', 'ns3::Node::ProtocolHandler')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::Node::ProtocolHandler*')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::Node::ProtocolHandler&')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::Node::DeviceAdditionListener')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::Node::DeviceAdditionListener*')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::Node::DeviceAdditionListener&')
382,403d268
<     ## building-position-allocator.h (module 'buildings'): ns3::OutdoorPositionAllocator [class]
<     module.add_class('OutdoorPositionAllocator', parent=root_module['ns3::PositionAllocator'])
<     ## packet.h (module 'network'): ns3::Packet [class]
<     module.add_class('Packet', import_from_module='ns.network', parent=root_module['ns3::SimpleRefCount< ns3::Packet, ns3::empty, ns3::DefaultDeleter<ns3::Packet> >'])
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const > )', 'ns3::Packet::TracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const > )*', 'ns3::Packet::TracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const > )&', 'ns3::Packet::TracedCallback&')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Address const & )', 'ns3::Packet::AddressTracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Address const & )*', 'ns3::Packet::AddressTracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Address const & )&', 'ns3::Packet::AddressTracedCallback&')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const > const, ns3::Address const &, ns3::Address const & )', 'ns3::Packet::TwoAddressTracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const > const, ns3::Address const &, ns3::Address const & )*', 'ns3::Packet::TwoAddressTracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const > const, ns3::Address const &, ns3::Address const & )&', 'ns3::Packet::TwoAddressTracedCallback&')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Mac48Address )', 'ns3::Packet::Mac48AddressTracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Mac48Address )*', 'ns3::Packet::Mac48AddressTracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Mac48Address )&', 'ns3::Packet::Mac48AddressTracedCallback&')
<     typehandlers.add_type_alias('void ( * ) ( uint32_t, uint32_t )', 'ns3::Packet::SizeTracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( uint32_t, uint32_t )*', 'ns3::Packet::SizeTracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( uint32_t, uint32_t )&', 'ns3::Packet::SizeTracedCallback&')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, double )', 'ns3::Packet::SinrTracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, double )*', 'ns3::Packet::SinrTracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, double )&', 'ns3::Packet::SinrTracedCallback&')
406,417c271,274
<     ## channel-condition-model.h (module 'propagation'): ns3::ThreeGppChannelConditionModel [class]
<     module.add_class('ThreeGppChannelConditionModel', import_from_module='ns.propagation', parent=root_module['ns3::ChannelConditionModel'])
<     ## channel-condition-model.h (module 'propagation'): ns3::ThreeGppIndoorMixedOfficeChannelConditionModel [class]
<     module.add_class('ThreeGppIndoorMixedOfficeChannelConditionModel', import_from_module='ns.propagation', parent=root_module['ns3::ThreeGppChannelConditionModel'])
<     ## channel-condition-model.h (module 'propagation'): ns3::ThreeGppIndoorOpenOfficeChannelConditionModel [class]
<     module.add_class('ThreeGppIndoorOpenOfficeChannelConditionModel', import_from_module='ns.propagation', parent=root_module['ns3::ThreeGppChannelConditionModel'])
<     ## channel-condition-model.h (module 'propagation'): ns3::ThreeGppRmaChannelConditionModel [class]
<     module.add_class('ThreeGppRmaChannelConditionModel', import_from_module='ns.propagation', parent=root_module['ns3::ThreeGppChannelConditionModel'])
<     ## channel-condition-model.h (module 'propagation'): ns3::ThreeGppUmaChannelConditionModel [class]
<     module.add_class('ThreeGppUmaChannelConditionModel', import_from_module='ns.propagation', parent=root_module['ns3::ThreeGppChannelConditionModel'])
<     ## channel-condition-model.h (module 'propagation'): ns3::ThreeGppUmiStreetCanyonChannelConditionModel [class]
<     module.add_class('ThreeGppUmiStreetCanyonChannelConditionModel', import_from_module='ns.propagation', parent=root_module['ns3::ThreeGppChannelConditionModel'])
---
>     ## net-device.h (module 'network'): ns3::QueueItem [class]
>     module.add_class('QueueItem', import_from_module='ns.network', parent=root_module['ns3::SimpleRefCount< ns3::QueueItem, ns3::empty, ns3::DefaultDeleter<ns3::QueueItem> >'])
>     ## net-device.h (module 'network'): ns3::QueueItem::Uint8Values [enumeration]
>     module.add_enum('Uint8Values', ['IP_DSFIELD'], outer_class=root_module['ns3::QueueItem'], import_from_module='ns.network')
436,450c293,295
<     ## channel-condition-model.h (module 'propagation'): ns3::AlwaysLosChannelConditionModel [class]
<     module.add_class('AlwaysLosChannelConditionModel', import_from_module='ns.propagation', parent=root_module['ns3::ChannelConditionModel'])
<     ## buildings-channel-condition-model.h (module 'buildings'): ns3::BuildingsChannelConditionModel [class]
<     module.add_class('BuildingsChannelConditionModel', parent=root_module['ns3::ChannelConditionModel'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', template_parameters=['ns3::ObjectBase *', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::MobilityModel>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', template_parameters=['void', 'ns3::Ptr<const ns3::MobilityModel>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', template_parameters=['void', 'ns3::Ptr<ns3::NetDevice>', 'ns3::Ptr<const ns3::Packet>', 'unsigned short', 'const ns3::Address &', 'const ns3::Address &', 'ns3::NetDevice::PacketType', 'ns3::empty', 'ns3::empty', 'ns3::empty'], import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', template_parameters=['void', 'ns3::Ptr<ns3::NetDevice>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'])
<     typehandlers.add_type_alias('ns3::Vector3D', 'ns3::Vector')
<     typehandlers.add_type_alias('ns3::Vector3D*', 'ns3::Vector*')
<     typehandlers.add_type_alias('ns3::Vector3D&', 'ns3::Vector&')
---
>     typehandlers.add_type_alias(u'ns3::Vector3D', u'ns3::Vector')
>     typehandlers.add_type_alias(u'ns3::Vector3D*', u'ns3::Vector*')
>     typehandlers.add_type_alias(u'ns3::Vector3D&', u'ns3::Vector&')
452,454c297,299
<     typehandlers.add_type_alias('ns3::Vector3DValue', 'ns3::VectorValue')
<     typehandlers.add_type_alias('ns3::Vector3DValue*', 'ns3::VectorValue*')
<     typehandlers.add_type_alias('ns3::Vector3DValue&', 'ns3::VectorValue&')
---
>     typehandlers.add_type_alias(u'ns3::Vector3DValue', u'ns3::VectorValue')
>     typehandlers.add_type_alias(u'ns3::Vector3DValue*', u'ns3::VectorValue*')
>     typehandlers.add_type_alias(u'ns3::Vector3DValue&', u'ns3::VectorValue&')
456,458c301,303
<     typehandlers.add_type_alias('ns3::Vector3DChecker', 'ns3::VectorChecker')
<     typehandlers.add_type_alias('ns3::Vector3DChecker*', 'ns3::VectorChecker*')
<     typehandlers.add_type_alias('ns3::Vector3DChecker&', 'ns3::VectorChecker&')
---
>     typehandlers.add_type_alias(u'ns3::Vector3DChecker', u'ns3::VectorChecker')
>     typehandlers.add_type_alias(u'ns3::Vector3DChecker*', u'ns3::VectorChecker*')
>     typehandlers.add_type_alias(u'ns3::Vector3DChecker&', u'ns3::VectorChecker&')
488,493c333,338
<     typehandlers.add_type_alias('uint32_t ( * ) ( char const *, std::size_t const )', 'ns3::Hash::Hash32Function_ptr')
<     typehandlers.add_type_alias('uint32_t ( * ) ( char const *, std::size_t const )*', 'ns3::Hash::Hash32Function_ptr*')
<     typehandlers.add_type_alias('uint32_t ( * ) ( char const *, std::size_t const )&', 'ns3::Hash::Hash32Function_ptr&')
<     typehandlers.add_type_alias('uint64_t ( * ) ( char const *, std::size_t const )', 'ns3::Hash::Hash64Function_ptr')
<     typehandlers.add_type_alias('uint64_t ( * ) ( char const *, std::size_t const )*', 'ns3::Hash::Hash64Function_ptr*')
<     typehandlers.add_type_alias('uint64_t ( * ) ( char const *, std::size_t const )&', 'ns3::Hash::Hash64Function_ptr&')
---
>     typehandlers.add_type_alias(u'uint32_t ( * ) ( char const *, size_t ) *', u'ns3::Hash::Hash32Function_ptr')
>     typehandlers.add_type_alias(u'uint32_t ( * ) ( char const *, size_t ) **', u'ns3::Hash::Hash32Function_ptr*')
>     typehandlers.add_type_alias(u'uint32_t ( * ) ( char const *, size_t ) *&', u'ns3::Hash::Hash32Function_ptr&')
>     typehandlers.add_type_alias(u'uint64_t ( * ) ( char const *, size_t ) *', u'ns3::Hash::Hash64Function_ptr')
>     typehandlers.add_type_alias(u'uint64_t ( * ) ( char const *, size_t ) **', u'ns3::Hash::Hash64Function_ptr*')
>     typehandlers.add_type_alias(u'uint64_t ( * ) ( char const *, size_t ) *&', u'ns3::Hash::Hash64Function_ptr&')
516,518c361,363
<     typehandlers.add_type_alias('void ( * ) ( ns3::Time, ns3::Time )', 'ns3::TracedValueCallback::Time')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Time, ns3::Time )*', 'ns3::TracedValueCallback::Time*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Time, ns3::Time )&', 'ns3::TracedValueCallback::Time&')
---
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Time, ns3::Time ) *', u'ns3::TracedValueCallback::Time')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Time, ns3::Time ) **', u'ns3::TracedValueCallback::Time*')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Time, ns3::Time ) *&', u'ns3::TracedValueCallback::Time&')
525,526d369
<     register_Ns3Buffer_methods(root_module, root_module['ns3::Buffer'])
<     register_Ns3BufferIterator_methods(root_module, root_module['ns3::Buffer::Iterator'])
530,534d372
<     register_Ns3ByteTagIterator_methods(root_module, root_module['ns3::ByteTagIterator'])
<     register_Ns3ByteTagIteratorItem_methods(root_module, root_module['ns3::ByteTagIterator::Item'])
<     register_Ns3ByteTagList_methods(root_module, root_module['ns3::ByteTagList'])
<     register_Ns3ByteTagListIterator_methods(root_module, root_module['ns3::ByteTagList::Iterator'])
<     register_Ns3ByteTagListIteratorItem_methods(root_module, root_module['ns3::ByteTagList::Iterator::Item'])
537,544d374
<     register_Ns3DefaultDeleter__Ns3AttributeAccessor_methods(root_module, root_module['ns3::DefaultDeleter< ns3::AttributeAccessor >'])
<     register_Ns3DefaultDeleter__Ns3AttributeChecker_methods(root_module, root_module['ns3::DefaultDeleter< ns3::AttributeChecker >'])
<     register_Ns3DefaultDeleter__Ns3AttributeValue_methods(root_module, root_module['ns3::DefaultDeleter< ns3::AttributeValue >'])
<     register_Ns3DefaultDeleter__Ns3CallbackImplBase_methods(root_module, root_module['ns3::DefaultDeleter< ns3::CallbackImplBase >'])
<     register_Ns3DefaultDeleter__Ns3HashImplementation_methods(root_module, root_module['ns3::DefaultDeleter< ns3::Hash::Implementation >'])
<     register_Ns3DefaultDeleter__Ns3NixVector_methods(root_module, root_module['ns3::DefaultDeleter< ns3::NixVector >'])
<     register_Ns3DefaultDeleter__Ns3Packet_methods(root_module, root_module['ns3::DefaultDeleter< ns3::Packet >'])
<     register_Ns3DefaultDeleter__Ns3TraceSourceAccessor_methods(root_module, root_module['ns3::DefaultDeleter< ns3::TraceSourceAccessor >'])
550,551d379
<     register_Ns3Mac48Address_methods(root_module, root_module['ns3::Mac48Address'])
<     register_Ns3Mac8Address_methods(root_module, root_module['ns3::Mac8Address'])
556,562d383
<     register_Ns3PacketMetadata_methods(root_module, root_module['ns3::PacketMetadata'])
<     register_Ns3PacketMetadataItem_methods(root_module, root_module['ns3::PacketMetadata::Item'])
<     register_Ns3PacketMetadataItemIterator_methods(root_module, root_module['ns3::PacketMetadata::ItemIterator'])
<     register_Ns3PacketTagIterator_methods(root_module, root_module['ns3::PacketTagIterator'])
<     register_Ns3PacketTagIteratorItem_methods(root_module, root_module['ns3::PacketTagIterator::Item'])
<     register_Ns3PacketTagList_methods(root_module, root_module['ns3::PacketTagList'])
<     register_Ns3PacketTagListTagData_methods(root_module, root_module['ns3::PacketTagList::TagData'])
564d384
<     register_Ns3Tag_methods(root_module, root_module['ns3::Tag'])
574,575d393
<     register_Ns3Chunk_methods(root_module, root_module['ns3::Chunk'])
<     register_Ns3Header_methods(root_module, root_module['ns3::Header'])
595,596c413,414
<     register_Ns3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::NixVector, ns3::empty, ns3::DefaultDeleter<ns3::NixVector> >'])
<     register_Ns3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::Packet, ns3::empty, ns3::DefaultDeleter<ns3::Packet> >'])
---
>     register_Ns3SimpleRefCount__Ns3NetDeviceQueue_Ns3Empty_Ns3DefaultDeleter__lt__ns3NetDeviceQueue__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::NetDeviceQueue, ns3::empty, ns3::DefaultDeleter<ns3::NetDeviceQueue> >'])
>     register_Ns3SimpleRefCount__Ns3QueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3QueueItem__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::QueueItem, ns3::empty, ns3::DefaultDeleter<ns3::QueueItem> >'])
601d418
<     register_Ns3Trailer_methods(root_module, root_module['ns3::Trailer'])
619,620d435
<     register_Ns3ChannelCondition_methods(root_module, root_module['ns3::ChannelCondition'])
<     register_Ns3ChannelConditionModel_methods(root_module, root_module['ns3::ChannelConditionModel'])
648,649d462
<     register_Ns3Mac48AddressChecker_methods(root_module, root_module['ns3::Mac48AddressChecker'])
<     register_Ns3Mac48AddressValue_methods(root_module, root_module['ns3::Mac48AddressValue'])
652d464
<     register_Ns3MobilityModel_methods(root_module, root_module['ns3::MobilityModel'])
655,656c467,468
<     register_Ns3NeverLosChannelConditionModel_methods(root_module, root_module['ns3::NeverLosChannelConditionModel'])
<     register_Ns3NixVector_methods(root_module, root_module['ns3::NixVector'])
---
>     register_Ns3NetDeviceQueue_methods(root_module, root_module['ns3::NetDeviceQueue'])
>     register_Ns3NetDeviceQueueInterface_methods(root_module, root_module['ns3::NetDeviceQueueInterface'])
662,663d473
<     register_Ns3OutdoorPositionAllocator_methods(root_module, root_module['ns3::OutdoorPositionAllocator'])
<     register_Ns3Packet_methods(root_module, root_module['ns3::Packet'])
665,670c475
<     register_Ns3ThreeGppChannelConditionModel_methods(root_module, root_module['ns3::ThreeGppChannelConditionModel'])
<     register_Ns3ThreeGppIndoorMixedOfficeChannelConditionModel_methods(root_module, root_module['ns3::ThreeGppIndoorMixedOfficeChannelConditionModel'])
<     register_Ns3ThreeGppIndoorOpenOfficeChannelConditionModel_methods(root_module, root_module['ns3::ThreeGppIndoorOpenOfficeChannelConditionModel'])
<     register_Ns3ThreeGppRmaChannelConditionModel_methods(root_module, root_module['ns3::ThreeGppRmaChannelConditionModel'])
<     register_Ns3ThreeGppUmaChannelConditionModel_methods(root_module, root_module['ns3::ThreeGppUmaChannelConditionModel'])
<     register_Ns3ThreeGppUmiStreetCanyonChannelConditionModel_methods(root_module, root_module['ns3::ThreeGppUmiStreetCanyonChannelConditionModel'])
---
>     register_Ns3QueueItem_methods(root_module, root_module['ns3::QueueItem'])
680,685d484
<     register_Ns3AlwaysLosChannelConditionModel_methods(root_module, root_module['ns3::AlwaysLosChannelConditionModel'])
<     register_Ns3BuildingsChannelConditionModel_methods(root_module, root_module['ns3::BuildingsChannelConditionModel'])
<     register_Ns3CallbackImpl__Ns3ObjectBase___star___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
<     register_Ns3CallbackImpl__Void_Ns3Ptr__lt__const_ns3MobilityModel__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<const ns3::MobilityModel>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
<     register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3NetDevice__gt___Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Const_ns3Address___amp___Const_ns3Address___amp___Ns3NetDevicePacketType_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >'])
<     register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3NetDevice__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<ns3::NetDevice>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
694,695d492
<     cls.add_binary_comparison_operator('==')
<     cls.add_binary_comparison_operator('!=')
696a494
>     cls.add_binary_comparison_operator('!=')
697a496
>     cls.add_binary_comparison_operator('==')
702c501
<     ## address.h (module 'network'): ns3::Address::Address(ns3::Address const & address) [constructor]
---
>     ## address.h (module 'network'): ns3::Address::Address(ns3::Address const & address) [copy constructor]
764c563
<     ## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList::AttributeConstructionList(ns3::AttributeConstructionList const & arg0) [constructor]
---
>     ## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList::AttributeConstructionList(ns3::AttributeConstructionList const & arg0) [copy constructor]
768c567
<     ## attribute-construction-list.h (module 'core'): void ns3::AttributeConstructionList::Add(std::string name, ns3::Ptr<const ns3::AttributeChecker> checker, ns3::Ptr<ns3::AttributeValue> value) [member function]
---
>     ## attribute-construction-list.h (module 'core'): void ns3::AttributeConstructionList::Add(std::string name, ns3::Ptr<ns3::AttributeChecker const> checker, ns3::Ptr<ns3::AttributeValue> value) [member function]
772c571
<     ## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList::CIterator ns3::AttributeConstructionList::Begin() const [member function]
---
>     ## attribute-construction-list.h (module 'core'): std::_List_const_iterator<ns3::AttributeConstructionList::Item> ns3::AttributeConstructionList::Begin() const [member function]
774c573
<                    'ns3::AttributeConstructionList::CIterator', 
---
>                    'std::_List_const_iterator< ns3::AttributeConstructionList::Item >', 
777c576
<     ## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList::CIterator ns3::AttributeConstructionList::End() const [member function]
---
>     ## attribute-construction-list.h (module 'core'): std::_List_const_iterator<ns3::AttributeConstructionList::Item> ns3::AttributeConstructionList::End() const [member function]
779c578
<                    'ns3::AttributeConstructionList::CIterator', 
---
>                    'std::_List_const_iterator< ns3::AttributeConstructionList::Item >', 
782c581
<     ## attribute-construction-list.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::AttributeConstructionList::Find(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
---
>     ## attribute-construction-list.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::AttributeConstructionList::Find(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
792c591
<     ## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList::Item::Item(ns3::AttributeConstructionList::Item const & arg0) [constructor]
---
>     ## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList::Item::Item(ns3::AttributeConstructionList::Item const & arg0) [copy constructor]
804c603
<     ## box.h (module 'mobility'): ns3::Box::Box(ns3::Box const & arg0) [constructor]
---
>     ## box.h (module 'mobility'): ns3::Box::Box(ns3::Box const & arg0) [copy constructor]
825,829d623
<     ## box.h (module 'mobility'): bool ns3::Box::IsIntersect(ns3::Vector const & l1, ns3::Vector const & l2) const [member function]
<     cls.add_method('IsIntersect', 
<                    'bool', 
<                    [param('ns3::Vector const &', 'l1'), param('ns3::Vector const &', 'l2')], 
<                    is_const=True)
844,1083d637
< def register_Ns3Buffer_methods(root_module, cls):
<     ## buffer.h (module 'network'): ns3::Buffer::Buffer(ns3::Buffer const & o) [constructor]
<     cls.add_constructor([param('ns3::Buffer const &', 'o')])
<     ## buffer.h (module 'network'): ns3::Buffer::Buffer() [constructor]
<     cls.add_constructor([])
<     ## buffer.h (module 'network'): ns3::Buffer::Buffer(uint32_t dataSize) [constructor]
<     cls.add_constructor([param('uint32_t', 'dataSize')])
<     ## buffer.h (module 'network'): ns3::Buffer::Buffer(uint32_t dataSize, bool initialize) [constructor]
<     cls.add_constructor([param('uint32_t', 'dataSize'), param('bool', 'initialize')])
<     ## buffer.h (module 'network'): void ns3::Buffer::AddAtEnd(uint32_t end) [member function]
<     cls.add_method('AddAtEnd', 
<                    'void', 
<                    [param('uint32_t', 'end')])
<     ## buffer.h (module 'network'): void ns3::Buffer::AddAtEnd(ns3::Buffer const & o) [member function]
<     cls.add_method('AddAtEnd', 
<                    'void', 
<                    [param('ns3::Buffer const &', 'o')])
<     ## buffer.h (module 'network'): void ns3::Buffer::AddAtStart(uint32_t start) [member function]
<     cls.add_method('AddAtStart', 
<                    'void', 
<                    [param('uint32_t', 'start')])
<     ## buffer.h (module 'network'): ns3::Buffer::Iterator ns3::Buffer::Begin() const [member function]
<     cls.add_method('Begin', 
<                    'ns3::Buffer::Iterator', 
<                    [], 
<                    is_const=True)
<     ## buffer.h (module 'network'): void ns3::Buffer::CopyData(std::ostream * os, uint32_t size) const [member function]
<     cls.add_method('CopyData', 
<                    'void', 
<                    [param('std::ostream *', 'os'), param('uint32_t', 'size')], 
<                    is_const=True)
<     ## buffer.h (module 'network'): uint32_t ns3::Buffer::CopyData(uint8_t * buffer, uint32_t size) const [member function]
<     cls.add_method('CopyData', 
<                    'uint32_t', 
<                    [param('uint8_t *', 'buffer'), param('uint32_t', 'size')], 
<                    is_const=True)
<     ## buffer.h (module 'network'): ns3::Buffer ns3::Buffer::CreateFragment(uint32_t start, uint32_t length) const [member function]
<     cls.add_method('CreateFragment', 
<                    'ns3::Buffer', 
<                    [param('uint32_t', 'start'), param('uint32_t', 'length')], 
<                    is_const=True)
<     ## buffer.h (module 'network'): uint32_t ns3::Buffer::Deserialize(uint8_t const * buffer, uint32_t size) [member function]
<     cls.add_method('Deserialize', 
<                    'uint32_t', 
<                    [param('uint8_t const *', 'buffer'), param('uint32_t', 'size')])
<     ## buffer.h (module 'network'): ns3::Buffer::Iterator ns3::Buffer::End() const [member function]
<     cls.add_method('End', 
<                    'ns3::Buffer::Iterator', 
<                    [], 
<                    is_const=True)
<     ## buffer.h (module 'network'): uint32_t ns3::Buffer::GetSerializedSize() const [member function]
<     cls.add_method('GetSerializedSize', 
<                    'uint32_t', 
<                    [], 
<                    is_const=True)
<     ## buffer.h (module 'network'): uint32_t ns3::Buffer::GetSize() const [member function]
<     cls.add_method('GetSize', 
<                    'uint32_t', 
<                    [], 
<                    is_const=True)
<     ## buffer.h (module 'network'): uint8_t const * ns3::Buffer::PeekData() const [member function]
<     cls.add_method('PeekData', 
<                    'uint8_t const *', 
<                    [], 
<                    is_const=True)
<     ## buffer.h (module 'network'): void ns3::Buffer::RemoveAtEnd(uint32_t end) [member function]
<     cls.add_method('RemoveAtEnd', 
<                    'void', 
<                    [param('uint32_t', 'end')])
<     ## buffer.h (module 'network'): void ns3::Buffer::RemoveAtStart(uint32_t start) [member function]
<     cls.add_method('RemoveAtStart', 
<                    'void', 
<                    [param('uint32_t', 'start')])
<     ## buffer.h (module 'network'): uint32_t ns3::Buffer::Serialize(uint8_t * buffer, uint32_t maxSize) const [member function]
<     cls.add_method('Serialize', 
<                    'uint32_t', 
<                    [param('uint8_t *', 'buffer'), param('uint32_t', 'maxSize')], 
<                    is_const=True)
<     return
< 
< def register_Ns3BufferIterator_methods(root_module, cls):
<     ## buffer.h (module 'network'): ns3::Buffer::Iterator::Iterator(ns3::Buffer::Iterator const & arg0) [constructor]
<     cls.add_constructor([param('ns3::Buffer::Iterator const &', 'arg0')])
<     ## buffer.h (module 'network'): ns3::Buffer::Iterator::Iterator() [constructor]
<     cls.add_constructor([])
<     ## buffer.h (module 'network'): uint16_t ns3::Buffer::Iterator::CalculateIpChecksum(uint16_t size) [member function]
<     cls.add_method('CalculateIpChecksum', 
<                    'uint16_t', 
<                    [param('uint16_t', 'size')])
<     ## buffer.h (module 'network'): uint16_t ns3::Buffer::Iterator::CalculateIpChecksum(uint16_t size, uint32_t initialChecksum) [member function]
<     cls.add_method('CalculateIpChecksum', 
<                    'uint16_t', 
<                    [param('uint16_t', 'size'), param('uint32_t', 'initialChecksum')])
<     ## buffer.h (module 'network'): uint32_t ns3::Buffer::Iterator::GetDistanceFrom(ns3::Buffer::Iterator const & o) const [member function]
<     cls.add_method('GetDistanceFrom', 
<                    'uint32_t', 
<                    [param('ns3::Buffer::Iterator const &', 'o')], 
<                    is_const=True)
<     ## buffer.h (module 'network'): uint32_t ns3::Buffer::Iterator::GetRemainingSize() const [member function]
<     cls.add_method('GetRemainingSize', 
<                    'uint32_t', 
<                    [], 
<                    is_const=True)
<     ## buffer.h (module 'network'): uint32_t ns3::Buffer::Iterator::GetSize() const [member function]
<     cls.add_method('GetSize', 
<                    'uint32_t', 
<                    [], 
<                    is_const=True)
<     ## buffer.h (module 'network'): bool ns3::Buffer::Iterator::IsEnd() const [member function]
<     cls.add_method('IsEnd', 
<                    'bool', 
<                    [], 
<                    is_const=True)
<     ## buffer.h (module 'network'): bool ns3::Buffer::Iterator::IsStart() const [member function]
<     cls.add_method('IsStart', 
<                    'bool', 
<                    [], 
<                    is_const=True)
<     ## buffer.h (module 'network'): void ns3::Buffer::Iterator::Next() [member function]
<     cls.add_method('Next', 
<                    'void', 
<                    [])
<     ## buffer.h (module 'network'): void ns3::Buffer::Iterator::Next(uint32_t delta) [member function]
<     cls.add_method('Next', 
<                    'void', 
<                    [param('uint32_t', 'delta')])
<     ## buffer.h (module 'network'): uint8_t ns3::Buffer::Iterator::PeekU8() [member function]
<     cls.add_method('PeekU8', 
<                    'uint8_t', 
<                    [])
<     ## buffer.h (module 'network'): void ns3::Buffer::Iterator::Prev() [member function]
<     cls.add_method('Prev', 
<                    'void', 
<                    [])
<     ## buffer.h (module 'network'): void ns3::Buffer::Iterator::Prev(uint32_t delta) [member function]
<     cls.add_method('Prev', 
<                    'void', 
<                    [param('uint32_t', 'delta')])
<     ## buffer.h (module 'network'): void ns3::Buffer::Iterator::Read(uint8_t * buffer, uint32_t size) [member function]
<     cls.add_method('Read', 
<                    'void', 
<                    [param('uint8_t *', 'buffer'), param('uint32_t', 'size')])
<     ## buffer.h (module 'network'): void ns3::Buffer::Iterator::Read(ns3::Buffer::Iterator start, uint32_t size) [member function]
<     cls.add_method('Read', 
<                    'void', 
<                    [param('ns3::Buffer::Iterator', 'start'), param('uint32_t', 'size')])
<     ## buffer.h (module 'network'): uint16_t ns3::Buffer::Iterator::ReadLsbtohU16() [member function]
<     cls.add_method('ReadLsbtohU16', 
<                    'uint16_t', 
<                    [])
<     ## buffer.h (module 'network'): uint32_t ns3::Buffer::Iterator::ReadLsbtohU32() [member function]
<     cls.add_method('ReadLsbtohU32', 
<                    'uint32_t', 
<                    [])
<     ## buffer.h (module 'network'): uint64_t ns3::Buffer::Iterator::ReadLsbtohU64() [member function]
<     cls.add_method('ReadLsbtohU64', 
<                    'uint64_t', 
<                    [])
<     ## buffer.h (module 'network'): uint16_t ns3::Buffer::Iterator::ReadNtohU16() [member function]
<     cls.add_method('ReadNtohU16', 
<                    'uint16_t', 
<                    [])
<     ## buffer.h (module 'network'): uint32_t ns3::Buffer::Iterator::ReadNtohU32() [member function]
<     cls.add_method('ReadNtohU32', 
<                    'uint32_t', 
<                    [])
<     ## buffer.h (module 'network'): uint64_t ns3::Buffer::Iterator::ReadNtohU64() [member function]
<     cls.add_method('ReadNtohU64', 
<                    'uint64_t', 
<                    [])
<     ## buffer.h (module 'network'): uint16_t ns3::Buffer::Iterator::ReadU16() [member function]
<     cls.add_method('ReadU16', 
<                    'uint16_t', 
<                    [])
<     ## buffer.h (module 'network'): uint32_t ns3::Buffer::Iterator::ReadU32() [member function]
<     cls.add_method('ReadU32', 
<                    'uint32_t', 
<                    [])
<     ## buffer.h (module 'network'): uint64_t ns3::Buffer::Iterator::ReadU64() [member function]
<     cls.add_method('ReadU64', 
<                    'uint64_t', 
<                    [])
<     ## buffer.h (module 'network'): uint8_t ns3::Buffer::Iterator::ReadU8() [member function]
<     cls.add_method('ReadU8', 
<                    'uint8_t', 
<                    [])
<     ## buffer.h (module 'network'): void ns3::Buffer::Iterator::Write(uint8_t const * buffer, uint32_t size) [member function]
<     cls.add_method('Write', 
<                    'void', 
<                    [param('uint8_t const *', 'buffer'), param('uint32_t', 'size')])
<     ## buffer.h (module 'network'): void ns3::Buffer::Iterator::Write(ns3::Buffer::Iterator start, ns3::Buffer::Iterator end) [member function]
<     cls.add_method('Write', 
<                    'void', 
<                    [param('ns3::Buffer::Iterator', 'start'), param('ns3::Buffer::Iterator', 'end')])
<     ## buffer.h (module 'network'): void ns3::Buffer::Iterator::WriteHtolsbU16(uint16_t data) [member function]
<     cls.add_method('WriteHtolsbU16', 
<                    'void', 
<                    [param('uint16_t', 'data')])
<     ## buffer.h (module 'network'): void ns3::Buffer::Iterator::WriteHtolsbU32(uint32_t data) [member function]
<     cls.add_method('WriteHtolsbU32', 
<                    'void', 
<                    [param('uint32_t', 'data')])
<     ## buffer.h (module 'network'): void ns3::Buffer::Iterator::WriteHtolsbU64(uint64_t data) [member function]
<     cls.add_method('WriteHtolsbU64', 
<                    'void', 
<                    [param('uint64_t', 'data')])
<     ## buffer.h (module 'network'): void ns3::Buffer::Iterator::WriteHtonU16(uint16_t data) [member function]
<     cls.add_method('WriteHtonU16', 
<                    'void', 
<                    [param('uint16_t', 'data')])
<     ## buffer.h (module 'network'): void ns3::Buffer::Iterator::WriteHtonU32(uint32_t data) [member function]
<     cls.add_method('WriteHtonU32', 
<                    'void', 
<                    [param('uint32_t', 'data')])
<     ## buffer.h (module 'network'): void ns3::Buffer::Iterator::WriteHtonU64(uint64_t data) [member function]
<     cls.add_method('WriteHtonU64', 
<                    'void', 
<                    [param('uint64_t', 'data')])
<     ## buffer.h (module 'network'): void ns3::Buffer::Iterator::WriteU16(uint16_t data) [member function]
<     cls.add_method('WriteU16', 
<                    'void', 
<                    [param('uint16_t', 'data')])
<     ## buffer.h (module 'network'): void ns3::Buffer::Iterator::WriteU32(uint32_t data) [member function]
<     cls.add_method('WriteU32', 
<                    'void', 
<                    [param('uint32_t', 'data')])
<     ## buffer.h (module 'network'): void ns3::Buffer::Iterator::WriteU64(uint64_t data) [member function]
<     cls.add_method('WriteU64', 
<                    'void', 
<                    [param('uint64_t', 'data')])
<     ## buffer.h (module 'network'): void ns3::Buffer::Iterator::WriteU8(uint8_t data) [member function]
<     cls.add_method('WriteU8', 
<                    'void', 
<                    [param('uint8_t', 'data')])
<     ## buffer.h (module 'network'): void ns3::Buffer::Iterator::WriteU8(uint8_t data, uint32_t len) [member function]
<     cls.add_method('WriteU8', 
<                    'void', 
<                    [param('uint8_t', 'data'), param('uint32_t', 'len')])
<     return
< 
1085c639
<     ## building-container.h (module 'buildings'): ns3::BuildingContainer::BuildingContainer(ns3::BuildingContainer const & arg0) [constructor]
---
>     ## building-container.h (module 'buildings'): ns3::BuildingContainer::BuildingContainer(ns3::BuildingContainer const & arg0) [copy constructor]
1105c659
<     ## building-container.h (module 'buildings'): ns3::BuildingContainer::Iterator ns3::BuildingContainer::Begin() const [member function]
---
>     ## building-container.h (module 'buildings'): __gnu_cxx::__normal_iterator<const ns3::Ptr<ns3::Building>*,std::vector<ns3::Ptr<ns3::Building>, std::allocator<ns3::Ptr<ns3::Building> > > > ns3::BuildingContainer::Begin() const [member function]
1107c661
<                    'ns3::BuildingContainer::Iterator', 
---
>                    '__gnu_cxx::__normal_iterator< ns3::Ptr< ns3::Building > const, std::vector< ns3::Ptr< ns3::Building > > >', 
1114c668
<     ## building-container.h (module 'buildings'): ns3::BuildingContainer::Iterator ns3::BuildingContainer::End() const [member function]
---
>     ## building-container.h (module 'buildings'): __gnu_cxx::__normal_iterator<const ns3::Ptr<ns3::Building>*,std::vector<ns3::Ptr<ns3::Building>, std::allocator<ns3::Ptr<ns3::Building> > > > ns3::BuildingContainer::End() const [member function]
1116c670
<                    'ns3::BuildingContainer::Iterator', 
---
>                    '__gnu_cxx::__normal_iterator< ns3::Ptr< ns3::Building > const, std::vector< ns3::Ptr< ns3::Building > > >', 
1139c693
<     ## building-list.h (module 'buildings'): ns3::BuildingList::BuildingList(ns3::BuildingList const & arg0) [constructor]
---
>     ## building-list.h (module 'buildings'): ns3::BuildingList::BuildingList(ns3::BuildingList const & arg0) [copy constructor]
1146c700
<     ## building-list.h (module 'buildings'): static ns3::BuildingList::Iterator ns3::BuildingList::Begin() [member function]
---
>     ## building-list.h (module 'buildings'): static __gnu_cxx::__normal_iterator<const ns3::Ptr<ns3::Building>*,std::vector<ns3::Ptr<ns3::Building>, std::allocator<ns3::Ptr<ns3::Building> > > > ns3::BuildingList::Begin() [member function]
1148c702
<                    'ns3::BuildingList::Iterator', 
---
>                    '__gnu_cxx::__normal_iterator< ns3::Ptr< ns3::Building > const, std::vector< ns3::Ptr< ns3::Building > > >', 
1151c705
<     ## building-list.h (module 'buildings'): static ns3::BuildingList::Iterator ns3::BuildingList::End() [member function]
---
>     ## building-list.h (module 'buildings'): static __gnu_cxx::__normal_iterator<const ns3::Ptr<ns3::Building>*,std::vector<ns3::Ptr<ns3::Building>, std::allocator<ns3::Ptr<ns3::Building> > > > ns3::BuildingList::End() [member function]
1153c707
<                    'ns3::BuildingList::Iterator', 
---
>                    '__gnu_cxx::__normal_iterator< ns3::Ptr< ns3::Building > const, std::vector< ns3::Ptr< ns3::Building > > >', 
1171c725
<     ## buildings-helper.h (module 'buildings'): ns3::BuildingsHelper::BuildingsHelper(ns3::BuildingsHelper const & arg0) [constructor]
---
>     ## buildings-helper.h (module 'buildings'): ns3::BuildingsHelper::BuildingsHelper(ns3::BuildingsHelper const & arg0) [copy constructor]
1183c737
<     ## buildings-helper.h (module 'buildings'): static void ns3::BuildingsHelper::MakeConsistent(ns3::Ptr<ns3::MobilityModel> mm) [member function]
---
>     ## buildings-helper.h (module 'buildings'): static void ns3::BuildingsHelper::MakeConsistent(ns3::Ptr<ns3::MobilityModel> bmm) [member function]
1186,1187c740,741
<                    [param('ns3::Ptr< ns3::MobilityModel >', 'mm')], 
<                    deprecated=True, is_static=True)
---
>                    [param('ns3::Ptr< ns3::MobilityModel >', 'bmm')], 
>                    is_static=True)
1192,1303c746
<                    deprecated=True, is_static=True)
<     return
< 
< def register_Ns3ByteTagIterator_methods(root_module, cls):
<     ## packet.h (module 'network'): ns3::ByteTagIterator::ByteTagIterator(ns3::ByteTagIterator const & arg0) [constructor]
<     cls.add_constructor([param('ns3::ByteTagIterator const &', 'arg0')])
<     ## packet.h (module 'network'): bool ns3::ByteTagIterator::HasNext() const [member function]
<     cls.add_method('HasNext', 
<                    'bool', 
<                    [], 
<                    is_const=True)
<     ## packet.h (module 'network'): ns3::ByteTagIterator::Item ns3::ByteTagIterator::Next() [member function]
<     cls.add_method('Next', 
<                    'ns3::ByteTagIterator::Item', 
<                    [])
<     return
< 
< def register_Ns3ByteTagIteratorItem_methods(root_module, cls):
<     ## packet.h (module 'network'): ns3::ByteTagIterator::Item::Item(ns3::ByteTagIterator::Item const & arg0) [constructor]
<     cls.add_constructor([param('ns3::ByteTagIterator::Item const &', 'arg0')])
<     ## packet.h (module 'network'): uint32_t ns3::ByteTagIterator::Item::GetEnd() const [member function]
<     cls.add_method('GetEnd', 
<                    'uint32_t', 
<                    [], 
<                    is_const=True)
<     ## packet.h (module 'network'): uint32_t ns3::ByteTagIterator::Item::GetStart() const [member function]
<     cls.add_method('GetStart', 
<                    'uint32_t', 
<                    [], 
<                    is_const=True)
<     ## packet.h (module 'network'): void ns3::ByteTagIterator::Item::GetTag(ns3::Tag & tag) const [member function]
<     cls.add_method('GetTag', 
<                    'void', 
<                    [param('ns3::Tag &', 'tag')], 
<                    is_const=True)
<     ## packet.h (module 'network'): ns3::TypeId ns3::ByteTagIterator::Item::GetTypeId() const [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_const=True)
<     return
< 
< def register_Ns3ByteTagList_methods(root_module, cls):
<     ## byte-tag-list.h (module 'network'): ns3::ByteTagList::ByteTagList() [constructor]
<     cls.add_constructor([])
<     ## byte-tag-list.h (module 'network'): ns3::ByteTagList::ByteTagList(ns3::ByteTagList const & o) [constructor]
<     cls.add_constructor([param('ns3::ByteTagList const &', 'o')])
<     ## byte-tag-list.h (module 'network'): ns3::TagBuffer ns3::ByteTagList::Add(ns3::TypeId tid, uint32_t bufferSize, int32_t start, int32_t end) [member function]
<     cls.add_method('Add', 
<                    'ns3::TagBuffer', 
<                    [param('ns3::TypeId', 'tid'), param('uint32_t', 'bufferSize'), param('int32_t', 'start'), param('int32_t', 'end')])
<     ## byte-tag-list.h (module 'network'): void ns3::ByteTagList::Add(ns3::ByteTagList const & o) [member function]
<     cls.add_method('Add', 
<                    'void', 
<                    [param('ns3::ByteTagList const &', 'o')])
<     ## byte-tag-list.h (module 'network'): void ns3::ByteTagList::AddAtEnd(int32_t appendOffset) [member function]
<     cls.add_method('AddAtEnd', 
<                    'void', 
<                    [param('int32_t', 'appendOffset')])
<     ## byte-tag-list.h (module 'network'): void ns3::ByteTagList::AddAtStart(int32_t prependOffset) [member function]
<     cls.add_method('AddAtStart', 
<                    'void', 
<                    [param('int32_t', 'prependOffset')])
<     ## byte-tag-list.h (module 'network'): void ns3::ByteTagList::Adjust(int32_t adjustment) [member function]
<     cls.add_method('Adjust', 
<                    'void', 
<                    [param('int32_t', 'adjustment')])
<     ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator ns3::ByteTagList::Begin(int32_t offsetStart, int32_t offsetEnd) const [member function]
<     cls.add_method('Begin', 
<                    'ns3::ByteTagList::Iterator', 
<                    [param('int32_t', 'offsetStart'), param('int32_t', 'offsetEnd')], 
<                    is_const=True)
<     ## byte-tag-list.h (module 'network'): void ns3::ByteTagList::RemoveAll() [member function]
<     cls.add_method('RemoveAll', 
<                    'void', 
<                    [])
<     return
< 
< def register_Ns3ByteTagListIterator_methods(root_module, cls):
<     ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator::Iterator(ns3::ByteTagList::Iterator const & arg0) [constructor]
<     cls.add_constructor([param('ns3::ByteTagList::Iterator const &', 'arg0')])
<     ## byte-tag-list.h (module 'network'): uint32_t ns3::ByteTagList::Iterator::GetOffsetStart() const [member function]
<     cls.add_method('GetOffsetStart', 
<                    'uint32_t', 
<                    [], 
<                    is_const=True)
<     ## byte-tag-list.h (module 'network'): bool ns3::ByteTagList::Iterator::HasNext() const [member function]
<     cls.add_method('HasNext', 
<                    'bool', 
<                    [], 
<                    is_const=True)
<     ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator::Item ns3::ByteTagList::Iterator::Next() [member function]
<     cls.add_method('Next', 
<                    'ns3::ByteTagList::Iterator::Item', 
<                    [])
<     return
< 
< def register_Ns3ByteTagListIteratorItem_methods(root_module, cls):
<     ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator::Item::Item(ns3::ByteTagList::Iterator::Item const & arg0) [constructor]
<     cls.add_constructor([param('ns3::ByteTagList::Iterator::Item const &', 'arg0')])
<     ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator::Item::Item(ns3::TagBuffer buf) [constructor]
<     cls.add_constructor([param('ns3::TagBuffer', 'buf')])
<     ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator::Item::buf [variable]
<     cls.add_instance_attribute('buf', 'ns3::TagBuffer', is_const=False)
<     ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator::Item::end [variable]
<     cls.add_instance_attribute('end', 'int32_t', is_const=False)
<     ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator::Item::size [variable]
<     cls.add_instance_attribute('size', 'uint32_t', is_const=False)
<     ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator::Item::start [variable]
<     cls.add_instance_attribute('start', 'int32_t', is_const=False)
<     ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator::Item::tid [variable]
<     cls.add_instance_attribute('tid', 'ns3::TypeId', is_const=False)
---
>                    is_static=True)
1307c750
<     ## callback.h (module 'core'): ns3::CallbackBase::CallbackBase(ns3::CallbackBase const & arg0) [constructor]
---
>     ## callback.h (module 'core'): ns3::CallbackBase::CallbackBase(ns3::CallbackBase const & arg0) [copy constructor]
1322c765
<     ## constant-velocity-helper.h (module 'mobility'): ns3::ConstantVelocityHelper::ConstantVelocityHelper(ns3::ConstantVelocityHelper const & arg0) [constructor]
---
>     ## constant-velocity-helper.h (module 'mobility'): ns3::ConstantVelocityHelper::ConstantVelocityHelper(ns3::ConstantVelocityHelper const & arg0) [copy constructor]
1373,1468d815
< def register_Ns3DefaultDeleter__Ns3AttributeAccessor_methods(root_module, cls):
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::AttributeAccessor>::DefaultDeleter() [constructor]
<     cls.add_constructor([])
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::AttributeAccessor>::DefaultDeleter(ns3::DefaultDeleter<ns3::AttributeAccessor> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::DefaultDeleter< ns3::AttributeAccessor > const &', 'arg0')])
<     ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::AttributeAccessor>::Delete(ns3::AttributeAccessor * object) [member function]
<     cls.add_method('Delete', 
<                    'void', 
<                    [param('ns3::AttributeAccessor *', 'object')], 
<                    is_static=True)
<     return
< 
< def register_Ns3DefaultDeleter__Ns3AttributeChecker_methods(root_module, cls):
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::AttributeChecker>::DefaultDeleter() [constructor]
<     cls.add_constructor([])
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::AttributeChecker>::DefaultDeleter(ns3::DefaultDeleter<ns3::AttributeChecker> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::DefaultDeleter< ns3::AttributeChecker > const &', 'arg0')])
<     ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::AttributeChecker>::Delete(ns3::AttributeChecker * object) [member function]
<     cls.add_method('Delete', 
<                    'void', 
<                    [param('ns3::AttributeChecker *', 'object')], 
<                    is_static=True)
<     return
< 
< def register_Ns3DefaultDeleter__Ns3AttributeValue_methods(root_module, cls):
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::AttributeValue>::DefaultDeleter() [constructor]
<     cls.add_constructor([])
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::AttributeValue>::DefaultDeleter(ns3::DefaultDeleter<ns3::AttributeValue> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::DefaultDeleter< ns3::AttributeValue > const &', 'arg0')])
<     ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::AttributeValue>::Delete(ns3::AttributeValue * object) [member function]
<     cls.add_method('Delete', 
<                    'void', 
<                    [param('ns3::AttributeValue *', 'object')], 
<                    is_static=True)
<     return
< 
< def register_Ns3DefaultDeleter__Ns3CallbackImplBase_methods(root_module, cls):
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::CallbackImplBase>::DefaultDeleter() [constructor]
<     cls.add_constructor([])
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::CallbackImplBase>::DefaultDeleter(ns3::DefaultDeleter<ns3::CallbackImplBase> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::DefaultDeleter< ns3::CallbackImplBase > const &', 'arg0')])
<     ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::CallbackImplBase>::Delete(ns3::CallbackImplBase * object) [member function]
<     cls.add_method('Delete', 
<                    'void', 
<                    [param('ns3::CallbackImplBase *', 'object')], 
<                    is_static=True)
<     return
< 
< def register_Ns3DefaultDeleter__Ns3HashImplementation_methods(root_module, cls):
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::Hash::Implementation>::DefaultDeleter() [constructor]
<     cls.add_constructor([])
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::Hash::Implementation>::DefaultDeleter(ns3::DefaultDeleter<ns3::Hash::Implementation> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::DefaultDeleter< ns3::Hash::Implementation > const &', 'arg0')])
<     ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::Hash::Implementation>::Delete(ns3::Hash::Implementation * object) [member function]
<     cls.add_method('Delete', 
<                    'void', 
<                    [param('ns3::Hash::Implementation *', 'object')], 
<                    is_static=True)
<     return
< 
< def register_Ns3DefaultDeleter__Ns3NixVector_methods(root_module, cls):
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::NixVector>::DefaultDeleter() [constructor]
<     cls.add_constructor([])
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::NixVector>::DefaultDeleter(ns3::DefaultDeleter<ns3::NixVector> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::DefaultDeleter< ns3::NixVector > const &', 'arg0')])
<     ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::NixVector>::Delete(ns3::NixVector * object) [member function]
<     cls.add_method('Delete', 
<                    'void', 
<                    [param('ns3::NixVector *', 'object')], 
<                    is_static=True)
<     return
< 
< def register_Ns3DefaultDeleter__Ns3Packet_methods(root_module, cls):
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::Packet>::DefaultDeleter() [constructor]
<     cls.add_constructor([])
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::Packet>::DefaultDeleter(ns3::DefaultDeleter<ns3::Packet> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::DefaultDeleter< ns3::Packet > const &', 'arg0')])
<     ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::Packet>::Delete(ns3::Packet * object) [member function]
<     cls.add_method('Delete', 
<                    'void', 
<                    [param('ns3::Packet *', 'object')], 
<                    is_static=True)
<     return
< 
< def register_Ns3DefaultDeleter__Ns3TraceSourceAccessor_methods(root_module, cls):
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::TraceSourceAccessor>::DefaultDeleter() [constructor]
<     cls.add_constructor([])
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::TraceSourceAccessor>::DefaultDeleter(ns3::DefaultDeleter<ns3::TraceSourceAccessor> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::DefaultDeleter< ns3::TraceSourceAccessor > const &', 'arg0')])
<     ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::TraceSourceAccessor>::Delete(ns3::TraceSourceAccessor * object) [member function]
<     cls.add_method('Delete', 
<                    'void', 
<                    [param('ns3::TraceSourceAccessor *', 'object')], 
<                    is_static=True)
<     return
< 
1470c817
<     ## hash.h (module 'core'): ns3::Hasher::Hasher(ns3::Hasher const & arg0) [constructor]
---
>     ## hash.h (module 'core'): ns3::Hasher::Hasher(ns3::Hasher const & arg0) [copy constructor]
1476c823
<     ## hash.h (module 'core'): uint32_t ns3::Hasher::GetHash32(char const * buffer, std::size_t const size) [member function]
---
>     ## hash.h (module 'core'): uint32_t ns3::Hasher::GetHash32(char const * buffer, size_t const size) [member function]
1479c826
<                    [param('char const *', 'buffer'), param('std::size_t const', 'size')])
---
>                    [param('char const *', 'buffer'), param('size_t const', 'size')])
1484c831
<     ## hash.h (module 'core'): uint64_t ns3::Hasher::GetHash64(char const * buffer, std::size_t const size) [member function]
---
>     ## hash.h (module 'core'): uint64_t ns3::Hasher::GetHash64(char const * buffer, size_t const size) [member function]
1487c834
<                    [param('char const *', 'buffer'), param('std::size_t const', 'size')])
---
>                    [param('char const *', 'buffer'), param('size_t const', 'size')])
1498a846,847
>     cls.add_binary_comparison_operator('<')
>     cls.add_binary_comparison_operator('!=')
1501,1503c850
<     cls.add_binary_comparison_operator('!=')
<     cls.add_binary_comparison_operator('<')
<     ## ipv4-address.h (module 'network'): ns3::Ipv4Address::Ipv4Address(ns3::Ipv4Address const & arg0) [constructor]
---
>     ## ipv4-address.h (module 'network'): ns3::Ipv4Address::Ipv4Address(ns3::Ipv4Address const & arg0) [copy constructor]
1570c917
<                    is_const=True, deprecated=True)
---
>                    is_const=True)
1616a964
>     cls.add_binary_comparison_operator('!=')
1619,1620c967
<     cls.add_binary_comparison_operator('!=')
<     ## ipv4-address.h (module 'network'): ns3::Ipv4Mask::Ipv4Mask(ns3::Ipv4Mask const & arg0) [constructor]
---
>     ## ipv4-address.h (module 'network'): ns3::Ipv4Mask::Ipv4Mask(ns3::Ipv4Mask const & arg0) [copy constructor]
1662c1009
<                    is_const=True, deprecated=True)
---
>                    is_const=True)
1679a1027,1028
>     cls.add_binary_comparison_operator('<')
>     cls.add_binary_comparison_operator('!=')
1682,1683d1030
<     cls.add_binary_comparison_operator('!=')
<     cls.add_binary_comparison_operator('<')
1690c1037
<     ## ipv6-address.h (module 'network'): ns3::Ipv6Address::Ipv6Address(ns3::Ipv6Address const & addr) [constructor]
---
>     ## ipv6-address.h (module 'network'): ns3::Ipv6Address::Ipv6Address(ns3::Ipv6Address const & addr) [copy constructor]
1694c1041
<     ## ipv6-address.h (module 'network'): ns3::Ipv6Address ns3::Ipv6Address::CombinePrefix(ns3::Ipv6Prefix const & prefix) const [member function]
---
>     ## ipv6-address.h (module 'network'): ns3::Ipv6Address ns3::Ipv6Address::CombinePrefix(ns3::Ipv6Prefix const & prefix) [member function]
1697,1698c1044
<                    [param('ns3::Ipv6Prefix const &', 'prefix')], 
<                    is_const=True)
---
>                    [param('ns3::Ipv6Prefix const &', 'prefix')])
1754,1758d1099
<     ## ipv6-address.h (module 'network'): bool ns3::Ipv6Address::HasPrefix(ns3::Ipv6Prefix const & prefix) const [member function]
<     cls.add_method('HasPrefix', 
<                    'bool', 
<                    [param('ns3::Ipv6Prefix const &', 'prefix')], 
<                    is_const=True)
1763c1104
<                    is_const=True, deprecated=True)
---
>                    deprecated=True, is_const=True)
1788c1129
<                    is_const=True, deprecated=True)
---
>                    is_const=True)
1824,1828d1164
<     ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::MakeAutoconfiguredAddress(ns3::Address addr, ns3::Ipv6Address prefix) [member function]
<     cls.add_method('MakeAutoconfiguredAddress', 
<                    'ns3::Ipv6Address', 
<                    [param('ns3::Address', 'addr'), param('ns3::Ipv6Address', 'prefix')], 
<                    is_static=True)
1844,1853d1179
<     ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::MakeAutoconfiguredAddress(ns3::Mac8Address addr, ns3::Ipv6Address prefix) [member function]
<     cls.add_method('MakeAutoconfiguredAddress', 
<                    'ns3::Ipv6Address', 
<                    [param('ns3::Mac8Address', 'addr'), param('ns3::Ipv6Address', 'prefix')], 
<                    is_static=True)
<     ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::MakeAutoconfiguredLinkLocalAddress(ns3::Address mac) [member function]
<     cls.add_method('MakeAutoconfiguredLinkLocalAddress', 
<                    'ns3::Ipv6Address', 
<                    [param('ns3::Address', 'mac')], 
<                    is_static=True)
1869,1873d1194
<     ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::MakeAutoconfiguredLinkLocalAddress(ns3::Mac8Address mac) [member function]
<     cls.add_method('MakeAutoconfiguredLinkLocalAddress', 
<                    'ns3::Ipv6Address', 
<                    [param('ns3::Mac8Address', 'mac')], 
<                    is_static=True)
1904a1226
>     cls.add_binary_comparison_operator('!=')
1907d1228
<     cls.add_binary_comparison_operator('!=')
1914,1917d1234
<     ## ipv6-address.h (module 'network'): ns3::Ipv6Prefix::Ipv6Prefix(uint8_t * prefix, uint8_t prefixLength) [constructor]
<     cls.add_constructor([param('uint8_t *', 'prefix'), param('uint8_t', 'prefixLength')])
<     ## ipv6-address.h (module 'network'): ns3::Ipv6Prefix::Ipv6Prefix(char const * prefix, uint8_t prefixLength) [constructor]
<     cls.add_constructor([param('char const *', 'prefix'), param('uint8_t', 'prefixLength')])
1920c1237
<     ## ipv6-address.h (module 'network'): ns3::Ipv6Prefix::Ipv6Prefix(ns3::Ipv6Prefix const & prefix) [constructor]
---
>     ## ipv6-address.h (module 'network'): ns3::Ipv6Prefix::Ipv6Prefix(ns3::Ipv6Prefix const & prefix) [copy constructor]
1934,1938d1250
<     ## ipv6-address.h (module 'network'): uint8_t ns3::Ipv6Prefix::GetMinimumPrefixLength() const [member function]
<     cls.add_method('GetMinimumPrefixLength', 
<                    'uint8_t', 
<                    [], 
<                    is_const=True)
1958c1270
<                    is_const=True, deprecated=True)
---
>                    is_const=True)
1969,2086d1280
<     ## ipv6-address.h (module 'network'): void ns3::Ipv6Prefix::SetPrefixLength(uint8_t prefixLength) [member function]
<     cls.add_method('SetPrefixLength', 
<                    'void', 
<                    [param('uint8_t', 'prefixLength')])
<     return
< 
< def register_Ns3Mac48Address_methods(root_module, cls):
<     cls.add_binary_comparison_operator('==')
<     cls.add_binary_comparison_operator('!=')
<     cls.add_binary_comparison_operator('<')
<     cls.add_output_stream_operator()
<     ## mac48-address.h (module 'network'): ns3::Mac48Address::Mac48Address(ns3::Mac48Address const & arg0) [constructor]
<     cls.add_constructor([param('ns3::Mac48Address const &', 'arg0')])
<     ## mac48-address.h (module 'network'): ns3::Mac48Address::Mac48Address() [constructor]
<     cls.add_constructor([])
<     ## mac48-address.h (module 'network'): ns3::Mac48Address::Mac48Address(char const * str) [constructor]
<     cls.add_constructor([param('char const *', 'str')])
<     ## mac48-address.h (module 'network'): static ns3::Mac48Address ns3::Mac48Address::Allocate() [member function]
<     cls.add_method('Allocate', 
<                    'ns3::Mac48Address', 
<                    [], 
<                    is_static=True)
<     ## mac48-address.h (module 'network'): static ns3::Mac48Address ns3::Mac48Address::ConvertFrom(ns3::Address const & address) [member function]
<     cls.add_method('ConvertFrom', 
<                    'ns3::Mac48Address', 
<                    [param('ns3::Address const &', 'address')], 
<                    is_static=True)
<     ## mac48-address.h (module 'network'): void ns3::Mac48Address::CopyFrom(uint8_t const * buffer) [member function]
<     cls.add_method('CopyFrom', 
<                    'void', 
<                    [param('uint8_t const *', 'buffer')])
<     ## mac48-address.h (module 'network'): void ns3::Mac48Address::CopyTo(uint8_t * buffer) const [member function]
<     cls.add_method('CopyTo', 
<                    'void', 
<                    [param('uint8_t *', 'buffer')], 
<                    is_const=True)
<     ## mac48-address.h (module 'network'): static ns3::Mac48Address ns3::Mac48Address::GetBroadcast() [member function]
<     cls.add_method('GetBroadcast', 
<                    'ns3::Mac48Address', 
<                    [], 
<                    is_static=True)
<     ## mac48-address.h (module 'network'): static ns3::Mac48Address ns3::Mac48Address::GetMulticast(ns3::Ipv4Address address) [member function]
<     cls.add_method('GetMulticast', 
<                    'ns3::Mac48Address', 
<                    [param('ns3::Ipv4Address', 'address')], 
<                    is_static=True)
<     ## mac48-address.h (module 'network'): static ns3::Mac48Address ns3::Mac48Address::GetMulticast(ns3::Ipv6Address address) [member function]
<     cls.add_method('GetMulticast', 
<                    'ns3::Mac48Address', 
<                    [param('ns3::Ipv6Address', 'address')], 
<                    is_static=True)
<     ## mac48-address.h (module 'network'): static ns3::Mac48Address ns3::Mac48Address::GetMulticast6Prefix() [member function]
<     cls.add_method('GetMulticast6Prefix', 
<                    'ns3::Mac48Address', 
<                    [], 
<                    is_static=True)
<     ## mac48-address.h (module 'network'): static ns3::Mac48Address ns3::Mac48Address::GetMulticastPrefix() [member function]
<     cls.add_method('GetMulticastPrefix', 
<                    'ns3::Mac48Address', 
<                    [], 
<                    is_static=True)
<     ## mac48-address.h (module 'network'): bool ns3::Mac48Address::IsBroadcast() const [member function]
<     cls.add_method('IsBroadcast', 
<                    'bool', 
<                    [], 
<                    is_const=True)
<     ## mac48-address.h (module 'network'): bool ns3::Mac48Address::IsGroup() const [member function]
<     cls.add_method('IsGroup', 
<                    'bool', 
<                    [], 
<                    is_const=True)
<     ## mac48-address.h (module 'network'): static bool ns3::Mac48Address::IsMatchingType(ns3::Address const & address) [member function]
<     cls.add_method('IsMatchingType', 
<                    'bool', 
<                    [param('ns3::Address const &', 'address')], 
<                    is_static=True)
<     return
< 
< def register_Ns3Mac8Address_methods(root_module, cls):
<     cls.add_binary_comparison_operator('<')
<     cls.add_binary_comparison_operator('==')
<     cls.add_binary_comparison_operator('!=')
<     cls.add_output_stream_operator()
<     ## mac8-address.h (module 'network'): ns3::Mac8Address::Mac8Address(ns3::Mac8Address const & arg0) [constructor]
<     cls.add_constructor([param('ns3::Mac8Address const &', 'arg0')])
<     ## mac8-address.h (module 'network'): ns3::Mac8Address::Mac8Address() [constructor]
<     cls.add_constructor([])
<     ## mac8-address.h (module 'network'): ns3::Mac8Address::Mac8Address(uint8_t addr) [constructor]
<     cls.add_constructor([param('uint8_t', 'addr')])
<     ## mac8-address.h (module 'network'): static ns3::Mac8Address ns3::Mac8Address::Allocate() [member function]
<     cls.add_method('Allocate', 
<                    'ns3::Mac8Address', 
<                    [], 
<                    is_static=True)
<     ## mac8-address.h (module 'network'): static ns3::Mac8Address ns3::Mac8Address::ConvertFrom(ns3::Address const & address) [member function]
<     cls.add_method('ConvertFrom', 
<                    'ns3::Mac8Address', 
<                    [param('ns3::Address const &', 'address')], 
<                    is_static=True)
<     ## mac8-address.h (module 'network'): void ns3::Mac8Address::CopyFrom(uint8_t const * pBuffer) [member function]
<     cls.add_method('CopyFrom', 
<                    'void', 
<                    [param('uint8_t const *', 'pBuffer')])
<     ## mac8-address.h (module 'network'): void ns3::Mac8Address::CopyTo(uint8_t * pBuffer) const [member function]
<     cls.add_method('CopyTo', 
<                    'void', 
<                    [param('uint8_t *', 'pBuffer')], 
<                    is_const=True)
<     ## mac8-address.h (module 'network'): static ns3::Mac8Address ns3::Mac8Address::GetBroadcast() [member function]
<     cls.add_method('GetBroadcast', 
<                    'ns3::Mac8Address', 
<                    [], 
<                    is_static=True)
<     ## mac8-address.h (module 'network'): static bool ns3::Mac8Address::IsMatchingType(ns3::Address const & address) [member function]
<     cls.add_method('IsMatchingType', 
<                    'bool', 
<                    [param('ns3::Address const &', 'address')], 
<                    is_static=True)
2090c1284
<     ## node-container.h (module 'network'): ns3::NodeContainer::NodeContainer(ns3::NodeContainer const & arg0) [constructor]
---
>     ## node-container.h (module 'network'): ns3::NodeContainer::NodeContainer(ns3::NodeContainer const & arg0) [copy constructor]
2118c1312
<     ## node-container.h (module 'network'): ns3::NodeContainer::Iterator ns3::NodeContainer::Begin() const [member function]
---
>     ## node-container.h (module 'network'): __gnu_cxx::__normal_iterator<ns3::Ptr<ns3::Node> const*, std::vector<ns3::Ptr<ns3::Node>, std::allocator<ns3::Ptr<ns3::Node> > > > ns3::NodeContainer::Begin() const [member function]
2120c1314
<                    'ns3::NodeContainer::Iterator', 
---
>                    '__gnu_cxx::__normal_iterator< ns3::Ptr< ns3::Node >, std::vector< ns3::Ptr< ns3::Node > > >', 
2123,2127d1316
<     ## node-container.h (module 'network'): bool ns3::NodeContainer::Contains(uint32_t id) const [member function]
<     cls.add_method('Contains', 
<                    'bool', 
<                    [param('uint32_t', 'id')], 
<                    is_const=True)
2136c1325
<     ## node-container.h (module 'network'): ns3::NodeContainer::Iterator ns3::NodeContainer::End() const [member function]
---
>     ## node-container.h (module 'network'): __gnu_cxx::__normal_iterator<ns3::Ptr<ns3::Node> const*, std::vector<ns3::Ptr<ns3::Node>, std::allocator<ns3::Ptr<ns3::Node> > > > ns3::NodeContainer::End() const [member function]
2138c1327
<                    'ns3::NodeContainer::Iterator', 
---
>                    '__gnu_cxx::__normal_iterator< ns3::Ptr< ns3::Node >, std::vector< ns3::Ptr< ns3::Node > > >', 
2161c1350
<     ## object-base.h (module 'core'): ns3::ObjectBase::ObjectBase(ns3::ObjectBase const & arg0) [constructor]
---
>     ## object-base.h (module 'core'): ns3::ObjectBase::ObjectBase(ns3::ObjectBase const & arg0) [copy constructor]
2177c1366
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
2222c1411
<     ## object.h (module 'core'): ns3::ObjectDeleter::ObjectDeleter(ns3::ObjectDeleter const & arg0) [constructor]
---
>     ## object.h (module 'core'): ns3::ObjectDeleter::ObjectDeleter(ns3::ObjectDeleter const & arg0) [copy constructor]
2233c1422
<     ## object-factory.h (module 'core'): ns3::ObjectFactory::ObjectFactory(ns3::ObjectFactory const & arg0) [constructor]
---
>     ## object-factory.h (module 'core'): ns3::ObjectFactory::ObjectFactory(ns3::ObjectFactory const & arg0) [copy constructor]
2249,2253d1437
<     ## object-factory.h (module 'core'): bool ns3::ObjectFactory::IsTypeIdSet() const [member function]
<     cls.add_method('IsTypeIdSet', 
<                    'bool', 
<                    [], 
<                    is_const=True)
2272,2466d1455
< def register_Ns3PacketMetadata_methods(root_module, cls):
<     ## packet-metadata.h (module 'network'): ns3::PacketMetadata::PacketMetadata(uint64_t uid, uint32_t size) [constructor]
<     cls.add_constructor([param('uint64_t', 'uid'), param('uint32_t', 'size')])
<     ## packet-metadata.h (module 'network'): ns3::PacketMetadata::PacketMetadata(ns3::PacketMetadata const & o) [constructor]
<     cls.add_constructor([param('ns3::PacketMetadata const &', 'o')])
<     ## packet-metadata.h (module 'network'): void ns3::PacketMetadata::AddAtEnd(ns3::PacketMetadata const & o) [member function]
<     cls.add_method('AddAtEnd', 
<                    'void', 
<                    [param('ns3::PacketMetadata const &', 'o')])
<     ## packet-metadata.h (module 'network'): void ns3::PacketMetadata::AddHeader(ns3::Header const & header, uint32_t size) [member function]
<     cls.add_method('AddHeader', 
<                    'void', 
<                    [param('ns3::Header const &', 'header'), param('uint32_t', 'size')])
<     ## packet-metadata.h (module 'network'): void ns3::PacketMetadata::AddPaddingAtEnd(uint32_t end) [member function]
<     cls.add_method('AddPaddingAtEnd', 
<                    'void', 
<                    [param('uint32_t', 'end')])
<     ## packet-metadata.h (module 'network'): void ns3::PacketMetadata::AddTrailer(ns3::Trailer const & trailer, uint32_t size) [member function]
<     cls.add_method('AddTrailer', 
<                    'void', 
<                    [param('ns3::Trailer const &', 'trailer'), param('uint32_t', 'size')])
<     ## packet-metadata.h (module 'network'): ns3::PacketMetadata::ItemIterator ns3::PacketMetadata::BeginItem(ns3::Buffer buffer) const [member function]
<     cls.add_method('BeginItem', 
<                    'ns3::PacketMetadata::ItemIterator', 
<                    [param('ns3::Buffer', 'buffer')], 
<                    is_const=True)
<     ## packet-metadata.h (module 'network'): ns3::PacketMetadata ns3::PacketMetadata::CreateFragment(uint32_t start, uint32_t end) const [member function]
<     cls.add_method('CreateFragment', 
<                    'ns3::PacketMetadata', 
<                    [param('uint32_t', 'start'), param('uint32_t', 'end')], 
<                    is_const=True)
<     ## packet-metadata.h (module 'network'): uint32_t ns3::PacketMetadata::Deserialize(uint8_t const * buffer, uint32_t size) [member function]
<     cls.add_method('Deserialize', 
<                    'uint32_t', 
<                    [param('uint8_t const *', 'buffer'), param('uint32_t', 'size')])
<     ## packet-metadata.h (module 'network'): static void ns3::PacketMetadata::Enable() [member function]
<     cls.add_method('Enable', 
<                    'void', 
<                    [], 
<                    is_static=True)
<     ## packet-metadata.h (module 'network'): static void ns3::PacketMetadata::EnableChecking() [member function]
<     cls.add_method('EnableChecking', 
<                    'void', 
<                    [], 
<                    is_static=True)
<     ## packet-metadata.h (module 'network'): uint32_t ns3::PacketMetadata::GetSerializedSize() const [member function]
<     cls.add_method('GetSerializedSize', 
<                    'uint32_t', 
<                    [], 
<                    is_const=True)
<     ## packet-metadata.h (module 'network'): uint64_t ns3::PacketMetadata::GetUid() const [member function]
<     cls.add_method('GetUid', 
<                    'uint64_t', 
<                    [], 
<                    is_const=True)
<     ## packet-metadata.h (module 'network'): void ns3::PacketMetadata::RemoveAtEnd(uint32_t end) [member function]
<     cls.add_method('RemoveAtEnd', 
<                    'void', 
<                    [param('uint32_t', 'end')])
<     ## packet-metadata.h (module 'network'): void ns3::PacketMetadata::RemoveAtStart(uint32_t start) [member function]
<     cls.add_method('RemoveAtStart', 
<                    'void', 
<                    [param('uint32_t', 'start')])
<     ## packet-metadata.h (module 'network'): void ns3::PacketMetadata::RemoveHeader(ns3::Header const & header, uint32_t size) [member function]
<     cls.add_method('RemoveHeader', 
<                    'void', 
<                    [param('ns3::Header const &', 'header'), param('uint32_t', 'size')])
<     ## packet-metadata.h (module 'network'): void ns3::PacketMetadata::RemoveTrailer(ns3::Trailer const & trailer, uint32_t size) [member function]
<     cls.add_method('RemoveTrailer', 
<                    'void', 
<                    [param('ns3::Trailer const &', 'trailer'), param('uint32_t', 'size')])
<     ## packet-metadata.h (module 'network'): uint32_t ns3::PacketMetadata::Serialize(uint8_t * buffer, uint32_t maxSize) const [member function]
<     cls.add_method('Serialize', 
<                    'uint32_t', 
<                    [param('uint8_t *', 'buffer'), param('uint32_t', 'maxSize')], 
<                    is_const=True)
<     return
< 
< def register_Ns3PacketMetadataItem_methods(root_module, cls):
<     ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item::Item() [constructor]
<     cls.add_constructor([])
<     ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item::Item(ns3::PacketMetadata::Item const & arg0) [constructor]
<     cls.add_constructor([param('ns3::PacketMetadata::Item const &', 'arg0')])
<     ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item::current [variable]
<     cls.add_instance_attribute('current', 'ns3::Buffer::Iterator', is_const=False)
<     ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item::currentSize [variable]
<     cls.add_instance_attribute('currentSize', 'uint32_t', is_const=False)
<     ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item::currentTrimedFromEnd [variable]
<     cls.add_instance_attribute('currentTrimedFromEnd', 'uint32_t', is_const=False)
<     ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item::currentTrimedFromStart [variable]
<     cls.add_instance_attribute('currentTrimedFromStart', 'uint32_t', is_const=False)
<     ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item::isFragment [variable]
<     cls.add_instance_attribute('isFragment', 'bool', is_const=False)
<     ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item::tid [variable]
<     cls.add_instance_attribute('tid', 'ns3::TypeId', is_const=False)
<     ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item::type [variable]
<     cls.add_instance_attribute('type', 'ns3::PacketMetadata::Item::ItemType', is_const=False)
<     return
< 
< def register_Ns3PacketMetadataItemIterator_methods(root_module, cls):
<     ## packet-metadata.h (module 'network'): ns3::PacketMetadata::ItemIterator::ItemIterator(ns3::PacketMetadata::ItemIterator const & arg0) [constructor]
<     cls.add_constructor([param('ns3::PacketMetadata::ItemIterator const &', 'arg0')])
<     ## packet-metadata.h (module 'network'): ns3::PacketMetadata::ItemIterator::ItemIterator(ns3::PacketMetadata const * metadata, ns3::Buffer buffer) [constructor]
<     cls.add_constructor([param('ns3::PacketMetadata const *', 'metadata'), param('ns3::Buffer', 'buffer')])
<     ## packet-metadata.h (module 'network'): bool ns3::PacketMetadata::ItemIterator::HasNext() const [member function]
<     cls.add_method('HasNext', 
<                    'bool', 
<                    [], 
<                    is_const=True)
<     ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item ns3::PacketMetadata::ItemIterator::Next() [member function]
<     cls.add_method('Next', 
<                    'ns3::PacketMetadata::Item', 
<                    [])
<     return
< 
< def register_Ns3PacketTagIterator_methods(root_module, cls):
<     ## packet.h (module 'network'): ns3::PacketTagIterator::PacketTagIterator(ns3::PacketTagIterator const & arg0) [constructor]
<     cls.add_constructor([param('ns3::PacketTagIterator const &', 'arg0')])
<     ## packet.h (module 'network'): bool ns3::PacketTagIterator::HasNext() const [member function]
<     cls.add_method('HasNext', 
<                    'bool', 
<                    [], 
<                    is_const=True)
<     ## packet.h (module 'network'): ns3::PacketTagIterator::Item ns3::PacketTagIterator::Next() [member function]
<     cls.add_method('Next', 
<                    'ns3::PacketTagIterator::Item', 
<                    [])
<     return
< 
< def register_Ns3PacketTagIteratorItem_methods(root_module, cls):
<     ## packet.h (module 'network'): ns3::PacketTagIterator::Item::Item(ns3::PacketTagIterator::Item const & arg0) [constructor]
<     cls.add_constructor([param('ns3::PacketTagIterator::Item const &', 'arg0')])
<     ## packet.h (module 'network'): void ns3::PacketTagIterator::Item::GetTag(ns3::Tag & tag) const [member function]
<     cls.add_method('GetTag', 
<                    'void', 
<                    [param('ns3::Tag &', 'tag')], 
<                    is_const=True)
<     ## packet.h (module 'network'): ns3::TypeId ns3::PacketTagIterator::Item::GetTypeId() const [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_const=True)
<     return
< 
< def register_Ns3PacketTagList_methods(root_module, cls):
<     ## packet-tag-list.h (module 'network'): ns3::PacketTagList::PacketTagList() [constructor]
<     cls.add_constructor([])
<     ## packet-tag-list.h (module 'network'): ns3::PacketTagList::PacketTagList(ns3::PacketTagList const & o) [constructor]
<     cls.add_constructor([param('ns3::PacketTagList const &', 'o')])
<     ## packet-tag-list.h (module 'network'): void ns3::PacketTagList::Add(ns3::Tag const & tag) const [member function]
<     cls.add_method('Add', 
<                    'void', 
<                    [param('ns3::Tag const &', 'tag')], 
<                    is_const=True)
<     ## packet-tag-list.h (module 'network'): ns3::PacketTagList::TagData const * ns3::PacketTagList::Head() const [member function]
<     cls.add_method('Head', 
<                    'ns3::PacketTagList::TagData const *', 
<                    [], 
<                    is_const=True)
<     ## packet-tag-list.h (module 'network'): bool ns3::PacketTagList::Peek(ns3::Tag & tag) const [member function]
<     cls.add_method('Peek', 
<                    'bool', 
<                    [param('ns3::Tag &', 'tag')], 
<                    is_const=True)
<     ## packet-tag-list.h (module 'network'): bool ns3::PacketTagList::Remove(ns3::Tag & tag) [member function]
<     cls.add_method('Remove', 
<                    'bool', 
<                    [param('ns3::Tag &', 'tag')])
<     ## packet-tag-list.h (module 'network'): void ns3::PacketTagList::RemoveAll() [member function]
<     cls.add_method('RemoveAll', 
<                    'void', 
<                    [])
<     ## packet-tag-list.h (module 'network'): bool ns3::PacketTagList::Replace(ns3::Tag & tag) [member function]
<     cls.add_method('Replace', 
<                    'bool', 
<                    [param('ns3::Tag &', 'tag')])
<     return
< 
< def register_Ns3PacketTagListTagData_methods(root_module, cls):
<     ## packet-tag-list.h (module 'network'): ns3::PacketTagList::TagData::TagData() [constructor]
<     cls.add_constructor([])
<     ## packet-tag-list.h (module 'network'): ns3::PacketTagList::TagData::TagData(ns3::PacketTagList::TagData const & arg0) [constructor]
<     cls.add_constructor([param('ns3::PacketTagList::TagData const &', 'arg0')])
<     ## packet-tag-list.h (module 'network'): ns3::PacketTagList::TagData::count [variable]
<     cls.add_instance_attribute('count', 'uint32_t', is_const=False)
<     ## packet-tag-list.h (module 'network'): ns3::PacketTagList::TagData::data [variable]
<     cls.add_instance_attribute('data', 'uint8_t [ 1 ]', is_const=False)
<     ## packet-tag-list.h (module 'network'): ns3::PacketTagList::TagData::next [variable]
<     cls.add_instance_attribute('next', 'ns3::PacketTagList::TagData *', is_const=False)
<     ## packet-tag-list.h (module 'network'): ns3::PacketTagList::TagData::size [variable]
<     cls.add_instance_attribute('size', 'uint32_t', is_const=False)
<     ## packet-tag-list.h (module 'network'): ns3::PacketTagList::TagData::tid [variable]
<     cls.add_instance_attribute('tid', 'ns3::TypeId', is_const=False)
<     return
< 
2470c1459
<     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Object, ns3::ObjectBase, ns3::ObjectDeleter>::SimpleRefCount(ns3::SimpleRefCount<ns3::Object, ns3::ObjectBase, ns3::ObjectDeleter> const & o) [constructor]
---
>     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Object, ns3::ObjectBase, ns3::ObjectDeleter>::SimpleRefCount(ns3::SimpleRefCount<ns3::Object, ns3::ObjectBase, ns3::ObjectDeleter> const & o) [copy constructor]
2472,2480c1461,1462
<     return
< 
< def register_Ns3Tag_methods(root_module, cls):
<     ## tag.h (module 'network'): ns3::Tag::Tag() [constructor]
<     cls.add_constructor([])
<     ## tag.h (module 'network'): ns3::Tag::Tag(ns3::Tag const & arg0) [constructor]
<     cls.add_constructor([param('ns3::Tag const &', 'arg0')])
<     ## tag.h (module 'network'): void ns3::Tag::Deserialize(ns3::TagBuffer i) [member function]
<     cls.add_method('Deserialize', 
---
>     ## simple-ref-count.h (module 'core'): static void ns3::SimpleRefCount<ns3::Object, ns3::ObjectBase, ns3::ObjectDeleter>::Cleanup() [member function]
>     cls.add_method('Cleanup', 
2482,2491d1463
<                    [param('ns3::TagBuffer', 'i')], 
<                    is_virtual=True, is_pure_virtual=True)
<     ## tag.h (module 'network'): uint32_t ns3::Tag::GetSerializedSize() const [member function]
<     cls.add_method('GetSerializedSize', 
<                    'uint32_t', 
<                    [], 
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
<     ## tag.h (module 'network'): static ns3::TypeId ns3::Tag::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
2494,2503d1465
<     ## tag.h (module 'network'): void ns3::Tag::Print(std::ostream & os) const [member function]
<     cls.add_method('Print', 
<                    'void', 
<                    [param('std::ostream &', 'os')], 
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
<     ## tag.h (module 'network'): void ns3::Tag::Serialize(ns3::TagBuffer i) const [member function]
<     cls.add_method('Serialize', 
<                    'void', 
<                    [param('ns3::TagBuffer', 'i')], 
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
2507c1469
<     ## tag-buffer.h (module 'network'): ns3::TagBuffer::TagBuffer(ns3::TagBuffer const & arg0) [constructor]
---
>     ## tag-buffer.h (module 'network'): ns3::TagBuffer::TagBuffer(ns3::TagBuffer const & arg0) [copy constructor]
2551c1513
<     ## tag-buffer.h (module 'network'): void ns3::TagBuffer::WriteU16(uint16_t v) [member function]
---
>     ## tag-buffer.h (module 'network'): void ns3::TagBuffer::WriteU16(uint16_t data) [member function]
2554,2555c1516,1517
<                    [param('uint16_t', 'v')])
<     ## tag-buffer.h (module 'network'): void ns3::TagBuffer::WriteU32(uint32_t v) [member function]
---
>                    [param('uint16_t', 'data')])
>     ## tag-buffer.h (module 'network'): void ns3::TagBuffer::WriteU32(uint32_t data) [member function]
2558c1520
<                    [param('uint32_t', 'v')])
---
>                    [param('uint32_t', 'data')])
2571c1533
<     ## nstime.h (module 'core'): ns3::TimeWithUnit::TimeWithUnit(ns3::TimeWithUnit const & arg0) [constructor]
---
>     ## nstime.h (module 'core'): ns3::TimeWithUnit::TimeWithUnit(ns3::TimeWithUnit const & arg0) [copy constructor]
2578c1540
<     cls.add_binary_comparison_operator('==')
---
>     cls.add_binary_comparison_operator('<')
2581c1543
<     cls.add_binary_comparison_operator('<')
---
>     cls.add_binary_comparison_operator('==')
2586c1548
<     ## type-id.h (module 'core'): ns3::TypeId::TypeId(ns3::TypeId const & o) [constructor]
---
>     ## type-id.h (module 'core'): ns3::TypeId::TypeId(ns3::TypeId const & o) [copy constructor]
2588c1550
<     ## type-id.h (module 'core'): ns3::TypeId ns3::TypeId::AddAttribute(std::string name, std::string help, ns3::AttributeValue const & initialValue, ns3::Ptr<const ns3::AttributeAccessor> accessor, ns3::Ptr<const ns3::AttributeChecker> checker, ns3::TypeId::SupportLevel supportLevel=::ns3::TypeId::SupportLevel::SUPPORTED, std::string const & supportMsg="") [member function]
---
>     ## type-id.h (module 'core'): ns3::TypeId ns3::TypeId::AddAttribute(std::string name, std::string help, ns3::AttributeValue const & initialValue, ns3::Ptr<ns3::AttributeAccessor const> accessor, ns3::Ptr<ns3::AttributeChecker const> checker, ns3::TypeId::SupportLevel supportLevel=::ns3::TypeId::SUPPORTED, std::string const & supportMsg="") [member function]
2591,2592c1553,1554
<                    [param('std::string', 'name'), param('std::string', 'help'), param('ns3::AttributeValue const &', 'initialValue'), param('ns3::Ptr< ns3::AttributeAccessor const >', 'accessor'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker'), param('ns3::TypeId::SupportLevel', 'supportLevel', default_value='::ns3::TypeId::SupportLevel::SUPPORTED'), param('std::string const &', 'supportMsg', default_value='""')])
<     ## type-id.h (module 'core'): ns3::TypeId ns3::TypeId::AddAttribute(std::string name, std::string help, uint32_t flags, ns3::AttributeValue const & initialValue, ns3::Ptr<const ns3::AttributeAccessor> accessor, ns3::Ptr<const ns3::AttributeChecker> checker, ns3::TypeId::SupportLevel supportLevel=::ns3::TypeId::SupportLevel::SUPPORTED, std::string const & supportMsg="") [member function]
---
>                    [param('std::string', 'name'), param('std::string', 'help'), param('ns3::AttributeValue const &', 'initialValue'), param('ns3::Ptr< ns3::AttributeAccessor const >', 'accessor'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker'), param('ns3::TypeId::SupportLevel', 'supportLevel', default_value='::ns3::TypeId::SUPPORTED'), param('std::string const &', 'supportMsg', default_value='""')])
>     ## type-id.h (module 'core'): ns3::TypeId ns3::TypeId::AddAttribute(std::string name, std::string help, uint32_t flags, ns3::AttributeValue const & initialValue, ns3::Ptr<ns3::AttributeAccessor const> accessor, ns3::Ptr<ns3::AttributeChecker const> checker, ns3::TypeId::SupportLevel supportLevel=::ns3::TypeId::SUPPORTED, std::string const & supportMsg="") [member function]
2595,2596c1557,1558
<                    [param('std::string', 'name'), param('std::string', 'help'), param('uint32_t', 'flags'), param('ns3::AttributeValue const &', 'initialValue'), param('ns3::Ptr< ns3::AttributeAccessor const >', 'accessor'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker'), param('ns3::TypeId::SupportLevel', 'supportLevel', default_value='::ns3::TypeId::SupportLevel::SUPPORTED'), param('std::string const &', 'supportMsg', default_value='""')])
<     ## type-id.h (module 'core'): ns3::TypeId ns3::TypeId::AddTraceSource(std::string name, std::string help, ns3::Ptr<const ns3::TraceSourceAccessor> accessor) [member function]
---
>                    [param('std::string', 'name'), param('std::string', 'help'), param('uint32_t', 'flags'), param('ns3::AttributeValue const &', 'initialValue'), param('ns3::Ptr< ns3::AttributeAccessor const >', 'accessor'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker'), param('ns3::TypeId::SupportLevel', 'supportLevel', default_value='::ns3::TypeId::SUPPORTED'), param('std::string const &', 'supportMsg', default_value='""')])
>     ## type-id.h (module 'core'): ns3::TypeId ns3::TypeId::AddTraceSource(std::string name, std::string help, ns3::Ptr<ns3::TraceSourceAccessor const> accessor) [member function]
2601c1563
<     ## type-id.h (module 'core'): ns3::TypeId ns3::TypeId::AddTraceSource(std::string name, std::string help, ns3::Ptr<const ns3::TraceSourceAccessor> accessor, std::string callback, ns3::TypeId::SupportLevel supportLevel=::ns3::TypeId::SupportLevel::SUPPORTED, std::string const & supportMsg="") [member function]
---
>     ## type-id.h (module 'core'): ns3::TypeId ns3::TypeId::AddTraceSource(std::string name, std::string help, ns3::Ptr<ns3::TraceSourceAccessor const> accessor, std::string callback, ns3::TypeId::SupportLevel supportLevel=::ns3::TypeId::SUPPORTED, std::string const & supportMsg="") [member function]
2604,2605c1566,1567
<                    [param('std::string', 'name'), param('std::string', 'help'), param('ns3::Ptr< ns3::TraceSourceAccessor const >', 'accessor'), param('std::string', 'callback'), param('ns3::TypeId::SupportLevel', 'supportLevel', default_value='::ns3::TypeId::SupportLevel::SUPPORTED'), param('std::string const &', 'supportMsg', default_value='""')])
<     ## type-id.h (module 'core'): ns3::TypeId::AttributeInformation ns3::TypeId::GetAttribute(std::size_t i) const [member function]
---
>                    [param('std::string', 'name'), param('std::string', 'help'), param('ns3::Ptr< ns3::TraceSourceAccessor const >', 'accessor'), param('std::string', 'callback'), param('ns3::TypeId::SupportLevel', 'supportLevel', default_value='::ns3::TypeId::SUPPORTED'), param('std::string const &', 'supportMsg', default_value='""')])
>     ## type-id.h (module 'core'): ns3::TypeId::AttributeInformation ns3::TypeId::GetAttribute(uint32_t i) const [member function]
2608c1570
<                    [param('std::size_t', 'i')], 
---
>                    [param('uint32_t', 'i')], 
2610c1572
<     ## type-id.h (module 'core'): std::string ns3::TypeId::GetAttributeFullName(std::size_t i) const [member function]
---
>     ## type-id.h (module 'core'): std::string ns3::TypeId::GetAttributeFullName(uint32_t i) const [member function]
2613c1575
<                    [param('std::size_t', 'i')], 
---
>                    [param('uint32_t', 'i')], 
2615c1577
<     ## type-id.h (module 'core'): std::size_t ns3::TypeId::GetAttributeN() const [member function]
---
>     ## type-id.h (module 'core'): uint32_t ns3::TypeId::GetAttributeN() const [member function]
2617c1579
<                    'std::size_t', 
---
>                    'uint32_t', 
2620c1582
<     ## type-id.h (module 'core'): ns3::Callback<ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> ns3::TypeId::GetConstructor() const [member function]
---
>     ## type-id.h (module 'core'): ns3::Callback<ns3::ObjectBase*,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> ns3::TypeId::GetConstructor() const [member function]
2630c1592
<     ## type-id.h (module 'core'): ns3::TypeId::hash_t ns3::TypeId::GetHash() const [member function]
---
>     ## type-id.h (module 'core'): uint32_t ns3::TypeId::GetHash() const [member function]
2632c1594
<                    'ns3::TypeId::hash_t', 
---
>                    'uint32_t', 
2645c1607
<     ## type-id.h (module 'core'): static ns3::TypeId ns3::TypeId::GetRegistered(uint16_t i) [member function]
---
>     ## type-id.h (module 'core'): static ns3::TypeId ns3::TypeId::GetRegistered(uint32_t i) [member function]
2648c1610
<                    [param('uint16_t', 'i')], 
---
>                    [param('uint32_t', 'i')], 
2650c1612
<     ## type-id.h (module 'core'): static uint16_t ns3::TypeId::GetRegisteredN() [member function]
---
>     ## type-id.h (module 'core'): static uint32_t ns3::TypeId::GetRegisteredN() [member function]
2652c1614
<                    'uint16_t', 
---
>                    'uint32_t', 
2660c1622
<     ## type-id.h (module 'core'): ns3::TypeId::TraceSourceInformation ns3::TypeId::GetTraceSource(std::size_t i) const [member function]
---
>     ## type-id.h (module 'core'): ns3::TypeId::TraceSourceInformation ns3::TypeId::GetTraceSource(uint32_t i) const [member function]
2663c1625
<                    [param('std::size_t', 'i')], 
---
>                    [param('uint32_t', 'i')], 
2665c1627
<     ## type-id.h (module 'core'): std::size_t ns3::TypeId::GetTraceSourceN() const [member function]
---
>     ## type-id.h (module 'core'): uint32_t ns3::TypeId::GetTraceSourceN() const [member function]
2667c1629
<                    'std::size_t', 
---
>                    'uint32_t', 
2699c1661
<     ## type-id.h (module 'core'): static ns3::TypeId ns3::TypeId::LookupByHash(ns3::TypeId::hash_t hash) [member function]
---
>     ## type-id.h (module 'core'): static ns3::TypeId ns3::TypeId::LookupByHash(uint32_t hash) [member function]
2704c1666
<     ## type-id.h (module 'core'): static bool ns3::TypeId::LookupByHashFailSafe(ns3::TypeId::hash_t hash, ns3::TypeId * tid) [member function]
---
>     ## type-id.h (module 'core'): static bool ns3::TypeId::LookupByHashFailSafe(uint32_t hash, ns3::TypeId * tid) [member function]
2714c1676
<     ## type-id.h (module 'core'): ns3::Ptr<const ns3::TraceSourceAccessor> ns3::TypeId::LookupTraceSourceByName(std::string name) const [member function]
---
>     ## type-id.h (module 'core'): ns3::Ptr<ns3::TraceSourceAccessor const> ns3::TypeId::LookupTraceSourceByName(std::string name) const [member function]
2719c1681
<     ## type-id.h (module 'core'): ns3::Ptr<const ns3::TraceSourceAccessor> ns3::TypeId::LookupTraceSourceByName(std::string name, ns3::TypeId::TraceSourceInformation * info) const [member function]
---
>     ## type-id.h (module 'core'): ns3::Ptr<ns3::TraceSourceAccessor const> ns3::TypeId::LookupTraceSourceByName(std::string name, ns3::TypeId::TraceSourceInformation * info) const [member function]
2729c1691
<     ## type-id.h (module 'core'): bool ns3::TypeId::SetAttributeInitialValue(std::size_t i, ns3::Ptr<const ns3::AttributeValue> initialValue) [member function]
---
>     ## type-id.h (module 'core'): bool ns3::TypeId::SetAttributeInitialValue(uint32_t i, ns3::Ptr<ns3::AttributeValue const> initialValue) [member function]
2732c1694
<                    [param('std::size_t', 'i'), param('ns3::Ptr< ns3::AttributeValue const >', 'initialValue')])
---
>                    [param('uint32_t', 'i'), param('ns3::Ptr< ns3::AttributeValue const >', 'initialValue')])
2754c1716
<     ## type-id.h (module 'core'): ns3::TypeId::AttributeInformation::AttributeInformation(ns3::TypeId::AttributeInformation const & arg0) [constructor]
---
>     ## type-id.h (module 'core'): ns3::TypeId::AttributeInformation::AttributeInformation(ns3::TypeId::AttributeInformation const & arg0) [copy constructor]
2759a1722
>     ## type-id.h (module 'core'): ns3::TypeId::AttributeInformation::flags [variable]
2778c1741
<     ## type-id.h (module 'core'): ns3::TypeId::TraceSourceInformation::TraceSourceInformation(ns3::TypeId::TraceSourceInformation const & arg0) [constructor]
---
>     ## type-id.h (module 'core'): ns3::TypeId::TraceSourceInformation::TraceSourceInformation(ns3::TypeId::TraceSourceInformation const & arg0) [copy constructor]
2796,2804c1759
<     cls.add_binary_comparison_operator('<')
<     cls.add_binary_numeric_operator('-', root_module['ns3::Vector2D'], root_module['ns3::Vector2D'], param('ns3::Vector2D const &', 'right'))
<     cls.add_binary_numeric_operator('+', root_module['ns3::Vector2D'], root_module['ns3::Vector2D'], param('ns3::Vector2D const &', 'right'))
<     cls.add_binary_comparison_operator('!=')
<     cls.add_binary_comparison_operator('==')
<     cls.add_binary_comparison_operator('>=')
<     cls.add_binary_comparison_operator('>')
<     cls.add_binary_comparison_operator('<=')
<     ## vector.h (module 'core'): ns3::Vector2D::Vector2D(ns3::Vector2D const & arg0) [constructor]
---
>     ## vector.h (module 'core'): ns3::Vector2D::Vector2D(ns3::Vector2D const & arg0) [copy constructor]
2810,2814d1764
<     ## vector.h (module 'core'): double ns3::Vector2D::GetLength() const [member function]
<     cls.add_method('GetLength', 
<                    'double', 
<                    [], 
<                    is_const=True)
2823,2831c1773
<     cls.add_binary_comparison_operator('<')
<     cls.add_binary_numeric_operator('-', root_module['ns3::Vector3D'], root_module['ns3::Vector3D'], param('ns3::Vector3D const &', 'right'))
<     cls.add_binary_numeric_operator('+', root_module['ns3::Vector3D'], root_module['ns3::Vector3D'], param('ns3::Vector3D const &', 'right'))
<     cls.add_binary_comparison_operator('!=')
<     cls.add_binary_comparison_operator('==')
<     cls.add_binary_comparison_operator('>=')
<     cls.add_binary_comparison_operator('>')
<     cls.add_binary_comparison_operator('<=')
<     ## vector.h (module 'core'): ns3::Vector3D::Vector3D(ns3::Vector3D const & arg0) [constructor]
---
>     ## vector.h (module 'core'): ns3::Vector3D::Vector3D(ns3::Vector3D const & arg0) [copy constructor]
2837,2841d1778
<     ## vector.h (module 'core'): double ns3::Vector3D::GetLength() const [member function]
<     cls.add_method('GetLength', 
<                    'double', 
<                    [], 
<                    is_const=True)
2853c1790
<     ## empty.h (module 'core'): ns3::empty::empty(ns3::empty const & arg0) [constructor]
---
>     ## empty.h (module 'core'): ns3::empty::empty(ns3::empty const & arg0) [copy constructor]
2858,2862c1795,1801
<     cls.add_binary_numeric_operator('*', root_module['ns3::Time'], root_module['ns3::int64x64_t'], param('ns3::Time const &', 'right'))
<     cls.add_binary_numeric_operator('+', root_module['ns3::int64x64_t'], root_module['ns3::int64x64_t'], param('ns3::int64x64_t const &', 'right'))
<     cls.add_binary_numeric_operator('-', root_module['ns3::int64x64_t'], root_module['ns3::int64x64_t'], param('ns3::int64x64_t const &', 'right'))
<     cls.add_binary_numeric_operator('*', root_module['ns3::int64x64_t'], root_module['ns3::int64x64_t'], param('ns3::int64x64_t const &', 'right'))
<     cls.add_binary_numeric_operator('/', root_module['ns3::int64x64_t'], root_module['ns3::int64x64_t'], param('ns3::int64x64_t const &', 'right'))
---
>     cls.add_binary_numeric_operator('*', root_module['ns3::int64x64_t'], root_module['ns3::int64x64_t'], param('ns3::int64x64_t const &', u'right'))
>     cls.add_binary_numeric_operator('+', root_module['ns3::int64x64_t'], root_module['ns3::int64x64_t'], param('ns3::int64x64_t const &', u'right'))
>     cls.add_binary_numeric_operator('-', root_module['ns3::int64x64_t'], root_module['ns3::int64x64_t'], param('ns3::int64x64_t const &', u'right'))
>     cls.add_unary_numeric_operator('-')
>     cls.add_binary_numeric_operator('/', root_module['ns3::int64x64_t'], root_module['ns3::int64x64_t'], param('ns3::int64x64_t const &', u'right'))
>     cls.add_binary_comparison_operator('<')
>     cls.add_binary_comparison_operator('>')
2864,2865c1803,1806
<     cls.add_binary_comparison_operator('<=')
<     cls.add_binary_comparison_operator('>=')
---
>     cls.add_inplace_numeric_operator('*=', param('ns3::int64x64_t const &', u'right'))
>     cls.add_inplace_numeric_operator('+=', param('ns3::int64x64_t const &', u'right'))
>     cls.add_inplace_numeric_operator('-=', param('ns3::int64x64_t const &', u'right'))
>     cls.add_inplace_numeric_operator('/=', param('ns3::int64x64_t const &', u'right'))
2866a1808
>     cls.add_binary_comparison_operator('<=')
2868,2875c1810,1811
<     cls.add_binary_comparison_operator('<')
<     cls.add_binary_comparison_operator('>')
<     cls.add_inplace_numeric_operator('+=', param('ns3::int64x64_t const &', 'right'))
<     cls.add_inplace_numeric_operator('-=', param('ns3::int64x64_t const &', 'right'))
<     cls.add_inplace_numeric_operator('*=', param('ns3::int64x64_t const &', 'right'))
<     cls.add_inplace_numeric_operator('/=', param('ns3::int64x64_t const &', 'right'))
<     cls.add_unary_numeric_operator('-')
<     ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t() [constructor]
---
>     cls.add_binary_comparison_operator('>=')
>     ## int64x64-double.h (module 'core'): ns3::int64x64_t::int64x64_t() [constructor]
2877,2895c1813,1831
<     ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t(double const value) [constructor]
<     cls.add_constructor([param('double const', 'value')])
<     ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t(long double const value) [constructor]
<     cls.add_constructor([param('long double const', 'value')])
<     ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t(int const v) [constructor]
<     cls.add_constructor([param('int const', 'v')])
<     ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t(long int const v) [constructor]
<     cls.add_constructor([param('long int const', 'v')])
<     ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t(long long int const v) [constructor]
<     cls.add_constructor([param('long long int const', 'v')])
<     ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t(unsigned int const v) [constructor]
<     cls.add_constructor([param('unsigned int const', 'v')])
<     ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t(long unsigned int const v) [constructor]
<     cls.add_constructor([param('long unsigned int const', 'v')])
<     ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t(long long unsigned int const v) [constructor]
<     cls.add_constructor([param('long long unsigned int const', 'v')])
<     ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t(int64_t const hi, uint64_t const lo) [constructor]
<     cls.add_constructor([param('int64_t const', 'hi'), param('uint64_t const', 'lo')])
<     ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t(ns3::int64x64_t const & o) [constructor]
---
>     ## int64x64-double.h (module 'core'): ns3::int64x64_t::int64x64_t(double v) [constructor]
>     cls.add_constructor([param('double', 'v')])
>     ## int64x64-double.h (module 'core'): ns3::int64x64_t::int64x64_t(long double v) [constructor]
>     cls.add_constructor([param('long double', 'v')])
>     ## int64x64-double.h (module 'core'): ns3::int64x64_t::int64x64_t(int v) [constructor]
>     cls.add_constructor([param('int', 'v')])
>     ## int64x64-double.h (module 'core'): ns3::int64x64_t::int64x64_t(long int v) [constructor]
>     cls.add_constructor([param('long int', 'v')])
>     ## int64x64-double.h (module 'core'): ns3::int64x64_t::int64x64_t(long long int v) [constructor]
>     cls.add_constructor([param('long long int', 'v')])
>     ## int64x64-double.h (module 'core'): ns3::int64x64_t::int64x64_t(unsigned int v) [constructor]
>     cls.add_constructor([param('unsigned int', 'v')])
>     ## int64x64-double.h (module 'core'): ns3::int64x64_t::int64x64_t(long unsigned int v) [constructor]
>     cls.add_constructor([param('long unsigned int', 'v')])
>     ## int64x64-double.h (module 'core'): ns3::int64x64_t::int64x64_t(long long unsigned int v) [constructor]
>     cls.add_constructor([param('long long unsigned int', 'v')])
>     ## int64x64-double.h (module 'core'): ns3::int64x64_t::int64x64_t(int64_t hi, uint64_t lo) [constructor]
>     cls.add_constructor([param('int64_t', 'hi'), param('uint64_t', 'lo')])
>     ## int64x64-double.h (module 'core'): ns3::int64x64_t::int64x64_t(ns3::int64x64_t const & o) [copy constructor]
2897c1833
<     ## int64x64-128.h (module 'core'): double ns3::int64x64_t::GetDouble() const [member function]
---
>     ## int64x64-double.h (module 'core'): double ns3::int64x64_t::GetDouble() const [member function]
2902c1838
<     ## int64x64-128.h (module 'core'): int64_t ns3::int64x64_t::GetHigh() const [member function]
---
>     ## int64x64-double.h (module 'core'): int64_t ns3::int64x64_t::GetHigh() const [member function]
2907c1843
<     ## int64x64-128.h (module 'core'): uint64_t ns3::int64x64_t::GetLow() const [member function]
---
>     ## int64x64-double.h (module 'core'): uint64_t ns3::int64x64_t::GetLow() const [member function]
2912c1848
<     ## int64x64-128.h (module 'core'): static ns3::int64x64_t ns3::int64x64_t::Invert(uint64_t const v) [member function]
---
>     ## int64x64-double.h (module 'core'): static ns3::int64x64_t ns3::int64x64_t::Invert(uint64_t v) [member function]
2915c1851
<                    [param('uint64_t const', 'v')], 
---
>                    [param('uint64_t', 'v')], 
2917c1853
<     ## int64x64-128.h (module 'core'): void ns3::int64x64_t::MulByInvert(ns3::int64x64_t const & o) [member function]
---
>     ## int64x64-double.h (module 'core'): void ns3::int64x64_t::MulByInvert(ns3::int64x64_t const & o) [member function]
2921c1857
<     ## int64x64-128.h (module 'core'): ns3::int64x64_t::implementation [variable]
---
>     ## int64x64-double.h (module 'core'): ns3::int64x64_t::implementation [variable]
2925,2984d1860
< def register_Ns3Chunk_methods(root_module, cls):
<     ## chunk.h (module 'network'): ns3::Chunk::Chunk() [constructor]
<     cls.add_constructor([])
<     ## chunk.h (module 'network'): ns3::Chunk::Chunk(ns3::Chunk const & arg0) [constructor]
<     cls.add_constructor([param('ns3::Chunk const &', 'arg0')])
<     ## chunk.h (module 'network'): uint32_t ns3::Chunk::Deserialize(ns3::Buffer::Iterator start) [member function]
<     cls.add_method('Deserialize', 
<                    'uint32_t', 
<                    [param('ns3::Buffer::Iterator', 'start')], 
<                    is_virtual=True, is_pure_virtual=True)
<     ## chunk.h (module 'network'): uint32_t ns3::Chunk::Deserialize(ns3::Buffer::Iterator start, ns3::Buffer::Iterator end) [member function]
<     cls.add_method('Deserialize', 
<                    'uint32_t', 
<                    [param('ns3::Buffer::Iterator', 'start'), param('ns3::Buffer::Iterator', 'end')], 
<                    is_virtual=True)
<     ## chunk.h (module 'network'): static ns3::TypeId ns3::Chunk::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## chunk.h (module 'network'): void ns3::Chunk::Print(std::ostream & os) const [member function]
<     cls.add_method('Print', 
<                    'void', 
<                    [param('std::ostream &', 'os')], 
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3Header_methods(root_module, cls):
<     cls.add_output_stream_operator()
<     ## header.h (module 'network'): ns3::Header::Header() [constructor]
<     cls.add_constructor([])
<     ## header.h (module 'network'): ns3::Header::Header(ns3::Header const & arg0) [constructor]
<     cls.add_constructor([param('ns3::Header const &', 'arg0')])
<     ## header.h (module 'network'): uint32_t ns3::Header::Deserialize(ns3::Buffer::Iterator start) [member function]
<     cls.add_method('Deserialize', 
<                    'uint32_t', 
<                    [param('ns3::Buffer::Iterator', 'start')], 
<                    is_virtual=True, is_pure_virtual=True)
<     ## header.h (module 'network'): uint32_t ns3::Header::GetSerializedSize() const [member function]
<     cls.add_method('GetSerializedSize', 
<                    'uint32_t', 
<                    [], 
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
<     ## header.h (module 'network'): static ns3::TypeId ns3::Header::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## header.h (module 'network'): void ns3::Header::Print(std::ostream & os) const [member function]
<     cls.add_method('Print', 
<                    'void', 
<                    [param('std::ostream &', 'os')], 
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
<     ## header.h (module 'network'): void ns3::Header::Serialize(ns3::Buffer::Iterator start) const [member function]
<     cls.add_method('Serialize', 
<                    'void', 
<                    [param('ns3::Buffer::Iterator', 'start')], 
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
<     return
< 
3020c1896
<     ## object.h (module 'core'): ns3::Object::Object(ns3::Object const & o) [constructor]
---
>     ## object.h (module 'core'): ns3::Object::Object(ns3::Object const & o) [copy constructor]
3041c1917
<     ## object.h (module 'core'): ns3::Object::AggregateIterator::AggregateIterator(ns3::Object::AggregateIterator const & arg0) [constructor]
---
>     ## object.h (module 'core'): ns3::Object::AggregateIterator::AggregateIterator(ns3::Object::AggregateIterator const & arg0) [copy constructor]
3050c1926
<     ## object.h (module 'core'): ns3::Ptr<const ns3::Object> ns3::Object::AggregateIterator::Next() [member function]
---
>     ## object.h (module 'core'): ns3::Ptr<ns3::Object const> ns3::Object::AggregateIterator::Next() [member function]
3057c1933
<     ## position-allocator.h (module 'mobility'): ns3::PositionAllocator::PositionAllocator(ns3::PositionAllocator const & arg0) [constructor]
---
>     ## position-allocator.h (module 'mobility'): ns3::PositionAllocator::PositionAllocator(ns3::PositionAllocator const & arg0) [copy constructor]
3065c1941
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
3070c1946
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
3107c1983
<                    is_const=True, visibility='private', is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
3112c1988
<                    visibility='private', is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
3116c1992
<     ## position-allocator.h (module 'mobility'): ns3::RandomBoxPositionAllocator::RandomBoxPositionAllocator(ns3::RandomBoxPositionAllocator const & arg0) [constructor]
---
>     ## position-allocator.h (module 'mobility'): ns3::RandomBoxPositionAllocator::RandomBoxPositionAllocator(ns3::RandomBoxPositionAllocator const & arg0) [copy constructor]
3150c2026
<     ## building-position-allocator.h (module 'buildings'): ns3::RandomBuildingPositionAllocator::RandomBuildingPositionAllocator(ns3::RandomBuildingPositionAllocator const & arg0) [constructor]
---
>     ## building-position-allocator.h (module 'buildings'): ns3::RandomBuildingPositionAllocator::RandomBuildingPositionAllocator(ns3::RandomBuildingPositionAllocator const & arg0) [copy constructor]
3172c2048
<     ## position-allocator.h (module 'mobility'): ns3::RandomDiscPositionAllocator::RandomDiscPositionAllocator(ns3::RandomDiscPositionAllocator const & arg0) [constructor]
---
>     ## position-allocator.h (module 'mobility'): ns3::RandomDiscPositionAllocator::RandomDiscPositionAllocator(ns3::RandomDiscPositionAllocator const & arg0) [copy constructor]
3207,3210d2082
<     ## position-allocator.h (module 'mobility'): void ns3::RandomDiscPositionAllocator::SetZ(double z) [member function]
<     cls.add_method('SetZ', 
<                    'void', 
<                    [param('double', 'z')])
3234c2106
<     ## position-allocator.h (module 'mobility'): ns3::RandomRectanglePositionAllocator::RandomRectanglePositionAllocator(ns3::RandomRectanglePositionAllocator const & arg0) [constructor]
---
>     ## position-allocator.h (module 'mobility'): ns3::RandomRectanglePositionAllocator::RandomRectanglePositionAllocator(ns3::RandomRectanglePositionAllocator const & arg0) [copy constructor]
3261,3264d2132
<     ## position-allocator.h (module 'mobility'): void ns3::RandomRectanglePositionAllocator::SetZ(double z) [member function]
<     cls.add_method('SetZ', 
<                    'void', 
<                    [param('double', 'z')])
3268c2136
<     ## building-position-allocator.h (module 'buildings'): ns3::RandomRoomPositionAllocator::RandomRoomPositionAllocator(ns3::RandomRoomPositionAllocator const & arg0) [constructor]
---
>     ## building-position-allocator.h (module 'buildings'): ns3::RandomRoomPositionAllocator::RandomRoomPositionAllocator(ns3::RandomRoomPositionAllocator const & arg0) [copy constructor]
3319c2187
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
3324c2192
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
3353c2221
<     ## building-position-allocator.h (module 'buildings'): ns3::SameRoomPositionAllocator::SameRoomPositionAllocator(ns3::SameRoomPositionAllocator const & arg0) [constructor]
---
>     ## building-position-allocator.h (module 'buildings'): ns3::SameRoomPositionAllocator::SameRoomPositionAllocator(ns3::SameRoomPositionAllocator const & arg0) [copy constructor]
3419c2287
<     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::AttributeAccessor, ns3::empty, ns3::DefaultDeleter<ns3::AttributeAccessor> >::SimpleRefCount(ns3::SimpleRefCount<ns3::AttributeAccessor, ns3::empty, ns3::DefaultDeleter<ns3::AttributeAccessor> > const & o) [constructor]
---
>     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::AttributeAccessor, ns3::empty, ns3::DefaultDeleter<ns3::AttributeAccessor> >::SimpleRefCount(ns3::SimpleRefCount<ns3::AttributeAccessor, ns3::empty, ns3::DefaultDeleter<ns3::AttributeAccessor> > const & o) [copy constructor]
3420a2289,2293
>     ## simple-ref-count.h (module 'core'): static void ns3::SimpleRefCount<ns3::AttributeAccessor, ns3::empty, ns3::DefaultDeleter<ns3::AttributeAccessor> >::Cleanup() [member function]
>     cls.add_method('Cleanup', 
>                    'void', 
>                    [], 
>                    is_static=True)
3426c2299
<     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker> >::SimpleRefCount(ns3::SimpleRefCount<ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker> > const & o) [constructor]
---
>     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker> >::SimpleRefCount(ns3::SimpleRefCount<ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker> > const & o) [copy constructor]
3427a2301,2305
>     ## simple-ref-count.h (module 'core'): static void ns3::SimpleRefCount<ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker> >::Cleanup() [member function]
>     cls.add_method('Cleanup', 
>                    'void', 
>                    [], 
>                    is_static=True)
3433c2311
<     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue> >::SimpleRefCount(ns3::SimpleRefCount<ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue> > const & o) [constructor]
---
>     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue> >::SimpleRefCount(ns3::SimpleRefCount<ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue> > const & o) [copy constructor]
3434a2313,2317
>     ## simple-ref-count.h (module 'core'): static void ns3::SimpleRefCount<ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue> >::Cleanup() [member function]
>     cls.add_method('Cleanup', 
>                    'void', 
>                    [], 
>                    is_static=True)
3440c2323
<     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::CallbackImplBase, ns3::empty, ns3::DefaultDeleter<ns3::CallbackImplBase> >::SimpleRefCount(ns3::SimpleRefCount<ns3::CallbackImplBase, ns3::empty, ns3::DefaultDeleter<ns3::CallbackImplBase> > const & o) [constructor]
---
>     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::CallbackImplBase, ns3::empty, ns3::DefaultDeleter<ns3::CallbackImplBase> >::SimpleRefCount(ns3::SimpleRefCount<ns3::CallbackImplBase, ns3::empty, ns3::DefaultDeleter<ns3::CallbackImplBase> > const & o) [copy constructor]
3441a2325,2329
>     ## simple-ref-count.h (module 'core'): static void ns3::SimpleRefCount<ns3::CallbackImplBase, ns3::empty, ns3::DefaultDeleter<ns3::CallbackImplBase> >::Cleanup() [member function]
>     cls.add_method('Cleanup', 
>                    'void', 
>                    [], 
>                    is_static=True)
3447c2335
<     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Hash::Implementation, ns3::empty, ns3::DefaultDeleter<ns3::Hash::Implementation> >::SimpleRefCount(ns3::SimpleRefCount<ns3::Hash::Implementation, ns3::empty, ns3::DefaultDeleter<ns3::Hash::Implementation> > const & o) [constructor]
---
>     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Hash::Implementation, ns3::empty, ns3::DefaultDeleter<ns3::Hash::Implementation> >::SimpleRefCount(ns3::SimpleRefCount<ns3::Hash::Implementation, ns3::empty, ns3::DefaultDeleter<ns3::Hash::Implementation> > const & o) [copy constructor]
3448a2337,2341
>     ## simple-ref-count.h (module 'core'): static void ns3::SimpleRefCount<ns3::Hash::Implementation, ns3::empty, ns3::DefaultDeleter<ns3::Hash::Implementation> >::Cleanup() [member function]
>     cls.add_method('Cleanup', 
>                    'void', 
>                    [], 
>                    is_static=True)
3451,3452c2344,2345
< def register_Ns3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt___methods(root_module, cls):
<     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::NixVector, ns3::empty, ns3::DefaultDeleter<ns3::NixVector> >::SimpleRefCount() [constructor]
---
> def register_Ns3SimpleRefCount__Ns3NetDeviceQueue_Ns3Empty_Ns3DefaultDeleter__lt__ns3NetDeviceQueue__gt___methods(root_module, cls):
>     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::NetDeviceQueue, ns3::empty, ns3::DefaultDeleter<ns3::NetDeviceQueue> >::SimpleRefCount() [constructor]
3454,3455c2347,2353
<     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::NixVector, ns3::empty, ns3::DefaultDeleter<ns3::NixVector> >::SimpleRefCount(ns3::SimpleRefCount<ns3::NixVector, ns3::empty, ns3::DefaultDeleter<ns3::NixVector> > const & o) [constructor]
<     cls.add_constructor([param('ns3::SimpleRefCount< ns3::NixVector, ns3::empty, ns3::DefaultDeleter< ns3::NixVector > > const &', 'o')])
---
>     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::NetDeviceQueue, ns3::empty, ns3::DefaultDeleter<ns3::NetDeviceQueue> >::SimpleRefCount(ns3::SimpleRefCount<ns3::NetDeviceQueue, ns3::empty, ns3::DefaultDeleter<ns3::NetDeviceQueue> > const & o) [copy constructor]
>     cls.add_constructor([param('ns3::SimpleRefCount< ns3::NetDeviceQueue, ns3::empty, ns3::DefaultDeleter< ns3::NetDeviceQueue > > const &', 'o')])
>     ## simple-ref-count.h (module 'core'): static void ns3::SimpleRefCount<ns3::NetDeviceQueue, ns3::empty, ns3::DefaultDeleter<ns3::NetDeviceQueue> >::Cleanup() [member function]
>     cls.add_method('Cleanup', 
>                    'void', 
>                    [], 
>                    is_static=True)
3458,3459c2356,2357
< def register_Ns3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt___methods(root_module, cls):
<     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Packet, ns3::empty, ns3::DefaultDeleter<ns3::Packet> >::SimpleRefCount() [constructor]
---
> def register_Ns3SimpleRefCount__Ns3QueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3QueueItem__gt___methods(root_module, cls):
>     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::QueueItem, ns3::empty, ns3::DefaultDeleter<ns3::QueueItem> >::SimpleRefCount() [constructor]
3461,3462c2359,2365
<     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Packet, ns3::empty, ns3::DefaultDeleter<ns3::Packet> >::SimpleRefCount(ns3::SimpleRefCount<ns3::Packet, ns3::empty, ns3::DefaultDeleter<ns3::Packet> > const & o) [constructor]
<     cls.add_constructor([param('ns3::SimpleRefCount< ns3::Packet, ns3::empty, ns3::DefaultDeleter< ns3::Packet > > const &', 'o')])
---
>     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::QueueItem, ns3::empty, ns3::DefaultDeleter<ns3::QueueItem> >::SimpleRefCount(ns3::SimpleRefCount<ns3::QueueItem, ns3::empty, ns3::DefaultDeleter<ns3::QueueItem> > const & o) [copy constructor]
>     cls.add_constructor([param('ns3::SimpleRefCount< ns3::QueueItem, ns3::empty, ns3::DefaultDeleter< ns3::QueueItem > > const &', 'o')])
>     ## simple-ref-count.h (module 'core'): static void ns3::SimpleRefCount<ns3::QueueItem, ns3::empty, ns3::DefaultDeleter<ns3::QueueItem> >::Cleanup() [member function]
>     cls.add_method('Cleanup', 
>                    'void', 
>                    [], 
>                    is_static=True)
3468c2371
<     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::TraceSourceAccessor, ns3::empty, ns3::DefaultDeleter<ns3::TraceSourceAccessor> >::SimpleRefCount(ns3::SimpleRefCount<ns3::TraceSourceAccessor, ns3::empty, ns3::DefaultDeleter<ns3::TraceSourceAccessor> > const & o) [constructor]
---
>     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::TraceSourceAccessor, ns3::empty, ns3::DefaultDeleter<ns3::TraceSourceAccessor> >::SimpleRefCount(ns3::SimpleRefCount<ns3::TraceSourceAccessor, ns3::empty, ns3::DefaultDeleter<ns3::TraceSourceAccessor> > const & o) [copy constructor]
3469a2373,2377
>     ## simple-ref-count.h (module 'core'): static void ns3::SimpleRefCount<ns3::TraceSourceAccessor, ns3::empty, ns3::DefaultDeleter<ns3::TraceSourceAccessor> >::Cleanup() [member function]
>     cls.add_method('Cleanup', 
>                    'void', 
>                    [], 
>                    is_static=True)
3493,3496c2401,2404
<     cls.add_binary_comparison_operator('==')
<     cls.add_binary_comparison_operator('!=')
<     cls.add_binary_comparison_operator('<=')
<     cls.add_binary_comparison_operator('>=')
---
>     cls.add_binary_numeric_operator('*', root_module['ns3::Time'], root_module['ns3::Time'], param('int64_t const &', u'right'))
>     cls.add_binary_numeric_operator('+', root_module['ns3::Time'], root_module['ns3::Time'], param('ns3::Time const &', u'right'))
>     cls.add_binary_numeric_operator('-', root_module['ns3::Time'], root_module['ns3::Time'], param('ns3::Time const &', u'right'))
>     cls.add_binary_numeric_operator('/', root_module['ns3::Time'], root_module['ns3::Time'], param('int64_t const &', u'right'))
3499,3507c2407,2409
<     cls.add_binary_numeric_operator('+', root_module['ns3::Time'], root_module['ns3::Time'], param('ns3::Time const &', 'right'))
<     cls.add_binary_numeric_operator('-', root_module['ns3::Time'], root_module['ns3::Time'], param('ns3::Time const &', 'right'))
<     cls.add_binary_numeric_operator('*', root_module['ns3::Time'], root_module['ns3::Time'], param('int64_t const &', 'right'))
<     cls.add_binary_numeric_operator('*', root_module['ns3::Time'], root_module['ns3::Time'], param('ns3::int64x64_t const &', 'right'))
<     cls.add_binary_numeric_operator('/', root_module['ns3::int64x64_t'], root_module['ns3::Time'], param('ns3::Time const &', 'right'))
<     cls.add_binary_numeric_operator('/', root_module['ns3::Time'], root_module['ns3::Time'], param('int64_t const &', 'right'))
<     cls.add_binary_numeric_operator('/', root_module['ns3::Time'], root_module['ns3::Time'], param('ns3::int64x64_t const &', 'right'))
<     cls.add_inplace_numeric_operator('+=', param('ns3::Time const &', 'right'))
<     cls.add_inplace_numeric_operator('-=', param('ns3::Time const &', 'right'))
---
>     cls.add_binary_comparison_operator('!=')
>     cls.add_inplace_numeric_operator('+=', param('ns3::Time const &', u'right'))
>     cls.add_inplace_numeric_operator('-=', param('ns3::Time const &', u'right'))
3508a2411,2413
>     cls.add_binary_comparison_operator('<=')
>     cls.add_binary_comparison_operator('==')
>     cls.add_binary_comparison_operator('>=')
3511c2416
<     ## nstime.h (module 'core'): ns3::Time::Time(ns3::Time const & o) [constructor]
---
>     ## nstime.h (module 'core'): ns3::Time::Time(ns3::Time const & o) [copy constructor]
3694c2599
<     ## trace-source-accessor.h (module 'core'): ns3::TraceSourceAccessor::TraceSourceAccessor(ns3::TraceSourceAccessor const & arg0) [constructor]
---
>     ## trace-source-accessor.h (module 'core'): ns3::TraceSourceAccessor::TraceSourceAccessor(ns3::TraceSourceAccessor const & arg0) [copy constructor]
3702c2607
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
3707c2612
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
3712c2617
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
3717,3755c2622
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3Trailer_methods(root_module, cls):
<     cls.add_output_stream_operator()
<     ## trailer.h (module 'network'): ns3::Trailer::Trailer() [constructor]
<     cls.add_constructor([])
<     ## trailer.h (module 'network'): ns3::Trailer::Trailer(ns3::Trailer const & arg0) [constructor]
<     cls.add_constructor([param('ns3::Trailer const &', 'arg0')])
<     ## trailer.h (module 'network'): uint32_t ns3::Trailer::Deserialize(ns3::Buffer::Iterator end) [member function]
<     cls.add_method('Deserialize', 
<                    'uint32_t', 
<                    [param('ns3::Buffer::Iterator', 'end')], 
<                    is_virtual=True, is_pure_virtual=True)
<     ## trailer.h (module 'network'): uint32_t ns3::Trailer::Deserialize(ns3::Buffer::Iterator start, ns3::Buffer::Iterator end) [member function]
<     cls.add_method('Deserialize', 
<                    'uint32_t', 
<                    [param('ns3::Buffer::Iterator', 'start'), param('ns3::Buffer::Iterator', 'end')], 
<                    is_virtual=True)
<     ## trailer.h (module 'network'): uint32_t ns3::Trailer::GetSerializedSize() const [member function]
<     cls.add_method('GetSerializedSize', 
<                    'uint32_t', 
<                    [], 
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
<     ## trailer.h (module 'network'): static ns3::TypeId ns3::Trailer::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## trailer.h (module 'network'): void ns3::Trailer::Print(std::ostream & os) const [member function]
<     cls.add_method('Print', 
<                    'void', 
<                    [param('std::ostream &', 'os')], 
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
<     ## trailer.h (module 'network'): void ns3::Trailer::Serialize(ns3::Buffer::Iterator start) const [member function]
<     cls.add_method('Serialize', 
<                    'void', 
<                    [param('ns3::Buffer::Iterator', 'start')], 
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
3853c2720
<     ## position-allocator.h (module 'mobility'): ns3::UniformDiscPositionAllocator::UniformDiscPositionAllocator(ns3::UniformDiscPositionAllocator const & arg0) [constructor]
---
>     ## position-allocator.h (module 'mobility'): ns3::UniformDiscPositionAllocator::UniformDiscPositionAllocator(ns3::UniformDiscPositionAllocator const & arg0) [copy constructor]
3884,3887d2750
<     ## position-allocator.h (module 'mobility'): void ns3::UniformDiscPositionAllocator::SetZ(double z) [member function]
<     cls.add_method('SetZ', 
<                    'void', 
<                    [param('double', 'z')])
4043c2906
<     ## attribute.h (module 'core'): ns3::AttributeAccessor::AttributeAccessor(ns3::AttributeAccessor const & arg0) [constructor]
---
>     ## attribute.h (module 'core'): ns3::AttributeAccessor::AttributeAccessor(ns3::AttributeAccessor const & arg0) [copy constructor]
4051c2914
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
4056c2919
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
4061c2924
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
4066c2929
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
4070c2933
<     ## attribute.h (module 'core'): ns3::AttributeChecker::AttributeChecker(ns3::AttributeChecker const & arg0) [constructor]
---
>     ## attribute.h (module 'core'): ns3::AttributeChecker::AttributeChecker(ns3::AttributeChecker const & arg0) [copy constructor]
4078c2941
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
4083c2946
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
4088c2951
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
4098c2961
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
4103c2966
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
4108c2971
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
4112c2975
<     ## attribute.h (module 'core'): ns3::AttributeValue::AttributeValue(ns3::AttributeValue const & arg0) [constructor]
---
>     ## attribute.h (module 'core'): ns3::AttributeValue::AttributeValue(ns3::AttributeValue const & arg0) [copy constructor]
4120,4121c2983,2984
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
<     ## attribute.h (module 'core'): bool ns3::AttributeValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
>     ## attribute.h (module 'core'): bool ns3::AttributeValue::DeserializeFromString(std::string value, ns3::Ptr<ns3::AttributeChecker const> checker) [member function]
4125,4126c2988,2989
<                    is_virtual=True, is_pure_virtual=True)
<     ## attribute.h (module 'core'): std::string ns3::AttributeValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
---
>                    is_pure_virtual=True, is_virtual=True)
>     ## attribute.h (module 'core'): std::string ns3::AttributeValue::SerializeToString(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
4130c2993
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
4136c2999
<     ## box.h (module 'mobility'): ns3::BoxChecker::BoxChecker(ns3::BoxChecker const & arg0) [constructor]
---
>     ## box.h (module 'mobility'): ns3::BoxChecker::BoxChecker(ns3::BoxChecker const & arg0) [copy constructor]
4142a3006,3007
>     ## box.h (module 'mobility'): ns3::BoxValue::BoxValue(ns3::BoxValue const & arg0) [copy constructor]
>     cls.add_constructor([param('ns3::BoxValue const &', 'arg0')])
4145,4146d3009
<     ## box.h (module 'mobility'): ns3::BoxValue::BoxValue(ns3::BoxValue const & arg0) [constructor]
<     cls.add_constructor([param('ns3::BoxValue const &', 'arg0')])
4152c3015
<     ## box.h (module 'mobility'): bool ns3::BoxValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
---
>     ## box.h (module 'mobility'): bool ns3::BoxValue::DeserializeFromString(std::string value, ns3::Ptr<ns3::AttributeChecker const> checker) [member function]
4162c3025
<     ## box.h (module 'mobility'): std::string ns3::BoxValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
---
>     ## box.h (module 'mobility'): std::string ns3::BoxValue::SerializeToString(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
4174c3037
<     ## building.h (module 'buildings'): ns3::Building::Building(ns3::Building const & arg0) [constructor]
---
>     ## building.h (module 'buildings'): ns3::Building::Building(ns3::Building const & arg0) [copy constructor]
4203c3066
<                    [param('ns3::Vector3D', 'position')], 
---
>                    [param('ns3::Vector', 'position')], 
4228c3091
<                    [param('ns3::Vector3D', 'position')], 
---
>                    [param('ns3::Vector', 'position')], 
4233c3096
<                    [param('ns3::Vector3D', 'position')], 
---
>                    [param('ns3::Vector', 'position')], 
4243,4248c3106
<                    [param('ns3::Vector3D', 'position')], 
<                    is_const=True)
<     ## building.h (module 'buildings'): bool ns3::Building::IsIntersect(ns3::Vector const & l1, ns3::Vector const & l2) const [member function]
<     cls.add_method('IsIntersect', 
<                    'bool', 
<                    [param('ns3::Vector const &', 'l1'), param('ns3::Vector const &', 'l2')], 
---
>                    [param('ns3::Vector', 'position')], 
4288c3146
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
4329c3187
<     ## callback.h (module 'core'): ns3::CallbackChecker::CallbackChecker(ns3::CallbackChecker const & arg0) [constructor]
---
>     ## callback.h (module 'core'): ns3::CallbackChecker::CallbackChecker(ns3::CallbackChecker const & arg0) [copy constructor]
4336c3194
<     ## callback.h (module 'core'): ns3::CallbackImplBase::CallbackImplBase(ns3::CallbackImplBase const & arg0) [constructor]
---
>     ## callback.h (module 'core'): ns3::CallbackImplBase::CallbackImplBase(ns3::CallbackImplBase const & arg0) [copy constructor]
4342,4343c3200,3201
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
<     ## callback.h (module 'core'): bool ns3::CallbackImplBase::IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other) const [member function]
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
>     ## callback.h (module 'core'): bool ns3::CallbackImplBase::IsEqual(ns3::Ptr<ns3::CallbackImplBase const> other) const [member function]
4347c3205
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
4352,4392c3210
<                    visibility='protected', is_static=True)
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    visibility='protected', is_static=True, template_parameters=['ns3::ObjectBase*'])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    visibility='protected', is_static=True, template_parameters=['void'])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    visibility='protected', is_static=True, template_parameters=['ns3::Ptr<ns3::NetDevice> '])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    visibility='protected', is_static=True, template_parameters=['ns3::Ptr<ns3::Packet const> '])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    visibility='protected', is_static=True, template_parameters=['unsigned short'])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    visibility='protected', is_static=True, template_parameters=['ns3::Address const&'])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    visibility='protected', is_static=True, template_parameters=['ns3::NetDevice::PacketType'])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    visibility='protected', is_static=True, template_parameters=['ns3::Ptr<ns3::MobilityModel const> '])
---
>                    is_static=True, visibility='protected')
4396c3214
<     ## callback.h (module 'core'): ns3::CallbackValue::CallbackValue(ns3::CallbackValue const & arg0) [constructor]
---
>     ## callback.h (module 'core'): ns3::CallbackValue::CallbackValue(ns3::CallbackValue const & arg0) [copy constructor]
4407c3225
<     ## callback.h (module 'core'): bool ns3::CallbackValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
---
>     ## callback.h (module 'core'): bool ns3::CallbackValue::DeserializeFromString(std::string value, ns3::Ptr<ns3::AttributeChecker const> checker) [member function]
4412c3230
<     ## callback.h (module 'core'): std::string ns3::CallbackValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
---
>     ## callback.h (module 'core'): std::string ns3::CallbackValue::SerializeToString(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
4423,4463d3240
< def register_Ns3ChannelCondition_methods(root_module, cls):
<     ## channel-condition-model.h (module 'propagation'): ns3::ChannelCondition::ChannelCondition(ns3::ChannelCondition const & arg0) [constructor]
<     cls.add_constructor([param('ns3::ChannelCondition const &', 'arg0')])
<     ## channel-condition-model.h (module 'propagation'): ns3::ChannelCondition::ChannelCondition() [constructor]
<     cls.add_constructor([])
<     ## channel-condition-model.h (module 'propagation'): ns3::ChannelCondition::LosConditionValue ns3::ChannelCondition::GetLosCondition() const [member function]
<     cls.add_method('GetLosCondition', 
<                    'ns3::ChannelCondition::LosConditionValue', 
<                    [], 
<                    is_const=True)
<     ## channel-condition-model.h (module 'propagation'): static ns3::TypeId ns3::ChannelCondition::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## channel-condition-model.h (module 'propagation'): void ns3::ChannelCondition::SetLosCondition(ns3::ChannelCondition::LosConditionValue losCondition) [member function]
<     cls.add_method('SetLosCondition', 
<                    'void', 
<                    [param('ns3::ChannelCondition::LosConditionValue', 'losCondition')])
<     return
< 
< def register_Ns3ChannelConditionModel_methods(root_module, cls):
<     ## channel-condition-model.h (module 'propagation'): static ns3::TypeId ns3::ChannelConditionModel::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## channel-condition-model.h (module 'propagation'): ns3::ChannelConditionModel::ChannelConditionModel() [constructor]
<     cls.add_constructor([])
<     ## channel-condition-model.h (module 'propagation'): ns3::Ptr<ns3::ChannelCondition> ns3::ChannelConditionModel::GetChannelCondition(ns3::Ptr<const ns3::MobilityModel> a, ns3::Ptr<const ns3::MobilityModel> b) const [member function]
<     cls.add_method('GetChannelCondition', 
<                    'ns3::Ptr< ns3::ChannelCondition >', 
<                    [param('ns3::Ptr< ns3::MobilityModel const >', 'a'), param('ns3::Ptr< ns3::MobilityModel const >', 'b')], 
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
<     ## channel-condition-model.h (module 'propagation'): int64_t ns3::ChannelConditionModel::AssignStreams(int64_t stream) [member function]
<     cls.add_method('AssignStreams', 
<                    'int64_t', 
<                    [param('int64_t', 'stream')], 
<                    is_virtual=True, is_pure_virtual=True)
<     return
< 
4505c3282
<     ## random-variable-stream.h (module 'core'): void ns3::DeterministicRandomVariable::SetValueArray(double * values, std::size_t length) [member function]
---
>     ## random-variable-stream.h (module 'core'): void ns3::DeterministicRandomVariable::SetValueArray(double * values, uint64_t length) [member function]
4508c3285
<                    [param('double *', 'values'), param('std::size_t', 'length')])
---
>                    [param('double *', 'values'), param('uint64_t', 'length')])
4556c3333
<     ## attribute.h (module 'core'): ns3::EmptyAttributeAccessor::EmptyAttributeAccessor(ns3::EmptyAttributeAccessor const & arg0) [constructor]
---
>     ## attribute.h (module 'core'): ns3::EmptyAttributeAccessor::EmptyAttributeAccessor(ns3::EmptyAttributeAccessor const & arg0) [copy constructor]
4583c3360
<     ## attribute.h (module 'core'): ns3::EmptyAttributeChecker::EmptyAttributeChecker(ns3::EmptyAttributeChecker const & arg0) [constructor]
---
>     ## attribute.h (module 'core'): ns3::EmptyAttributeChecker::EmptyAttributeChecker(ns3::EmptyAttributeChecker const & arg0) [copy constructor]
4620c3397
<     ## attribute.h (module 'core'): ns3::EmptyAttributeValue::EmptyAttributeValue(ns3::EmptyAttributeValue const & arg0) [constructor]
---
>     ## attribute.h (module 'core'): ns3::EmptyAttributeValue::EmptyAttributeValue(ns3::EmptyAttributeValue const & arg0) [copy constructor]
4629c3406
<     ## attribute.h (module 'core'): bool ns3::EmptyAttributeValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
---
>     ## attribute.h (module 'core'): bool ns3::EmptyAttributeValue::DeserializeFromString(std::string value, ns3::Ptr<ns3::AttributeChecker const> checker) [member function]
4634c3411
<     ## attribute.h (module 'core'): std::string ns3::EmptyAttributeValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
---
>     ## attribute.h (module 'core'): std::string ns3::EmptyAttributeValue::SerializeToString(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
4718c3495
<     ## building-position-allocator.h (module 'buildings'): ns3::FixedRoomPositionAllocator::FixedRoomPositionAllocator(ns3::FixedRoomPositionAllocator const & arg0) [constructor]
---
>     ## building-position-allocator.h (module 'buildings'): ns3::FixedRoomPositionAllocator::FixedRoomPositionAllocator(ns3::FixedRoomPositionAllocator const & arg0) [copy constructor]
4849c3626
<     ## building-allocator.h (module 'buildings'): ns3::GridBuildingAllocator::GridBuildingAllocator(ns3::GridBuildingAllocator const & arg0) [constructor]
---
>     ## building-allocator.h (module 'buildings'): ns3::GridBuildingAllocator::GridBuildingAllocator(ns3::GridBuildingAllocator const & arg0) [copy constructor]
4870c3647
<     ## position-allocator.h (module 'mobility'): ns3::GridPositionAllocator::GridPositionAllocator(ns3::GridPositionAllocator const & arg0) [constructor]
---
>     ## position-allocator.h (module 'mobility'): ns3::GridPositionAllocator::GridPositionAllocator(ns3::GridPositionAllocator const & arg0) [copy constructor]
4943,4946d3719
<     ## position-allocator.h (module 'mobility'): void ns3::GridPositionAllocator::SetZ(double z) [member function]
<     cls.add_method('SetZ', 
<                    'void', 
<                    [param('double', 'z')])
4983c3756
<     ## ipv4-address.h (module 'network'): ns3::Ipv4AddressChecker::Ipv4AddressChecker(ns3::Ipv4AddressChecker const & arg0) [constructor]
---
>     ## ipv4-address.h (module 'network'): ns3::Ipv4AddressChecker::Ipv4AddressChecker(ns3::Ipv4AddressChecker const & arg0) [copy constructor]
4989a3763,3764
>     ## ipv4-address.h (module 'network'): ns3::Ipv4AddressValue::Ipv4AddressValue(ns3::Ipv4AddressValue const & arg0) [copy constructor]
>     cls.add_constructor([param('ns3::Ipv4AddressValue const &', 'arg0')])
4992,4993d3766
<     ## ipv4-address.h (module 'network'): ns3::Ipv4AddressValue::Ipv4AddressValue(ns3::Ipv4AddressValue const & arg0) [constructor]
<     cls.add_constructor([param('ns3::Ipv4AddressValue const &', 'arg0')])
4999c3772
<     ## ipv4-address.h (module 'network'): bool ns3::Ipv4AddressValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
---
>     ## ipv4-address.h (module 'network'): bool ns3::Ipv4AddressValue::DeserializeFromString(std::string value, ns3::Ptr<ns3::AttributeChecker const> checker) [member function]
5009c3782
<     ## ipv4-address.h (module 'network'): std::string ns3::Ipv4AddressValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
---
>     ## ipv4-address.h (module 'network'): std::string ns3::Ipv4AddressValue::SerializeToString(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
5023c3796
<     ## ipv4-address.h (module 'network'): ns3::Ipv4MaskChecker::Ipv4MaskChecker(ns3::Ipv4MaskChecker const & arg0) [constructor]
---
>     ## ipv4-address.h (module 'network'): ns3::Ipv4MaskChecker::Ipv4MaskChecker(ns3::Ipv4MaskChecker const & arg0) [copy constructor]
5029a3803,3804
>     ## ipv4-address.h (module 'network'): ns3::Ipv4MaskValue::Ipv4MaskValue(ns3::Ipv4MaskValue const & arg0) [copy constructor]
>     cls.add_constructor([param('ns3::Ipv4MaskValue const &', 'arg0')])
5032,5033d3806
<     ## ipv4-address.h (module 'network'): ns3::Ipv4MaskValue::Ipv4MaskValue(ns3::Ipv4MaskValue const & arg0) [constructor]
<     cls.add_constructor([param('ns3::Ipv4MaskValue const &', 'arg0')])
5039c3812
<     ## ipv4-address.h (module 'network'): bool ns3::Ipv4MaskValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
---
>     ## ipv4-address.h (module 'network'): bool ns3::Ipv4MaskValue::DeserializeFromString(std::string value, ns3::Ptr<ns3::AttributeChecker const> checker) [member function]
5049c3822
<     ## ipv4-address.h (module 'network'): std::string ns3::Ipv4MaskValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
---
>     ## ipv4-address.h (module 'network'): std::string ns3::Ipv4MaskValue::SerializeToString(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
5063c3836
<     ## ipv6-address.h (module 'network'): ns3::Ipv6AddressChecker::Ipv6AddressChecker(ns3::Ipv6AddressChecker const & arg0) [constructor]
---
>     ## ipv6-address.h (module 'network'): ns3::Ipv6AddressChecker::Ipv6AddressChecker(ns3::Ipv6AddressChecker const & arg0) [copy constructor]
5069a3843,3844
>     ## ipv6-address.h (module 'network'): ns3::Ipv6AddressValue::Ipv6AddressValue(ns3::Ipv6AddressValue const & arg0) [copy constructor]
>     cls.add_constructor([param('ns3::Ipv6AddressValue const &', 'arg0')])
5072,5073d3846
<     ## ipv6-address.h (module 'network'): ns3::Ipv6AddressValue::Ipv6AddressValue(ns3::Ipv6AddressValue const & arg0) [constructor]
<     cls.add_constructor([param('ns3::Ipv6AddressValue const &', 'arg0')])
5079c3852
<     ## ipv6-address.h (module 'network'): bool ns3::Ipv6AddressValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
---
>     ## ipv6-address.h (module 'network'): bool ns3::Ipv6AddressValue::DeserializeFromString(std::string value, ns3::Ptr<ns3::AttributeChecker const> checker) [member function]
5089c3862
<     ## ipv6-address.h (module 'network'): std::string ns3::Ipv6AddressValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
---
>     ## ipv6-address.h (module 'network'): std::string ns3::Ipv6AddressValue::SerializeToString(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
5103c3876
<     ## ipv6-address.h (module 'network'): ns3::Ipv6PrefixChecker::Ipv6PrefixChecker(ns3::Ipv6PrefixChecker const & arg0) [constructor]
---
>     ## ipv6-address.h (module 'network'): ns3::Ipv6PrefixChecker::Ipv6PrefixChecker(ns3::Ipv6PrefixChecker const & arg0) [copy constructor]
5109a3883,3884
>     ## ipv6-address.h (module 'network'): ns3::Ipv6PrefixValue::Ipv6PrefixValue(ns3::Ipv6PrefixValue const & arg0) [copy constructor]
>     cls.add_constructor([param('ns3::Ipv6PrefixValue const &', 'arg0')])
5112,5113d3886
<     ## ipv6-address.h (module 'network'): ns3::Ipv6PrefixValue::Ipv6PrefixValue(ns3::Ipv6PrefixValue const & arg0) [constructor]
<     cls.add_constructor([param('ns3::Ipv6PrefixValue const &', 'arg0')])
5119c3892
<     ## ipv6-address.h (module 'network'): bool ns3::Ipv6PrefixValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
---
>     ## ipv6-address.h (module 'network'): bool ns3::Ipv6PrefixValue::DeserializeFromString(std::string value, ns3::Ptr<ns3::AttributeChecker const> checker) [member function]
5129c3902
<     ## ipv6-address.h (module 'network'): std::string ns3::Ipv6PrefixValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
---
>     ## ipv6-address.h (module 'network'): std::string ns3::Ipv6PrefixValue::SerializeToString(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
5140a3914,3915
>     ## itu-r-1238-propagation-loss-model.h (module 'buildings'): ns3::ItuR1238PropagationLossModel::ItuR1238PropagationLossModel() [constructor]
>     cls.add_constructor([])
5151,5152d3925
<     ## itu-r-1238-propagation-loss-model.h (module 'buildings'): ns3::ItuR1238PropagationLossModel::ItuR1238PropagationLossModel() [constructor]
<     cls.add_constructor([])
5166c3939
<     ## position-allocator.h (module 'mobility'): ns3::ListPositionAllocator::ListPositionAllocator(ns3::ListPositionAllocator const & arg0) [constructor]
---
>     ## position-allocator.h (module 'mobility'): ns3::ListPositionAllocator::ListPositionAllocator(ns3::ListPositionAllocator const & arg0) [copy constructor]
5173c3946
<                    [param('ns3::Vector3D', 'v')])
---
>                    [param('ns3::Vector', 'v')])
5184,5188d3956
<     ## position-allocator.h (module 'mobility'): uint32_t ns3::ListPositionAllocator::GetSize() const [member function]
<     cls.add_method('GetSize', 
<                    'uint32_t', 
<                    [], 
<                    is_const=True)
5267,5306d4034
< def register_Ns3Mac48AddressChecker_methods(root_module, cls):
<     ## mac48-address.h (module 'network'): ns3::Mac48AddressChecker::Mac48AddressChecker() [constructor]
<     cls.add_constructor([])
<     ## mac48-address.h (module 'network'): ns3::Mac48AddressChecker::Mac48AddressChecker(ns3::Mac48AddressChecker const & arg0) [constructor]
<     cls.add_constructor([param('ns3::Mac48AddressChecker const &', 'arg0')])
<     return
< 
< def register_Ns3Mac48AddressValue_methods(root_module, cls):
<     ## mac48-address.h (module 'network'): ns3::Mac48AddressValue::Mac48AddressValue() [constructor]
<     cls.add_constructor([])
<     ## mac48-address.h (module 'network'): ns3::Mac48AddressValue::Mac48AddressValue(ns3::Mac48Address const & value) [constructor]
<     cls.add_constructor([param('ns3::Mac48Address const &', 'value')])
<     ## mac48-address.h (module 'network'): ns3::Mac48AddressValue::Mac48AddressValue(ns3::Mac48AddressValue const & arg0) [constructor]
<     cls.add_constructor([param('ns3::Mac48AddressValue const &', 'arg0')])
<     ## mac48-address.h (module 'network'): ns3::Ptr<ns3::AttributeValue> ns3::Mac48AddressValue::Copy() const [member function]
<     cls.add_method('Copy', 
<                    'ns3::Ptr< ns3::AttributeValue >', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## mac48-address.h (module 'network'): bool ns3::Mac48AddressValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
<     cls.add_method('DeserializeFromString', 
<                    'bool', 
<                    [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
<                    is_virtual=True)
<     ## mac48-address.h (module 'network'): ns3::Mac48Address ns3::Mac48AddressValue::Get() const [member function]
<     cls.add_method('Get', 
<                    'ns3::Mac48Address', 
<                    [], 
<                    is_const=True)
<     ## mac48-address.h (module 'network'): std::string ns3::Mac48AddressValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
<     cls.add_method('SerializeToString', 
<                    'std::string', 
<                    [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
<                    is_const=True, is_virtual=True)
<     ## mac48-address.h (module 'network'): void ns3::Mac48AddressValue::Set(ns3::Mac48Address const & value) [member function]
<     cls.add_method('Set', 
<                    'void', 
<                    [param('ns3::Mac48Address const &', 'value')])
<     return
< 
5336c4064
<     ## mobility-building-info.h (module 'buildings'): ns3::MobilityBuildingInfo::MobilityBuildingInfo(ns3::MobilityBuildingInfo const & arg0) [constructor]
---
>     ## mobility-building-info.h (module 'buildings'): ns3::MobilityBuildingInfo::MobilityBuildingInfo(ns3::MobilityBuildingInfo const & arg0) [copy constructor]
5370,5375c4098
<                    [], 
<                    deprecated=True)
<     ## mobility-building-info.h (module 'buildings'): void ns3::MobilityBuildingInfo::MakeConsistent(ns3::Ptr<ns3::MobilityModel> mm) [member function]
<     cls.add_method('MakeConsistent', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::MobilityModel >', 'mm')])
---
>                    [])
5388,5457d4110
<     ## mobility-building-info.h (module 'buildings'): void ns3::MobilityBuildingInfo::DoInitialize() [member function]
<     cls.add_method('DoInitialize', 
<                    'void', 
<                    [], 
<                    visibility='protected', is_virtual=True)
<     return
< 
< def register_Ns3MobilityModel_methods(root_module, cls):
<     ## mobility-model.h (module 'mobility'): ns3::MobilityModel::MobilityModel(ns3::MobilityModel const & arg0) [constructor]
<     cls.add_constructor([param('ns3::MobilityModel const &', 'arg0')])
<     ## mobility-model.h (module 'mobility'): ns3::MobilityModel::MobilityModel() [constructor]
<     cls.add_constructor([])
<     ## mobility-model.h (module 'mobility'): int64_t ns3::MobilityModel::AssignStreams(int64_t stream) [member function]
<     cls.add_method('AssignStreams', 
<                    'int64_t', 
<                    [param('int64_t', 'stream')])
<     ## mobility-model.h (module 'mobility'): double ns3::MobilityModel::GetDistanceFrom(ns3::Ptr<const ns3::MobilityModel> position) const [member function]
<     cls.add_method('GetDistanceFrom', 
<                    'double', 
<                    [param('ns3::Ptr< ns3::MobilityModel const >', 'position')], 
<                    is_const=True)
<     ## mobility-model.h (module 'mobility'): ns3::Vector ns3::MobilityModel::GetPosition() const [member function]
<     cls.add_method('GetPosition', 
<                    'ns3::Vector', 
<                    [], 
<                    is_const=True)
<     ## mobility-model.h (module 'mobility'): double ns3::MobilityModel::GetRelativeSpeed(ns3::Ptr<const ns3::MobilityModel> other) const [member function]
<     cls.add_method('GetRelativeSpeed', 
<                    'double', 
<                    [param('ns3::Ptr< ns3::MobilityModel const >', 'other')], 
<                    is_const=True)
<     ## mobility-model.h (module 'mobility'): static ns3::TypeId ns3::MobilityModel::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## mobility-model.h (module 'mobility'): ns3::Vector ns3::MobilityModel::GetVelocity() const [member function]
<     cls.add_method('GetVelocity', 
<                    'ns3::Vector', 
<                    [], 
<                    is_const=True)
<     ## mobility-model.h (module 'mobility'): void ns3::MobilityModel::SetPosition(ns3::Vector const & position) [member function]
<     cls.add_method('SetPosition', 
<                    'void', 
<                    [param('ns3::Vector const &', 'position')])
<     ## mobility-model.h (module 'mobility'): void ns3::MobilityModel::NotifyCourseChange() const [member function]
<     cls.add_method('NotifyCourseChange', 
<                    'void', 
<                    [], 
<                    is_const=True, visibility='protected')
<     ## mobility-model.h (module 'mobility'): int64_t ns3::MobilityModel::DoAssignStreams(int64_t start) [member function]
<     cls.add_method('DoAssignStreams', 
<                    'int64_t', 
<                    [param('int64_t', 'start')], 
<                    visibility='private', is_virtual=True)
<     ## mobility-model.h (module 'mobility'): ns3::Vector ns3::MobilityModel::DoGetPosition() const [member function]
<     cls.add_method('DoGetPosition', 
<                    'ns3::Vector', 
<                    [], 
<                    is_const=True, visibility='private', is_virtual=True, is_pure_virtual=True)
<     ## mobility-model.h (module 'mobility'): ns3::Vector ns3::MobilityModel::DoGetVelocity() const [member function]
<     cls.add_method('DoGetVelocity', 
<                    'ns3::Vector', 
<                    [], 
<                    is_const=True, visibility='private', is_virtual=True, is_pure_virtual=True)
<     ## mobility-model.h (module 'mobility'): void ns3::MobilityModel::DoSetPosition(ns3::Vector const & position) [member function]
<     cls.add_method('DoSetPosition', 
<                    'void', 
<                    [param('ns3::Vector const &', 'position')], 
<                    visibility='private', is_virtual=True, is_pure_virtual=True)
5483c4136
<     ## net-device.h (module 'network'): ns3::NetDevice::NetDevice(ns3::NetDevice const & arg0) [constructor]
---
>     ## net-device.h (module 'network'): ns3::NetDevice::NetDevice(ns3::NetDevice const & arg0) [copy constructor]
5489c4142
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
5494c4147
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
5499c4152
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
5504c4157
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
5509c4162
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
5514c4167
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
5519c4172
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
5524c4177
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
5529c4182
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
5539c4192
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
5544c4197
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
5549c4202
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
5554c4207
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
5559c4212
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
5564c4217
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
5569c4222
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
5574c4227
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
5579c4232
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
5584c4237
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
5589c4242
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
5594,5595c4247,4248
<                    is_virtual=True, is_pure_virtual=True)
<     ## net-device.h (module 'network'): void ns3::NetDevice::SetPromiscReceiveCallback(ns3::NetDevice::PromiscReceiveCallback cb) [member function]
---
>                    is_pure_virtual=True, is_virtual=True)
>     ## net-device.h (module 'network'): void ns3::NetDevice::SetPromiscReceiveCallback(ns3::Callback<bool,ns3::Ptr<ns3::NetDevice>,ns3::Ptr<const ns3::Packet>,short unsigned int,const ns3::Address&,const ns3::Address&,ns3::NetDevice::PacketType,ns3::empty,ns3::empty,ns3::empty> cb) [member function]
5598,5600c4251,4253
<                    [param('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >', 'cb')], 
<                    is_virtual=True, is_pure_virtual=True)
<     ## net-device.h (module 'network'): void ns3::NetDevice::SetReceiveCallback(ns3::NetDevice::ReceiveCallback cb) [member function]
---
>                    [param('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, short unsigned int, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >', 'cb')], 
>                    is_pure_virtual=True, is_virtual=True)
>     ## net-device.h (module 'network'): void ns3::NetDevice::SetReceiveCallback(ns3::Callback<bool,ns3::Ptr<ns3::NetDevice>,ns3::Ptr<const ns3::Packet>,short unsigned int,const ns3::Address&,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> cb) [member function]
5603,5604c4256,4257
<                    [param('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'cb')], 
<                    is_virtual=True, is_pure_virtual=True)
---
>                    [param('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, short unsigned int, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'cb')], 
>                    is_pure_virtual=True, is_virtual=True)
5609c4262
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
5612,5618c4265,4268
< def register_Ns3NeverLosChannelConditionModel_methods(root_module, cls):
<     ## channel-condition-model.h (module 'propagation'): static ns3::TypeId ns3::NeverLosChannelConditionModel::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## channel-condition-model.h (module 'propagation'): ns3::NeverLosChannelConditionModel::NeverLosChannelConditionModel() [constructor]
---
> def register_Ns3NetDeviceQueue_methods(root_module, cls):
>     ## net-device.h (module 'network'): ns3::NetDeviceQueue::NetDeviceQueue(ns3::NetDeviceQueue const & arg0) [copy constructor]
>     cls.add_constructor([param('ns3::NetDeviceQueue const &', 'arg0')])
>     ## net-device.h (module 'network'): ns3::NetDeviceQueue::NetDeviceQueue() [constructor]
5620,5628c4270,4313
<     ## channel-condition-model.h (module 'propagation'): ns3::Ptr<ns3::ChannelCondition> ns3::NeverLosChannelConditionModel::GetChannelCondition(ns3::Ptr<const ns3::MobilityModel> a, ns3::Ptr<const ns3::MobilityModel> b) const [member function]
<     cls.add_method('GetChannelCondition', 
<                    'ns3::Ptr< ns3::ChannelCondition >', 
<                    [param('ns3::Ptr< ns3::MobilityModel const >', 'a'), param('ns3::Ptr< ns3::MobilityModel const >', 'b')], 
<                    is_const=True, is_virtual=True)
<     ## channel-condition-model.h (module 'propagation'): int64_t ns3::NeverLosChannelConditionModel::AssignStreams(int64_t stream) [member function]
<     cls.add_method('AssignStreams', 
<                    'int64_t', 
<                    [param('int64_t', 'stream')], 
---
>     ## net-device.h (module 'network'): ns3::Ptr<ns3::QueueLimits> ns3::NetDeviceQueue::GetQueueLimits() [member function]
>     cls.add_method('GetQueueLimits', 
>                    'ns3::Ptr< ns3::QueueLimits >', 
>                    [])
>     ## net-device.h (module 'network'): bool ns3::NetDeviceQueue::IsStopped() const [member function]
>     cls.add_method('IsStopped', 
>                    'bool', 
>                    [], 
>                    is_const=True)
>     ## net-device.h (module 'network'): void ns3::NetDeviceQueue::NotifyQueuedBytes(uint32_t bytes) [member function]
>     cls.add_method('NotifyQueuedBytes', 
>                    'void', 
>                    [param('uint32_t', 'bytes')])
>     ## net-device.h (module 'network'): void ns3::NetDeviceQueue::NotifyTransmittedBytes(uint32_t bytes) [member function]
>     cls.add_method('NotifyTransmittedBytes', 
>                    'void', 
>                    [param('uint32_t', 'bytes')])
>     ## net-device.h (module 'network'): void ns3::NetDeviceQueue::ResetQueueLimits() [member function]
>     cls.add_method('ResetQueueLimits', 
>                    'void', 
>                    [])
>     ## net-device.h (module 'network'): void ns3::NetDeviceQueue::SetQueueLimits(ns3::Ptr<ns3::QueueLimits> ql) [member function]
>     cls.add_method('SetQueueLimits', 
>                    'void', 
>                    [param('ns3::Ptr< ns3::QueueLimits >', 'ql')])
>     ## net-device.h (module 'network'): void ns3::NetDeviceQueue::SetWakeCallback(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> cb) [member function]
>     cls.add_method('SetWakeCallback', 
>                    'void', 
>                    [param('ns3::Callback< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'cb')], 
>                    is_virtual=True)
>     ## net-device.h (module 'network'): void ns3::NetDeviceQueue::Start() [member function]
>     cls.add_method('Start', 
>                    'void', 
>                    [], 
>                    is_virtual=True)
>     ## net-device.h (module 'network'): void ns3::NetDeviceQueue::Stop() [member function]
>     cls.add_method('Stop', 
>                    'void', 
>                    [], 
>                    is_virtual=True)
>     ## net-device.h (module 'network'): void ns3::NetDeviceQueue::Wake() [member function]
>     cls.add_method('Wake', 
>                    'void', 
>                    [], 
5632,5634c4317,4320
< def register_Ns3NixVector_methods(root_module, cls):
<     cls.add_output_stream_operator()
<     ## nix-vector.h (module 'network'): ns3::NixVector::NixVector() [constructor]
---
> def register_Ns3NetDeviceQueueInterface_methods(root_module, cls):
>     ## net-device.h (module 'network'): ns3::NetDeviceQueueInterface::NetDeviceQueueInterface(ns3::NetDeviceQueueInterface const & arg0) [copy constructor]
>     cls.add_constructor([param('ns3::NetDeviceQueueInterface const &', 'arg0')])
>     ## net-device.h (module 'network'): ns3::NetDeviceQueueInterface::NetDeviceQueueInterface() [constructor]
5636,5639c4322,4323
<     ## nix-vector.h (module 'network'): ns3::NixVector::NixVector(ns3::NixVector const & o) [constructor]
<     cls.add_constructor([param('ns3::NixVector const &', 'o')])
<     ## nix-vector.h (module 'network'): void ns3::NixVector::AddNeighborIndex(uint32_t newBits, uint32_t numberOfBits) [member function]
<     cls.add_method('AddNeighborIndex', 
---
>     ## net-device.h (module 'network'): void ns3::NetDeviceQueueInterface::CreateTxQueues() [member function]
>     cls.add_method('CreateTxQueues', 
5641,5649c4325,4328
<                    [param('uint32_t', 'newBits'), param('uint32_t', 'numberOfBits')])
<     ## nix-vector.h (module 'network'): uint32_t ns3::NixVector::BitCount(uint32_t numberOfNeighbors) const [member function]
<     cls.add_method('BitCount', 
<                    'uint32_t', 
<                    [param('uint32_t', 'numberOfNeighbors')], 
<                    is_const=True)
<     ## nix-vector.h (module 'network'): ns3::Ptr<ns3::NixVector> ns3::NixVector::Copy() const [member function]
<     cls.add_method('Copy', 
<                    'ns3::Ptr< ns3::NixVector >', 
---
>                    [])
>     ## net-device.h (module 'network'): uint8_t ns3::NetDeviceQueueInterface::GetNTxQueues() const [member function]
>     cls.add_method('GetNTxQueues', 
>                    'uint8_t', 
5652,5666c4331,4333
<     ## nix-vector.h (module 'network'): uint32_t ns3::NixVector::Deserialize(uint32_t const * buffer, uint32_t size) [member function]
<     cls.add_method('Deserialize', 
<                    'uint32_t', 
<                    [param('uint32_t const *', 'buffer'), param('uint32_t', 'size')])
<     ## nix-vector.h (module 'network'): uint32_t ns3::NixVector::ExtractNeighborIndex(uint32_t numberOfBits) [member function]
<     cls.add_method('ExtractNeighborIndex', 
<                    'uint32_t', 
<                    [param('uint32_t', 'numberOfBits')])
<     ## nix-vector.h (module 'network'): uint32_t ns3::NixVector::GetRemainingBits() [member function]
<     cls.add_method('GetRemainingBits', 
<                    'uint32_t', 
<                    [])
<     ## nix-vector.h (module 'network'): uint32_t ns3::NixVector::GetSerializedSize() const [member function]
<     cls.add_method('GetSerializedSize', 
<                    'uint32_t', 
---
>     ## net-device.h (module 'network'): ns3::Callback<unsigned char, ns3::Ptr<ns3::QueueItem>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> ns3::NetDeviceQueueInterface::GetSelectQueueCallback() const [member function]
>     cls.add_method('GetSelectQueueCallback', 
>                    'ns3::Callback< unsigned char, ns3::Ptr< ns3::QueueItem >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 
5669,5672c4336,4339
<     ## nix-vector.h (module 'network'): uint32_t ns3::NixVector::Serialize(uint32_t * buffer, uint32_t maxSize) const [member function]
<     cls.add_method('Serialize', 
<                    'uint32_t', 
<                    [param('uint32_t *', 'buffer'), param('uint32_t', 'maxSize')], 
---
>     ## net-device.h (module 'network'): ns3::Ptr<ns3::NetDeviceQueue> ns3::NetDeviceQueueInterface::GetTxQueue(uint8_t i) const [member function]
>     cls.add_method('GetTxQueue', 
>                    'ns3::Ptr< ns3::NetDeviceQueue >', 
>                    [param('uint8_t', 'i')], 
5673a4341,4358
>     ## net-device.h (module 'network'): static ns3::TypeId ns3::NetDeviceQueueInterface::GetTypeId() [member function]
>     cls.add_method('GetTypeId', 
>                    'ns3::TypeId', 
>                    [], 
>                    is_static=True)
>     ## net-device.h (module 'network'): void ns3::NetDeviceQueueInterface::SetSelectQueueCallback(ns3::Callback<unsigned char, ns3::Ptr<ns3::QueueItem>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> cb) [member function]
>     cls.add_method('SetSelectQueueCallback', 
>                    'void', 
>                    [param('ns3::Callback< unsigned char, ns3::Ptr< ns3::QueueItem >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'cb')])
>     ## net-device.h (module 'network'): void ns3::NetDeviceQueueInterface::SetTxQueuesN(uint8_t numTxQueues) [member function]
>     cls.add_method('SetTxQueuesN', 
>                    'void', 
>                    [param('uint8_t', 'numTxQueues')])
>     ## net-device.h (module 'network'): void ns3::NetDeviceQueueInterface::DoDispose() [member function]
>     cls.add_method('DoDispose', 
>                    'void', 
>                    [], 
>                    visibility='protected', is_virtual=True)
5677c4362
<     ## node.h (module 'network'): ns3::Node::Node(ns3::Node const & arg0) [constructor]
---
>     ## node.h (module 'network'): ns3::Node::Node(ns3::Node const & arg0) [copy constructor]
5736c4421
<     ## node.h (module 'network'): void ns3::Node::RegisterDeviceAdditionListener(ns3::Node::DeviceAdditionListener listener) [member function]
---
>     ## node.h (module 'network'): void ns3::Node::RegisterDeviceAdditionListener(ns3::Callback<void,ns3::Ptr<ns3::NetDevice>,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> listener) [member function]
5740c4425
<     ## node.h (module 'network'): void ns3::Node::RegisterProtocolHandler(ns3::Node::ProtocolHandler handler, uint16_t protocolType, ns3::Ptr<ns3::NetDevice> device, bool promiscuous=false) [member function]
---
>     ## node.h (module 'network'): void ns3::Node::RegisterProtocolHandler(ns3::Callback<void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<ns3::Packet const>, unsigned short, ns3::Address const&, ns3::Address const&, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty> handler, uint16_t protocolType, ns3::Ptr<ns3::NetDevice> device, bool promiscuous=false) [member function]
5744c4429
<     ## node.h (module 'network'): void ns3::Node::UnregisterDeviceAdditionListener(ns3::Node::DeviceAdditionListener listener) [member function]
---
>     ## node.h (module 'network'): void ns3::Node::UnregisterDeviceAdditionListener(ns3::Callback<void,ns3::Ptr<ns3::NetDevice>,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> listener) [member function]
5748c4433
<     ## node.h (module 'network'): void ns3::Node::UnregisterProtocolHandler(ns3::Node::ProtocolHandler handler) [member function]
---
>     ## node.h (module 'network'): void ns3::Node::UnregisterProtocolHandler(ns3::Callback<void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<ns3::Packet const>, unsigned short, ns3::Address const&, ns3::Address const&, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty> handler) [member function]
5812c4497
<     ## object-factory.h (module 'core'): ns3::ObjectFactoryChecker::ObjectFactoryChecker(ns3::ObjectFactoryChecker const & arg0) [constructor]
---
>     ## object-factory.h (module 'core'): ns3::ObjectFactoryChecker::ObjectFactoryChecker(ns3::ObjectFactoryChecker const & arg0) [copy constructor]
5818a4504,4505
>     ## object-factory.h (module 'core'): ns3::ObjectFactoryValue::ObjectFactoryValue(ns3::ObjectFactoryValue const & arg0) [copy constructor]
>     cls.add_constructor([param('ns3::ObjectFactoryValue const &', 'arg0')])
5821,5822d4507
<     ## object-factory.h (module 'core'): ns3::ObjectFactoryValue::ObjectFactoryValue(ns3::ObjectFactoryValue const & arg0) [constructor]
<     cls.add_constructor([param('ns3::ObjectFactoryValue const &', 'arg0')])
5828c4513
<     ## object-factory.h (module 'core'): bool ns3::ObjectFactoryValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
---
>     ## object-factory.h (module 'core'): bool ns3::ObjectFactoryValue::DeserializeFromString(std::string value, ns3::Ptr<ns3::AttributeChecker const> checker) [member function]
5838c4523
<     ## object-factory.h (module 'core'): std::string ns3::ObjectFactoryValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
---
>     ## object-factory.h (module 'core'): std::string ns3::ObjectFactoryValue::SerializeToString(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
5864,6096d4548
< def register_Ns3OutdoorPositionAllocator_methods(root_module, cls):
<     ## building-position-allocator.h (module 'buildings'): ns3::OutdoorPositionAllocator::OutdoorPositionAllocator(ns3::OutdoorPositionAllocator const & arg0) [constructor]
<     cls.add_constructor([param('ns3::OutdoorPositionAllocator const &', 'arg0')])
<     ## building-position-allocator.h (module 'buildings'): ns3::OutdoorPositionAllocator::OutdoorPositionAllocator() [constructor]
<     cls.add_constructor([])
<     ## building-position-allocator.h (module 'buildings'): int64_t ns3::OutdoorPositionAllocator::AssignStreams(int64_t stream) [member function]
<     cls.add_method('AssignStreams', 
<                    'int64_t', 
<                    [param('int64_t', 'stream')], 
<                    is_virtual=True)
<     ## building-position-allocator.h (module 'buildings'): ns3::Vector ns3::OutdoorPositionAllocator::GetNext() const [member function]
<     cls.add_method('GetNext', 
<                    'ns3::Vector', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## building-position-allocator.h (module 'buildings'): static ns3::TypeId ns3::OutdoorPositionAllocator::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## building-position-allocator.h (module 'buildings'): void ns3::OutdoorPositionAllocator::SetX(ns3::Ptr<ns3::RandomVariableStream> x) [member function]
<     cls.add_method('SetX', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::RandomVariableStream >', 'x')])
<     ## building-position-allocator.h (module 'buildings'): void ns3::OutdoorPositionAllocator::SetY(ns3::Ptr<ns3::RandomVariableStream> y) [member function]
<     cls.add_method('SetY', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::RandomVariableStream >', 'y')])
<     ## building-position-allocator.h (module 'buildings'): void ns3::OutdoorPositionAllocator::SetZ(ns3::Ptr<ns3::RandomVariableStream> z) [member function]
<     cls.add_method('SetZ', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::RandomVariableStream >', 'z')])
<     return
< 
< def register_Ns3Packet_methods(root_module, cls):
<     cls.add_output_stream_operator()
<     ## packet.h (module 'network'): ns3::Packet::Packet() [constructor]
<     cls.add_constructor([])
<     ## packet.h (module 'network'): ns3::Packet::Packet(ns3::Packet const & o) [constructor]
<     cls.add_constructor([param('ns3::Packet const &', 'o')])
<     ## packet.h (module 'network'): ns3::Packet::Packet(uint32_t size) [constructor]
<     cls.add_constructor([param('uint32_t', 'size')])
<     ## packet.h (module 'network'): ns3::Packet::Packet(uint8_t const * buffer, uint32_t size, bool magic) [constructor]
<     cls.add_constructor([param('uint8_t const *', 'buffer'), param('uint32_t', 'size'), param('bool', 'magic')])
<     ## packet.h (module 'network'): ns3::Packet::Packet(uint8_t const * buffer, uint32_t size) [constructor]
<     cls.add_constructor([param('uint8_t const *', 'buffer'), param('uint32_t', 'size')])
<     ## packet.h (module 'network'): void ns3::Packet::AddAtEnd(ns3::Ptr<const ns3::Packet> packet) [member function]
<     cls.add_method('AddAtEnd', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Packet const >', 'packet')])
<     ## packet.h (module 'network'): void ns3::Packet::AddByteTag(ns3::Tag const & tag) const [member function]
<     cls.add_method('AddByteTag', 
<                    'void', 
<                    [param('ns3::Tag const &', 'tag')], 
<                    is_const=True)
<     ## packet.h (module 'network'): void ns3::Packet::AddByteTag(ns3::Tag const & tag, uint32_t start, uint32_t end) const [member function]
<     cls.add_method('AddByteTag', 
<                    'void', 
<                    [param('ns3::Tag const &', 'tag'), param('uint32_t', 'start'), param('uint32_t', 'end')], 
<                    is_const=True)
<     ## packet.h (module 'network'): void ns3::Packet::AddHeader(ns3::Header const & header) [member function]
<     cls.add_method('AddHeader', 
<                    'void', 
<                    [param('ns3::Header const &', 'header')])
<     ## packet.h (module 'network'): void ns3::Packet::AddPacketTag(ns3::Tag const & tag) const [member function]
<     cls.add_method('AddPacketTag', 
<                    'void', 
<                    [param('ns3::Tag const &', 'tag')], 
<                    is_const=True)
<     ## packet.h (module 'network'): void ns3::Packet::AddPaddingAtEnd(uint32_t size) [member function]
<     cls.add_method('AddPaddingAtEnd', 
<                    'void', 
<                    [param('uint32_t', 'size')])
<     ## packet.h (module 'network'): void ns3::Packet::AddTrailer(ns3::Trailer const & trailer) [member function]
<     cls.add_method('AddTrailer', 
<                    'void', 
<                    [param('ns3::Trailer const &', 'trailer')])
<     ## packet.h (module 'network'): ns3::PacketMetadata::ItemIterator ns3::Packet::BeginItem() const [member function]
<     cls.add_method('BeginItem', 
<                    'ns3::PacketMetadata::ItemIterator', 
<                    [], 
<                    is_const=True)
<     ## packet.h (module 'network'): ns3::Ptr<ns3::Packet> ns3::Packet::Copy() const [member function]
<     cls.add_method('Copy', 
<                    'ns3::Ptr< ns3::Packet >', 
<                    [], 
<                    is_const=True)
<     ## packet.h (module 'network'): uint32_t ns3::Packet::CopyData(uint8_t * buffer, uint32_t size) const [member function]
<     cls.add_method('CopyData', 
<                    'uint32_t', 
<                    [param('uint8_t *', 'buffer'), param('uint32_t', 'size')], 
<                    is_const=True)
<     ## packet.h (module 'network'): void ns3::Packet::CopyData(std::ostream * os, uint32_t size) const [member function]
<     cls.add_method('CopyData', 
<                    'void', 
<                    [param('std::ostream *', 'os'), param('uint32_t', 'size')], 
<                    is_const=True)
<     ## packet.h (module 'network'): ns3::Ptr<ns3::Packet> ns3::Packet::CreateFragment(uint32_t start, uint32_t length) const [member function]
<     cls.add_method('CreateFragment', 
<                    'ns3::Ptr< ns3::Packet >', 
<                    [param('uint32_t', 'start'), param('uint32_t', 'length')], 
<                    is_const=True)
<     ## packet.h (module 'network'): static void ns3::Packet::EnableChecking() [member function]
<     cls.add_method('EnableChecking', 
<                    'void', 
<                    [], 
<                    is_static=True)
<     ## packet.h (module 'network'): static void ns3::Packet::EnablePrinting() [member function]
<     cls.add_method('EnablePrinting', 
<                    'void', 
<                    [], 
<                    is_static=True)
<     ## packet.h (module 'network'): bool ns3::Packet::FindFirstMatchingByteTag(ns3::Tag & tag) const [member function]
<     cls.add_method('FindFirstMatchingByteTag', 
<                    'bool', 
<                    [param('ns3::Tag &', 'tag')], 
<                    is_const=True)
<     ## packet.h (module 'network'): ns3::ByteTagIterator ns3::Packet::GetByteTagIterator() const [member function]
<     cls.add_method('GetByteTagIterator', 
<                    'ns3::ByteTagIterator', 
<                    [], 
<                    is_const=True)
<     ## packet.h (module 'network'): ns3::Ptr<ns3::NixVector> ns3::Packet::GetNixVector() const [member function]
<     cls.add_method('GetNixVector', 
<                    'ns3::Ptr< ns3::NixVector >', 
<                    [], 
<                    is_const=True)
<     ## packet.h (module 'network'): ns3::PacketTagIterator ns3::Packet::GetPacketTagIterator() const [member function]
<     cls.add_method('GetPacketTagIterator', 
<                    'ns3::PacketTagIterator', 
<                    [], 
<                    is_const=True)
<     ## packet.h (module 'network'): uint32_t ns3::Packet::GetSerializedSize() const [member function]
<     cls.add_method('GetSerializedSize', 
<                    'uint32_t', 
<                    [], 
<                    is_const=True)
<     ## packet.h (module 'network'): uint32_t ns3::Packet::GetSize() const [member function]
<     cls.add_method('GetSize', 
<                    'uint32_t', 
<                    [], 
<                    is_const=True)
<     ## packet.h (module 'network'): uint64_t ns3::Packet::GetUid() const [member function]
<     cls.add_method('GetUid', 
<                    'uint64_t', 
<                    [], 
<                    is_const=True)
<     ## packet.h (module 'network'): uint32_t ns3::Packet::PeekHeader(ns3::Header & header) const [member function]
<     cls.add_method('PeekHeader', 
<                    'uint32_t', 
<                    [param('ns3::Header &', 'header')], 
<                    is_const=True)
<     ## packet.h (module 'network'): uint32_t ns3::Packet::PeekHeader(ns3::Header & header, uint32_t size) const [member function]
<     cls.add_method('PeekHeader', 
<                    'uint32_t', 
<                    [param('ns3::Header &', 'header'), param('uint32_t', 'size')], 
<                    is_const=True)
<     ## packet.h (module 'network'): bool ns3::Packet::PeekPacketTag(ns3::Tag & tag) const [member function]
<     cls.add_method('PeekPacketTag', 
<                    'bool', 
<                    [param('ns3::Tag &', 'tag')], 
<                    is_const=True)
<     ## packet.h (module 'network'): uint32_t ns3::Packet::PeekTrailer(ns3::Trailer & trailer) [member function]
<     cls.add_method('PeekTrailer', 
<                    'uint32_t', 
<                    [param('ns3::Trailer &', 'trailer')])
<     ## packet.h (module 'network'): void ns3::Packet::Print(std::ostream & os) const [member function]
<     cls.add_method('Print', 
<                    'void', 
<                    [param('std::ostream &', 'os')], 
<                    is_const=True)
<     ## packet.h (module 'network'): void ns3::Packet::PrintByteTags(std::ostream & os) const [member function]
<     cls.add_method('PrintByteTags', 
<                    'void', 
<                    [param('std::ostream &', 'os')], 
<                    is_const=True)
<     ## packet.h (module 'network'): void ns3::Packet::PrintPacketTags(std::ostream & os) const [member function]
<     cls.add_method('PrintPacketTags', 
<                    'void', 
<                    [param('std::ostream &', 'os')], 
<                    is_const=True)
<     ## packet.h (module 'network'): void ns3::Packet::RemoveAllByteTags() [member function]
<     cls.add_method('RemoveAllByteTags', 
<                    'void', 
<                    [])
<     ## packet.h (module 'network'): void ns3::Packet::RemoveAllPacketTags() [member function]
<     cls.add_method('RemoveAllPacketTags', 
<                    'void', 
<                    [])
<     ## packet.h (module 'network'): void ns3::Packet::RemoveAtEnd(uint32_t size) [member function]
<     cls.add_method('RemoveAtEnd', 
<                    'void', 
<                    [param('uint32_t', 'size')])
<     ## packet.h (module 'network'): void ns3::Packet::RemoveAtStart(uint32_t size) [member function]
<     cls.add_method('RemoveAtStart', 
<                    'void', 
<                    [param('uint32_t', 'size')])
<     ## packet.h (module 'network'): uint32_t ns3::Packet::RemoveHeader(ns3::Header & header) [member function]
<     cls.add_method('RemoveHeader', 
<                    'uint32_t', 
<                    [param('ns3::Header &', 'header')])
<     ## packet.h (module 'network'): uint32_t ns3::Packet::RemoveHeader(ns3::Header & header, uint32_t size) [member function]
<     cls.add_method('RemoveHeader', 
<                    'uint32_t', 
<                    [param('ns3::Header &', 'header'), param('uint32_t', 'size')])
<     ## packet.h (module 'network'): bool ns3::Packet::RemovePacketTag(ns3::Tag & tag) [member function]
<     cls.add_method('RemovePacketTag', 
<                    'bool', 
<                    [param('ns3::Tag &', 'tag')])
<     ## packet.h (module 'network'): uint32_t ns3::Packet::RemoveTrailer(ns3::Trailer & trailer) [member function]
<     cls.add_method('RemoveTrailer', 
<                    'uint32_t', 
<                    [param('ns3::Trailer &', 'trailer')])
<     ## packet.h (module 'network'): bool ns3::Packet::ReplacePacketTag(ns3::Tag & tag) [member function]
<     cls.add_method('ReplacePacketTag', 
<                    'bool', 
<                    [param('ns3::Tag &', 'tag')])
<     ## packet.h (module 'network'): uint32_t ns3::Packet::Serialize(uint8_t * buffer, uint32_t maxSize) const [member function]
<     cls.add_method('Serialize', 
<                    'uint32_t', 
<                    [param('uint8_t *', 'buffer'), param('uint32_t', 'maxSize')], 
<                    is_const=True)
<     ## packet.h (module 'network'): void ns3::Packet::SetNixVector(ns3::Ptr<ns3::NixVector> nixVector) [member function]
<     cls.add_method('SetNixVector', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::NixVector >', 'nixVector')])
<     ## packet.h (module 'network'): std::string ns3::Packet::ToString() const [member function]
<     cls.add_method('ToString', 
<                    'std::string', 
<                    [], 
<                    is_const=True)
<     return
< 
6109,6113d4560
<                    is_const=True, deprecated=True)
<     ## random-variable-stream.h (module 'core'): double ns3::ParetoRandomVariable::GetScale() const [member function]
<     cls.add_method('GetScale', 
<                    'double', 
<                    [], 
6125c4572
<     ## random-variable-stream.h (module 'core'): double ns3::ParetoRandomVariable::GetValue(double scale, double shape, double bound) [member function]
---
>     ## random-variable-stream.h (module 'core'): double ns3::ParetoRandomVariable::GetValue(double mean, double shape, double bound) [member function]
6128,6129c4575,4576
<                    [param('double', 'scale'), param('double', 'shape'), param('double', 'bound')])
<     ## random-variable-stream.h (module 'core'): uint32_t ns3::ParetoRandomVariable::GetInteger(uint32_t scale, uint32_t shape, uint32_t bound) [member function]
---
>                    [param('double', 'mean'), param('double', 'shape'), param('double', 'bound')])
>     ## random-variable-stream.h (module 'core'): uint32_t ns3::ParetoRandomVariable::GetInteger(uint32_t mean, uint32_t shape, uint32_t bound) [member function]
6132c4579
<                    [param('uint32_t', 'scale'), param('uint32_t', 'shape'), param('uint32_t', 'bound')])
---
>                    [param('uint32_t', 'mean'), param('uint32_t', 'shape'), param('uint32_t', 'bound')])
6145,6223c4592,4598
< def register_Ns3ThreeGppChannelConditionModel_methods(root_module, cls):
<     ## channel-condition-model.h (module 'propagation'): ns3::ThreeGppChannelConditionModel::ThreeGppChannelConditionModel() [constructor]
<     cls.add_constructor([])
<     ## channel-condition-model.h (module 'propagation'): int64_t ns3::ThreeGppChannelConditionModel::AssignStreams(int64_t stream) [member function]
<     cls.add_method('AssignStreams', 
<                    'int64_t', 
<                    [param('int64_t', 'stream')], 
<                    is_virtual=True)
<     ## channel-condition-model.h (module 'propagation'): ns3::Ptr<ns3::ChannelCondition> ns3::ThreeGppChannelConditionModel::GetChannelCondition(ns3::Ptr<const ns3::MobilityModel> a, ns3::Ptr<const ns3::MobilityModel> b) const [member function]
<     cls.add_method('GetChannelCondition', 
<                    'ns3::Ptr< ns3::ChannelCondition >', 
<                    [param('ns3::Ptr< ns3::MobilityModel const >', 'a'), param('ns3::Ptr< ns3::MobilityModel const >', 'b')], 
<                    is_const=True, is_virtual=True)
<     ## channel-condition-model.h (module 'propagation'): static ns3::TypeId ns3::ThreeGppChannelConditionModel::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## channel-condition-model.h (module 'propagation'): static double ns3::ThreeGppChannelConditionModel::Calculate2dDistance(ns3::Vector const & a, ns3::Vector const & b) [member function]
<     cls.add_method('Calculate2dDistance', 
<                    'double', 
<                    [param('ns3::Vector const &', 'a'), param('ns3::Vector const &', 'b')], 
<                    visibility='protected', is_static=True)
<     ## channel-condition-model.h (module 'propagation'): double ns3::ThreeGppChannelConditionModel::ComputePlos(ns3::Ptr<const ns3::MobilityModel> a, ns3::Ptr<const ns3::MobilityModel> b) const [member function]
<     cls.add_method('ComputePlos', 
<                    'double', 
<                    [param('ns3::Ptr< ns3::MobilityModel const >', 'a'), param('ns3::Ptr< ns3::MobilityModel const >', 'b')], 
<                    is_const=True, visibility='private', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3ThreeGppIndoorMixedOfficeChannelConditionModel_methods(root_module, cls):
<     ## channel-condition-model.h (module 'propagation'): static ns3::TypeId ns3::ThreeGppIndoorMixedOfficeChannelConditionModel::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## channel-condition-model.h (module 'propagation'): ns3::ThreeGppIndoorMixedOfficeChannelConditionModel::ThreeGppIndoorMixedOfficeChannelConditionModel() [constructor]
<     cls.add_constructor([])
<     ## channel-condition-model.h (module 'propagation'): double ns3::ThreeGppIndoorMixedOfficeChannelConditionModel::ComputePlos(ns3::Ptr<const ns3::MobilityModel> a, ns3::Ptr<const ns3::MobilityModel> b) const [member function]
<     cls.add_method('ComputePlos', 
<                    'double', 
<                    [param('ns3::Ptr< ns3::MobilityModel const >', 'a'), param('ns3::Ptr< ns3::MobilityModel const >', 'b')], 
<                    is_const=True, visibility='private', is_virtual=True)
<     return
< 
< def register_Ns3ThreeGppIndoorOpenOfficeChannelConditionModel_methods(root_module, cls):
<     ## channel-condition-model.h (module 'propagation'): static ns3::TypeId ns3::ThreeGppIndoorOpenOfficeChannelConditionModel::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## channel-condition-model.h (module 'propagation'): ns3::ThreeGppIndoorOpenOfficeChannelConditionModel::ThreeGppIndoorOpenOfficeChannelConditionModel() [constructor]
<     cls.add_constructor([])
<     ## channel-condition-model.h (module 'propagation'): double ns3::ThreeGppIndoorOpenOfficeChannelConditionModel::ComputePlos(ns3::Ptr<const ns3::MobilityModel> a, ns3::Ptr<const ns3::MobilityModel> b) const [member function]
<     cls.add_method('ComputePlos', 
<                    'double', 
<                    [param('ns3::Ptr< ns3::MobilityModel const >', 'a'), param('ns3::Ptr< ns3::MobilityModel const >', 'b')], 
<                    is_const=True, visibility='private', is_virtual=True)
<     return
< 
< def register_Ns3ThreeGppRmaChannelConditionModel_methods(root_module, cls):
<     ## channel-condition-model.h (module 'propagation'): static ns3::TypeId ns3::ThreeGppRmaChannelConditionModel::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## channel-condition-model.h (module 'propagation'): ns3::ThreeGppRmaChannelConditionModel::ThreeGppRmaChannelConditionModel() [constructor]
<     cls.add_constructor([])
<     ## channel-condition-model.h (module 'propagation'): double ns3::ThreeGppRmaChannelConditionModel::ComputePlos(ns3::Ptr<const ns3::MobilityModel> a, ns3::Ptr<const ns3::MobilityModel> b) const [member function]
<     cls.add_method('ComputePlos', 
<                    'double', 
<                    [param('ns3::Ptr< ns3::MobilityModel const >', 'a'), param('ns3::Ptr< ns3::MobilityModel const >', 'b')], 
<                    is_const=True, visibility='private', is_virtual=True)
<     return
< 
< def register_Ns3ThreeGppUmaChannelConditionModel_methods(root_module, cls):
<     ## channel-condition-model.h (module 'propagation'): static ns3::TypeId ns3::ThreeGppUmaChannelConditionModel::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
---
> def register_Ns3QueueItem_methods(root_module, cls):
>     cls.add_output_stream_operator()
>     ## net-device.h (module 'network'): ns3::QueueItem::QueueItem(ns3::Ptr<ns3::Packet> p) [constructor]
>     cls.add_constructor([param('ns3::Ptr< ns3::Packet >', 'p')])
>     ## net-device.h (module 'network'): ns3::Ptr<ns3::Packet> ns3::QueueItem::GetPacket() const [member function]
>     cls.add_method('GetPacket', 
>                    'ns3::Ptr< ns3::Packet >', 
6225,6238c4600,4603
<                    is_static=True)
<     ## channel-condition-model.h (module 'propagation'): ns3::ThreeGppUmaChannelConditionModel::ThreeGppUmaChannelConditionModel() [constructor]
<     cls.add_constructor([])
<     ## channel-condition-model.h (module 'propagation'): double ns3::ThreeGppUmaChannelConditionModel::ComputePlos(ns3::Ptr<const ns3::MobilityModel> a, ns3::Ptr<const ns3::MobilityModel> b) const [member function]
<     cls.add_method('ComputePlos', 
<                    'double', 
<                    [param('ns3::Ptr< ns3::MobilityModel const >', 'a'), param('ns3::Ptr< ns3::MobilityModel const >', 'b')], 
<                    is_const=True, visibility='private', is_virtual=True)
<     return
< 
< def register_Ns3ThreeGppUmiStreetCanyonChannelConditionModel_methods(root_module, cls):
<     ## channel-condition-model.h (module 'propagation'): static ns3::TypeId ns3::ThreeGppUmiStreetCanyonChannelConditionModel::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
---
>                    is_const=True)
>     ## net-device.h (module 'network'): uint32_t ns3::QueueItem::GetPacketSize() const [member function]
>     cls.add_method('GetPacketSize', 
>                    'uint32_t', 
6240,6247c4605,4615
<                    is_static=True)
<     ## channel-condition-model.h (module 'propagation'): ns3::ThreeGppUmiStreetCanyonChannelConditionModel::ThreeGppUmiStreetCanyonChannelConditionModel() [constructor]
<     cls.add_constructor([])
<     ## channel-condition-model.h (module 'propagation'): double ns3::ThreeGppUmiStreetCanyonChannelConditionModel::ComputePlos(ns3::Ptr<const ns3::MobilityModel> a, ns3::Ptr<const ns3::MobilityModel> b) const [member function]
<     cls.add_method('ComputePlos', 
<                    'double', 
<                    [param('ns3::Ptr< ns3::MobilityModel const >', 'a'), param('ns3::Ptr< ns3::MobilityModel const >', 'b')], 
<                    is_const=True, visibility='private', is_virtual=True)
---
>                    is_const=True, is_virtual=True)
>     ## net-device.h (module 'network'): bool ns3::QueueItem::GetUint8Value(ns3::QueueItem::Uint8Values field, uint8_t & value) const [member function]
>     cls.add_method('GetUint8Value', 
>                    'bool', 
>                    [param('ns3::QueueItem::Uint8Values', 'field'), param('uint8_t &', 'value')], 
>                    is_const=True, is_virtual=True)
>     ## net-device.h (module 'network'): void ns3::QueueItem::Print(std::ostream & os) const [member function]
>     cls.add_method('Print', 
>                    'void', 
>                    [param('std::ostream &', 'os')], 
>                    is_const=True, is_virtual=True)
6252a4621,4622
>     ## nstime.h (module 'core'): ns3::TimeValue::TimeValue(ns3::TimeValue const & arg0) [copy constructor]
>     cls.add_constructor([param('ns3::TimeValue const &', 'arg0')])
6255,6256d4624
<     ## nstime.h (module 'core'): ns3::TimeValue::TimeValue(ns3::TimeValue const & arg0) [constructor]
<     cls.add_constructor([param('ns3::TimeValue const &', 'arg0')])
6262c4630
<     ## nstime.h (module 'core'): bool ns3::TimeValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
---
>     ## nstime.h (module 'core'): bool ns3::TimeValue::DeserializeFromString(std::string value, ns3::Ptr<ns3::AttributeChecker const> checker) [member function]
6272c4640
<     ## nstime.h (module 'core'): std::string ns3::TimeValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
---
>     ## nstime.h (module 'core'): std::string ns3::TimeValue::SerializeToString(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
6286c4654
<     ## type-id.h (module 'core'): ns3::TypeIdChecker::TypeIdChecker(ns3::TypeIdChecker const & arg0) [constructor]
---
>     ## type-id.h (module 'core'): ns3::TypeIdChecker::TypeIdChecker(ns3::TypeIdChecker const & arg0) [copy constructor]
6292a4661,4662
>     ## type-id.h (module 'core'): ns3::TypeIdValue::TypeIdValue(ns3::TypeIdValue const & arg0) [copy constructor]
>     cls.add_constructor([param('ns3::TypeIdValue const &', 'arg0')])
6295,6296d4664
<     ## type-id.h (module 'core'): ns3::TypeIdValue::TypeIdValue(ns3::TypeIdValue const & arg0) [constructor]
<     cls.add_constructor([param('ns3::TypeIdValue const &', 'arg0')])
6302c4670
<     ## type-id.h (module 'core'): bool ns3::TypeIdValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
---
>     ## type-id.h (module 'core'): bool ns3::TypeIdValue::DeserializeFromString(std::string value, ns3::Ptr<ns3::AttributeChecker const> checker) [member function]
6312c4680
<     ## type-id.h (module 'core'): std::string ns3::TypeIdValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
---
>     ## type-id.h (module 'core'): std::string ns3::TypeIdValue::SerializeToString(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
6326c4694
<     ## vector.h (module 'core'): ns3::Vector2DChecker::Vector2DChecker(ns3::Vector2DChecker const & arg0) [constructor]
---
>     ## vector.h (module 'core'): ns3::Vector2DChecker::Vector2DChecker(ns3::Vector2DChecker const & arg0) [copy constructor]
6332a4701,4702
>     ## vector.h (module 'core'): ns3::Vector2DValue::Vector2DValue(ns3::Vector2DValue const & arg0) [copy constructor]
>     cls.add_constructor([param('ns3::Vector2DValue const &', 'arg0')])
6335,6336d4704
<     ## vector.h (module 'core'): ns3::Vector2DValue::Vector2DValue(ns3::Vector2DValue const & arg0) [constructor]
<     cls.add_constructor([param('ns3::Vector2DValue const &', 'arg0')])
6342c4710
<     ## vector.h (module 'core'): bool ns3::Vector2DValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
---
>     ## vector.h (module 'core'): bool ns3::Vector2DValue::DeserializeFromString(std::string value, ns3::Ptr<ns3::AttributeChecker const> checker) [member function]
6352c4720
<     ## vector.h (module 'core'): std::string ns3::Vector2DValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
---
>     ## vector.h (module 'core'): std::string ns3::Vector2DValue::SerializeToString(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
6366c4734
<     ## vector.h (module 'core'): ns3::Vector3DChecker::Vector3DChecker(ns3::Vector3DChecker const & arg0) [constructor]
---
>     ## vector.h (module 'core'): ns3::Vector3DChecker::Vector3DChecker(ns3::Vector3DChecker const & arg0) [copy constructor]
6372a4741,4742
>     ## vector.h (module 'core'): ns3::Vector3DValue::Vector3DValue(ns3::Vector3DValue const & arg0) [copy constructor]
>     cls.add_constructor([param('ns3::Vector3DValue const &', 'arg0')])
6375,6376d4744
<     ## vector.h (module 'core'): ns3::Vector3DValue::Vector3DValue(ns3::Vector3DValue const & arg0) [constructor]
<     cls.add_constructor([param('ns3::Vector3DValue const &', 'arg0')])
6382c4750
<     ## vector.h (module 'core'): bool ns3::Vector3DValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
---
>     ## vector.h (module 'core'): bool ns3::Vector3DValue::DeserializeFromString(std::string value, ns3::Ptr<ns3::AttributeChecker const> checker) [member function]
6392c4760
<     ## vector.h (module 'core'): std::string ns3::Vector3DValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
---
>     ## vector.h (module 'core'): std::string ns3::Vector3DValue::SerializeToString(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
6406c4774
<     ## address.h (module 'network'): ns3::AddressChecker::AddressChecker(ns3::AddressChecker const & arg0) [constructor]
---
>     ## address.h (module 'network'): ns3::AddressChecker::AddressChecker(ns3::AddressChecker const & arg0) [copy constructor]
6412a4781,4782
>     ## address.h (module 'network'): ns3::AddressValue::AddressValue(ns3::AddressValue const & arg0) [copy constructor]
>     cls.add_constructor([param('ns3::AddressValue const &', 'arg0')])
6415,6416d4784
<     ## address.h (module 'network'): ns3::AddressValue::AddressValue(ns3::AddressValue const & arg0) [constructor]
<     cls.add_constructor([param('ns3::AddressValue const &', 'arg0')])
6422c4790
<     ## address.h (module 'network'): bool ns3::AddressValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
---
>     ## address.h (module 'network'): bool ns3::AddressValue::DeserializeFromString(std::string value, ns3::Ptr<ns3::AttributeChecker const> checker) [member function]
6432c4800
<     ## address.h (module 'network'): std::string ns3::AddressValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
---
>     ## address.h (module 'network'): std::string ns3::AddressValue::SerializeToString(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
6443,6570d4810
< def register_Ns3AlwaysLosChannelConditionModel_methods(root_module, cls):
<     ## channel-condition-model.h (module 'propagation'): static ns3::TypeId ns3::AlwaysLosChannelConditionModel::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## channel-condition-model.h (module 'propagation'): ns3::AlwaysLosChannelConditionModel::AlwaysLosChannelConditionModel() [constructor]
<     cls.add_constructor([])
<     ## channel-condition-model.h (module 'propagation'): ns3::Ptr<ns3::ChannelCondition> ns3::AlwaysLosChannelConditionModel::GetChannelCondition(ns3::Ptr<const ns3::MobilityModel> a, ns3::Ptr<const ns3::MobilityModel> b) const [member function]
<     cls.add_method('GetChannelCondition', 
<                    'ns3::Ptr< ns3::ChannelCondition >', 
<                    [param('ns3::Ptr< ns3::MobilityModel const >', 'a'), param('ns3::Ptr< ns3::MobilityModel const >', 'b')], 
<                    is_const=True, is_virtual=True)
<     ## channel-condition-model.h (module 'propagation'): int64_t ns3::AlwaysLosChannelConditionModel::AssignStreams(int64_t stream) [member function]
<     cls.add_method('AssignStreams', 
<                    'int64_t', 
<                    [param('int64_t', 'stream')], 
<                    is_virtual=True)
<     return
< 
< def register_Ns3BuildingsChannelConditionModel_methods(root_module, cls):
<     ## buildings-channel-condition-model.h (module 'buildings'): static ns3::TypeId ns3::BuildingsChannelConditionModel::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## buildings-channel-condition-model.h (module 'buildings'): ns3::BuildingsChannelConditionModel::BuildingsChannelConditionModel() [constructor]
<     cls.add_constructor([])
<     ## buildings-channel-condition-model.h (module 'buildings'): ns3::Ptr<ns3::ChannelCondition> ns3::BuildingsChannelConditionModel::GetChannelCondition(ns3::Ptr<const ns3::MobilityModel> a, ns3::Ptr<const ns3::MobilityModel> b) const [member function]
<     cls.add_method('GetChannelCondition', 
<                    'ns3::Ptr< ns3::ChannelCondition >', 
<                    [param('ns3::Ptr< ns3::MobilityModel const >', 'a'), param('ns3::Ptr< ns3::MobilityModel const >', 'b')], 
<                    is_const=True, is_virtual=True)
<     ## buildings-channel-condition-model.h (module 'buildings'): int64_t ns3::BuildingsChannelConditionModel::AssignStreams(int64_t stream) [member function]
<     cls.add_method('AssignStreams', 
<                    'int64_t', 
<                    [param('int64_t', 'stream')], 
<                    is_virtual=True)
<     return
< 
< def register_Ns3CallbackImpl__Ns3ObjectBase___star___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
<     cls.add_constructor([])
<     ## callback.h (module 'core'): ns3::CallbackImpl<ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True)
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): ns3::ObjectBase * ns3::CallbackImpl<ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()() [member operator]
<     cls.add_method('operator()', 
<                    'ns3::ObjectBase *', 
<                    [], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__const_ns3MobilityModel__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::MobilityModel>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
<     cls.add_constructor([])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::MobilityModel>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<const ns3::MobilityModel>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::MobilityModel const >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<const ns3::MobilityModel>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True)
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<const ns3::MobilityModel>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<const ns3::MobilityModel>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<const ns3::MobilityModel> arg0) [member operator]
<     cls.add_method('operator()', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::MobilityModel const >', 'arg0')], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3NetDevice__gt___Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Const_ns3Address___amp___Const_ns3Address___amp___Ns3NetDevicePacketType_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
<     cls.add_constructor([])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True)
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<ns3::NetDevice> arg0, ns3::Ptr<const ns3::Packet> arg1, short unsigned int arg2, ns3::Address const & arg3, ns3::Address const & arg4, ns3::NetDevice::PacketType arg5) [member operator]
<     cls.add_method('operator()', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::NetDevice >', 'arg0'), param('ns3::Ptr< ns3::Packet const >', 'arg1'), param('short unsigned int', 'arg2'), param('ns3::Address const &', 'arg3'), param('ns3::Address const &', 'arg4'), param('ns3::NetDevice::PacketType', 'arg5')], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3NetDevice__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
<     cls.add_constructor([])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::NetDevice >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True)
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<ns3::NetDevice> arg0) [member operator]
<     cls.add_method('operator()', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::NetDevice >', 'arg0')], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
<     return
< 
6572c4812
<     ## hash-function.h (module 'core'): ns3::Hash::Implementation::Implementation(ns3::Hash::Implementation const & arg0) [constructor]
---
>     ## hash-function.h (module 'core'): ns3::Hash::Implementation::Implementation(ns3::Hash::Implementation const & arg0) [copy constructor]
6576c4816
<     ## hash-function.h (module 'core'): uint32_t ns3::Hash::Implementation::GetHash32(char const * buffer, std::size_t const size) [member function]
---
>     ## hash-function.h (module 'core'): uint32_t ns3::Hash::Implementation::GetHash32(char const * buffer, size_t const size) [member function]
6579,6581c4819,4821
<                    [param('char const *', 'buffer'), param('std::size_t const', 'size')], 
<                    is_virtual=True, is_pure_virtual=True)
<     ## hash-function.h (module 'core'): uint64_t ns3::Hash::Implementation::GetHash64(char const * buffer, std::size_t const size) [member function]
---
>                    [param('char const *', 'buffer'), param('size_t const', 'size')], 
>                    is_pure_virtual=True, is_virtual=True)
>     ## hash-function.h (module 'core'): uint64_t ns3::Hash::Implementation::GetHash64(char const * buffer, size_t const size) [member function]
6584c4824
<                    [param('char const *', 'buffer'), param('std::size_t const', 'size')], 
---
>                    [param('char const *', 'buffer'), param('size_t const', 'size')], 
6590c4830
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
6594c4834
<     ## hash-fnv.h (module 'core'): ns3::Hash::Function::Fnv1a::Fnv1a(ns3::Hash::Function::Fnv1a const & arg0) [constructor]
---
>     ## hash-fnv.h (module 'core'): ns3::Hash::Function::Fnv1a::Fnv1a(ns3::Hash::Function::Fnv1a const & arg0) [copy constructor]
6616c4856
<     ## hash-function.h (module 'core'): ns3::Hash::Function::Hash32::Hash32(ns3::Hash::Function::Hash32 const & arg0) [constructor]
---
>     ## hash-function.h (module 'core'): ns3::Hash::Function::Hash32::Hash32(ns3::Hash::Function::Hash32 const & arg0) [copy constructor]
6620c4860
<     ## hash-function.h (module 'core'): uint32_t ns3::Hash::Function::Hash32::GetHash32(char const * buffer, std::size_t const size) [member function]
---
>     ## hash-function.h (module 'core'): uint32_t ns3::Hash::Function::Hash32::GetHash32(char const * buffer, size_t const size) [member function]
6623c4863
<                    [param('char const *', 'buffer'), param('std::size_t const', 'size')], 
---
>                    [param('char const *', 'buffer'), param('size_t const', 'size')], 
6633c4873
<     ## hash-function.h (module 'core'): ns3::Hash::Function::Hash64::Hash64(ns3::Hash::Function::Hash64 const & arg0) [constructor]
---
>     ## hash-function.h (module 'core'): ns3::Hash::Function::Hash64::Hash64(ns3::Hash::Function::Hash64 const & arg0) [copy constructor]
6637c4877
<     ## hash-function.h (module 'core'): uint32_t ns3::Hash::Function::Hash64::GetHash32(char const * buffer, std::size_t const size) [member function]
---
>     ## hash-function.h (module 'core'): uint32_t ns3::Hash::Function::Hash64::GetHash32(char const * buffer, size_t const size) [member function]
6640c4880
<                    [param('char const *', 'buffer'), param('std::size_t const', 'size')], 
---
>                    [param('char const *', 'buffer'), param('size_t const', 'size')], 
6642c4882
<     ## hash-function.h (module 'core'): uint64_t ns3::Hash::Function::Hash64::GetHash64(char const * buffer, std::size_t const size) [member function]
---
>     ## hash-function.h (module 'core'): uint64_t ns3::Hash::Function::Hash64::GetHash64(char const * buffer, size_t const size) [member function]
6645c4885
<                    [param('char const *', 'buffer'), param('std::size_t const', 'size')], 
---
>                    [param('char const *', 'buffer'), param('size_t const', 'size')], 
6655c4895
<     ## hash-murmur3.h (module 'core'): ns3::Hash::Function::Murmur3::Murmur3(ns3::Hash::Function::Murmur3 const & arg0) [constructor]
---
>     ## hash-murmur3.h (module 'core'): ns3::Hash::Function::Murmur3::Murmur3(ns3::Hash::Function::Murmur3 const & arg0) [copy constructor]
6659c4899
<     ## hash-murmur3.h (module 'core'): uint32_t ns3::Hash::Function::Murmur3::GetHash32(char const * buffer, std::size_t const size) [member function]
---
>     ## hash-murmur3.h (module 'core'): uint32_t ns3::Hash::Function::Murmur3::GetHash32(char const * buffer, size_t const size) [member function]
6662c4902
<                    [param('char const *', 'buffer'), param('std::size_t const', 'size')], 
---
>                    [param('char const *', 'buffer'), param('size_t const', 'size')], 
6664c4904
<     ## hash-murmur3.h (module 'core'): uint64_t ns3::Hash::Function::Murmur3::GetHash64(char const * buffer, std::size_t const size) [member function]
---
>     ## hash-murmur3.h (module 'core'): uint64_t ns3::Hash::Function::Murmur3::GetHash64(char const * buffer, size_t const size) [member function]
6667c4907
<                    [param('char const *', 'buffer'), param('std::size_t const', 'size')], 
---
>                    [param('char const *', 'buffer'), param('size_t const', 'size')], 
6678,6680c4918,4920
<     register_functions_ns3_FatalImpl(module.add_cpp_namespace('FatalImpl'), root_module)
<     register_functions_ns3_Hash(module.add_cpp_namespace('Hash'), root_module)
<     register_functions_ns3_TracedValueCallback(module.add_cpp_namespace('TracedValueCallback'), root_module)
---
>     register_functions_ns3_FatalImpl(module.get_submodule('FatalImpl'), root_module)
>     register_functions_ns3_Hash(module.get_submodule('Hash'), root_module)
>     register_functions_ns3_TracedValueCallback(module.get_submodule('TracedValueCallback'), root_module)
6687c4927
<     register_functions_ns3_Hash_Function(module.add_cpp_namespace('Function'), root_module)
---
>     register_functions_ns3_Hash_Function(module.get_submodule('Function'), root_module)
diff ../../NS3-WiGig/src/buildings/bindings/modulegen__gcc_LP64.py ../../ns-3-dev/src/buildings/bindings/modulegen__gcc_LP64.py
23,24d22
<     ## propagation-environment.h (module 'propagation'): ns3::EnvironmentType [enumeration]
<     module.add_enum('EnvironmentType', ['UrbanEnvironment', 'SubUrbanEnvironment', 'OpenAreasEnvironment'], import_from_module='ns.propagation')
26a25,26
>     ## propagation-environment.h (module 'propagation'): ns3::EnvironmentType [enumeration]
>     module.add_enum('EnvironmentType', ['UrbanEnvironment', 'SubUrbanEnvironment', 'OpenAreasEnvironment'], import_from_module='ns.propagation')
34,37c34
<     module.add_class('Item', outer_class=root_module['ns3::AttributeConstructionList'], import_from_module='ns.core')
<     typehandlers.add_type_alias('std::list< ns3::AttributeConstructionList::Item > const_iterator', 'ns3::AttributeConstructionList::CIterator')
<     typehandlers.add_type_alias('std::list< ns3::AttributeConstructionList::Item > const_iterator*', 'ns3::AttributeConstructionList::CIterator*')
<     typehandlers.add_type_alias('std::list< ns3::AttributeConstructionList::Item > const_iterator&', 'ns3::AttributeConstructionList::CIterator&')
---
>     module.add_class('Item', import_from_module='ns.core', outer_class=root_module['ns3::AttributeConstructionList'])
42,45d38
<     ## buffer.h (module 'network'): ns3::Buffer [class]
<     module.add_class('Buffer', import_from_module='ns.network')
<     ## buffer.h (module 'network'): ns3::Buffer::Iterator [class]
<     module.add_class('Iterator', outer_class=root_module['ns3::Buffer'], import_from_module='ns.network')
48,50d40
<     typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::Building > > const_iterator', 'ns3::BuildingContainer::Iterator')
<     typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::Building > > const_iterator*', 'ns3::BuildingContainer::Iterator*')
<     typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::Building > > const_iterator&', 'ns3::BuildingContainer::Iterator&')
53,55d42
<     typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::Building > > const_iterator', 'ns3::BuildingList::Iterator')
<     typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::Building > > const_iterator*', 'ns3::BuildingList::Iterator*')
<     typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::Building > > const_iterator&', 'ns3::BuildingList::Iterator&')
58,67d44
<     ## packet.h (module 'network'): ns3::ByteTagIterator [class]
<     module.add_class('ByteTagIterator', import_from_module='ns.network')
<     ## packet.h (module 'network'): ns3::ByteTagIterator::Item [class]
<     module.add_class('Item', outer_class=root_module['ns3::ByteTagIterator'], import_from_module='ns.network')
<     ## byte-tag-list.h (module 'network'): ns3::ByteTagList [class]
<     module.add_class('ByteTagList', import_from_module='ns.network')
<     ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator [class]
<     module.add_class('Iterator', outer_class=root_module['ns3::ByteTagList'], import_from_module='ns.network')
<     ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator::Item [struct]
<     module.add_class('Item', outer_class=root_module['ns3::ByteTagList::Iterator'], import_from_module='ns.network')
72,87d48
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::AttributeAccessor> [struct]
<     module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::AttributeAccessor'])
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::AttributeChecker> [struct]
<     module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::AttributeChecker'])
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::AttributeValue> [struct]
<     module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::AttributeValue'])
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::CallbackImplBase> [struct]
<     module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::CallbackImplBase'])
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::Hash::Implementation> [struct]
<     module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::Hash::Implementation'])
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::NixVector> [struct]
<     module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::NixVector'])
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::Packet> [struct]
<     module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::Packet'])
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::TraceSourceAccessor> [struct]
<     module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::TraceSourceAccessor'])
102,112d62
<     ## mac48-address.h (module 'network'): ns3::Mac48Address [class]
<     module.add_class('Mac48Address', import_from_module='ns.network')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Mac48Address )', 'ns3::Mac48Address::TracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Mac48Address )*', 'ns3::Mac48Address::TracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Mac48Address )&', 'ns3::Mac48Address::TracedCallback&')
<     ## mac48-address.h (module 'network'): ns3::Mac48Address [class]
<     root_module['ns3::Mac48Address'].implicitly_converts_to(root_module['ns3::Address'])
<     ## mac8-address.h (module 'network'): ns3::Mac8Address [class]
<     module.add_class('Mac8Address', import_from_module='ns.network')
<     ## mac8-address.h (module 'network'): ns3::Mac8Address [class]
<     root_module['ns3::Mac8Address'].implicitly_converts_to(root_module['ns3::Address'])
115,117d64
<     typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::Node > > const_iterator', 'ns3::NodeContainer::Iterator')
<     typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::Node > > const_iterator*', 'ns3::NodeContainer::Iterator*')
<     typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::Node > > const_iterator&', 'ns3::NodeContainer::Iterator&')
119c66
<     module.add_class('ObjectBase', import_from_module='ns.core', allow_subclassing=True)
---
>     module.add_class('ObjectBase', allow_subclassing=True, import_from_module='ns.core')
124,139d70
<     ## packet-metadata.h (module 'network'): ns3::PacketMetadata [class]
<     module.add_class('PacketMetadata', import_from_module='ns.network')
<     ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item [struct]
<     module.add_class('Item', outer_class=root_module['ns3::PacketMetadata'], import_from_module='ns.network')
<     ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item::ItemType [enumeration]
<     module.add_enum('ItemType', ['PAYLOAD', 'HEADER', 'TRAILER'], outer_class=root_module['ns3::PacketMetadata::Item'], import_from_module='ns.network')
<     ## packet-metadata.h (module 'network'): ns3::PacketMetadata::ItemIterator [class]
<     module.add_class('ItemIterator', outer_class=root_module['ns3::PacketMetadata'], import_from_module='ns.network')
<     ## packet.h (module 'network'): ns3::PacketTagIterator [class]
<     module.add_class('PacketTagIterator', import_from_module='ns.network')
<     ## packet.h (module 'network'): ns3::PacketTagIterator::Item [class]
<     module.add_class('Item', outer_class=root_module['ns3::PacketTagIterator'], import_from_module='ns.network')
<     ## packet-tag-list.h (module 'network'): ns3::PacketTagList [class]
<     module.add_class('PacketTagList', import_from_module='ns.network')
<     ## packet-tag-list.h (module 'network'): ns3::PacketTagList::TagData [struct]
<     module.add_class('TagData', outer_class=root_module['ns3::PacketTagList'], import_from_module='ns.network')
141,143c72
<     module.add_class('SimpleRefCount', template_parameters=['ns3::Object', 'ns3::ObjectBase', 'ns3::ObjectDeleter'], parent=root_module['ns3::ObjectBase'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), import_from_module='ns.core', automatic_type_narrowing=True)
<     ## tag.h (module 'network'): ns3::Tag [class]
<     module.add_class('Tag', import_from_module='ns.network', parent=root_module['ns3::ObjectBase'])
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::Object', 'ns3::ObjectBase', 'ns3::ObjectDeleter'], parent=root_module['ns3::ObjectBase'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
155c84
<     module.add_class('AttributeInformation', outer_class=root_module['ns3::TypeId'], import_from_module='ns.core')
---
>     module.add_class('AttributeInformation', import_from_module='ns.core', outer_class=root_module['ns3::TypeId'])
157,160c86
<     module.add_class('TraceSourceInformation', outer_class=root_module['ns3::TypeId'], import_from_module='ns.core')
<     typehandlers.add_type_alias('uint32_t', 'ns3::TypeId::hash_t')
<     typehandlers.add_type_alias('uint32_t*', 'ns3::TypeId::hash_t*')
<     typehandlers.add_type_alias('uint32_t&', 'ns3::TypeId::hash_t&')
---
>     module.add_class('TraceSourceInformation', import_from_module='ns.core', outer_class=root_module['ns3::TypeId'])
167c93
<     ## int64x64-128.h (module 'core'): ns3::int64x64_t [class]
---
>     ## int64x64-double.h (module 'core'): ns3::int64x64_t [class]
169c95
<     ## int64x64-128.h (module 'core'): ns3::int64x64_t::impl_type [enumeration]
---
>     ## int64x64-double.h (module 'core'): ns3::int64x64_t::impl_type [enumeration]
171,174d96
<     ## chunk.h (module 'network'): ns3::Chunk [class]
<     module.add_class('Chunk', import_from_module='ns.network', parent=root_module['ns3::ObjectBase'])
<     ## header.h (module 'network'): ns3::Header [class]
<     module.add_class('Header', import_from_module='ns.network', parent=root_module['ns3::Chunk'])
178c100
<     module.add_class('AggregateIterator', outer_class=root_module['ns3::Object'], import_from_module='ns.core')
---
>     module.add_class('AggregateIterator', import_from_module='ns.core', outer_class=root_module['ns3::Object'])
204c126
<     module.add_class('SimpleRefCount', template_parameters=['ns3::AttributeAccessor', 'ns3::empty', 'ns3::DefaultDeleter<ns3::AttributeAccessor>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), import_from_module='ns.core', automatic_type_narrowing=True)
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::AttributeAccessor', 'ns3::empty', 'ns3::DefaultDeleter<ns3::AttributeAccessor>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
206c128
<     module.add_class('SimpleRefCount', template_parameters=['ns3::AttributeChecker', 'ns3::empty', 'ns3::DefaultDeleter<ns3::AttributeChecker>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), import_from_module='ns.core', automatic_type_narrowing=True)
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::AttributeChecker', 'ns3::empty', 'ns3::DefaultDeleter<ns3::AttributeChecker>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
208c130
<     module.add_class('SimpleRefCount', template_parameters=['ns3::AttributeValue', 'ns3::empty', 'ns3::DefaultDeleter<ns3::AttributeValue>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), import_from_module='ns.core', automatic_type_narrowing=True)
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::AttributeValue', 'ns3::empty', 'ns3::DefaultDeleter<ns3::AttributeValue>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
210c132
<     module.add_class('SimpleRefCount', template_parameters=['ns3::CallbackImplBase', 'ns3::empty', 'ns3::DefaultDeleter<ns3::CallbackImplBase>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), import_from_module='ns.core', automatic_type_narrowing=True)
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::CallbackImplBase', 'ns3::empty', 'ns3::DefaultDeleter<ns3::CallbackImplBase>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
212,216c134,138
<     module.add_class('SimpleRefCount', template_parameters=['ns3::Hash::Implementation', 'ns3::empty', 'ns3::DefaultDeleter<ns3::Hash::Implementation>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), import_from_module='ns.core', automatic_type_narrowing=True)
<     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::NixVector, ns3::empty, ns3::DefaultDeleter<ns3::NixVector> > [class]
<     module.add_class('SimpleRefCount', template_parameters=['ns3::NixVector', 'ns3::empty', 'ns3::DefaultDeleter<ns3::NixVector>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), import_from_module='ns.core', automatic_type_narrowing=True)
<     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Packet, ns3::empty, ns3::DefaultDeleter<ns3::Packet> > [class]
<     module.add_class('SimpleRefCount', template_parameters=['ns3::Packet', 'ns3::empty', 'ns3::DefaultDeleter<ns3::Packet>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), import_from_module='ns.core', automatic_type_narrowing=True)
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::Hash::Implementation', 'ns3::empty', 'ns3::DefaultDeleter<ns3::Hash::Implementation>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
>     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::NetDeviceQueue, ns3::empty, ns3::DefaultDeleter<ns3::NetDeviceQueue> > [class]
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::NetDeviceQueue', 'ns3::empty', 'ns3::DefaultDeleter<ns3::NetDeviceQueue>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
>     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::QueueItem, ns3::empty, ns3::DefaultDeleter<ns3::QueueItem> > [class]
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::QueueItem', 'ns3::empty', 'ns3::DefaultDeleter<ns3::QueueItem>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
218c140
<     module.add_class('SimpleRefCount', template_parameters=['ns3::TraceSourceAccessor', 'ns3::empty', 'ns3::DefaultDeleter<ns3::TraceSourceAccessor>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), import_from_module='ns.core', automatic_type_narrowing=True)
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::TraceSourceAccessor', 'ns3::empty', 'ns3::DefaultDeleter<ns3::TraceSourceAccessor>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
225,227d146
<     typehandlers.add_type_alias('void ( * ) ( ns3::Time )', 'ns3::Time::TracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Time )*', 'ns3::Time::TracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Time )&', 'ns3::Time::TracedCallback&')
232,233d150
<     ## trailer.h (module 'network'): ns3::Trailer [class]
<     module.add_class('Trailer', import_from_module='ns.network', parent=root_module['ns3::Chunk'])
251c168
<     module.add_class('AttributeChecker', import_from_module='ns.core', parent=root_module['ns3::SimpleRefCount< ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker> >'], allow_subclassing=False, automatic_type_narrowing=True)
---
>     module.add_class('AttributeChecker', allow_subclassing=False, automatic_type_narrowing=True, import_from_module='ns.core', parent=root_module['ns3::SimpleRefCount< ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker> >'])
253c170
<     module.add_class('AttributeValue', import_from_module='ns.core', parent=root_module['ns3::SimpleRefCount< ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue> >'], allow_subclassing=False, automatic_type_narrowing=True)
---
>     module.add_class('AttributeValue', allow_subclassing=False, automatic_type_narrowing=True, import_from_module='ns.core', parent=root_module['ns3::SimpleRefCount< ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue> >'])
272,277d188
<     ## channel-condition-model.h (module 'propagation'): ns3::ChannelCondition [class]
<     module.add_class('ChannelCondition', import_from_module='ns.propagation', parent=root_module['ns3::Object'])
<     ## channel-condition-model.h (module 'propagation'): ns3::ChannelCondition::LosConditionValue [enumeration]
<     module.add_enum('LosConditionValue', ['LOS', 'NLOS'], outer_class=root_module['ns3::ChannelCondition'], import_from_module='ns.propagation')
<     ## channel-condition-model.h (module 'propagation'): ns3::ChannelConditionModel [class]
<     module.add_class('ChannelConditionModel', import_from_module='ns.propagation', parent=root_module['ns3::Object'])
334,337d244
<     ## mac48-address.h (module 'network'): ns3::Mac48AddressChecker [class]
<     module.add_class('Mac48AddressChecker', import_from_module='ns.network', parent=root_module['ns3::AttributeChecker'])
<     ## mac48-address.h (module 'network'): ns3::Mac48AddressValue [class]
<     module.add_class('Mac48AddressValue', import_from_module='ns.network', parent=root_module['ns3::AttributeValue'])
342,346d248
<     ## mobility-model.h (module 'mobility'): ns3::MobilityModel [class]
<     module.add_class('MobilityModel', import_from_module='ns.mobility', parent=root_module['ns3::Object'])
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::MobilityModel const > )', 'ns3::MobilityModel::TracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::MobilityModel const > )*', 'ns3::MobilityModel::TracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::MobilityModel const > )&', 'ns3::MobilityModel::TracedCallback&')
353,365c255,258
<     typehandlers.add_type_alias('void ( * ) (  )', 'ns3::NetDevice::LinkChangeTracedCallback')
<     typehandlers.add_type_alias('void ( * ) (  )*', 'ns3::NetDevice::LinkChangeTracedCallback*')
<     typehandlers.add_type_alias('void ( * ) (  )&', 'ns3::NetDevice::LinkChangeTracedCallback&')
<     typehandlers.add_type_alias('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::NetDevice::ReceiveCallback')
<     typehandlers.add_type_alias('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::NetDevice::ReceiveCallback*')
<     typehandlers.add_type_alias('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::NetDevice::ReceiveCallback&')
<     typehandlers.add_type_alias('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >', 'ns3::NetDevice::PromiscReceiveCallback')
<     typehandlers.add_type_alias('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::NetDevice::PromiscReceiveCallback*')
<     typehandlers.add_type_alias('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::NetDevice::PromiscReceiveCallback&')
<     ## channel-condition-model.h (module 'propagation'): ns3::NeverLosChannelConditionModel [class]
<     module.add_class('NeverLosChannelConditionModel', import_from_module='ns.propagation', parent=root_module['ns3::ChannelConditionModel'])
<     ## nix-vector.h (module 'network'): ns3::NixVector [class]
<     module.add_class('NixVector', import_from_module='ns.network', parent=root_module['ns3::SimpleRefCount< ns3::NixVector, ns3::empty, ns3::DefaultDeleter<ns3::NixVector> >'])
---
>     ## net-device.h (module 'network'): ns3::NetDeviceQueue [class]
>     module.add_class('NetDeviceQueue', import_from_module='ns.network', parent=root_module['ns3::SimpleRefCount< ns3::NetDeviceQueue, ns3::empty, ns3::DefaultDeleter<ns3::NetDeviceQueue> >'])
>     ## net-device.h (module 'network'): ns3::NetDeviceQueueInterface [class]
>     module.add_class('NetDeviceQueueInterface', import_from_module='ns.network', parent=root_module['ns3::Object'])
368,373d260
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >', 'ns3::Node::ProtocolHandler')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::Node::ProtocolHandler*')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::Node::ProtocolHandler&')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::Node::DeviceAdditionListener')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::Node::DeviceAdditionListener*')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::Node::DeviceAdditionListener&')
382,403d268
<     ## building-position-allocator.h (module 'buildings'): ns3::OutdoorPositionAllocator [class]
<     module.add_class('OutdoorPositionAllocator', parent=root_module['ns3::PositionAllocator'])
<     ## packet.h (module 'network'): ns3::Packet [class]
<     module.add_class('Packet', import_from_module='ns.network', parent=root_module['ns3::SimpleRefCount< ns3::Packet, ns3::empty, ns3::DefaultDeleter<ns3::Packet> >'])
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const > )', 'ns3::Packet::TracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const > )*', 'ns3::Packet::TracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const > )&', 'ns3::Packet::TracedCallback&')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Address const & )', 'ns3::Packet::AddressTracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Address const & )*', 'ns3::Packet::AddressTracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Address const & )&', 'ns3::Packet::AddressTracedCallback&')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const > const, ns3::Address const &, ns3::Address const & )', 'ns3::Packet::TwoAddressTracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const > const, ns3::Address const &, ns3::Address const & )*', 'ns3::Packet::TwoAddressTracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const > const, ns3::Address const &, ns3::Address const & )&', 'ns3::Packet::TwoAddressTracedCallback&')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Mac48Address )', 'ns3::Packet::Mac48AddressTracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Mac48Address )*', 'ns3::Packet::Mac48AddressTracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Mac48Address )&', 'ns3::Packet::Mac48AddressTracedCallback&')
<     typehandlers.add_type_alias('void ( * ) ( uint32_t, uint32_t )', 'ns3::Packet::SizeTracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( uint32_t, uint32_t )*', 'ns3::Packet::SizeTracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( uint32_t, uint32_t )&', 'ns3::Packet::SizeTracedCallback&')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, double )', 'ns3::Packet::SinrTracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, double )*', 'ns3::Packet::SinrTracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, double )&', 'ns3::Packet::SinrTracedCallback&')
406,417c271,274
<     ## channel-condition-model.h (module 'propagation'): ns3::ThreeGppChannelConditionModel [class]
<     module.add_class('ThreeGppChannelConditionModel', import_from_module='ns.propagation', parent=root_module['ns3::ChannelConditionModel'])
<     ## channel-condition-model.h (module 'propagation'): ns3::ThreeGppIndoorMixedOfficeChannelConditionModel [class]
<     module.add_class('ThreeGppIndoorMixedOfficeChannelConditionModel', import_from_module='ns.propagation', parent=root_module['ns3::ThreeGppChannelConditionModel'])
<     ## channel-condition-model.h (module 'propagation'): ns3::ThreeGppIndoorOpenOfficeChannelConditionModel [class]
<     module.add_class('ThreeGppIndoorOpenOfficeChannelConditionModel', import_from_module='ns.propagation', parent=root_module['ns3::ThreeGppChannelConditionModel'])
<     ## channel-condition-model.h (module 'propagation'): ns3::ThreeGppRmaChannelConditionModel [class]
<     module.add_class('ThreeGppRmaChannelConditionModel', import_from_module='ns.propagation', parent=root_module['ns3::ThreeGppChannelConditionModel'])
<     ## channel-condition-model.h (module 'propagation'): ns3::ThreeGppUmaChannelConditionModel [class]
<     module.add_class('ThreeGppUmaChannelConditionModel', import_from_module='ns.propagation', parent=root_module['ns3::ThreeGppChannelConditionModel'])
<     ## channel-condition-model.h (module 'propagation'): ns3::ThreeGppUmiStreetCanyonChannelConditionModel [class]
<     module.add_class('ThreeGppUmiStreetCanyonChannelConditionModel', import_from_module='ns.propagation', parent=root_module['ns3::ThreeGppChannelConditionModel'])
---
>     ## net-device.h (module 'network'): ns3::QueueItem [class]
>     module.add_class('QueueItem', import_from_module='ns.network', parent=root_module['ns3::SimpleRefCount< ns3::QueueItem, ns3::empty, ns3::DefaultDeleter<ns3::QueueItem> >'])
>     ## net-device.h (module 'network'): ns3::QueueItem::Uint8Values [enumeration]
>     module.add_enum('Uint8Values', ['IP_DSFIELD'], outer_class=root_module['ns3::QueueItem'], import_from_module='ns.network')
436,450c293,295
<     ## channel-condition-model.h (module 'propagation'): ns3::AlwaysLosChannelConditionModel [class]
<     module.add_class('AlwaysLosChannelConditionModel', import_from_module='ns.propagation', parent=root_module['ns3::ChannelConditionModel'])
<     ## buildings-channel-condition-model.h (module 'buildings'): ns3::BuildingsChannelConditionModel [class]
<     module.add_class('BuildingsChannelConditionModel', parent=root_module['ns3::ChannelConditionModel'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', template_parameters=['ns3::ObjectBase *', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::MobilityModel>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', template_parameters=['void', 'ns3::Ptr<const ns3::MobilityModel>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', template_parameters=['void', 'ns3::Ptr<ns3::NetDevice>', 'ns3::Ptr<const ns3::Packet>', 'unsigned short', 'const ns3::Address &', 'const ns3::Address &', 'ns3::NetDevice::PacketType', 'ns3::empty', 'ns3::empty', 'ns3::empty'], import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', template_parameters=['void', 'ns3::Ptr<ns3::NetDevice>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'])
<     typehandlers.add_type_alias('ns3::Vector3D', 'ns3::Vector')
<     typehandlers.add_type_alias('ns3::Vector3D*', 'ns3::Vector*')
<     typehandlers.add_type_alias('ns3::Vector3D&', 'ns3::Vector&')
---
>     typehandlers.add_type_alias(u'ns3::Vector3D', u'ns3::Vector')
>     typehandlers.add_type_alias(u'ns3::Vector3D*', u'ns3::Vector*')
>     typehandlers.add_type_alias(u'ns3::Vector3D&', u'ns3::Vector&')
452,454c297,299
<     typehandlers.add_type_alias('ns3::Vector3DValue', 'ns3::VectorValue')
<     typehandlers.add_type_alias('ns3::Vector3DValue*', 'ns3::VectorValue*')
<     typehandlers.add_type_alias('ns3::Vector3DValue&', 'ns3::VectorValue&')
---
>     typehandlers.add_type_alias(u'ns3::Vector3DValue', u'ns3::VectorValue')
>     typehandlers.add_type_alias(u'ns3::Vector3DValue*', u'ns3::VectorValue*')
>     typehandlers.add_type_alias(u'ns3::Vector3DValue&', u'ns3::VectorValue&')
456,458c301,303
<     typehandlers.add_type_alias('ns3::Vector3DChecker', 'ns3::VectorChecker')
<     typehandlers.add_type_alias('ns3::Vector3DChecker*', 'ns3::VectorChecker*')
<     typehandlers.add_type_alias('ns3::Vector3DChecker&', 'ns3::VectorChecker&')
---
>     typehandlers.add_type_alias(u'ns3::Vector3DChecker', u'ns3::VectorChecker')
>     typehandlers.add_type_alias(u'ns3::Vector3DChecker*', u'ns3::VectorChecker*')
>     typehandlers.add_type_alias(u'ns3::Vector3DChecker&', u'ns3::VectorChecker&')
488,493c333,338
<     typehandlers.add_type_alias('uint32_t ( * ) ( char const *, std::size_t const )', 'ns3::Hash::Hash32Function_ptr')
<     typehandlers.add_type_alias('uint32_t ( * ) ( char const *, std::size_t const )*', 'ns3::Hash::Hash32Function_ptr*')
<     typehandlers.add_type_alias('uint32_t ( * ) ( char const *, std::size_t const )&', 'ns3::Hash::Hash32Function_ptr&')
<     typehandlers.add_type_alias('uint64_t ( * ) ( char const *, std::size_t const )', 'ns3::Hash::Hash64Function_ptr')
<     typehandlers.add_type_alias('uint64_t ( * ) ( char const *, std::size_t const )*', 'ns3::Hash::Hash64Function_ptr*')
<     typehandlers.add_type_alias('uint64_t ( * ) ( char const *, std::size_t const )&', 'ns3::Hash::Hash64Function_ptr&')
---
>     typehandlers.add_type_alias(u'uint32_t ( * ) ( char const *, size_t ) *', u'ns3::Hash::Hash32Function_ptr')
>     typehandlers.add_type_alias(u'uint32_t ( * ) ( char const *, size_t ) **', u'ns3::Hash::Hash32Function_ptr*')
>     typehandlers.add_type_alias(u'uint32_t ( * ) ( char const *, size_t ) *&', u'ns3::Hash::Hash32Function_ptr&')
>     typehandlers.add_type_alias(u'uint64_t ( * ) ( char const *, size_t ) *', u'ns3::Hash::Hash64Function_ptr')
>     typehandlers.add_type_alias(u'uint64_t ( * ) ( char const *, size_t ) **', u'ns3::Hash::Hash64Function_ptr*')
>     typehandlers.add_type_alias(u'uint64_t ( * ) ( char const *, size_t ) *&', u'ns3::Hash::Hash64Function_ptr&')
516,518c361,363
<     typehandlers.add_type_alias('void ( * ) ( ns3::Time, ns3::Time )', 'ns3::TracedValueCallback::Time')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Time, ns3::Time )*', 'ns3::TracedValueCallback::Time*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Time, ns3::Time )&', 'ns3::TracedValueCallback::Time&')
---
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Time, ns3::Time ) *', u'ns3::TracedValueCallback::Time')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Time, ns3::Time ) **', u'ns3::TracedValueCallback::Time*')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Time, ns3::Time ) *&', u'ns3::TracedValueCallback::Time&')
525,526d369
<     register_Ns3Buffer_methods(root_module, root_module['ns3::Buffer'])
<     register_Ns3BufferIterator_methods(root_module, root_module['ns3::Buffer::Iterator'])
530,534d372
<     register_Ns3ByteTagIterator_methods(root_module, root_module['ns3::ByteTagIterator'])
<     register_Ns3ByteTagIteratorItem_methods(root_module, root_module['ns3::ByteTagIterator::Item'])
<     register_Ns3ByteTagList_methods(root_module, root_module['ns3::ByteTagList'])
<     register_Ns3ByteTagListIterator_methods(root_module, root_module['ns3::ByteTagList::Iterator'])
<     register_Ns3ByteTagListIteratorItem_methods(root_module, root_module['ns3::ByteTagList::Iterator::Item'])
537,544d374
<     register_Ns3DefaultDeleter__Ns3AttributeAccessor_methods(root_module, root_module['ns3::DefaultDeleter< ns3::AttributeAccessor >'])
<     register_Ns3DefaultDeleter__Ns3AttributeChecker_methods(root_module, root_module['ns3::DefaultDeleter< ns3::AttributeChecker >'])
<     register_Ns3DefaultDeleter__Ns3AttributeValue_methods(root_module, root_module['ns3::DefaultDeleter< ns3::AttributeValue >'])
<     register_Ns3DefaultDeleter__Ns3CallbackImplBase_methods(root_module, root_module['ns3::DefaultDeleter< ns3::CallbackImplBase >'])
<     register_Ns3DefaultDeleter__Ns3HashImplementation_methods(root_module, root_module['ns3::DefaultDeleter< ns3::Hash::Implementation >'])
<     register_Ns3DefaultDeleter__Ns3NixVector_methods(root_module, root_module['ns3::DefaultDeleter< ns3::NixVector >'])
<     register_Ns3DefaultDeleter__Ns3Packet_methods(root_module, root_module['ns3::DefaultDeleter< ns3::Packet >'])
<     register_Ns3DefaultDeleter__Ns3TraceSourceAccessor_methods(root_module, root_module['ns3::DefaultDeleter< ns3::TraceSourceAccessor >'])
550,551d379
<     register_Ns3Mac48Address_methods(root_module, root_module['ns3::Mac48Address'])
<     register_Ns3Mac8Address_methods(root_module, root_module['ns3::Mac8Address'])
556,562d383
<     register_Ns3PacketMetadata_methods(root_module, root_module['ns3::PacketMetadata'])
<     register_Ns3PacketMetadataItem_methods(root_module, root_module['ns3::PacketMetadata::Item'])
<     register_Ns3PacketMetadataItemIterator_methods(root_module, root_module['ns3::PacketMetadata::ItemIterator'])
<     register_Ns3PacketTagIterator_methods(root_module, root_module['ns3::PacketTagIterator'])
<     register_Ns3PacketTagIteratorItem_methods(root_module, root_module['ns3::PacketTagIterator::Item'])
<     register_Ns3PacketTagList_methods(root_module, root_module['ns3::PacketTagList'])
<     register_Ns3PacketTagListTagData_methods(root_module, root_module['ns3::PacketTagList::TagData'])
564d384
<     register_Ns3Tag_methods(root_module, root_module['ns3::Tag'])
574,575d393
<     register_Ns3Chunk_methods(root_module, root_module['ns3::Chunk'])
<     register_Ns3Header_methods(root_module, root_module['ns3::Header'])
595,596c413,414
<     register_Ns3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::NixVector, ns3::empty, ns3::DefaultDeleter<ns3::NixVector> >'])
<     register_Ns3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::Packet, ns3::empty, ns3::DefaultDeleter<ns3::Packet> >'])
---
>     register_Ns3SimpleRefCount__Ns3NetDeviceQueue_Ns3Empty_Ns3DefaultDeleter__lt__ns3NetDeviceQueue__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::NetDeviceQueue, ns3::empty, ns3::DefaultDeleter<ns3::NetDeviceQueue> >'])
>     register_Ns3SimpleRefCount__Ns3QueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3QueueItem__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::QueueItem, ns3::empty, ns3::DefaultDeleter<ns3::QueueItem> >'])
601d418
<     register_Ns3Trailer_methods(root_module, root_module['ns3::Trailer'])
619,620d435
<     register_Ns3ChannelCondition_methods(root_module, root_module['ns3::ChannelCondition'])
<     register_Ns3ChannelConditionModel_methods(root_module, root_module['ns3::ChannelConditionModel'])
648,649d462
<     register_Ns3Mac48AddressChecker_methods(root_module, root_module['ns3::Mac48AddressChecker'])
<     register_Ns3Mac48AddressValue_methods(root_module, root_module['ns3::Mac48AddressValue'])
652d464
<     register_Ns3MobilityModel_methods(root_module, root_module['ns3::MobilityModel'])
655,656c467,468
<     register_Ns3NeverLosChannelConditionModel_methods(root_module, root_module['ns3::NeverLosChannelConditionModel'])
<     register_Ns3NixVector_methods(root_module, root_module['ns3::NixVector'])
---
>     register_Ns3NetDeviceQueue_methods(root_module, root_module['ns3::NetDeviceQueue'])
>     register_Ns3NetDeviceQueueInterface_methods(root_module, root_module['ns3::NetDeviceQueueInterface'])
662,663d473
<     register_Ns3OutdoorPositionAllocator_methods(root_module, root_module['ns3::OutdoorPositionAllocator'])
<     register_Ns3Packet_methods(root_module, root_module['ns3::Packet'])
665,670c475
<     register_Ns3ThreeGppChannelConditionModel_methods(root_module, root_module['ns3::ThreeGppChannelConditionModel'])
<     register_Ns3ThreeGppIndoorMixedOfficeChannelConditionModel_methods(root_module, root_module['ns3::ThreeGppIndoorMixedOfficeChannelConditionModel'])
<     register_Ns3ThreeGppIndoorOpenOfficeChannelConditionModel_methods(root_module, root_module['ns3::ThreeGppIndoorOpenOfficeChannelConditionModel'])
<     register_Ns3ThreeGppRmaChannelConditionModel_methods(root_module, root_module['ns3::ThreeGppRmaChannelConditionModel'])
<     register_Ns3ThreeGppUmaChannelConditionModel_methods(root_module, root_module['ns3::ThreeGppUmaChannelConditionModel'])
<     register_Ns3ThreeGppUmiStreetCanyonChannelConditionModel_methods(root_module, root_module['ns3::ThreeGppUmiStreetCanyonChannelConditionModel'])
---
>     register_Ns3QueueItem_methods(root_module, root_module['ns3::QueueItem'])
680,685d484
<     register_Ns3AlwaysLosChannelConditionModel_methods(root_module, root_module['ns3::AlwaysLosChannelConditionModel'])
<     register_Ns3BuildingsChannelConditionModel_methods(root_module, root_module['ns3::BuildingsChannelConditionModel'])
<     register_Ns3CallbackImpl__Ns3ObjectBase___star___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
<     register_Ns3CallbackImpl__Void_Ns3Ptr__lt__const_ns3MobilityModel__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<const ns3::MobilityModel>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
<     register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3NetDevice__gt___Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Const_ns3Address___amp___Const_ns3Address___amp___Ns3NetDevicePacketType_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >'])
<     register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3NetDevice__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<ns3::NetDevice>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
694,695d492
<     cls.add_binary_comparison_operator('==')
<     cls.add_binary_comparison_operator('!=')
696a494
>     cls.add_binary_comparison_operator('!=')
697a496
>     cls.add_binary_comparison_operator('==')
702c501
<     ## address.h (module 'network'): ns3::Address::Address(ns3::Address const & address) [constructor]
---
>     ## address.h (module 'network'): ns3::Address::Address(ns3::Address const & address) [copy constructor]
764c563
<     ## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList::AttributeConstructionList(ns3::AttributeConstructionList const & arg0) [constructor]
---
>     ## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList::AttributeConstructionList(ns3::AttributeConstructionList const & arg0) [copy constructor]
768c567
<     ## attribute-construction-list.h (module 'core'): void ns3::AttributeConstructionList::Add(std::string name, ns3::Ptr<const ns3::AttributeChecker> checker, ns3::Ptr<ns3::AttributeValue> value) [member function]
---
>     ## attribute-construction-list.h (module 'core'): void ns3::AttributeConstructionList::Add(std::string name, ns3::Ptr<ns3::AttributeChecker const> checker, ns3::Ptr<ns3::AttributeValue> value) [member function]
772c571
<     ## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList::CIterator ns3::AttributeConstructionList::Begin() const [member function]
---
>     ## attribute-construction-list.h (module 'core'): std::_List_const_iterator<ns3::AttributeConstructionList::Item> ns3::AttributeConstructionList::Begin() const [member function]
774c573
<                    'ns3::AttributeConstructionList::CIterator', 
---
>                    'std::_List_const_iterator< ns3::AttributeConstructionList::Item >', 
777c576
<     ## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList::CIterator ns3::AttributeConstructionList::End() const [member function]
---
>     ## attribute-construction-list.h (module 'core'): std::_List_const_iterator<ns3::AttributeConstructionList::Item> ns3::AttributeConstructionList::End() const [member function]
779c578
<                    'ns3::AttributeConstructionList::CIterator', 
---
>                    'std::_List_const_iterator< ns3::AttributeConstructionList::Item >', 
782c581
<     ## attribute-construction-list.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::AttributeConstructionList::Find(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
---
>     ## attribute-construction-list.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::AttributeConstructionList::Find(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
792c591
<     ## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList::Item::Item(ns3::AttributeConstructionList::Item const & arg0) [constructor]
---
>     ## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList::Item::Item(ns3::AttributeConstructionList::Item const & arg0) [copy constructor]
804c603
<     ## box.h (module 'mobility'): ns3::Box::Box(ns3::Box const & arg0) [constructor]
---
>     ## box.h (module 'mobility'): ns3::Box::Box(ns3::Box const & arg0) [copy constructor]
825,829d623
<     ## box.h (module 'mobility'): bool ns3::Box::IsIntersect(ns3::Vector const & l1, ns3::Vector const & l2) const [member function]
<     cls.add_method('IsIntersect', 
<                    'bool', 
<                    [param('ns3::Vector const &', 'l1'), param('ns3::Vector const &', 'l2')], 
<                    is_const=True)
844,1083d637
< def register_Ns3Buffer_methods(root_module, cls):
<     ## buffer.h (module 'network'): ns3::Buffer::Buffer(ns3::Buffer const & o) [constructor]
<     cls.add_constructor([param('ns3::Buffer const &', 'o')])
<     ## buffer.h (module 'network'): ns3::Buffer::Buffer() [constructor]
<     cls.add_constructor([])
<     ## buffer.h (module 'network'): ns3::Buffer::Buffer(uint32_t dataSize) [constructor]
<     cls.add_constructor([param('uint32_t', 'dataSize')])
<     ## buffer.h (module 'network'): ns3::Buffer::Buffer(uint32_t dataSize, bool initialize) [constructor]
<     cls.add_constructor([param('uint32_t', 'dataSize'), param('bool', 'initialize')])
<     ## buffer.h (module 'network'): void ns3::Buffer::AddAtEnd(uint32_t end) [member function]
<     cls.add_method('AddAtEnd', 
<                    'void', 
<                    [param('uint32_t', 'end')])
<     ## buffer.h (module 'network'): void ns3::Buffer::AddAtEnd(ns3::Buffer const & o) [member function]
<     cls.add_method('AddAtEnd', 
<                    'void', 
<                    [param('ns3::Buffer const &', 'o')])
<     ## buffer.h (module 'network'): void ns3::Buffer::AddAtStart(uint32_t start) [member function]
<     cls.add_method('AddAtStart', 
<                    'void', 
<                    [param('uint32_t', 'start')])
<     ## buffer.h (module 'network'): ns3::Buffer::Iterator ns3::Buffer::Begin() const [member function]
<     cls.add_method('Begin', 
<                    'ns3::Buffer::Iterator', 
<                    [], 
<                    is_const=True)
<     ## buffer.h (module 'network'): void ns3::Buffer::CopyData(std::ostream * os, uint32_t size) const [member function]
<     cls.add_method('CopyData', 
<                    'void', 
<                    [param('std::ostream *', 'os'), param('uint32_t', 'size')], 
<                    is_const=True)
<     ## buffer.h (module 'network'): uint32_t ns3::Buffer::CopyData(uint8_t * buffer, uint32_t size) const [member function]
<     cls.add_method('CopyData', 
<                    'uint32_t', 
<                    [param('uint8_t *', 'buffer'), param('uint32_t', 'size')], 
<                    is_const=True)
<     ## buffer.h (module 'network'): ns3::Buffer ns3::Buffer::CreateFragment(uint32_t start, uint32_t length) const [member function]
<     cls.add_method('CreateFragment', 
<                    'ns3::Buffer', 
<                    [param('uint32_t', 'start'), param('uint32_t', 'length')], 
<                    is_const=True)
<     ## buffer.h (module 'network'): uint32_t ns3::Buffer::Deserialize(uint8_t const * buffer, uint32_t size) [member function]
<     cls.add_method('Deserialize', 
<                    'uint32_t', 
<                    [param('uint8_t const *', 'buffer'), param('uint32_t', 'size')])
<     ## buffer.h (module 'network'): ns3::Buffer::Iterator ns3::Buffer::End() const [member function]
<     cls.add_method('End', 
<                    'ns3::Buffer::Iterator', 
<                    [], 
<                    is_const=True)
<     ## buffer.h (module 'network'): uint32_t ns3::Buffer::GetSerializedSize() const [member function]
<     cls.add_method('GetSerializedSize', 
<                    'uint32_t', 
<                    [], 
<                    is_const=True)
<     ## buffer.h (module 'network'): uint32_t ns3::Buffer::GetSize() const [member function]
<     cls.add_method('GetSize', 
<                    'uint32_t', 
<                    [], 
<                    is_const=True)
<     ## buffer.h (module 'network'): uint8_t const * ns3::Buffer::PeekData() const [member function]
<     cls.add_method('PeekData', 
<                    'uint8_t const *', 
<                    [], 
<                    is_const=True)
<     ## buffer.h (module 'network'): void ns3::Buffer::RemoveAtEnd(uint32_t end) [member function]
<     cls.add_method('RemoveAtEnd', 
<                    'void', 
<                    [param('uint32_t', 'end')])
<     ## buffer.h (module 'network'): void ns3::Buffer::RemoveAtStart(uint32_t start) [member function]
<     cls.add_method('RemoveAtStart', 
<                    'void', 
<                    [param('uint32_t', 'start')])
<     ## buffer.h (module 'network'): uint32_t ns3::Buffer::Serialize(uint8_t * buffer, uint32_t maxSize) const [member function]
<     cls.add_method('Serialize', 
<                    'uint32_t', 
<                    [param('uint8_t *', 'buffer'), param('uint32_t', 'maxSize')], 
<                    is_const=True)
<     return
< 
< def register_Ns3BufferIterator_methods(root_module, cls):
<     ## buffer.h (module 'network'): ns3::Buffer::Iterator::Iterator(ns3::Buffer::Iterator const & arg0) [constructor]
<     cls.add_constructor([param('ns3::Buffer::Iterator const &', 'arg0')])
<     ## buffer.h (module 'network'): ns3::Buffer::Iterator::Iterator() [constructor]
<     cls.add_constructor([])
<     ## buffer.h (module 'network'): uint16_t ns3::Buffer::Iterator::CalculateIpChecksum(uint16_t size) [member function]
<     cls.add_method('CalculateIpChecksum', 
<                    'uint16_t', 
<                    [param('uint16_t', 'size')])
<     ## buffer.h (module 'network'): uint16_t ns3::Buffer::Iterator::CalculateIpChecksum(uint16_t size, uint32_t initialChecksum) [member function]
<     cls.add_method('CalculateIpChecksum', 
<                    'uint16_t', 
<                    [param('uint16_t', 'size'), param('uint32_t', 'initialChecksum')])
<     ## buffer.h (module 'network'): uint32_t ns3::Buffer::Iterator::GetDistanceFrom(ns3::Buffer::Iterator const & o) const [member function]
<     cls.add_method('GetDistanceFrom', 
<                    'uint32_t', 
<                    [param('ns3::Buffer::Iterator const &', 'o')], 
<                    is_const=True)
<     ## buffer.h (module 'network'): uint32_t ns3::Buffer::Iterator::GetRemainingSize() const [member function]
<     cls.add_method('GetRemainingSize', 
<                    'uint32_t', 
<                    [], 
<                    is_const=True)
<     ## buffer.h (module 'network'): uint32_t ns3::Buffer::Iterator::GetSize() const [member function]
<     cls.add_method('GetSize', 
<                    'uint32_t', 
<                    [], 
<                    is_const=True)
<     ## buffer.h (module 'network'): bool ns3::Buffer::Iterator::IsEnd() const [member function]
<     cls.add_method('IsEnd', 
<                    'bool', 
<                    [], 
<                    is_const=True)
<     ## buffer.h (module 'network'): bool ns3::Buffer::Iterator::IsStart() const [member function]
<     cls.add_method('IsStart', 
<                    'bool', 
<                    [], 
<                    is_const=True)
<     ## buffer.h (module 'network'): void ns3::Buffer::Iterator::Next() [member function]
<     cls.add_method('Next', 
<                    'void', 
<                    [])
<     ## buffer.h (module 'network'): void ns3::Buffer::Iterator::Next(uint32_t delta) [member function]
<     cls.add_method('Next', 
<                    'void', 
<                    [param('uint32_t', 'delta')])
<     ## buffer.h (module 'network'): uint8_t ns3::Buffer::Iterator::PeekU8() [member function]
<     cls.add_method('PeekU8', 
<                    'uint8_t', 
<                    [])
<     ## buffer.h (module 'network'): void ns3::Buffer::Iterator::Prev() [member function]
<     cls.add_method('Prev', 
<                    'void', 
<                    [])
<     ## buffer.h (module 'network'): void ns3::Buffer::Iterator::Prev(uint32_t delta) [member function]
<     cls.add_method('Prev', 
<                    'void', 
<                    [param('uint32_t', 'delta')])
<     ## buffer.h (module 'network'): void ns3::Buffer::Iterator::Read(uint8_t * buffer, uint32_t size) [member function]
<     cls.add_method('Read', 
<                    'void', 
<                    [param('uint8_t *', 'buffer'), param('uint32_t', 'size')])
<     ## buffer.h (module 'network'): void ns3::Buffer::Iterator::Read(ns3::Buffer::Iterator start, uint32_t size) [member function]
<     cls.add_method('Read', 
<                    'void', 
<                    [param('ns3::Buffer::Iterator', 'start'), param('uint32_t', 'size')])
<     ## buffer.h (module 'network'): uint16_t ns3::Buffer::Iterator::ReadLsbtohU16() [member function]
<     cls.add_method('ReadLsbtohU16', 
<                    'uint16_t', 
<                    [])
<     ## buffer.h (module 'network'): uint32_t ns3::Buffer::Iterator::ReadLsbtohU32() [member function]
<     cls.add_method('ReadLsbtohU32', 
<                    'uint32_t', 
<                    [])
<     ## buffer.h (module 'network'): uint64_t ns3::Buffer::Iterator::ReadLsbtohU64() [member function]
<     cls.add_method('ReadLsbtohU64', 
<                    'uint64_t', 
<                    [])
<     ## buffer.h (module 'network'): uint16_t ns3::Buffer::Iterator::ReadNtohU16() [member function]
<     cls.add_method('ReadNtohU16', 
<                    'uint16_t', 
<                    [])
<     ## buffer.h (module 'network'): uint32_t ns3::Buffer::Iterator::ReadNtohU32() [member function]
<     cls.add_method('ReadNtohU32', 
<                    'uint32_t', 
<                    [])
<     ## buffer.h (module 'network'): uint64_t ns3::Buffer::Iterator::ReadNtohU64() [member function]
<     cls.add_method('ReadNtohU64', 
<                    'uint64_t', 
<                    [])
<     ## buffer.h (module 'network'): uint16_t ns3::Buffer::Iterator::ReadU16() [member function]
<     cls.add_method('ReadU16', 
<                    'uint16_t', 
<                    [])
<     ## buffer.h (module 'network'): uint32_t ns3::Buffer::Iterator::ReadU32() [member function]
<     cls.add_method('ReadU32', 
<                    'uint32_t', 
<                    [])
<     ## buffer.h (module 'network'): uint64_t ns3::Buffer::Iterator::ReadU64() [member function]
<     cls.add_method('ReadU64', 
<                    'uint64_t', 
<                    [])
<     ## buffer.h (module 'network'): uint8_t ns3::Buffer::Iterator::ReadU8() [member function]
<     cls.add_method('ReadU8', 
<                    'uint8_t', 
<                    [])
<     ## buffer.h (module 'network'): void ns3::Buffer::Iterator::Write(uint8_t const * buffer, uint32_t size) [member function]
<     cls.add_method('Write', 
<                    'void', 
<                    [param('uint8_t const *', 'buffer'), param('uint32_t', 'size')])
<     ## buffer.h (module 'network'): void ns3::Buffer::Iterator::Write(ns3::Buffer::Iterator start, ns3::Buffer::Iterator end) [member function]
<     cls.add_method('Write', 
<                    'void', 
<                    [param('ns3::Buffer::Iterator', 'start'), param('ns3::Buffer::Iterator', 'end')])
<     ## buffer.h (module 'network'): void ns3::Buffer::Iterator::WriteHtolsbU16(uint16_t data) [member function]
<     cls.add_method('WriteHtolsbU16', 
<                    'void', 
<                    [param('uint16_t', 'data')])
<     ## buffer.h (module 'network'): void ns3::Buffer::Iterator::WriteHtolsbU32(uint32_t data) [member function]
<     cls.add_method('WriteHtolsbU32', 
<                    'void', 
<                    [param('uint32_t', 'data')])
<     ## buffer.h (module 'network'): void ns3::Buffer::Iterator::WriteHtolsbU64(uint64_t data) [member function]
<     cls.add_method('WriteHtolsbU64', 
<                    'void', 
<                    [param('uint64_t', 'data')])
<     ## buffer.h (module 'network'): void ns3::Buffer::Iterator::WriteHtonU16(uint16_t data) [member function]
<     cls.add_method('WriteHtonU16', 
<                    'void', 
<                    [param('uint16_t', 'data')])
<     ## buffer.h (module 'network'): void ns3::Buffer::Iterator::WriteHtonU32(uint32_t data) [member function]
<     cls.add_method('WriteHtonU32', 
<                    'void', 
<                    [param('uint32_t', 'data')])
<     ## buffer.h (module 'network'): void ns3::Buffer::Iterator::WriteHtonU64(uint64_t data) [member function]
<     cls.add_method('WriteHtonU64', 
<                    'void', 
<                    [param('uint64_t', 'data')])
<     ## buffer.h (module 'network'): void ns3::Buffer::Iterator::WriteU16(uint16_t data) [member function]
<     cls.add_method('WriteU16', 
<                    'void', 
<                    [param('uint16_t', 'data')])
<     ## buffer.h (module 'network'): void ns3::Buffer::Iterator::WriteU32(uint32_t data) [member function]
<     cls.add_method('WriteU32', 
<                    'void', 
<                    [param('uint32_t', 'data')])
<     ## buffer.h (module 'network'): void ns3::Buffer::Iterator::WriteU64(uint64_t data) [member function]
<     cls.add_method('WriteU64', 
<                    'void', 
<                    [param('uint64_t', 'data')])
<     ## buffer.h (module 'network'): void ns3::Buffer::Iterator::WriteU8(uint8_t data) [member function]
<     cls.add_method('WriteU8', 
<                    'void', 
<                    [param('uint8_t', 'data')])
<     ## buffer.h (module 'network'): void ns3::Buffer::Iterator::WriteU8(uint8_t data, uint32_t len) [member function]
<     cls.add_method('WriteU8', 
<                    'void', 
<                    [param('uint8_t', 'data'), param('uint32_t', 'len')])
<     return
< 
1085c639
<     ## building-container.h (module 'buildings'): ns3::BuildingContainer::BuildingContainer(ns3::BuildingContainer const & arg0) [constructor]
---
>     ## building-container.h (module 'buildings'): ns3::BuildingContainer::BuildingContainer(ns3::BuildingContainer const & arg0) [copy constructor]
1105c659
<     ## building-container.h (module 'buildings'): ns3::BuildingContainer::Iterator ns3::BuildingContainer::Begin() const [member function]
---
>     ## building-container.h (module 'buildings'): __gnu_cxx::__normal_iterator<const ns3::Ptr<ns3::Building>*,std::vector<ns3::Ptr<ns3::Building>, std::allocator<ns3::Ptr<ns3::Building> > > > ns3::BuildingContainer::Begin() const [member function]
1107c661
<                    'ns3::BuildingContainer::Iterator', 
---
>                    '__gnu_cxx::__normal_iterator< ns3::Ptr< ns3::Building > const, std::vector< ns3::Ptr< ns3::Building > > >', 
1114c668
<     ## building-container.h (module 'buildings'): ns3::BuildingContainer::Iterator ns3::BuildingContainer::End() const [member function]
---
>     ## building-container.h (module 'buildings'): __gnu_cxx::__normal_iterator<const ns3::Ptr<ns3::Building>*,std::vector<ns3::Ptr<ns3::Building>, std::allocator<ns3::Ptr<ns3::Building> > > > ns3::BuildingContainer::End() const [member function]
1116c670
<                    'ns3::BuildingContainer::Iterator', 
---
>                    '__gnu_cxx::__normal_iterator< ns3::Ptr< ns3::Building > const, std::vector< ns3::Ptr< ns3::Building > > >', 
1139c693
<     ## building-list.h (module 'buildings'): ns3::BuildingList::BuildingList(ns3::BuildingList const & arg0) [constructor]
---
>     ## building-list.h (module 'buildings'): ns3::BuildingList::BuildingList(ns3::BuildingList const & arg0) [copy constructor]
1146c700
<     ## building-list.h (module 'buildings'): static ns3::BuildingList::Iterator ns3::BuildingList::Begin() [member function]
---
>     ## building-list.h (module 'buildings'): static __gnu_cxx::__normal_iterator<const ns3::Ptr<ns3::Building>*,std::vector<ns3::Ptr<ns3::Building>, std::allocator<ns3::Ptr<ns3::Building> > > > ns3::BuildingList::Begin() [member function]
1148c702
<                    'ns3::BuildingList::Iterator', 
---
>                    '__gnu_cxx::__normal_iterator< ns3::Ptr< ns3::Building > const, std::vector< ns3::Ptr< ns3::Building > > >', 
1151c705
<     ## building-list.h (module 'buildings'): static ns3::BuildingList::Iterator ns3::BuildingList::End() [member function]
---
>     ## building-list.h (module 'buildings'): static __gnu_cxx::__normal_iterator<const ns3::Ptr<ns3::Building>*,std::vector<ns3::Ptr<ns3::Building>, std::allocator<ns3::Ptr<ns3::Building> > > > ns3::BuildingList::End() [member function]
1153c707
<                    'ns3::BuildingList::Iterator', 
---
>                    '__gnu_cxx::__normal_iterator< ns3::Ptr< ns3::Building > const, std::vector< ns3::Ptr< ns3::Building > > >', 
1171c725
<     ## buildings-helper.h (module 'buildings'): ns3::BuildingsHelper::BuildingsHelper(ns3::BuildingsHelper const & arg0) [constructor]
---
>     ## buildings-helper.h (module 'buildings'): ns3::BuildingsHelper::BuildingsHelper(ns3::BuildingsHelper const & arg0) [copy constructor]
1183c737
<     ## buildings-helper.h (module 'buildings'): static void ns3::BuildingsHelper::MakeConsistent(ns3::Ptr<ns3::MobilityModel> mm) [member function]
---
>     ## buildings-helper.h (module 'buildings'): static void ns3::BuildingsHelper::MakeConsistent(ns3::Ptr<ns3::MobilityModel> bmm) [member function]
1186,1187c740,741
<                    [param('ns3::Ptr< ns3::MobilityModel >', 'mm')], 
<                    deprecated=True, is_static=True)
---
>                    [param('ns3::Ptr< ns3::MobilityModel >', 'bmm')], 
>                    is_static=True)
1192,1303c746
<                    deprecated=True, is_static=True)
<     return
< 
< def register_Ns3ByteTagIterator_methods(root_module, cls):
<     ## packet.h (module 'network'): ns3::ByteTagIterator::ByteTagIterator(ns3::ByteTagIterator const & arg0) [constructor]
<     cls.add_constructor([param('ns3::ByteTagIterator const &', 'arg0')])
<     ## packet.h (module 'network'): bool ns3::ByteTagIterator::HasNext() const [member function]
<     cls.add_method('HasNext', 
<                    'bool', 
<                    [], 
<                    is_const=True)
<     ## packet.h (module 'network'): ns3::ByteTagIterator::Item ns3::ByteTagIterator::Next() [member function]
<     cls.add_method('Next', 
<                    'ns3::ByteTagIterator::Item', 
<                    [])
<     return
< 
< def register_Ns3ByteTagIteratorItem_methods(root_module, cls):
<     ## packet.h (module 'network'): ns3::ByteTagIterator::Item::Item(ns3::ByteTagIterator::Item const & arg0) [constructor]
<     cls.add_constructor([param('ns3::ByteTagIterator::Item const &', 'arg0')])
<     ## packet.h (module 'network'): uint32_t ns3::ByteTagIterator::Item::GetEnd() const [member function]
<     cls.add_method('GetEnd', 
<                    'uint32_t', 
<                    [], 
<                    is_const=True)
<     ## packet.h (module 'network'): uint32_t ns3::ByteTagIterator::Item::GetStart() const [member function]
<     cls.add_method('GetStart', 
<                    'uint32_t', 
<                    [], 
<                    is_const=True)
<     ## packet.h (module 'network'): void ns3::ByteTagIterator::Item::GetTag(ns3::Tag & tag) const [member function]
<     cls.add_method('GetTag', 
<                    'void', 
<                    [param('ns3::Tag &', 'tag')], 
<                    is_const=True)
<     ## packet.h (module 'network'): ns3::TypeId ns3::ByteTagIterator::Item::GetTypeId() const [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_const=True)
<     return
< 
< def register_Ns3ByteTagList_methods(root_module, cls):
<     ## byte-tag-list.h (module 'network'): ns3::ByteTagList::ByteTagList() [constructor]
<     cls.add_constructor([])
<     ## byte-tag-list.h (module 'network'): ns3::ByteTagList::ByteTagList(ns3::ByteTagList const & o) [constructor]
<     cls.add_constructor([param('ns3::ByteTagList const &', 'o')])
<     ## byte-tag-list.h (module 'network'): ns3::TagBuffer ns3::ByteTagList::Add(ns3::TypeId tid, uint32_t bufferSize, int32_t start, int32_t end) [member function]
<     cls.add_method('Add', 
<                    'ns3::TagBuffer', 
<                    [param('ns3::TypeId', 'tid'), param('uint32_t', 'bufferSize'), param('int32_t', 'start'), param('int32_t', 'end')])
<     ## byte-tag-list.h (module 'network'): void ns3::ByteTagList::Add(ns3::ByteTagList const & o) [member function]
<     cls.add_method('Add', 
<                    'void', 
<                    [param('ns3::ByteTagList const &', 'o')])
<     ## byte-tag-list.h (module 'network'): void ns3::ByteTagList::AddAtEnd(int32_t appendOffset) [member function]
<     cls.add_method('AddAtEnd', 
<                    'void', 
<                    [param('int32_t', 'appendOffset')])
<     ## byte-tag-list.h (module 'network'): void ns3::ByteTagList::AddAtStart(int32_t prependOffset) [member function]
<     cls.add_method('AddAtStart', 
<                    'void', 
<                    [param('int32_t', 'prependOffset')])
<     ## byte-tag-list.h (module 'network'): void ns3::ByteTagList::Adjust(int32_t adjustment) [member function]
<     cls.add_method('Adjust', 
<                    'void', 
<                    [param('int32_t', 'adjustment')])
<     ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator ns3::ByteTagList::Begin(int32_t offsetStart, int32_t offsetEnd) const [member function]
<     cls.add_method('Begin', 
<                    'ns3::ByteTagList::Iterator', 
<                    [param('int32_t', 'offsetStart'), param('int32_t', 'offsetEnd')], 
<                    is_const=True)
<     ## byte-tag-list.h (module 'network'): void ns3::ByteTagList::RemoveAll() [member function]
<     cls.add_method('RemoveAll', 
<                    'void', 
<                    [])
<     return
< 
< def register_Ns3ByteTagListIterator_methods(root_module, cls):
<     ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator::Iterator(ns3::ByteTagList::Iterator const & arg0) [constructor]
<     cls.add_constructor([param('ns3::ByteTagList::Iterator const &', 'arg0')])
<     ## byte-tag-list.h (module 'network'): uint32_t ns3::ByteTagList::Iterator::GetOffsetStart() const [member function]
<     cls.add_method('GetOffsetStart', 
<                    'uint32_t', 
<                    [], 
<                    is_const=True)
<     ## byte-tag-list.h (module 'network'): bool ns3::ByteTagList::Iterator::HasNext() const [member function]
<     cls.add_method('HasNext', 
<                    'bool', 
<                    [], 
<                    is_const=True)
<     ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator::Item ns3::ByteTagList::Iterator::Next() [member function]
<     cls.add_method('Next', 
<                    'ns3::ByteTagList::Iterator::Item', 
<                    [])
<     return
< 
< def register_Ns3ByteTagListIteratorItem_methods(root_module, cls):
<     ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator::Item::Item(ns3::ByteTagList::Iterator::Item const & arg0) [constructor]
<     cls.add_constructor([param('ns3::ByteTagList::Iterator::Item const &', 'arg0')])
<     ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator::Item::Item(ns3::TagBuffer buf) [constructor]
<     cls.add_constructor([param('ns3::TagBuffer', 'buf')])
<     ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator::Item::buf [variable]
<     cls.add_instance_attribute('buf', 'ns3::TagBuffer', is_const=False)
<     ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator::Item::end [variable]
<     cls.add_instance_attribute('end', 'int32_t', is_const=False)
<     ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator::Item::size [variable]
<     cls.add_instance_attribute('size', 'uint32_t', is_const=False)
<     ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator::Item::start [variable]
<     cls.add_instance_attribute('start', 'int32_t', is_const=False)
<     ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator::Item::tid [variable]
<     cls.add_instance_attribute('tid', 'ns3::TypeId', is_const=False)
---
>                    is_static=True)
1307c750
<     ## callback.h (module 'core'): ns3::CallbackBase::CallbackBase(ns3::CallbackBase const & arg0) [constructor]
---
>     ## callback.h (module 'core'): ns3::CallbackBase::CallbackBase(ns3::CallbackBase const & arg0) [copy constructor]
1322c765
<     ## constant-velocity-helper.h (module 'mobility'): ns3::ConstantVelocityHelper::ConstantVelocityHelper(ns3::ConstantVelocityHelper const & arg0) [constructor]
---
>     ## constant-velocity-helper.h (module 'mobility'): ns3::ConstantVelocityHelper::ConstantVelocityHelper(ns3::ConstantVelocityHelper const & arg0) [copy constructor]
1373,1468d815
< def register_Ns3DefaultDeleter__Ns3AttributeAccessor_methods(root_module, cls):
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::AttributeAccessor>::DefaultDeleter() [constructor]
<     cls.add_constructor([])
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::AttributeAccessor>::DefaultDeleter(ns3::DefaultDeleter<ns3::AttributeAccessor> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::DefaultDeleter< ns3::AttributeAccessor > const &', 'arg0')])
<     ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::AttributeAccessor>::Delete(ns3::AttributeAccessor * object) [member function]
<     cls.add_method('Delete', 
<                    'void', 
<                    [param('ns3::AttributeAccessor *', 'object')], 
<                    is_static=True)
<     return
< 
< def register_Ns3DefaultDeleter__Ns3AttributeChecker_methods(root_module, cls):
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::AttributeChecker>::DefaultDeleter() [constructor]
<     cls.add_constructor([])
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::AttributeChecker>::DefaultDeleter(ns3::DefaultDeleter<ns3::AttributeChecker> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::DefaultDeleter< ns3::AttributeChecker > const &', 'arg0')])
<     ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::AttributeChecker>::Delete(ns3::AttributeChecker * object) [member function]
<     cls.add_method('Delete', 
<                    'void', 
<                    [param('ns3::AttributeChecker *', 'object')], 
<                    is_static=True)
<     return
< 
< def register_Ns3DefaultDeleter__Ns3AttributeValue_methods(root_module, cls):
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::AttributeValue>::DefaultDeleter() [constructor]
<     cls.add_constructor([])
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::AttributeValue>::DefaultDeleter(ns3::DefaultDeleter<ns3::AttributeValue> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::DefaultDeleter< ns3::AttributeValue > const &', 'arg0')])
<     ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::AttributeValue>::Delete(ns3::AttributeValue * object) [member function]
<     cls.add_method('Delete', 
<                    'void', 
<                    [param('ns3::AttributeValue *', 'object')], 
<                    is_static=True)
<     return
< 
< def register_Ns3DefaultDeleter__Ns3CallbackImplBase_methods(root_module, cls):
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::CallbackImplBase>::DefaultDeleter() [constructor]
<     cls.add_constructor([])
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::CallbackImplBase>::DefaultDeleter(ns3::DefaultDeleter<ns3::CallbackImplBase> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::DefaultDeleter< ns3::CallbackImplBase > const &', 'arg0')])
<     ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::CallbackImplBase>::Delete(ns3::CallbackImplBase * object) [member function]
<     cls.add_method('Delete', 
<                    'void', 
<                    [param('ns3::CallbackImplBase *', 'object')], 
<                    is_static=True)
<     return
< 
< def register_Ns3DefaultDeleter__Ns3HashImplementation_methods(root_module, cls):
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::Hash::Implementation>::DefaultDeleter() [constructor]
<     cls.add_constructor([])
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::Hash::Implementation>::DefaultDeleter(ns3::DefaultDeleter<ns3::Hash::Implementation> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::DefaultDeleter< ns3::Hash::Implementation > const &', 'arg0')])
<     ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::Hash::Implementation>::Delete(ns3::Hash::Implementation * object) [member function]
<     cls.add_method('Delete', 
<                    'void', 
<                    [param('ns3::Hash::Implementation *', 'object')], 
<                    is_static=True)
<     return
< 
< def register_Ns3DefaultDeleter__Ns3NixVector_methods(root_module, cls):
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::NixVector>::DefaultDeleter() [constructor]
<     cls.add_constructor([])
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::NixVector>::DefaultDeleter(ns3::DefaultDeleter<ns3::NixVector> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::DefaultDeleter< ns3::NixVector > const &', 'arg0')])
<     ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::NixVector>::Delete(ns3::NixVector * object) [member function]
<     cls.add_method('Delete', 
<                    'void', 
<                    [param('ns3::NixVector *', 'object')], 
<                    is_static=True)
<     return
< 
< def register_Ns3DefaultDeleter__Ns3Packet_methods(root_module, cls):
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::Packet>::DefaultDeleter() [constructor]
<     cls.add_constructor([])
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::Packet>::DefaultDeleter(ns3::DefaultDeleter<ns3::Packet> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::DefaultDeleter< ns3::Packet > const &', 'arg0')])
<     ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::Packet>::Delete(ns3::Packet * object) [member function]
<     cls.add_method('Delete', 
<                    'void', 
<                    [param('ns3::Packet *', 'object')], 
<                    is_static=True)
<     return
< 
< def register_Ns3DefaultDeleter__Ns3TraceSourceAccessor_methods(root_module, cls):
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::TraceSourceAccessor>::DefaultDeleter() [constructor]
<     cls.add_constructor([])
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::TraceSourceAccessor>::DefaultDeleter(ns3::DefaultDeleter<ns3::TraceSourceAccessor> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::DefaultDeleter< ns3::TraceSourceAccessor > const &', 'arg0')])
<     ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::TraceSourceAccessor>::Delete(ns3::TraceSourceAccessor * object) [member function]
<     cls.add_method('Delete', 
<                    'void', 
<                    [param('ns3::TraceSourceAccessor *', 'object')], 
<                    is_static=True)
<     return
< 
1470c817
<     ## hash.h (module 'core'): ns3::Hasher::Hasher(ns3::Hasher const & arg0) [constructor]
---
>     ## hash.h (module 'core'): ns3::Hasher::Hasher(ns3::Hasher const & arg0) [copy constructor]
1476c823
<     ## hash.h (module 'core'): uint32_t ns3::Hasher::GetHash32(char const * buffer, std::size_t const size) [member function]
---
>     ## hash.h (module 'core'): uint32_t ns3::Hasher::GetHash32(char const * buffer, size_t const size) [member function]
1479c826
<                    [param('char const *', 'buffer'), param('std::size_t const', 'size')])
---
>                    [param('char const *', 'buffer'), param('size_t const', 'size')])
1484c831
<     ## hash.h (module 'core'): uint64_t ns3::Hasher::GetHash64(char const * buffer, std::size_t const size) [member function]
---
>     ## hash.h (module 'core'): uint64_t ns3::Hasher::GetHash64(char const * buffer, size_t const size) [member function]
1487c834
<                    [param('char const *', 'buffer'), param('std::size_t const', 'size')])
---
>                    [param('char const *', 'buffer'), param('size_t const', 'size')])
1498a846,847
>     cls.add_binary_comparison_operator('<')
>     cls.add_binary_comparison_operator('!=')
1501,1503c850
<     cls.add_binary_comparison_operator('!=')
<     cls.add_binary_comparison_operator('<')
<     ## ipv4-address.h (module 'network'): ns3::Ipv4Address::Ipv4Address(ns3::Ipv4Address const & arg0) [constructor]
---
>     ## ipv4-address.h (module 'network'): ns3::Ipv4Address::Ipv4Address(ns3::Ipv4Address const & arg0) [copy constructor]
1570c917
<                    is_const=True, deprecated=True)
---
>                    is_const=True)
1616a964
>     cls.add_binary_comparison_operator('!=')
1619,1620c967
<     cls.add_binary_comparison_operator('!=')
<     ## ipv4-address.h (module 'network'): ns3::Ipv4Mask::Ipv4Mask(ns3::Ipv4Mask const & arg0) [constructor]
---
>     ## ipv4-address.h (module 'network'): ns3::Ipv4Mask::Ipv4Mask(ns3::Ipv4Mask const & arg0) [copy constructor]
1662c1009
<                    is_const=True, deprecated=True)
---
>                    is_const=True)
1679a1027,1028
>     cls.add_binary_comparison_operator('<')
>     cls.add_binary_comparison_operator('!=')
1682,1683d1030
<     cls.add_binary_comparison_operator('!=')
<     cls.add_binary_comparison_operator('<')
1690c1037
<     ## ipv6-address.h (module 'network'): ns3::Ipv6Address::Ipv6Address(ns3::Ipv6Address const & addr) [constructor]
---
>     ## ipv6-address.h (module 'network'): ns3::Ipv6Address::Ipv6Address(ns3::Ipv6Address const & addr) [copy constructor]
1694c1041
<     ## ipv6-address.h (module 'network'): ns3::Ipv6Address ns3::Ipv6Address::CombinePrefix(ns3::Ipv6Prefix const & prefix) const [member function]
---
>     ## ipv6-address.h (module 'network'): ns3::Ipv6Address ns3::Ipv6Address::CombinePrefix(ns3::Ipv6Prefix const & prefix) [member function]
1697,1698c1044
<                    [param('ns3::Ipv6Prefix const &', 'prefix')], 
<                    is_const=True)
---
>                    [param('ns3::Ipv6Prefix const &', 'prefix')])
1754,1758d1099
<     ## ipv6-address.h (module 'network'): bool ns3::Ipv6Address::HasPrefix(ns3::Ipv6Prefix const & prefix) const [member function]
<     cls.add_method('HasPrefix', 
<                    'bool', 
<                    [param('ns3::Ipv6Prefix const &', 'prefix')], 
<                    is_const=True)
1763c1104
<                    is_const=True, deprecated=True)
---
>                    deprecated=True, is_const=True)
1788c1129
<                    is_const=True, deprecated=True)
---
>                    is_const=True)
1824,1828d1164
<     ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::MakeAutoconfiguredAddress(ns3::Address addr, ns3::Ipv6Address prefix) [member function]
<     cls.add_method('MakeAutoconfiguredAddress', 
<                    'ns3::Ipv6Address', 
<                    [param('ns3::Address', 'addr'), param('ns3::Ipv6Address', 'prefix')], 
<                    is_static=True)
1844,1853d1179
<     ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::MakeAutoconfiguredAddress(ns3::Mac8Address addr, ns3::Ipv6Address prefix) [member function]
<     cls.add_method('MakeAutoconfiguredAddress', 
<                    'ns3::Ipv6Address', 
<                    [param('ns3::Mac8Address', 'addr'), param('ns3::Ipv6Address', 'prefix')], 
<                    is_static=True)
<     ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::MakeAutoconfiguredLinkLocalAddress(ns3::Address mac) [member function]
<     cls.add_method('MakeAutoconfiguredLinkLocalAddress', 
<                    'ns3::Ipv6Address', 
<                    [param('ns3::Address', 'mac')], 
<                    is_static=True)
1869,1873d1194
<     ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::MakeAutoconfiguredLinkLocalAddress(ns3::Mac8Address mac) [member function]
<     cls.add_method('MakeAutoconfiguredLinkLocalAddress', 
<                    'ns3::Ipv6Address', 
<                    [param('ns3::Mac8Address', 'mac')], 
<                    is_static=True)
1904a1226
>     cls.add_binary_comparison_operator('!=')
1907d1228
<     cls.add_binary_comparison_operator('!=')
1914,1917d1234
<     ## ipv6-address.h (module 'network'): ns3::Ipv6Prefix::Ipv6Prefix(uint8_t * prefix, uint8_t prefixLength) [constructor]
<     cls.add_constructor([param('uint8_t *', 'prefix'), param('uint8_t', 'prefixLength')])
<     ## ipv6-address.h (module 'network'): ns3::Ipv6Prefix::Ipv6Prefix(char const * prefix, uint8_t prefixLength) [constructor]
<     cls.add_constructor([param('char const *', 'prefix'), param('uint8_t', 'prefixLength')])
1920c1237
<     ## ipv6-address.h (module 'network'): ns3::Ipv6Prefix::Ipv6Prefix(ns3::Ipv6Prefix const & prefix) [constructor]
---
>     ## ipv6-address.h (module 'network'): ns3::Ipv6Prefix::Ipv6Prefix(ns3::Ipv6Prefix const & prefix) [copy constructor]
1934,1938d1250
<     ## ipv6-address.h (module 'network'): uint8_t ns3::Ipv6Prefix::GetMinimumPrefixLength() const [member function]
<     cls.add_method('GetMinimumPrefixLength', 
<                    'uint8_t', 
<                    [], 
<                    is_const=True)
1958c1270
<                    is_const=True, deprecated=True)
---
>                    is_const=True)
1969,2086d1280
<     ## ipv6-address.h (module 'network'): void ns3::Ipv6Prefix::SetPrefixLength(uint8_t prefixLength) [member function]
<     cls.add_method('SetPrefixLength', 
<                    'void', 
<                    [param('uint8_t', 'prefixLength')])
<     return
< 
< def register_Ns3Mac48Address_methods(root_module, cls):
<     cls.add_binary_comparison_operator('==')
<     cls.add_binary_comparison_operator('!=')
<     cls.add_binary_comparison_operator('<')
<     cls.add_output_stream_operator()
<     ## mac48-address.h (module 'network'): ns3::Mac48Address::Mac48Address(ns3::Mac48Address const & arg0) [constructor]
<     cls.add_constructor([param('ns3::Mac48Address const &', 'arg0')])
<     ## mac48-address.h (module 'network'): ns3::Mac48Address::Mac48Address() [constructor]
<     cls.add_constructor([])
<     ## mac48-address.h (module 'network'): ns3::Mac48Address::Mac48Address(char const * str) [constructor]
<     cls.add_constructor([param('char const *', 'str')])
<     ## mac48-address.h (module 'network'): static ns3::Mac48Address ns3::Mac48Address::Allocate() [member function]
<     cls.add_method('Allocate', 
<                    'ns3::Mac48Address', 
<                    [], 
<                    is_static=True)
<     ## mac48-address.h (module 'network'): static ns3::Mac48Address ns3::Mac48Address::ConvertFrom(ns3::Address const & address) [member function]
<     cls.add_method('ConvertFrom', 
<                    'ns3::Mac48Address', 
<                    [param('ns3::Address const &', 'address')], 
<                    is_static=True)
<     ## mac48-address.h (module 'network'): void ns3::Mac48Address::CopyFrom(uint8_t const * buffer) [member function]
<     cls.add_method('CopyFrom', 
<                    'void', 
<                    [param('uint8_t const *', 'buffer')])
<     ## mac48-address.h (module 'network'): void ns3::Mac48Address::CopyTo(uint8_t * buffer) const [member function]
<     cls.add_method('CopyTo', 
<                    'void', 
<                    [param('uint8_t *', 'buffer')], 
<                    is_const=True)
<     ## mac48-address.h (module 'network'): static ns3::Mac48Address ns3::Mac48Address::GetBroadcast() [member function]
<     cls.add_method('GetBroadcast', 
<                    'ns3::Mac48Address', 
<                    [], 
<                    is_static=True)
<     ## mac48-address.h (module 'network'): static ns3::Mac48Address ns3::Mac48Address::GetMulticast(ns3::Ipv4Address address) [member function]
<     cls.add_method('GetMulticast', 
<                    'ns3::Mac48Address', 
<                    [param('ns3::Ipv4Address', 'address')], 
<                    is_static=True)
<     ## mac48-address.h (module 'network'): static ns3::Mac48Address ns3::Mac48Address::GetMulticast(ns3::Ipv6Address address) [member function]
<     cls.add_method('GetMulticast', 
<                    'ns3::Mac48Address', 
<                    [param('ns3::Ipv6Address', 'address')], 
<                    is_static=True)
<     ## mac48-address.h (module 'network'): static ns3::Mac48Address ns3::Mac48Address::GetMulticast6Prefix() [member function]
<     cls.add_method('GetMulticast6Prefix', 
<                    'ns3::Mac48Address', 
<                    [], 
<                    is_static=True)
<     ## mac48-address.h (module 'network'): static ns3::Mac48Address ns3::Mac48Address::GetMulticastPrefix() [member function]
<     cls.add_method('GetMulticastPrefix', 
<                    'ns3::Mac48Address', 
<                    [], 
<                    is_static=True)
<     ## mac48-address.h (module 'network'): bool ns3::Mac48Address::IsBroadcast() const [member function]
<     cls.add_method('IsBroadcast', 
<                    'bool', 
<                    [], 
<                    is_const=True)
<     ## mac48-address.h (module 'network'): bool ns3::Mac48Address::IsGroup() const [member function]
<     cls.add_method('IsGroup', 
<                    'bool', 
<                    [], 
<                    is_const=True)
<     ## mac48-address.h (module 'network'): static bool ns3::Mac48Address::IsMatchingType(ns3::Address const & address) [member function]
<     cls.add_method('IsMatchingType', 
<                    'bool', 
<                    [param('ns3::Address const &', 'address')], 
<                    is_static=True)
<     return
< 
< def register_Ns3Mac8Address_methods(root_module, cls):
<     cls.add_binary_comparison_operator('<')
<     cls.add_binary_comparison_operator('==')
<     cls.add_binary_comparison_operator('!=')
<     cls.add_output_stream_operator()
<     ## mac8-address.h (module 'network'): ns3::Mac8Address::Mac8Address(ns3::Mac8Address const & arg0) [constructor]
<     cls.add_constructor([param('ns3::Mac8Address const &', 'arg0')])
<     ## mac8-address.h (module 'network'): ns3::Mac8Address::Mac8Address() [constructor]
<     cls.add_constructor([])
<     ## mac8-address.h (module 'network'): ns3::Mac8Address::Mac8Address(uint8_t addr) [constructor]
<     cls.add_constructor([param('uint8_t', 'addr')])
<     ## mac8-address.h (module 'network'): static ns3::Mac8Address ns3::Mac8Address::Allocate() [member function]
<     cls.add_method('Allocate', 
<                    'ns3::Mac8Address', 
<                    [], 
<                    is_static=True)
<     ## mac8-address.h (module 'network'): static ns3::Mac8Address ns3::Mac8Address::ConvertFrom(ns3::Address const & address) [member function]
<     cls.add_method('ConvertFrom', 
<                    'ns3::Mac8Address', 
<                    [param('ns3::Address const &', 'address')], 
<                    is_static=True)
<     ## mac8-address.h (module 'network'): void ns3::Mac8Address::CopyFrom(uint8_t const * pBuffer) [member function]
<     cls.add_method('CopyFrom', 
<                    'void', 
<                    [param('uint8_t const *', 'pBuffer')])
<     ## mac8-address.h (module 'network'): void ns3::Mac8Address::CopyTo(uint8_t * pBuffer) const [member function]
<     cls.add_method('CopyTo', 
<                    'void', 
<                    [param('uint8_t *', 'pBuffer')], 
<                    is_const=True)
<     ## mac8-address.h (module 'network'): static ns3::Mac8Address ns3::Mac8Address::GetBroadcast() [member function]
<     cls.add_method('GetBroadcast', 
<                    'ns3::Mac8Address', 
<                    [], 
<                    is_static=True)
<     ## mac8-address.h (module 'network'): static bool ns3::Mac8Address::IsMatchingType(ns3::Address const & address) [member function]
<     cls.add_method('IsMatchingType', 
<                    'bool', 
<                    [param('ns3::Address const &', 'address')], 
<                    is_static=True)
2090c1284
<     ## node-container.h (module 'network'): ns3::NodeContainer::NodeContainer(ns3::NodeContainer const & arg0) [constructor]
---
>     ## node-container.h (module 'network'): ns3::NodeContainer::NodeContainer(ns3::NodeContainer const & arg0) [copy constructor]
2118c1312
<     ## node-container.h (module 'network'): ns3::NodeContainer::Iterator ns3::NodeContainer::Begin() const [member function]
---
>     ## node-container.h (module 'network'): __gnu_cxx::__normal_iterator<ns3::Ptr<ns3::Node> const*, std::vector<ns3::Ptr<ns3::Node>, std::allocator<ns3::Ptr<ns3::Node> > > > ns3::NodeContainer::Begin() const [member function]
2120c1314
<                    'ns3::NodeContainer::Iterator', 
---
>                    '__gnu_cxx::__normal_iterator< ns3::Ptr< ns3::Node >, std::vector< ns3::Ptr< ns3::Node > > >', 
2123,2127d1316
<     ## node-container.h (module 'network'): bool ns3::NodeContainer::Contains(uint32_t id) const [member function]
<     cls.add_method('Contains', 
<                    'bool', 
<                    [param('uint32_t', 'id')], 
<                    is_const=True)
2136c1325
<     ## node-container.h (module 'network'): ns3::NodeContainer::Iterator ns3::NodeContainer::End() const [member function]
---
>     ## node-container.h (module 'network'): __gnu_cxx::__normal_iterator<ns3::Ptr<ns3::Node> const*, std::vector<ns3::Ptr<ns3::Node>, std::allocator<ns3::Ptr<ns3::Node> > > > ns3::NodeContainer::End() const [member function]
2138c1327
<                    'ns3::NodeContainer::Iterator', 
---
>                    '__gnu_cxx::__normal_iterator< ns3::Ptr< ns3::Node >, std::vector< ns3::Ptr< ns3::Node > > >', 
2161c1350
<     ## object-base.h (module 'core'): ns3::ObjectBase::ObjectBase(ns3::ObjectBase const & arg0) [constructor]
---
>     ## object-base.h (module 'core'): ns3::ObjectBase::ObjectBase(ns3::ObjectBase const & arg0) [copy constructor]
2177c1366
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
2222c1411
<     ## object.h (module 'core'): ns3::ObjectDeleter::ObjectDeleter(ns3::ObjectDeleter const & arg0) [constructor]
---
>     ## object.h (module 'core'): ns3::ObjectDeleter::ObjectDeleter(ns3::ObjectDeleter const & arg0) [copy constructor]
2233c1422
<     ## object-factory.h (module 'core'): ns3::ObjectFactory::ObjectFactory(ns3::ObjectFactory const & arg0) [constructor]
---
>     ## object-factory.h (module 'core'): ns3::ObjectFactory::ObjectFactory(ns3::ObjectFactory const & arg0) [copy constructor]
2249,2253d1437
<     ## object-factory.h (module 'core'): bool ns3::ObjectFactory::IsTypeIdSet() const [member function]
<     cls.add_method('IsTypeIdSet', 
<                    'bool', 
<                    [], 
<                    is_const=True)
2272,2466d1455
< def register_Ns3PacketMetadata_methods(root_module, cls):
<     ## packet-metadata.h (module 'network'): ns3::PacketMetadata::PacketMetadata(uint64_t uid, uint32_t size) [constructor]
<     cls.add_constructor([param('uint64_t', 'uid'), param('uint32_t', 'size')])
<     ## packet-metadata.h (module 'network'): ns3::PacketMetadata::PacketMetadata(ns3::PacketMetadata const & o) [constructor]
<     cls.add_constructor([param('ns3::PacketMetadata const &', 'o')])
<     ## packet-metadata.h (module 'network'): void ns3::PacketMetadata::AddAtEnd(ns3::PacketMetadata const & o) [member function]
<     cls.add_method('AddAtEnd', 
<                    'void', 
<                    [param('ns3::PacketMetadata const &', 'o')])
<     ## packet-metadata.h (module 'network'): void ns3::PacketMetadata::AddHeader(ns3::Header const & header, uint32_t size) [member function]
<     cls.add_method('AddHeader', 
<                    'void', 
<                    [param('ns3::Header const &', 'header'), param('uint32_t', 'size')])
<     ## packet-metadata.h (module 'network'): void ns3::PacketMetadata::AddPaddingAtEnd(uint32_t end) [member function]
<     cls.add_method('AddPaddingAtEnd', 
<                    'void', 
<                    [param('uint32_t', 'end')])
<     ## packet-metadata.h (module 'network'): void ns3::PacketMetadata::AddTrailer(ns3::Trailer const & trailer, uint32_t size) [member function]
<     cls.add_method('AddTrailer', 
<                    'void', 
<                    [param('ns3::Trailer const &', 'trailer'), param('uint32_t', 'size')])
<     ## packet-metadata.h (module 'network'): ns3::PacketMetadata::ItemIterator ns3::PacketMetadata::BeginItem(ns3::Buffer buffer) const [member function]
<     cls.add_method('BeginItem', 
<                    'ns3::PacketMetadata::ItemIterator', 
<                    [param('ns3::Buffer', 'buffer')], 
<                    is_const=True)
<     ## packet-metadata.h (module 'network'): ns3::PacketMetadata ns3::PacketMetadata::CreateFragment(uint32_t start, uint32_t end) const [member function]
<     cls.add_method('CreateFragment', 
<                    'ns3::PacketMetadata', 
<                    [param('uint32_t', 'start'), param('uint32_t', 'end')], 
<                    is_const=True)
<     ## packet-metadata.h (module 'network'): uint32_t ns3::PacketMetadata::Deserialize(uint8_t const * buffer, uint32_t size) [member function]
<     cls.add_method('Deserialize', 
<                    'uint32_t', 
<                    [param('uint8_t const *', 'buffer'), param('uint32_t', 'size')])
<     ## packet-metadata.h (module 'network'): static void ns3::PacketMetadata::Enable() [member function]
<     cls.add_method('Enable', 
<                    'void', 
<                    [], 
<                    is_static=True)
<     ## packet-metadata.h (module 'network'): static void ns3::PacketMetadata::EnableChecking() [member function]
<     cls.add_method('EnableChecking', 
<                    'void', 
<                    [], 
<                    is_static=True)
<     ## packet-metadata.h (module 'network'): uint32_t ns3::PacketMetadata::GetSerializedSize() const [member function]
<     cls.add_method('GetSerializedSize', 
<                    'uint32_t', 
<                    [], 
<                    is_const=True)
<     ## packet-metadata.h (module 'network'): uint64_t ns3::PacketMetadata::GetUid() const [member function]
<     cls.add_method('GetUid', 
<                    'uint64_t', 
<                    [], 
<                    is_const=True)
<     ## packet-metadata.h (module 'network'): void ns3::PacketMetadata::RemoveAtEnd(uint32_t end) [member function]
<     cls.add_method('RemoveAtEnd', 
<                    'void', 
<                    [param('uint32_t', 'end')])
<     ## packet-metadata.h (module 'network'): void ns3::PacketMetadata::RemoveAtStart(uint32_t start) [member function]
<     cls.add_method('RemoveAtStart', 
<                    'void', 
<                    [param('uint32_t', 'start')])
<     ## packet-metadata.h (module 'network'): void ns3::PacketMetadata::RemoveHeader(ns3::Header const & header, uint32_t size) [member function]
<     cls.add_method('RemoveHeader', 
<                    'void', 
<                    [param('ns3::Header const &', 'header'), param('uint32_t', 'size')])
<     ## packet-metadata.h (module 'network'): void ns3::PacketMetadata::RemoveTrailer(ns3::Trailer const & trailer, uint32_t size) [member function]
<     cls.add_method('RemoveTrailer', 
<                    'void', 
<                    [param('ns3::Trailer const &', 'trailer'), param('uint32_t', 'size')])
<     ## packet-metadata.h (module 'network'): uint32_t ns3::PacketMetadata::Serialize(uint8_t * buffer, uint32_t maxSize) const [member function]
<     cls.add_method('Serialize', 
<                    'uint32_t', 
<                    [param('uint8_t *', 'buffer'), param('uint32_t', 'maxSize')], 
<                    is_const=True)
<     return
< 
< def register_Ns3PacketMetadataItem_methods(root_module, cls):
<     ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item::Item() [constructor]
<     cls.add_constructor([])
<     ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item::Item(ns3::PacketMetadata::Item const & arg0) [constructor]
<     cls.add_constructor([param('ns3::PacketMetadata::Item const &', 'arg0')])
<     ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item::current [variable]
<     cls.add_instance_attribute('current', 'ns3::Buffer::Iterator', is_const=False)
<     ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item::currentSize [variable]
<     cls.add_instance_attribute('currentSize', 'uint32_t', is_const=False)
<     ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item::currentTrimedFromEnd [variable]
<     cls.add_instance_attribute('currentTrimedFromEnd', 'uint32_t', is_const=False)
<     ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item::currentTrimedFromStart [variable]
<     cls.add_instance_attribute('currentTrimedFromStart', 'uint32_t', is_const=False)
<     ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item::isFragment [variable]
<     cls.add_instance_attribute('isFragment', 'bool', is_const=False)
<     ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item::tid [variable]
<     cls.add_instance_attribute('tid', 'ns3::TypeId', is_const=False)
<     ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item::type [variable]
<     cls.add_instance_attribute('type', 'ns3::PacketMetadata::Item::ItemType', is_const=False)
<     return
< 
< def register_Ns3PacketMetadataItemIterator_methods(root_module, cls):
<     ## packet-metadata.h (module 'network'): ns3::PacketMetadata::ItemIterator::ItemIterator(ns3::PacketMetadata::ItemIterator const & arg0) [constructor]
<     cls.add_constructor([param('ns3::PacketMetadata::ItemIterator const &', 'arg0')])
<     ## packet-metadata.h (module 'network'): ns3::PacketMetadata::ItemIterator::ItemIterator(ns3::PacketMetadata const * metadata, ns3::Buffer buffer) [constructor]
<     cls.add_constructor([param('ns3::PacketMetadata const *', 'metadata'), param('ns3::Buffer', 'buffer')])
<     ## packet-metadata.h (module 'network'): bool ns3::PacketMetadata::ItemIterator::HasNext() const [member function]
<     cls.add_method('HasNext', 
<                    'bool', 
<                    [], 
<                    is_const=True)
<     ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item ns3::PacketMetadata::ItemIterator::Next() [member function]
<     cls.add_method('Next', 
<                    'ns3::PacketMetadata::Item', 
<                    [])
<     return
< 
< def register_Ns3PacketTagIterator_methods(root_module, cls):
<     ## packet.h (module 'network'): ns3::PacketTagIterator::PacketTagIterator(ns3::PacketTagIterator const & arg0) [constructor]
<     cls.add_constructor([param('ns3::PacketTagIterator const &', 'arg0')])
<     ## packet.h (module 'network'): bool ns3::PacketTagIterator::HasNext() const [member function]
<     cls.add_method('HasNext', 
<                    'bool', 
<                    [], 
<                    is_const=True)
<     ## packet.h (module 'network'): ns3::PacketTagIterator::Item ns3::PacketTagIterator::Next() [member function]
<     cls.add_method('Next', 
<                    'ns3::PacketTagIterator::Item', 
<                    [])
<     return
< 
< def register_Ns3PacketTagIteratorItem_methods(root_module, cls):
<     ## packet.h (module 'network'): ns3::PacketTagIterator::Item::Item(ns3::PacketTagIterator::Item const & arg0) [constructor]
<     cls.add_constructor([param('ns3::PacketTagIterator::Item const &', 'arg0')])
<     ## packet.h (module 'network'): void ns3::PacketTagIterator::Item::GetTag(ns3::Tag & tag) const [member function]
<     cls.add_method('GetTag', 
<                    'void', 
<                    [param('ns3::Tag &', 'tag')], 
<                    is_const=True)
<     ## packet.h (module 'network'): ns3::TypeId ns3::PacketTagIterator::Item::GetTypeId() const [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_const=True)
<     return
< 
< def register_Ns3PacketTagList_methods(root_module, cls):
<     ## packet-tag-list.h (module 'network'): ns3::PacketTagList::PacketTagList() [constructor]
<     cls.add_constructor([])
<     ## packet-tag-list.h (module 'network'): ns3::PacketTagList::PacketTagList(ns3::PacketTagList const & o) [constructor]
<     cls.add_constructor([param('ns3::PacketTagList const &', 'o')])
<     ## packet-tag-list.h (module 'network'): void ns3::PacketTagList::Add(ns3::Tag const & tag) const [member function]
<     cls.add_method('Add', 
<                    'void', 
<                    [param('ns3::Tag const &', 'tag')], 
<                    is_const=True)
<     ## packet-tag-list.h (module 'network'): ns3::PacketTagList::TagData const * ns3::PacketTagList::Head() const [member function]
<     cls.add_method('Head', 
<                    'ns3::PacketTagList::TagData const *', 
<                    [], 
<                    is_const=True)
<     ## packet-tag-list.h (module 'network'): bool ns3::PacketTagList::Peek(ns3::Tag & tag) const [member function]
<     cls.add_method('Peek', 
<                    'bool', 
<                    [param('ns3::Tag &', 'tag')], 
<                    is_const=True)
<     ## packet-tag-list.h (module 'network'): bool ns3::PacketTagList::Remove(ns3::Tag & tag) [member function]
<     cls.add_method('Remove', 
<                    'bool', 
<                    [param('ns3::Tag &', 'tag')])
<     ## packet-tag-list.h (module 'network'): void ns3::PacketTagList::RemoveAll() [member function]
<     cls.add_method('RemoveAll', 
<                    'void', 
<                    [])
<     ## packet-tag-list.h (module 'network'): bool ns3::PacketTagList::Replace(ns3::Tag & tag) [member function]
<     cls.add_method('Replace', 
<                    'bool', 
<                    [param('ns3::Tag &', 'tag')])
<     return
< 
< def register_Ns3PacketTagListTagData_methods(root_module, cls):
<     ## packet-tag-list.h (module 'network'): ns3::PacketTagList::TagData::TagData() [constructor]
<     cls.add_constructor([])
<     ## packet-tag-list.h (module 'network'): ns3::PacketTagList::TagData::TagData(ns3::PacketTagList::TagData const & arg0) [constructor]
<     cls.add_constructor([param('ns3::PacketTagList::TagData const &', 'arg0')])
<     ## packet-tag-list.h (module 'network'): ns3::PacketTagList::TagData::count [variable]
<     cls.add_instance_attribute('count', 'uint32_t', is_const=False)
<     ## packet-tag-list.h (module 'network'): ns3::PacketTagList::TagData::data [variable]
<     cls.add_instance_attribute('data', 'uint8_t [ 1 ]', is_const=False)
<     ## packet-tag-list.h (module 'network'): ns3::PacketTagList::TagData::next [variable]
<     cls.add_instance_attribute('next', 'ns3::PacketTagList::TagData *', is_const=False)
<     ## packet-tag-list.h (module 'network'): ns3::PacketTagList::TagData::size [variable]
<     cls.add_instance_attribute('size', 'uint32_t', is_const=False)
<     ## packet-tag-list.h (module 'network'): ns3::PacketTagList::TagData::tid [variable]
<     cls.add_instance_attribute('tid', 'ns3::TypeId', is_const=False)
<     return
< 
2470c1459
<     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Object, ns3::ObjectBase, ns3::ObjectDeleter>::SimpleRefCount(ns3::SimpleRefCount<ns3::Object, ns3::ObjectBase, ns3::ObjectDeleter> const & o) [constructor]
---
>     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Object, ns3::ObjectBase, ns3::ObjectDeleter>::SimpleRefCount(ns3::SimpleRefCount<ns3::Object, ns3::ObjectBase, ns3::ObjectDeleter> const & o) [copy constructor]
2472,2480c1461,1462
<     return
< 
< def register_Ns3Tag_methods(root_module, cls):
<     ## tag.h (module 'network'): ns3::Tag::Tag() [constructor]
<     cls.add_constructor([])
<     ## tag.h (module 'network'): ns3::Tag::Tag(ns3::Tag const & arg0) [constructor]
<     cls.add_constructor([param('ns3::Tag const &', 'arg0')])
<     ## tag.h (module 'network'): void ns3::Tag::Deserialize(ns3::TagBuffer i) [member function]
<     cls.add_method('Deserialize', 
---
>     ## simple-ref-count.h (module 'core'): static void ns3::SimpleRefCount<ns3::Object, ns3::ObjectBase, ns3::ObjectDeleter>::Cleanup() [member function]
>     cls.add_method('Cleanup', 
2482,2491d1463
<                    [param('ns3::TagBuffer', 'i')], 
<                    is_virtual=True, is_pure_virtual=True)
<     ## tag.h (module 'network'): uint32_t ns3::Tag::GetSerializedSize() const [member function]
<     cls.add_method('GetSerializedSize', 
<                    'uint32_t', 
<                    [], 
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
<     ## tag.h (module 'network'): static ns3::TypeId ns3::Tag::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
2494,2503d1465
<     ## tag.h (module 'network'): void ns3::Tag::Print(std::ostream & os) const [member function]
<     cls.add_method('Print', 
<                    'void', 
<                    [param('std::ostream &', 'os')], 
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
<     ## tag.h (module 'network'): void ns3::Tag::Serialize(ns3::TagBuffer i) const [member function]
<     cls.add_method('Serialize', 
<                    'void', 
<                    [param('ns3::TagBuffer', 'i')], 
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
2507c1469
<     ## tag-buffer.h (module 'network'): ns3::TagBuffer::TagBuffer(ns3::TagBuffer const & arg0) [constructor]
---
>     ## tag-buffer.h (module 'network'): ns3::TagBuffer::TagBuffer(ns3::TagBuffer const & arg0) [copy constructor]
2551c1513
<     ## tag-buffer.h (module 'network'): void ns3::TagBuffer::WriteU16(uint16_t v) [member function]
---
>     ## tag-buffer.h (module 'network'): void ns3::TagBuffer::WriteU16(uint16_t data) [member function]
2554,2555c1516,1517
<                    [param('uint16_t', 'v')])
<     ## tag-buffer.h (module 'network'): void ns3::TagBuffer::WriteU32(uint32_t v) [member function]
---
>                    [param('uint16_t', 'data')])
>     ## tag-buffer.h (module 'network'): void ns3::TagBuffer::WriteU32(uint32_t data) [member function]
2558c1520
<                    [param('uint32_t', 'v')])
---
>                    [param('uint32_t', 'data')])
2571c1533
<     ## nstime.h (module 'core'): ns3::TimeWithUnit::TimeWithUnit(ns3::TimeWithUnit const & arg0) [constructor]
---
>     ## nstime.h (module 'core'): ns3::TimeWithUnit::TimeWithUnit(ns3::TimeWithUnit const & arg0) [copy constructor]
2578c1540
<     cls.add_binary_comparison_operator('==')
---
>     cls.add_binary_comparison_operator('<')
2581c1543
<     cls.add_binary_comparison_operator('<')
---
>     cls.add_binary_comparison_operator('==')
2586c1548
<     ## type-id.h (module 'core'): ns3::TypeId::TypeId(ns3::TypeId const & o) [constructor]
---
>     ## type-id.h (module 'core'): ns3::TypeId::TypeId(ns3::TypeId const & o) [copy constructor]
2588c1550
<     ## type-id.h (module 'core'): ns3::TypeId ns3::TypeId::AddAttribute(std::string name, std::string help, ns3::AttributeValue const & initialValue, ns3::Ptr<const ns3::AttributeAccessor> accessor, ns3::Ptr<const ns3::AttributeChecker> checker, ns3::TypeId::SupportLevel supportLevel=::ns3::TypeId::SupportLevel::SUPPORTED, std::string const & supportMsg="") [member function]
---
>     ## type-id.h (module 'core'): ns3::TypeId ns3::TypeId::AddAttribute(std::string name, std::string help, ns3::AttributeValue const & initialValue, ns3::Ptr<ns3::AttributeAccessor const> accessor, ns3::Ptr<ns3::AttributeChecker const> checker, ns3::TypeId::SupportLevel supportLevel=::ns3::TypeId::SUPPORTED, std::string const & supportMsg="") [member function]
2591,2592c1553,1554
<                    [param('std::string', 'name'), param('std::string', 'help'), param('ns3::AttributeValue const &', 'initialValue'), param('ns3::Ptr< ns3::AttributeAccessor const >', 'accessor'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker'), param('ns3::TypeId::SupportLevel', 'supportLevel', default_value='::ns3::TypeId::SupportLevel::SUPPORTED'), param('std::string const &', 'supportMsg', default_value='""')])
<     ## type-id.h (module 'core'): ns3::TypeId ns3::TypeId::AddAttribute(std::string name, std::string help, uint32_t flags, ns3::AttributeValue const & initialValue, ns3::Ptr<const ns3::AttributeAccessor> accessor, ns3::Ptr<const ns3::AttributeChecker> checker, ns3::TypeId::SupportLevel supportLevel=::ns3::TypeId::SupportLevel::SUPPORTED, std::string const & supportMsg="") [member function]
---
>                    [param('std::string', 'name'), param('std::string', 'help'), param('ns3::AttributeValue const &', 'initialValue'), param('ns3::Ptr< ns3::AttributeAccessor const >', 'accessor'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker'), param('ns3::TypeId::SupportLevel', 'supportLevel', default_value='::ns3::TypeId::SUPPORTED'), param('std::string const &', 'supportMsg', default_value='""')])
>     ## type-id.h (module 'core'): ns3::TypeId ns3::TypeId::AddAttribute(std::string name, std::string help, uint32_t flags, ns3::AttributeValue const & initialValue, ns3::Ptr<ns3::AttributeAccessor const> accessor, ns3::Ptr<ns3::AttributeChecker const> checker, ns3::TypeId::SupportLevel supportLevel=::ns3::TypeId::SUPPORTED, std::string const & supportMsg="") [member function]
2595,2596c1557,1558
<                    [param('std::string', 'name'), param('std::string', 'help'), param('uint32_t', 'flags'), param('ns3::AttributeValue const &', 'initialValue'), param('ns3::Ptr< ns3::AttributeAccessor const >', 'accessor'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker'), param('ns3::TypeId::SupportLevel', 'supportLevel', default_value='::ns3::TypeId::SupportLevel::SUPPORTED'), param('std::string const &', 'supportMsg', default_value='""')])
<     ## type-id.h (module 'core'): ns3::TypeId ns3::TypeId::AddTraceSource(std::string name, std::string help, ns3::Ptr<const ns3::TraceSourceAccessor> accessor) [member function]
---
>                    [param('std::string', 'name'), param('std::string', 'help'), param('uint32_t', 'flags'), param('ns3::AttributeValue const &', 'initialValue'), param('ns3::Ptr< ns3::AttributeAccessor const >', 'accessor'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker'), param('ns3::TypeId::SupportLevel', 'supportLevel', default_value='::ns3::TypeId::SUPPORTED'), param('std::string const &', 'supportMsg', default_value='""')])
>     ## type-id.h (module 'core'): ns3::TypeId ns3::TypeId::AddTraceSource(std::string name, std::string help, ns3::Ptr<ns3::TraceSourceAccessor const> accessor) [member function]
2601c1563
<     ## type-id.h (module 'core'): ns3::TypeId ns3::TypeId::AddTraceSource(std::string name, std::string help, ns3::Ptr<const ns3::TraceSourceAccessor> accessor, std::string callback, ns3::TypeId::SupportLevel supportLevel=::ns3::TypeId::SupportLevel::SUPPORTED, std::string const & supportMsg="") [member function]
---
>     ## type-id.h (module 'core'): ns3::TypeId ns3::TypeId::AddTraceSource(std::string name, std::string help, ns3::Ptr<ns3::TraceSourceAccessor const> accessor, std::string callback, ns3::TypeId::SupportLevel supportLevel=::ns3::TypeId::SUPPORTED, std::string const & supportMsg="") [member function]
2604,2605c1566,1567
<                    [param('std::string', 'name'), param('std::string', 'help'), param('ns3::Ptr< ns3::TraceSourceAccessor const >', 'accessor'), param('std::string', 'callback'), param('ns3::TypeId::SupportLevel', 'supportLevel', default_value='::ns3::TypeId::SupportLevel::SUPPORTED'), param('std::string const &', 'supportMsg', default_value='""')])
<     ## type-id.h (module 'core'): ns3::TypeId::AttributeInformation ns3::TypeId::GetAttribute(std::size_t i) const [member function]
---
>                    [param('std::string', 'name'), param('std::string', 'help'), param('ns3::Ptr< ns3::TraceSourceAccessor const >', 'accessor'), param('std::string', 'callback'), param('ns3::TypeId::SupportLevel', 'supportLevel', default_value='::ns3::TypeId::SUPPORTED'), param('std::string const &', 'supportMsg', default_value='""')])
>     ## type-id.h (module 'core'): ns3::TypeId::AttributeInformation ns3::TypeId::GetAttribute(uint32_t i) const [member function]
2608c1570
<                    [param('std::size_t', 'i')], 
---
>                    [param('uint32_t', 'i')], 
2610c1572
<     ## type-id.h (module 'core'): std::string ns3::TypeId::GetAttributeFullName(std::size_t i) const [member function]
---
>     ## type-id.h (module 'core'): std::string ns3::TypeId::GetAttributeFullName(uint32_t i) const [member function]
2613c1575
<                    [param('std::size_t', 'i')], 
---
>                    [param('uint32_t', 'i')], 
2615c1577
<     ## type-id.h (module 'core'): std::size_t ns3::TypeId::GetAttributeN() const [member function]
---
>     ## type-id.h (module 'core'): uint32_t ns3::TypeId::GetAttributeN() const [member function]
2617c1579
<                    'std::size_t', 
---
>                    'uint32_t', 
2620c1582
<     ## type-id.h (module 'core'): ns3::Callback<ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> ns3::TypeId::GetConstructor() const [member function]
---
>     ## type-id.h (module 'core'): ns3::Callback<ns3::ObjectBase*,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> ns3::TypeId::GetConstructor() const [member function]
2630c1592
<     ## type-id.h (module 'core'): ns3::TypeId::hash_t ns3::TypeId::GetHash() const [member function]
---
>     ## type-id.h (module 'core'): uint32_t ns3::TypeId::GetHash() const [member function]
2632c1594
<                    'ns3::TypeId::hash_t', 
---
>                    'uint32_t', 
2645c1607
<     ## type-id.h (module 'core'): static ns3::TypeId ns3::TypeId::GetRegistered(uint16_t i) [member function]
---
>     ## type-id.h (module 'core'): static ns3::TypeId ns3::TypeId::GetRegistered(uint32_t i) [member function]
2648c1610
<                    [param('uint16_t', 'i')], 
---
>                    [param('uint32_t', 'i')], 
2650c1612
<     ## type-id.h (module 'core'): static uint16_t ns3::TypeId::GetRegisteredN() [member function]
---
>     ## type-id.h (module 'core'): static uint32_t ns3::TypeId::GetRegisteredN() [member function]
2652c1614
<                    'uint16_t', 
---
>                    'uint32_t', 
2660c1622
<     ## type-id.h (module 'core'): ns3::TypeId::TraceSourceInformation ns3::TypeId::GetTraceSource(std::size_t i) const [member function]
---
>     ## type-id.h (module 'core'): ns3::TypeId::TraceSourceInformation ns3::TypeId::GetTraceSource(uint32_t i) const [member function]
2663c1625
<                    [param('std::size_t', 'i')], 
---
>                    [param('uint32_t', 'i')], 
2665c1627
<     ## type-id.h (module 'core'): std::size_t ns3::TypeId::GetTraceSourceN() const [member function]
---
>     ## type-id.h (module 'core'): uint32_t ns3::TypeId::GetTraceSourceN() const [member function]
2667c1629
<                    'std::size_t', 
---
>                    'uint32_t', 
2699c1661
<     ## type-id.h (module 'core'): static ns3::TypeId ns3::TypeId::LookupByHash(ns3::TypeId::hash_t hash) [member function]
---
>     ## type-id.h (module 'core'): static ns3::TypeId ns3::TypeId::LookupByHash(uint32_t hash) [member function]
2704c1666
<     ## type-id.h (module 'core'): static bool ns3::TypeId::LookupByHashFailSafe(ns3::TypeId::hash_t hash, ns3::TypeId * tid) [member function]
---
>     ## type-id.h (module 'core'): static bool ns3::TypeId::LookupByHashFailSafe(uint32_t hash, ns3::TypeId * tid) [member function]
2714c1676
<     ## type-id.h (module 'core'): ns3::Ptr<const ns3::TraceSourceAccessor> ns3::TypeId::LookupTraceSourceByName(std::string name) const [member function]
---
>     ## type-id.h (module 'core'): ns3::Ptr<ns3::TraceSourceAccessor const> ns3::TypeId::LookupTraceSourceByName(std::string name) const [member function]
2719c1681
<     ## type-id.h (module 'core'): ns3::Ptr<const ns3::TraceSourceAccessor> ns3::TypeId::LookupTraceSourceByName(std::string name, ns3::TypeId::TraceSourceInformation * info) const [member function]
---
>     ## type-id.h (module 'core'): ns3::Ptr<ns3::TraceSourceAccessor const> ns3::TypeId::LookupTraceSourceByName(std::string name, ns3::TypeId::TraceSourceInformation * info) const [member function]
2729c1691
<     ## type-id.h (module 'core'): bool ns3::TypeId::SetAttributeInitialValue(std::size_t i, ns3::Ptr<const ns3::AttributeValue> initialValue) [member function]
---
>     ## type-id.h (module 'core'): bool ns3::TypeId::SetAttributeInitialValue(uint32_t i, ns3::Ptr<ns3::AttributeValue const> initialValue) [member function]
2732c1694
<                    [param('std::size_t', 'i'), param('ns3::Ptr< ns3::AttributeValue const >', 'initialValue')])
---
>                    [param('uint32_t', 'i'), param('ns3::Ptr< ns3::AttributeValue const >', 'initialValue')])
2754c1716
<     ## type-id.h (module 'core'): ns3::TypeId::AttributeInformation::AttributeInformation(ns3::TypeId::AttributeInformation const & arg0) [constructor]
---
>     ## type-id.h (module 'core'): ns3::TypeId::AttributeInformation::AttributeInformation(ns3::TypeId::AttributeInformation const & arg0) [copy constructor]
2759a1722
>     ## type-id.h (module 'core'): ns3::TypeId::AttributeInformation::flags [variable]
2778c1741
<     ## type-id.h (module 'core'): ns3::TypeId::TraceSourceInformation::TraceSourceInformation(ns3::TypeId::TraceSourceInformation const & arg0) [constructor]
---
>     ## type-id.h (module 'core'): ns3::TypeId::TraceSourceInformation::TraceSourceInformation(ns3::TypeId::TraceSourceInformation const & arg0) [copy constructor]
2796,2804c1759
<     cls.add_binary_comparison_operator('<')
<     cls.add_binary_numeric_operator('-', root_module['ns3::Vector2D'], root_module['ns3::Vector2D'], param('ns3::Vector2D const &', 'right'))
<     cls.add_binary_numeric_operator('+', root_module['ns3::Vector2D'], root_module['ns3::Vector2D'], param('ns3::Vector2D const &', 'right'))
<     cls.add_binary_comparison_operator('!=')
<     cls.add_binary_comparison_operator('==')
<     cls.add_binary_comparison_operator('>=')
<     cls.add_binary_comparison_operator('>')
<     cls.add_binary_comparison_operator('<=')
<     ## vector.h (module 'core'): ns3::Vector2D::Vector2D(ns3::Vector2D const & arg0) [constructor]
---
>     ## vector.h (module 'core'): ns3::Vector2D::Vector2D(ns3::Vector2D const & arg0) [copy constructor]
2810,2814d1764
<     ## vector.h (module 'core'): double ns3::Vector2D::GetLength() const [member function]
<     cls.add_method('GetLength', 
<                    'double', 
<                    [], 
<                    is_const=True)
2823,2831c1773
<     cls.add_binary_comparison_operator('<')
<     cls.add_binary_numeric_operator('-', root_module['ns3::Vector3D'], root_module['ns3::Vector3D'], param('ns3::Vector3D const &', 'right'))
<     cls.add_binary_numeric_operator('+', root_module['ns3::Vector3D'], root_module['ns3::Vector3D'], param('ns3::Vector3D const &', 'right'))
<     cls.add_binary_comparison_operator('!=')
<     cls.add_binary_comparison_operator('==')
<     cls.add_binary_comparison_operator('>=')
<     cls.add_binary_comparison_operator('>')
<     cls.add_binary_comparison_operator('<=')
<     ## vector.h (module 'core'): ns3::Vector3D::Vector3D(ns3::Vector3D const & arg0) [constructor]
---
>     ## vector.h (module 'core'): ns3::Vector3D::Vector3D(ns3::Vector3D const & arg0) [copy constructor]
2837,2841d1778
<     ## vector.h (module 'core'): double ns3::Vector3D::GetLength() const [member function]
<     cls.add_method('GetLength', 
<                    'double', 
<                    [], 
<                    is_const=True)
2853c1790
<     ## empty.h (module 'core'): ns3::empty::empty(ns3::empty const & arg0) [constructor]
---
>     ## empty.h (module 'core'): ns3::empty::empty(ns3::empty const & arg0) [copy constructor]
2858,2862c1795,1801
<     cls.add_binary_numeric_operator('*', root_module['ns3::Time'], root_module['ns3::int64x64_t'], param('ns3::Time const &', 'right'))
<     cls.add_binary_numeric_operator('+', root_module['ns3::int64x64_t'], root_module['ns3::int64x64_t'], param('ns3::int64x64_t const &', 'right'))
<     cls.add_binary_numeric_operator('-', root_module['ns3::int64x64_t'], root_module['ns3::int64x64_t'], param('ns3::int64x64_t const &', 'right'))
<     cls.add_binary_numeric_operator('*', root_module['ns3::int64x64_t'], root_module['ns3::int64x64_t'], param('ns3::int64x64_t const &', 'right'))
<     cls.add_binary_numeric_operator('/', root_module['ns3::int64x64_t'], root_module['ns3::int64x64_t'], param('ns3::int64x64_t const &', 'right'))
---
>     cls.add_binary_numeric_operator('*', root_module['ns3::int64x64_t'], root_module['ns3::int64x64_t'], param('ns3::int64x64_t const &', u'right'))
>     cls.add_binary_numeric_operator('+', root_module['ns3::int64x64_t'], root_module['ns3::int64x64_t'], param('ns3::int64x64_t const &', u'right'))
>     cls.add_binary_numeric_operator('-', root_module['ns3::int64x64_t'], root_module['ns3::int64x64_t'], param('ns3::int64x64_t const &', u'right'))
>     cls.add_unary_numeric_operator('-')
>     cls.add_binary_numeric_operator('/', root_module['ns3::int64x64_t'], root_module['ns3::int64x64_t'], param('ns3::int64x64_t const &', u'right'))
>     cls.add_binary_comparison_operator('<')
>     cls.add_binary_comparison_operator('>')
2864,2865c1803,1806
<     cls.add_binary_comparison_operator('<=')
<     cls.add_binary_comparison_operator('>=')
---
>     cls.add_inplace_numeric_operator('*=', param('ns3::int64x64_t const &', u'right'))
>     cls.add_inplace_numeric_operator('+=', param('ns3::int64x64_t const &', u'right'))
>     cls.add_inplace_numeric_operator('-=', param('ns3::int64x64_t const &', u'right'))
>     cls.add_inplace_numeric_operator('/=', param('ns3::int64x64_t const &', u'right'))
2866a1808
>     cls.add_binary_comparison_operator('<=')
2868,2875c1810,1811
<     cls.add_binary_comparison_operator('<')
<     cls.add_binary_comparison_operator('>')
<     cls.add_inplace_numeric_operator('+=', param('ns3::int64x64_t const &', 'right'))
<     cls.add_inplace_numeric_operator('-=', param('ns3::int64x64_t const &', 'right'))
<     cls.add_inplace_numeric_operator('*=', param('ns3::int64x64_t const &', 'right'))
<     cls.add_inplace_numeric_operator('/=', param('ns3::int64x64_t const &', 'right'))
<     cls.add_unary_numeric_operator('-')
<     ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t() [constructor]
---
>     cls.add_binary_comparison_operator('>=')
>     ## int64x64-double.h (module 'core'): ns3::int64x64_t::int64x64_t() [constructor]
2877,2895c1813,1831
<     ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t(double const value) [constructor]
<     cls.add_constructor([param('double const', 'value')])
<     ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t(long double const value) [constructor]
<     cls.add_constructor([param('long double const', 'value')])
<     ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t(int const v) [constructor]
<     cls.add_constructor([param('int const', 'v')])
<     ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t(long int const v) [constructor]
<     cls.add_constructor([param('long int const', 'v')])
<     ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t(long long int const v) [constructor]
<     cls.add_constructor([param('long long int const', 'v')])
<     ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t(unsigned int const v) [constructor]
<     cls.add_constructor([param('unsigned int const', 'v')])
<     ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t(long unsigned int const v) [constructor]
<     cls.add_constructor([param('long unsigned int const', 'v')])
<     ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t(long long unsigned int const v) [constructor]
<     cls.add_constructor([param('long long unsigned int const', 'v')])
<     ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t(int64_t const hi, uint64_t const lo) [constructor]
<     cls.add_constructor([param('int64_t const', 'hi'), param('uint64_t const', 'lo')])
<     ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t(ns3::int64x64_t const & o) [constructor]
---
>     ## int64x64-double.h (module 'core'): ns3::int64x64_t::int64x64_t(double v) [constructor]
>     cls.add_constructor([param('double', 'v')])
>     ## int64x64-double.h (module 'core'): ns3::int64x64_t::int64x64_t(long double v) [constructor]
>     cls.add_constructor([param('long double', 'v')])
>     ## int64x64-double.h (module 'core'): ns3::int64x64_t::int64x64_t(int v) [constructor]
>     cls.add_constructor([param('int', 'v')])
>     ## int64x64-double.h (module 'core'): ns3::int64x64_t::int64x64_t(long int v) [constructor]
>     cls.add_constructor([param('long int', 'v')])
>     ## int64x64-double.h (module 'core'): ns3::int64x64_t::int64x64_t(long long int v) [constructor]
>     cls.add_constructor([param('long long int', 'v')])
>     ## int64x64-double.h (module 'core'): ns3::int64x64_t::int64x64_t(unsigned int v) [constructor]
>     cls.add_constructor([param('unsigned int', 'v')])
>     ## int64x64-double.h (module 'core'): ns3::int64x64_t::int64x64_t(long unsigned int v) [constructor]
>     cls.add_constructor([param('long unsigned int', 'v')])
>     ## int64x64-double.h (module 'core'): ns3::int64x64_t::int64x64_t(long long unsigned int v) [constructor]
>     cls.add_constructor([param('long long unsigned int', 'v')])
>     ## int64x64-double.h (module 'core'): ns3::int64x64_t::int64x64_t(int64_t hi, uint64_t lo) [constructor]
>     cls.add_constructor([param('int64_t', 'hi'), param('uint64_t', 'lo')])
>     ## int64x64-double.h (module 'core'): ns3::int64x64_t::int64x64_t(ns3::int64x64_t const & o) [copy constructor]
2897c1833
<     ## int64x64-128.h (module 'core'): double ns3::int64x64_t::GetDouble() const [member function]
---
>     ## int64x64-double.h (module 'core'): double ns3::int64x64_t::GetDouble() const [member function]
2902c1838
<     ## int64x64-128.h (module 'core'): int64_t ns3::int64x64_t::GetHigh() const [member function]
---
>     ## int64x64-double.h (module 'core'): int64_t ns3::int64x64_t::GetHigh() const [member function]
2907c1843
<     ## int64x64-128.h (module 'core'): uint64_t ns3::int64x64_t::GetLow() const [member function]
---
>     ## int64x64-double.h (module 'core'): uint64_t ns3::int64x64_t::GetLow() const [member function]
2912c1848
<     ## int64x64-128.h (module 'core'): static ns3::int64x64_t ns3::int64x64_t::Invert(uint64_t const v) [member function]
---
>     ## int64x64-double.h (module 'core'): static ns3::int64x64_t ns3::int64x64_t::Invert(uint64_t v) [member function]
2915c1851
<                    [param('uint64_t const', 'v')], 
---
>                    [param('uint64_t', 'v')], 
2917c1853
<     ## int64x64-128.h (module 'core'): void ns3::int64x64_t::MulByInvert(ns3::int64x64_t const & o) [member function]
---
>     ## int64x64-double.h (module 'core'): void ns3::int64x64_t::MulByInvert(ns3::int64x64_t const & o) [member function]
2921c1857
<     ## int64x64-128.h (module 'core'): ns3::int64x64_t::implementation [variable]
---
>     ## int64x64-double.h (module 'core'): ns3::int64x64_t::implementation [variable]
2925,2984d1860
< def register_Ns3Chunk_methods(root_module, cls):
<     ## chunk.h (module 'network'): ns3::Chunk::Chunk() [constructor]
<     cls.add_constructor([])
<     ## chunk.h (module 'network'): ns3::Chunk::Chunk(ns3::Chunk const & arg0) [constructor]
<     cls.add_constructor([param('ns3::Chunk const &', 'arg0')])
<     ## chunk.h (module 'network'): uint32_t ns3::Chunk::Deserialize(ns3::Buffer::Iterator start) [member function]
<     cls.add_method('Deserialize', 
<                    'uint32_t', 
<                    [param('ns3::Buffer::Iterator', 'start')], 
<                    is_virtual=True, is_pure_virtual=True)
<     ## chunk.h (module 'network'): uint32_t ns3::Chunk::Deserialize(ns3::Buffer::Iterator start, ns3::Buffer::Iterator end) [member function]
<     cls.add_method('Deserialize', 
<                    'uint32_t', 
<                    [param('ns3::Buffer::Iterator', 'start'), param('ns3::Buffer::Iterator', 'end')], 
<                    is_virtual=True)
<     ## chunk.h (module 'network'): static ns3::TypeId ns3::Chunk::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## chunk.h (module 'network'): void ns3::Chunk::Print(std::ostream & os) const [member function]
<     cls.add_method('Print', 
<                    'void', 
<                    [param('std::ostream &', 'os')], 
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3Header_methods(root_module, cls):
<     cls.add_output_stream_operator()
<     ## header.h (module 'network'): ns3::Header::Header() [constructor]
<     cls.add_constructor([])
<     ## header.h (module 'network'): ns3::Header::Header(ns3::Header const & arg0) [constructor]
<     cls.add_constructor([param('ns3::Header const &', 'arg0')])
<     ## header.h (module 'network'): uint32_t ns3::Header::Deserialize(ns3::Buffer::Iterator start) [member function]
<     cls.add_method('Deserialize', 
<                    'uint32_t', 
<                    [param('ns3::Buffer::Iterator', 'start')], 
<                    is_virtual=True, is_pure_virtual=True)
<     ## header.h (module 'network'): uint32_t ns3::Header::GetSerializedSize() const [member function]
<     cls.add_method('GetSerializedSize', 
<                    'uint32_t', 
<                    [], 
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
<     ## header.h (module 'network'): static ns3::TypeId ns3::Header::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## header.h (module 'network'): void ns3::Header::Print(std::ostream & os) const [member function]
<     cls.add_method('Print', 
<                    'void', 
<                    [param('std::ostream &', 'os')], 
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
<     ## header.h (module 'network'): void ns3::Header::Serialize(ns3::Buffer::Iterator start) const [member function]
<     cls.add_method('Serialize', 
<                    'void', 
<                    [param('ns3::Buffer::Iterator', 'start')], 
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
<     return
< 
3020c1896
<     ## object.h (module 'core'): ns3::Object::Object(ns3::Object const & o) [constructor]
---
>     ## object.h (module 'core'): ns3::Object::Object(ns3::Object const & o) [copy constructor]
3041c1917
<     ## object.h (module 'core'): ns3::Object::AggregateIterator::AggregateIterator(ns3::Object::AggregateIterator const & arg0) [constructor]
---
>     ## object.h (module 'core'): ns3::Object::AggregateIterator::AggregateIterator(ns3::Object::AggregateIterator const & arg0) [copy constructor]
3050c1926
<     ## object.h (module 'core'): ns3::Ptr<const ns3::Object> ns3::Object::AggregateIterator::Next() [member function]
---
>     ## object.h (module 'core'): ns3::Ptr<ns3::Object const> ns3::Object::AggregateIterator::Next() [member function]
3057c1933
<     ## position-allocator.h (module 'mobility'): ns3::PositionAllocator::PositionAllocator(ns3::PositionAllocator const & arg0) [constructor]
---
>     ## position-allocator.h (module 'mobility'): ns3::PositionAllocator::PositionAllocator(ns3::PositionAllocator const & arg0) [copy constructor]
3065c1941
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
3070c1946
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
3107c1983
<                    is_const=True, visibility='private', is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
3112c1988
<                    visibility='private', is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
3116c1992
<     ## position-allocator.h (module 'mobility'): ns3::RandomBoxPositionAllocator::RandomBoxPositionAllocator(ns3::RandomBoxPositionAllocator const & arg0) [constructor]
---
>     ## position-allocator.h (module 'mobility'): ns3::RandomBoxPositionAllocator::RandomBoxPositionAllocator(ns3::RandomBoxPositionAllocator const & arg0) [copy constructor]
3150c2026
<     ## building-position-allocator.h (module 'buildings'): ns3::RandomBuildingPositionAllocator::RandomBuildingPositionAllocator(ns3::RandomBuildingPositionAllocator const & arg0) [constructor]
---
>     ## building-position-allocator.h (module 'buildings'): ns3::RandomBuildingPositionAllocator::RandomBuildingPositionAllocator(ns3::RandomBuildingPositionAllocator const & arg0) [copy constructor]
3172c2048
<     ## position-allocator.h (module 'mobility'): ns3::RandomDiscPositionAllocator::RandomDiscPositionAllocator(ns3::RandomDiscPositionAllocator const & arg0) [constructor]
---
>     ## position-allocator.h (module 'mobility'): ns3::RandomDiscPositionAllocator::RandomDiscPositionAllocator(ns3::RandomDiscPositionAllocator const & arg0) [copy constructor]
3207,3210d2082
<     ## position-allocator.h (module 'mobility'): void ns3::RandomDiscPositionAllocator::SetZ(double z) [member function]
<     cls.add_method('SetZ', 
<                    'void', 
<                    [param('double', 'z')])
3234c2106
<     ## position-allocator.h (module 'mobility'): ns3::RandomRectanglePositionAllocator::RandomRectanglePositionAllocator(ns3::RandomRectanglePositionAllocator const & arg0) [constructor]
---
>     ## position-allocator.h (module 'mobility'): ns3::RandomRectanglePositionAllocator::RandomRectanglePositionAllocator(ns3::RandomRectanglePositionAllocator const & arg0) [copy constructor]
3261,3264d2132
<     ## position-allocator.h (module 'mobility'): void ns3::RandomRectanglePositionAllocator::SetZ(double z) [member function]
<     cls.add_method('SetZ', 
<                    'void', 
<                    [param('double', 'z')])
3268c2136
<     ## building-position-allocator.h (module 'buildings'): ns3::RandomRoomPositionAllocator::RandomRoomPositionAllocator(ns3::RandomRoomPositionAllocator const & arg0) [constructor]
---
>     ## building-position-allocator.h (module 'buildings'): ns3::RandomRoomPositionAllocator::RandomRoomPositionAllocator(ns3::RandomRoomPositionAllocator const & arg0) [copy constructor]
3319c2187
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
3324c2192
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
3353c2221
<     ## building-position-allocator.h (module 'buildings'): ns3::SameRoomPositionAllocator::SameRoomPositionAllocator(ns3::SameRoomPositionAllocator const & arg0) [constructor]
---
>     ## building-position-allocator.h (module 'buildings'): ns3::SameRoomPositionAllocator::SameRoomPositionAllocator(ns3::SameRoomPositionAllocator const & arg0) [copy constructor]
3419c2287
<     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::AttributeAccessor, ns3::empty, ns3::DefaultDeleter<ns3::AttributeAccessor> >::SimpleRefCount(ns3::SimpleRefCount<ns3::AttributeAccessor, ns3::empty, ns3::DefaultDeleter<ns3::AttributeAccessor> > const & o) [constructor]
---
>     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::AttributeAccessor, ns3::empty, ns3::DefaultDeleter<ns3::AttributeAccessor> >::SimpleRefCount(ns3::SimpleRefCount<ns3::AttributeAccessor, ns3::empty, ns3::DefaultDeleter<ns3::AttributeAccessor> > const & o) [copy constructor]
3420a2289,2293
>     ## simple-ref-count.h (module 'core'): static void ns3::SimpleRefCount<ns3::AttributeAccessor, ns3::empty, ns3::DefaultDeleter<ns3::AttributeAccessor> >::Cleanup() [member function]
>     cls.add_method('Cleanup', 
>                    'void', 
>                    [], 
>                    is_static=True)
3426c2299
<     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker> >::SimpleRefCount(ns3::SimpleRefCount<ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker> > const & o) [constructor]
---
>     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker> >::SimpleRefCount(ns3::SimpleRefCount<ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker> > const & o) [copy constructor]
3427a2301,2305
>     ## simple-ref-count.h (module 'core'): static void ns3::SimpleRefCount<ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker> >::Cleanup() [member function]
>     cls.add_method('Cleanup', 
>                    'void', 
>                    [], 
>                    is_static=True)
3433c2311
<     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue> >::SimpleRefCount(ns3::SimpleRefCount<ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue> > const & o) [constructor]
---
>     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue> >::SimpleRefCount(ns3::SimpleRefCount<ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue> > const & o) [copy constructor]
3434a2313,2317
>     ## simple-ref-count.h (module 'core'): static void ns3::SimpleRefCount<ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue> >::Cleanup() [member function]
>     cls.add_method('Cleanup', 
>                    'void', 
>                    [], 
>                    is_static=True)
3440c2323
<     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::CallbackImplBase, ns3::empty, ns3::DefaultDeleter<ns3::CallbackImplBase> >::SimpleRefCount(ns3::SimpleRefCount<ns3::CallbackImplBase, ns3::empty, ns3::DefaultDeleter<ns3::CallbackImplBase> > const & o) [constructor]
---
>     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::CallbackImplBase, ns3::empty, ns3::DefaultDeleter<ns3::CallbackImplBase> >::SimpleRefCount(ns3::SimpleRefCount<ns3::CallbackImplBase, ns3::empty, ns3::DefaultDeleter<ns3::CallbackImplBase> > const & o) [copy constructor]
3441a2325,2329
>     ## simple-ref-count.h (module 'core'): static void ns3::SimpleRefCount<ns3::CallbackImplBase, ns3::empty, ns3::DefaultDeleter<ns3::CallbackImplBase> >::Cleanup() [member function]
>     cls.add_method('Cleanup', 
>                    'void', 
>                    [], 
>                    is_static=True)
3447c2335
<     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Hash::Implementation, ns3::empty, ns3::DefaultDeleter<ns3::Hash::Implementation> >::SimpleRefCount(ns3::SimpleRefCount<ns3::Hash::Implementation, ns3::empty, ns3::DefaultDeleter<ns3::Hash::Implementation> > const & o) [constructor]
---
>     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Hash::Implementation, ns3::empty, ns3::DefaultDeleter<ns3::Hash::Implementation> >::SimpleRefCount(ns3::SimpleRefCount<ns3::Hash::Implementation, ns3::empty, ns3::DefaultDeleter<ns3::Hash::Implementation> > const & o) [copy constructor]
3448a2337,2341
>     ## simple-ref-count.h (module 'core'): static void ns3::SimpleRefCount<ns3::Hash::Implementation, ns3::empty, ns3::DefaultDeleter<ns3::Hash::Implementation> >::Cleanup() [member function]
>     cls.add_method('Cleanup', 
>                    'void', 
>                    [], 
>                    is_static=True)
3451,3452c2344,2345
< def register_Ns3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt___methods(root_module, cls):
<     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::NixVector, ns3::empty, ns3::DefaultDeleter<ns3::NixVector> >::SimpleRefCount() [constructor]
---
> def register_Ns3SimpleRefCount__Ns3NetDeviceQueue_Ns3Empty_Ns3DefaultDeleter__lt__ns3NetDeviceQueue__gt___methods(root_module, cls):
>     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::NetDeviceQueue, ns3::empty, ns3::DefaultDeleter<ns3::NetDeviceQueue> >::SimpleRefCount() [constructor]
3454,3455c2347,2353
<     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::NixVector, ns3::empty, ns3::DefaultDeleter<ns3::NixVector> >::SimpleRefCount(ns3::SimpleRefCount<ns3::NixVector, ns3::empty, ns3::DefaultDeleter<ns3::NixVector> > const & o) [constructor]
<     cls.add_constructor([param('ns3::SimpleRefCount< ns3::NixVector, ns3::empty, ns3::DefaultDeleter< ns3::NixVector > > const &', 'o')])
---
>     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::NetDeviceQueue, ns3::empty, ns3::DefaultDeleter<ns3::NetDeviceQueue> >::SimpleRefCount(ns3::SimpleRefCount<ns3::NetDeviceQueue, ns3::empty, ns3::DefaultDeleter<ns3::NetDeviceQueue> > const & o) [copy constructor]
>     cls.add_constructor([param('ns3::SimpleRefCount< ns3::NetDeviceQueue, ns3::empty, ns3::DefaultDeleter< ns3::NetDeviceQueue > > const &', 'o')])
>     ## simple-ref-count.h (module 'core'): static void ns3::SimpleRefCount<ns3::NetDeviceQueue, ns3::empty, ns3::DefaultDeleter<ns3::NetDeviceQueue> >::Cleanup() [member function]
>     cls.add_method('Cleanup', 
>                    'void', 
>                    [], 
>                    is_static=True)
3458,3459c2356,2357
< def register_Ns3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt___methods(root_module, cls):
<     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Packet, ns3::empty, ns3::DefaultDeleter<ns3::Packet> >::SimpleRefCount() [constructor]
---
> def register_Ns3SimpleRefCount__Ns3QueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3QueueItem__gt___methods(root_module, cls):
>     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::QueueItem, ns3::empty, ns3::DefaultDeleter<ns3::QueueItem> >::SimpleRefCount() [constructor]
3461,3462c2359,2365
<     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Packet, ns3::empty, ns3::DefaultDeleter<ns3::Packet> >::SimpleRefCount(ns3::SimpleRefCount<ns3::Packet, ns3::empty, ns3::DefaultDeleter<ns3::Packet> > const & o) [constructor]
<     cls.add_constructor([param('ns3::SimpleRefCount< ns3::Packet, ns3::empty, ns3::DefaultDeleter< ns3::Packet > > const &', 'o')])
---
>     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::QueueItem, ns3::empty, ns3::DefaultDeleter<ns3::QueueItem> >::SimpleRefCount(ns3::SimpleRefCount<ns3::QueueItem, ns3::empty, ns3::DefaultDeleter<ns3::QueueItem> > const & o) [copy constructor]
>     cls.add_constructor([param('ns3::SimpleRefCount< ns3::QueueItem, ns3::empty, ns3::DefaultDeleter< ns3::QueueItem > > const &', 'o')])
>     ## simple-ref-count.h (module 'core'): static void ns3::SimpleRefCount<ns3::QueueItem, ns3::empty, ns3::DefaultDeleter<ns3::QueueItem> >::Cleanup() [member function]
>     cls.add_method('Cleanup', 
>                    'void', 
>                    [], 
>                    is_static=True)
3468c2371
<     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::TraceSourceAccessor, ns3::empty, ns3::DefaultDeleter<ns3::TraceSourceAccessor> >::SimpleRefCount(ns3::SimpleRefCount<ns3::TraceSourceAccessor, ns3::empty, ns3::DefaultDeleter<ns3::TraceSourceAccessor> > const & o) [constructor]
---
>     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::TraceSourceAccessor, ns3::empty, ns3::DefaultDeleter<ns3::TraceSourceAccessor> >::SimpleRefCount(ns3::SimpleRefCount<ns3::TraceSourceAccessor, ns3::empty, ns3::DefaultDeleter<ns3::TraceSourceAccessor> > const & o) [copy constructor]
3469a2373,2377
>     ## simple-ref-count.h (module 'core'): static void ns3::SimpleRefCount<ns3::TraceSourceAccessor, ns3::empty, ns3::DefaultDeleter<ns3::TraceSourceAccessor> >::Cleanup() [member function]
>     cls.add_method('Cleanup', 
>                    'void', 
>                    [], 
>                    is_static=True)
3493,3496c2401,2404
<     cls.add_binary_comparison_operator('==')
<     cls.add_binary_comparison_operator('!=')
<     cls.add_binary_comparison_operator('<=')
<     cls.add_binary_comparison_operator('>=')
---
>     cls.add_binary_numeric_operator('*', root_module['ns3::Time'], root_module['ns3::Time'], param('int64_t const &', u'right'))
>     cls.add_binary_numeric_operator('+', root_module['ns3::Time'], root_module['ns3::Time'], param('ns3::Time const &', u'right'))
>     cls.add_binary_numeric_operator('-', root_module['ns3::Time'], root_module['ns3::Time'], param('ns3::Time const &', u'right'))
>     cls.add_binary_numeric_operator('/', root_module['ns3::Time'], root_module['ns3::Time'], param('int64_t const &', u'right'))
3499,3507c2407,2409
<     cls.add_binary_numeric_operator('+', root_module['ns3::Time'], root_module['ns3::Time'], param('ns3::Time const &', 'right'))
<     cls.add_binary_numeric_operator('-', root_module['ns3::Time'], root_module['ns3::Time'], param('ns3::Time const &', 'right'))
<     cls.add_binary_numeric_operator('*', root_module['ns3::Time'], root_module['ns3::Time'], param('int64_t const &', 'right'))
<     cls.add_binary_numeric_operator('*', root_module['ns3::Time'], root_module['ns3::Time'], param('ns3::int64x64_t const &', 'right'))
<     cls.add_binary_numeric_operator('/', root_module['ns3::int64x64_t'], root_module['ns3::Time'], param('ns3::Time const &', 'right'))
<     cls.add_binary_numeric_operator('/', root_module['ns3::Time'], root_module['ns3::Time'], param('int64_t const &', 'right'))
<     cls.add_binary_numeric_operator('/', root_module['ns3::Time'], root_module['ns3::Time'], param('ns3::int64x64_t const &', 'right'))
<     cls.add_inplace_numeric_operator('+=', param('ns3::Time const &', 'right'))
<     cls.add_inplace_numeric_operator('-=', param('ns3::Time const &', 'right'))
---
>     cls.add_binary_comparison_operator('!=')
>     cls.add_inplace_numeric_operator('+=', param('ns3::Time const &', u'right'))
>     cls.add_inplace_numeric_operator('-=', param('ns3::Time const &', u'right'))
3508a2411,2413
>     cls.add_binary_comparison_operator('<=')
>     cls.add_binary_comparison_operator('==')
>     cls.add_binary_comparison_operator('>=')
3511c2416
<     ## nstime.h (module 'core'): ns3::Time::Time(ns3::Time const & o) [constructor]
---
>     ## nstime.h (module 'core'): ns3::Time::Time(ns3::Time const & o) [copy constructor]
3694c2599
<     ## trace-source-accessor.h (module 'core'): ns3::TraceSourceAccessor::TraceSourceAccessor(ns3::TraceSourceAccessor const & arg0) [constructor]
---
>     ## trace-source-accessor.h (module 'core'): ns3::TraceSourceAccessor::TraceSourceAccessor(ns3::TraceSourceAccessor const & arg0) [copy constructor]
3702c2607
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
3707c2612
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
3712c2617
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
3717,3755c2622
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3Trailer_methods(root_module, cls):
<     cls.add_output_stream_operator()
<     ## trailer.h (module 'network'): ns3::Trailer::Trailer() [constructor]
<     cls.add_constructor([])
<     ## trailer.h (module 'network'): ns3::Trailer::Trailer(ns3::Trailer const & arg0) [constructor]
<     cls.add_constructor([param('ns3::Trailer const &', 'arg0')])
<     ## trailer.h (module 'network'): uint32_t ns3::Trailer::Deserialize(ns3::Buffer::Iterator end) [member function]
<     cls.add_method('Deserialize', 
<                    'uint32_t', 
<                    [param('ns3::Buffer::Iterator', 'end')], 
<                    is_virtual=True, is_pure_virtual=True)
<     ## trailer.h (module 'network'): uint32_t ns3::Trailer::Deserialize(ns3::Buffer::Iterator start, ns3::Buffer::Iterator end) [member function]
<     cls.add_method('Deserialize', 
<                    'uint32_t', 
<                    [param('ns3::Buffer::Iterator', 'start'), param('ns3::Buffer::Iterator', 'end')], 
<                    is_virtual=True)
<     ## trailer.h (module 'network'): uint32_t ns3::Trailer::GetSerializedSize() const [member function]
<     cls.add_method('GetSerializedSize', 
<                    'uint32_t', 
<                    [], 
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
<     ## trailer.h (module 'network'): static ns3::TypeId ns3::Trailer::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## trailer.h (module 'network'): void ns3::Trailer::Print(std::ostream & os) const [member function]
<     cls.add_method('Print', 
<                    'void', 
<                    [param('std::ostream &', 'os')], 
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
<     ## trailer.h (module 'network'): void ns3::Trailer::Serialize(ns3::Buffer::Iterator start) const [member function]
<     cls.add_method('Serialize', 
<                    'void', 
<                    [param('ns3::Buffer::Iterator', 'start')], 
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
3853c2720
<     ## position-allocator.h (module 'mobility'): ns3::UniformDiscPositionAllocator::UniformDiscPositionAllocator(ns3::UniformDiscPositionAllocator const & arg0) [constructor]
---
>     ## position-allocator.h (module 'mobility'): ns3::UniformDiscPositionAllocator::UniformDiscPositionAllocator(ns3::UniformDiscPositionAllocator const & arg0) [copy constructor]
3884,3887d2750
<     ## position-allocator.h (module 'mobility'): void ns3::UniformDiscPositionAllocator::SetZ(double z) [member function]
<     cls.add_method('SetZ', 
<                    'void', 
<                    [param('double', 'z')])
4043c2906
<     ## attribute.h (module 'core'): ns3::AttributeAccessor::AttributeAccessor(ns3::AttributeAccessor const & arg0) [constructor]
---
>     ## attribute.h (module 'core'): ns3::AttributeAccessor::AttributeAccessor(ns3::AttributeAccessor const & arg0) [copy constructor]
4051c2914
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
4056c2919
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
4061c2924
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
4066c2929
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
4070c2933
<     ## attribute.h (module 'core'): ns3::AttributeChecker::AttributeChecker(ns3::AttributeChecker const & arg0) [constructor]
---
>     ## attribute.h (module 'core'): ns3::AttributeChecker::AttributeChecker(ns3::AttributeChecker const & arg0) [copy constructor]
4078c2941
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
4083c2946
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
4088c2951
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
4098c2961
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
4103c2966
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
4108c2971
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
4112c2975
<     ## attribute.h (module 'core'): ns3::AttributeValue::AttributeValue(ns3::AttributeValue const & arg0) [constructor]
---
>     ## attribute.h (module 'core'): ns3::AttributeValue::AttributeValue(ns3::AttributeValue const & arg0) [copy constructor]
4120,4121c2983,2984
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
<     ## attribute.h (module 'core'): bool ns3::AttributeValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
>     ## attribute.h (module 'core'): bool ns3::AttributeValue::DeserializeFromString(std::string value, ns3::Ptr<ns3::AttributeChecker const> checker) [member function]
4125,4126c2988,2989
<                    is_virtual=True, is_pure_virtual=True)
<     ## attribute.h (module 'core'): std::string ns3::AttributeValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
---
>                    is_pure_virtual=True, is_virtual=True)
>     ## attribute.h (module 'core'): std::string ns3::AttributeValue::SerializeToString(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
4130c2993
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
4136c2999
<     ## box.h (module 'mobility'): ns3::BoxChecker::BoxChecker(ns3::BoxChecker const & arg0) [constructor]
---
>     ## box.h (module 'mobility'): ns3::BoxChecker::BoxChecker(ns3::BoxChecker const & arg0) [copy constructor]
4142a3006,3007
>     ## box.h (module 'mobility'): ns3::BoxValue::BoxValue(ns3::BoxValue const & arg0) [copy constructor]
>     cls.add_constructor([param('ns3::BoxValue const &', 'arg0')])
4145,4146d3009
<     ## box.h (module 'mobility'): ns3::BoxValue::BoxValue(ns3::BoxValue const & arg0) [constructor]
<     cls.add_constructor([param('ns3::BoxValue const &', 'arg0')])
4152c3015
<     ## box.h (module 'mobility'): bool ns3::BoxValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
---
>     ## box.h (module 'mobility'): bool ns3::BoxValue::DeserializeFromString(std::string value, ns3::Ptr<ns3::AttributeChecker const> checker) [member function]
4162c3025
<     ## box.h (module 'mobility'): std::string ns3::BoxValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
---
>     ## box.h (module 'mobility'): std::string ns3::BoxValue::SerializeToString(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
4174c3037
<     ## building.h (module 'buildings'): ns3::Building::Building(ns3::Building const & arg0) [constructor]
---
>     ## building.h (module 'buildings'): ns3::Building::Building(ns3::Building const & arg0) [copy constructor]
4203c3066
<                    [param('ns3::Vector3D', 'position')], 
---
>                    [param('ns3::Vector', 'position')], 
4228c3091
<                    [param('ns3::Vector3D', 'position')], 
---
>                    [param('ns3::Vector', 'position')], 
4233c3096
<                    [param('ns3::Vector3D', 'position')], 
---
>                    [param('ns3::Vector', 'position')], 
4243,4248c3106
<                    [param('ns3::Vector3D', 'position')], 
<                    is_const=True)
<     ## building.h (module 'buildings'): bool ns3::Building::IsIntersect(ns3::Vector const & l1, ns3::Vector const & l2) const [member function]
<     cls.add_method('IsIntersect', 
<                    'bool', 
<                    [param('ns3::Vector const &', 'l1'), param('ns3::Vector const &', 'l2')], 
---
>                    [param('ns3::Vector', 'position')], 
4288c3146
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
4329c3187
<     ## callback.h (module 'core'): ns3::CallbackChecker::CallbackChecker(ns3::CallbackChecker const & arg0) [constructor]
---
>     ## callback.h (module 'core'): ns3::CallbackChecker::CallbackChecker(ns3::CallbackChecker const & arg0) [copy constructor]
4336c3194
<     ## callback.h (module 'core'): ns3::CallbackImplBase::CallbackImplBase(ns3::CallbackImplBase const & arg0) [constructor]
---
>     ## callback.h (module 'core'): ns3::CallbackImplBase::CallbackImplBase(ns3::CallbackImplBase const & arg0) [copy constructor]
4342,4343c3200,3201
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
<     ## callback.h (module 'core'): bool ns3::CallbackImplBase::IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other) const [member function]
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
>     ## callback.h (module 'core'): bool ns3::CallbackImplBase::IsEqual(ns3::Ptr<ns3::CallbackImplBase const> other) const [member function]
4347c3205
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
4352,4392c3210
<                    visibility='protected', is_static=True)
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    visibility='protected', is_static=True, template_parameters=['ns3::ObjectBase*'])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    visibility='protected', is_static=True, template_parameters=['void'])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    visibility='protected', is_static=True, template_parameters=['ns3::Ptr<ns3::NetDevice> '])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    visibility='protected', is_static=True, template_parameters=['ns3::Ptr<ns3::Packet const> '])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    visibility='protected', is_static=True, template_parameters=['unsigned short'])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    visibility='protected', is_static=True, template_parameters=['ns3::Address const&'])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    visibility='protected', is_static=True, template_parameters=['ns3::NetDevice::PacketType'])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    visibility='protected', is_static=True, template_parameters=['ns3::Ptr<ns3::MobilityModel const> '])
---
>                    is_static=True, visibility='protected')
4396c3214
<     ## callback.h (module 'core'): ns3::CallbackValue::CallbackValue(ns3::CallbackValue const & arg0) [constructor]
---
>     ## callback.h (module 'core'): ns3::CallbackValue::CallbackValue(ns3::CallbackValue const & arg0) [copy constructor]
4407c3225
<     ## callback.h (module 'core'): bool ns3::CallbackValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
---
>     ## callback.h (module 'core'): bool ns3::CallbackValue::DeserializeFromString(std::string value, ns3::Ptr<ns3::AttributeChecker const> checker) [member function]
4412c3230
<     ## callback.h (module 'core'): std::string ns3::CallbackValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
---
>     ## callback.h (module 'core'): std::string ns3::CallbackValue::SerializeToString(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
4423,4463d3240
< def register_Ns3ChannelCondition_methods(root_module, cls):
<     ## channel-condition-model.h (module 'propagation'): ns3::ChannelCondition::ChannelCondition(ns3::ChannelCondition const & arg0) [constructor]
<     cls.add_constructor([param('ns3::ChannelCondition const &', 'arg0')])
<     ## channel-condition-model.h (module 'propagation'): ns3::ChannelCondition::ChannelCondition() [constructor]
<     cls.add_constructor([])
<     ## channel-condition-model.h (module 'propagation'): ns3::ChannelCondition::LosConditionValue ns3::ChannelCondition::GetLosCondition() const [member function]
<     cls.add_method('GetLosCondition', 
<                    'ns3::ChannelCondition::LosConditionValue', 
<                    [], 
<                    is_const=True)
<     ## channel-condition-model.h (module 'propagation'): static ns3::TypeId ns3::ChannelCondition::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## channel-condition-model.h (module 'propagation'): void ns3::ChannelCondition::SetLosCondition(ns3::ChannelCondition::LosConditionValue losCondition) [member function]
<     cls.add_method('SetLosCondition', 
<                    'void', 
<                    [param('ns3::ChannelCondition::LosConditionValue', 'losCondition')])
<     return
< 
< def register_Ns3ChannelConditionModel_methods(root_module, cls):
<     ## channel-condition-model.h (module 'propagation'): static ns3::TypeId ns3::ChannelConditionModel::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## channel-condition-model.h (module 'propagation'): ns3::ChannelConditionModel::ChannelConditionModel() [constructor]
<     cls.add_constructor([])
<     ## channel-condition-model.h (module 'propagation'): ns3::Ptr<ns3::ChannelCondition> ns3::ChannelConditionModel::GetChannelCondition(ns3::Ptr<const ns3::MobilityModel> a, ns3::Ptr<const ns3::MobilityModel> b) const [member function]
<     cls.add_method('GetChannelCondition', 
<                    'ns3::Ptr< ns3::ChannelCondition >', 
<                    [param('ns3::Ptr< ns3::MobilityModel const >', 'a'), param('ns3::Ptr< ns3::MobilityModel const >', 'b')], 
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
<     ## channel-condition-model.h (module 'propagation'): int64_t ns3::ChannelConditionModel::AssignStreams(int64_t stream) [member function]
<     cls.add_method('AssignStreams', 
<                    'int64_t', 
<                    [param('int64_t', 'stream')], 
<                    is_virtual=True, is_pure_virtual=True)
<     return
< 
4505c3282
<     ## random-variable-stream.h (module 'core'): void ns3::DeterministicRandomVariable::SetValueArray(double * values, std::size_t length) [member function]
---
>     ## random-variable-stream.h (module 'core'): void ns3::DeterministicRandomVariable::SetValueArray(double * values, uint64_t length) [member function]
4508c3285
<                    [param('double *', 'values'), param('std::size_t', 'length')])
---
>                    [param('double *', 'values'), param('uint64_t', 'length')])
4556c3333
<     ## attribute.h (module 'core'): ns3::EmptyAttributeAccessor::EmptyAttributeAccessor(ns3::EmptyAttributeAccessor const & arg0) [constructor]
---
>     ## attribute.h (module 'core'): ns3::EmptyAttributeAccessor::EmptyAttributeAccessor(ns3::EmptyAttributeAccessor const & arg0) [copy constructor]
4583c3360
<     ## attribute.h (module 'core'): ns3::EmptyAttributeChecker::EmptyAttributeChecker(ns3::EmptyAttributeChecker const & arg0) [constructor]
---
>     ## attribute.h (module 'core'): ns3::EmptyAttributeChecker::EmptyAttributeChecker(ns3::EmptyAttributeChecker const & arg0) [copy constructor]
4620c3397
<     ## attribute.h (module 'core'): ns3::EmptyAttributeValue::EmptyAttributeValue(ns3::EmptyAttributeValue const & arg0) [constructor]
---
>     ## attribute.h (module 'core'): ns3::EmptyAttributeValue::EmptyAttributeValue(ns3::EmptyAttributeValue const & arg0) [copy constructor]
4629c3406
<     ## attribute.h (module 'core'): bool ns3::EmptyAttributeValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
---
>     ## attribute.h (module 'core'): bool ns3::EmptyAttributeValue::DeserializeFromString(std::string value, ns3::Ptr<ns3::AttributeChecker const> checker) [member function]
4634c3411
<     ## attribute.h (module 'core'): std::string ns3::EmptyAttributeValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
---
>     ## attribute.h (module 'core'): std::string ns3::EmptyAttributeValue::SerializeToString(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
4718c3495
<     ## building-position-allocator.h (module 'buildings'): ns3::FixedRoomPositionAllocator::FixedRoomPositionAllocator(ns3::FixedRoomPositionAllocator const & arg0) [constructor]
---
>     ## building-position-allocator.h (module 'buildings'): ns3::FixedRoomPositionAllocator::FixedRoomPositionAllocator(ns3::FixedRoomPositionAllocator const & arg0) [copy constructor]
4849c3626
<     ## building-allocator.h (module 'buildings'): ns3::GridBuildingAllocator::GridBuildingAllocator(ns3::GridBuildingAllocator const & arg0) [constructor]
---
>     ## building-allocator.h (module 'buildings'): ns3::GridBuildingAllocator::GridBuildingAllocator(ns3::GridBuildingAllocator const & arg0) [copy constructor]
4870c3647
<     ## position-allocator.h (module 'mobility'): ns3::GridPositionAllocator::GridPositionAllocator(ns3::GridPositionAllocator const & arg0) [constructor]
---
>     ## position-allocator.h (module 'mobility'): ns3::GridPositionAllocator::GridPositionAllocator(ns3::GridPositionAllocator const & arg0) [copy constructor]
4943,4946d3719
<     ## position-allocator.h (module 'mobility'): void ns3::GridPositionAllocator::SetZ(double z) [member function]
<     cls.add_method('SetZ', 
<                    'void', 
<                    [param('double', 'z')])
4983c3756
<     ## ipv4-address.h (module 'network'): ns3::Ipv4AddressChecker::Ipv4AddressChecker(ns3::Ipv4AddressChecker const & arg0) [constructor]
---
>     ## ipv4-address.h (module 'network'): ns3::Ipv4AddressChecker::Ipv4AddressChecker(ns3::Ipv4AddressChecker const & arg0) [copy constructor]
4989a3763,3764
>     ## ipv4-address.h (module 'network'): ns3::Ipv4AddressValue::Ipv4AddressValue(ns3::Ipv4AddressValue const & arg0) [copy constructor]
>     cls.add_constructor([param('ns3::Ipv4AddressValue const &', 'arg0')])
4992,4993d3766
<     ## ipv4-address.h (module 'network'): ns3::Ipv4AddressValue::Ipv4AddressValue(ns3::Ipv4AddressValue const & arg0) [constructor]
<     cls.add_constructor([param('ns3::Ipv4AddressValue const &', 'arg0')])
4999c3772
<     ## ipv4-address.h (module 'network'): bool ns3::Ipv4AddressValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
---
>     ## ipv4-address.h (module 'network'): bool ns3::Ipv4AddressValue::DeserializeFromString(std::string value, ns3::Ptr<ns3::AttributeChecker const> checker) [member function]
5009c3782
<     ## ipv4-address.h (module 'network'): std::string ns3::Ipv4AddressValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
---
>     ## ipv4-address.h (module 'network'): std::string ns3::Ipv4AddressValue::SerializeToString(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
5023c3796
<     ## ipv4-address.h (module 'network'): ns3::Ipv4MaskChecker::Ipv4MaskChecker(ns3::Ipv4MaskChecker const & arg0) [constructor]
---
>     ## ipv4-address.h (module 'network'): ns3::Ipv4MaskChecker::Ipv4MaskChecker(ns3::Ipv4MaskChecker const & arg0) [copy constructor]
5029a3803,3804
>     ## ipv4-address.h (module 'network'): ns3::Ipv4MaskValue::Ipv4MaskValue(ns3::Ipv4MaskValue const & arg0) [copy constructor]
>     cls.add_constructor([param('ns3::Ipv4MaskValue const &', 'arg0')])
5032,5033d3806
<     ## ipv4-address.h (module 'network'): ns3::Ipv4MaskValue::Ipv4MaskValue(ns3::Ipv4MaskValue const & arg0) [constructor]
<     cls.add_constructor([param('ns3::Ipv4MaskValue const &', 'arg0')])
5039c3812
<     ## ipv4-address.h (module 'network'): bool ns3::Ipv4MaskValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
---
>     ## ipv4-address.h (module 'network'): bool ns3::Ipv4MaskValue::DeserializeFromString(std::string value, ns3::Ptr<ns3::AttributeChecker const> checker) [member function]
5049c3822
<     ## ipv4-address.h (module 'network'): std::string ns3::Ipv4MaskValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
---
>     ## ipv4-address.h (module 'network'): std::string ns3::Ipv4MaskValue::SerializeToString(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
5063c3836
<     ## ipv6-address.h (module 'network'): ns3::Ipv6AddressChecker::Ipv6AddressChecker(ns3::Ipv6AddressChecker const & arg0) [constructor]
---
>     ## ipv6-address.h (module 'network'): ns3::Ipv6AddressChecker::Ipv6AddressChecker(ns3::Ipv6AddressChecker const & arg0) [copy constructor]
5069a3843,3844
>     ## ipv6-address.h (module 'network'): ns3::Ipv6AddressValue::Ipv6AddressValue(ns3::Ipv6AddressValue const & arg0) [copy constructor]
>     cls.add_constructor([param('ns3::Ipv6AddressValue const &', 'arg0')])
5072,5073d3846
<     ## ipv6-address.h (module 'network'): ns3::Ipv6AddressValue::Ipv6AddressValue(ns3::Ipv6AddressValue const & arg0) [constructor]
<     cls.add_constructor([param('ns3::Ipv6AddressValue const &', 'arg0')])
5079c3852
<     ## ipv6-address.h (module 'network'): bool ns3::Ipv6AddressValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
---
>     ## ipv6-address.h (module 'network'): bool ns3::Ipv6AddressValue::DeserializeFromString(std::string value, ns3::Ptr<ns3::AttributeChecker const> checker) [member function]
5089c3862
<     ## ipv6-address.h (module 'network'): std::string ns3::Ipv6AddressValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
---
>     ## ipv6-address.h (module 'network'): std::string ns3::Ipv6AddressValue::SerializeToString(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
5103c3876
<     ## ipv6-address.h (module 'network'): ns3::Ipv6PrefixChecker::Ipv6PrefixChecker(ns3::Ipv6PrefixChecker const & arg0) [constructor]
---
>     ## ipv6-address.h (module 'network'): ns3::Ipv6PrefixChecker::Ipv6PrefixChecker(ns3::Ipv6PrefixChecker const & arg0) [copy constructor]
5109a3883,3884
>     ## ipv6-address.h (module 'network'): ns3::Ipv6PrefixValue::Ipv6PrefixValue(ns3::Ipv6PrefixValue const & arg0) [copy constructor]
>     cls.add_constructor([param('ns3::Ipv6PrefixValue const &', 'arg0')])
5112,5113d3886
<     ## ipv6-address.h (module 'network'): ns3::Ipv6PrefixValue::Ipv6PrefixValue(ns3::Ipv6PrefixValue const & arg0) [constructor]
<     cls.add_constructor([param('ns3::Ipv6PrefixValue const &', 'arg0')])
5119c3892
<     ## ipv6-address.h (module 'network'): bool ns3::Ipv6PrefixValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
---
>     ## ipv6-address.h (module 'network'): bool ns3::Ipv6PrefixValue::DeserializeFromString(std::string value, ns3::Ptr<ns3::AttributeChecker const> checker) [member function]
5129c3902
<     ## ipv6-address.h (module 'network'): std::string ns3::Ipv6PrefixValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
---
>     ## ipv6-address.h (module 'network'): std::string ns3::Ipv6PrefixValue::SerializeToString(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
5140a3914,3915
>     ## itu-r-1238-propagation-loss-model.h (module 'buildings'): ns3::ItuR1238PropagationLossModel::ItuR1238PropagationLossModel() [constructor]
>     cls.add_constructor([])
5151,5152d3925
<     ## itu-r-1238-propagation-loss-model.h (module 'buildings'): ns3::ItuR1238PropagationLossModel::ItuR1238PropagationLossModel() [constructor]
<     cls.add_constructor([])
5166c3939
<     ## position-allocator.h (module 'mobility'): ns3::ListPositionAllocator::ListPositionAllocator(ns3::ListPositionAllocator const & arg0) [constructor]
---
>     ## position-allocator.h (module 'mobility'): ns3::ListPositionAllocator::ListPositionAllocator(ns3::ListPositionAllocator const & arg0) [copy constructor]
5173c3946
<                    [param('ns3::Vector3D', 'v')])
---
>                    [param('ns3::Vector', 'v')])
5184,5188d3956
<     ## position-allocator.h (module 'mobility'): uint32_t ns3::ListPositionAllocator::GetSize() const [member function]
<     cls.add_method('GetSize', 
<                    'uint32_t', 
<                    [], 
<                    is_const=True)
5267,5306d4034
< def register_Ns3Mac48AddressChecker_methods(root_module, cls):
<     ## mac48-address.h (module 'network'): ns3::Mac48AddressChecker::Mac48AddressChecker() [constructor]
<     cls.add_constructor([])
<     ## mac48-address.h (module 'network'): ns3::Mac48AddressChecker::Mac48AddressChecker(ns3::Mac48AddressChecker const & arg0) [constructor]
<     cls.add_constructor([param('ns3::Mac48AddressChecker const &', 'arg0')])
<     return
< 
< def register_Ns3Mac48AddressValue_methods(root_module, cls):
<     ## mac48-address.h (module 'network'): ns3::Mac48AddressValue::Mac48AddressValue() [constructor]
<     cls.add_constructor([])
<     ## mac48-address.h (module 'network'): ns3::Mac48AddressValue::Mac48AddressValue(ns3::Mac48Address const & value) [constructor]
<     cls.add_constructor([param('ns3::Mac48Address const &', 'value')])
<     ## mac48-address.h (module 'network'): ns3::Mac48AddressValue::Mac48AddressValue(ns3::Mac48AddressValue const & arg0) [constructor]
<     cls.add_constructor([param('ns3::Mac48AddressValue const &', 'arg0')])
<     ## mac48-address.h (module 'network'): ns3::Ptr<ns3::AttributeValue> ns3::Mac48AddressValue::Copy() const [member function]
<     cls.add_method('Copy', 
<                    'ns3::Ptr< ns3::AttributeValue >', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## mac48-address.h (module 'network'): bool ns3::Mac48AddressValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
<     cls.add_method('DeserializeFromString', 
<                    'bool', 
<                    [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
<                    is_virtual=True)
<     ## mac48-address.h (module 'network'): ns3::Mac48Address ns3::Mac48AddressValue::Get() const [member function]
<     cls.add_method('Get', 
<                    'ns3::Mac48Address', 
<                    [], 
<                    is_const=True)
<     ## mac48-address.h (module 'network'): std::string ns3::Mac48AddressValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
<     cls.add_method('SerializeToString', 
<                    'std::string', 
<                    [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
<                    is_const=True, is_virtual=True)
<     ## mac48-address.h (module 'network'): void ns3::Mac48AddressValue::Set(ns3::Mac48Address const & value) [member function]
<     cls.add_method('Set', 
<                    'void', 
<                    [param('ns3::Mac48Address const &', 'value')])
<     return
< 
5336c4064
<     ## mobility-building-info.h (module 'buildings'): ns3::MobilityBuildingInfo::MobilityBuildingInfo(ns3::MobilityBuildingInfo const & arg0) [constructor]
---
>     ## mobility-building-info.h (module 'buildings'): ns3::MobilityBuildingInfo::MobilityBuildingInfo(ns3::MobilityBuildingInfo const & arg0) [copy constructor]
5370,5375c4098
<                    [], 
<                    deprecated=True)
<     ## mobility-building-info.h (module 'buildings'): void ns3::MobilityBuildingInfo::MakeConsistent(ns3::Ptr<ns3::MobilityModel> mm) [member function]
<     cls.add_method('MakeConsistent', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::MobilityModel >', 'mm')])
---
>                    [])
5388,5457d4110
<     ## mobility-building-info.h (module 'buildings'): void ns3::MobilityBuildingInfo::DoInitialize() [member function]
<     cls.add_method('DoInitialize', 
<                    'void', 
<                    [], 
<                    visibility='protected', is_virtual=True)
<     return
< 
< def register_Ns3MobilityModel_methods(root_module, cls):
<     ## mobility-model.h (module 'mobility'): ns3::MobilityModel::MobilityModel(ns3::MobilityModel const & arg0) [constructor]
<     cls.add_constructor([param('ns3::MobilityModel const &', 'arg0')])
<     ## mobility-model.h (module 'mobility'): ns3::MobilityModel::MobilityModel() [constructor]
<     cls.add_constructor([])
<     ## mobility-model.h (module 'mobility'): int64_t ns3::MobilityModel::AssignStreams(int64_t stream) [member function]
<     cls.add_method('AssignStreams', 
<                    'int64_t', 
<                    [param('int64_t', 'stream')])
<     ## mobility-model.h (module 'mobility'): double ns3::MobilityModel::GetDistanceFrom(ns3::Ptr<const ns3::MobilityModel> position) const [member function]
<     cls.add_method('GetDistanceFrom', 
<                    'double', 
<                    [param('ns3::Ptr< ns3::MobilityModel const >', 'position')], 
<                    is_const=True)
<     ## mobility-model.h (module 'mobility'): ns3::Vector ns3::MobilityModel::GetPosition() const [member function]
<     cls.add_method('GetPosition', 
<                    'ns3::Vector', 
<                    [], 
<                    is_const=True)
<     ## mobility-model.h (module 'mobility'): double ns3::MobilityModel::GetRelativeSpeed(ns3::Ptr<const ns3::MobilityModel> other) const [member function]
<     cls.add_method('GetRelativeSpeed', 
<                    'double', 
<                    [param('ns3::Ptr< ns3::MobilityModel const >', 'other')], 
<                    is_const=True)
<     ## mobility-model.h (module 'mobility'): static ns3::TypeId ns3::MobilityModel::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## mobility-model.h (module 'mobility'): ns3::Vector ns3::MobilityModel::GetVelocity() const [member function]
<     cls.add_method('GetVelocity', 
<                    'ns3::Vector', 
<                    [], 
<                    is_const=True)
<     ## mobility-model.h (module 'mobility'): void ns3::MobilityModel::SetPosition(ns3::Vector const & position) [member function]
<     cls.add_method('SetPosition', 
<                    'void', 
<                    [param('ns3::Vector const &', 'position')])
<     ## mobility-model.h (module 'mobility'): void ns3::MobilityModel::NotifyCourseChange() const [member function]
<     cls.add_method('NotifyCourseChange', 
<                    'void', 
<                    [], 
<                    is_const=True, visibility='protected')
<     ## mobility-model.h (module 'mobility'): int64_t ns3::MobilityModel::DoAssignStreams(int64_t start) [member function]
<     cls.add_method('DoAssignStreams', 
<                    'int64_t', 
<                    [param('int64_t', 'start')], 
<                    visibility='private', is_virtual=True)
<     ## mobility-model.h (module 'mobility'): ns3::Vector ns3::MobilityModel::DoGetPosition() const [member function]
<     cls.add_method('DoGetPosition', 
<                    'ns3::Vector', 
<                    [], 
<                    is_const=True, visibility='private', is_virtual=True, is_pure_virtual=True)
<     ## mobility-model.h (module 'mobility'): ns3::Vector ns3::MobilityModel::DoGetVelocity() const [member function]
<     cls.add_method('DoGetVelocity', 
<                    'ns3::Vector', 
<                    [], 
<                    is_const=True, visibility='private', is_virtual=True, is_pure_virtual=True)
<     ## mobility-model.h (module 'mobility'): void ns3::MobilityModel::DoSetPosition(ns3::Vector const & position) [member function]
<     cls.add_method('DoSetPosition', 
<                    'void', 
<                    [param('ns3::Vector const &', 'position')], 
<                    visibility='private', is_virtual=True, is_pure_virtual=True)
5483c4136
<     ## net-device.h (module 'network'): ns3::NetDevice::NetDevice(ns3::NetDevice const & arg0) [constructor]
---
>     ## net-device.h (module 'network'): ns3::NetDevice::NetDevice(ns3::NetDevice const & arg0) [copy constructor]
5489c4142
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
5494c4147
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
5499c4152
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
5504c4157
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
5509c4162
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
5514c4167
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
5519c4172
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
5524c4177
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
5529c4182
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
5539c4192
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
5544c4197
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
5549c4202
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
5554c4207
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
5559c4212
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
5564c4217
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
5569c4222
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
5574c4227
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
5579c4232
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
5584c4237
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
5589c4242
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
5594,5595c4247,4248
<                    is_virtual=True, is_pure_virtual=True)
<     ## net-device.h (module 'network'): void ns3::NetDevice::SetPromiscReceiveCallback(ns3::NetDevice::PromiscReceiveCallback cb) [member function]
---
>                    is_pure_virtual=True, is_virtual=True)
>     ## net-device.h (module 'network'): void ns3::NetDevice::SetPromiscReceiveCallback(ns3::Callback<bool,ns3::Ptr<ns3::NetDevice>,ns3::Ptr<const ns3::Packet>,short unsigned int,const ns3::Address&,const ns3::Address&,ns3::NetDevice::PacketType,ns3::empty,ns3::empty,ns3::empty> cb) [member function]
5598,5600c4251,4253
<                    [param('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >', 'cb')], 
<                    is_virtual=True, is_pure_virtual=True)
<     ## net-device.h (module 'network'): void ns3::NetDevice::SetReceiveCallback(ns3::NetDevice::ReceiveCallback cb) [member function]
---
>                    [param('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, short unsigned int, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >', 'cb')], 
>                    is_pure_virtual=True, is_virtual=True)
>     ## net-device.h (module 'network'): void ns3::NetDevice::SetReceiveCallback(ns3::Callback<bool,ns3::Ptr<ns3::NetDevice>,ns3::Ptr<const ns3::Packet>,short unsigned int,const ns3::Address&,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> cb) [member function]
5603,5604c4256,4257
<                    [param('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'cb')], 
<                    is_virtual=True, is_pure_virtual=True)
---
>                    [param('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, short unsigned int, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'cb')], 
>                    is_pure_virtual=True, is_virtual=True)
5609c4262
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
5612,5618c4265,4268
< def register_Ns3NeverLosChannelConditionModel_methods(root_module, cls):
<     ## channel-condition-model.h (module 'propagation'): static ns3::TypeId ns3::NeverLosChannelConditionModel::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## channel-condition-model.h (module 'propagation'): ns3::NeverLosChannelConditionModel::NeverLosChannelConditionModel() [constructor]
---
> def register_Ns3NetDeviceQueue_methods(root_module, cls):
>     ## net-device.h (module 'network'): ns3::NetDeviceQueue::NetDeviceQueue(ns3::NetDeviceQueue const & arg0) [copy constructor]
>     cls.add_constructor([param('ns3::NetDeviceQueue const &', 'arg0')])
>     ## net-device.h (module 'network'): ns3::NetDeviceQueue::NetDeviceQueue() [constructor]
5620,5628c4270,4313
<     ## channel-condition-model.h (module 'propagation'): ns3::Ptr<ns3::ChannelCondition> ns3::NeverLosChannelConditionModel::GetChannelCondition(ns3::Ptr<const ns3::MobilityModel> a, ns3::Ptr<const ns3::MobilityModel> b) const [member function]
<     cls.add_method('GetChannelCondition', 
<                    'ns3::Ptr< ns3::ChannelCondition >', 
<                    [param('ns3::Ptr< ns3::MobilityModel const >', 'a'), param('ns3::Ptr< ns3::MobilityModel const >', 'b')], 
<                    is_const=True, is_virtual=True)
<     ## channel-condition-model.h (module 'propagation'): int64_t ns3::NeverLosChannelConditionModel::AssignStreams(int64_t stream) [member function]
<     cls.add_method('AssignStreams', 
<                    'int64_t', 
<                    [param('int64_t', 'stream')], 
---
>     ## net-device.h (module 'network'): ns3::Ptr<ns3::QueueLimits> ns3::NetDeviceQueue::GetQueueLimits() [member function]
>     cls.add_method('GetQueueLimits', 
>                    'ns3::Ptr< ns3::QueueLimits >', 
>                    [])
>     ## net-device.h (module 'network'): bool ns3::NetDeviceQueue::IsStopped() const [member function]
>     cls.add_method('IsStopped', 
>                    'bool', 
>                    [], 
>                    is_const=True)
>     ## net-device.h (module 'network'): void ns3::NetDeviceQueue::NotifyQueuedBytes(uint32_t bytes) [member function]
>     cls.add_method('NotifyQueuedBytes', 
>                    'void', 
>                    [param('uint32_t', 'bytes')])
>     ## net-device.h (module 'network'): void ns3::NetDeviceQueue::NotifyTransmittedBytes(uint32_t bytes) [member function]
>     cls.add_method('NotifyTransmittedBytes', 
>                    'void', 
>                    [param('uint32_t', 'bytes')])
>     ## net-device.h (module 'network'): void ns3::NetDeviceQueue::ResetQueueLimits() [member function]
>     cls.add_method('ResetQueueLimits', 
>                    'void', 
>                    [])
>     ## net-device.h (module 'network'): void ns3::NetDeviceQueue::SetQueueLimits(ns3::Ptr<ns3::QueueLimits> ql) [member function]
>     cls.add_method('SetQueueLimits', 
>                    'void', 
>                    [param('ns3::Ptr< ns3::QueueLimits >', 'ql')])
>     ## net-device.h (module 'network'): void ns3::NetDeviceQueue::SetWakeCallback(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> cb) [member function]
>     cls.add_method('SetWakeCallback', 
>                    'void', 
>                    [param('ns3::Callback< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'cb')], 
>                    is_virtual=True)
>     ## net-device.h (module 'network'): void ns3::NetDeviceQueue::Start() [member function]
>     cls.add_method('Start', 
>                    'void', 
>                    [], 
>                    is_virtual=True)
>     ## net-device.h (module 'network'): void ns3::NetDeviceQueue::Stop() [member function]
>     cls.add_method('Stop', 
>                    'void', 
>                    [], 
>                    is_virtual=True)
>     ## net-device.h (module 'network'): void ns3::NetDeviceQueue::Wake() [member function]
>     cls.add_method('Wake', 
>                    'void', 
>                    [], 
5632,5634c4317,4320
< def register_Ns3NixVector_methods(root_module, cls):
<     cls.add_output_stream_operator()
<     ## nix-vector.h (module 'network'): ns3::NixVector::NixVector() [constructor]
---
> def register_Ns3NetDeviceQueueInterface_methods(root_module, cls):
>     ## net-device.h (module 'network'): ns3::NetDeviceQueueInterface::NetDeviceQueueInterface(ns3::NetDeviceQueueInterface const & arg0) [copy constructor]
>     cls.add_constructor([param('ns3::NetDeviceQueueInterface const &', 'arg0')])
>     ## net-device.h (module 'network'): ns3::NetDeviceQueueInterface::NetDeviceQueueInterface() [constructor]
5636,5639c4322,4323
<     ## nix-vector.h (module 'network'): ns3::NixVector::NixVector(ns3::NixVector const & o) [constructor]
<     cls.add_constructor([param('ns3::NixVector const &', 'o')])
<     ## nix-vector.h (module 'network'): void ns3::NixVector::AddNeighborIndex(uint32_t newBits, uint32_t numberOfBits) [member function]
<     cls.add_method('AddNeighborIndex', 
---
>     ## net-device.h (module 'network'): void ns3::NetDeviceQueueInterface::CreateTxQueues() [member function]
>     cls.add_method('CreateTxQueues', 
5641,5649c4325,4328
<                    [param('uint32_t', 'newBits'), param('uint32_t', 'numberOfBits')])
<     ## nix-vector.h (module 'network'): uint32_t ns3::NixVector::BitCount(uint32_t numberOfNeighbors) const [member function]
<     cls.add_method('BitCount', 
<                    'uint32_t', 
<                    [param('uint32_t', 'numberOfNeighbors')], 
<                    is_const=True)
<     ## nix-vector.h (module 'network'): ns3::Ptr<ns3::NixVector> ns3::NixVector::Copy() const [member function]
<     cls.add_method('Copy', 
<                    'ns3::Ptr< ns3::NixVector >', 
---
>                    [])
>     ## net-device.h (module 'network'): uint8_t ns3::NetDeviceQueueInterface::GetNTxQueues() const [member function]
>     cls.add_method('GetNTxQueues', 
>                    'uint8_t', 
5652,5666c4331,4333
<     ## nix-vector.h (module 'network'): uint32_t ns3::NixVector::Deserialize(uint32_t const * buffer, uint32_t size) [member function]
<     cls.add_method('Deserialize', 
<                    'uint32_t', 
<                    [param('uint32_t const *', 'buffer'), param('uint32_t', 'size')])
<     ## nix-vector.h (module 'network'): uint32_t ns3::NixVector::ExtractNeighborIndex(uint32_t numberOfBits) [member function]
<     cls.add_method('ExtractNeighborIndex', 
<                    'uint32_t', 
<                    [param('uint32_t', 'numberOfBits')])
<     ## nix-vector.h (module 'network'): uint32_t ns3::NixVector::GetRemainingBits() [member function]
<     cls.add_method('GetRemainingBits', 
<                    'uint32_t', 
<                    [])
<     ## nix-vector.h (module 'network'): uint32_t ns3::NixVector::GetSerializedSize() const [member function]
<     cls.add_method('GetSerializedSize', 
<                    'uint32_t', 
---
>     ## net-device.h (module 'network'): ns3::Callback<unsigned char, ns3::Ptr<ns3::QueueItem>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> ns3::NetDeviceQueueInterface::GetSelectQueueCallback() const [member function]
>     cls.add_method('GetSelectQueueCallback', 
>                    'ns3::Callback< unsigned char, ns3::Ptr< ns3::QueueItem >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 
5669,5672c4336,4339
<     ## nix-vector.h (module 'network'): uint32_t ns3::NixVector::Serialize(uint32_t * buffer, uint32_t maxSize) const [member function]
<     cls.add_method('Serialize', 
<                    'uint32_t', 
<                    [param('uint32_t *', 'buffer'), param('uint32_t', 'maxSize')], 
---
>     ## net-device.h (module 'network'): ns3::Ptr<ns3::NetDeviceQueue> ns3::NetDeviceQueueInterface::GetTxQueue(uint8_t i) const [member function]
>     cls.add_method('GetTxQueue', 
>                    'ns3::Ptr< ns3::NetDeviceQueue >', 
>                    [param('uint8_t', 'i')], 
5673a4341,4358
>     ## net-device.h (module 'network'): static ns3::TypeId ns3::NetDeviceQueueInterface::GetTypeId() [member function]
>     cls.add_method('GetTypeId', 
>                    'ns3::TypeId', 
>                    [], 
>                    is_static=True)
>     ## net-device.h (module 'network'): void ns3::NetDeviceQueueInterface::SetSelectQueueCallback(ns3::Callback<unsigned char, ns3::Ptr<ns3::QueueItem>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> cb) [member function]
>     cls.add_method('SetSelectQueueCallback', 
>                    'void', 
>                    [param('ns3::Callback< unsigned char, ns3::Ptr< ns3::QueueItem >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'cb')])
>     ## net-device.h (module 'network'): void ns3::NetDeviceQueueInterface::SetTxQueuesN(uint8_t numTxQueues) [member function]
>     cls.add_method('SetTxQueuesN', 
>                    'void', 
>                    [param('uint8_t', 'numTxQueues')])
>     ## net-device.h (module 'network'): void ns3::NetDeviceQueueInterface::DoDispose() [member function]
>     cls.add_method('DoDispose', 
>                    'void', 
>                    [], 
>                    visibility='protected', is_virtual=True)
5677c4362
<     ## node.h (module 'network'): ns3::Node::Node(ns3::Node const & arg0) [constructor]
---
>     ## node.h (module 'network'): ns3::Node::Node(ns3::Node const & arg0) [copy constructor]
5736c4421
<     ## node.h (module 'network'): void ns3::Node::RegisterDeviceAdditionListener(ns3::Node::DeviceAdditionListener listener) [member function]
---
>     ## node.h (module 'network'): void ns3::Node::RegisterDeviceAdditionListener(ns3::Callback<void,ns3::Ptr<ns3::NetDevice>,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> listener) [member function]
5740c4425
<     ## node.h (module 'network'): void ns3::Node::RegisterProtocolHandler(ns3::Node::ProtocolHandler handler, uint16_t protocolType, ns3::Ptr<ns3::NetDevice> device, bool promiscuous=false) [member function]
---
>     ## node.h (module 'network'): void ns3::Node::RegisterProtocolHandler(ns3::Callback<void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<ns3::Packet const>, unsigned short, ns3::Address const&, ns3::Address const&, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty> handler, uint16_t protocolType, ns3::Ptr<ns3::NetDevice> device, bool promiscuous=false) [member function]
5744c4429
<     ## node.h (module 'network'): void ns3::Node::UnregisterDeviceAdditionListener(ns3::Node::DeviceAdditionListener listener) [member function]
---
>     ## node.h (module 'network'): void ns3::Node::UnregisterDeviceAdditionListener(ns3::Callback<void,ns3::Ptr<ns3::NetDevice>,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> listener) [member function]
5748c4433
<     ## node.h (module 'network'): void ns3::Node::UnregisterProtocolHandler(ns3::Node::ProtocolHandler handler) [member function]
---
>     ## node.h (module 'network'): void ns3::Node::UnregisterProtocolHandler(ns3::Callback<void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<ns3::Packet const>, unsigned short, ns3::Address const&, ns3::Address const&, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty> handler) [member function]
5812c4497
<     ## object-factory.h (module 'core'): ns3::ObjectFactoryChecker::ObjectFactoryChecker(ns3::ObjectFactoryChecker const & arg0) [constructor]
---
>     ## object-factory.h (module 'core'): ns3::ObjectFactoryChecker::ObjectFactoryChecker(ns3::ObjectFactoryChecker const & arg0) [copy constructor]
5818a4504,4505
>     ## object-factory.h (module 'core'): ns3::ObjectFactoryValue::ObjectFactoryValue(ns3::ObjectFactoryValue const & arg0) [copy constructor]
>     cls.add_constructor([param('ns3::ObjectFactoryValue const &', 'arg0')])
5821,5822d4507
<     ## object-factory.h (module 'core'): ns3::ObjectFactoryValue::ObjectFactoryValue(ns3::ObjectFactoryValue const & arg0) [constructor]
<     cls.add_constructor([param('ns3::ObjectFactoryValue const &', 'arg0')])
5828c4513
<     ## object-factory.h (module 'core'): bool ns3::ObjectFactoryValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
---
>     ## object-factory.h (module 'core'): bool ns3::ObjectFactoryValue::DeserializeFromString(std::string value, ns3::Ptr<ns3::AttributeChecker const> checker) [member function]
5838c4523
<     ## object-factory.h (module 'core'): std::string ns3::ObjectFactoryValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
---
>     ## object-factory.h (module 'core'): std::string ns3::ObjectFactoryValue::SerializeToString(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
5864,6096d4548
< def register_Ns3OutdoorPositionAllocator_methods(root_module, cls):
<     ## building-position-allocator.h (module 'buildings'): ns3::OutdoorPositionAllocator::OutdoorPositionAllocator(ns3::OutdoorPositionAllocator const & arg0) [constructor]
<     cls.add_constructor([param('ns3::OutdoorPositionAllocator const &', 'arg0')])
<     ## building-position-allocator.h (module 'buildings'): ns3::OutdoorPositionAllocator::OutdoorPositionAllocator() [constructor]
<     cls.add_constructor([])
<     ## building-position-allocator.h (module 'buildings'): int64_t ns3::OutdoorPositionAllocator::AssignStreams(int64_t stream) [member function]
<     cls.add_method('AssignStreams', 
<                    'int64_t', 
<                    [param('int64_t', 'stream')], 
<                    is_virtual=True)
<     ## building-position-allocator.h (module 'buildings'): ns3::Vector ns3::OutdoorPositionAllocator::GetNext() const [member function]
<     cls.add_method('GetNext', 
<                    'ns3::Vector', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## building-position-allocator.h (module 'buildings'): static ns3::TypeId ns3::OutdoorPositionAllocator::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## building-position-allocator.h (module 'buildings'): void ns3::OutdoorPositionAllocator::SetX(ns3::Ptr<ns3::RandomVariableStream> x) [member function]
<     cls.add_method('SetX', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::RandomVariableStream >', 'x')])
<     ## building-position-allocator.h (module 'buildings'): void ns3::OutdoorPositionAllocator::SetY(ns3::Ptr<ns3::RandomVariableStream> y) [member function]
<     cls.add_method('SetY', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::RandomVariableStream >', 'y')])
<     ## building-position-allocator.h (module 'buildings'): void ns3::OutdoorPositionAllocator::SetZ(ns3::Ptr<ns3::RandomVariableStream> z) [member function]
<     cls.add_method('SetZ', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::RandomVariableStream >', 'z')])
<     return
< 
< def register_Ns3Packet_methods(root_module, cls):
<     cls.add_output_stream_operator()
<     ## packet.h (module 'network'): ns3::Packet::Packet() [constructor]
<     cls.add_constructor([])
<     ## packet.h (module 'network'): ns3::Packet::Packet(ns3::Packet const & o) [constructor]
<     cls.add_constructor([param('ns3::Packet const &', 'o')])
<     ## packet.h (module 'network'): ns3::Packet::Packet(uint32_t size) [constructor]
<     cls.add_constructor([param('uint32_t', 'size')])
<     ## packet.h (module 'network'): ns3::Packet::Packet(uint8_t const * buffer, uint32_t size, bool magic) [constructor]
<     cls.add_constructor([param('uint8_t const *', 'buffer'), param('uint32_t', 'size'), param('bool', 'magic')])
<     ## packet.h (module 'network'): ns3::Packet::Packet(uint8_t const * buffer, uint32_t size) [constructor]
<     cls.add_constructor([param('uint8_t const *', 'buffer'), param('uint32_t', 'size')])
<     ## packet.h (module 'network'): void ns3::Packet::AddAtEnd(ns3::Ptr<const ns3::Packet> packet) [member function]
<     cls.add_method('AddAtEnd', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Packet const >', 'packet')])
<     ## packet.h (module 'network'): void ns3::Packet::AddByteTag(ns3::Tag const & tag) const [member function]
<     cls.add_method('AddByteTag', 
<                    'void', 
<                    [param('ns3::Tag const &', 'tag')], 
<                    is_const=True)
<     ## packet.h (module 'network'): void ns3::Packet::AddByteTag(ns3::Tag const & tag, uint32_t start, uint32_t end) const [member function]
<     cls.add_method('AddByteTag', 
<                    'void', 
<                    [param('ns3::Tag const &', 'tag'), param('uint32_t', 'start'), param('uint32_t', 'end')], 
<                    is_const=True)
<     ## packet.h (module 'network'): void ns3::Packet::AddHeader(ns3::Header const & header) [member function]
<     cls.add_method('AddHeader', 
<                    'void', 
<                    [param('ns3::Header const &', 'header')])
<     ## packet.h (module 'network'): void ns3::Packet::AddPacketTag(ns3::Tag const & tag) const [member function]
<     cls.add_method('AddPacketTag', 
<                    'void', 
<                    [param('ns3::Tag const &', 'tag')], 
<                    is_const=True)
<     ## packet.h (module 'network'): void ns3::Packet::AddPaddingAtEnd(uint32_t size) [member function]
<     cls.add_method('AddPaddingAtEnd', 
<                    'void', 
<                    [param('uint32_t', 'size')])
<     ## packet.h (module 'network'): void ns3::Packet::AddTrailer(ns3::Trailer const & trailer) [member function]
<     cls.add_method('AddTrailer', 
<                    'void', 
<                    [param('ns3::Trailer const &', 'trailer')])
<     ## packet.h (module 'network'): ns3::PacketMetadata::ItemIterator ns3::Packet::BeginItem() const [member function]
<     cls.add_method('BeginItem', 
<                    'ns3::PacketMetadata::ItemIterator', 
<                    [], 
<                    is_const=True)
<     ## packet.h (module 'network'): ns3::Ptr<ns3::Packet> ns3::Packet::Copy() const [member function]
<     cls.add_method('Copy', 
<                    'ns3::Ptr< ns3::Packet >', 
<                    [], 
<                    is_const=True)
<     ## packet.h (module 'network'): uint32_t ns3::Packet::CopyData(uint8_t * buffer, uint32_t size) const [member function]
<     cls.add_method('CopyData', 
<                    'uint32_t', 
<                    [param('uint8_t *', 'buffer'), param('uint32_t', 'size')], 
<                    is_const=True)
<     ## packet.h (module 'network'): void ns3::Packet::CopyData(std::ostream * os, uint32_t size) const [member function]
<     cls.add_method('CopyData', 
<                    'void', 
<                    [param('std::ostream *', 'os'), param('uint32_t', 'size')], 
<                    is_const=True)
<     ## packet.h (module 'network'): ns3::Ptr<ns3::Packet> ns3::Packet::CreateFragment(uint32_t start, uint32_t length) const [member function]
<     cls.add_method('CreateFragment', 
<                    'ns3::Ptr< ns3::Packet >', 
<                    [param('uint32_t', 'start'), param('uint32_t', 'length')], 
<                    is_const=True)
<     ## packet.h (module 'network'): static void ns3::Packet::EnableChecking() [member function]
<     cls.add_method('EnableChecking', 
<                    'void', 
<                    [], 
<                    is_static=True)
<     ## packet.h (module 'network'): static void ns3::Packet::EnablePrinting() [member function]
<     cls.add_method('EnablePrinting', 
<                    'void', 
<                    [], 
<                    is_static=True)
<     ## packet.h (module 'network'): bool ns3::Packet::FindFirstMatchingByteTag(ns3::Tag & tag) const [member function]
<     cls.add_method('FindFirstMatchingByteTag', 
<                    'bool', 
<                    [param('ns3::Tag &', 'tag')], 
<                    is_const=True)
<     ## packet.h (module 'network'): ns3::ByteTagIterator ns3::Packet::GetByteTagIterator() const [member function]
<     cls.add_method('GetByteTagIterator', 
<                    'ns3::ByteTagIterator', 
<                    [], 
<                    is_const=True)
<     ## packet.h (module 'network'): ns3::Ptr<ns3::NixVector> ns3::Packet::GetNixVector() const [member function]
<     cls.add_method('GetNixVector', 
<                    'ns3::Ptr< ns3::NixVector >', 
<                    [], 
<                    is_const=True)
<     ## packet.h (module 'network'): ns3::PacketTagIterator ns3::Packet::GetPacketTagIterator() const [member function]
<     cls.add_method('GetPacketTagIterator', 
<                    'ns3::PacketTagIterator', 
<                    [], 
<                    is_const=True)
<     ## packet.h (module 'network'): uint32_t ns3::Packet::GetSerializedSize() const [member function]
<     cls.add_method('GetSerializedSize', 
<                    'uint32_t', 
<                    [], 
<                    is_const=True)
<     ## packet.h (module 'network'): uint32_t ns3::Packet::GetSize() const [member function]
<     cls.add_method('GetSize', 
<                    'uint32_t', 
<                    [], 
<                    is_const=True)
<     ## packet.h (module 'network'): uint64_t ns3::Packet::GetUid() const [member function]
<     cls.add_method('GetUid', 
<                    'uint64_t', 
<                    [], 
<                    is_const=True)
<     ## packet.h (module 'network'): uint32_t ns3::Packet::PeekHeader(ns3::Header & header) const [member function]
<     cls.add_method('PeekHeader', 
<                    'uint32_t', 
<                    [param('ns3::Header &', 'header')], 
<                    is_const=True)
<     ## packet.h (module 'network'): uint32_t ns3::Packet::PeekHeader(ns3::Header & header, uint32_t size) const [member function]
<     cls.add_method('PeekHeader', 
<                    'uint32_t', 
<                    [param('ns3::Header &', 'header'), param('uint32_t', 'size')], 
<                    is_const=True)
<     ## packet.h (module 'network'): bool ns3::Packet::PeekPacketTag(ns3::Tag & tag) const [member function]
<     cls.add_method('PeekPacketTag', 
<                    'bool', 
<                    [param('ns3::Tag &', 'tag')], 
<                    is_const=True)
<     ## packet.h (module 'network'): uint32_t ns3::Packet::PeekTrailer(ns3::Trailer & trailer) [member function]
<     cls.add_method('PeekTrailer', 
<                    'uint32_t', 
<                    [param('ns3::Trailer &', 'trailer')])
<     ## packet.h (module 'network'): void ns3::Packet::Print(std::ostream & os) const [member function]
<     cls.add_method('Print', 
<                    'void', 
<                    [param('std::ostream &', 'os')], 
<                    is_const=True)
<     ## packet.h (module 'network'): void ns3::Packet::PrintByteTags(std::ostream & os) const [member function]
<     cls.add_method('PrintByteTags', 
<                    'void', 
<                    [param('std::ostream &', 'os')], 
<                    is_const=True)
<     ## packet.h (module 'network'): void ns3::Packet::PrintPacketTags(std::ostream & os) const [member function]
<     cls.add_method('PrintPacketTags', 
<                    'void', 
<                    [param('std::ostream &', 'os')], 
<                    is_const=True)
<     ## packet.h (module 'network'): void ns3::Packet::RemoveAllByteTags() [member function]
<     cls.add_method('RemoveAllByteTags', 
<                    'void', 
<                    [])
<     ## packet.h (module 'network'): void ns3::Packet::RemoveAllPacketTags() [member function]
<     cls.add_method('RemoveAllPacketTags', 
<                    'void', 
<                    [])
<     ## packet.h (module 'network'): void ns3::Packet::RemoveAtEnd(uint32_t size) [member function]
<     cls.add_method('RemoveAtEnd', 
<                    'void', 
<                    [param('uint32_t', 'size')])
<     ## packet.h (module 'network'): void ns3::Packet::RemoveAtStart(uint32_t size) [member function]
<     cls.add_method('RemoveAtStart', 
<                    'void', 
<                    [param('uint32_t', 'size')])
<     ## packet.h (module 'network'): uint32_t ns3::Packet::RemoveHeader(ns3::Header & header) [member function]
<     cls.add_method('RemoveHeader', 
<                    'uint32_t', 
<                    [param('ns3::Header &', 'header')])
<     ## packet.h (module 'network'): uint32_t ns3::Packet::RemoveHeader(ns3::Header & header, uint32_t size) [member function]
<     cls.add_method('RemoveHeader', 
<                    'uint32_t', 
<                    [param('ns3::Header &', 'header'), param('uint32_t', 'size')])
<     ## packet.h (module 'network'): bool ns3::Packet::RemovePacketTag(ns3::Tag & tag) [member function]
<     cls.add_method('RemovePacketTag', 
<                    'bool', 
<                    [param('ns3::Tag &', 'tag')])
<     ## packet.h (module 'network'): uint32_t ns3::Packet::RemoveTrailer(ns3::Trailer & trailer) [member function]
<     cls.add_method('RemoveTrailer', 
<                    'uint32_t', 
<                    [param('ns3::Trailer &', 'trailer')])
<     ## packet.h (module 'network'): bool ns3::Packet::ReplacePacketTag(ns3::Tag & tag) [member function]
<     cls.add_method('ReplacePacketTag', 
<                    'bool', 
<                    [param('ns3::Tag &', 'tag')])
<     ## packet.h (module 'network'): uint32_t ns3::Packet::Serialize(uint8_t * buffer, uint32_t maxSize) const [member function]
<     cls.add_method('Serialize', 
<                    'uint32_t', 
<                    [param('uint8_t *', 'buffer'), param('uint32_t', 'maxSize')], 
<                    is_const=True)
<     ## packet.h (module 'network'): void ns3::Packet::SetNixVector(ns3::Ptr<ns3::NixVector> nixVector) [member function]
<     cls.add_method('SetNixVector', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::NixVector >', 'nixVector')])
<     ## packet.h (module 'network'): std::string ns3::Packet::ToString() const [member function]
<     cls.add_method('ToString', 
<                    'std::string', 
<                    [], 
<                    is_const=True)
<     return
< 
6109,6113d4560
<                    is_const=True, deprecated=True)
<     ## random-variable-stream.h (module 'core'): double ns3::ParetoRandomVariable::GetScale() const [member function]
<     cls.add_method('GetScale', 
<                    'double', 
<                    [], 
6125c4572
<     ## random-variable-stream.h (module 'core'): double ns3::ParetoRandomVariable::GetValue(double scale, double shape, double bound) [member function]
---
>     ## random-variable-stream.h (module 'core'): double ns3::ParetoRandomVariable::GetValue(double mean, double shape, double bound) [member function]
6128,6129c4575,4576
<                    [param('double', 'scale'), param('double', 'shape'), param('double', 'bound')])
<     ## random-variable-stream.h (module 'core'): uint32_t ns3::ParetoRandomVariable::GetInteger(uint32_t scale, uint32_t shape, uint32_t bound) [member function]
---
>                    [param('double', 'mean'), param('double', 'shape'), param('double', 'bound')])
>     ## random-variable-stream.h (module 'core'): uint32_t ns3::ParetoRandomVariable::GetInteger(uint32_t mean, uint32_t shape, uint32_t bound) [member function]
6132c4579
<                    [param('uint32_t', 'scale'), param('uint32_t', 'shape'), param('uint32_t', 'bound')])
---
>                    [param('uint32_t', 'mean'), param('uint32_t', 'shape'), param('uint32_t', 'bound')])
6145,6223c4592,4598
< def register_Ns3ThreeGppChannelConditionModel_methods(root_module, cls):
<     ## channel-condition-model.h (module 'propagation'): ns3::ThreeGppChannelConditionModel::ThreeGppChannelConditionModel() [constructor]
<     cls.add_constructor([])
<     ## channel-condition-model.h (module 'propagation'): int64_t ns3::ThreeGppChannelConditionModel::AssignStreams(int64_t stream) [member function]
<     cls.add_method('AssignStreams', 
<                    'int64_t', 
<                    [param('int64_t', 'stream')], 
<                    is_virtual=True)
<     ## channel-condition-model.h (module 'propagation'): ns3::Ptr<ns3::ChannelCondition> ns3::ThreeGppChannelConditionModel::GetChannelCondition(ns3::Ptr<const ns3::MobilityModel> a, ns3::Ptr<const ns3::MobilityModel> b) const [member function]
<     cls.add_method('GetChannelCondition', 
<                    'ns3::Ptr< ns3::ChannelCondition >', 
<                    [param('ns3::Ptr< ns3::MobilityModel const >', 'a'), param('ns3::Ptr< ns3::MobilityModel const >', 'b')], 
<                    is_const=True, is_virtual=True)
<     ## channel-condition-model.h (module 'propagation'): static ns3::TypeId ns3::ThreeGppChannelConditionModel::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## channel-condition-model.h (module 'propagation'): static double ns3::ThreeGppChannelConditionModel::Calculate2dDistance(ns3::Vector const & a, ns3::Vector const & b) [member function]
<     cls.add_method('Calculate2dDistance', 
<                    'double', 
<                    [param('ns3::Vector const &', 'a'), param('ns3::Vector const &', 'b')], 
<                    visibility='protected', is_static=True)
<     ## channel-condition-model.h (module 'propagation'): double ns3::ThreeGppChannelConditionModel::ComputePlos(ns3::Ptr<const ns3::MobilityModel> a, ns3::Ptr<const ns3::MobilityModel> b) const [member function]
<     cls.add_method('ComputePlos', 
<                    'double', 
<                    [param('ns3::Ptr< ns3::MobilityModel const >', 'a'), param('ns3::Ptr< ns3::MobilityModel const >', 'b')], 
<                    is_const=True, visibility='private', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3ThreeGppIndoorMixedOfficeChannelConditionModel_methods(root_module, cls):
<     ## channel-condition-model.h (module 'propagation'): static ns3::TypeId ns3::ThreeGppIndoorMixedOfficeChannelConditionModel::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## channel-condition-model.h (module 'propagation'): ns3::ThreeGppIndoorMixedOfficeChannelConditionModel::ThreeGppIndoorMixedOfficeChannelConditionModel() [constructor]
<     cls.add_constructor([])
<     ## channel-condition-model.h (module 'propagation'): double ns3::ThreeGppIndoorMixedOfficeChannelConditionModel::ComputePlos(ns3::Ptr<const ns3::MobilityModel> a, ns3::Ptr<const ns3::MobilityModel> b) const [member function]
<     cls.add_method('ComputePlos', 
<                    'double', 
<                    [param('ns3::Ptr< ns3::MobilityModel const >', 'a'), param('ns3::Ptr< ns3::MobilityModel const >', 'b')], 
<                    is_const=True, visibility='private', is_virtual=True)
<     return
< 
< def register_Ns3ThreeGppIndoorOpenOfficeChannelConditionModel_methods(root_module, cls):
<     ## channel-condition-model.h (module 'propagation'): static ns3::TypeId ns3::ThreeGppIndoorOpenOfficeChannelConditionModel::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## channel-condition-model.h (module 'propagation'): ns3::ThreeGppIndoorOpenOfficeChannelConditionModel::ThreeGppIndoorOpenOfficeChannelConditionModel() [constructor]
<     cls.add_constructor([])
<     ## channel-condition-model.h (module 'propagation'): double ns3::ThreeGppIndoorOpenOfficeChannelConditionModel::ComputePlos(ns3::Ptr<const ns3::MobilityModel> a, ns3::Ptr<const ns3::MobilityModel> b) const [member function]
<     cls.add_method('ComputePlos', 
<                    'double', 
<                    [param('ns3::Ptr< ns3::MobilityModel const >', 'a'), param('ns3::Ptr< ns3::MobilityModel const >', 'b')], 
<                    is_const=True, visibility='private', is_virtual=True)
<     return
< 
< def register_Ns3ThreeGppRmaChannelConditionModel_methods(root_module, cls):
<     ## channel-condition-model.h (module 'propagation'): static ns3::TypeId ns3::ThreeGppRmaChannelConditionModel::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## channel-condition-model.h (module 'propagation'): ns3::ThreeGppRmaChannelConditionModel::ThreeGppRmaChannelConditionModel() [constructor]
<     cls.add_constructor([])
<     ## channel-condition-model.h (module 'propagation'): double ns3::ThreeGppRmaChannelConditionModel::ComputePlos(ns3::Ptr<const ns3::MobilityModel> a, ns3::Ptr<const ns3::MobilityModel> b) const [member function]
<     cls.add_method('ComputePlos', 
<                    'double', 
<                    [param('ns3::Ptr< ns3::MobilityModel const >', 'a'), param('ns3::Ptr< ns3::MobilityModel const >', 'b')], 
<                    is_const=True, visibility='private', is_virtual=True)
<     return
< 
< def register_Ns3ThreeGppUmaChannelConditionModel_methods(root_module, cls):
<     ## channel-condition-model.h (module 'propagation'): static ns3::TypeId ns3::ThreeGppUmaChannelConditionModel::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
---
> def register_Ns3QueueItem_methods(root_module, cls):
>     cls.add_output_stream_operator()
>     ## net-device.h (module 'network'): ns3::QueueItem::QueueItem(ns3::Ptr<ns3::Packet> p) [constructor]
>     cls.add_constructor([param('ns3::Ptr< ns3::Packet >', 'p')])
>     ## net-device.h (module 'network'): ns3::Ptr<ns3::Packet> ns3::QueueItem::GetPacket() const [member function]
>     cls.add_method('GetPacket', 
>                    'ns3::Ptr< ns3::Packet >', 
6225,6238c4600,4603
<                    is_static=True)
<     ## channel-condition-model.h (module 'propagation'): ns3::ThreeGppUmaChannelConditionModel::ThreeGppUmaChannelConditionModel() [constructor]
<     cls.add_constructor([])
<     ## channel-condition-model.h (module 'propagation'): double ns3::ThreeGppUmaChannelConditionModel::ComputePlos(ns3::Ptr<const ns3::MobilityModel> a, ns3::Ptr<const ns3::MobilityModel> b) const [member function]
<     cls.add_method('ComputePlos', 
<                    'double', 
<                    [param('ns3::Ptr< ns3::MobilityModel const >', 'a'), param('ns3::Ptr< ns3::MobilityModel const >', 'b')], 
<                    is_const=True, visibility='private', is_virtual=True)
<     return
< 
< def register_Ns3ThreeGppUmiStreetCanyonChannelConditionModel_methods(root_module, cls):
<     ## channel-condition-model.h (module 'propagation'): static ns3::TypeId ns3::ThreeGppUmiStreetCanyonChannelConditionModel::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
---
>                    is_const=True)
>     ## net-device.h (module 'network'): uint32_t ns3::QueueItem::GetPacketSize() const [member function]
>     cls.add_method('GetPacketSize', 
>                    'uint32_t', 
6240,6247c4605,4615
<                    is_static=True)
<     ## channel-condition-model.h (module 'propagation'): ns3::ThreeGppUmiStreetCanyonChannelConditionModel::ThreeGppUmiStreetCanyonChannelConditionModel() [constructor]
<     cls.add_constructor([])
<     ## channel-condition-model.h (module 'propagation'): double ns3::ThreeGppUmiStreetCanyonChannelConditionModel::ComputePlos(ns3::Ptr<const ns3::MobilityModel> a, ns3::Ptr<const ns3::MobilityModel> b) const [member function]
<     cls.add_method('ComputePlos', 
<                    'double', 
<                    [param('ns3::Ptr< ns3::MobilityModel const >', 'a'), param('ns3::Ptr< ns3::MobilityModel const >', 'b')], 
<                    is_const=True, visibility='private', is_virtual=True)
---
>                    is_const=True, is_virtual=True)
>     ## net-device.h (module 'network'): bool ns3::QueueItem::GetUint8Value(ns3::QueueItem::Uint8Values field, uint8_t & value) const [member function]
>     cls.add_method('GetUint8Value', 
>                    'bool', 
>                    [param('ns3::QueueItem::Uint8Values', 'field'), param('uint8_t &', 'value')], 
>                    is_const=True, is_virtual=True)
>     ## net-device.h (module 'network'): void ns3::QueueItem::Print(std::ostream & os) const [member function]
>     cls.add_method('Print', 
>                    'void', 
>                    [param('std::ostream &', 'os')], 
>                    is_const=True, is_virtual=True)
6252a4621,4622
>     ## nstime.h (module 'core'): ns3::TimeValue::TimeValue(ns3::TimeValue const & arg0) [copy constructor]
>     cls.add_constructor([param('ns3::TimeValue const &', 'arg0')])
6255,6256d4624
<     ## nstime.h (module 'core'): ns3::TimeValue::TimeValue(ns3::TimeValue const & arg0) [constructor]
<     cls.add_constructor([param('ns3::TimeValue const &', 'arg0')])
6262c4630
<     ## nstime.h (module 'core'): bool ns3::TimeValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
---
>     ## nstime.h (module 'core'): bool ns3::TimeValue::DeserializeFromString(std::string value, ns3::Ptr<ns3::AttributeChecker const> checker) [member function]
6272c4640
<     ## nstime.h (module 'core'): std::string ns3::TimeValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
---
>     ## nstime.h (module 'core'): std::string ns3::TimeValue::SerializeToString(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
6286c4654
<     ## type-id.h (module 'core'): ns3::TypeIdChecker::TypeIdChecker(ns3::TypeIdChecker const & arg0) [constructor]
---
>     ## type-id.h (module 'core'): ns3::TypeIdChecker::TypeIdChecker(ns3::TypeIdChecker const & arg0) [copy constructor]
6292a4661,4662
>     ## type-id.h (module 'core'): ns3::TypeIdValue::TypeIdValue(ns3::TypeIdValue const & arg0) [copy constructor]
>     cls.add_constructor([param('ns3::TypeIdValue const &', 'arg0')])
6295,6296d4664
<     ## type-id.h (module 'core'): ns3::TypeIdValue::TypeIdValue(ns3::TypeIdValue const & arg0) [constructor]
<     cls.add_constructor([param('ns3::TypeIdValue const &', 'arg0')])
6302c4670
<     ## type-id.h (module 'core'): bool ns3::TypeIdValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
---
>     ## type-id.h (module 'core'): bool ns3::TypeIdValue::DeserializeFromString(std::string value, ns3::Ptr<ns3::AttributeChecker const> checker) [member function]
6312c4680
<     ## type-id.h (module 'core'): std::string ns3::TypeIdValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
---
>     ## type-id.h (module 'core'): std::string ns3::TypeIdValue::SerializeToString(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
6326c4694
<     ## vector.h (module 'core'): ns3::Vector2DChecker::Vector2DChecker(ns3::Vector2DChecker const & arg0) [constructor]
---
>     ## vector.h (module 'core'): ns3::Vector2DChecker::Vector2DChecker(ns3::Vector2DChecker const & arg0) [copy constructor]
6332a4701,4702
>     ## vector.h (module 'core'): ns3::Vector2DValue::Vector2DValue(ns3::Vector2DValue const & arg0) [copy constructor]
>     cls.add_constructor([param('ns3::Vector2DValue const &', 'arg0')])
6335,6336d4704
<     ## vector.h (module 'core'): ns3::Vector2DValue::Vector2DValue(ns3::Vector2DValue const & arg0) [constructor]
<     cls.add_constructor([param('ns3::Vector2DValue const &', 'arg0')])
6342c4710
<     ## vector.h (module 'core'): bool ns3::Vector2DValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
---
>     ## vector.h (module 'core'): bool ns3::Vector2DValue::DeserializeFromString(std::string value, ns3::Ptr<ns3::AttributeChecker const> checker) [member function]
6352c4720
<     ## vector.h (module 'core'): std::string ns3::Vector2DValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
---
>     ## vector.h (module 'core'): std::string ns3::Vector2DValue::SerializeToString(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
6366c4734
<     ## vector.h (module 'core'): ns3::Vector3DChecker::Vector3DChecker(ns3::Vector3DChecker const & arg0) [constructor]
---
>     ## vector.h (module 'core'): ns3::Vector3DChecker::Vector3DChecker(ns3::Vector3DChecker const & arg0) [copy constructor]
6372a4741,4742
>     ## vector.h (module 'core'): ns3::Vector3DValue::Vector3DValue(ns3::Vector3DValue const & arg0) [copy constructor]
>     cls.add_constructor([param('ns3::Vector3DValue const &', 'arg0')])
6375,6376d4744
<     ## vector.h (module 'core'): ns3::Vector3DValue::Vector3DValue(ns3::Vector3DValue const & arg0) [constructor]
<     cls.add_constructor([param('ns3::Vector3DValue const &', 'arg0')])
6382c4750
<     ## vector.h (module 'core'): bool ns3::Vector3DValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
---
>     ## vector.h (module 'core'): bool ns3::Vector3DValue::DeserializeFromString(std::string value, ns3::Ptr<ns3::AttributeChecker const> checker) [member function]
6392c4760
<     ## vector.h (module 'core'): std::string ns3::Vector3DValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
---
>     ## vector.h (module 'core'): std::string ns3::Vector3DValue::SerializeToString(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
6406c4774
<     ## address.h (module 'network'): ns3::AddressChecker::AddressChecker(ns3::AddressChecker const & arg0) [constructor]
---
>     ## address.h (module 'network'): ns3::AddressChecker::AddressChecker(ns3::AddressChecker const & arg0) [copy constructor]
6412a4781,4782
>     ## address.h (module 'network'): ns3::AddressValue::AddressValue(ns3::AddressValue const & arg0) [copy constructor]
>     cls.add_constructor([param('ns3::AddressValue const &', 'arg0')])
6415,6416d4784
<     ## address.h (module 'network'): ns3::AddressValue::AddressValue(ns3::AddressValue const & arg0) [constructor]
<     cls.add_constructor([param('ns3::AddressValue const &', 'arg0')])
6422c4790
<     ## address.h (module 'network'): bool ns3::AddressValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
---
>     ## address.h (module 'network'): bool ns3::AddressValue::DeserializeFromString(std::string value, ns3::Ptr<ns3::AttributeChecker const> checker) [member function]
6432c4800
<     ## address.h (module 'network'): std::string ns3::AddressValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
---
>     ## address.h (module 'network'): std::string ns3::AddressValue::SerializeToString(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
6443,6570d4810
< def register_Ns3AlwaysLosChannelConditionModel_methods(root_module, cls):
<     ## channel-condition-model.h (module 'propagation'): static ns3::TypeId ns3::AlwaysLosChannelConditionModel::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## channel-condition-model.h (module 'propagation'): ns3::AlwaysLosChannelConditionModel::AlwaysLosChannelConditionModel() [constructor]
<     cls.add_constructor([])
<     ## channel-condition-model.h (module 'propagation'): ns3::Ptr<ns3::ChannelCondition> ns3::AlwaysLosChannelConditionModel::GetChannelCondition(ns3::Ptr<const ns3::MobilityModel> a, ns3::Ptr<const ns3::MobilityModel> b) const [member function]
<     cls.add_method('GetChannelCondition', 
<                    'ns3::Ptr< ns3::ChannelCondition >', 
<                    [param('ns3::Ptr< ns3::MobilityModel const >', 'a'), param('ns3::Ptr< ns3::MobilityModel const >', 'b')], 
<                    is_const=True, is_virtual=True)
<     ## channel-condition-model.h (module 'propagation'): int64_t ns3::AlwaysLosChannelConditionModel::AssignStreams(int64_t stream) [member function]
<     cls.add_method('AssignStreams', 
<                    'int64_t', 
<                    [param('int64_t', 'stream')], 
<                    is_virtual=True)
<     return
< 
< def register_Ns3BuildingsChannelConditionModel_methods(root_module, cls):
<     ## buildings-channel-condition-model.h (module 'buildings'): static ns3::TypeId ns3::BuildingsChannelConditionModel::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## buildings-channel-condition-model.h (module 'buildings'): ns3::BuildingsChannelConditionModel::BuildingsChannelConditionModel() [constructor]
<     cls.add_constructor([])
<     ## buildings-channel-condition-model.h (module 'buildings'): ns3::Ptr<ns3::ChannelCondition> ns3::BuildingsChannelConditionModel::GetChannelCondition(ns3::Ptr<const ns3::MobilityModel> a, ns3::Ptr<const ns3::MobilityModel> b) const [member function]
<     cls.add_method('GetChannelCondition', 
<                    'ns3::Ptr< ns3::ChannelCondition >', 
<                    [param('ns3::Ptr< ns3::MobilityModel const >', 'a'), param('ns3::Ptr< ns3::MobilityModel const >', 'b')], 
<                    is_const=True, is_virtual=True)
<     ## buildings-channel-condition-model.h (module 'buildings'): int64_t ns3::BuildingsChannelConditionModel::AssignStreams(int64_t stream) [member function]
<     cls.add_method('AssignStreams', 
<                    'int64_t', 
<                    [param('int64_t', 'stream')], 
<                    is_virtual=True)
<     return
< 
< def register_Ns3CallbackImpl__Ns3ObjectBase___star___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
<     cls.add_constructor([])
<     ## callback.h (module 'core'): ns3::CallbackImpl<ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True)
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): ns3::ObjectBase * ns3::CallbackImpl<ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()() [member operator]
<     cls.add_method('operator()', 
<                    'ns3::ObjectBase *', 
<                    [], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__const_ns3MobilityModel__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::MobilityModel>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
<     cls.add_constructor([])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::MobilityModel>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<const ns3::MobilityModel>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::MobilityModel const >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<const ns3::MobilityModel>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True)
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<const ns3::MobilityModel>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<const ns3::MobilityModel>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<const ns3::MobilityModel> arg0) [member operator]
<     cls.add_method('operator()', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::MobilityModel const >', 'arg0')], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3NetDevice__gt___Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Const_ns3Address___amp___Const_ns3Address___amp___Ns3NetDevicePacketType_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
<     cls.add_constructor([])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True)
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<ns3::NetDevice> arg0, ns3::Ptr<const ns3::Packet> arg1, short unsigned int arg2, ns3::Address const & arg3, ns3::Address const & arg4, ns3::NetDevice::PacketType arg5) [member operator]
<     cls.add_method('operator()', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::NetDevice >', 'arg0'), param('ns3::Ptr< ns3::Packet const >', 'arg1'), param('short unsigned int', 'arg2'), param('ns3::Address const &', 'arg3'), param('ns3::Address const &', 'arg4'), param('ns3::NetDevice::PacketType', 'arg5')], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3NetDevice__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
<     cls.add_constructor([])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::NetDevice >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True)
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<ns3::NetDevice> arg0) [member operator]
<     cls.add_method('operator()', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::NetDevice >', 'arg0')], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
<     return
< 
6572c4812
<     ## hash-function.h (module 'core'): ns3::Hash::Implementation::Implementation(ns3::Hash::Implementation const & arg0) [constructor]
---
>     ## hash-function.h (module 'core'): ns3::Hash::Implementation::Implementation(ns3::Hash::Implementation const & arg0) [copy constructor]
6576c4816
<     ## hash-function.h (module 'core'): uint32_t ns3::Hash::Implementation::GetHash32(char const * buffer, std::size_t const size) [member function]
---
>     ## hash-function.h (module 'core'): uint32_t ns3::Hash::Implementation::GetHash32(char const * buffer, size_t const size) [member function]
6579,6581c4819,4821
<                    [param('char const *', 'buffer'), param('std::size_t const', 'size')], 
<                    is_virtual=True, is_pure_virtual=True)
<     ## hash-function.h (module 'core'): uint64_t ns3::Hash::Implementation::GetHash64(char const * buffer, std::size_t const size) [member function]
---
>                    [param('char const *', 'buffer'), param('size_t const', 'size')], 
>                    is_pure_virtual=True, is_virtual=True)
>     ## hash-function.h (module 'core'): uint64_t ns3::Hash::Implementation::GetHash64(char const * buffer, size_t const size) [member function]
6584c4824
<                    [param('char const *', 'buffer'), param('std::size_t const', 'size')], 
---
>                    [param('char const *', 'buffer'), param('size_t const', 'size')], 
6590c4830
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
6594c4834
<     ## hash-fnv.h (module 'core'): ns3::Hash::Function::Fnv1a::Fnv1a(ns3::Hash::Function::Fnv1a const & arg0) [constructor]
---
>     ## hash-fnv.h (module 'core'): ns3::Hash::Function::Fnv1a::Fnv1a(ns3::Hash::Function::Fnv1a const & arg0) [copy constructor]
6616c4856
<     ## hash-function.h (module 'core'): ns3::Hash::Function::Hash32::Hash32(ns3::Hash::Function::Hash32 const & arg0) [constructor]
---
>     ## hash-function.h (module 'core'): ns3::Hash::Function::Hash32::Hash32(ns3::Hash::Function::Hash32 const & arg0) [copy constructor]
6620c4860
<     ## hash-function.h (module 'core'): uint32_t ns3::Hash::Function::Hash32::GetHash32(char const * buffer, std::size_t const size) [member function]
---
>     ## hash-function.h (module 'core'): uint32_t ns3::Hash::Function::Hash32::GetHash32(char const * buffer, size_t const size) [member function]
6623c4863
<                    [param('char const *', 'buffer'), param('std::size_t const', 'size')], 
---
>                    [param('char const *', 'buffer'), param('size_t const', 'size')], 
6633c4873
<     ## hash-function.h (module 'core'): ns3::Hash::Function::Hash64::Hash64(ns3::Hash::Function::Hash64 const & arg0) [constructor]
---
>     ## hash-function.h (module 'core'): ns3::Hash::Function::Hash64::Hash64(ns3::Hash::Function::Hash64 const & arg0) [copy constructor]
6637c4877
<     ## hash-function.h (module 'core'): uint32_t ns3::Hash::Function::Hash64::GetHash32(char const * buffer, std::size_t const size) [member function]
---
>     ## hash-function.h (module 'core'): uint32_t ns3::Hash::Function::Hash64::GetHash32(char const * buffer, size_t const size) [member function]
6640c4880
<                    [param('char const *', 'buffer'), param('std::size_t const', 'size')], 
---
>                    [param('char const *', 'buffer'), param('size_t const', 'size')], 
6642c4882
<     ## hash-function.h (module 'core'): uint64_t ns3::Hash::Function::Hash64::GetHash64(char const * buffer, std::size_t const size) [member function]
---
>     ## hash-function.h (module 'core'): uint64_t ns3::Hash::Function::Hash64::GetHash64(char const * buffer, size_t const size) [member function]
6645c4885
<                    [param('char const *', 'buffer'), param('std::size_t const', 'size')], 
---
>                    [param('char const *', 'buffer'), param('size_t const', 'size')], 
6655c4895
<     ## hash-murmur3.h (module 'core'): ns3::Hash::Function::Murmur3::Murmur3(ns3::Hash::Function::Murmur3 const & arg0) [constructor]
---
>     ## hash-murmur3.h (module 'core'): ns3::Hash::Function::Murmur3::Murmur3(ns3::Hash::Function::Murmur3 const & arg0) [copy constructor]
6659c4899
<     ## hash-murmur3.h (module 'core'): uint32_t ns3::Hash::Function::Murmur3::GetHash32(char const * buffer, std::size_t const size) [member function]
---
>     ## hash-murmur3.h (module 'core'): uint32_t ns3::Hash::Function::Murmur3::GetHash32(char const * buffer, size_t const size) [member function]
6662c4902
<                    [param('char const *', 'buffer'), param('std::size_t const', 'size')], 
---
>                    [param('char const *', 'buffer'), param('size_t const', 'size')], 
6664c4904
<     ## hash-murmur3.h (module 'core'): uint64_t ns3::Hash::Function::Murmur3::GetHash64(char const * buffer, std::size_t const size) [member function]
---
>     ## hash-murmur3.h (module 'core'): uint64_t ns3::Hash::Function::Murmur3::GetHash64(char const * buffer, size_t const size) [member function]
6667c4907
<                    [param('char const *', 'buffer'), param('std::size_t const', 'size')], 
---
>                    [param('char const *', 'buffer'), param('size_t const', 'size')], 
6678,6680c4918,4920
<     register_functions_ns3_FatalImpl(module.add_cpp_namespace('FatalImpl'), root_module)
<     register_functions_ns3_Hash(module.add_cpp_namespace('Hash'), root_module)
<     register_functions_ns3_TracedValueCallback(module.add_cpp_namespace('TracedValueCallback'), root_module)
---
>     register_functions_ns3_FatalImpl(module.get_submodule('FatalImpl'), root_module)
>     register_functions_ns3_Hash(module.get_submodule('Hash'), root_module)
>     register_functions_ns3_TracedValueCallback(module.get_submodule('TracedValueCallback'), root_module)
6687c4927
<     register_functions_ns3_Hash_Function(module.add_cpp_namespace('Function'), root_module)
---
>     register_functions_ns3_Hash_Function(module.get_submodule('Function'), root_module)
