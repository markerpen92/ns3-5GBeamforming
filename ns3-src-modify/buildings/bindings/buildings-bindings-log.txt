diff ../../NS3-WiGig/src/buildings/bindings/callbacks_list.py ../../ns-3-dev-git/src/buildings/bindings/callbacks_list.py
5d4
<     ['void', 'ns3::Ptr<const ns3::MobilityModel>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'],
diff ../../NS3-WiGig/src/buildings/bindings/modulegen__gcc_ILP32.py ../../ns-3-dev-git/src/buildings/bindings/modulegen__gcc_ILP32.py
34,37c34,37
<     module.add_class('Item', outer_class=root_module['ns3::AttributeConstructionList'], import_from_module='ns.core')
<     typehandlers.add_type_alias('std::list< ns3::AttributeConstructionList::Item > const_iterator', 'ns3::AttributeConstructionList::CIterator')
<     typehandlers.add_type_alias('std::list< ns3::AttributeConstructionList::Item > const_iterator*', 'ns3::AttributeConstructionList::CIterator*')
<     typehandlers.add_type_alias('std::list< ns3::AttributeConstructionList::Item > const_iterator&', 'ns3::AttributeConstructionList::CIterator&')
---
>     module.add_class('Item', import_from_module='ns.core', outer_class=root_module['ns3::AttributeConstructionList'])
>     typehandlers.add_type_alias(u'std::list< ns3::AttributeConstructionList::Item > const_iterator', u'ns3::AttributeConstructionList::CIterator')
>     typehandlers.add_type_alias(u'std::list< ns3::AttributeConstructionList::Item > const_iterator*', u'ns3::AttributeConstructionList::CIterator*')
>     typehandlers.add_type_alias(u'std::list< ns3::AttributeConstructionList::Item > const_iterator&', u'ns3::AttributeConstructionList::CIterator&')
45c45
<     module.add_class('Iterator', outer_class=root_module['ns3::Buffer'], import_from_module='ns.network')
---
>     module.add_class('Iterator', import_from_module='ns.network', outer_class=root_module['ns3::Buffer'])
48,50c48,50
<     typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::Building > > const_iterator', 'ns3::BuildingContainer::Iterator')
<     typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::Building > > const_iterator*', 'ns3::BuildingContainer::Iterator*')
<     typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::Building > > const_iterator&', 'ns3::BuildingContainer::Iterator&')
---
>     typehandlers.add_type_alias(u'std::vector< ns3::Ptr< ns3::Building > > const_iterator', u'ns3::BuildingContainer::Iterator')
>     typehandlers.add_type_alias(u'std::vector< ns3::Ptr< ns3::Building > > const_iterator*', u'ns3::BuildingContainer::Iterator*')
>     typehandlers.add_type_alias(u'std::vector< ns3::Ptr< ns3::Building > > const_iterator&', u'ns3::BuildingContainer::Iterator&')
53,55c53,55
<     typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::Building > > const_iterator', 'ns3::BuildingList::Iterator')
<     typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::Building > > const_iterator*', 'ns3::BuildingList::Iterator*')
<     typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::Building > > const_iterator&', 'ns3::BuildingList::Iterator&')
---
>     typehandlers.add_type_alias(u'std::vector< ns3::Ptr< ns3::Building > > const_iterator', u'ns3::BuildingList::Iterator')
>     typehandlers.add_type_alias(u'std::vector< ns3::Ptr< ns3::Building > > const_iterator*', u'ns3::BuildingList::Iterator*')
>     typehandlers.add_type_alias(u'std::vector< ns3::Ptr< ns3::Building > > const_iterator&', u'ns3::BuildingList::Iterator&')
61c61
<     module.add_class('Item', outer_class=root_module['ns3::ByteTagIterator'], import_from_module='ns.network')
---
>     module.add_class('Item', import_from_module='ns.network', outer_class=root_module['ns3::ByteTagIterator'])
65c65
<     module.add_class('Iterator', outer_class=root_module['ns3::ByteTagList'], import_from_module='ns.network')
---
>     module.add_class('Iterator', import_from_module='ns.network', outer_class=root_module['ns3::ByteTagList'])
67c67
<     module.add_class('Item', outer_class=root_module['ns3::ByteTagList::Iterator'], import_from_module='ns.network')
---
>     module.add_class('Item', import_from_module='ns.network', outer_class=root_module['ns3::ByteTagList::Iterator'])
104,106c104,106
<     typehandlers.add_type_alias('void ( * ) ( ns3::Mac48Address )', 'ns3::Mac48Address::TracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Mac48Address )*', 'ns3::Mac48Address::TracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Mac48Address )&', 'ns3::Mac48Address::TracedCallback&')
---
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Mac48Address )', u'ns3::Mac48Address::TracedCallback')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Mac48Address )*', u'ns3::Mac48Address::TracedCallback*')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Mac48Address )&', u'ns3::Mac48Address::TracedCallback&')
115,117c115,117
<     typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::Node > > const_iterator', 'ns3::NodeContainer::Iterator')
<     typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::Node > > const_iterator*', 'ns3::NodeContainer::Iterator*')
<     typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::Node > > const_iterator&', 'ns3::NodeContainer::Iterator&')
---
>     typehandlers.add_type_alias(u'std::vector< ns3::Ptr< ns3::Node > > const_iterator', u'ns3::NodeContainer::Iterator')
>     typehandlers.add_type_alias(u'std::vector< ns3::Ptr< ns3::Node > > const_iterator*', u'ns3::NodeContainer::Iterator*')
>     typehandlers.add_type_alias(u'std::vector< ns3::Ptr< ns3::Node > > const_iterator&', u'ns3::NodeContainer::Iterator&')
119c119
<     module.add_class('ObjectBase', import_from_module='ns.core', allow_subclassing=True)
---
>     module.add_class('ObjectBase', allow_subclassing=True, import_from_module='ns.core')
127c127
<     module.add_class('Item', outer_class=root_module['ns3::PacketMetadata'], import_from_module='ns.network')
---
>     module.add_class('Item', import_from_module='ns.network', outer_class=root_module['ns3::PacketMetadata'])
131c131
<     module.add_class('ItemIterator', outer_class=root_module['ns3::PacketMetadata'], import_from_module='ns.network')
---
>     module.add_class('ItemIterator', import_from_module='ns.network', outer_class=root_module['ns3::PacketMetadata'])
135c135
<     module.add_class('Item', outer_class=root_module['ns3::PacketTagIterator'], import_from_module='ns.network')
---
>     module.add_class('Item', import_from_module='ns.network', outer_class=root_module['ns3::PacketTagIterator'])
139c139
<     module.add_class('TagData', outer_class=root_module['ns3::PacketTagList'], import_from_module='ns.network')
---
>     module.add_class('TagData', import_from_module='ns.network', outer_class=root_module['ns3::PacketTagList'])
141c141
<     module.add_class('SimpleRefCount', template_parameters=['ns3::Object', 'ns3::ObjectBase', 'ns3::ObjectDeleter'], parent=root_module['ns3::ObjectBase'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), import_from_module='ns.core', automatic_type_narrowing=True)
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::Object', 'ns3::ObjectBase', 'ns3::ObjectDeleter'], parent=root_module['ns3::ObjectBase'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
155c155
<     module.add_class('AttributeInformation', outer_class=root_module['ns3::TypeId'], import_from_module='ns.core')
---
>     module.add_class('AttributeInformation', import_from_module='ns.core', outer_class=root_module['ns3::TypeId'])
157,160c157,160
<     module.add_class('TraceSourceInformation', outer_class=root_module['ns3::TypeId'], import_from_module='ns.core')
<     typehandlers.add_type_alias('uint32_t', 'ns3::TypeId::hash_t')
<     typehandlers.add_type_alias('uint32_t*', 'ns3::TypeId::hash_t*')
<     typehandlers.add_type_alias('uint32_t&', 'ns3::TypeId::hash_t&')
---
>     module.add_class('TraceSourceInformation', import_from_module='ns.core', outer_class=root_module['ns3::TypeId'])
>     typehandlers.add_type_alias(u'uint32_t', u'ns3::TypeId::hash_t')
>     typehandlers.add_type_alias(u'uint32_t*', u'ns3::TypeId::hash_t*')
>     typehandlers.add_type_alias(u'uint32_t&', u'ns3::TypeId::hash_t&')
178c178
<     module.add_class('AggregateIterator', outer_class=root_module['ns3::Object'], import_from_module='ns.core')
---
>     module.add_class('AggregateIterator', import_from_module='ns.core', outer_class=root_module['ns3::Object'])
204c204
<     module.add_class('SimpleRefCount', template_parameters=['ns3::AttributeAccessor', 'ns3::empty', 'ns3::DefaultDeleter<ns3::AttributeAccessor>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), import_from_module='ns.core', automatic_type_narrowing=True)
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::AttributeAccessor', 'ns3::empty', 'ns3::DefaultDeleter<ns3::AttributeAccessor>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
206c206
<     module.add_class('SimpleRefCount', template_parameters=['ns3::AttributeChecker', 'ns3::empty', 'ns3::DefaultDeleter<ns3::AttributeChecker>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), import_from_module='ns.core', automatic_type_narrowing=True)
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::AttributeChecker', 'ns3::empty', 'ns3::DefaultDeleter<ns3::AttributeChecker>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
208c208
<     module.add_class('SimpleRefCount', template_parameters=['ns3::AttributeValue', 'ns3::empty', 'ns3::DefaultDeleter<ns3::AttributeValue>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), import_from_module='ns.core', automatic_type_narrowing=True)
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::AttributeValue', 'ns3::empty', 'ns3::DefaultDeleter<ns3::AttributeValue>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
210c210
<     module.add_class('SimpleRefCount', template_parameters=['ns3::CallbackImplBase', 'ns3::empty', 'ns3::DefaultDeleter<ns3::CallbackImplBase>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), import_from_module='ns.core', automatic_type_narrowing=True)
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::CallbackImplBase', 'ns3::empty', 'ns3::DefaultDeleter<ns3::CallbackImplBase>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
212c212
<     module.add_class('SimpleRefCount', template_parameters=['ns3::Hash::Implementation', 'ns3::empty', 'ns3::DefaultDeleter<ns3::Hash::Implementation>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), import_from_module='ns.core', automatic_type_narrowing=True)
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::Hash::Implementation', 'ns3::empty', 'ns3::DefaultDeleter<ns3::Hash::Implementation>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
214c214
<     module.add_class('SimpleRefCount', template_parameters=['ns3::NixVector', 'ns3::empty', 'ns3::DefaultDeleter<ns3::NixVector>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), import_from_module='ns.core', automatic_type_narrowing=True)
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::NixVector', 'ns3::empty', 'ns3::DefaultDeleter<ns3::NixVector>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
216c216
<     module.add_class('SimpleRefCount', template_parameters=['ns3::Packet', 'ns3::empty', 'ns3::DefaultDeleter<ns3::Packet>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), import_from_module='ns.core', automatic_type_narrowing=True)
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::Packet', 'ns3::empty', 'ns3::DefaultDeleter<ns3::Packet>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
218c218
<     module.add_class('SimpleRefCount', template_parameters=['ns3::TraceSourceAccessor', 'ns3::empty', 'ns3::DefaultDeleter<ns3::TraceSourceAccessor>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), import_from_module='ns.core', automatic_type_narrowing=True)
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::TraceSourceAccessor', 'ns3::empty', 'ns3::DefaultDeleter<ns3::TraceSourceAccessor>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
225,227c225,227
<     typehandlers.add_type_alias('void ( * ) ( ns3::Time )', 'ns3::Time::TracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Time )*', 'ns3::Time::TracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Time )&', 'ns3::Time::TracedCallback&')
---
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Time )', u'ns3::Time::TracedCallback')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Time )*', u'ns3::Time::TracedCallback*')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Time )&', u'ns3::Time::TracedCallback&')
251c251
<     module.add_class('AttributeChecker', import_from_module='ns.core', parent=root_module['ns3::SimpleRefCount< ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker> >'], allow_subclassing=False, automatic_type_narrowing=True)
---
>     module.add_class('AttributeChecker', allow_subclassing=False, automatic_type_narrowing=True, import_from_module='ns.core', parent=root_module['ns3::SimpleRefCount< ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker> >'])
253c253
<     module.add_class('AttributeValue', import_from_module='ns.core', parent=root_module['ns3::SimpleRefCount< ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue> >'], allow_subclassing=False, automatic_type_narrowing=True)
---
>     module.add_class('AttributeValue', allow_subclassing=False, automatic_type_narrowing=True, import_from_module='ns.core', parent=root_module['ns3::SimpleRefCount< ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue> >'])
272,277d271
<     ## channel-condition-model.h (module 'propagation'): ns3::ChannelCondition [class]
<     module.add_class('ChannelCondition', import_from_module='ns.propagation', parent=root_module['ns3::Object'])
<     ## channel-condition-model.h (module 'propagation'): ns3::ChannelCondition::LosConditionValue [enumeration]
<     module.add_enum('LosConditionValue', ['LOS', 'NLOS'], outer_class=root_module['ns3::ChannelCondition'], import_from_module='ns.propagation')
<     ## channel-condition-model.h (module 'propagation'): ns3::ChannelConditionModel [class]
<     module.add_class('ChannelConditionModel', import_from_module='ns.propagation', parent=root_module['ns3::Object'])
342,346d335
<     ## mobility-model.h (module 'mobility'): ns3::MobilityModel [class]
<     module.add_class('MobilityModel', import_from_module='ns.mobility', parent=root_module['ns3::Object'])
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::MobilityModel const > )', 'ns3::MobilityModel::TracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::MobilityModel const > )*', 'ns3::MobilityModel::TracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::MobilityModel const > )&', 'ns3::MobilityModel::TracedCallback&')
353,363c342,350
<     typehandlers.add_type_alias('void ( * ) (  )', 'ns3::NetDevice::LinkChangeTracedCallback')
<     typehandlers.add_type_alias('void ( * ) (  )*', 'ns3::NetDevice::LinkChangeTracedCallback*')
<     typehandlers.add_type_alias('void ( * ) (  )&', 'ns3::NetDevice::LinkChangeTracedCallback&')
<     typehandlers.add_type_alias('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::NetDevice::ReceiveCallback')
<     typehandlers.add_type_alias('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::NetDevice::ReceiveCallback*')
<     typehandlers.add_type_alias('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::NetDevice::ReceiveCallback&')
<     typehandlers.add_type_alias('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >', 'ns3::NetDevice::PromiscReceiveCallback')
<     typehandlers.add_type_alias('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::NetDevice::PromiscReceiveCallback*')
<     typehandlers.add_type_alias('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::NetDevice::PromiscReceiveCallback&')
<     ## channel-condition-model.h (module 'propagation'): ns3::NeverLosChannelConditionModel [class]
<     module.add_class('NeverLosChannelConditionModel', import_from_module='ns.propagation', parent=root_module['ns3::ChannelConditionModel'])
---
>     typehandlers.add_type_alias(u'void ( * ) (  )', u'ns3::NetDevice::LinkChangeTracedCallback')
>     typehandlers.add_type_alias(u'void ( * ) (  )*', u'ns3::NetDevice::LinkChangeTracedCallback*')
>     typehandlers.add_type_alias(u'void ( * ) (  )&', u'ns3::NetDevice::LinkChangeTracedCallback&')
>     typehandlers.add_type_alias(u'ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', u'ns3::NetDevice::ReceiveCallback')
>     typehandlers.add_type_alias(u'ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', u'ns3::NetDevice::ReceiveCallback*')
>     typehandlers.add_type_alias(u'ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', u'ns3::NetDevice::ReceiveCallback&')
>     typehandlers.add_type_alias(u'ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >', u'ns3::NetDevice::PromiscReceiveCallback')
>     typehandlers.add_type_alias(u'ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >*', u'ns3::NetDevice::PromiscReceiveCallback*')
>     typehandlers.add_type_alias(u'ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >&', u'ns3::NetDevice::PromiscReceiveCallback&')
368,373c355,360
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >', 'ns3::Node::ProtocolHandler')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::Node::ProtocolHandler*')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::Node::ProtocolHandler&')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::Node::DeviceAdditionListener')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::Node::DeviceAdditionListener*')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::Node::DeviceAdditionListener&')
---
>     typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >', u'ns3::Node::ProtocolHandler')
>     typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >*', u'ns3::Node::ProtocolHandler*')
>     typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >&', u'ns3::Node::ProtocolHandler&')
>     typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', u'ns3::Node::DeviceAdditionListener')
>     typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', u'ns3::Node::DeviceAdditionListener*')
>     typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', u'ns3::Node::DeviceAdditionListener&')
386,403c373,390
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const > )', 'ns3::Packet::TracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const > )*', 'ns3::Packet::TracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const > )&', 'ns3::Packet::TracedCallback&')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Address const & )', 'ns3::Packet::AddressTracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Address const & )*', 'ns3::Packet::AddressTracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Address const & )&', 'ns3::Packet::AddressTracedCallback&')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const > const, ns3::Address const &, ns3::Address const & )', 'ns3::Packet::TwoAddressTracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const > const, ns3::Address const &, ns3::Address const & )*', 'ns3::Packet::TwoAddressTracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const > const, ns3::Address const &, ns3::Address const & )&', 'ns3::Packet::TwoAddressTracedCallback&')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Mac48Address )', 'ns3::Packet::Mac48AddressTracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Mac48Address )*', 'ns3::Packet::Mac48AddressTracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Mac48Address )&', 'ns3::Packet::Mac48AddressTracedCallback&')
<     typehandlers.add_type_alias('void ( * ) ( uint32_t, uint32_t )', 'ns3::Packet::SizeTracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( uint32_t, uint32_t )*', 'ns3::Packet::SizeTracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( uint32_t, uint32_t )&', 'ns3::Packet::SizeTracedCallback&')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, double )', 'ns3::Packet::SinrTracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, double )*', 'ns3::Packet::SinrTracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, double )&', 'ns3::Packet::SinrTracedCallback&')
---
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const > )', u'ns3::Packet::TracedCallback')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const > )*', u'ns3::Packet::TracedCallback*')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const > )&', u'ns3::Packet::TracedCallback&')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Address const & )', u'ns3::Packet::AddressTracedCallback')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Address const & )*', u'ns3::Packet::AddressTracedCallback*')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Address const & )&', u'ns3::Packet::AddressTracedCallback&')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const > const, ns3::Address const &, ns3::Address const & )', u'ns3::Packet::TwoAddressTracedCallback')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const > const, ns3::Address const &, ns3::Address const & )*', u'ns3::Packet::TwoAddressTracedCallback*')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const > const, ns3::Address const &, ns3::Address const & )&', u'ns3::Packet::TwoAddressTracedCallback&')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Mac48Address )', u'ns3::Packet::Mac48AddressTracedCallback')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Mac48Address )*', u'ns3::Packet::Mac48AddressTracedCallback*')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Mac48Address )&', u'ns3::Packet::Mac48AddressTracedCallback&')
>     typehandlers.add_type_alias(u'void ( * ) ( uint32_t, uint32_t )', u'ns3::Packet::SizeTracedCallback')
>     typehandlers.add_type_alias(u'void ( * ) ( uint32_t, uint32_t )*', u'ns3::Packet::SizeTracedCallback*')
>     typehandlers.add_type_alias(u'void ( * ) ( uint32_t, uint32_t )&', u'ns3::Packet::SizeTracedCallback&')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const >, double )', u'ns3::Packet::SinrTracedCallback')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const >, double )*', u'ns3::Packet::SinrTracedCallback*')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const >, double )&', u'ns3::Packet::SinrTracedCallback&')
406,417d392
<     ## channel-condition-model.h (module 'propagation'): ns3::ThreeGppChannelConditionModel [class]
<     module.add_class('ThreeGppChannelConditionModel', import_from_module='ns.propagation', parent=root_module['ns3::ChannelConditionModel'])
<     ## channel-condition-model.h (module 'propagation'): ns3::ThreeGppIndoorMixedOfficeChannelConditionModel [class]
<     module.add_class('ThreeGppIndoorMixedOfficeChannelConditionModel', import_from_module='ns.propagation', parent=root_module['ns3::ThreeGppChannelConditionModel'])
<     ## channel-condition-model.h (module 'propagation'): ns3::ThreeGppIndoorOpenOfficeChannelConditionModel [class]
<     module.add_class('ThreeGppIndoorOpenOfficeChannelConditionModel', import_from_module='ns.propagation', parent=root_module['ns3::ThreeGppChannelConditionModel'])
<     ## channel-condition-model.h (module 'propagation'): ns3::ThreeGppRmaChannelConditionModel [class]
<     module.add_class('ThreeGppRmaChannelConditionModel', import_from_module='ns.propagation', parent=root_module['ns3::ThreeGppChannelConditionModel'])
<     ## channel-condition-model.h (module 'propagation'): ns3::ThreeGppUmaChannelConditionModel [class]
<     module.add_class('ThreeGppUmaChannelConditionModel', import_from_module='ns.propagation', parent=root_module['ns3::ThreeGppChannelConditionModel'])
<     ## channel-condition-model.h (module 'propagation'): ns3::ThreeGppUmiStreetCanyonChannelConditionModel [class]
<     module.add_class('ThreeGppUmiStreetCanyonChannelConditionModel', import_from_module='ns.propagation', parent=root_module['ns3::ThreeGppChannelConditionModel'])
436,439d410
<     ## channel-condition-model.h (module 'propagation'): ns3::AlwaysLosChannelConditionModel [class]
<     module.add_class('AlwaysLosChannelConditionModel', import_from_module='ns.propagation', parent=root_module['ns3::ChannelConditionModel'])
<     ## buildings-channel-condition-model.h (module 'buildings'): ns3::BuildingsChannelConditionModel [class]
<     module.add_class('BuildingsChannelConditionModel', parent=root_module['ns3::ChannelConditionModel'])
441,443c412
<     module.add_class('CallbackImpl', template_parameters=['ns3::ObjectBase *', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::MobilityModel>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', template_parameters=['void', 'ns3::Ptr<const ns3::MobilityModel>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'])
---
>     module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['ns3::ObjectBase *', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
445c414
<     module.add_class('CallbackImpl', template_parameters=['void', 'ns3::Ptr<ns3::NetDevice>', 'ns3::Ptr<const ns3::Packet>', 'unsigned short', 'const ns3::Address &', 'const ns3::Address &', 'ns3::NetDevice::PacketType', 'ns3::empty', 'ns3::empty', 'ns3::empty'], import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'])
---
>     module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'ns3::Ptr<ns3::NetDevice>', 'ns3::Ptr<const ns3::Packet>', 'unsigned short', 'const ns3::Address &', 'const ns3::Address &', 'ns3::NetDevice::PacketType', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
447,450c416,419
<     module.add_class('CallbackImpl', template_parameters=['void', 'ns3::Ptr<ns3::NetDevice>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'])
<     typehandlers.add_type_alias('ns3::Vector3D', 'ns3::Vector')
<     typehandlers.add_type_alias('ns3::Vector3D*', 'ns3::Vector*')
<     typehandlers.add_type_alias('ns3::Vector3D&', 'ns3::Vector&')
---
>     module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'ns3::Ptr<ns3::NetDevice>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
>     typehandlers.add_type_alias(u'ns3::Vector3D', u'ns3::Vector')
>     typehandlers.add_type_alias(u'ns3::Vector3D*', u'ns3::Vector*')
>     typehandlers.add_type_alias(u'ns3::Vector3D&', u'ns3::Vector&')
452,454c421,423
<     typehandlers.add_type_alias('ns3::Vector3DValue', 'ns3::VectorValue')
<     typehandlers.add_type_alias('ns3::Vector3DValue*', 'ns3::VectorValue*')
<     typehandlers.add_type_alias('ns3::Vector3DValue&', 'ns3::VectorValue&')
---
>     typehandlers.add_type_alias(u'ns3::Vector3DValue', u'ns3::VectorValue')
>     typehandlers.add_type_alias(u'ns3::Vector3DValue*', u'ns3::VectorValue*')
>     typehandlers.add_type_alias(u'ns3::Vector3DValue&', u'ns3::VectorValue&')
456,458c425,427
<     typehandlers.add_type_alias('ns3::Vector3DChecker', 'ns3::VectorChecker')
<     typehandlers.add_type_alias('ns3::Vector3DChecker*', 'ns3::VectorChecker*')
<     typehandlers.add_type_alias('ns3::Vector3DChecker&', 'ns3::VectorChecker&')
---
>     typehandlers.add_type_alias(u'ns3::Vector3DChecker', u'ns3::VectorChecker')
>     typehandlers.add_type_alias(u'ns3::Vector3DChecker*', u'ns3::VectorChecker*')
>     typehandlers.add_type_alias(u'ns3::Vector3DChecker&', u'ns3::VectorChecker&')
488,493c457,462
<     typehandlers.add_type_alias('uint32_t ( * ) ( char const *, std::size_t const )', 'ns3::Hash::Hash32Function_ptr')
<     typehandlers.add_type_alias('uint32_t ( * ) ( char const *, std::size_t const )*', 'ns3::Hash::Hash32Function_ptr*')
<     typehandlers.add_type_alias('uint32_t ( * ) ( char const *, std::size_t const )&', 'ns3::Hash::Hash32Function_ptr&')
<     typehandlers.add_type_alias('uint64_t ( * ) ( char const *, std::size_t const )', 'ns3::Hash::Hash64Function_ptr')
<     typehandlers.add_type_alias('uint64_t ( * ) ( char const *, std::size_t const )*', 'ns3::Hash::Hash64Function_ptr*')
<     typehandlers.add_type_alias('uint64_t ( * ) ( char const *, std::size_t const )&', 'ns3::Hash::Hash64Function_ptr&')
---
>     typehandlers.add_type_alias(u'uint32_t ( * ) ( char const *, std::size_t const )', u'ns3::Hash::Hash32Function_ptr')
>     typehandlers.add_type_alias(u'uint32_t ( * ) ( char const *, std::size_t const )*', u'ns3::Hash::Hash32Function_ptr*')
>     typehandlers.add_type_alias(u'uint32_t ( * ) ( char const *, std::size_t const )&', u'ns3::Hash::Hash32Function_ptr&')
>     typehandlers.add_type_alias(u'uint64_t ( * ) ( char const *, std::size_t const )', u'ns3::Hash::Hash64Function_ptr')
>     typehandlers.add_type_alias(u'uint64_t ( * ) ( char const *, std::size_t const )*', u'ns3::Hash::Hash64Function_ptr*')
>     typehandlers.add_type_alias(u'uint64_t ( * ) ( char const *, std::size_t const )&', u'ns3::Hash::Hash64Function_ptr&')
516,518c485,487
<     typehandlers.add_type_alias('void ( * ) ( ns3::Time, ns3::Time )', 'ns3::TracedValueCallback::Time')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Time, ns3::Time )*', 'ns3::TracedValueCallback::Time*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Time, ns3::Time )&', 'ns3::TracedValueCallback::Time&')
---
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Time, ns3::Time )', u'ns3::TracedValueCallback::Time')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Time, ns3::Time )*', u'ns3::TracedValueCallback::Time*')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Time, ns3::Time )&', u'ns3::TracedValueCallback::Time&')
619,620d587
<     register_Ns3ChannelCondition_methods(root_module, root_module['ns3::ChannelCondition'])
<     register_Ns3ChannelConditionModel_methods(root_module, root_module['ns3::ChannelConditionModel'])
652d618
<     register_Ns3MobilityModel_methods(root_module, root_module['ns3::MobilityModel'])
655d620
<     register_Ns3NeverLosChannelConditionModel_methods(root_module, root_module['ns3::NeverLosChannelConditionModel'])
665,670d629
<     register_Ns3ThreeGppChannelConditionModel_methods(root_module, root_module['ns3::ThreeGppChannelConditionModel'])
<     register_Ns3ThreeGppIndoorMixedOfficeChannelConditionModel_methods(root_module, root_module['ns3::ThreeGppIndoorMixedOfficeChannelConditionModel'])
<     register_Ns3ThreeGppIndoorOpenOfficeChannelConditionModel_methods(root_module, root_module['ns3::ThreeGppIndoorOpenOfficeChannelConditionModel'])
<     register_Ns3ThreeGppRmaChannelConditionModel_methods(root_module, root_module['ns3::ThreeGppRmaChannelConditionModel'])
<     register_Ns3ThreeGppUmaChannelConditionModel_methods(root_module, root_module['ns3::ThreeGppUmaChannelConditionModel'])
<     register_Ns3ThreeGppUmiStreetCanyonChannelConditionModel_methods(root_module, root_module['ns3::ThreeGppUmiStreetCanyonChannelConditionModel'])
680,681d638
<     register_Ns3AlwaysLosChannelConditionModel_methods(root_module, root_module['ns3::AlwaysLosChannelConditionModel'])
<     register_Ns3BuildingsChannelConditionModel_methods(root_module, root_module['ns3::BuildingsChannelConditionModel'])
683d639
<     register_Ns3CallbackImpl__Void_Ns3Ptr__lt__const_ns3MobilityModel__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<const ns3::MobilityModel>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
825,829d780
<     ## box.h (module 'mobility'): bool ns3::Box::IsIntersect(ns3::Vector const & l1, ns3::Vector const & l2) const [member function]
<     cls.add_method('IsIntersect', 
<                    'bool', 
<                    [param('ns3::Vector const &', 'l1'), param('ns3::Vector const &', 'l2')], 
<                    is_const=True)
1183c1134
<     ## buildings-helper.h (module 'buildings'): static void ns3::BuildingsHelper::MakeConsistent(ns3::Ptr<ns3::MobilityModel> mm) [member function]
---
>     ## buildings-helper.h (module 'buildings'): static void ns3::BuildingsHelper::MakeConsistent(ns3::Ptr<ns3::MobilityModel> bmm) [member function]
1186,1187c1137,1138
<                    [param('ns3::Ptr< ns3::MobilityModel >', 'mm')], 
<                    deprecated=True, is_static=True)
---
>                    [param('ns3::Ptr< ns3::MobilityModel >', 'bmm')], 
>                    is_static=True)
1192c1143
<                    deprecated=True, is_static=True)
---
>                    is_static=True)
1570c1521
<                    is_const=True, deprecated=True)
---
>                    is_const=True)
1662c1613
<                    is_const=True, deprecated=True)
---
>                    is_const=True)
1694c1645
<     ## ipv6-address.h (module 'network'): ns3::Ipv6Address ns3::Ipv6Address::CombinePrefix(ns3::Ipv6Prefix const & prefix) const [member function]
---
>     ## ipv6-address.h (module 'network'): ns3::Ipv6Address ns3::Ipv6Address::CombinePrefix(ns3::Ipv6Prefix const & prefix) [member function]
1697,1698c1648
<                    [param('ns3::Ipv6Prefix const &', 'prefix')], 
<                    is_const=True)
---
>                    [param('ns3::Ipv6Prefix const &', 'prefix')])
1754,1758d1703
<     ## ipv6-address.h (module 'network'): bool ns3::Ipv6Address::HasPrefix(ns3::Ipv6Prefix const & prefix) const [member function]
<     cls.add_method('HasPrefix', 
<                    'bool', 
<                    [param('ns3::Ipv6Prefix const &', 'prefix')], 
<                    is_const=True)
1763c1708
<                    is_const=True, deprecated=True)
---
>                    deprecated=True, is_const=True)
1788c1733
<                    is_const=True, deprecated=True)
---
>                    is_const=True)
1824,1828d1768
<     ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::MakeAutoconfiguredAddress(ns3::Address addr, ns3::Ipv6Address prefix) [member function]
<     cls.add_method('MakeAutoconfiguredAddress', 
<                    'ns3::Ipv6Address', 
<                    [param('ns3::Address', 'addr'), param('ns3::Ipv6Address', 'prefix')], 
<                    is_static=True)
1849,1853d1788
<     ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::MakeAutoconfiguredLinkLocalAddress(ns3::Address mac) [member function]
<     cls.add_method('MakeAutoconfiguredLinkLocalAddress', 
<                    'ns3::Ipv6Address', 
<                    [param('ns3::Address', 'mac')], 
<                    is_static=True)
1914,1917d1848
<     ## ipv6-address.h (module 'network'): ns3::Ipv6Prefix::Ipv6Prefix(uint8_t * prefix, uint8_t prefixLength) [constructor]
<     cls.add_constructor([param('uint8_t *', 'prefix'), param('uint8_t', 'prefixLength')])
<     ## ipv6-address.h (module 'network'): ns3::Ipv6Prefix::Ipv6Prefix(char const * prefix, uint8_t prefixLength) [constructor]
<     cls.add_constructor([param('char const *', 'prefix'), param('uint8_t', 'prefixLength')])
1934,1938d1864
<     ## ipv6-address.h (module 'network'): uint8_t ns3::Ipv6Prefix::GetMinimumPrefixLength() const [member function]
<     cls.add_method('GetMinimumPrefixLength', 
<                    'uint8_t', 
<                    [], 
<                    is_const=True)
1958c1884
<                    is_const=True, deprecated=True)
---
>                    is_const=True)
1969,1972d1894
<     ## ipv6-address.h (module 'network'): void ns3::Ipv6Prefix::SetPrefixLength(uint8_t prefixLength) [member function]
<     cls.add_method('SetPrefixLength', 
<                    'void', 
<                    [param('uint8_t', 'prefixLength')])
2177c2099
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
2249,2253d2170
<     ## object-factory.h (module 'core'): bool ns3::ObjectFactory::IsTypeIdSet() const [member function]
<     cls.add_method('IsTypeIdSet', 
<                    'bool', 
<                    [], 
<                    is_const=True)
2483c2400
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
2488c2405
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
2498c2415
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
2503c2420
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
2797,2803c2714,2715
<     cls.add_binary_numeric_operator('-', root_module['ns3::Vector2D'], root_module['ns3::Vector2D'], param('ns3::Vector2D const &', 'right'))
<     cls.add_binary_numeric_operator('+', root_module['ns3::Vector2D'], root_module['ns3::Vector2D'], param('ns3::Vector2D const &', 'right'))
<     cls.add_binary_comparison_operator('!=')
<     cls.add_binary_comparison_operator('==')
<     cls.add_binary_comparison_operator('>=')
<     cls.add_binary_comparison_operator('>')
<     cls.add_binary_comparison_operator('<=')
---
>     cls.add_binary_numeric_operator('-', root_module['ns3::Vector2D'], root_module['ns3::Vector2D'], param('ns3::Vector2D const &', u'right'))
>     cls.add_binary_numeric_operator('+', root_module['ns3::Vector2D'], root_module['ns3::Vector2D'], param('ns3::Vector2D const &', u'right'))
2824,2830c2736,2737
<     cls.add_binary_numeric_operator('-', root_module['ns3::Vector3D'], root_module['ns3::Vector3D'], param('ns3::Vector3D const &', 'right'))
<     cls.add_binary_numeric_operator('+', root_module['ns3::Vector3D'], root_module['ns3::Vector3D'], param('ns3::Vector3D const &', 'right'))
<     cls.add_binary_comparison_operator('!=')
<     cls.add_binary_comparison_operator('==')
<     cls.add_binary_comparison_operator('>=')
<     cls.add_binary_comparison_operator('>')
<     cls.add_binary_comparison_operator('<=')
---
>     cls.add_binary_numeric_operator('-', root_module['ns3::Vector3D'], root_module['ns3::Vector3D'], param('ns3::Vector3D const &', u'right'))
>     cls.add_binary_numeric_operator('+', root_module['ns3::Vector3D'], root_module['ns3::Vector3D'], param('ns3::Vector3D const &', u'right'))
2858,2862c2765,2768
<     cls.add_binary_numeric_operator('*', root_module['ns3::Time'], root_module['ns3::int64x64_t'], param('ns3::Time const &', 'right'))
<     cls.add_binary_numeric_operator('+', root_module['ns3::int64x64_t'], root_module['ns3::int64x64_t'], param('ns3::int64x64_t const &', 'right'))
<     cls.add_binary_numeric_operator('-', root_module['ns3::int64x64_t'], root_module['ns3::int64x64_t'], param('ns3::int64x64_t const &', 'right'))
<     cls.add_binary_numeric_operator('*', root_module['ns3::int64x64_t'], root_module['ns3::int64x64_t'], param('ns3::int64x64_t const &', 'right'))
<     cls.add_binary_numeric_operator('/', root_module['ns3::int64x64_t'], root_module['ns3::int64x64_t'], param('ns3::int64x64_t const &', 'right'))
---
>     cls.add_binary_numeric_operator('+', root_module['ns3::int64x64_t'], root_module['ns3::int64x64_t'], param('ns3::int64x64_t const &', u'right'))
>     cls.add_binary_numeric_operator('-', root_module['ns3::int64x64_t'], root_module['ns3::int64x64_t'], param('ns3::int64x64_t const &', u'right'))
>     cls.add_binary_numeric_operator('*', root_module['ns3::int64x64_t'], root_module['ns3::int64x64_t'], param('ns3::int64x64_t const &', u'right'))
>     cls.add_binary_numeric_operator('/', root_module['ns3::int64x64_t'], root_module['ns3::int64x64_t'], param('ns3::int64x64_t const &', u'right'))
2870,2873c2776,2779
<     cls.add_inplace_numeric_operator('+=', param('ns3::int64x64_t const &', 'right'))
<     cls.add_inplace_numeric_operator('-=', param('ns3::int64x64_t const &', 'right'))
<     cls.add_inplace_numeric_operator('*=', param('ns3::int64x64_t const &', 'right'))
<     cls.add_inplace_numeric_operator('/=', param('ns3::int64x64_t const &', 'right'))
---
>     cls.add_inplace_numeric_operator('+=', param('ns3::int64x64_t const &', u'right'))
>     cls.add_inplace_numeric_operator('-=', param('ns3::int64x64_t const &', u'right'))
>     cls.add_inplace_numeric_operator('*=', param('ns3::int64x64_t const &', u'right'))
>     cls.add_inplace_numeric_operator('/=', param('ns3::int64x64_t const &', u'right'))
2934c2840
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
2949c2855
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
2962c2868
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
2967c2873
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
2977c2883
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
2982c2888
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
3065c2971
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
3070c2976
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
3107c3013
<                    is_const=True, visibility='private', is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
3112c3018
<                    visibility='private', is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
3207,3210d3112
<     ## position-allocator.h (module 'mobility'): void ns3::RandomDiscPositionAllocator::SetZ(double z) [member function]
<     cls.add_method('SetZ', 
<                    'void', 
<                    [param('double', 'z')])
3261,3264d3162
<     ## position-allocator.h (module 'mobility'): void ns3::RandomRectanglePositionAllocator::SetZ(double z) [member function]
<     cls.add_method('SetZ', 
<                    'void', 
<                    [param('double', 'z')])
3319c3217
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
3324c3222
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
3499,3507c3397,3402
<     cls.add_binary_numeric_operator('+', root_module['ns3::Time'], root_module['ns3::Time'], param('ns3::Time const &', 'right'))
<     cls.add_binary_numeric_operator('-', root_module['ns3::Time'], root_module['ns3::Time'], param('ns3::Time const &', 'right'))
<     cls.add_binary_numeric_operator('*', root_module['ns3::Time'], root_module['ns3::Time'], param('int64_t const &', 'right'))
<     cls.add_binary_numeric_operator('*', root_module['ns3::Time'], root_module['ns3::Time'], param('ns3::int64x64_t const &', 'right'))
<     cls.add_binary_numeric_operator('/', root_module['ns3::int64x64_t'], root_module['ns3::Time'], param('ns3::Time const &', 'right'))
<     cls.add_binary_numeric_operator('/', root_module['ns3::Time'], root_module['ns3::Time'], param('int64_t const &', 'right'))
<     cls.add_binary_numeric_operator('/', root_module['ns3::Time'], root_module['ns3::Time'], param('ns3::int64x64_t const &', 'right'))
<     cls.add_inplace_numeric_operator('+=', param('ns3::Time const &', 'right'))
<     cls.add_inplace_numeric_operator('-=', param('ns3::Time const &', 'right'))
---
>     cls.add_binary_numeric_operator('+', root_module['ns3::Time'], root_module['ns3::Time'], param('ns3::Time const &', u'right'))
>     cls.add_binary_numeric_operator('-', root_module['ns3::Time'], root_module['ns3::Time'], param('ns3::Time const &', u'right'))
>     cls.add_binary_numeric_operator('*', root_module['ns3::Time'], root_module['ns3::Time'], param('int64_t const &', u'right'))
>     cls.add_binary_numeric_operator('/', root_module['ns3::Time'], root_module['ns3::Time'], param('int64_t const &', u'right'))
>     cls.add_inplace_numeric_operator('+=', param('ns3::Time const &', u'right'))
>     cls.add_inplace_numeric_operator('-=', param('ns3::Time const &', u'right'))
3702c3597
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
3707c3602
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
3712c3607
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
3717c3612
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
3730c3625
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
3740c3635
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
3750c3645
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
3755c3650
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
3884,3887d3778
<     ## position-allocator.h (module 'mobility'): void ns3::UniformDiscPositionAllocator::SetZ(double z) [member function]
<     cls.add_method('SetZ', 
<                    'void', 
<                    [param('double', 'z')])
4051c3942
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
4056c3947
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
4061c3952
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
4066c3957
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
4078c3969
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
4083c3974
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
4088c3979
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
4098c3989
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
4103c3994
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
4108c3999
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
4120c4011
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
4125c4016
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
4130c4021
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
4245,4249d4135
<     ## building.h (module 'buildings'): bool ns3::Building::IsIntersect(ns3::Vector const & l1, ns3::Vector const & l2) const [member function]
<     cls.add_method('IsIntersect', 
<                    'bool', 
<                    [param('ns3::Vector const &', 'l1'), param('ns3::Vector const &', 'l2')], 
<                    is_const=True)
4276a4163,4167
>     ## buildings-propagation-loss-model.h (module 'buildings'): static ns3::TypeId ns3::BuildingsPropagationLossModel::GetTypeId() [member function]
>     cls.add_method('GetTypeId', 
>                    'ns3::TypeId', 
>                    [], 
>                    is_static=True)
4279,4283d4169
<     ## buildings-propagation-loss-model.h (module 'buildings'): double ns3::BuildingsPropagationLossModel::DoCalcRxPower(double txPowerDbm, ns3::Ptr<ns3::MobilityModel> a, ns3::Ptr<ns3::MobilityModel> b) const [member function]
<     cls.add_method('DoCalcRxPower', 
<                    'double', 
<                    [param('double', 'txPowerDbm'), param('ns3::Ptr< ns3::MobilityModel >', 'a'), param('ns3::Ptr< ns3::MobilityModel >', 'b')], 
<                    is_const=True, is_virtual=True)
4288,4300c4174,4176
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
<     ## buildings-propagation-loss-model.h (module 'buildings'): static ns3::TypeId ns3::BuildingsPropagationLossModel::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## buildings-propagation-loss-model.h (module 'buildings'): int64_t ns3::BuildingsPropagationLossModel::DoAssignStreams(int64_t stream) [member function]
<     cls.add_method('DoAssignStreams', 
<                    'int64_t', 
<                    [param('int64_t', 'stream')], 
<                    visibility='protected', is_virtual=True)
<     ## buildings-propagation-loss-model.h (module 'buildings'): double ns3::BuildingsPropagationLossModel::EvaluateSigma(ns3::Ptr<ns3::MobilityBuildingInfo> a, ns3::Ptr<ns3::MobilityBuildingInfo> b) const [member function]
<     cls.add_method('EvaluateSigma', 
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
>     ## buildings-propagation-loss-model.h (module 'buildings'): double ns3::BuildingsPropagationLossModel::DoCalcRxPower(double txPowerDbm, ns3::Ptr<ns3::MobilityModel> a, ns3::Ptr<ns3::MobilityModel> b) const [member function]
>     cls.add_method('DoCalcRxPower', 
4302,4303c4178,4179
<                    [param('ns3::Ptr< ns3::MobilityBuildingInfo >', 'a'), param('ns3::Ptr< ns3::MobilityBuildingInfo >', 'b')], 
<                    is_const=True, visibility='protected')
---
>                    [param('double', 'txPowerDbm'), param('ns3::Ptr< ns3::MobilityModel >', 'a'), param('ns3::Ptr< ns3::MobilityModel >', 'b')], 
>                    is_const=True, is_virtual=True)
4309,4313d4184
<     ## buildings-propagation-loss-model.h (module 'buildings'): double ns3::BuildingsPropagationLossModel::GetShadowing(ns3::Ptr<ns3::MobilityModel> a, ns3::Ptr<ns3::MobilityModel> b) const [member function]
<     cls.add_method('GetShadowing', 
<                    'double', 
<                    [param('ns3::Ptr< ns3::MobilityModel >', 'a'), param('ns3::Ptr< ns3::MobilityModel >', 'b')], 
<                    is_const=True, visibility='protected')
4323a4195,4209
>     ## buildings-propagation-loss-model.h (module 'buildings'): double ns3::BuildingsPropagationLossModel::GetShadowing(ns3::Ptr<ns3::MobilityModel> a, ns3::Ptr<ns3::MobilityModel> b) const [member function]
>     cls.add_method('GetShadowing', 
>                    'double', 
>                    [param('ns3::Ptr< ns3::MobilityModel >', 'a'), param('ns3::Ptr< ns3::MobilityModel >', 'b')], 
>                    is_const=True, visibility='protected')
>     ## buildings-propagation-loss-model.h (module 'buildings'): double ns3::BuildingsPropagationLossModel::EvaluateSigma(ns3::Ptr<ns3::MobilityBuildingInfo> a, ns3::Ptr<ns3::MobilityBuildingInfo> b) const [member function]
>     cls.add_method('EvaluateSigma', 
>                    'double', 
>                    [param('ns3::Ptr< ns3::MobilityBuildingInfo >', 'a'), param('ns3::Ptr< ns3::MobilityBuildingInfo >', 'b')], 
>                    is_const=True, visibility='protected')
>     ## buildings-propagation-loss-model.h (module 'buildings'): int64_t ns3::BuildingsPropagationLossModel::DoAssignStreams(int64_t stream) [member function]
>     cls.add_method('DoAssignStreams', 
>                    'int64_t', 
>                    [param('int64_t', 'stream')], 
>                    visibility='protected', is_virtual=True)
4342c4228
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
4347c4233
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
4352c4238
<                    visibility='protected', is_static=True)
---
>                    is_static=True, visibility='protected')
4357c4243
<                    visibility='protected', is_static=True, template_parameters=['ns3::ObjectBase*'])
---
>                    is_static=True, visibility='protected', template_parameters=[u'ns3::ObjectBase*'])
4362c4248
<                    visibility='protected', is_static=True, template_parameters=['void'])
---
>                    is_static=True, visibility='protected', template_parameters=[u'void'])
4367c4253
<                    visibility='protected', is_static=True, template_parameters=['ns3::Ptr<ns3::NetDevice> '])
---
>                    is_static=True, visibility='protected', template_parameters=[u'ns3::Ptr<ns3::NetDevice> '])
4372c4258
<                    visibility='protected', is_static=True, template_parameters=['ns3::Ptr<ns3::Packet const> '])
---
>                    is_static=True, visibility='protected', template_parameters=[u'ns3::Ptr<ns3::Packet const> '])
4377c4263
<                    visibility='protected', is_static=True, template_parameters=['unsigned short'])
---
>                    is_static=True, visibility='protected', template_parameters=[u'unsigned short'])
4382c4268
<                    visibility='protected', is_static=True, template_parameters=['ns3::Address const&'])
---
>                    is_static=True, visibility='protected', template_parameters=[u'ns3::Address const&'])
4387,4392c4273
<                    visibility='protected', is_static=True, template_parameters=['ns3::NetDevice::PacketType'])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    visibility='protected', is_static=True, template_parameters=['ns3::Ptr<ns3::MobilityModel const> '])
---
>                    is_static=True, visibility='protected', template_parameters=[u'ns3::NetDevice::PacketType'])
4423,4463d4303
< def register_Ns3ChannelCondition_methods(root_module, cls):
<     ## channel-condition-model.h (module 'propagation'): ns3::ChannelCondition::ChannelCondition(ns3::ChannelCondition const & arg0) [constructor]
<     cls.add_constructor([param('ns3::ChannelCondition const &', 'arg0')])
<     ## channel-condition-model.h (module 'propagation'): ns3::ChannelCondition::ChannelCondition() [constructor]
<     cls.add_constructor([])
<     ## channel-condition-model.h (module 'propagation'): ns3::ChannelCondition::LosConditionValue ns3::ChannelCondition::GetLosCondition() const [member function]
<     cls.add_method('GetLosCondition', 
<                    'ns3::ChannelCondition::LosConditionValue', 
<                    [], 
<                    is_const=True)
<     ## channel-condition-model.h (module 'propagation'): static ns3::TypeId ns3::ChannelCondition::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## channel-condition-model.h (module 'propagation'): void ns3::ChannelCondition::SetLosCondition(ns3::ChannelCondition::LosConditionValue losCondition) [member function]
<     cls.add_method('SetLosCondition', 
<                    'void', 
<                    [param('ns3::ChannelCondition::LosConditionValue', 'losCondition')])
<     return
< 
< def register_Ns3ChannelConditionModel_methods(root_module, cls):
<     ## channel-condition-model.h (module 'propagation'): static ns3::TypeId ns3::ChannelConditionModel::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## channel-condition-model.h (module 'propagation'): ns3::ChannelConditionModel::ChannelConditionModel() [constructor]
<     cls.add_constructor([])
<     ## channel-condition-model.h (module 'propagation'): ns3::Ptr<ns3::ChannelCondition> ns3::ChannelConditionModel::GetChannelCondition(ns3::Ptr<const ns3::MobilityModel> a, ns3::Ptr<const ns3::MobilityModel> b) const [member function]
<     cls.add_method('GetChannelCondition', 
<                    'ns3::Ptr< ns3::ChannelCondition >', 
<                    [param('ns3::Ptr< ns3::MobilityModel const >', 'a'), param('ns3::Ptr< ns3::MobilityModel const >', 'b')], 
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
<     ## channel-condition-model.h (module 'propagation'): int64_t ns3::ChannelConditionModel::AssignStreams(int64_t stream) [member function]
<     cls.add_method('AssignStreams', 
<                    'int64_t', 
<                    [param('int64_t', 'stream')], 
<                    is_virtual=True, is_pure_virtual=True)
<     return
< 
4943,4946d4782
<     ## position-allocator.h (module 'mobility'): void ns3::GridPositionAllocator::SetZ(double z) [member function]
<     cls.add_method('SetZ', 
<                    'void', 
<                    [param('double', 'z')])
5370,5375c5206
<                    [], 
<                    deprecated=True)
<     ## mobility-building-info.h (module 'buildings'): void ns3::MobilityBuildingInfo::MakeConsistent(ns3::Ptr<ns3::MobilityModel> mm) [member function]
<     cls.add_method('MakeConsistent', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::MobilityModel >', 'mm')])
---
>                    [])
5388,5457d5218
<     ## mobility-building-info.h (module 'buildings'): void ns3::MobilityBuildingInfo::DoInitialize() [member function]
<     cls.add_method('DoInitialize', 
<                    'void', 
<                    [], 
<                    visibility='protected', is_virtual=True)
<     return
< 
< def register_Ns3MobilityModel_methods(root_module, cls):
<     ## mobility-model.h (module 'mobility'): ns3::MobilityModel::MobilityModel(ns3::MobilityModel const & arg0) [constructor]
<     cls.add_constructor([param('ns3::MobilityModel const &', 'arg0')])
<     ## mobility-model.h (module 'mobility'): ns3::MobilityModel::MobilityModel() [constructor]
<     cls.add_constructor([])
<     ## mobility-model.h (module 'mobility'): int64_t ns3::MobilityModel::AssignStreams(int64_t stream) [member function]
<     cls.add_method('AssignStreams', 
<                    'int64_t', 
<                    [param('int64_t', 'stream')])
<     ## mobility-model.h (module 'mobility'): double ns3::MobilityModel::GetDistanceFrom(ns3::Ptr<const ns3::MobilityModel> position) const [member function]
<     cls.add_method('GetDistanceFrom', 
<                    'double', 
<                    [param('ns3::Ptr< ns3::MobilityModel const >', 'position')], 
<                    is_const=True)
<     ## mobility-model.h (module 'mobility'): ns3::Vector ns3::MobilityModel::GetPosition() const [member function]
<     cls.add_method('GetPosition', 
<                    'ns3::Vector', 
<                    [], 
<                    is_const=True)
<     ## mobility-model.h (module 'mobility'): double ns3::MobilityModel::GetRelativeSpeed(ns3::Ptr<const ns3::MobilityModel> other) const [member function]
<     cls.add_method('GetRelativeSpeed', 
<                    'double', 
<                    [param('ns3::Ptr< ns3::MobilityModel const >', 'other')], 
<                    is_const=True)
<     ## mobility-model.h (module 'mobility'): static ns3::TypeId ns3::MobilityModel::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## mobility-model.h (module 'mobility'): ns3::Vector ns3::MobilityModel::GetVelocity() const [member function]
<     cls.add_method('GetVelocity', 
<                    'ns3::Vector', 
<                    [], 
<                    is_const=True)
<     ## mobility-model.h (module 'mobility'): void ns3::MobilityModel::SetPosition(ns3::Vector const & position) [member function]
<     cls.add_method('SetPosition', 
<                    'void', 
<                    [param('ns3::Vector const &', 'position')])
<     ## mobility-model.h (module 'mobility'): void ns3::MobilityModel::NotifyCourseChange() const [member function]
<     cls.add_method('NotifyCourseChange', 
<                    'void', 
<                    [], 
<                    is_const=True, visibility='protected')
<     ## mobility-model.h (module 'mobility'): int64_t ns3::MobilityModel::DoAssignStreams(int64_t start) [member function]
<     cls.add_method('DoAssignStreams', 
<                    'int64_t', 
<                    [param('int64_t', 'start')], 
<                    visibility='private', is_virtual=True)
<     ## mobility-model.h (module 'mobility'): ns3::Vector ns3::MobilityModel::DoGetPosition() const [member function]
<     cls.add_method('DoGetPosition', 
<                    'ns3::Vector', 
<                    [], 
<                    is_const=True, visibility='private', is_virtual=True, is_pure_virtual=True)
<     ## mobility-model.h (module 'mobility'): ns3::Vector ns3::MobilityModel::DoGetVelocity() const [member function]
<     cls.add_method('DoGetVelocity', 
<                    'ns3::Vector', 
<                    [], 
<                    is_const=True, visibility='private', is_virtual=True, is_pure_virtual=True)
<     ## mobility-model.h (module 'mobility'): void ns3::MobilityModel::DoSetPosition(ns3::Vector const & position) [member function]
<     cls.add_method('DoSetPosition', 
<                    'void', 
<                    [param('ns3::Vector const &', 'position')], 
<                    visibility='private', is_virtual=True, is_pure_virtual=True)
5489c5250
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
5494c5255
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
5499c5260
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
5504c5265
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
5509c5270
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
5514c5275
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
5519c5280
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
5524c5285
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
5529c5290
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
5539c5300
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
5544c5305
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
5549c5310
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
5554c5315
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
5559c5320
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
5564c5325
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
5569c5330
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
5574c5335
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
5579c5340
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
5584c5345
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
5589c5350
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
5594c5355
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
5599c5360
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
5604c5365
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
5609,5629c5370
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3NeverLosChannelConditionModel_methods(root_module, cls):
<     ## channel-condition-model.h (module 'propagation'): static ns3::TypeId ns3::NeverLosChannelConditionModel::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## channel-condition-model.h (module 'propagation'): ns3::NeverLosChannelConditionModel::NeverLosChannelConditionModel() [constructor]
<     cls.add_constructor([])
<     ## channel-condition-model.h (module 'propagation'): ns3::Ptr<ns3::ChannelCondition> ns3::NeverLosChannelConditionModel::GetChannelCondition(ns3::Ptr<const ns3::MobilityModel> a, ns3::Ptr<const ns3::MobilityModel> b) const [member function]
<     cls.add_method('GetChannelCondition', 
<                    'ns3::Ptr< ns3::ChannelCondition >', 
<                    [param('ns3::Ptr< ns3::MobilityModel const >', 'a'), param('ns3::Ptr< ns3::MobilityModel const >', 'b')], 
<                    is_const=True, is_virtual=True)
<     ## channel-condition-model.h (module 'propagation'): int64_t ns3::NeverLosChannelConditionModel::AssignStreams(int64_t stream) [member function]
<     cls.add_method('AssignStreams', 
<                    'int64_t', 
<                    [param('int64_t', 'stream')], 
<                    is_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
5919,5923d5659
<     ## packet.h (module 'network'): void ns3::Packet::AddByteTag(ns3::Tag const & tag, uint32_t start, uint32_t end) const [member function]
<     cls.add_method('AddByteTag', 
<                    'void', 
<                    [param('ns3::Tag const &', 'tag'), param('uint32_t', 'start'), param('uint32_t', 'end')], 
<                    is_const=True)
6109c5845
<                    is_const=True, deprecated=True)
---
>                    deprecated=True, is_const=True)
6145,6249d5880
< def register_Ns3ThreeGppChannelConditionModel_methods(root_module, cls):
<     ## channel-condition-model.h (module 'propagation'): ns3::ThreeGppChannelConditionModel::ThreeGppChannelConditionModel() [constructor]
<     cls.add_constructor([])
<     ## channel-condition-model.h (module 'propagation'): int64_t ns3::ThreeGppChannelConditionModel::AssignStreams(int64_t stream) [member function]
<     cls.add_method('AssignStreams', 
<                    'int64_t', 
<                    [param('int64_t', 'stream')], 
<                    is_virtual=True)
<     ## channel-condition-model.h (module 'propagation'): ns3::Ptr<ns3::ChannelCondition> ns3::ThreeGppChannelConditionModel::GetChannelCondition(ns3::Ptr<const ns3::MobilityModel> a, ns3::Ptr<const ns3::MobilityModel> b) const [member function]
<     cls.add_method('GetChannelCondition', 
<                    'ns3::Ptr< ns3::ChannelCondition >', 
<                    [param('ns3::Ptr< ns3::MobilityModel const >', 'a'), param('ns3::Ptr< ns3::MobilityModel const >', 'b')], 
<                    is_const=True, is_virtual=True)
<     ## channel-condition-model.h (module 'propagation'): static ns3::TypeId ns3::ThreeGppChannelConditionModel::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## channel-condition-model.h (module 'propagation'): static double ns3::ThreeGppChannelConditionModel::Calculate2dDistance(ns3::Vector const & a, ns3::Vector const & b) [member function]
<     cls.add_method('Calculate2dDistance', 
<                    'double', 
<                    [param('ns3::Vector const &', 'a'), param('ns3::Vector const &', 'b')], 
<                    visibility='protected', is_static=True)
<     ## channel-condition-model.h (module 'propagation'): double ns3::ThreeGppChannelConditionModel::ComputePlos(ns3::Ptr<const ns3::MobilityModel> a, ns3::Ptr<const ns3::MobilityModel> b) const [member function]
<     cls.add_method('ComputePlos', 
<                    'double', 
<                    [param('ns3::Ptr< ns3::MobilityModel const >', 'a'), param('ns3::Ptr< ns3::MobilityModel const >', 'b')], 
<                    is_const=True, visibility='private', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3ThreeGppIndoorMixedOfficeChannelConditionModel_methods(root_module, cls):
<     ## channel-condition-model.h (module 'propagation'): static ns3::TypeId ns3::ThreeGppIndoorMixedOfficeChannelConditionModel::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## channel-condition-model.h (module 'propagation'): ns3::ThreeGppIndoorMixedOfficeChannelConditionModel::ThreeGppIndoorMixedOfficeChannelConditionModel() [constructor]
<     cls.add_constructor([])
<     ## channel-condition-model.h (module 'propagation'): double ns3::ThreeGppIndoorMixedOfficeChannelConditionModel::ComputePlos(ns3::Ptr<const ns3::MobilityModel> a, ns3::Ptr<const ns3::MobilityModel> b) const [member function]
<     cls.add_method('ComputePlos', 
<                    'double', 
<                    [param('ns3::Ptr< ns3::MobilityModel const >', 'a'), param('ns3::Ptr< ns3::MobilityModel const >', 'b')], 
<                    is_const=True, visibility='private', is_virtual=True)
<     return
< 
< def register_Ns3ThreeGppIndoorOpenOfficeChannelConditionModel_methods(root_module, cls):
<     ## channel-condition-model.h (module 'propagation'): static ns3::TypeId ns3::ThreeGppIndoorOpenOfficeChannelConditionModel::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## channel-condition-model.h (module 'propagation'): ns3::ThreeGppIndoorOpenOfficeChannelConditionModel::ThreeGppIndoorOpenOfficeChannelConditionModel() [constructor]
<     cls.add_constructor([])
<     ## channel-condition-model.h (module 'propagation'): double ns3::ThreeGppIndoorOpenOfficeChannelConditionModel::ComputePlos(ns3::Ptr<const ns3::MobilityModel> a, ns3::Ptr<const ns3::MobilityModel> b) const [member function]
<     cls.add_method('ComputePlos', 
<                    'double', 
<                    [param('ns3::Ptr< ns3::MobilityModel const >', 'a'), param('ns3::Ptr< ns3::MobilityModel const >', 'b')], 
<                    is_const=True, visibility='private', is_virtual=True)
<     return
< 
< def register_Ns3ThreeGppRmaChannelConditionModel_methods(root_module, cls):
<     ## channel-condition-model.h (module 'propagation'): static ns3::TypeId ns3::ThreeGppRmaChannelConditionModel::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## channel-condition-model.h (module 'propagation'): ns3::ThreeGppRmaChannelConditionModel::ThreeGppRmaChannelConditionModel() [constructor]
<     cls.add_constructor([])
<     ## channel-condition-model.h (module 'propagation'): double ns3::ThreeGppRmaChannelConditionModel::ComputePlos(ns3::Ptr<const ns3::MobilityModel> a, ns3::Ptr<const ns3::MobilityModel> b) const [member function]
<     cls.add_method('ComputePlos', 
<                    'double', 
<                    [param('ns3::Ptr< ns3::MobilityModel const >', 'a'), param('ns3::Ptr< ns3::MobilityModel const >', 'b')], 
<                    is_const=True, visibility='private', is_virtual=True)
<     return
< 
< def register_Ns3ThreeGppUmaChannelConditionModel_methods(root_module, cls):
<     ## channel-condition-model.h (module 'propagation'): static ns3::TypeId ns3::ThreeGppUmaChannelConditionModel::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## channel-condition-model.h (module 'propagation'): ns3::ThreeGppUmaChannelConditionModel::ThreeGppUmaChannelConditionModel() [constructor]
<     cls.add_constructor([])
<     ## channel-condition-model.h (module 'propagation'): double ns3::ThreeGppUmaChannelConditionModel::ComputePlos(ns3::Ptr<const ns3::MobilityModel> a, ns3::Ptr<const ns3::MobilityModel> b) const [member function]
<     cls.add_method('ComputePlos', 
<                    'double', 
<                    [param('ns3::Ptr< ns3::MobilityModel const >', 'a'), param('ns3::Ptr< ns3::MobilityModel const >', 'b')], 
<                    is_const=True, visibility='private', is_virtual=True)
<     return
< 
< def register_Ns3ThreeGppUmiStreetCanyonChannelConditionModel_methods(root_module, cls):
<     ## channel-condition-model.h (module 'propagation'): static ns3::TypeId ns3::ThreeGppUmiStreetCanyonChannelConditionModel::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## channel-condition-model.h (module 'propagation'): ns3::ThreeGppUmiStreetCanyonChannelConditionModel::ThreeGppUmiStreetCanyonChannelConditionModel() [constructor]
<     cls.add_constructor([])
<     ## channel-condition-model.h (module 'propagation'): double ns3::ThreeGppUmiStreetCanyonChannelConditionModel::ComputePlos(ns3::Ptr<const ns3::MobilityModel> a, ns3::Ptr<const ns3::MobilityModel> b) const [member function]
<     cls.add_method('ComputePlos', 
<                    'double', 
<                    [param('ns3::Ptr< ns3::MobilityModel const >', 'a'), param('ns3::Ptr< ns3::MobilityModel const >', 'b')], 
<                    is_const=True, visibility='private', is_virtual=True)
<     return
< 
6443,6482d6073
< def register_Ns3AlwaysLosChannelConditionModel_methods(root_module, cls):
<     ## channel-condition-model.h (module 'propagation'): static ns3::TypeId ns3::AlwaysLosChannelConditionModel::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## channel-condition-model.h (module 'propagation'): ns3::AlwaysLosChannelConditionModel::AlwaysLosChannelConditionModel() [constructor]
<     cls.add_constructor([])
<     ## channel-condition-model.h (module 'propagation'): ns3::Ptr<ns3::ChannelCondition> ns3::AlwaysLosChannelConditionModel::GetChannelCondition(ns3::Ptr<const ns3::MobilityModel> a, ns3::Ptr<const ns3::MobilityModel> b) const [member function]
<     cls.add_method('GetChannelCondition', 
<                    'ns3::Ptr< ns3::ChannelCondition >', 
<                    [param('ns3::Ptr< ns3::MobilityModel const >', 'a'), param('ns3::Ptr< ns3::MobilityModel const >', 'b')], 
<                    is_const=True, is_virtual=True)
<     ## channel-condition-model.h (module 'propagation'): int64_t ns3::AlwaysLosChannelConditionModel::AssignStreams(int64_t stream) [member function]
<     cls.add_method('AssignStreams', 
<                    'int64_t', 
<                    [param('int64_t', 'stream')], 
<                    is_virtual=True)
<     return
< 
< def register_Ns3BuildingsChannelConditionModel_methods(root_module, cls):
<     ## buildings-channel-condition-model.h (module 'buildings'): static ns3::TypeId ns3::BuildingsChannelConditionModel::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## buildings-channel-condition-model.h (module 'buildings'): ns3::BuildingsChannelConditionModel::BuildingsChannelConditionModel() [constructor]
<     cls.add_constructor([])
<     ## buildings-channel-condition-model.h (module 'buildings'): ns3::Ptr<ns3::ChannelCondition> ns3::BuildingsChannelConditionModel::GetChannelCondition(ns3::Ptr<const ns3::MobilityModel> a, ns3::Ptr<const ns3::MobilityModel> b) const [member function]
<     cls.add_method('GetChannelCondition', 
<                    'ns3::Ptr< ns3::ChannelCondition >', 
<                    [param('ns3::Ptr< ns3::MobilityModel const >', 'a'), param('ns3::Ptr< ns3::MobilityModel const >', 'b')], 
<                    is_const=True, is_virtual=True)
<     ## buildings-channel-condition-model.h (module 'buildings'): int64_t ns3::BuildingsChannelConditionModel::AssignStreams(int64_t stream) [member function]
<     cls.add_method('AssignStreams', 
<                    'int64_t', 
<                    [param('int64_t', 'stream')], 
<                    is_virtual=True)
<     return
< 
6502,6524c6093
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__const_ns3MobilityModel__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::MobilityModel>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
<     cls.add_constructor([])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::MobilityModel>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<const ns3::MobilityModel>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::MobilityModel const >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<const ns3::MobilityModel>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True)
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<const ns3::MobilityModel>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<const ns3::MobilityModel>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<const ns3::MobilityModel> arg0) [member operator]
<     cls.add_method('operator()', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::MobilityModel const >', 'arg0')], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True, custom_name=u'__call__')
6546c6115
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True, custom_name=u'__call__')
6568c6137
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True, custom_name=u'__call__')
6580c6149
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
6590c6159
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
diff ../../NS3-WiGig/src/buildings/bindings/modulegen__gcc_LP64.py ../../ns-3-dev-git/src/buildings/bindings/modulegen__gcc_LP64.py
34,37c34,37
<     module.add_class('Item', outer_class=root_module['ns3::AttributeConstructionList'], import_from_module='ns.core')
<     typehandlers.add_type_alias('std::list< ns3::AttributeConstructionList::Item > const_iterator', 'ns3::AttributeConstructionList::CIterator')
<     typehandlers.add_type_alias('std::list< ns3::AttributeConstructionList::Item > const_iterator*', 'ns3::AttributeConstructionList::CIterator*')
<     typehandlers.add_type_alias('std::list< ns3::AttributeConstructionList::Item > const_iterator&', 'ns3::AttributeConstructionList::CIterator&')
---
>     module.add_class('Item', import_from_module='ns.core', outer_class=root_module['ns3::AttributeConstructionList'])
>     typehandlers.add_type_alias(u'std::list< ns3::AttributeConstructionList::Item > const_iterator', u'ns3::AttributeConstructionList::CIterator')
>     typehandlers.add_type_alias(u'std::list< ns3::AttributeConstructionList::Item > const_iterator*', u'ns3::AttributeConstructionList::CIterator*')
>     typehandlers.add_type_alias(u'std::list< ns3::AttributeConstructionList::Item > const_iterator&', u'ns3::AttributeConstructionList::CIterator&')
45c45
<     module.add_class('Iterator', outer_class=root_module['ns3::Buffer'], import_from_module='ns.network')
---
>     module.add_class('Iterator', import_from_module='ns.network', outer_class=root_module['ns3::Buffer'])
48,50c48,50
<     typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::Building > > const_iterator', 'ns3::BuildingContainer::Iterator')
<     typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::Building > > const_iterator*', 'ns3::BuildingContainer::Iterator*')
<     typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::Building > > const_iterator&', 'ns3::BuildingContainer::Iterator&')
---
>     typehandlers.add_type_alias(u'std::vector< ns3::Ptr< ns3::Building > > const_iterator', u'ns3::BuildingContainer::Iterator')
>     typehandlers.add_type_alias(u'std::vector< ns3::Ptr< ns3::Building > > const_iterator*', u'ns3::BuildingContainer::Iterator*')
>     typehandlers.add_type_alias(u'std::vector< ns3::Ptr< ns3::Building > > const_iterator&', u'ns3::BuildingContainer::Iterator&')
53,55c53,55
<     typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::Building > > const_iterator', 'ns3::BuildingList::Iterator')
<     typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::Building > > const_iterator*', 'ns3::BuildingList::Iterator*')
<     typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::Building > > const_iterator&', 'ns3::BuildingList::Iterator&')
---
>     typehandlers.add_type_alias(u'std::vector< ns3::Ptr< ns3::Building > > const_iterator', u'ns3::BuildingList::Iterator')
>     typehandlers.add_type_alias(u'std::vector< ns3::Ptr< ns3::Building > > const_iterator*', u'ns3::BuildingList::Iterator*')
>     typehandlers.add_type_alias(u'std::vector< ns3::Ptr< ns3::Building > > const_iterator&', u'ns3::BuildingList::Iterator&')
61c61
<     module.add_class('Item', outer_class=root_module['ns3::ByteTagIterator'], import_from_module='ns.network')
---
>     module.add_class('Item', import_from_module='ns.network', outer_class=root_module['ns3::ByteTagIterator'])
65c65
<     module.add_class('Iterator', outer_class=root_module['ns3::ByteTagList'], import_from_module='ns.network')
---
>     module.add_class('Iterator', import_from_module='ns.network', outer_class=root_module['ns3::ByteTagList'])
67c67
<     module.add_class('Item', outer_class=root_module['ns3::ByteTagList::Iterator'], import_from_module='ns.network')
---
>     module.add_class('Item', import_from_module='ns.network', outer_class=root_module['ns3::ByteTagList::Iterator'])
104,106c104,106
<     typehandlers.add_type_alias('void ( * ) ( ns3::Mac48Address )', 'ns3::Mac48Address::TracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Mac48Address )*', 'ns3::Mac48Address::TracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Mac48Address )&', 'ns3::Mac48Address::TracedCallback&')
---
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Mac48Address )', u'ns3::Mac48Address::TracedCallback')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Mac48Address )*', u'ns3::Mac48Address::TracedCallback*')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Mac48Address )&', u'ns3::Mac48Address::TracedCallback&')
115,117c115,117
<     typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::Node > > const_iterator', 'ns3::NodeContainer::Iterator')
<     typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::Node > > const_iterator*', 'ns3::NodeContainer::Iterator*')
<     typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::Node > > const_iterator&', 'ns3::NodeContainer::Iterator&')
---
>     typehandlers.add_type_alias(u'std::vector< ns3::Ptr< ns3::Node > > const_iterator', u'ns3::NodeContainer::Iterator')
>     typehandlers.add_type_alias(u'std::vector< ns3::Ptr< ns3::Node > > const_iterator*', u'ns3::NodeContainer::Iterator*')
>     typehandlers.add_type_alias(u'std::vector< ns3::Ptr< ns3::Node > > const_iterator&', u'ns3::NodeContainer::Iterator&')
119c119
<     module.add_class('ObjectBase', import_from_module='ns.core', allow_subclassing=True)
---
>     module.add_class('ObjectBase', allow_subclassing=True, import_from_module='ns.core')
127c127
<     module.add_class('Item', outer_class=root_module['ns3::PacketMetadata'], import_from_module='ns.network')
---
>     module.add_class('Item', import_from_module='ns.network', outer_class=root_module['ns3::PacketMetadata'])
131c131
<     module.add_class('ItemIterator', outer_class=root_module['ns3::PacketMetadata'], import_from_module='ns.network')
---
>     module.add_class('ItemIterator', import_from_module='ns.network', outer_class=root_module['ns3::PacketMetadata'])
135c135
<     module.add_class('Item', outer_class=root_module['ns3::PacketTagIterator'], import_from_module='ns.network')
---
>     module.add_class('Item', import_from_module='ns.network', outer_class=root_module['ns3::PacketTagIterator'])
139c139
<     module.add_class('TagData', outer_class=root_module['ns3::PacketTagList'], import_from_module='ns.network')
---
>     module.add_class('TagData', import_from_module='ns.network', outer_class=root_module['ns3::PacketTagList'])
141c141
<     module.add_class('SimpleRefCount', template_parameters=['ns3::Object', 'ns3::ObjectBase', 'ns3::ObjectDeleter'], parent=root_module['ns3::ObjectBase'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), import_from_module='ns.core', automatic_type_narrowing=True)
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::Object', 'ns3::ObjectBase', 'ns3::ObjectDeleter'], parent=root_module['ns3::ObjectBase'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
155c155
<     module.add_class('AttributeInformation', outer_class=root_module['ns3::TypeId'], import_from_module='ns.core')
---
>     module.add_class('AttributeInformation', import_from_module='ns.core', outer_class=root_module['ns3::TypeId'])
157,160c157,160
<     module.add_class('TraceSourceInformation', outer_class=root_module['ns3::TypeId'], import_from_module='ns.core')
<     typehandlers.add_type_alias('uint32_t', 'ns3::TypeId::hash_t')
<     typehandlers.add_type_alias('uint32_t*', 'ns3::TypeId::hash_t*')
<     typehandlers.add_type_alias('uint32_t&', 'ns3::TypeId::hash_t&')
---
>     module.add_class('TraceSourceInformation', import_from_module='ns.core', outer_class=root_module['ns3::TypeId'])
>     typehandlers.add_type_alias(u'uint32_t', u'ns3::TypeId::hash_t')
>     typehandlers.add_type_alias(u'uint32_t*', u'ns3::TypeId::hash_t*')
>     typehandlers.add_type_alias(u'uint32_t&', u'ns3::TypeId::hash_t&')
178c178
<     module.add_class('AggregateIterator', outer_class=root_module['ns3::Object'], import_from_module='ns.core')
---
>     module.add_class('AggregateIterator', import_from_module='ns.core', outer_class=root_module['ns3::Object'])
204c204
<     module.add_class('SimpleRefCount', template_parameters=['ns3::AttributeAccessor', 'ns3::empty', 'ns3::DefaultDeleter<ns3::AttributeAccessor>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), import_from_module='ns.core', automatic_type_narrowing=True)
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::AttributeAccessor', 'ns3::empty', 'ns3::DefaultDeleter<ns3::AttributeAccessor>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
206c206
<     module.add_class('SimpleRefCount', template_parameters=['ns3::AttributeChecker', 'ns3::empty', 'ns3::DefaultDeleter<ns3::AttributeChecker>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), import_from_module='ns.core', automatic_type_narrowing=True)
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::AttributeChecker', 'ns3::empty', 'ns3::DefaultDeleter<ns3::AttributeChecker>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
208c208
<     module.add_class('SimpleRefCount', template_parameters=['ns3::AttributeValue', 'ns3::empty', 'ns3::DefaultDeleter<ns3::AttributeValue>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), import_from_module='ns.core', automatic_type_narrowing=True)
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::AttributeValue', 'ns3::empty', 'ns3::DefaultDeleter<ns3::AttributeValue>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
210c210
<     module.add_class('SimpleRefCount', template_parameters=['ns3::CallbackImplBase', 'ns3::empty', 'ns3::DefaultDeleter<ns3::CallbackImplBase>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), import_from_module='ns.core', automatic_type_narrowing=True)
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::CallbackImplBase', 'ns3::empty', 'ns3::DefaultDeleter<ns3::CallbackImplBase>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
212c212
<     module.add_class('SimpleRefCount', template_parameters=['ns3::Hash::Implementation', 'ns3::empty', 'ns3::DefaultDeleter<ns3::Hash::Implementation>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), import_from_module='ns.core', automatic_type_narrowing=True)
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::Hash::Implementation', 'ns3::empty', 'ns3::DefaultDeleter<ns3::Hash::Implementation>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
214c214
<     module.add_class('SimpleRefCount', template_parameters=['ns3::NixVector', 'ns3::empty', 'ns3::DefaultDeleter<ns3::NixVector>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), import_from_module='ns.core', automatic_type_narrowing=True)
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::NixVector', 'ns3::empty', 'ns3::DefaultDeleter<ns3::NixVector>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
216c216
<     module.add_class('SimpleRefCount', template_parameters=['ns3::Packet', 'ns3::empty', 'ns3::DefaultDeleter<ns3::Packet>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), import_from_module='ns.core', automatic_type_narrowing=True)
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::Packet', 'ns3::empty', 'ns3::DefaultDeleter<ns3::Packet>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
218c218
<     module.add_class('SimpleRefCount', template_parameters=['ns3::TraceSourceAccessor', 'ns3::empty', 'ns3::DefaultDeleter<ns3::TraceSourceAccessor>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), import_from_module='ns.core', automatic_type_narrowing=True)
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::TraceSourceAccessor', 'ns3::empty', 'ns3::DefaultDeleter<ns3::TraceSourceAccessor>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
225,227c225,227
<     typehandlers.add_type_alias('void ( * ) ( ns3::Time )', 'ns3::Time::TracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Time )*', 'ns3::Time::TracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Time )&', 'ns3::Time::TracedCallback&')
---
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Time )', u'ns3::Time::TracedCallback')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Time )*', u'ns3::Time::TracedCallback*')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Time )&', u'ns3::Time::TracedCallback&')
251c251
<     module.add_class('AttributeChecker', import_from_module='ns.core', parent=root_module['ns3::SimpleRefCount< ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker> >'], allow_subclassing=False, automatic_type_narrowing=True)
---
>     module.add_class('AttributeChecker', allow_subclassing=False, automatic_type_narrowing=True, import_from_module='ns.core', parent=root_module['ns3::SimpleRefCount< ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker> >'])
253c253
<     module.add_class('AttributeValue', import_from_module='ns.core', parent=root_module['ns3::SimpleRefCount< ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue> >'], allow_subclassing=False, automatic_type_narrowing=True)
---
>     module.add_class('AttributeValue', allow_subclassing=False, automatic_type_narrowing=True, import_from_module='ns.core', parent=root_module['ns3::SimpleRefCount< ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue> >'])
272,277d271
<     ## channel-condition-model.h (module 'propagation'): ns3::ChannelCondition [class]
<     module.add_class('ChannelCondition', import_from_module='ns.propagation', parent=root_module['ns3::Object'])
<     ## channel-condition-model.h (module 'propagation'): ns3::ChannelCondition::LosConditionValue [enumeration]
<     module.add_enum('LosConditionValue', ['LOS', 'NLOS'], outer_class=root_module['ns3::ChannelCondition'], import_from_module='ns.propagation')
<     ## channel-condition-model.h (module 'propagation'): ns3::ChannelConditionModel [class]
<     module.add_class('ChannelConditionModel', import_from_module='ns.propagation', parent=root_module['ns3::Object'])
342,346d335
<     ## mobility-model.h (module 'mobility'): ns3::MobilityModel [class]
<     module.add_class('MobilityModel', import_from_module='ns.mobility', parent=root_module['ns3::Object'])
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::MobilityModel const > )', 'ns3::MobilityModel::TracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::MobilityModel const > )*', 'ns3::MobilityModel::TracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::MobilityModel const > )&', 'ns3::MobilityModel::TracedCallback&')
353,363c342,350
<     typehandlers.add_type_alias('void ( * ) (  )', 'ns3::NetDevice::LinkChangeTracedCallback')
<     typehandlers.add_type_alias('void ( * ) (  )*', 'ns3::NetDevice::LinkChangeTracedCallback*')
<     typehandlers.add_type_alias('void ( * ) (  )&', 'ns3::NetDevice::LinkChangeTracedCallback&')
<     typehandlers.add_type_alias('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::NetDevice::ReceiveCallback')
<     typehandlers.add_type_alias('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::NetDevice::ReceiveCallback*')
<     typehandlers.add_type_alias('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::NetDevice::ReceiveCallback&')
<     typehandlers.add_type_alias('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >', 'ns3::NetDevice::PromiscReceiveCallback')
<     typehandlers.add_type_alias('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::NetDevice::PromiscReceiveCallback*')
<     typehandlers.add_type_alias('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::NetDevice::PromiscReceiveCallback&')
<     ## channel-condition-model.h (module 'propagation'): ns3::NeverLosChannelConditionModel [class]
<     module.add_class('NeverLosChannelConditionModel', import_from_module='ns.propagation', parent=root_module['ns3::ChannelConditionModel'])
---
>     typehandlers.add_type_alias(u'void ( * ) (  )', u'ns3::NetDevice::LinkChangeTracedCallback')
>     typehandlers.add_type_alias(u'void ( * ) (  )*', u'ns3::NetDevice::LinkChangeTracedCallback*')
>     typehandlers.add_type_alias(u'void ( * ) (  )&', u'ns3::NetDevice::LinkChangeTracedCallback&')
>     typehandlers.add_type_alias(u'ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', u'ns3::NetDevice::ReceiveCallback')
>     typehandlers.add_type_alias(u'ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', u'ns3::NetDevice::ReceiveCallback*')
>     typehandlers.add_type_alias(u'ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', u'ns3::NetDevice::ReceiveCallback&')
>     typehandlers.add_type_alias(u'ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >', u'ns3::NetDevice::PromiscReceiveCallback')
>     typehandlers.add_type_alias(u'ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >*', u'ns3::NetDevice::PromiscReceiveCallback*')
>     typehandlers.add_type_alias(u'ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >&', u'ns3::NetDevice::PromiscReceiveCallback&')
368,373c355,360
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >', 'ns3::Node::ProtocolHandler')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::Node::ProtocolHandler*')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::Node::ProtocolHandler&')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::Node::DeviceAdditionListener')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::Node::DeviceAdditionListener*')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::Node::DeviceAdditionListener&')
---
>     typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >', u'ns3::Node::ProtocolHandler')
>     typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >*', u'ns3::Node::ProtocolHandler*')
>     typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >&', u'ns3::Node::ProtocolHandler&')
>     typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', u'ns3::Node::DeviceAdditionListener')
>     typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', u'ns3::Node::DeviceAdditionListener*')
>     typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', u'ns3::Node::DeviceAdditionListener&')
386,403c373,390
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const > )', 'ns3::Packet::TracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const > )*', 'ns3::Packet::TracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const > )&', 'ns3::Packet::TracedCallback&')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Address const & )', 'ns3::Packet::AddressTracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Address const & )*', 'ns3::Packet::AddressTracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Address const & )&', 'ns3::Packet::AddressTracedCallback&')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const > const, ns3::Address const &, ns3::Address const & )', 'ns3::Packet::TwoAddressTracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const > const, ns3::Address const &, ns3::Address const & )*', 'ns3::Packet::TwoAddressTracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const > const, ns3::Address const &, ns3::Address const & )&', 'ns3::Packet::TwoAddressTracedCallback&')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Mac48Address )', 'ns3::Packet::Mac48AddressTracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Mac48Address )*', 'ns3::Packet::Mac48AddressTracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Mac48Address )&', 'ns3::Packet::Mac48AddressTracedCallback&')
<     typehandlers.add_type_alias('void ( * ) ( uint32_t, uint32_t )', 'ns3::Packet::SizeTracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( uint32_t, uint32_t )*', 'ns3::Packet::SizeTracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( uint32_t, uint32_t )&', 'ns3::Packet::SizeTracedCallback&')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, double )', 'ns3::Packet::SinrTracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, double )*', 'ns3::Packet::SinrTracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, double )&', 'ns3::Packet::SinrTracedCallback&')
---
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const > )', u'ns3::Packet::TracedCallback')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const > )*', u'ns3::Packet::TracedCallback*')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const > )&', u'ns3::Packet::TracedCallback&')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Address const & )', u'ns3::Packet::AddressTracedCallback')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Address const & )*', u'ns3::Packet::AddressTracedCallback*')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Address const & )&', u'ns3::Packet::AddressTracedCallback&')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const > const, ns3::Address const &, ns3::Address const & )', u'ns3::Packet::TwoAddressTracedCallback')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const > const, ns3::Address const &, ns3::Address const & )*', u'ns3::Packet::TwoAddressTracedCallback*')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const > const, ns3::Address const &, ns3::Address const & )&', u'ns3::Packet::TwoAddressTracedCallback&')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Mac48Address )', u'ns3::Packet::Mac48AddressTracedCallback')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Mac48Address )*', u'ns3::Packet::Mac48AddressTracedCallback*')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Mac48Address )&', u'ns3::Packet::Mac48AddressTracedCallback&')
>     typehandlers.add_type_alias(u'void ( * ) ( uint32_t, uint32_t )', u'ns3::Packet::SizeTracedCallback')
>     typehandlers.add_type_alias(u'void ( * ) ( uint32_t, uint32_t )*', u'ns3::Packet::SizeTracedCallback*')
>     typehandlers.add_type_alias(u'void ( * ) ( uint32_t, uint32_t )&', u'ns3::Packet::SizeTracedCallback&')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const >, double )', u'ns3::Packet::SinrTracedCallback')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const >, double )*', u'ns3::Packet::SinrTracedCallback*')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const >, double )&', u'ns3::Packet::SinrTracedCallback&')
406,417d392
<     ## channel-condition-model.h (module 'propagation'): ns3::ThreeGppChannelConditionModel [class]
<     module.add_class('ThreeGppChannelConditionModel', import_from_module='ns.propagation', parent=root_module['ns3::ChannelConditionModel'])
<     ## channel-condition-model.h (module 'propagation'): ns3::ThreeGppIndoorMixedOfficeChannelConditionModel [class]
<     module.add_class('ThreeGppIndoorMixedOfficeChannelConditionModel', import_from_module='ns.propagation', parent=root_module['ns3::ThreeGppChannelConditionModel'])
<     ## channel-condition-model.h (module 'propagation'): ns3::ThreeGppIndoorOpenOfficeChannelConditionModel [class]
<     module.add_class('ThreeGppIndoorOpenOfficeChannelConditionModel', import_from_module='ns.propagation', parent=root_module['ns3::ThreeGppChannelConditionModel'])
<     ## channel-condition-model.h (module 'propagation'): ns3::ThreeGppRmaChannelConditionModel [class]
<     module.add_class('ThreeGppRmaChannelConditionModel', import_from_module='ns.propagation', parent=root_module['ns3::ThreeGppChannelConditionModel'])
<     ## channel-condition-model.h (module 'propagation'): ns3::ThreeGppUmaChannelConditionModel [class]
<     module.add_class('ThreeGppUmaChannelConditionModel', import_from_module='ns.propagation', parent=root_module['ns3::ThreeGppChannelConditionModel'])
<     ## channel-condition-model.h (module 'propagation'): ns3::ThreeGppUmiStreetCanyonChannelConditionModel [class]
<     module.add_class('ThreeGppUmiStreetCanyonChannelConditionModel', import_from_module='ns.propagation', parent=root_module['ns3::ThreeGppChannelConditionModel'])
436,439d410
<     ## channel-condition-model.h (module 'propagation'): ns3::AlwaysLosChannelConditionModel [class]
<     module.add_class('AlwaysLosChannelConditionModel', import_from_module='ns.propagation', parent=root_module['ns3::ChannelConditionModel'])
<     ## buildings-channel-condition-model.h (module 'buildings'): ns3::BuildingsChannelConditionModel [class]
<     module.add_class('BuildingsChannelConditionModel', parent=root_module['ns3::ChannelConditionModel'])
441,443c412
<     module.add_class('CallbackImpl', template_parameters=['ns3::ObjectBase *', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::MobilityModel>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', template_parameters=['void', 'ns3::Ptr<const ns3::MobilityModel>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'])
---
>     module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['ns3::ObjectBase *', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
445c414
<     module.add_class('CallbackImpl', template_parameters=['void', 'ns3::Ptr<ns3::NetDevice>', 'ns3::Ptr<const ns3::Packet>', 'unsigned short', 'const ns3::Address &', 'const ns3::Address &', 'ns3::NetDevice::PacketType', 'ns3::empty', 'ns3::empty', 'ns3::empty'], import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'])
---
>     module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'ns3::Ptr<ns3::NetDevice>', 'ns3::Ptr<const ns3::Packet>', 'unsigned short', 'const ns3::Address &', 'const ns3::Address &', 'ns3::NetDevice::PacketType', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
447,450c416,419
<     module.add_class('CallbackImpl', template_parameters=['void', 'ns3::Ptr<ns3::NetDevice>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'])
<     typehandlers.add_type_alias('ns3::Vector3D', 'ns3::Vector')
<     typehandlers.add_type_alias('ns3::Vector3D*', 'ns3::Vector*')
<     typehandlers.add_type_alias('ns3::Vector3D&', 'ns3::Vector&')
---
>     module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'ns3::Ptr<ns3::NetDevice>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
>     typehandlers.add_type_alias(u'ns3::Vector3D', u'ns3::Vector')
>     typehandlers.add_type_alias(u'ns3::Vector3D*', u'ns3::Vector*')
>     typehandlers.add_type_alias(u'ns3::Vector3D&', u'ns3::Vector&')
452,454c421,423
<     typehandlers.add_type_alias('ns3::Vector3DValue', 'ns3::VectorValue')
<     typehandlers.add_type_alias('ns3::Vector3DValue*', 'ns3::VectorValue*')
<     typehandlers.add_type_alias('ns3::Vector3DValue&', 'ns3::VectorValue&')
---
>     typehandlers.add_type_alias(u'ns3::Vector3DValue', u'ns3::VectorValue')
>     typehandlers.add_type_alias(u'ns3::Vector3DValue*', u'ns3::VectorValue*')
>     typehandlers.add_type_alias(u'ns3::Vector3DValue&', u'ns3::VectorValue&')
456,458c425,427
<     typehandlers.add_type_alias('ns3::Vector3DChecker', 'ns3::VectorChecker')
<     typehandlers.add_type_alias('ns3::Vector3DChecker*', 'ns3::VectorChecker*')
<     typehandlers.add_type_alias('ns3::Vector3DChecker&', 'ns3::VectorChecker&')
---
>     typehandlers.add_type_alias(u'ns3::Vector3DChecker', u'ns3::VectorChecker')
>     typehandlers.add_type_alias(u'ns3::Vector3DChecker*', u'ns3::VectorChecker*')
>     typehandlers.add_type_alias(u'ns3::Vector3DChecker&', u'ns3::VectorChecker&')
488,493c457,462
<     typehandlers.add_type_alias('uint32_t ( * ) ( char const *, std::size_t const )', 'ns3::Hash::Hash32Function_ptr')
<     typehandlers.add_type_alias('uint32_t ( * ) ( char const *, std::size_t const )*', 'ns3::Hash::Hash32Function_ptr*')
<     typehandlers.add_type_alias('uint32_t ( * ) ( char const *, std::size_t const )&', 'ns3::Hash::Hash32Function_ptr&')
<     typehandlers.add_type_alias('uint64_t ( * ) ( char const *, std::size_t const )', 'ns3::Hash::Hash64Function_ptr')
<     typehandlers.add_type_alias('uint64_t ( * ) ( char const *, std::size_t const )*', 'ns3::Hash::Hash64Function_ptr*')
<     typehandlers.add_type_alias('uint64_t ( * ) ( char const *, std::size_t const )&', 'ns3::Hash::Hash64Function_ptr&')
---
>     typehandlers.add_type_alias(u'uint32_t ( * ) ( char const *, std::size_t const )', u'ns3::Hash::Hash32Function_ptr')
>     typehandlers.add_type_alias(u'uint32_t ( * ) ( char const *, std::size_t const )*', u'ns3::Hash::Hash32Function_ptr*')
>     typehandlers.add_type_alias(u'uint32_t ( * ) ( char const *, std::size_t const )&', u'ns3::Hash::Hash32Function_ptr&')
>     typehandlers.add_type_alias(u'uint64_t ( * ) ( char const *, std::size_t const )', u'ns3::Hash::Hash64Function_ptr')
>     typehandlers.add_type_alias(u'uint64_t ( * ) ( char const *, std::size_t const )*', u'ns3::Hash::Hash64Function_ptr*')
>     typehandlers.add_type_alias(u'uint64_t ( * ) ( char const *, std::size_t const )&', u'ns3::Hash::Hash64Function_ptr&')
516,518c485,487
<     typehandlers.add_type_alias('void ( * ) ( ns3::Time, ns3::Time )', 'ns3::TracedValueCallback::Time')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Time, ns3::Time )*', 'ns3::TracedValueCallback::Time*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Time, ns3::Time )&', 'ns3::TracedValueCallback::Time&')
---
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Time, ns3::Time )', u'ns3::TracedValueCallback::Time')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Time, ns3::Time )*', u'ns3::TracedValueCallback::Time*')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Time, ns3::Time )&', u'ns3::TracedValueCallback::Time&')
619,620d587
<     register_Ns3ChannelCondition_methods(root_module, root_module['ns3::ChannelCondition'])
<     register_Ns3ChannelConditionModel_methods(root_module, root_module['ns3::ChannelConditionModel'])
652d618
<     register_Ns3MobilityModel_methods(root_module, root_module['ns3::MobilityModel'])
655d620
<     register_Ns3NeverLosChannelConditionModel_methods(root_module, root_module['ns3::NeverLosChannelConditionModel'])
665,670d629
<     register_Ns3ThreeGppChannelConditionModel_methods(root_module, root_module['ns3::ThreeGppChannelConditionModel'])
<     register_Ns3ThreeGppIndoorMixedOfficeChannelConditionModel_methods(root_module, root_module['ns3::ThreeGppIndoorMixedOfficeChannelConditionModel'])
<     register_Ns3ThreeGppIndoorOpenOfficeChannelConditionModel_methods(root_module, root_module['ns3::ThreeGppIndoorOpenOfficeChannelConditionModel'])
<     register_Ns3ThreeGppRmaChannelConditionModel_methods(root_module, root_module['ns3::ThreeGppRmaChannelConditionModel'])
<     register_Ns3ThreeGppUmaChannelConditionModel_methods(root_module, root_module['ns3::ThreeGppUmaChannelConditionModel'])
<     register_Ns3ThreeGppUmiStreetCanyonChannelConditionModel_methods(root_module, root_module['ns3::ThreeGppUmiStreetCanyonChannelConditionModel'])
680,681d638
<     register_Ns3AlwaysLosChannelConditionModel_methods(root_module, root_module['ns3::AlwaysLosChannelConditionModel'])
<     register_Ns3BuildingsChannelConditionModel_methods(root_module, root_module['ns3::BuildingsChannelConditionModel'])
683d639
<     register_Ns3CallbackImpl__Void_Ns3Ptr__lt__const_ns3MobilityModel__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<const ns3::MobilityModel>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
825,829d780
<     ## box.h (module 'mobility'): bool ns3::Box::IsIntersect(ns3::Vector const & l1, ns3::Vector const & l2) const [member function]
<     cls.add_method('IsIntersect', 
<                    'bool', 
<                    [param('ns3::Vector const &', 'l1'), param('ns3::Vector const &', 'l2')], 
<                    is_const=True)
1183c1134
<     ## buildings-helper.h (module 'buildings'): static void ns3::BuildingsHelper::MakeConsistent(ns3::Ptr<ns3::MobilityModel> mm) [member function]
---
>     ## buildings-helper.h (module 'buildings'): static void ns3::BuildingsHelper::MakeConsistent(ns3::Ptr<ns3::MobilityModel> bmm) [member function]
1186,1187c1137,1138
<                    [param('ns3::Ptr< ns3::MobilityModel >', 'mm')], 
<                    deprecated=True, is_static=True)
---
>                    [param('ns3::Ptr< ns3::MobilityModel >', 'bmm')], 
>                    is_static=True)
1192c1143
<                    deprecated=True, is_static=True)
---
>                    is_static=True)
1570c1521
<                    is_const=True, deprecated=True)
---
>                    is_const=True)
1662c1613
<                    is_const=True, deprecated=True)
---
>                    is_const=True)
1694c1645
<     ## ipv6-address.h (module 'network'): ns3::Ipv6Address ns3::Ipv6Address::CombinePrefix(ns3::Ipv6Prefix const & prefix) const [member function]
---
>     ## ipv6-address.h (module 'network'): ns3::Ipv6Address ns3::Ipv6Address::CombinePrefix(ns3::Ipv6Prefix const & prefix) [member function]
1697,1698c1648
<                    [param('ns3::Ipv6Prefix const &', 'prefix')], 
<                    is_const=True)
---
>                    [param('ns3::Ipv6Prefix const &', 'prefix')])
1754,1758d1703
<     ## ipv6-address.h (module 'network'): bool ns3::Ipv6Address::HasPrefix(ns3::Ipv6Prefix const & prefix) const [member function]
<     cls.add_method('HasPrefix', 
<                    'bool', 
<                    [param('ns3::Ipv6Prefix const &', 'prefix')], 
<                    is_const=True)
1763c1708
<                    is_const=True, deprecated=True)
---
>                    deprecated=True, is_const=True)
1788c1733
<                    is_const=True, deprecated=True)
---
>                    is_const=True)
1824,1828d1768
<     ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::MakeAutoconfiguredAddress(ns3::Address addr, ns3::Ipv6Address prefix) [member function]
<     cls.add_method('MakeAutoconfiguredAddress', 
<                    'ns3::Ipv6Address', 
<                    [param('ns3::Address', 'addr'), param('ns3::Ipv6Address', 'prefix')], 
<                    is_static=True)
1849,1853d1788
<     ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::MakeAutoconfiguredLinkLocalAddress(ns3::Address mac) [member function]
<     cls.add_method('MakeAutoconfiguredLinkLocalAddress', 
<                    'ns3::Ipv6Address', 
<                    [param('ns3::Address', 'mac')], 
<                    is_static=True)
1914,1917d1848
<     ## ipv6-address.h (module 'network'): ns3::Ipv6Prefix::Ipv6Prefix(uint8_t * prefix, uint8_t prefixLength) [constructor]
<     cls.add_constructor([param('uint8_t *', 'prefix'), param('uint8_t', 'prefixLength')])
<     ## ipv6-address.h (module 'network'): ns3::Ipv6Prefix::Ipv6Prefix(char const * prefix, uint8_t prefixLength) [constructor]
<     cls.add_constructor([param('char const *', 'prefix'), param('uint8_t', 'prefixLength')])
1934,1938d1864
<     ## ipv6-address.h (module 'network'): uint8_t ns3::Ipv6Prefix::GetMinimumPrefixLength() const [member function]
<     cls.add_method('GetMinimumPrefixLength', 
<                    'uint8_t', 
<                    [], 
<                    is_const=True)
1958c1884
<                    is_const=True, deprecated=True)
---
>                    is_const=True)
1969,1972d1894
<     ## ipv6-address.h (module 'network'): void ns3::Ipv6Prefix::SetPrefixLength(uint8_t prefixLength) [member function]
<     cls.add_method('SetPrefixLength', 
<                    'void', 
<                    [param('uint8_t', 'prefixLength')])
2177c2099
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
2249,2253d2170
<     ## object-factory.h (module 'core'): bool ns3::ObjectFactory::IsTypeIdSet() const [member function]
<     cls.add_method('IsTypeIdSet', 
<                    'bool', 
<                    [], 
<                    is_const=True)
2483c2400
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
2488c2405
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
2498c2415
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
2503c2420
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
2797,2803c2714,2715
<     cls.add_binary_numeric_operator('-', root_module['ns3::Vector2D'], root_module['ns3::Vector2D'], param('ns3::Vector2D const &', 'right'))
<     cls.add_binary_numeric_operator('+', root_module['ns3::Vector2D'], root_module['ns3::Vector2D'], param('ns3::Vector2D const &', 'right'))
<     cls.add_binary_comparison_operator('!=')
<     cls.add_binary_comparison_operator('==')
<     cls.add_binary_comparison_operator('>=')
<     cls.add_binary_comparison_operator('>')
<     cls.add_binary_comparison_operator('<=')
---
>     cls.add_binary_numeric_operator('-', root_module['ns3::Vector2D'], root_module['ns3::Vector2D'], param('ns3::Vector2D const &', u'right'))
>     cls.add_binary_numeric_operator('+', root_module['ns3::Vector2D'], root_module['ns3::Vector2D'], param('ns3::Vector2D const &', u'right'))
2824,2830c2736,2737
<     cls.add_binary_numeric_operator('-', root_module['ns3::Vector3D'], root_module['ns3::Vector3D'], param('ns3::Vector3D const &', 'right'))
<     cls.add_binary_numeric_operator('+', root_module['ns3::Vector3D'], root_module['ns3::Vector3D'], param('ns3::Vector3D const &', 'right'))
<     cls.add_binary_comparison_operator('!=')
<     cls.add_binary_comparison_operator('==')
<     cls.add_binary_comparison_operator('>=')
<     cls.add_binary_comparison_operator('>')
<     cls.add_binary_comparison_operator('<=')
---
>     cls.add_binary_numeric_operator('-', root_module['ns3::Vector3D'], root_module['ns3::Vector3D'], param('ns3::Vector3D const &', u'right'))
>     cls.add_binary_numeric_operator('+', root_module['ns3::Vector3D'], root_module['ns3::Vector3D'], param('ns3::Vector3D const &', u'right'))
2858,2862c2765,2768
<     cls.add_binary_numeric_operator('*', root_module['ns3::Time'], root_module['ns3::int64x64_t'], param('ns3::Time const &', 'right'))
<     cls.add_binary_numeric_operator('+', root_module['ns3::int64x64_t'], root_module['ns3::int64x64_t'], param('ns3::int64x64_t const &', 'right'))
<     cls.add_binary_numeric_operator('-', root_module['ns3::int64x64_t'], root_module['ns3::int64x64_t'], param('ns3::int64x64_t const &', 'right'))
<     cls.add_binary_numeric_operator('*', root_module['ns3::int64x64_t'], root_module['ns3::int64x64_t'], param('ns3::int64x64_t const &', 'right'))
<     cls.add_binary_numeric_operator('/', root_module['ns3::int64x64_t'], root_module['ns3::int64x64_t'], param('ns3::int64x64_t const &', 'right'))
---
>     cls.add_binary_numeric_operator('+', root_module['ns3::int64x64_t'], root_module['ns3::int64x64_t'], param('ns3::int64x64_t const &', u'right'))
>     cls.add_binary_numeric_operator('-', root_module['ns3::int64x64_t'], root_module['ns3::int64x64_t'], param('ns3::int64x64_t const &', u'right'))
>     cls.add_binary_numeric_operator('*', root_module['ns3::int64x64_t'], root_module['ns3::int64x64_t'], param('ns3::int64x64_t const &', u'right'))
>     cls.add_binary_numeric_operator('/', root_module['ns3::int64x64_t'], root_module['ns3::int64x64_t'], param('ns3::int64x64_t const &', u'right'))
2870,2873c2776,2779
<     cls.add_inplace_numeric_operator('+=', param('ns3::int64x64_t const &', 'right'))
<     cls.add_inplace_numeric_operator('-=', param('ns3::int64x64_t const &', 'right'))
<     cls.add_inplace_numeric_operator('*=', param('ns3::int64x64_t const &', 'right'))
<     cls.add_inplace_numeric_operator('/=', param('ns3::int64x64_t const &', 'right'))
---
>     cls.add_inplace_numeric_operator('+=', param('ns3::int64x64_t const &', u'right'))
>     cls.add_inplace_numeric_operator('-=', param('ns3::int64x64_t const &', u'right'))
>     cls.add_inplace_numeric_operator('*=', param('ns3::int64x64_t const &', u'right'))
>     cls.add_inplace_numeric_operator('/=', param('ns3::int64x64_t const &', u'right'))
2934c2840
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
2949c2855
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
2962c2868
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
2967c2873
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
2977c2883
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
2982c2888
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
3065c2971
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
3070c2976
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
3107c3013
<                    is_const=True, visibility='private', is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
3112c3018
<                    visibility='private', is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
3207,3210d3112
<     ## position-allocator.h (module 'mobility'): void ns3::RandomDiscPositionAllocator::SetZ(double z) [member function]
<     cls.add_method('SetZ', 
<                    'void', 
<                    [param('double', 'z')])
3261,3264d3162
<     ## position-allocator.h (module 'mobility'): void ns3::RandomRectanglePositionAllocator::SetZ(double z) [member function]
<     cls.add_method('SetZ', 
<                    'void', 
<                    [param('double', 'z')])
3319c3217
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
3324c3222
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
3499,3507c3397,3402
<     cls.add_binary_numeric_operator('+', root_module['ns3::Time'], root_module['ns3::Time'], param('ns3::Time const &', 'right'))
<     cls.add_binary_numeric_operator('-', root_module['ns3::Time'], root_module['ns3::Time'], param('ns3::Time const &', 'right'))
<     cls.add_binary_numeric_operator('*', root_module['ns3::Time'], root_module['ns3::Time'], param('int64_t const &', 'right'))
<     cls.add_binary_numeric_operator('*', root_module['ns3::Time'], root_module['ns3::Time'], param('ns3::int64x64_t const &', 'right'))
<     cls.add_binary_numeric_operator('/', root_module['ns3::int64x64_t'], root_module['ns3::Time'], param('ns3::Time const &', 'right'))
<     cls.add_binary_numeric_operator('/', root_module['ns3::Time'], root_module['ns3::Time'], param('int64_t const &', 'right'))
<     cls.add_binary_numeric_operator('/', root_module['ns3::Time'], root_module['ns3::Time'], param('ns3::int64x64_t const &', 'right'))
<     cls.add_inplace_numeric_operator('+=', param('ns3::Time const &', 'right'))
<     cls.add_inplace_numeric_operator('-=', param('ns3::Time const &', 'right'))
---
>     cls.add_binary_numeric_operator('+', root_module['ns3::Time'], root_module['ns3::Time'], param('ns3::Time const &', u'right'))
>     cls.add_binary_numeric_operator('-', root_module['ns3::Time'], root_module['ns3::Time'], param('ns3::Time const &', u'right'))
>     cls.add_binary_numeric_operator('*', root_module['ns3::Time'], root_module['ns3::Time'], param('int64_t const &', u'right'))
>     cls.add_binary_numeric_operator('/', root_module['ns3::Time'], root_module['ns3::Time'], param('int64_t const &', u'right'))
>     cls.add_inplace_numeric_operator('+=', param('ns3::Time const &', u'right'))
>     cls.add_inplace_numeric_operator('-=', param('ns3::Time const &', u'right'))
3702c3597
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
3707c3602
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
3712c3607
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
3717c3612
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
3730c3625
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
3740c3635
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
3750c3645
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
3755c3650
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
3884,3887d3778
<     ## position-allocator.h (module 'mobility'): void ns3::UniformDiscPositionAllocator::SetZ(double z) [member function]
<     cls.add_method('SetZ', 
<                    'void', 
<                    [param('double', 'z')])
4051c3942
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
4056c3947
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
4061c3952
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
4066c3957
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
4078c3969
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
4083c3974
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
4088c3979
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
4098c3989
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
4103c3994
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
4108c3999
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
4120c4011
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
4125c4016
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
4130c4021
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
4245,4249d4135
<     ## building.h (module 'buildings'): bool ns3::Building::IsIntersect(ns3::Vector const & l1, ns3::Vector const & l2) const [member function]
<     cls.add_method('IsIntersect', 
<                    'bool', 
<                    [param('ns3::Vector const &', 'l1'), param('ns3::Vector const &', 'l2')], 
<                    is_const=True)
4276a4163,4167
>     ## buildings-propagation-loss-model.h (module 'buildings'): static ns3::TypeId ns3::BuildingsPropagationLossModel::GetTypeId() [member function]
>     cls.add_method('GetTypeId', 
>                    'ns3::TypeId', 
>                    [], 
>                    is_static=True)
4279,4283d4169
<     ## buildings-propagation-loss-model.h (module 'buildings'): double ns3::BuildingsPropagationLossModel::DoCalcRxPower(double txPowerDbm, ns3::Ptr<ns3::MobilityModel> a, ns3::Ptr<ns3::MobilityModel> b) const [member function]
<     cls.add_method('DoCalcRxPower', 
<                    'double', 
<                    [param('double', 'txPowerDbm'), param('ns3::Ptr< ns3::MobilityModel >', 'a'), param('ns3::Ptr< ns3::MobilityModel >', 'b')], 
<                    is_const=True, is_virtual=True)
4288,4300c4174,4176
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
<     ## buildings-propagation-loss-model.h (module 'buildings'): static ns3::TypeId ns3::BuildingsPropagationLossModel::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## buildings-propagation-loss-model.h (module 'buildings'): int64_t ns3::BuildingsPropagationLossModel::DoAssignStreams(int64_t stream) [member function]
<     cls.add_method('DoAssignStreams', 
<                    'int64_t', 
<                    [param('int64_t', 'stream')], 
<                    visibility='protected', is_virtual=True)
<     ## buildings-propagation-loss-model.h (module 'buildings'): double ns3::BuildingsPropagationLossModel::EvaluateSigma(ns3::Ptr<ns3::MobilityBuildingInfo> a, ns3::Ptr<ns3::MobilityBuildingInfo> b) const [member function]
<     cls.add_method('EvaluateSigma', 
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
>     ## buildings-propagation-loss-model.h (module 'buildings'): double ns3::BuildingsPropagationLossModel::DoCalcRxPower(double txPowerDbm, ns3::Ptr<ns3::MobilityModel> a, ns3::Ptr<ns3::MobilityModel> b) const [member function]
>     cls.add_method('DoCalcRxPower', 
4302,4303c4178,4179
<                    [param('ns3::Ptr< ns3::MobilityBuildingInfo >', 'a'), param('ns3::Ptr< ns3::MobilityBuildingInfo >', 'b')], 
<                    is_const=True, visibility='protected')
---
>                    [param('double', 'txPowerDbm'), param('ns3::Ptr< ns3::MobilityModel >', 'a'), param('ns3::Ptr< ns3::MobilityModel >', 'b')], 
>                    is_const=True, is_virtual=True)
4309,4313d4184
<     ## buildings-propagation-loss-model.h (module 'buildings'): double ns3::BuildingsPropagationLossModel::GetShadowing(ns3::Ptr<ns3::MobilityModel> a, ns3::Ptr<ns3::MobilityModel> b) const [member function]
<     cls.add_method('GetShadowing', 
<                    'double', 
<                    [param('ns3::Ptr< ns3::MobilityModel >', 'a'), param('ns3::Ptr< ns3::MobilityModel >', 'b')], 
<                    is_const=True, visibility='protected')
4323a4195,4209
>     ## buildings-propagation-loss-model.h (module 'buildings'): double ns3::BuildingsPropagationLossModel::GetShadowing(ns3::Ptr<ns3::MobilityModel> a, ns3::Ptr<ns3::MobilityModel> b) const [member function]
>     cls.add_method('GetShadowing', 
>                    'double', 
>                    [param('ns3::Ptr< ns3::MobilityModel >', 'a'), param('ns3::Ptr< ns3::MobilityModel >', 'b')], 
>                    is_const=True, visibility='protected')
>     ## buildings-propagation-loss-model.h (module 'buildings'): double ns3::BuildingsPropagationLossModel::EvaluateSigma(ns3::Ptr<ns3::MobilityBuildingInfo> a, ns3::Ptr<ns3::MobilityBuildingInfo> b) const [member function]
>     cls.add_method('EvaluateSigma', 
>                    'double', 
>                    [param('ns3::Ptr< ns3::MobilityBuildingInfo >', 'a'), param('ns3::Ptr< ns3::MobilityBuildingInfo >', 'b')], 
>                    is_const=True, visibility='protected')
>     ## buildings-propagation-loss-model.h (module 'buildings'): int64_t ns3::BuildingsPropagationLossModel::DoAssignStreams(int64_t stream) [member function]
>     cls.add_method('DoAssignStreams', 
>                    'int64_t', 
>                    [param('int64_t', 'stream')], 
>                    visibility='protected', is_virtual=True)
4342c4228
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
4347c4233
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
4352c4238
<                    visibility='protected', is_static=True)
---
>                    is_static=True, visibility='protected')
4357c4243
<                    visibility='protected', is_static=True, template_parameters=['ns3::ObjectBase*'])
---
>                    is_static=True, visibility='protected', template_parameters=[u'ns3::ObjectBase*'])
4362c4248
<                    visibility='protected', is_static=True, template_parameters=['void'])
---
>                    is_static=True, visibility='protected', template_parameters=[u'void'])
4367c4253
<                    visibility='protected', is_static=True, template_parameters=['ns3::Ptr<ns3::NetDevice> '])
---
>                    is_static=True, visibility='protected', template_parameters=[u'ns3::Ptr<ns3::NetDevice> '])
4372c4258
<                    visibility='protected', is_static=True, template_parameters=['ns3::Ptr<ns3::Packet const> '])
---
>                    is_static=True, visibility='protected', template_parameters=[u'ns3::Ptr<ns3::Packet const> '])
4377c4263
<                    visibility='protected', is_static=True, template_parameters=['unsigned short'])
---
>                    is_static=True, visibility='protected', template_parameters=[u'unsigned short'])
4382c4268
<                    visibility='protected', is_static=True, template_parameters=['ns3::Address const&'])
---
>                    is_static=True, visibility='protected', template_parameters=[u'ns3::Address const&'])
4387,4392c4273
<                    visibility='protected', is_static=True, template_parameters=['ns3::NetDevice::PacketType'])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    visibility='protected', is_static=True, template_parameters=['ns3::Ptr<ns3::MobilityModel const> '])
---
>                    is_static=True, visibility='protected', template_parameters=[u'ns3::NetDevice::PacketType'])
4423,4463d4303
< def register_Ns3ChannelCondition_methods(root_module, cls):
<     ## channel-condition-model.h (module 'propagation'): ns3::ChannelCondition::ChannelCondition(ns3::ChannelCondition const & arg0) [constructor]
<     cls.add_constructor([param('ns3::ChannelCondition const &', 'arg0')])
<     ## channel-condition-model.h (module 'propagation'): ns3::ChannelCondition::ChannelCondition() [constructor]
<     cls.add_constructor([])
<     ## channel-condition-model.h (module 'propagation'): ns3::ChannelCondition::LosConditionValue ns3::ChannelCondition::GetLosCondition() const [member function]
<     cls.add_method('GetLosCondition', 
<                    'ns3::ChannelCondition::LosConditionValue', 
<                    [], 
<                    is_const=True)
<     ## channel-condition-model.h (module 'propagation'): static ns3::TypeId ns3::ChannelCondition::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## channel-condition-model.h (module 'propagation'): void ns3::ChannelCondition::SetLosCondition(ns3::ChannelCondition::LosConditionValue losCondition) [member function]
<     cls.add_method('SetLosCondition', 
<                    'void', 
<                    [param('ns3::ChannelCondition::LosConditionValue', 'losCondition')])
<     return
< 
< def register_Ns3ChannelConditionModel_methods(root_module, cls):
<     ## channel-condition-model.h (module 'propagation'): static ns3::TypeId ns3::ChannelConditionModel::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## channel-condition-model.h (module 'propagation'): ns3::ChannelConditionModel::ChannelConditionModel() [constructor]
<     cls.add_constructor([])
<     ## channel-condition-model.h (module 'propagation'): ns3::Ptr<ns3::ChannelCondition> ns3::ChannelConditionModel::GetChannelCondition(ns3::Ptr<const ns3::MobilityModel> a, ns3::Ptr<const ns3::MobilityModel> b) const [member function]
<     cls.add_method('GetChannelCondition', 
<                    'ns3::Ptr< ns3::ChannelCondition >', 
<                    [param('ns3::Ptr< ns3::MobilityModel const >', 'a'), param('ns3::Ptr< ns3::MobilityModel const >', 'b')], 
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
<     ## channel-condition-model.h (module 'propagation'): int64_t ns3::ChannelConditionModel::AssignStreams(int64_t stream) [member function]
<     cls.add_method('AssignStreams', 
<                    'int64_t', 
<                    [param('int64_t', 'stream')], 
<                    is_virtual=True, is_pure_virtual=True)
<     return
< 
4943,4946d4782
<     ## position-allocator.h (module 'mobility'): void ns3::GridPositionAllocator::SetZ(double z) [member function]
<     cls.add_method('SetZ', 
<                    'void', 
<                    [param('double', 'z')])
5370,5375c5206
<                    [], 
<                    deprecated=True)
<     ## mobility-building-info.h (module 'buildings'): void ns3::MobilityBuildingInfo::MakeConsistent(ns3::Ptr<ns3::MobilityModel> mm) [member function]
<     cls.add_method('MakeConsistent', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::MobilityModel >', 'mm')])
---
>                    [])
5388,5457d5218
<     ## mobility-building-info.h (module 'buildings'): void ns3::MobilityBuildingInfo::DoInitialize() [member function]
<     cls.add_method('DoInitialize', 
<                    'void', 
<                    [], 
<                    visibility='protected', is_virtual=True)
<     return
< 
< def register_Ns3MobilityModel_methods(root_module, cls):
<     ## mobility-model.h (module 'mobility'): ns3::MobilityModel::MobilityModel(ns3::MobilityModel const & arg0) [constructor]
<     cls.add_constructor([param('ns3::MobilityModel const &', 'arg0')])
<     ## mobility-model.h (module 'mobility'): ns3::MobilityModel::MobilityModel() [constructor]
<     cls.add_constructor([])
<     ## mobility-model.h (module 'mobility'): int64_t ns3::MobilityModel::AssignStreams(int64_t stream) [member function]
<     cls.add_method('AssignStreams', 
<                    'int64_t', 
<                    [param('int64_t', 'stream')])
<     ## mobility-model.h (module 'mobility'): double ns3::MobilityModel::GetDistanceFrom(ns3::Ptr<const ns3::MobilityModel> position) const [member function]
<     cls.add_method('GetDistanceFrom', 
<                    'double', 
<                    [param('ns3::Ptr< ns3::MobilityModel const >', 'position')], 
<                    is_const=True)
<     ## mobility-model.h (module 'mobility'): ns3::Vector ns3::MobilityModel::GetPosition() const [member function]
<     cls.add_method('GetPosition', 
<                    'ns3::Vector', 
<                    [], 
<                    is_const=True)
<     ## mobility-model.h (module 'mobility'): double ns3::MobilityModel::GetRelativeSpeed(ns3::Ptr<const ns3::MobilityModel> other) const [member function]
<     cls.add_method('GetRelativeSpeed', 
<                    'double', 
<                    [param('ns3::Ptr< ns3::MobilityModel const >', 'other')], 
<                    is_const=True)
<     ## mobility-model.h (module 'mobility'): static ns3::TypeId ns3::MobilityModel::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## mobility-model.h (module 'mobility'): ns3::Vector ns3::MobilityModel::GetVelocity() const [member function]
<     cls.add_method('GetVelocity', 
<                    'ns3::Vector', 
<                    [], 
<                    is_const=True)
<     ## mobility-model.h (module 'mobility'): void ns3::MobilityModel::SetPosition(ns3::Vector const & position) [member function]
<     cls.add_method('SetPosition', 
<                    'void', 
<                    [param('ns3::Vector const &', 'position')])
<     ## mobility-model.h (module 'mobility'): void ns3::MobilityModel::NotifyCourseChange() const [member function]
<     cls.add_method('NotifyCourseChange', 
<                    'void', 
<                    [], 
<                    is_const=True, visibility='protected')
<     ## mobility-model.h (module 'mobility'): int64_t ns3::MobilityModel::DoAssignStreams(int64_t start) [member function]
<     cls.add_method('DoAssignStreams', 
<                    'int64_t', 
<                    [param('int64_t', 'start')], 
<                    visibility='private', is_virtual=True)
<     ## mobility-model.h (module 'mobility'): ns3::Vector ns3::MobilityModel::DoGetPosition() const [member function]
<     cls.add_method('DoGetPosition', 
<                    'ns3::Vector', 
<                    [], 
<                    is_const=True, visibility='private', is_virtual=True, is_pure_virtual=True)
<     ## mobility-model.h (module 'mobility'): ns3::Vector ns3::MobilityModel::DoGetVelocity() const [member function]
<     cls.add_method('DoGetVelocity', 
<                    'ns3::Vector', 
<                    [], 
<                    is_const=True, visibility='private', is_virtual=True, is_pure_virtual=True)
<     ## mobility-model.h (module 'mobility'): void ns3::MobilityModel::DoSetPosition(ns3::Vector const & position) [member function]
<     cls.add_method('DoSetPosition', 
<                    'void', 
<                    [param('ns3::Vector const &', 'position')], 
<                    visibility='private', is_virtual=True, is_pure_virtual=True)
5489c5250
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
5494c5255
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
5499c5260
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
5504c5265
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
5509c5270
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
5514c5275
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
5519c5280
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
5524c5285
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
5529c5290
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
5539c5300
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
5544c5305
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
5549c5310
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
5554c5315
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
5559c5320
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
5564c5325
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
5569c5330
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
5574c5335
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
5579c5340
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
5584c5345
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
5589c5350
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
5594c5355
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
5599c5360
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
5604c5365
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
5609,5629c5370
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3NeverLosChannelConditionModel_methods(root_module, cls):
<     ## channel-condition-model.h (module 'propagation'): static ns3::TypeId ns3::NeverLosChannelConditionModel::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## channel-condition-model.h (module 'propagation'): ns3::NeverLosChannelConditionModel::NeverLosChannelConditionModel() [constructor]
<     cls.add_constructor([])
<     ## channel-condition-model.h (module 'propagation'): ns3::Ptr<ns3::ChannelCondition> ns3::NeverLosChannelConditionModel::GetChannelCondition(ns3::Ptr<const ns3::MobilityModel> a, ns3::Ptr<const ns3::MobilityModel> b) const [member function]
<     cls.add_method('GetChannelCondition', 
<                    'ns3::Ptr< ns3::ChannelCondition >', 
<                    [param('ns3::Ptr< ns3::MobilityModel const >', 'a'), param('ns3::Ptr< ns3::MobilityModel const >', 'b')], 
<                    is_const=True, is_virtual=True)
<     ## channel-condition-model.h (module 'propagation'): int64_t ns3::NeverLosChannelConditionModel::AssignStreams(int64_t stream) [member function]
<     cls.add_method('AssignStreams', 
<                    'int64_t', 
<                    [param('int64_t', 'stream')], 
<                    is_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
5919,5923d5659
<     ## packet.h (module 'network'): void ns3::Packet::AddByteTag(ns3::Tag const & tag, uint32_t start, uint32_t end) const [member function]
<     cls.add_method('AddByteTag', 
<                    'void', 
<                    [param('ns3::Tag const &', 'tag'), param('uint32_t', 'start'), param('uint32_t', 'end')], 
<                    is_const=True)
6109c5845
<                    is_const=True, deprecated=True)
---
>                    deprecated=True, is_const=True)
6145,6249d5880
< def register_Ns3ThreeGppChannelConditionModel_methods(root_module, cls):
<     ## channel-condition-model.h (module 'propagation'): ns3::ThreeGppChannelConditionModel::ThreeGppChannelConditionModel() [constructor]
<     cls.add_constructor([])
<     ## channel-condition-model.h (module 'propagation'): int64_t ns3::ThreeGppChannelConditionModel::AssignStreams(int64_t stream) [member function]
<     cls.add_method('AssignStreams', 
<                    'int64_t', 
<                    [param('int64_t', 'stream')], 
<                    is_virtual=True)
<     ## channel-condition-model.h (module 'propagation'): ns3::Ptr<ns3::ChannelCondition> ns3::ThreeGppChannelConditionModel::GetChannelCondition(ns3::Ptr<const ns3::MobilityModel> a, ns3::Ptr<const ns3::MobilityModel> b) const [member function]
<     cls.add_method('GetChannelCondition', 
<                    'ns3::Ptr< ns3::ChannelCondition >', 
<                    [param('ns3::Ptr< ns3::MobilityModel const >', 'a'), param('ns3::Ptr< ns3::MobilityModel const >', 'b')], 
<                    is_const=True, is_virtual=True)
<     ## channel-condition-model.h (module 'propagation'): static ns3::TypeId ns3::ThreeGppChannelConditionModel::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## channel-condition-model.h (module 'propagation'): static double ns3::ThreeGppChannelConditionModel::Calculate2dDistance(ns3::Vector const & a, ns3::Vector const & b) [member function]
<     cls.add_method('Calculate2dDistance', 
<                    'double', 
<                    [param('ns3::Vector const &', 'a'), param('ns3::Vector const &', 'b')], 
<                    visibility='protected', is_static=True)
<     ## channel-condition-model.h (module 'propagation'): double ns3::ThreeGppChannelConditionModel::ComputePlos(ns3::Ptr<const ns3::MobilityModel> a, ns3::Ptr<const ns3::MobilityModel> b) const [member function]
<     cls.add_method('ComputePlos', 
<                    'double', 
<                    [param('ns3::Ptr< ns3::MobilityModel const >', 'a'), param('ns3::Ptr< ns3::MobilityModel const >', 'b')], 
<                    is_const=True, visibility='private', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3ThreeGppIndoorMixedOfficeChannelConditionModel_methods(root_module, cls):
<     ## channel-condition-model.h (module 'propagation'): static ns3::TypeId ns3::ThreeGppIndoorMixedOfficeChannelConditionModel::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## channel-condition-model.h (module 'propagation'): ns3::ThreeGppIndoorMixedOfficeChannelConditionModel::ThreeGppIndoorMixedOfficeChannelConditionModel() [constructor]
<     cls.add_constructor([])
<     ## channel-condition-model.h (module 'propagation'): double ns3::ThreeGppIndoorMixedOfficeChannelConditionModel::ComputePlos(ns3::Ptr<const ns3::MobilityModel> a, ns3::Ptr<const ns3::MobilityModel> b) const [member function]
<     cls.add_method('ComputePlos', 
<                    'double', 
<                    [param('ns3::Ptr< ns3::MobilityModel const >', 'a'), param('ns3::Ptr< ns3::MobilityModel const >', 'b')], 
<                    is_const=True, visibility='private', is_virtual=True)
<     return
< 
< def register_Ns3ThreeGppIndoorOpenOfficeChannelConditionModel_methods(root_module, cls):
<     ## channel-condition-model.h (module 'propagation'): static ns3::TypeId ns3::ThreeGppIndoorOpenOfficeChannelConditionModel::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## channel-condition-model.h (module 'propagation'): ns3::ThreeGppIndoorOpenOfficeChannelConditionModel::ThreeGppIndoorOpenOfficeChannelConditionModel() [constructor]
<     cls.add_constructor([])
<     ## channel-condition-model.h (module 'propagation'): double ns3::ThreeGppIndoorOpenOfficeChannelConditionModel::ComputePlos(ns3::Ptr<const ns3::MobilityModel> a, ns3::Ptr<const ns3::MobilityModel> b) const [member function]
<     cls.add_method('ComputePlos', 
<                    'double', 
<                    [param('ns3::Ptr< ns3::MobilityModel const >', 'a'), param('ns3::Ptr< ns3::MobilityModel const >', 'b')], 
<                    is_const=True, visibility='private', is_virtual=True)
<     return
< 
< def register_Ns3ThreeGppRmaChannelConditionModel_methods(root_module, cls):
<     ## channel-condition-model.h (module 'propagation'): static ns3::TypeId ns3::ThreeGppRmaChannelConditionModel::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## channel-condition-model.h (module 'propagation'): ns3::ThreeGppRmaChannelConditionModel::ThreeGppRmaChannelConditionModel() [constructor]
<     cls.add_constructor([])
<     ## channel-condition-model.h (module 'propagation'): double ns3::ThreeGppRmaChannelConditionModel::ComputePlos(ns3::Ptr<const ns3::MobilityModel> a, ns3::Ptr<const ns3::MobilityModel> b) const [member function]
<     cls.add_method('ComputePlos', 
<                    'double', 
<                    [param('ns3::Ptr< ns3::MobilityModel const >', 'a'), param('ns3::Ptr< ns3::MobilityModel const >', 'b')], 
<                    is_const=True, visibility='private', is_virtual=True)
<     return
< 
< def register_Ns3ThreeGppUmaChannelConditionModel_methods(root_module, cls):
<     ## channel-condition-model.h (module 'propagation'): static ns3::TypeId ns3::ThreeGppUmaChannelConditionModel::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## channel-condition-model.h (module 'propagation'): ns3::ThreeGppUmaChannelConditionModel::ThreeGppUmaChannelConditionModel() [constructor]
<     cls.add_constructor([])
<     ## channel-condition-model.h (module 'propagation'): double ns3::ThreeGppUmaChannelConditionModel::ComputePlos(ns3::Ptr<const ns3::MobilityModel> a, ns3::Ptr<const ns3::MobilityModel> b) const [member function]
<     cls.add_method('ComputePlos', 
<                    'double', 
<                    [param('ns3::Ptr< ns3::MobilityModel const >', 'a'), param('ns3::Ptr< ns3::MobilityModel const >', 'b')], 
<                    is_const=True, visibility='private', is_virtual=True)
<     return
< 
< def register_Ns3ThreeGppUmiStreetCanyonChannelConditionModel_methods(root_module, cls):
<     ## channel-condition-model.h (module 'propagation'): static ns3::TypeId ns3::ThreeGppUmiStreetCanyonChannelConditionModel::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## channel-condition-model.h (module 'propagation'): ns3::ThreeGppUmiStreetCanyonChannelConditionModel::ThreeGppUmiStreetCanyonChannelConditionModel() [constructor]
<     cls.add_constructor([])
<     ## channel-condition-model.h (module 'propagation'): double ns3::ThreeGppUmiStreetCanyonChannelConditionModel::ComputePlos(ns3::Ptr<const ns3::MobilityModel> a, ns3::Ptr<const ns3::MobilityModel> b) const [member function]
<     cls.add_method('ComputePlos', 
<                    'double', 
<                    [param('ns3::Ptr< ns3::MobilityModel const >', 'a'), param('ns3::Ptr< ns3::MobilityModel const >', 'b')], 
<                    is_const=True, visibility='private', is_virtual=True)
<     return
< 
6443,6482d6073
< def register_Ns3AlwaysLosChannelConditionModel_methods(root_module, cls):
<     ## channel-condition-model.h (module 'propagation'): static ns3::TypeId ns3::AlwaysLosChannelConditionModel::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## channel-condition-model.h (module 'propagation'): ns3::AlwaysLosChannelConditionModel::AlwaysLosChannelConditionModel() [constructor]
<     cls.add_constructor([])
<     ## channel-condition-model.h (module 'propagation'): ns3::Ptr<ns3::ChannelCondition> ns3::AlwaysLosChannelConditionModel::GetChannelCondition(ns3::Ptr<const ns3::MobilityModel> a, ns3::Ptr<const ns3::MobilityModel> b) const [member function]
<     cls.add_method('GetChannelCondition', 
<                    'ns3::Ptr< ns3::ChannelCondition >', 
<                    [param('ns3::Ptr< ns3::MobilityModel const >', 'a'), param('ns3::Ptr< ns3::MobilityModel const >', 'b')], 
<                    is_const=True, is_virtual=True)
<     ## channel-condition-model.h (module 'propagation'): int64_t ns3::AlwaysLosChannelConditionModel::AssignStreams(int64_t stream) [member function]
<     cls.add_method('AssignStreams', 
<                    'int64_t', 
<                    [param('int64_t', 'stream')], 
<                    is_virtual=True)
<     return
< 
< def register_Ns3BuildingsChannelConditionModel_methods(root_module, cls):
<     ## buildings-channel-condition-model.h (module 'buildings'): static ns3::TypeId ns3::BuildingsChannelConditionModel::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## buildings-channel-condition-model.h (module 'buildings'): ns3::BuildingsChannelConditionModel::BuildingsChannelConditionModel() [constructor]
<     cls.add_constructor([])
<     ## buildings-channel-condition-model.h (module 'buildings'): ns3::Ptr<ns3::ChannelCondition> ns3::BuildingsChannelConditionModel::GetChannelCondition(ns3::Ptr<const ns3::MobilityModel> a, ns3::Ptr<const ns3::MobilityModel> b) const [member function]
<     cls.add_method('GetChannelCondition', 
<                    'ns3::Ptr< ns3::ChannelCondition >', 
<                    [param('ns3::Ptr< ns3::MobilityModel const >', 'a'), param('ns3::Ptr< ns3::MobilityModel const >', 'b')], 
<                    is_const=True, is_virtual=True)
<     ## buildings-channel-condition-model.h (module 'buildings'): int64_t ns3::BuildingsChannelConditionModel::AssignStreams(int64_t stream) [member function]
<     cls.add_method('AssignStreams', 
<                    'int64_t', 
<                    [param('int64_t', 'stream')], 
<                    is_virtual=True)
<     return
< 
6502,6524c6093
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__const_ns3MobilityModel__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::MobilityModel>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
<     cls.add_constructor([])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::MobilityModel>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<const ns3::MobilityModel>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::MobilityModel const >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<const ns3::MobilityModel>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True)
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<const ns3::MobilityModel>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<const ns3::MobilityModel>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<const ns3::MobilityModel> arg0) [member operator]
<     cls.add_method('operator()', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::MobilityModel const >', 'arg0')], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True, custom_name=u'__call__')
6546c6115
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True, custom_name=u'__call__')
6568c6137
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True, custom_name=u'__call__')
6580c6149
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
6590c6159
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
