Only in ../../ns-3-dev/src/internet/test: error-channel.cc
Only in ../../ns-3-dev/src/internet/test: error-channel.h
diff ../../NS3-WiGig/src/internet/test/examples-to-run.py ../../ns-3-dev/src/internet/test/examples-to-run.py
1c1
< #! /usr/bin/env python3
---
> #! /usr/bin/env python
diff ../../NS3-WiGig/src/internet/test/global-route-manager-impl-test-suite.cc ../../ns-3-dev/src/internet/test/global-route-manager-impl-test-suite.cc
33,44d32
< /**
<  * \ingroup internet
<  * \defgroup internet-test internet module tests
<  */
< 
< 
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief Global Route Manager Test
<  */
229,235c217
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief Global Route Manager TestSuite
<  */
< class GlobalRouteManagerImplTestSuite : public TestSuite
---
> static class GlobalRouteManagerImplTestSuite : public TestSuite
238,248c220,225
<   GlobalRouteManagerImplTestSuite ();
< private:
< };
< 
< GlobalRouteManagerImplTestSuite::GlobalRouteManagerImplTestSuite ()
<   : TestSuite ("global-route-manager-impl", UNIT)
< {
<   AddTestCase (new GlobalRouteManagerImplTestCase (), TestCase::QUICK);
< }
< 
< static GlobalRouteManagerImplTestSuite g_globalRoutingManagerImplTestSuite; //!< Static variable for test initialization
---
>   GlobalRouteManagerImplTestSuite()
>     : TestSuite ("global-route-manager-impl", UNIT)
>   {
>     AddTestCase (new GlobalRouteManagerImplTestCase (), TestCase::QUICK);
>   }
> } g_globalRoutingManagerImplTestSuite;
Only in ../../NS3-WiGig/src/internet/test: icmp-test.cc
diff ../../NS3-WiGig/src/internet/test/ipv4-address-generator-test-suite.cc ../../ns-3-dev/src/internet/test/ipv4-address-generator-test-suite.cc
25,30d24
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief IPv4 network number Test
<  */
81,86d74
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief IPv4 address allocator Test
<  */
136,141d123
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief IPv4 network and address allocator Test
<  */
205,210d186
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief IPv4 AddressGenerator example (sort of) Test
<  */
263,268d238
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief IPv4 address collision Test
<  */
335,341c305
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief IPv4 Address Generator TestSuite
<  */
< class Ipv4AddressGeneratorTestSuite : public TestSuite
---
> static class Ipv4AddressGeneratorTestSuite : public TestSuite
344,359c308,317
<   Ipv4AddressGeneratorTestSuite ();
< private:
< };
< 
< Ipv4AddressGeneratorTestSuite::Ipv4AddressGeneratorTestSuite ()
<   : TestSuite ("ipv4-address-generator", UNIT)
< {
<   AddTestCase (new NetworkNumberAllocatorTestCase (), TestCase::QUICK);
<   AddTestCase (new AddressAllocatorTestCase (), TestCase::QUICK);
<   AddTestCase (new NetworkAndAddressTestCase (), TestCase::QUICK);
<   AddTestCase (new ExampleAddressGeneratorTestCase (), TestCase::QUICK);
<   AddTestCase (new AddressCollisionTestCase (), TestCase::QUICK);
< }
< 
< static Ipv4AddressGeneratorTestSuite g_ipv4AddressGeneratorTestSuite; //!< Static variable for test initialization
< 
---
>   Ipv4AddressGeneratorTestSuite ()
>     : TestSuite ("ipv4-address-generator")
>   {
>     AddTestCase (new NetworkNumberAllocatorTestCase (), TestCase::QUICK);
>     AddTestCase (new AddressAllocatorTestCase (), TestCase::QUICK);
>     AddTestCase (new NetworkAndAddressTestCase (), TestCase::QUICK);
>     AddTestCase (new ExampleAddressGeneratorTestCase (), TestCase::QUICK);
>     AddTestCase (new AddressCollisionTestCase (), TestCase::QUICK);
>   }
> } g_ipv4AddressGeneratorTestSuite;
diff ../../NS3-WiGig/src/internet/test/ipv4-address-helper-test-suite.cc ../../ns-3-dev/src/internet/test/ipv4-address-helper-test-suite.cc
26,31d25
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief IPv4 network allocator helper Test
<  */
78,83d71
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief IPv4 address allocator helper Test
<  */
131,136d118
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief IPv4 reset allocator helper Test
<  */
200,205d181
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief IPv4 address helper Test
<  */
282,288c258
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief IPv4 Address Helper TestSuite
<  */
< class Ipv4AddressHelperTestSuite : public TestSuite
---
> static class Ipv4AddressHelperTestSuite : public TestSuite
291,306c261,269
<   Ipv4AddressHelperTestSuite ();
< private:
< };
< 
< Ipv4AddressHelperTestSuite::Ipv4AddressHelperTestSuite ()
<   : TestSuite ("ipv4-address-helper", UNIT)
< {
<   AddTestCase (new NetworkAllocatorHelperTestCase (), TestCase::QUICK);
<   AddTestCase (new AddressAllocatorHelperTestCase (), TestCase::QUICK);
<   AddTestCase (new ResetAllocatorHelperTestCase (), TestCase::QUICK);
<   AddTestCase (new IpAddressHelperTestCasev4 (), TestCase::QUICK);
< }
< 
< static Ipv4AddressHelperTestSuite g_ipv4AddressHelperTestSuite; //!< Static variable for test initialization
< 
< 
---
>   Ipv4AddressHelperTestSuite ()
>     : TestSuite ("ipv4-address-helper", UNIT) 
>   {
>     AddTestCase (new NetworkAllocatorHelperTestCase (), TestCase::QUICK);
>     AddTestCase (new AddressAllocatorHelperTestCase (), TestCase::QUICK);
>     AddTestCase (new ResetAllocatorHelperTestCase (), TestCase::QUICK);
>     AddTestCase (new IpAddressHelperTestCasev4 (), TestCase::QUICK);
>   }
> } g_ipv4AddressHelperTestSuite;
Only in ../../NS3-WiGig/src/internet/test: ipv4-deduplication-test.cc
diff ../../NS3-WiGig/src/internet/test/ipv4-forwarding-test.cc ../../ns-3-dev/src/internet/test/ipv4-forwarding-test.cc
26a27
> #include "ns3/drop-tail-queue.h"
39,40d39
< #include "ns3/internet-stack-helper.h"
< #include "ns3/ipv4-routing-helper.h"
48a48,71
> static void
> AddInternetStack (Ptr<Node> node)
> {
>   //ARP
>   Ptr<ArpL3Protocol> arp = CreateObject<ArpL3Protocol> ();
>   node->AggregateObject (arp);
>   //IPV4
>   Ptr<Ipv4L3Protocol> ipv4 = CreateObject<Ipv4L3Protocol> ();
>   //Routing for Ipv4
>   Ptr<Ipv4StaticRouting> ipv4Routing = CreateObject<Ipv4StaticRouting> ();
>   ipv4->SetRoutingProtocol (ipv4Routing);
>   node->AggregateObject (ipv4);
>   node->AggregateObject (ipv4Routing);
>   //ICMP
>   Ptr<Icmpv4L4Protocol> icmp = CreateObject<Icmpv4L4Protocol> ();
>   node->AggregateObject (icmp);
>   //UDP
>   Ptr<UdpL4Protocol> udp = CreateObject<UdpL4Protocol> ();
>   node->AggregateObject (udp);
>   //Traffic Control
>   Ptr<TrafficControlLayer> tc = CreateObject<TrafficControlLayer> ();
>   node->AggregateObject (tc);
> }
> 
50,55d72
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief IPv4 Forwarding Test
<  */
58,64c75
<   Ptr<Packet> m_receivedPacket; //!< Received packet
< 
<   /**
<    * \brief Send data.
<    * \param socket The sending socket.
<    * \param to Destination address.
<    */
---
>   Ptr<Packet> m_receivedPacket;
66,70d76
<   /**
<    * \brief Send data.
<    * \param socket The sending socket.
<    * \param to Destination address.
<    */
77,80d82
<   /**
<    * \brief Receive data.
<    * \param socket The receiving socket.
<    */
121,125c123
< 
<   InternetStackHelper internet;
<   internet.SetIpv6StackInstall (false);
< 
<   internet.Install (rxNode);
---
>   AddInternetStack (rxNode);
140,141c138
< 
<   internet.Install (fwNode);
---
>   AddInternetStack (fwNode);
167,168c164
< 
<   internet.Install (txNode);
---
>   AddInternetStack (txNode);
179c175
<     Ptr<Ipv4StaticRouting> ipv4StaticRouting = Ipv4RoutingHelper::GetRouting <Ipv4StaticRouting> (txNode->GetObject<Ipv4> ()->GetRoutingProtocol ());
---
>     Ptr<Ipv4StaticRouting> ipv4StaticRouting = txNode->GetObject<Ipv4StaticRouting> ();
221,226c217,218
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief IPv4 Forwarding TestSuite
<  */
---
> //-----------------------------------------------------------------------------
> //-----------------------------------------------------------------------------
230,241c222,226
<   Ipv4ForwardingTestSuite ();
< private:
< };
< 
< Ipv4ForwardingTestSuite::Ipv4ForwardingTestSuite ()
<   : TestSuite ("ipv4-forwarding", UNIT)
< {
<   AddTestCase (new Ipv4ForwardingTest, TestCase::QUICK);
< }
< 
< static Ipv4ForwardingTestSuite g_ipv4forwardingTestSuite; //!< Static variable for test initialization
< 
---
>   Ipv4ForwardingTestSuite () : TestSuite ("ipv4-forwarding", UNIT)
>   {
>     AddTestCase (new Ipv4ForwardingTest, TestCase::QUICK);
>   }
> } g_ipv4forwardingTestSuite;
diff ../../NS3-WiGig/src/internet/test/ipv4-fragmentation-test.cc ../../ns-3-dev/src/internet/test/ipv4-fragmentation-test.cc
30a31
> #include "error-channel.h"
32a34
> #include "ns3/drop-tail-queue.h"
48d49
< #include "ns3/error-channel.h"
58,63c59,61
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief Tag used in IPv4 Fragmentation Test
<  */
---
> /* ----------------------------------------------------------------------------------
>  * Tag
>  --------------------------------------------------------------------------------- */
66c64
<   uint64_t token; //!< Token carried by the tag.
---
>   uint64_t token;
68,71d65
<   /**
<    * \brief Get the type ID.
<    * \return the object TypeId
<    */
81,90c75,76
<   /**
<    * \brief Set the token.
<    * \param token The token.
<    */
<   void SetToken (uint64_t token) { this->token = token; }
<   /**
<    * \brief Get the token.
<    * \returns The token.
<    */
<   uint64_t GetToken () { return token; }
---
>   void setToken (uint64_t token) { this->token = token; }
>   uint64_t getToken () { return token; }
93,98d78
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief IPv4 Fragmentation Test
<  */
101,103c81,83
<   Ptr<Packet> m_sentPacketClient;      //!< Packet sent by client.
<   Ptr<Packet> m_receivedPacketClient;  //!< Packet received by client.
<   Ptr<Packet> m_receivedPacketServer;  //!< Packet received by server.
---
>   Ptr<Packet> m_sentPacketClient;
>   Ptr<Packet> m_receivedPacketClient;
>   Ptr<Packet> m_receivedPacketServer;
106,111c86,91
<   Ptr<Socket> m_socketServer;   //!< Server socket.
<   Ptr<Socket> m_socketClient;   //!< Client socket.
<   uint32_t m_dataSize;    //!< Data size.
<   uint8_t *m_data;        //!< Data.
<   uint32_t m_size;        //!< packet size.
<   uint8_t m_icmpType;     //!< ICMP type.
---
>   Ptr<Socket> m_socketServer;
>   Ptr<Socket> m_socketClient;
>   uint32_t m_dataSize;
>   uint8_t *m_data;
>   uint32_t m_size;
>   uint8_t m_icmpType;
119,123d98
< 
<   /**
<    * \brief Start the server.
<    * \param ServerNode The server.
<    */
125,128d99
<   /**
<    * \brief Handle incoming packets.
<    * \param socket The receiving socket.
<    */
132,136d102
< 
<   /**
<    * \brief Start the client.
<    * \param ClientNode The client.
<    */
138,141d103
<   /**
<    * \brief Handle incoming packets.
<    * \param socket The receiving socket.
<    */
143,150d104
<   /**
<    * \brief Handle incoming ICMP packets.
<    * \param icmpSource The ICMP sender.
<    * \param icmpTtl The ICMP TTL.
<    * \param icmpType The ICMP Type.
<    * \param icmpCode The ICMP Code.
<    * \param icmpInfo The ICMP Info.
<    */
152c106
<                              uint8_t icmpCode, uint32_t icmpInfo);
---
>                              uint8_t icmpCode,uint32_t icmpInfo);
154,159d107
<   /**
<    * \brief Set the packet fill.
<    * \param fill The fill.
<    * \param fillSize The fill size.
<    * \param dataSize The packet size.
<    */
161,165d108
< 
<   /**
<    * \brief Send a packet.
<    * \returns The sent packet.
<    */
169a113
> 
176,177d119
<   m_size = 0;
<   m_icmpType = 0;
305c247
<   tag.SetToken (42);
---
>   tag.setToken (42);
479c421
<       NS_TEST_EXPECT_MSG_EQ (packetTag.GetToken (), 42, "PacketTag value not correct");
---
>       NS_TEST_EXPECT_MSG_EQ (packetTag.getToken (), 42, "PacketTag value not correct");
504c446
<           NS_TEST_EXPECT_MSG_EQ (byteTag->GetToken (), 42, "ByteTag value not correct");
---
>           NS_TEST_EXPECT_MSG_EQ (byteTag->getToken (), 42, "ByteTag value not correct");
513,520c455
< 
< 
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief IPv4 Fragmentation TestSuite
<  */
---
> //-----------------------------------------------------------------------------
524,533c459,463
<   Ipv4FragmentationTestSuite ();
< };
< 
< Ipv4FragmentationTestSuite::Ipv4FragmentationTestSuite ()
<   : TestSuite ("ipv4-fragmentation", UNIT)
< {
<   AddTestCase (new Ipv4FragmentationTest, TestCase::QUICK);
< }
< 
< static Ipv4FragmentationTestSuite g_ipv4fragmentationTestSuite; //!< Static variable for test initialization
---
>   Ipv4FragmentationTestSuite () : TestSuite ("ipv4-fragmentation", UNIT)
>   {
>     AddTestCase (new Ipv4FragmentationTest, TestCase::QUICK);
>   }
> } g_ipv4fragmentationTestSuite;
diff ../../NS3-WiGig/src/internet/test/ipv4-global-routing-test-suite.cc ../../ns-3-dev/src/internet/test/ipv4-global-routing-test-suite.cc
120,125d119
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief IPv4 GlobalRouting Link test
<  */
133c127
<   NodeContainer m_nodes; //!< Nodes used in the test.
---
>   NodeContainer m_nodes;
204,209d197
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief IPv4 GlobalRouting LAN test
<  */
217c205
<   NodeContainer m_nodes; //!< Nodes used in the test.
---
>   NodeContainer m_nodes;
285,290d272
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief IPv4 GlobalRouting Two Link test
<  */
298c280
<   NodeContainer m_nodes; //!< Nodes used in the test.
---
>   NodeContainer m_nodes;
404,409d385
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief IPv4 GlobalRouting Two LAN test
<  */
417c393
<   NodeContainer m_nodes; //!< Nodes used in the test.
---
>   NodeContainer m_nodes;
504,509d479
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief IPv4 GlobalRouting Bridge test
<  */
517c487
<   NodeContainer m_nodes; //!< Nodes used in the test.
---
>   NodeContainer m_nodes;
676,681d645
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief IPv4 GlobalRouting Two bridges test
<  */
689c653
<   NodeContainer m_nodes; //!< Nodes used in the test.
---
>   NodeContainer m_nodes;
826,831d789
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief IPv4 Dynamic GlobalRouting test
<  */
839,842d796
<   /**
<    * \brief Send some data
<    * \param index Index of the socket to use.
<    */
844,848d797
< 
<   /**
<    * \brief Shutdown a socket
<    * \param index Index of the socket to close.
<    */
850,855c799
< 
<   /**
<    * Handle an incoming packet
<    * \param socket The input socket.
<    */
<   void HandleRead (Ptr<Socket> socket);
---
>   void HandleRead (Ptr<Socket>);
858,863c802,807
<   uint16_t m_count; //!< Number of packets received.
<   std::vector<std::pair<Ptr<Socket>, bool> > m_sendSocks; //!< Sending sockets.
<   DataRate m_dataRate;  //!< Data rate.
<   uint16_t m_packetSize;  //!< Packet size.
<   std::vector<uint8_t> m_firstInterface;  //!< Packets received on the 1st interface at a given time.
<   std::vector<uint8_t> m_secondInterface;  //!< Packets received on the 2nd interface at a given time.
---
>   int m_count;
>   std::vector<std::pair<Ptr<Socket>, bool> > m_sendSocks;
>   DataRate m_dataRate;
>   uint16_t m_packetSize;
>   std::vector<uint8_t> m_firstInterface;
>   std::vector<uint8_t> m_secondInterface;
1090,1095d1033
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief IPv4 Dynamic GlobalRouting /32 test
<  */
1102,1107c1040
<   Ptr<Packet> m_receivedPacket; //!< number of received packets
< 
<   /**
<    * \brief Receive a packet.
<    * \param socket The receiving socket.
<    */
---
>   Ptr<Packet> m_receivedPacket;
1109,1113d1041
<   /**
<    * \brief Send a packet.
<    * \param socket The sending socket.
<    * \param to The address of the receiver.
<    */
1115,1119d1042
<   /**
<    * \brief Send a packet.
<    * \param socket The sending socket.
<    * \param to The address of the receiver.
<    */
1247,1252d1169
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief IPv4 GlobalRouting TestSuite
<  */
1272c1189,1190
< static Ipv4GlobalRoutingTestSuite g_globalRoutingTestSuite; //!< Static variable for test initialization
---
> // Do not forget to allocate an instance of this TestSuite
> static Ipv4GlobalRoutingTestSuite globalRoutingTestSuite;
diff ../../NS3-WiGig/src/internet/test/ipv4-header-test.cc ../../ns-3-dev/src/internet/test/ipv4-header-test.cc
27a28
> #include "ns3/drop-tail-queue.h"
41d41
< #include "ns3/internet-stack-helper.h"
51a52,76
> static void
> AddInternetStack (Ptr<Node> node)
> {
>   //ARP
>   Ptr<ArpL3Protocol> arp = CreateObject<ArpL3Protocol> ();
>   node->AggregateObject (arp);
>   //IPV4
>   Ptr<Ipv4L3Protocol> ipv4 = CreateObject<Ipv4L3Protocol> ();
>   //Routing for Ipv4
>   Ptr<Ipv4ListRouting> ipv4Routing = CreateObject<Ipv4ListRouting> ();
>   ipv4->SetRoutingProtocol (ipv4Routing);
>   Ptr<Ipv4StaticRouting> ipv4staticRouting = CreateObject<Ipv4StaticRouting> ();
>   ipv4Routing->AddRoutingProtocol (ipv4staticRouting, 0);
>   node->AggregateObject (ipv4);
>   //ICMP
>   Ptr<Icmpv4L4Protocol> icmp = CreateObject<Icmpv4L4Protocol> ();
>   node->AggregateObject (icmp);
>   // //Ipv4Raw
>   // Ptr<Ipv4UdpL4Protocol> udp = CreateObject<UdpL4Protocol> ();
>   // node->AggregateObject(udp);
>   // Traffic Control
>   Ptr<TrafficControlLayer> tc = CreateObject<TrafficControlLayer> ();
>   node->AggregateObject (tc);
> }
> 
53,58d77
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief IPv4 Header Test
<  */
61,80c80,83
<   Ptr<Packet> m_receivedPacket; //!< Received packet.
<   Ipv4Header m_receivedHeader;  //!< Received header.
< 
<   /**
<    * \brief Send a packet with speciic DSCP and ECN fields.
<    * \param socket The source socket.
<    * \param to The destination address.
<    * \param dscp The DSCP field.
<    * \param ecn The ECN field.
<    */
<   void DoSendData_IpHdr_Dscp (Ptr<Socket> socket, std::string to, Ipv4Header::DscpType dscp, Ipv4Header::EcnType ecn);
< 
<   /**
<    * \brief Send a packet with speciic DSCP and ECN fields.
<    * \param socket The source socket.
<    * \param to The destination address.
<    * \param dscp The DSCP field.
<    * \param ecn The ECN field.
<    */
<   void SendData_IpHdr_Dscp (Ptr<Socket> socket, std::string to, Ipv4Header::DscpType dscp, Ipv4Header::EcnType ecn);
---
>   Ptr<Packet> m_receivedPacket;
>   Ipv4Header m_receivedHeader;
>   void DoSendData_IpHdr_Dscp (Ptr<Socket> socket, std::string to, Ipv4Header::DscpType dscp,Ipv4Header::EcnType);
>   void SendData_IpHdr_Dscp (Ptr<Socket> socket, std::string to, Ipv4Header::DscpType dscp, Ipv4Header::EcnType);
86,91d88
<   /**
<    * \brief Receives a packet.
<    * \param socket The receiving socket.
<    * \param packet The packet.
<    * \param from The source address.
<    */
93,96d89
<   /**
<    * \brief Receives a packet.
<    * \param socket The receiving socket.
<    */
110a104
> 
121a116,117
> 
> 
157,159d152
<   InternetStackHelper internet;
<   internet.SetIpv6StackInstall (false);
< 
162,163c155
<   internet.Install (rxNode);
< 
---
>   AddInternetStack (rxNode);
175a168
> 
178c171
<   internet.Install (txNode);
---
>   AddInternetStack (txNode);
264a258,259
> 
> 
267,273c262
< 
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief IPv4 Header TestSuite
<  */
---
> //-----------------------------------------------------------------------------
281,283c270
< };
< 
< static Ipv4HeaderTestSuite g_ipv4HeaderTestSuite; //!< Static variable for test initialization
---
> } g_ipv4HeaderTestSuite;
diff ../../NS3-WiGig/src/internet/test/ipv4-list-routing-test-suite.cc ../../ns-3-dev/src/internet/test/ipv4-list-routing-test-suite.cc
26,31d25
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief IPv4 dummy routing class (A)
<  */
43c37
<   void PrintRoutingTable (Ptr<OutputStreamWrapper> stream, Time::Unit unit) const {}
---
>   void PrintRoutingTable (Ptr<OutputStreamWrapper> stream) const {}
46,51d39
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief IPv4 dummy routing class (B)
<  */
63c51
<   void PrintRoutingTable (Ptr<OutputStreamWrapper> stream, Time::Unit unit) const {}
---
>   void PrintRoutingTable (Ptr<OutputStreamWrapper> stream) const {}
66,71d53
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief IPv4 ListRouting negative test.
<  */
100,105d81
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief IPv4 ListRouting positive test.
<  */
139,145c115
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief IPv4 ListRouting TestSuite
<  */
< class Ipv4ListRoutingTestSuite : public TestSuite
---
> static class Ipv4ListRoutingTestSuite : public TestSuite
154d123
< };
156c125
< static Ipv4ListRoutingTestSuite g_ipv4ListRoutingTestSuite; //!< Static variable for test initialization
---
> } g_ipv4ListRoutingTestSuite;
diff ../../NS3-WiGig/src/internet/test/ipv4-packet-info-tag-test-suite.cc ../../ns-3-dev/src/internet/test/ipv4-packet-info-tag-test-suite.cc
51,52d50
< #include "ns3/internet-stack-helper.h"
< #include "ns3/simple-net-device-helper.h"
56,61c54,82
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief IPv4 PacketInfoTag Test
<  */
---
> namespace {
> 
> static void
> AddInternetStack (Ptr<Node> node)
> {
>   //ARP
>   Ptr<ArpL3Protocol> arp = CreateObject<ArpL3Protocol> ();
>   node->AggregateObject (arp);
>   //IPV4
>   Ptr<Ipv4L3Protocol> ipv4 = CreateObject<Ipv4L3Protocol> ();
>   //Routing for Ipv4
>   Ptr<Ipv4ListRouting> ipv4Routing = CreateObject<Ipv4ListRouting> ();
>   ipv4->SetRoutingProtocol (ipv4Routing);
>   Ptr<Ipv4StaticRouting> ipv4staticRouting = CreateObject<Ipv4StaticRouting> ();
>   ipv4Routing->AddRoutingProtocol (ipv4staticRouting, 0);
>   node->AggregateObject (ipv4);
>   //ICMP
>   Ptr<Icmpv4L4Protocol> icmp = CreateObject<Icmpv4L4Protocol> ();
>   node->AggregateObject (icmp);
>   //UDP
>   Ptr<UdpL4Protocol> udp = CreateObject<UdpL4Protocol> ();
>   node->AggregateObject (udp);
>   // Traffic Control
>   Ptr<TrafficControlLayer> tc = CreateObject<TrafficControlLayer> ();
>   node->AggregateObject (tc);
> }
> 
> }
> 
68,72d88
< 
<   /**
<    * \brief Receive callback.
<    * \param socket Receiving socket.
<    */
74,78d89
<   /**
<    * \brief Send data.
<    * \param socket Sending socket.
<    * \param to Destination address.
<    */
125,131c136,137
<   SimpleNetDeviceHelper simpleNetDevHelper;
<   NetDeviceContainer devs = simpleNetDevHelper.Install (NodeContainer (node0, node1));
<   Ptr<SimpleNetDevice> device = DynamicCast<SimpleNetDevice> (devs.Get (0));
<   Ptr<SimpleNetDevice> device2 = DynamicCast<SimpleNetDevice> (devs.Get (1));
< 
<   InternetStackHelper internet;
<   internet.SetIpv6StackInstall (false);
---
>   Ptr<SimpleNetDevice> device = CreateObject<SimpleNetDevice> ();
>   Ptr<SimpleNetDevice> device2 = CreateObject<SimpleNetDevice> ();
135c141
<   internet.Install (node0);
---
>   AddInternetStack (node0);
147c153
<   internet.Install (node1);
---
>   AddInternetStack (node1);
197,203c203
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief IPv4 PacketInfoTag TestSuite
<  */
< class Ipv4PacketInfoTagTestSuite : public TestSuite
---
> static class Ipv4PacketInfoTagTestSuite : public TestSuite
208c208
< };
---
> } g_packetinfotagTests;
215,216d214
< 
< static Ipv4PacketInfoTagTestSuite g_packetinfotagTests; //!< Static variable for test initialization
diff ../../NS3-WiGig/src/internet/test/ipv4-raw-test.cc ../../ns-3-dev/src/internet/test/ipv4-raw-test.cc
30a31
> #include "ns3/drop-tail-queue.h"
54,59d54
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief IPv4 RAW Socket Test
<  */
62,69c57,58
<   Ptr<Packet> m_receivedPacket;   //!< Received packet (1).
<   Ptr<Packet> m_receivedPacket2;  //!< Received packet (2).
< 
<   /**
<    * \brief Send data.
<    * \param socket The sending socket.
<    * \param to Destination address.
<    */
---
>   Ptr<Packet> m_receivedPacket;
>   Ptr<Packet> m_receivedPacket2;
71,75d59
<   /**
<    * \brief Send data.
<    * \param socket The sending socket.
<    * \param to Destination address.
<    */
77,81d60
<   /**
<    * \brief Send data.
<    * \param socket The sending socket.
<    * \param to Destination address.
<    */
83,87d61
<   /**
<    * \brief Send data.
<    * \param socket The sending socket.
<    * \param to Destination address.
<    */
94,99d67
<   /**
<    * \brief Receive data.
<    * \param socket The receiving socket.
<    * \param packet The received packet.
<    * \param from The sender.
<    */
101,106d68
<   /**
<    * \brief Receive data.
<    * \param socket The receiving socket.
<    * \param packet The received packet.
<    * \param from The sender.
<    */
108,111d69
<   /**
<    * \brief Receive data.
<    * \param socket The receiving socket.
<    */
113,116d70
<   /**
<    * \brief Receive data.
<    * \param socket The receiving socket.
<    */
343,350c297
< 
< 
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief IPv4 RAW Socket TestSuite
<  */
---
> //-----------------------------------------------------------------------------
358,360c305
< };
< 
< static Ipv4RawTestSuite g_ipv4rawTestSuite; //!< Static variable for test initialization
---
> } g_ipv4rawTestSuite;
diff ../../NS3-WiGig/src/internet/test/ipv4-rip-test.cc ../../ns-3-dev/src/internet/test/ipv4-rip-test.cc
26a27
> #include "ns3/drop-tail-queue.h"
50,55c51,52
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief IPv4 RIP Test
<  */
---
> // Ipv4RipTest
> 
58,64c55
<   Ptr<Packet> m_receivedPacket; //!< Received packet
< 
<   /**
<    * \brief Send data.
<    * \param socket The sending socket.
<    * \param to Destination address.
<    */
---
>   Ptr<Packet> m_receivedPacket;
66,70d56
<   /**
<    * \brief Send data.
<    * \param socket The sending socket.
<    * \param to Destination address.
<    */
77,80d62
<   /**
<    * \brief Receive data.
<    * \param socket The receiving socket.
<    */
270a253
> // Ipv4RipCountToInfinityTest
272,277d254
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief IPv4 RIP count to infinity Test
<  */
280,286c257
<   Ptr<Packet> m_receivedPacket; //!< Received packet
< 
<   /**
<    * \brief Send data.
<    * \param socket The sending socket.
<    * \param to Destination address.
<    */
---
>   Ptr<Packet> m_receivedPacket;
288,292d258
<   /**
<    * \brief Send data.
<    * \param socket The sending socket.
<    * \param to Destination address.
<    */
299,302d264
<   /**
<    * \brief Receive data.
<    * \param socket The receiving socket.
<    */
497a460
> // Ipv4RipSplitHorizonStrategyTest
499,504d461
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief IPv4 RIP SplitHorizon strategy Test
<  */
507,508c464,465
<   Rip::SplitHorizonType_e m_setStrategy;      //!< Strategy set.
<   Rip::SplitHorizonType_e m_detectedStrategy; //!< Strategy detected.
---
>   Rip::SplitHorizonType_e m_setStrategy;
>   Rip::SplitHorizonType_e m_detectedStrategy;
512,516d468
< 
<   /**
<    * \brief Constructor.
<    * \param strategy The SplitHorizon strategy.
<    */
519,522d470
<   /**
<    * \brief Receive data.
<    * \param socket The receiving socket.
<    */
668d615
<   rxSocket->BindToNetDevice (listenerDev);
669a617
>   rxSocket->BindToNetDevice (listenerDev);
685,690c633,634
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief IPv4 RIP TestSuite
<  */
---
> //-----------------------------------------------------------------------------
> //-----------------------------------------------------------------------------
702,704c646
< };
< 
< static Ipv4RipTestSuite g_ipv4ripTestSuite; //!< Static variable for test initialization
---
> } g_ipv4ripTestSuite;
diff ../../NS3-WiGig/src/internet/test/ipv4-static-routing-test-suite.cc ../../ns-3-dev/src/internet/test/ipv4-static-routing-test-suite.cc
41,46d40
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief IPv4 StaticRouting /32 Test
<  */
53,59c47,48
<   Ptr<Packet> m_receivedPacket; //!< Received packet
< 
<   /**
<    * \brief Send data.
<    * \param socket The sending socket.
<    * \param to Destination address.
<    */
---
>   Ptr<Packet> m_receivedPacket;
>   void ReceivePkt (Ptr<Socket> socket);
61,65d49
<   /**
<    * \brief Send data.
<    * \param socket The sending socket.
<    * \param to Destination address.
<    */
68,73d51
<   /**
<    * \brief Receive data.
<    * \param socket The receiving socket.
<    */
<   void ReceivePkt (Ptr<Socket> socket);
< 
204,209d181
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief IPv4 StaticRouting /32 TestSuite
<  */
222c194,195
< static Ipv4StaticRoutingTestSuite ipv4StaticRoutingTestSuite; //!< Static variable for test initialization
---
> // Do not forget to allocate an instance of this TestSuite
> static Ipv4StaticRoutingTestSuite ipv4StaticRoutingTestSuite;
diff ../../NS3-WiGig/src/internet/test/ipv4-test.cc ../../ns-3-dev/src/internet/test/ipv4-test.cc
35,40d34
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief IPv4 Test
<  */
43a38,40
>   /**
>    * \brief Constructor.
>    */
45,46c42,52
<   virtual ~Ipv4L3ProtocolTestCase ();
<   virtual void  DoRun (void);
---
>   /**
>    * \brief Destructor.
>    */
>   virtual
>   ~Ipv4L3ProtocolTestCase ();
>   /**
>    * \brief Run unit tests for this class.
>    * \return false if all tests have passed, false otherwise
>    */
>   virtual void
>   DoRun (void);
113c119
<   /* Test Ipv4Address::RemoveAddress(i, address) */
---
>   /* Test Ipv4Address::RemoveAddress(i, addresss) */
138,144c144
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief IPv4 TestSuite
<  */
< class IPv4L3ProtocolTestSuite : public TestSuite
---
> static class IPv4L3ProtocolTestSuite : public TestSuite
152,154c152
< };
< 
< static IPv4L3ProtocolTestSuite g_ipv4protocolTestSuite; //!< Static variable for test initialization
---
> } g_ipv4protocolTestSuite;
Only in ../../NS3-WiGig/src/internet/test: ipv6-address-duplication-test.cc
diff ../../NS3-WiGig/src/internet/test/ipv6-address-generator-test-suite.cc ../../ns-3-dev/src/internet/test/ipv6-address-generator-test-suite.cc
26,31d25
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief IPv6 network number allocator Test
<  */
77,82d70
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief IPv6 address allocator Test
<  */
132,137d119
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief IPv6 network number and address allocator Test
<  */
178,183d159
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief IPv6 example of an address generator Test
<  */
234,239d209
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief IPv6 address collision Test
<  */
306,312c276
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief IPv6 address generator TestSuite
<  */
< class Ipv6AddressGeneratorTestSuite : public TestSuite
---
> static class Ipv6AddressGeneratorTestSuite : public TestSuite
324,326c288
< };
< 
< static Ipv6AddressGeneratorTestSuite g_ipv6AddressGeneratorTestSuite; //!< Static variable for test initialization
---
> } g_ipv6AddressGeneratorTestSuite;
diff ../../NS3-WiGig/src/internet/test/ipv6-address-helper-test-suite.cc ../../ns-3-dev/src/internet/test/ipv6-address-helper-test-suite.cc
31,36d30
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief IPv6 AddressHelper Test
<  */
81,86d74
<   // Skip a some more addresses
<   ip1.SetBase (Ipv6Address ("2001:db81::"), Ipv6Prefix (32), Ipv6Address ("::ff"));
<   ipAddr1 = ip1.NewAddress ();
<   NS_TEST_ASSERT_MSG_EQ (ipAddr1, Ipv6Address ("2001:db81::ff"), "Ipv6AddressHelper failure");
<   ipAddr1 = ip1.NewAddress ();
<   NS_TEST_ASSERT_MSG_EQ (ipAddr1, Ipv6Address ("2001:db81::100"), "Ipv6AddressHelper failure");
90,91c78
<   NS_TEST_ASSERT_MSG_EQ (ipAddr1, Ipv6Address ("2001:db82::ff"), "Ipv6AddressHelper failure");
< 
---
>   NS_TEST_ASSERT_MSG_EQ (ipAddr1, Ipv6Address ("2001:db81:0:1::15"), "Ipv6AddressHelper failure");
93c80
<   ip1.SetBase (Ipv6Address ("2001:dddd::"), Ipv6Prefix (64), Ipv6Address ("::1"));
---
>   ip1.SetBase (Ipv6Address ("2001:dddd::"), Ipv6Prefix (32), Ipv6Address ("::1"));
103c90
<   ip1.SetBase (Ipv6Address ("2001:db82::"), Ipv6Prefix (32));
---
>   ip1.SetBase (Ipv6Address ("2001:db82::1"), Ipv6Prefix (32));
107,112d93
<   // Reset again
<   ip1.SetBase (Ipv6Address ("2001:f00d:cafe:00ff::"), Ipv6Prefix (64), Ipv6Address ("::1"));
<   ip1.NewNetwork (); // "2001:f00d:cafe:0100::"
<   ipAddr1 = ip1.NewAddress (); // ::1 again
<   NS_TEST_ASSERT_MSG_EQ (ipAddr1, Ipv6Address ("2001:f00d:cafe:0100::1"), "Ipv6AddressHelper failure");
< 
161,166d141
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief IPv6 AddressHelper TestSuite
<  */
179c154,155
< static Ipv6AddressHelperTestSuite ipv6AddressHelperTestSuite; //!< Static variable for test initialization
---
> // Do not forget to allocate an instance of this TestSuite
> static Ipv6AddressHelperTestSuite ipv6AddressHelperTestSuite;
diff ../../NS3-WiGig/src/internet/test/ipv6-dual-stack-test-suite.cc ../../ns-3-dev/src/internet/test/ipv6-dual-stack-test-suite.cc
55,60d54
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief IPv6 dual stack Test
<  */
69,71d62
<   /**
<    * \brief Setup the test.
<    */
72a64,65
>   Ptr<Node> node0;
>   Ptr<Node> node1;
74,81d66
<   Ptr<Node> node0;  //!< Node 0.
<   Ptr<Node> node1;  //!< Node 1.
< 
<   /**
<    * Handle connection created (1).
<    * \param s The socket.
<    * \param addr The peer address.
<    */
83,87d67
<   /**
<    * Handle connection created (2).
<    * \param s The socket.
<    * \param addr The peer address.
<    */
89,93d68
<   /**
<    * Handle connection created (3).
<    * \param s The socket.
<    * \param addr The peer address.
<    */
95,99d69
<   /**
<    * Handle connection created (4).
<    * \param s The socket.
<    * \param addr The peer address.
<    */
102,115c72,85
<   Ptr<Socket> server1;  //!< Server socket (1).
<   Ptr<Socket> server2;  //!< Server socket (2).
<   Ptr<Socket> server3;  //!< Server socket (3).
<   Ptr<Socket> server4;  //!< Server socket (4).
< 
<   Ptr<Socket> source1;  //!< Sending socket (1).
<   Ptr<Socket> source2;  //!< Sending socket (2).
<   Ptr<Socket> source3;  //!< Sending socket (3).
<   Ptr<Socket> source4;  //!< Sending socket (4).
< 
<   Address receivedAddr1;  //!< Received address (1).
<   Address receivedAddr2;  //!< Received address (2).
<   Address receivedAddr3;  //!< Received address (3).
<   Address receivedAddr4;  //!< Received address (4).
---
>   Ptr<Socket> server1;
>   Ptr<Socket> server2;
>   Ptr<Socket> server3;
>   Ptr<Socket> server4;
> 
>   Ptr<Socket> source1;
>   Ptr<Socket> source2;
>   Ptr<Socket> source3;
>   Ptr<Socket> source4;
> 
>   Address receivedAddr1;
>   Address receivedAddr2;
>   Address receivedAddr3;
>   Address receivedAddr4;
123,126d92
<   // Traffic Control
<   Ptr<TrafficControlLayer> tc = CreateObject<TrafficControlLayer> ();
<   node->AggregateObject (tc);
< 
130d95
<   arp->SetTrafficControl (tc);
170a136,139
>   // Traffic Control
>   Ptr<TrafficControlLayer> tc = CreateObject<TrafficControlLayer> ();
>   node->AggregateObject (tc);
> 
337,343c306,307
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief IPv6 dual stack TestSuite
<  */
< class Ipv6DualStackTestSuite : public TestSuite
---
> 
> static class Ipv6DualStackTestSuite : public TestSuite
351,353c315
< };
< 
< static Ipv6DualStackTestSuite g_ipv6DualStackTestSuite; //!< Static variable for test initialization
---
> } g_ipv6DualStackTestSuite;
diff ../../NS3-WiGig/src/internet/test/ipv6-extension-header-test-suite.cc ../../ns-3-dev/src/internet/test/ipv6-extension-header-test-suite.cc
36,42d35
< 
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief IPv6 extensions Test: Empty option field.
<  */
72,78d64
< 
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief IPv6 extensions Test: Option without alignment.
<  */
82,83c68
<   static const uint8_t TYPE = 42; //!< Option type.
< 
---
>   static const uint8_t TYPE = 42;
98,103d82
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief IPv6 extensions Test: Test the option without alignment.
<  */
142,148d120
< 
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief IPv6 extensions Test: Option with alignment.
<  */
152,153c124
<   static const uint8_t TYPE = 73; //!< Option Type.
< 
---
>   static const uint8_t TYPE = 73;
173,178d143
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief IPv6 extensions Test: Test the option with alignment.
<  */
222,227d186
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief IPv6 extensions Test: Test an option already aligned.
<  */
253,258d211
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief IPv6 extensions TestSuite.
<  */
273c226
< static Ipv6ExtensionHeaderTestSuite ipv6ExtensionHeaderTestSuite; //!< Static variable for test initialization
---
> static Ipv6ExtensionHeaderTestSuite ipv6ExtensionHeaderTestSuite;
diff ../../NS3-WiGig/src/internet/test/ipv6-forwarding-test.cc ../../ns-3-dev/src/internet/test/ipv6-forwarding-test.cc
27a28
> #include "ns3/drop-tail-queue.h"
48,53d48
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief IPv6 Forwarding Test
<  */
56,62c51
<   Ptr<Packet> m_receivedPacket;   //!< Received packet.
< 
<   /**
<    * \brief Send data.
<    * \param socket The sending socket.
<    * \param to Destination address.
<    */
---
>   Ptr<Packet> m_receivedPacket;
64,68d52
<   /**
<    * \brief Send data.
<    * \param socket The sending socket.
<    * \param to Destination address.
<    */
75,78d58
<   /**
<    * \brief Receive data.
<    * \param socket The receiving socket.
<    */
213,218c193,194
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief IPv6 Forwarding TestSuite
<  */
---
> //-----------------------------------------------------------------------------
> //-----------------------------------------------------------------------------
226,228c202
< };
< 
< static Ipv6ForwardingTestSuite g_ipv6forwardingTestSuite; //!< Static variable for test initialization
---
> } g_ipv6forwardingTestSuite;
diff ../../NS3-WiGig/src/internet/test/ipv6-fragmentation-test.cc ../../ns-3-dev/src/internet/test/ipv6-fragmentation-test.cc
33a34
> #include "error-channel.h"
34a36
> #include "ns3/drop-tail-queue.h"
57,58d58
< #include "ns3/internet-stack-helper.h"
< #include "ns3/error-channel.h"
68,73c68,70
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief Tag used in IPv6 Fragmentation Test
<  */
---
> /* ----------------------------------------------------------------------------------
>  * Tag
>  --------------------------------------------------------------------------------- */
76c73
<   uint64_t token; //!< Token carried by the tag.
---
>   uint64_t token;
78,81d74
<   /**
<    * \brief Get the type ID.
<    * \return the object TypeId
<    */
91,100c84,85
<   /**
<    * \brief Set the token.
<    * \param token The token.
<    */
<   void SetToken (uint64_t token) { this->token = token; }
<   /**
<    * \brief Get the token.
<    * \returns The token.
<    */
<   uint64_t GetToken () { return token; }
---
>   void setToken (uint64_t token) { this->token = token; }
>   uint64_t getToken () { return token; }
102a88,117
> static void
> AddInternetStack (Ptr<Node> node)
> {
>   //IPV6
>   Ptr<Ipv6L3Protocol> ipv6 = CreateObject<Ipv6L3Protocol> ();
> 
>   //Routing for Ipv6
>   Ptr<Ipv6ListRouting> ipv6Routing = CreateObject<Ipv6ListRouting> ();
>   ipv6->SetRoutingProtocol (ipv6Routing);
>   Ptr<Ipv6StaticRouting> ipv6staticRouting = CreateObject<Ipv6StaticRouting> ();
>   ipv6Routing->AddRoutingProtocol (ipv6staticRouting, 0);
>   node->AggregateObject (ipv6);
> 
>   //ICMPv6
>   Ptr<Icmpv6L4Protocol> icmp6 = CreateObject<Icmpv6L4Protocol> ();
>   node->AggregateObject (icmp6);
> 
>   //Ipv6 Extensions
>   ipv6->RegisterExtensions ();
>   ipv6->RegisterOptions ();
> 
>   //UDP
>   Ptr<UdpL4Protocol> udp = CreateObject<UdpL4Protocol> ();
>   node->AggregateObject (udp);
> 
>   // Traffic Control
>   Ptr<TrafficControlLayer> tc = CreateObject<TrafficControlLayer> ();
>   node->AggregateObject (tc);
> }
> 
104,109d118
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief IPv6 Fragmentation Test
<  */
112,114c121,123
<   Ptr<Packet> m_sentPacketClient;      //!< Packet sent by client.
<   Ptr<Packet> m_receivedPacketClient;  //!< Packet received by client.
<   Ptr<Packet> m_receivedPacketServer;  //!< Packet received by server.
---
>   Ptr<Packet> m_sentPacketClient;
>   Ptr<Packet> m_receivedPacketClient;
>   Ptr<Packet> m_receivedPacketServer;
117,123c126,132
<   Ptr<Socket> m_socketServer;   //!< Server socket.
<   Ptr<Socket> m_socketClient;   //!< Client socket.
<   uint32_t m_dataSize;    //!< Data size.
<   uint8_t *m_data;        //!< Data.
<   uint32_t m_size;        //!< packet size.
<   uint8_t m_icmpType;     //!< ICMP type.
<   uint8_t m_icmpCode;     //!< ICMP code.
---
>   Ptr<Socket> m_socketServer;
>   Ptr<Socket> m_socketClient;
>   uint32_t m_dataSize;
>   uint8_t *m_data;
>   uint32_t m_size;
>   uint8_t m_icmpType;
>   uint8_t m_icmpCode;
131,135d139
< 
<   /**
<    * \brief Start the server.
<    * \param ServerNode The server.
<    */
137,140d140
<   /**
<    * \brief Handle incoming packets.
<    * \param socket The receiving socket.
<    */
144,148d143
< 
<   /**
<    * \brief Start the client.
<    * \param ClientNode The client.
<    */
150,153d144
<   /**
<    * \brief Handle incoming packets.
<    * \param socket The receiving socket.
<    */
155,162d145
<   /**
<    * \brief Handle incoming ICMP packets.
<    * \param icmpSource The ICMP sender.
<    * \param icmpTtl The ICMP TTL.
<    * \param icmpType The ICMP Type.
<    * \param icmpCode The ICMP Code.
<    * \param icmpInfo The ICMP Info.
<    */
164c147
<                              uint8_t icmpCode, uint32_t icmpInfo);
---
>                              uint8_t icmpCode,uint32_t icmpInfo);
166,171d148
<   /**
<    * \brief Set the packet fill.
<    * \param fill The fill.
<    * \param fillSize The fill size.
<    * \param dataSize The packet size.
<    */
173,177d149
< 
<   /**
<    * \brief Send a packet.
<    * \returns The sent packet.
<    */
178a151
> 
188,190d160
<   m_size = 0;
<   m_icmpType = 0;
<   m_icmpCode = 0;
314c284
<   tag.SetToken (42);
---
>   tag.setToken (42);
328,330d297
<   InternetStackHelper internet;
<   internet.SetIpv4StackInstall (false);
< 
333c300
<   internet.Install (serverNode);
---
>   AddInternetStack (serverNode);
353c320
<   internet.Install (clientNode);
---
>   AddInternetStack (clientNode);
492c459
<       NS_TEST_EXPECT_MSG_EQ (packetTag.GetToken (), 42, "PacketTag value not correct");
---
>       NS_TEST_EXPECT_MSG_EQ (packetTag.getToken (), 42, "PacketTag value not correct");
517c484
<           NS_TEST_EXPECT_MSG_EQ (byteTag->GetToken (), 42, "ByteTag value not correct");
---
>           NS_TEST_EXPECT_MSG_EQ (byteTag->getToken (), 42, "ByteTag value not correct");
525,532c492
< 
< 
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief IPv6 Fragmentation TestSuite
<  */
---
> //-----------------------------------------------------------------------------
540,543c500
< };
< 
< static Ipv6FragmentationTestSuite g_ipv6fragmentationTestSuite; //!< Static variable for test initialization
< 
---
> } g_ipv6fragmentationTestSuite;
diff ../../NS3-WiGig/src/internet/test/ipv6-list-routing-test-suite.cc ../../ns-3-dev/src/internet/test/ipv6-list-routing-test-suite.cc
27,32d26
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief IPv6 dummy routing class (A)
<  */
47c41
<   virtual void PrintRoutingTable (Ptr<OutputStreamWrapper> stream, Time::Unit unit) const {};
---
>   virtual void PrintRoutingTable (Ptr<OutputStreamWrapper> stream) const {};
50,55d43
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief IPv6 dummy routing class (B)
<  */
70c58
<   virtual void PrintRoutingTable (Ptr<OutputStreamWrapper> stream, Time::Unit unit) const {};
---
>   virtual void PrintRoutingTable (Ptr<OutputStreamWrapper> stream) const {};
73,78d60
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief IPv6 ListRouting negative test.
<  */
107,112d88
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief IPv6 ListRouting positive test.
<  */
146,152c122
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief IPv6 ListRouting TestSuite
<  */
< class Ipv6ListRoutingTestSuite : public TestSuite
---
> static class Ipv6ListRoutingTestSuite : public TestSuite
162,164c132
< };
< 
< static Ipv6ListRoutingTestSuite g_ipv6ListRoutingTestSuite; //!< Static variable for test initialization
---
> } g_ipv6ListRoutingTestSuite;
diff ../../NS3-WiGig/src/internet/test/ipv6-packet-info-tag-test-suite.cc ../../ns-3-dev/src/internet/test/ipv6-packet-info-tag-test-suite.cc
48,49d47
< #include "ns3/internet-stack-helper.h"
< #include "ns3/simple-net-device-helper.h"
53,83c51,75
< //static void
< //AddInternetStack (Ptr<Node> node)
< //{
< //  Ptr<Ipv6L3Protocol> ipv6 = CreateObject<Ipv6L3Protocol> ();
< //  Ptr<Icmpv6L4Protocol> icmpv6 = CreateObject<Icmpv6L4Protocol> ();
< //  node->AggregateObject (ipv6);
< //  node->AggregateObject (icmpv6);
< //  ipv6->Insert (icmpv6);
< //  icmpv6->SetAttribute ("DAD", BooleanValue (false));
< //
< //  //Routing for Ipv6
< //  Ptr<Ipv6ListRouting> ipv6Routing = CreateObject<Ipv6ListRouting> ();
< //  ipv6->SetRoutingProtocol (ipv6Routing);
< //  Ptr<Ipv6StaticRouting> ipv6staticRouting = CreateObject<Ipv6StaticRouting> ();
< //  ipv6Routing->AddRoutingProtocol (ipv6staticRouting, 0);
< //
< //  /* register IPv6 extensions and options */
< //  ipv6->RegisterExtensions ();
< //  ipv6->RegisterOptions ();
< //
< //  // Traffic Control
< //  Ptr<TrafficControlLayer> tc = CreateObject<TrafficControlLayer> ();
< //  node->AggregateObject (tc);
< //}
< 
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief IPv6 PacketInfoTag Test
<  */
---
> static void
> AddInternetStack (Ptr<Node> node)
> {
>   Ptr<Ipv6L3Protocol> ipv6 = CreateObject<Ipv6L3Protocol> ();
>   Ptr<Icmpv6L4Protocol> icmpv6 = CreateObject<Icmpv6L4Protocol> ();
>   node->AggregateObject (ipv6);
>   node->AggregateObject (icmpv6);
>   ipv6->Insert (icmpv6);
>   icmpv6->SetAttribute ("DAD", BooleanValue (false));
> 
>   //Routing for Ipv6
>   Ptr<Ipv6ListRouting> ipv6Routing = CreateObject<Ipv6ListRouting> ();
>   ipv6->SetRoutingProtocol (ipv6Routing);
>   Ptr<Ipv6StaticRouting> ipv6staticRouting = CreateObject<Ipv6StaticRouting> ();
>   ipv6Routing->AddRoutingProtocol (ipv6staticRouting, 0);
> 
>   /* register IPv6 extensions and options */
>   ipv6->RegisterExtensions ();
>   ipv6->RegisterOptions ();
> 
>   // Traffic Control
>   Ptr<TrafficControlLayer> tc = CreateObject<TrafficControlLayer> ();
>   node->AggregateObject (tc);
> }
> 
90,93d81
<   /**
<    * \brief Receive callback.
<    * \param socket Receiving socket.
<    */
95,99d82
<   /**
<    * \brief Send data.
<    * \param socket Sending socket.
<    * \param to Destination address.
<    */
146,152c129,130
<   SimpleNetDeviceHelper simpleNetDevHelper;
<   NetDeviceContainer devs = simpleNetDevHelper.Install (NodeContainer (node0, node1));
<   Ptr<SimpleNetDevice> device = DynamicCast<SimpleNetDevice> (devs.Get (0));
<   Ptr<SimpleNetDevice> device2 = DynamicCast<SimpleNetDevice> (devs.Get (1));
< 
<   InternetStackHelper internet;
<   internet.SetIpv4StackInstall (false);
---
>   Ptr<SimpleNetDevice> device = CreateObject<SimpleNetDevice> ();
>   Ptr<SimpleNetDevice> device2 = CreateObject<SimpleNetDevice> ();
156c134
<   internet.Install (node0);
---
>   AddInternetStack (node0);
158,159d135
<   Ptr<Icmpv6L4Protocol> icmpv6 = node0->GetObject<Icmpv6L4Protocol> ();
<   icmpv6->SetAttribute ("DAD", BooleanValue (false));
170c146
<   internet.Install (node1);
---
>   AddInternetStack (node1);
172,173d147
<   icmpv6 = node0->GetObject<Icmpv6L4Protocol> ();
<   icmpv6->SetAttribute ("DAD", BooleanValue (false));
231,237c205
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief IPv6 PacketInfoTag TestSuite
<  */
< class Ipv6PacketInfoTagTestSuite : public TestSuite
---
> static class Ipv6PacketInfoTagTestSuite : public TestSuite
242c210
< };
---
> } g_packetinfotagTests;
249,250d216
< 
< static Ipv6PacketInfoTagTestSuite g_packetinfotagTests; //!< Static variable for test initialization
diff ../../NS3-WiGig/src/internet/test/ipv6-raw-test.cc ../../ns-3-dev/src/internet/test/ipv6-raw-test.cc
30a31
> #include "ns3/drop-tail-queue.h"
55,60d55
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief IPv6 RAW Socket Test
<  */
63,70c58,59
<   Ptr<Packet> m_receivedPacket;   //!< Received packet (1).
<   Ptr<Packet> m_receivedPacket2;  //!< Received packet (2).
< 
<   /**
<    * \brief Send data.
<    * \param socket The sending socket.
<    * \param to Destination address.
<    */
---
>   Ptr<Packet> m_receivedPacket;
>   Ptr<Packet> m_receivedPacket2;
72,76d60
<   /**
<    * \brief Send data.
<    * \param socket The sending socket.
<    * \param to Destination address.
<    */
83,88d66
<   /**
<    * \brief Receive data.
<    * \param socket The receiving socket.
<    * \param packet The received packet.
<    * \param from The sender.
<    */
90,95d67
<   /**
<    * \brief Receive data.
<    * \param socket The receiving socket.
<    * \param packet The received packet.
<    * \param from The sender.
<    */
97,100d68
<   /**
<    * \brief Receive data.
<    * \param socket The receiving socket.
<    */
102,105d69
<   /**
<    * \brief Receive data.
<    * \param socket The receiving socket.
<    */
294,301c258
< 
< 
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief IPv6 RAW Socket TestSuite
<  */
---
> //-----------------------------------------------------------------------------
309,312c266
< };
< 
< static Ipv6RawTestSuite g_ipv6rawTestSuite; //!< Static variable for test initialization
< 
---
> } g_ipv6rawTestSuite;
diff ../../NS3-WiGig/src/internet/test/ipv6-ripng-test.cc ../../ns-3-dev/src/internet/test/ipv6-ripng-test.cc
26a27
> #include "ns3/drop-tail-queue.h"
49,54c50,51
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief IPv6 RIPng Test
<  */
---
> // Ipv6RipngTest
> 
57,63c54
<   Ptr<Packet> m_receivedPacket; //!< Received packet
< 
<   /**
<    * \brief Send data.
<    * \param socket The sending socket.
<    * \param to Destination address.
<    */
---
>   Ptr<Packet> m_receivedPacket;
65,69d55
<   /**
<    * \brief Send data.
<    * \param socket The sending socket.
<    * \param to Destination address.
<    */
76,79d61
<   /**
<    * \brief Receive data.
<    * \param socket The receiving socket.
<    */
272,277d253
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief IPv6 RIPng count to infinity Test
<  */
280,286c256
<   Ptr<Packet> m_receivedPacket; //!< Received packet
< 
<   /**
<    * \brief Send data.
<    * \param socket The sending socket.
<    * \param to Destination address.
<    */
---
>   Ptr<Packet> m_receivedPacket;
288,292d257
<   /**
<    * \brief Send data.
<    * \param socket The sending socket.
<    * \param to Destination address.
<    */
299,302d263
<   /**
<    * \brief Receive data.
<    * \param socket The receiving socket.
<    */
497,502c458,459
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief IPv6 RIPng SplitHorizon strategy Test
<  */
---
> // Ipv6RipngSplitHorizonStrategyTest
> 
505,506c462,463
<   RipNg::SplitHorizonType_e m_setStrategy;      //!< Strategy set.
<   RipNg::SplitHorizonType_e m_detectedStrategy; //!< Strategy detected.
---
>   RipNg::SplitHorizonType_e m_setStrategy;
>   RipNg::SplitHorizonType_e m_detectedStrategy;
510,513d466
<   /**
<    * \brief Constructor.
<    * \param strategy The SplitHorizon strategy.
<    */
516,519d468
<   /**
<    * \brief Receive data.
<    * \param socket The receiving socket.
<    */
665d613
<   rxSocket->BindToNetDevice (listenerDev);
666a615
>   rxSocket->BindToNetDevice (listenerDev);
681,686c630,631
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief IPv6 RIPng TestSuite
<  */
---
> //-----------------------------------------------------------------------------
> //-----------------------------------------------------------------------------
698,700c643
< };
< 
< static Ipv6RipngTestSuite g_ipv6ripngTestSuite; //!< Static variable for test initialization
---
> } g_ipv6ripngTestSuite;
diff ../../NS3-WiGig/src/internet/test/ipv6-test.cc ../../ns-3-dev/src/internet/test/ipv6-test.cc
35,40d34
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief IPv6 Test
<  */
43a38,40
>   /**
>    * \brief Constructor.
>    */
46,47c43,54
<   virtual ~Ipv6L3ProtocolTestCase ();
<   virtual void DoRun ();
---
>   /**
>    * \brief Destructor.
>    */
>   virtual
>   ~Ipv6L3ProtocolTestCase ();
> 
>   /**
>    * \brief Run unit tests for this class.
>    * \return false if all tests have passed, false otherwise
>    */
>   virtual void
>   DoRun ();
49d55
< 
54d59
< 
58d62
< 
91,93d94
<   interface->SetUp ();
<   interface2->SetUp ();
< 
97a99
>   interface->SetUp ();
100a103,104
>   interface2->SetUp ();
> 
156c160
<   /* Test Ipv6Address::RemoveAddress(index, address) */
---
>   /* Test Ipv6Address::RemoveAddress(index, addresss) */
179,187c183
< 
< 
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief IPv6 TestSuite
<  */
< class IPv6L3ProtocolTestSuite : public TestSuite
---
> static class IPv6L3ProtocolTestSuite : public TestSuite
195,197c191
< };
< 
< static IPv6L3ProtocolTestSuite g_ipv6protocolTestSuite; //!< Static variable for test initialization
---
> } g_ipv6protocolTestSuite;
diff ../../NS3-WiGig/src/internet/test/rtt-test.cc ../../ns-3-dev/src/internet/test/rtt-test.cc
30,35d29
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief RTT estimator Test
<  */
45,51d38
<   /**
<    * \brief Check RTT values.
<    * \param rtt The RTT estimator.
<    * \param m The measurement.
<    * \param e The expected value.
<    * \param v The expected variance.
<    */
53,59d39
<   /**
<    * \brief Check RTT values with a 1 nanosecond of tolerance.
<    * \param rtt The RTT estimator.
<    * \param m The measurement.
<    * \param e The expected value.
<    * \param v The expected variance.
<    */
175,180d154
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief RTT estimator TestSuite
<  */
192c166,167
< static RttEstimatorTestSuite  g_rttEstimatorTestSuite; //!< Static variable for test initialization
---
> static RttEstimatorTestSuite  g_rttEstimatorTestSuite;
> 
Only in ../../NS3-WiGig/src/internet/test: tcp-advertised-window-test.cc
diff ../../NS3-WiGig/src/internet/test/tcp-bic-test.cc ../../ns-3-dev/src/internet/test/tcp-bic-test.cc
26c26
< using namespace ns3;
---
> namespace ns3 {
31,33d30
<  * \ingroup internet-test
<  * \ingroup tests
<  *
39,47d35
<   /**
<    * \brief Constructor.
<    * \param cWnd Congestion window.
<    * \param segmentSize Segment size.
<    * \param ssThresh Slow Start Threshold.
<    * \param segmentsAcked Number of segments acked.
<    * \param lastMaxCwnd Last max Cwnd.
<    * \param name Test description.
<    */
57,62d44
< 
<   /**
<    * \brief Update the TCP socket state.
<    * \param tcb The TCP socket state.
<    * \returns The ack counter.
<    */
64,67d45
< 
<   /**
<    * \brief Execute the test.
<    */
70,75c48,53
<   uint32_t m_cWnd;        //!< Congestion window.
<   uint32_t m_segmentSize; //!< Segment size.
<   uint32_t m_ssThresh;    //!< Slow Start Threshold.
<   uint32_t m_segmentsAcked; //!< Number of segments acked.
<   uint32_t m_lastMaxCwnd;   //!< Last max Cwnd.
<   Ptr<TcpSocketState> m_state;  //!< TCP socket state.
---
>   uint32_t m_cWnd;
>   uint32_t m_segmentSize;
>   uint32_t m_ssThresh;
>   uint32_t m_segmentsAcked;
>   uint32_t m_lastMaxCwnd;
>   Ptr<TcpSocketState> m_state;
135c113
<   UintegerValue smoothPart;
---
>   IntegerValue smoothPart;
192,195c170
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief Testing the congestion avoidance decrement on TcpBic
---
>  * \brief Testing the congestion avoidance increment on TcpBic
200,207d174
<   /**
<    * \brief Constructor.
<    * \param cWnd Congestion window.
<    * \param segmentSize Segment size.
<    * \param fastConvergence Fast convergence.
<    * \param lastMaxCwnd Last max Cwnd.
<    * \param name Test description.
<    */
216,219d182
< 
<   /**
<    * \brief Execute the test.
<    */
222,226c185,189
<   uint32_t m_cWnd;        //!< Congestion window.
<   uint32_t m_segmentSize; //!< Segment size.
<   BooleanValue m_fastConvergence;   //!< Fast convergence.
<   uint32_t m_lastMaxCwnd;   //!< Last max Cwnd.
<   Ptr<TcpSocketState> m_state;  //!< TCP socket state.
---
>   uint32_t m_cWnd;
>   uint32_t m_segmentSize;
>   BooleanValue m_fastConvergence;
>   uint32_t m_lastMaxCwnd;
>   Ptr<TcpSocketState> m_state;
302,308c265,267
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief TCP Bic TestSuite
<  */
< class TcpBicTestSuite : public TestSuite
---
> // -------------------------------------------------------------------
> 
> static class TcpBicTestSuite : public TestSuite
348c307
< };
---
> } g_tcpBicTest;
350c309
< static TcpBicTestSuite g_tcpBicTest; //!< Static variable for test initialization
---
> } // namespace ns3
diff ../../NS3-WiGig/src/internet/test/tcp-bytes-in-flight-test.cc ../../ns-3-dev/src/internet/test/tcp-bytes-in-flight-test.cc
23d22
< #include "ns3/config.h"
26c25
< using namespace ns3;
---
> namespace ns3 {
31,33d29
<  * \ingroup internet-test
<  * \ingroup tests
<  *
46,50d41
<   /**
<    * \brief Constructor.
<    * \param desc Description.
<    * \param toDrop Packets to drop.
<    */
54,57d44
<   /**
<    * \brief Create a receiver error model.
<    * \returns The receiver error model.
<    */
59,64d45
<   /**
<    * \brief Receive a packet.
<    * \param p The packet.
<    * \param h The TCP header.
<    * \param who Who the socket belongs to (sender or receiver).
<    */
66,71d46
<   /**
<    * \brief Transmit a packet.
<    * \param p The packet.
<    * \param h The TCP header.
<    * \param who Who the socket belongs to (sender or receiver).
<    */
73,77d47
<   /**
<    * \brief Track the bytes in flight.
<    * \param oldValue previous value.
<    * \param newValue actual value.
<    */
80,85d49
<   /**
<    * \brief Called when a packet is dropped.
<    * \param ipH The IP header.
<    * \param tcpH The TCP header.
<    * \param p The packet.
<    */
87,90d50
< 
<   /**
<    * \brief Configure the test.
<    */
93,109d52
<   /**
<    * \brief Do the checks before the RTO expires.
<    * \param tcb The TcpSocketState.
<    * \param who The socket.
<    */
<   void BeforeRTOExpired (const Ptr<const TcpSocketState> tcb, SocketWho who);
< 
<   /**
<    * \brief Update when RTO expires
<    * \param oldVal old time value
<    * \param newVal new time value
<    */
<   void RTOExpired (Time oldVal, Time newVal);
< 
<   /**
<    * \brief Do the final checks.
<    */
113,117c56,61
<   uint32_t m_guessedBytesInFlight;  //!< Guessed bytes in flight.
<   uint32_t m_dupAckRecv;            //!< Number of DupACKs received.
<   SequenceNumber32 m_lastAckRecv;   //!< Last ACK received.
<   SequenceNumber32 m_greatestSeqSent; //!< greatest sequence number sent.
<   std::vector<uint32_t> m_toDrop;     //!< List of SequenceNumber to drop
---
>   uint32_t m_realBytesInFlight;
>   uint32_t m_guessedBytesInFlight;
>   uint32_t m_dupAckRecv;
>   SequenceNumber32 m_lastAckRecv;
>   SequenceNumber32 m_greatestSeqSent;
>   std::vector<uint32_t> m_toDrop;     // List of SequenceNumber to drop
122a67
>     m_realBytesInFlight (0),
139d83
<   Config::SetDefault ("ns3::TcpSocketBase::Sack", BooleanValue (false));
157,170d100
< TcpBytesInFlightTest::BeforeRTOExpired (const Ptr<const TcpSocketState> tcb, SocketWho who)
< {
<   NS_LOG_DEBUG ("Before RTO for " << who);
<   GetSenderSocket ()->TraceConnectWithoutContext ("RTO", MakeCallback (&TcpBytesInFlightTest::RTOExpired, this));
< }
< 
< void
< TcpBytesInFlightTest::RTOExpired (Time oldVal, Time newVal)
< {
<   NS_LOG_DEBUG ("RTO expired at " << newVal.GetSeconds ());
<   m_guessedBytesInFlight = 0;
< }
< 
< void
174a105,107
> 
>   // These bytes leave the world, they were not loved by anyone
>   m_realBytesInFlight -= p->GetSize ();
181a115,116
>       // Received has got data; bytes are not in flight anymore
>       m_realBytesInFlight -= p->GetSize ();
194,195c129,137
<                   m_guessedBytesInFlight = 0; // All outstanding data acked
<                   diff = 0;
---
>                   diff -= (m_dupAckRecv * GetSegSize (SENDER));
> 
>                   if (diff > m_guessedBytesInFlight)
>                     {
>                       // Our home-made guess is influenced also by retransmission
>                       // so make sure that this does not overflow
>                       diff = m_guessedBytesInFlight;
>                     }
> 
202,204d143
<                   // During fast recovery the TCP data sender respond to a partial acknowledgment
<                   // by inferring that the next in-sequence packet has been lost (RFC5681)
<                   m_guessedBytesInFlight -= GetSegSize (SENDER);
226,231d164
<           // RFC 6675 says after two dupacks, the segment is considered lost
<           if (m_dupAckRecv == 3)
<             {
<               NS_LOG_DEBUG ("Loss of a segment detected");
<               m_guessedBytesInFlight -= GetSegSize (SENDER);
<             }
244,246c177
<       static SequenceNumber32 retr = SequenceNumber32 (0);
<       static uint32_t times = 0;
< 
---
>       m_realBytesInFlight += p->GetSize ();
248a180
>           m_guessedBytesInFlight += p->GetSize ();
250d181
<           times = 0;
253,263c184,185
<       if (retr == h.GetSequenceNumber ())
<         {
<           ++times;
<         }
< 
<       if (times < 2)
<         {
<           // count retransmission only one time
<           m_guessedBytesInFlight += p->GetSize ();
<         }
<        retr = h.GetSequenceNumber ();
---
>       // TODO: Maybe we need to account retransmission in another variable,
>       // such as m_guessedRetransOut ?
276c198
<                          "At time " << Simulator::Now ().GetSeconds () << "; guessed and measured bytes in flight differs");
---
>                          "Guessed and measured bytes in flight differs");
285a208
> //-----------------------------------------------------------------------------
287,293c210
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief TestSuite: Check the value of BytesInFlight against a home-made guess
<  */
< class TcpBytesInFlightTestSuite : public TestSuite
---
> static class TcpBytesInFlightTestSuite : public TestSuite
312,314c229
< };
< 
< static TcpBytesInFlightTestSuite g_tcpBytesInFlightTestSuite; //!< Static variable for test initialization
---
> } g_tcpBytesInFlightTestSuite;
315a231
> } // namespace ns3
Only in ../../NS3-WiGig/src/internet/test: tcp-classic-recovery-test.cc
Only in ../../NS3-WiGig/src/internet/test: tcp-close-test.cc
diff ../../NS3-WiGig/src/internet/test/tcp-cong-avoid-test.cc ../../ns-3-dev/src/internet/test/tcp-cong-avoid-test.cc
21c21
< #include "ns3/tcp-westwood.h"
---
> #include "ns3/internet-module.h"
23,24c23
< #include "ns3/test.h"
< #include "tcp-general-test.h"
---
> #include "tcp-cong-avoid-test.h"
26c25
< using namespace ns3;
---
> namespace ns3 {
30,94d28
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief Test the behavior of RFC congestion avoidance
<  *
<  * From RFC 5681:\n
<  *
<  *     cwnd += min (N, SMSS)                      (2)
<  *
<  *  During congestion avoidance, cwnd is incremented by roughly 1 full-
<  *  sized segment per round-trip time (RTT).  Congestion avoidance
<  *  continues until congestion is detected.  The basic guidelines for
<  *  incrementing cwnd during congestion avoidance are:
<  *
<  *     * MAY increment cwnd by SMSS bytes
<  *
<  *     * SHOULD increment cwnd per equation (2) once per RTT
<  *
<  *     * MUST NOT increment cwnd by more than SMSS bytes
<  *
<  * To test this behavior and these points, a tracing callback is attached
<  * to the cWnd. Each time it increases, the increment is saved. Meanwhile, a
<  * timer checks if an amount of time equals to the RTT has passed, and if yes,
<  * it checks that the increment has not passed the 1 MSS limit.
<  */
< class
< TcpNewRenoCongAvoidNormalTest : public TcpGeneralTest
< {
< public:
<   /**
<    * \brief Constructor.
<    * \param segmentSize Segment size.
<    * \param packetSize Size of the packets.
<    * \param packets Number of packets.
<    * \param congControl Type of congestion control.
<    * \param desc The test description.
<    */
<   TcpNewRenoCongAvoidNormalTest (uint32_t segmentSize, uint32_t packetSize,
<                                  uint32_t packets, TypeId& congControl,
<                                  const std::string &desc);
< protected:
<   virtual void CWndTrace (uint32_t oldValue, uint32_t newValue);
<   virtual void QueueDrop (SocketWho who);
<   virtual void PhyDrop (SocketWho who);
<   virtual void NormalClose (SocketWho who);
<   /**
<    * \brief Called each RTT (1.0 sec in the testing environment) and check
<    * that the overall increment in this RTT is less or equal than 1 MSS
<    */
<   void Check ();
< 
<   virtual void ConfigureEnvironment ();
<   virtual void ConfigureProperties ();
< 
< private:
<   uint32_t m_segmentSize; //!< Segment size.
<   uint32_t m_packetSize;  //!< Size of the packets.
<   uint32_t m_packets;     //!< Number of packets.
<   uint32_t m_increment;   //!< Congestion window increment.
<   EventId m_event;        //!< Check event.
<   bool   m_initial;       //!< True on first run.
< };
< 
< 
125a60,66
> /**
>  * \brief Check the increment of the congestion window in the congestion avoidance
>  *
>  * The method trace the size change of the cWnd, saving each increment.
>  *
>  * \see Check
>  */
155a97,100
> /**
>  * \brief Called each RTT (1.0 sec in the testing environment) and check
>  * that the overall increment in this RTT is less or equal than 1 MSS
>  */
182a128
> //-----------------------------------------------------------------------------
184,191c130
< 
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief TestSuite for the behavior of RFC congestion avoidance
<  */
< class TcpRenoCongAvoidTestSuite : public TestSuite
---
> static class TcpRenoCongAvoidTestSuite : public TestSuite
213c152
< };
---
> } g_tcpCongAvoidNormalTest;
215c154
< static TcpRenoCongAvoidTestSuite g_tcpCongAvoidNormalTest; //!< Static variable for test initialization
---
> } // namespace ns3
Only in ../../ns-3-dev/src/internet/test: tcp-cong-avoid-test.h
diff ../../NS3-WiGig/src/internet/test/tcp-datasentcb-test.cc ../../ns-3-dev/src/internet/test/tcp-datasentcb-test.cc
23d22
< #include "ns3/tcp-header.h"
25c24
< using namespace ns3;
---
> namespace ns3 {
30,32d28
<  * \ingroup internet-test
<  * \ingroup tests
<  *
39,42d34
<   /**
<    * \brief Get the type ID.
<    * \return the object TypeId
<    */
48a41,43
>   TcpSocketHalfAck (const TcpSocketHalfAck &other) : TcpSocketMsgBase (other)
>   {
>   }
91,93d85
<  * \ingroup internet-test
<  * \ingroup tests
<  *
105,111d96
< 
<   /**
<    * Constructor.
<    * \param desc Test description.
<    * \param size Packet size.
<    * \param packets Number of packets.
<    */
127,129c112,114
<   uint32_t m_pktSize;      //!< Packet size.
<   uint32_t m_pktCount;     //!< Number of packets sent.
<   uint32_t m_notifiedData; //!< Amount of data notified.
---
>   uint32_t m_pktSize;
>   uint32_t m_pktCount;
>   uint32_t m_notifiedData;
163,169c148
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief TestSuite: Data Sent callback
<  */
< class TcpDataSentCbTestSuite : public TestSuite
---
> static class TcpDataSentCbTestSuite : public TestSuite
182c161
< };
---
> } g_tcpDataSentCbTestSuite;
184c163
< static TcpDataSentCbTestSuite g_tcpDataSentCbTestSuite; //!< Static variable for test initialization
---
> } // namespace ns3
Only in ../../NS3-WiGig/src/internet/test: tcp-dctcp-test.cc
Only in ../../NS3-WiGig/src/internet/test: tcp-ecn-test.cc
diff ../../NS3-WiGig/src/internet/test/tcp-endpoint-bug2211.cc ../../ns-3-dev/src/internet/test/tcp-endpoint-bug2211.cc
20,34c20,21
< #include <iostream>
< 
< #include "ns3/test.h"
< #include "ns3/core-module.h"
< #include "ns3/network-module.h"
< #include "ns3/internet-module.h"
< 
< using namespace ns3;
< 
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief Test for bug 2211.
<  *
---
> /*
>  * Test for bug 2211
51a39,47
> #include <iostream>
> 
> #include "ns3/test.h"
> #include "ns3/core-module.h"
> #include "ns3/network-module.h"
> #include "ns3/internet-module.h"
> 
> namespace ns3 {
> 
55,59d50
<   /**
<    * Constructor.
<    * \param desc Test description.
<    * \param ipVersion True to use IPv6.
<    */
62,65d52
<   /**
<    * \brief Receive a packet.
<    * \param socket The receiving socket.
<    */
67,71d53
<   /**
<    * \brief Handle an incoming connection.
<    * \param s The receiving socket.
<    * \param from The other node IP address.
<    */
73,76d54
<   /**
<    * \brief Handle a connection establishment.
<    * \param socket The receiving socket.
<    */
80c58
<   bool m_v6; //!< True to use IPv6.
---
>   bool m_v6;
151,156d128
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief TestSuite for bug 2211 - It must be used with valgrind.
<  */
165,169c137
< };
< 
< static TcpEndpointBug2211TestSuite g_TcpEndPoint2211TestSuite; //!< Static variable for test initialization
< 
< 
---
> } g_TcpEndPoint2211TestSuite;
170a139
> } // namespace ns3
diff ../../NS3-WiGig/src/internet/test/tcp-error-model.h ../../ns-3-dev/src/internet/test/tcp-error-model.h
29,32c29
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief A general (TCP-aware) error model.
---
>  * \brief A general (TCP-aware) error model
41,44d37
<   /**
<    * \brief Get the type ID.
<    * \return the object TypeId
<    */
48,51d40
<   /**
<    * \brief Set the drop callback.
<    * \param cb The callback to be set.
<    */
58,64d46
<   /**
<    * \brief Check if the packet should be dropped.
<    * \param ipHeader The packet IPv4 header.
<    * \param tcpHeader The packet TCP header.
<    * \param packetSize The packet size.
<    * \returns True if the packet should be dropped.
<    */
71c53
<   Callback<void, const Ipv4Header&, const TcpHeader&, Ptr<const Packet> > m_dropCallback; //!< Drop callback.
---
>   Callback<void, const Ipv4Header&, const TcpHeader&, Ptr<const Packet> > m_dropCallback;
75,78c57
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief An error model TCP aware: it drops the sequence number declared.
---
>  * \brief An error model TCP aware: it drops the sequence number declared
85,88d63
<   /**
<    * \brief Get the type ID.
<    * \return the object TypeId
<    */
110c85
<   std::list<SequenceNumber32> m_seqToKill; //!< List of the sequence numbers to be dropped.
---
>   std::list<SequenceNumber32> m_seqToKill;
117,120c92
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief Error model which drop packets with specified TCP flags.
---
>  * \brief Error model which drop packets with specified TCP flags
132,135d103
<   /**
<    * \brief Get the type ID.
<    * \return the object TypeId
<    */
160c128
<   void SetKillRepeat (int16_t killNumber)
---
>   void SetKillRepeat (int killNumber)
170,171c138,139
<   TcpHeader::Flags_t m_flagsToKill; //!< Flags a packet should have to be dropped.
<   int16_t m_killNumber;  //!< The number of times the packet should be killed.
---
>   TcpHeader::Flags_t m_flagsToKill;
>   int m_killNumber;
diff ../../NS3-WiGig/src/internet/test/tcp-fast-retr-test.cc ../../ns-3-dev/src/internet/test/tcp-fast-retr-test.cc
19a20
> #include "tcp-fast-retr-test.h"
21,22d21
< #include "tcp-general-test.h"
< #include "ns3/simple-channel.h"
24d22
< #include "tcp-error-model.h"
26c24
< using namespace ns3;
---
> namespace ns3 {
30,98d27
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief Test the fast retransmission
<  *
<  * Checking what is happening is not so easy, so there are a lot of variables
<  * which helps to keep track on what is happening.
<  * The idea is following sequence and ack numbers which are exchanged,
<  * testing if they are the same as the implementation transmits.
<  */
< class TcpFastRetrTest : public TcpGeneralTest
< {
< public:
<   /**
<    * \brief Constructor
<    * \param congControl Type of congestion control.
<    * \param seqToKill Sequence number of the packet to drop.
<    * \param msg Test message.
<    */
<   TcpFastRetrTest (TypeId congControl, uint32_t seqToKill, const std::string &msg);
< 
<   virtual Ptr<ErrorModel> CreateSenderErrorModel ();
<   virtual Ptr<ErrorModel> CreateReceiverErrorModel ();
< 
<   virtual Ptr<TcpSocketMsgBase> CreateSenderSocket (Ptr<Node> node);
< 
< protected:
<   virtual void RcvAck      (const Ptr<const TcpSocketState> tcb,
<                             const TcpHeader& h, SocketWho who);
<   virtual void ProcessedAck (const Ptr<const TcpSocketState> tcb,
<                              const TcpHeader& h, SocketWho who);
< 
<   virtual void CongStateTrace (const TcpSocketState::TcpCongState_t oldValue,
<                                const TcpSocketState::TcpCongState_t newValue);
< 
<   virtual void Tx (const Ptr<const Packet> p, const TcpHeader&h, SocketWho who);
<   virtual void Rx (const Ptr<const Packet> p, const TcpHeader&h, SocketWho who);
< 
<   virtual void AfterRTOExpired (const Ptr<const TcpSocketState> tcb, SocketWho who);
< 
<   /**
<    * \brief Check if the packet being dropped is the right one.
<    * \param ipH IPv4 header.
<    * \param tcpH TCP header.
<    * \param p The packet.
<    */
<   void PktDropped (const Ipv4Header &ipH, const TcpHeader& tcpH, Ptr<const Packet> p);
<   virtual void FinalChecks ();
< 
<   virtual void ConfigureProperties ();
<   virtual void ConfigureEnvironment ();
< 
<   bool m_pktDropped;      //!< The packet has been dropped.
<   bool m_pktWasDropped;   //!< The packet was dropped (according to the receiver).
<   uint32_t m_seqToKill;   //!< Sequence number to drop.
<   uint32_t m_dupAckReceived;  //!< DipACk received.
< 
<   SequenceNumber32 m_previousAck;     //!< Previous ACK received.
<   SequenceNumber32 m_sndNextExpSeq;   //!< Sender next expected sequence number.
<   SequenceNumber32 m_rcvNextExpAck;   //!< Receiver next expected sequence number.
< 
<   uint32_t m_countRetr; //!< Retry counter.
< 
<   uint32_t m_bytesRcvButNotAcked; //!< Number of bytes received but not acked.
< 
<   Ptr<TcpSeqErrorModel> m_errorModel; //!< Error model.
< };
< 
376c305
< TcpFastRetrTest::AfterRTOExpired (const Ptr<const TcpSocketState> tcb, SocketWho who)
---
> TcpFastRetrTest::RTOExpired (const Ptr<const TcpSocketState> tcb, SocketWho who)
429a359
> //-----------------------------------------------------------------------------
431,437c361
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief Testsuite for the fast retransmission
<  */
< class TcpFastRetrTestSuite : public TestSuite
---
> static class TcpFastRetrTestSuite : public TestSuite
451,453c375
< };
< 
< static TcpFastRetrTestSuite g_TcpFastRetrTestSuite; //!< Static variable for test initialization
---
> } g_TcpFastRetrTestSuite;
454a377
> } // namespace ns3
Only in ../../ns-3-dev/src/internet/test: tcp-fast-retr-test.h
diff ../../NS3-WiGig/src/internet/test/tcp-general-test.cc ../../ns-3-dev/src/internet/test/tcp-general-test.cc
27d26
< #include "ns3/queue.h"
31,35d29
< #include "ns3/tcp-header.h"
< #include "ns3/tcp-tx-buffer.h"
< #include "ns3/tcp-rx-buffer.h"
< #include "ns3/rtt-estimator.h"
< 
38c32
< using namespace ns3;
---
> namespace ns3 {
45d38
<     m_recoveryTypeId (TcpClassicRecovery::GetTypeId ()),
105d97
<   SetRecoveryAlgorithm (m_recoveryTypeId);
184,185c176
<   m_receiverSocket->SetAfterRetransmitCb (MakeCallback (&TcpGeneralTest::AfterRetransmitCb, this));
<   m_receiverSocket->SetBeforeRetransmitCb (MakeCallback (&TcpGeneralTest::BeforeRetransmitCb, this));
---
>   m_receiverSocket->SetRetransmitCb (MakeCallback (&TcpGeneralTest::RtoExpiredCb, this));
201,202c192
<   m_senderSocket->SetAfterRetransmitCb (MakeCallback (&TcpGeneralTest::AfterRetransmitCb, this));
<   m_senderSocket->SetBeforeRetransmitCb (MakeCallback (&TcpGeneralTest::BeforeRetransmitCb, this));
---
>   m_senderSocket->SetRetransmitCb (MakeCallback (&TcpGeneralTest::RtoExpiredCb, this));
207,208d196
<   m_senderSocket->TraceConnectWithoutContext ("CongestionWindowInflated",
<                                               MakeCallback (&TcpGeneralTest::CWndInflTrace, this));
221,231d208
<   m_senderSocket->TraceConnectWithoutContext ("RTO",
<                                               MakeCallback (&TcpGeneralTest::RtoTrace, this));
<   m_senderSocket->TraceConnectWithoutContext ("NextTxSequence",
<                                               MakeCallback (&TcpGeneralTest::NextTxSeqTrace, this));
<   m_senderSocket->TraceConnectWithoutContext ("HighestSequence",
<                                               MakeCallback (&TcpGeneralTest::HighestTxSeqTrace, this));
<   m_senderSocket->m_rateOps->TraceConnectWithoutContext ("TcpRateUpdated",
<                                               MakeCallback (&TcpGeneralTest::RateUpdatedTrace, this));
<   m_senderSocket->m_rateOps->TraceConnectWithoutContext ("TcpRateSampleUpdated",
<                                               MakeCallback (&TcpGeneralTest::RateSampleUpdatedTrace, this));
< 
281,287d257
<   return CreateSocket (node, socketType, congControl, m_recoveryTypeId);
< }
< 
< Ptr<TcpSocketMsgBase>
< TcpGeneralTest::CreateSocket (Ptr<Node> node, TypeId socketType,
<                               TypeId congControl, TypeId recoveryAlgorithm)
< {
290d259
<   ObjectFactory recoveryAlgorithmFactory;
295d263
<   recoveryAlgorithmFactory.SetTypeId (recoveryAlgorithm);
301d268
<   Ptr<TcpRecoveryOps> recovery = recoveryAlgorithmFactory.Create<TcpRecoveryOps> ();
307c274
<   socket->SetRecoveryAlgorithm (recovery);
---
> 
314c281
<   return nullptr;
---
>   return 0;
320c287
<   return nullptr;
---
>   return 0;
326c293
<   return CreateSocket (node, TcpSocketMsgBase::GetTypeId (), m_congControlTypeId, m_recoveryTypeId);
---
>   return CreateSocket (node, TcpSocketMsgBase::GetTypeId (), m_congControlTypeId);
332c299
<   return CreateSocket (node, TcpSocketMsgBase::GetTypeId (), m_congControlTypeId, m_recoveryTypeId);
---
>   return CreateSocket (node, TcpSocketMsgBase::GetTypeId (), m_congControlTypeId);
355d321
<   NS_UNUSED (p);
407,426c373,374
< TcpGeneralTest::AfterRetransmitCb (const Ptr<const TcpSocketState> tcb,
<                                    const Ptr<const TcpSocketBase> tcp)
< {
<   if (tcp->GetNode () == m_receiverSocket->GetNode ())
<     {
<       AfterRTOExpired (tcb, RECEIVER);
<     }
<   else if (tcp->GetNode () == m_senderSocket->GetNode ())
<     {
<       AfterRTOExpired (tcb, SENDER);
<     }
<   else
<     {
<       NS_FATAL_ERROR ("Closed socket, but not recognized");
<     }
< }
< 
< void
< TcpGeneralTest::BeforeRetransmitCb (const Ptr<const TcpSocketState> tcb,
<                                     const Ptr<const TcpSocketBase> tcp)
---
> TcpGeneralTest::RtoExpiredCb (const Ptr<const TcpSocketState> tcb,
>                               const Ptr<const TcpSocketBase> tcp)
430c378
<       BeforeRTOExpired (tcb, RECEIVER);
---
>       RTOExpired (tcb, RECEIVER);
434c382
<       BeforeRTOExpired (tcb, SENDER);
---
>       RTOExpired (tcb, SENDER);
873c821
<       return DynamicCast<TcpSocketMsgBase> (m_senderSocket)->m_tcb->m_rxBuffer;
---
>       return DynamicCast<TcpSocketMsgBase> (m_senderSocket)->m_rxBuffer;
878c826
<       return DynamicCast<TcpSocketMsgBase> (m_receiverSocket)->m_tcb->m_rxBuffer;
---
>       return DynamicCast<TcpSocketMsgBase> (m_receiverSocket)->m_rxBuffer;
886,903d833
<  Ptr<TcpTxBuffer>
<  TcpGeneralTest::GetTxBuffer (SocketWho who)
<  {
<   if (who == SENDER)
<     {
<       return DynamicCast<TcpSocketMsgBase> (m_senderSocket)->m_txBuffer;
<     }
<   else if (who == RECEIVER)
<     {
<       return DynamicCast<TcpSocketMsgBase> (m_receiverSocket)->m_txBuffer;
<     }
<   else
<     {
<       NS_FATAL_ERROR ("Not defined");
<     }
<  }
< 
< 
954,969d883
< void
< TcpGeneralTest::SetUseEcn (SocketWho who, TcpSocketState::UseEcn_t useEcn)
< {
<   if (who == SENDER)
<     {
<       m_senderSocket->SetUseEcn (useEcn);
<     }
<    else if (who == RECEIVER)
<     {
<       m_receiverSocket->SetUseEcn (useEcn);
<     }
<   else
<     {
<       NS_FATAL_ERROR ("Not defined");
<     }
< }
1022c936
< TcpSocketMsgBase::SetAfterRetransmitCb (RetrCb cb)
---
> TcpSocketMsgBase::SetRetransmitCb (RetrCb cb)
1025,1032c939
<   m_afterRetrCallback = cb;
< }
< 
< void
< TcpSocketMsgBase::SetBeforeRetransmitCb (RetrCb cb)
< {
<   NS_ASSERT (!cb.IsNull ());
<   m_beforeRetrCallback = cb;
---
>   m_retrCallback = cb;
1047c954
< TcpSocketMsgBase::ReTxTimeout ()
---
> TcpSocketMsgBase::Retransmit ()
1049,1051c956,958
<   m_beforeRetrCallback (m_tcb, this);
<   TcpSocketBase::ReTxTimeout ();
<   m_afterRetrCallback (m_tcb, this);
---
>   TcpSocketBase::Retransmit ();
> 
>   m_retrCallback (m_tcb, this);
1104,1105c1011,1012
< /*
<  * Send empty packet, copied/pasted from TcpSocketBase
---
> /**
>  * \brief Send empty packet, copied/pasted from TcpSocketBase
1152c1059
<   if (m_endPoint == nullptr && m_endPoint6 == nullptr)
---
>   if (m_endPoint == 0 && m_endPoint6 == 0)
1176c1083
<       header.SetAckNumber (m_tcb->m_rxBuffer->NextRxSequence ());
---
>       header.SetAckNumber (m_rxBuffer->NextRxSequence ());
1184c1091
<       if (m_bytesLeftToBeAcked == 0 && m_tcb->m_rxBuffer->NextRxSequence () > m_lastAckedSeq)
---
>       if (m_bytesLeftToBeAcked == 0 && m_rxBuffer->NextRxSequence () > m_lastAckedSeq)
1186c1093
<           m_bytesLeftToBeAcked = m_tcb->m_rxBuffer->NextRxSequence ().GetValue () - 1 - m_bytesToAck;
---
>           m_bytesLeftToBeAcked = m_rxBuffer->NextRxSequence ().GetValue () - 1 - m_bytesToAck;
1188c1095
<       else if (m_bytesLeftToBeAcked > 0 && m_tcb->m_rxBuffer->NextRxSequence () > m_lastAckedSeq)
---
>       else if (m_bytesLeftToBeAcked > 0 && m_rxBuffer->NextRxSequence () > m_lastAckedSeq)
1201c1108
<   if (m_endPoint != nullptr)
---
>   if (m_endPoint != 0)
1233c1140
<   if (m_endPoint != nullptr)
---
>   if (m_endPoint != 0)
1260c1167
<   if (m_bytesLeftToBeAcked > 0 && m_tcb->m_rxBuffer->NextRxSequence () > m_lastAckedSeq)
---
>   if (m_bytesLeftToBeAcked > 0 && m_rxBuffer->NextRxSequence () > m_lastAckedSeq)
1271a1179
> } // namespace ns3
diff ../../NS3-WiGig/src/internet/test/tcp-general-test.h ../../ns-3-dev/src/internet/test/tcp-general-test.h
26,27d25
< #include "ns3/tcp-recovery-ops.h"
< #include "ns3/tcp-rate-ops.h"
33,35d30
<  * \ingroup internet-test
<  * \ingroup tests
<  *
49,50c44
<  * \see SetAfterRetransmitCb
<  * \see SetBeforeRetransmitCb
---
>  * \see SetRetransmitCb
52c46
< class TcpSocketMsgBase : public ns3::TcpSocketBase
---
> class TcpSocketMsgBase : public TcpSocketBase
55,58d48
<   /**
<    * \brief Get the type ID.
<    * \return the object TypeId
<    */
65,68d54
<   /**
<    * \brief Constructor.
<    * \param other The object to copy from.
<    */
73,74c59
<     m_beforeRetrCallback = other.m_beforeRetrCallback;
<     m_afterRetrCallback = other.m_afterRetrCallback;
---
>     m_retrCallback = other.m_retrCallback;
76d60
<     m_updateRttCb = other.m_updateRttCb;
79d62
<   /// Callback for the ACK management.
82d64
<   /// Callback for the packet retransmission management.
85d66
<   /// Callback for the RTT update management.
110,117c91
<   void SetAfterRetransmitCb (RetrCb cb);
< 
<   /**
<    * \brief Set the callback invoked before the processing of a retransmit timeout
<    *
<    * \param cb callback
<    */
<   void SetBeforeRetransmitCb (RetrCb cb);
---
>   void SetRetransmitCb (RetrCb cb);
134c108
<   virtual void ReTxTimeout (void);
---
>   virtual void Retransmit (void);
142,147c116,120
<   AckManagementCb m_rcvAckCb;       //!< Receive ACK callback.
<   AckManagementCb m_processedAckCb; //!< Processed ACK callback.
<   RetrCb m_beforeRetrCallback;      //!< Before retransmission callback.
<   RetrCb m_afterRetrCallback;       //!< After retransmission callback.
<   Callback<void, Ptr<TcpSocketMsgBase> > m_forkCb;  //!< Fork callback.
<   UpdateRttCallback m_updateRttCb;  //!< Update RTT callback.
---
>   AckManagementCb m_rcvAckCb;
>   AckManagementCb m_processedAckCb;
>   RetrCb m_retrCallback;
>   Callback<void, Ptr<TcpSocketMsgBase> > m_forkCb;
>   UpdateRttCallback m_updateRttCb;
152,154d124
<  * \ingroup internet-test
<  * \ingroup tests
<  *
171,174d140
<   /**
<    * \brief Get the type ID.
<    * \return the object TypeId
<    */
185,188d150
<   /**
<    * \brief Constructor.
<    * \param other The object to copy from.
<    */
197,200d158
<   /**
<    * \brief Set the bytes to be ACKed.
<    * \param bytes The number of bytes.
<    */
210,212c168,170
<   uint32_t m_bytesToAck;            //!< Number of bytes to be ACKed.
<   uint32_t m_bytesLeftToBeAcked;    //!< Number of bytes to be ACKed left.
<   SequenceNumber32 m_lastAckedSeq;  //!< Last sequence number ACKed.
---
>   uint32_t m_bytesToAck;
>   uint32_t m_bytesLeftToBeAcked;
>   SequenceNumber32 m_lastAckedSeq;
216,255c174,210
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief General infrastructure for TCP testing
<  *
<  * The class provides a simple setup for a connection testing. Implement
<  * or modify the virtual methods in order to install a specified
<  * channel, a specified socket and a specified error model on this simulation.
<  * Default values are a null error model, and as a channel a SimpleChannel with
<  * the propagation delay set through the constructor.
<  *
<  * Check DoRun documentation for more information on the environment setup.
<  *
<  * Apart from setting up the environment for testing, subclassing permits also
<  * to track and check what is happening inside the two connected sockets. Thanks
<  * to TcpSocketMsgBase, there are many information provided to children:
<  *
<  * - Tracing of states inside the state machines (TCP and ACK ones, through
<  *   functions CongStateTrace and TcpStateTrace)
<  * - cWnd tracing (through CWndTrace)
<  * - Socket closing: error state, or normal state (NormalClose and ErrorClose)
<  * - Packet drop, inside queue or over the link (QueueDrop, PhyDrop)
<  * - Ack received (RcvAck) and Ack processed (ProcessedAck). The first is used to
<  *   signal that an ACK has been received; after the processing of it, the Second
<  *   is called
<  * - A packet is transmitted to IP layer or received from IP layer (Tx and Rx)
<  * - The RTO expires (RTOExpired)
<  *
<  * The default version of such methods is empty; implement their behavior differently,
<  * based on what you want to test. Default is empty to avoid the need to implement
<  * useless pure virtual function.
<  *
<  * If you need values from TcpSocketBase, thanks to the friend relationship between
<  * this class and TcpSocketBase itself you can get it. Remember that friendship
<  * isn't passed by inheritance, so the way to go is to write a Getters (like
<  * GetSegSize) and call it in the subclass.
<  *
<  * \see DoRun
<  * \see TcpSocketMsgBase
<  */
---
> * \brief General infrastructure for TCP testing
> *
> * The class provides a simple setup for a connection testing. Implement
> * or modify the virtual methods in order to install a specified
> * channel, a specified socket and a specified error model on this simulation.
> * Default values are a null error model, and as a channel a SimpleChannel with
> * the propagation delay set through the constructor.
> *
> * Check DoRun documentation for more information on the environment setup.
> *
> * Apart from setting up the environment for testing, subclassing permits also
> * to track and check what is happening inside the two connected sockets. Thanks
> * to TcpSocketMsgBase, there are many information provided to children:
> *
> * - Tracing of states inside the state machines (TCP and ACK ones, through
> *   functions CongStateTrace and TcpStateTrace)
> * - cWnd tracing (through CWndTrace)
> * - Socket closing: error state, or normal state (NormalClose and ErrorClose)
> * - Packet drop, inside queue or over the link (QueueDrop, PhyDrop)
> * - Ack received (RcvAck) and Ack processed (ProcessedAck). The first is used to
> *   signal that an ACK has been received; after the processing of it, the Second
> *   is called
> * - A packet is transmitted to IP layer or received from IP layer (Tx and Rx)
> * - The RTO expires (RTOExpired)
> *
> * The default version of such methods is empty; implement their behavior differently,
> * based on what you want to test. Default is empty to avoid the need to implement
> * useless pure virtual function.
> *
> * If you need values from TcpSocketBase, thanks to the friend relationship between
> * this class and TcpSocketBase itself you can get it. Remember that friendship
> * isn't passed by inheritance, so the way to go is to write a Getters (like
> * GetSegSize) and call it in the subclass.
> *
> * \see DoRun
> * \see TcpSocketMsgBase
> */
320d274
<    * \param socketType Type of the TCP socket
328,339d281
<    * \brief Create a socket
<    *
<    * \param node associated node
<    * \param socketType Type of the TCP socket
<    * \param congControl congestion control
<    * \param recoveryAlgorithm recovery algorithm
<    * \return a pointer to the newer created socket
<    */
<   virtual Ptr<TcpSocketMsgBase> CreateSocket (Ptr<Node> node, TypeId socketType,
<                                               TypeId congControl, TypeId recoveryAlgorithm);
< 
<   /**
376c318
<    * \brief Change the configuration of the environment
---
>    * \brief Change the configuration of the evironment
441d382
<    * \param who node to get the parameter from
448d388
<    * \param who node to get the parameter from
483c423
<    * \brief Get the minimum RTO attribute
---
>    * \brief Get the minimun RTO attribute
539,546d478
<    * \brief Get the Tx buffer from selected socket
<    *
<    * \param who socket where get the TCB
<    * \return the tx buffer
<    */
<   Ptr<TcpTxBuffer> GetTxBuffer (SocketWho who);
< 
<   /**
595,602d526
<    * \brief Forcefully set the ecn use on
<    *
<    * \param who socket to force
<    * \param useEcn Mode of ECN. Currently Off and On are supported.
<    */
<   void SetUseEcn (SocketWho who, TcpSocketState::UseEcn_t useEcn);
< 
<   /**
657,663d580
<    * \brief recovery algorithm of the sender socket
<    *
<    * \param recovery typeid of the recovery algorithm
<    */
<   void SetRecoveryAlgorithm (TypeId reccovery) { m_recoveryTypeId = reccovery; }
< 
<   /**
678,679d594
<     NS_UNUSED (oldValue);
<     NS_UNUSED (newValue);
683c598
<    * \brief Tracks the congestion window changes
---
>    * \brief Congestion window changes
690,703d604
<     NS_UNUSED (oldValue);
<     NS_UNUSED (newValue);
<   }
< 
<   /**
<    * \brief Tracks the inflated congestion window changes
<    *
<    * \param oldValue old value
<    * \param newValue new value
<    */
<   virtual void CWndInflTrace (uint32_t oldValue, uint32_t newValue)
<   {
<     NS_UNUSED (oldValue);
<     NS_UNUSED (newValue);
711,712c612,613
<    * \param oldTime old value
<    * \param newTime new value
---
>    * \param oldValue old value
>    * \param newValue new value
716,717d616
<     NS_UNUSED (oldTime);
<     NS_UNUSED (newTime);
724a624
>    *
730,731d629
<     NS_UNUSED (oldValue);
<     NS_UNUSED (newValue);
744,805d641
<     NS_UNUSED (oldValue);
<     NS_UNUSED (newValue);
<   }
< 
<   /**
<    * \brief RTO changes
<    *
<    * This applies only for sender socket.
<    *
<    * \param oldValue old value
<    * \param newValue new value
<    */
<   virtual void RtoTrace (Time oldValue, Time newValue)
<   {
<     NS_UNUSED (oldValue);
<     NS_UNUSED (newValue);
<   }
< 
<   /**
<    * \brief Next tx seq changes
<    *
<    * This applies only for sender socket.
<    *
<    * \param oldValue old value
<    * \param newValue new value
<    */
<   virtual void NextTxSeqTrace (SequenceNumber32 oldValue, SequenceNumber32 newValue)
<   {
<     NS_UNUSED (oldValue);
<     NS_UNUSED (newValue);
<   }
< 
<   /**
<    * \brief Highest tx seq changes
<    *
<    * This applies only for sender socket.
<    *
<    * \param oldValue old value
<    * \param newValue new value
<    */
<   virtual void HighestTxSeqTrace (SequenceNumber32 oldValue, SequenceNumber32 newValue)
<   {
<     NS_UNUSED (oldValue);
<     NS_UNUSED (newValue);
<   }
< 
<   /**
<    * \brief Track the rate value of TcpRateLinux.
<    * \param rate updated value of TcpRate.
<    */
<   virtual void RateUpdatedTrace (const TcpRateLinux::TcpRateConnection &rate)
<   {
<     NS_UNUSED (rate);
<   }
< 
<   /**
<    * \brief Track the rate sample value of TcpRateLinux.
<    * \param sample updated value of TcpRateSample.
<    */
<   virtual void RateSampleUpdatedTrace (const TcpRateLinux::TcpRateSample &sample)
<   {
<     NS_UNUSED (sample);
814d649
<     NS_UNUSED (who);
825d659
<     NS_UNUSED (who);
834d667
<     NS_UNUSED (who);
843d675
<     NS_UNUSED (who);
858,860d689
<     NS_UNUSED (tcb);
<     NS_UNUSED (h);
<     NS_UNUSED (who);
875,877d703
<     NS_UNUSED (tcb);
<     NS_UNUSED (h);
<     NS_UNUSED (who);
904,916c730
<   virtual void AfterRTOExpired (const Ptr<const TcpSocketState> tcb, SocketWho who)
<   {
<     NS_UNUSED (tcb);
<     NS_UNUSED (who);
<   }
< 
<   /**
<    * \brief Rto has expired
<    *
<    * \param tcb Transmission control block
<    * \param who where the RTO has expired (SENDER or RECEIVER)
<    */
<   virtual void BeforeRTOExpired (const Ptr<const TcpSocketState> tcb, SocketWho who)
---
>   virtual void RTOExpired (const Ptr<const TcpSocketState> tcb, SocketWho who)
918,919d731
<     NS_UNUSED (tcb);
<     NS_UNUSED (who);
932,935d743
<     NS_UNUSED (seq);
<     NS_UNUSED (sz);
<     NS_UNUSED (isRetransmission);
<     NS_UNUSED (who);
946,947d753
<     NS_UNUSED (size);
<     NS_UNUSED (who);
951a758
>    *
1013d819
<   TypeId   m_recoveryTypeId;         //!< Recovery
1025c831,832
<   Time     m_interPacketInterval;  //!< Time between sending application packet down to tcp socket
---
>   Time     m_interPacketInterval;  //!< Time between sending application packet
>                                    //   down to tcp socket
1032,1036d838
< 
<   /**
<    * \brief Normal Close Callback.
<    * \param socket The socket.
<    */
1038,1041d839
<   /**
<    * \brief Error Close Callback.
<    * \param socket The socket.
<    */
1043,1047d840
<   /**
<    * \brief Queue Drop Callback.
<    * \param context The context.
<    * \param p The packet.
<    */
1049,1053d841
<   /**
<    * \brief Drop at Phy layer Callback.
<    * \param context The context.
<    * \param p The packet.
<    */
1055,1060d842
<   /**
<    * \brief Receive ACK Callback.
<    * \param p The packet.
<    * \param h TCP header.
<    * \param tcp The TCP socket.
<    */
1063,1068d844
<   /**
<    * \brief ACK processed Callback.
<    * \param p The packet.
<    * \param h TCP header.
<    * \param tcp The TCP socket.
<    */
1071,1076d846
<   /**
<    * \brief Tx packet Callback.
<    * \param p The packet.
<    * \param h TCP header.
<    * \param tcp The TCP socket.
<    */
1079,1084d848
<   /**
<    * \brief Rx packet Callback.
<    * \param p The packet.
<    * \param h TCP header.
<    * \param tcp The TCP socket.
<    */
1087,1091d850
<   /**
<    * \brief RTO expired Callback.
<    * \param tcb Transmission control block.
<    * \param tcp The TCP socket.
<    */
1094,1100d852
<   /**
<    * \brief Update RTT with new data.
<    * \param tcp The TCP socket.
<    * \param seq The sequence number.
<    * \param sz The segment size.
<    * \param isRetransmission True if packet is a retransmission.
<    */
1103,1124d854
< 
<   /**
<    * \brief Invoked after a retransmit event.
<    * \param tcb Transmission control block.
<    * \param tcp The TCP socket.
<    */
<   void AfterRetransmitCb   (const Ptr<const TcpSocketState> tcb,
<                             const Ptr<const TcpSocketBase> tcp);
< 
<   /**
<    * \brief Invoked before a retransmit event.
<    * \param tcb Transmission control block.
<    * \param tcp The TCP socket.
<    */
<   void BeforeRetransmitCb   (const Ptr<const TcpSocketState> tcb,
<                              const Ptr<const TcpSocketBase> tcp);
< 
<   /**
<    * \brief Data sent Callback.
<    * \param socket The socket.
<    * \param size The data size.
<    */
1126,1129d855
<   /**
<    * \brief Fork Callback.
<    * \param tcp The TCP socket.
<    */
1131,1135d856
<   /**
<    * \brief Handle an accept connection.
<    * \param socket The socket.
<    * \param from The sender.
<    */
1138c859
<   InetSocketAddress m_remoteAddr; //!< Remote peer address.
---
>   InetSocketAddress m_remoteAddr;
1142,1144d862
<  * \ingroup internet-test
<  * \ingroup tests
<  *
diff ../../NS3-WiGig/src/internet/test/tcp-header-test.cc ../../ns-3-dev/src/internet/test/tcp-header-test.cc
26c26
< #include "ns3/tcp-option-rfc793.h"
---
> #include "ns3/private/tcp-option-rfc793.h"
28c28
< using namespace ns3;
---
> namespace ns3 {
42,49d41
< 
< 
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief TCP header Get/Set test.
<  */
53,56d44
<   /**
<    * Constructor.
<    * \param name Test description.
<    */
68d55
< 
71,77c58,64
<   uint16_t sourcePort;        // Source port
<   uint16_t destinationPort;   // Destination port
<   SequenceNumber32 sequenceNumber;  // Sequence number
<   SequenceNumber32 ackNumber;       // ACK number
<   uint8_t flags;              // Flags (really a uint6_t)
<   uint16_t windowSize;        // Window size
<   uint16_t urgentPointer;     // Urgent pointer
---
>   uint16_t sourcePort;        //!< Source port
>   uint16_t destinationPort;   //!< Destination port
>   SequenceNumber32 sequenceNumber;  //!< Sequence number
>   SequenceNumber32 ackNumber;       //!< ACK number
>   uint8_t flags;              //!< Flags (really a uint6_t)
>   uint16_t windowSize;        //!< Window size
>   uint16_t urgentPointer;     //!< Urgent pointer
146a134
> 
149,154d136
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief TCP header with RFC793 Options test.
<  */
158,161d139
<   /**
<    * Constructor.
<    * \param name Test description.
<    */
169c147,148
<    * \brief Check an header with only one kind of option.
---
>    * \brief Check an header with only one kind of option
>    *
172,174d150
<   /**
<    * \brief Check an header for the correct padding.
<    */
176,178d151
<   /**
<    * \brief Check the correct header deserialization.
<    */
354,359d326
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief TCP header Flags to Striing test.
<  */
363,366d329
<   /**
<    * Constructor.
<    * \param name Test description.
<    */
423,430c386
< 
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief TCP header TestSuite
<  */
< class TcpHeaderTestSuite : public TestSuite
---
> static class TcpHeaderTestSuite : public TestSuite
441,443c397
< };
< 
< static TcpHeaderTestSuite g_TcpHeaderTestSuite; //!< Static variable for test initialization
---
> } g_TcpHeaderTestSuite;
444a399
> } // namespace ns3
diff ../../NS3-WiGig/src/internet/test/tcp-highspeed-test.cc ../../ns-3-dev/src/internet/test/tcp-highspeed-test.cc
26c26
< using namespace ns3;
---
> namespace ns3 {
31,33d30
<  * \ingroup internet-test
<  * \ingroup tests
<  *
39,44d35
<   /**
<    * \brief Constructor.
<    * \param cWnd Congestion window.
<    * \param segmentSize Segment size.
<    * \param name Test description.
<    */
51,53c42,44
<   uint32_t m_cWnd;        //!< Congestion window.
<   uint32_t m_segmentSize; //!< Segment size.
<   Ptr<TcpSocketState> m_state;  //!< TCP socket state.
---
>   uint32_t m_cWnd;
>   uint32_t m_segmentSize;
>   Ptr<TcpSocketState> m_state;
88,91c79
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief Testing the congestion avoidance decrement on TcpHighSpeed
---
>  * \brief Testing the congestion avoidance increment on TcpHighSpeed
96,102c84
<   /**
<    * \brief Constructor.
<    * \param cWnd Congestion window.
<    * \param segmentSize Segment size.
<    * \param name Test description.
<    */
<   TcpHighSpeedDecrementTest (uint32_t cWnd, uint32_t segmentSize,
---
>   TcpHighSpeedDecrementTest (uint32_t ssThresh, uint32_t segmentSize,
108,110c90,92
<   uint32_t m_cWnd;        //!< Congestion window.
<   uint32_t m_segmentSize; //!< Segment size.
<   Ptr<TcpSocketState> m_state;  //!< TCP socket state.
---
>   uint32_t m_cWnd;
>   uint32_t m_segmentSize;
>   Ptr<TcpSocketState> m_state;
144,149c126,127
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief TcpHighSpeed Congestion window values to test.
<  */
---
> // -------------------------------------------------------------------
> 
152,153c130,131
<   unsigned int cwnd; //!< Congestion window.
<   unsigned int md;   //!< Currently unused.
---
>   unsigned int cwnd;
>   unsigned int md;
227c205
< }; //!< List of data to be tested.
---
> };
231,237c209
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief TCP HighSpeed TestSuite
<  */
< class TcpHighSpeedTestSuite : public TestSuite
---
> static class TcpHighSpeedTestSuite : public TestSuite
268,270c240
< };
< 
< static TcpHighSpeedTestSuite g_tcpHighSpeedTest; //!< Static variable for test initialization
---
> } g_tcpHighSpeedTest;
271a242
> } // namespace ns3
Only in ../../ns-3-dev/src/internet/test: tcp-highspeed-test.h
diff ../../NS3-WiGig/src/internet/test/tcp-htcp-test.cc ../../ns-3-dev/src/internet/test/tcp-htcp-test.cc
34c34
< using namespace ns3;
---
> namespace ns3 {
39,41d38
<  * \ingroup internet-test
<  * \ingroup tests
<  *
47,57d43
<   /**
<    * \brief Constructor.
<    * \param cWnd Congestion window.
<    * \param segmentSize Segment size.
<    * \param segmentsAcked Segments already ACKed.
<    * \param lastCongestion Last congestion time.
<    * \param firstAck First ACK time.
<    * \param secondAck Second ACK time.
<    * \param expectedCwnd Expected cWnd.
<    * \param name Test description.
<    */
65,72c51,58
<   uint32_t m_cWnd;        //!< Congestion window.
<   uint32_t m_segmentSize; //!< Segment size.
<   uint32_t m_segmentsAcked; //!< Segments already ACKed.
<   Time m_lastCongestion;  //!< Last congestion time.
<   Time m_firstAck;        //!< First ACK time.
<   Time m_secondAck;       //!< Second ACK time.
<   uint32_t m_expectedCwnd;  //!< Expected cWnd.
<   Ptr<TcpSocketState> m_state;  //!< TCP socket state.
---
>   uint32_t m_cWnd;
>   uint32_t m_segmentSize;
>   uint32_t m_segmentsAcked;
>   Time m_lastCongestion;
>   Time m_firstAck;
>   Time m_secondAck;
>   uint32_t m_expectedCwnd;
>   Ptr<TcpSocketState> m_state;
129,135c115
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief TCP Htcp TestSuite.
<  *
<  * The following tests simulate conditions after a congestion event and
---
> /* The following tests simulate conditions after a congestion event and 
142,143c122,123
<  * The cWnd values of 20383, 40 and 76671 have been
<  * calculated manually from the algorithm.
---
>  * The resulting cWnd values of 20383, 40 and 76671 have been
>  * calculated by hand from the algorithm for their expected values.
146c126
< class TcpHtcpTestSuite : public TestSuite
---
> static class TcpHtcpTestSuite : public TestSuite
167,169c147
< };
< 
< static TcpHtcpTestSuite g_TcpHtcpTest; //!< Static variable for test initialization
---
> } g_TcpHtcpTest;
170a149
> } // namespace ns3
diff ../../NS3-WiGig/src/internet/test/tcp-hybla-test.cc ../../ns-3-dev/src/internet/test/tcp-hybla-test.cc
26c26
< using namespace ns3;
---
> namespace ns3 {
31,33d30
<  * \ingroup internet-test
<  * \ingroup tests
<  *
39,46d35
<   /**
<    * \brief Constructor.
<    * \param cWnd Congestion window.
<    * \param ssThresh Slow Start Threshold.
<    * \param segmentSize Segment size.
<    * \param rtt Round trip time.
<    * \param name Test description.
<    */
53,58d41
< 
<   /**
<    * \brief Tracks TCP Hybla rho parameter changes.
<    * \param oldVal Previous value.
<    * \param newVal Actual value.
<    */
61,66c44,49
<   uint32_t m_cWnd;        //!< Congestion window.
<   uint32_t m_ssThresh;    //!< Slow Start Threshold.
<   uint32_t m_segmentSize; //!< Segment size.
<   Time m_rtt;             //!< Round trip time.
<   double m_rho;           //!< TCP Hybla rho parameter.
<   Ptr<TcpSocketState> m_state;  //!< TCP socket state.
---
>   uint32_t m_cWnd;
>   uint32_t m_ssThresh;
>   uint32_t m_segmentSize;
>   Time m_rtt;
>   double m_rho;
>   Ptr<TcpSocketState> m_state;
84d66
<   NS_UNUSED (oldVal);
96d77
<   m_state->m_minRtt = m_rtt;
112c93
<   NS_TEST_ASSERT_MSG_NE (m_rho, 0.0,
---
>   NS_TEST_ASSERT_MSG_NE (m_rho, 0,
114c95
<   NS_TEST_ASSERT_MSG_EQ_TOL (calcRho, m_rho, 0.01,
---
>   NS_TEST_ASSERT_MSG_EQ_TOL (calcRho, m_rho, MilliSeconds (10),
145a127
> // -------------------------------------------------------------------
147,154c129
< 
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief TCP Hybla TestSuite
<  */
< class TcpHyblaTestSuite : public TestSuite
---
> static class TcpHyblaTestSuite : public TestSuite
172c147
< };
---
> } g_tcpHyblaTest;
174c149
< static TcpHyblaTestSuite g_tcpHyblaTest; //!< Static variable for test initialization
---
> } // namespace ns3
diff ../../NS3-WiGig/src/internet/test/tcp-illinois-test.cc ../../ns-3-dev/src/internet/test/tcp-illinois-test.cc
33c33
< using namespace ns3;
---
> namespace ns3 {
38,41c38
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief TcpIllinois C-AIMD algorithm tests.
---
>  * \brief Testing TcpIllinois C-AIMD algorithm
46,57d42
<   /**
<    * \brief Constructor.
<    * \param cWnd Congestion window.
<    * \param ssThresh Slow Start Threshold.
<    * \param segmentSize Segment size.
<    * \param cntRtt RTT counter.
<    * \param maxRtt Max RTT.
<    * \param segmentsAcked Number of segments ACKed.
<    * \param nextTxSeq Next Tx sequence number.
<    * \param lastAckedSeq Last ACKed sequence number.
<    * \param name Test description.
<    */
70,73d54
<   /**
<    * \brief Increases the TCP window.
<    * \param cong The congestion control.
<    */
75,78d55
<   /**
<    * \brief Recalculate the internal TCP Illinois params.
<    * \param cong The congestion control.
<    */
80,83d56
<   /**
<    * \brief Calculate the maximum delay.
<    * \returns The maximum delay.
<    */
85,88d57
<   /**
<    * \brief Calculate the average delay.
<    * \returns The average delay.
<    */
90,95d58
<   /**
<    * \brief Calculate the TCP Illinois alpha param.
<    * \param cong The congestion control.
<    * \param da Average delay (in milliseconds).
<    * \param dm Maximum delay (in milliseconds).
<    */
97,102d59
<   /**
<    * \brief Calculate the TCP Illinois beta param.
<    * \param cong The congestion control.
<    * \param da Average delay (in milliseconds).
<    * \param dm Maximum delay (in milliseconds).
<    */
104,106d60
<   /**
<    * brief Get and check the SSH threshold.
<    */
109,123c63,77
<   uint32_t m_cWnd;        //!< Congestion window.
<   uint32_t m_ssThresh;    //!< Slow Start Threshold.
<   uint32_t m_segmentSize; //!< Segment size.
<   Time m_baseRtt;         //!< Base RTT.
<   Time m_maxRtt;          //!< Max RTT.
<   uint32_t m_segmentsAcked; //!< Number of segments ACKed.
<   SequenceNumber32 m_nextTxSeq; //!< Next Tx sequence number.
<   SequenceNumber32 m_lastAckedSeq;  //!< Last ACKed sequence number.
<   double m_alpha;   //!< TCP Illinois alpha parameter.
<   double m_beta;   //!< TCP Illinois beta parameter.
<   uint32_t m_cntRtt;  //!< RTT counter.
<   Time m_sumRtt;      //!< Sum of all the RTTs.
<   bool m_rttAbove;    //!< RTT above threshold.
<   uint8_t m_rttLow;   //!< RTT low counter.
<   uint32_t m_ackCnt;  //!< ACK counter.
---
>   uint32_t m_cWnd;
>   uint32_t m_ssThresh;
>   uint32_t m_segmentSize;
>   Time m_baseRtt;
>   Time m_maxRtt;
>   uint32_t m_segmentsAcked;
>   SequenceNumber32 m_nextTxSeq;
>   SequenceNumber32 m_lastAckedSeq;
>   double m_alpha;
>   double m_beta;
>   uint32_t m_cntRtt;
>   Time m_sumRtt;
>   bool m_rttAbove;
>   uint8_t m_rttLow;
>   uint32_t m_ackCnt;
352,360c306,307
< 
< 
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief TCP Illinois TestSuite
<  */
< class TcpIllinoisTestSuite : public TestSuite
---
> // -------------------------------------------------------------------
> static class TcpIllinoisTestSuite : public TestSuite
378c325
< };
---
> } g_tcpIllinoisTest;
380c327
< static TcpIllinoisTestSuite g_tcpIllinoisTest; //!< Static variable for test initialization
---
> } // namespace ns3
Only in ../../NS3-WiGig/src/internet/test: tcp-ledbat-test.cc
Only in ../../NS3-WiGig/src/internet/test: tcp-lp-test.cc
diff ../../NS3-WiGig/src/internet/test/tcp-option-test.cc ../../ns-3-dev/src/internet/test/tcp-option-test.cc
23,24c23,24
< #include "ns3/tcp-option-winscale.h"
< #include "ns3/tcp-option-ts.h"
---
> #include "ns3/private/tcp-option-winscale.h"
> #include "ns3/private/tcp-option-ts.h"
28c28
< using namespace ns3;
---
> namespace ns3 {
30,35d29
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief TCP Window Scaling option Test
<  */
39,43d32
<   /**
<    * \brief Constructor.
<    * \param name Test description.
<    * \param scale Window scaling.
<    */
46,48d34
<   /**
<    * \brief Serialization test.
<    */
50,52d35
<   /**
<    * \brief Deserialization test.
<    */
59,60c42,43
<   uint8_t m_scale;  //!< Window scaling.
<   Buffer m_buffer;  //!< Buffer.
---
>   uint8_t m_scale;
>   Buffer m_buffer;
110,116d92
< 
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief TCP TimeStamp option Test
<  */
120,124d95
< 
<   /**
<    * \brief Constructor.
<    * \param name Test description.
<    */
127,129d97
<   /**
<    * \brief Serialization test.
<    */
131,133d98
<   /**
<    * \brief Deserialization test.
<    */
140,142c105,107
<   uint32_t m_timestamp; //!< TimeStamp.
<   uint32_t m_echo;      //!< Echoed TimeStamp.
<   Buffer m_buffer;      //!< Buffer.
---
>   uint32_t m_timestamp;
>   uint32_t m_echo;
>   Buffer m_buffer;
149,150d113
<   m_timestamp = 0;
<   m_echo = 0;
204,210c167
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief TCP options TestSuite
<  */
< class TcpOptionTestSuite : public TestSuite
---
> static class TcpOptionTestSuite : public TestSuite
218c175,176
<         AddTestCase (new TcpOptionWSTestCase ("Testing window scale value", i), TestCase::QUICK);
---
>         AddTestCase (new TcpOptionWSTestCase ("Testing window "
>                                               "scale value", i), TestCase::QUICK);
223c181
< };
---
> } g_TcpOptionTestSuite;
225c183
< static TcpOptionTestSuite g_TcpOptionTestSuite; //!< Static variable for test initialization
---
> } // namespace ns3
diff ../../NS3-WiGig/src/internet/test/tcp-pkts-acked-test.cc ../../ns-3-dev/src/internet/test/tcp-pkts-acked-test.cc
23d22
< #include "ns3/tcp-header.h"
25c24
< using namespace ns3;
---
> namespace ns3 {
29,30d27
< class DummyCongControl;
< 
32,34d28
<  * \ingroup internet-test
<  * \ingroup tests
<  *
46a41,42
> class DummyCongControl;
> 
50,53d45
<   /**
<    * \brief Constructor.
<    * \param desc Test description.
<    */
56,59d47
<   /**
<    * \brief Called when an ACK is received.
<    * \param segmentsAcked The segment ACKed.
<    */
71,72c59,60
<   uint32_t m_segmentsAcked;    //!< Contains the number of times PktsAcked is called
<   uint32_t m_segmentsReceived; //!< Contains the ack number received
---
>   uint32_t m_segmentsAcked;    //! Contains the number of times PktsAcked is called
>   uint32_t m_segmentsReceived; //! Contains the ack number received
74c62
<   Ptr<DummyCongControl> m_congCtl; //!< Dummy congestion control.
---
>   Ptr<DummyCongControl> m_congCtl;
78,80d65
<  * \ingroup internet-test
<  * \ingroup tests
<  *
82c67
<  * a notification is sent to TcpPktsAckedOpenTest.
---
>  * a notification is sent to TcpPktsAckedOpenTest
87,90d71
<   /**
<    * \brief Get the type ID.
<    * \return the object TypeId
<    */
92d72
< 
96,100d75
< 
<   /**
<    * \brief Set the callback to be used when an ACK is received.
<    * \param test The callback.
<    */
113c88
<   Callback<void, uint32_t> m_test; //!< Callback to be used when an ACK is received.
---
>   Callback<void, uint32_t> m_test;
147c122
<   m_congCtl->SetCallback (MakeCallback (&TcpPktsAckedOpenTest::PktsAckedCalled, this));
---
>   m_congCtl->SetCallback (MakeCallback (&ns3::TcpPktsAckedOpenTest::PktsAckedCalled, this));
174a150
> //-----------------------------------------------------------------------------
176,183c152
< 
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief PktsAcked is calls TestSuite.
<  */
< class TcpPktsAckedTestSuite : public TestSuite
---
> static class TcpPktsAckedTestSuite : public TestSuite
192,194c161
< };
< 
< static TcpPktsAckedTestSuite g_TcpPktsAckedTestSuite; //!< Static variable for test initialization
---
> } g_TcpPktsAckedTestSuite;
195a163
> } // namespace ns3
Only in ../../NS3-WiGig/src/internet/test: tcp-prr-recovery-test.cc
Only in ../../NS3-WiGig/src/internet/test: tcp-rate-ops-test.cc
diff ../../NS3-WiGig/src/internet/test/tcp-rto-test.cc ../../ns-3-dev/src/internet/test/tcp-rto-test.cc
18a19,20
> #include "tcp-rto-test.h"
> #include "tcp-error-model.h"
23,26d24
< #include "ns3/simple-channel.h"
< #include "ns3/rtt-estimator.h"
< #include "tcp-general-test.h"
< #include "tcp-error-model.h"
28c26
< NS_LOG_COMPONENT_DEFINE ("TcpRtoTest");
---
> namespace ns3 {
30,70c28
< using namespace ns3;
< 
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief Testing the moments after an RTO expiration
<  *
<  * The scope of this test is to be sure that, after an RTO expiration,
<  * the TCP implementation set the correct state in the ACK state machine,
<  * and marks the lost segment as lost; then, after the retransmission, the
<  * state is fully recovered. This is the base check, where only one segment
<  * (the first) is lost and retransmitted.
<  *
<  */
< class TcpRtoTest : public TcpGeneralTest
< {
< public:
<   /**
<    * \brief Constructor.
<    * \param congControl Congestion control type.
<    * \param msg Test description.
<    */
<   TcpRtoTest (TypeId &congControl, const std::string &msg);
< 
< protected:
< 
<   virtual Ptr<TcpSocketMsgBase> CreateSenderSocket (Ptr<Node> node);
<   virtual void AfterRTOExpired (const Ptr<const TcpSocketState> tcb, SocketWho who);
<   virtual void RcvAck      (const Ptr<const TcpSocketState> tcb,
<                             const TcpHeader& h, SocketWho who);
<   virtual void ProcessedAck (const Ptr<const TcpSocketState> tcb,
<                              const TcpHeader& h, SocketWho who);
<   virtual void FinalChecks ();
<   virtual void ConfigureProperties ();
<   virtual void ConfigureEnvironment ();
< 
< private:
<   bool m_afterRTOExpired;      //!< True if RTO is expired.
<   bool m_segmentReceived; //!< True if segments have been received.
< };
---
> NS_LOG_COMPONENT_DEFINE ("TcpRtoTest");
74c32
<     m_afterRTOExpired (false),
---
>     m_rtoExpired (false),
106c64
< TcpRtoTest::AfterRTOExpired (const Ptr<const TcpSocketState> tcb, SocketWho who)
---
> TcpRtoTest::RTOExpired (const Ptr<const TcpSocketState> tcb, SocketWho who)
111c69
<   NS_TEST_ASSERT_MSG_EQ (m_afterRTOExpired, false,
---
>   NS_TEST_ASSERT_MSG_EQ (m_rtoExpired, false,
116c74
<   m_afterRTOExpired = true;
---
>   m_rtoExpired = true;
125c83
<   // are in the same state as they where after AfterRTOExpired if it is the first
---
>   // are in the same state as they where after RTOExpired if it is the first
129c87
<   if (m_afterRTOExpired && who == SENDER)
---
>   if (m_rtoExpired && who == SENDER)
155c113
<       m_afterRTOExpired = false;
---
>       m_rtoExpired = false;
170,356c128
< 
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief Testing the ssthresh behavior after the RTO expires
<  *
<  * The scope of this test is to be sure that, after an RTO expiration,
<  * the TCP implementation sets the correct ssthresh value
<  *
<  */
< class TcpSsThreshRtoTest : public TcpGeneralTest
< {
< public:
<   /**
<    * \brief Constructor.
<    * \param congControl Congestion control type.
<    * \param seqToDrop sequence number to drop
<    * \param minRto minimum RTO
<    * \param msg Test description.
<    */
<   TcpSsThreshRtoTest (TypeId &congControl, uint32_t seqToDrop, Time minRto, const std::string &msg);
< 
< protected:
< 
<   virtual Ptr<TcpSocketMsgBase> CreateSenderSocket (Ptr<Node> node);
<   virtual Ptr<ErrorModel> CreateReceiverErrorModel ();
<   virtual void BytesInFlightTrace (uint32_t oldValue, uint32_t newValue);
<   virtual void SsThreshTrace (uint32_t oldValue, uint32_t newValue);
<   virtual void BeforeRTOExpired (const Ptr<const TcpSocketState> tcb, SocketWho who);
<   virtual void AfterRTOExpired (const Ptr<const TcpSocketState> tcb, SocketWho who);
< 
<   virtual void ConfigureEnvironment ();
< 
<     /**
<    * \brief Called when a packet has been dropped.
<    * \param ipH IPv4 header.
<    * \param tcpH TCP header.
<    * \param p The packet.
<    */
<   void PktDropped (const Ipv4Header &ipH, const TcpHeader& tcpH, Ptr<const Packet> p);
< 
< private:
<   uint32_t m_bytesInFlight; //!< Store the number of bytes in flight
<   uint32_t m_bytesInFlightBeforeRto; //!< Store the number of bytes in flight before the RTO expiration
<   uint32_t m_ssThreshSocket; //!< the ssThresh as computed by the socket
<   uint32_t m_seqToDrop; //!< the sequence number to drop
<   Time m_minRtoTime; //!< the minimum RTO time
< };
< 
< TcpSsThreshRtoTest::TcpSsThreshRtoTest (TypeId &congControl, uint32_t seqToDrop, Time minRto, const std::string &desc)
<   : TcpGeneralTest (desc),
<     m_seqToDrop (seqToDrop),
<     m_minRtoTime (minRto)
< {
<   m_congControlTypeId = congControl;
< }
< 
< void
< TcpSsThreshRtoTest::ConfigureEnvironment ()
< {
<   TcpGeneralTest::ConfigureEnvironment ();
<   SetAppPktCount (100);
<   SetAppPktInterval (MicroSeconds(100));
<   SetPropagationDelay (MilliSeconds (1));
< }
< 
< Ptr<TcpSocketMsgBase>
< TcpSsThreshRtoTest::CreateSenderSocket (Ptr<Node> node)
< {
<   Ptr<TcpSocketMsgBase> socket = TcpGeneralTest::CreateSenderSocket (node);
<   socket->SetAttribute ("MinRto", TimeValue (m_minRtoTime));
<   NS_LOG_DEBUG("TcpSsThreshRtoTest create sender socket");
< 
<   return socket;
< }
< 
< Ptr<ErrorModel>
< TcpSsThreshRtoTest::CreateReceiverErrorModel ()
< {
<   NS_LOG_DEBUG("TcpSsThreshRtoTest create errorModel");
< 
<   Ptr<TcpSeqErrorModel> errorModel = CreateObject<TcpSeqErrorModel> ();
< 
<   for (uint32_t i = 0; i<3; ++i)
<     {
<       errorModel->AddSeqToKill (SequenceNumber32 (m_seqToDrop));
<     }
< 
<   errorModel->SetDropCallback (MakeCallback (&TcpSsThreshRtoTest::PktDropped, this));
< 
<   return errorModel;
< }
< 
< void
< TcpSsThreshRtoTest::PktDropped (const Ipv4Header &ipH, const TcpHeader& tcpH,
<                             Ptr<const Packet> p)
< {
<   NS_LOG_DEBUG ("DROPPED! " << tcpH);
< }
< 
< void
< TcpSsThreshRtoTest::BytesInFlightTrace (uint32_t oldValue, uint32_t newValue)
< {
<   NS_LOG_DEBUG ("Socket BytesInFlight=" << newValue);
<   m_bytesInFlight = newValue;
< }
< 
< void
< TcpSsThreshRtoTest::SsThreshTrace (uint32_t oldValue, uint32_t newValue)
< {
<   NS_LOG_DEBUG ("Socket ssThresh=" << newValue);
<   m_ssThreshSocket = newValue;
< }
< 
< void
< TcpSsThreshRtoTest::BeforeRTOExpired (const Ptr<const TcpSocketState> tcb, SocketWho who)
< {
<   NS_LOG_DEBUG ("Before RTO for connection " << who);
< 
<   // Get the bytesInFlight value before the expiration of the RTO
< 
<   if (who == SENDER)
<     {
<       m_bytesInFlightBeforeRto = m_bytesInFlight;
<       NS_LOG_DEBUG("BytesInFlight before RTO Expired " << m_bytesInFlight);
<     }
< }
< 
< void
< TcpSsThreshRtoTest::AfterRTOExpired (const Ptr<const TcpSocketState> tcb, SocketWho who)
< {
<   NS_LOG_DEBUG ("After RTO for " << who);
<   Ptr<TcpSocketMsgBase> senderSocket = GetSenderSocket();
< 
<   // compute the ssThresh according to RFC 5681, using the 
<   uint32_t ssThresh = std::max(m_bytesInFlightBeforeRto/2, 2*tcb->m_segmentSize);
< 
<   NS_LOG_DEBUG ("ssThresh " << ssThresh << " m_ssThreshSocket " << m_ssThreshSocket);
< 
<   NS_TEST_ASSERT_MSG_EQ (ssThresh, m_ssThreshSocket,
<                          "Slow Start Threshold is incorrect");
< }
< 
< 
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief Testing the timing of RTO
<  *
<  * Checking if RTO is doubled ONLY after a retransmission.
<  */
< class TcpTimeRtoTest : public TcpGeneralTest
< {
< public:
<   /**
<    * \brief Constructor.
<    * \param congControl Congestion control type.
<    * \param msg Test description.
<    */
<   TcpTimeRtoTest (TypeId &congControl, const std::string &msg);
< 
< protected:
<   virtual Ptr<TcpSocketMsgBase> CreateSenderSocket (Ptr<Node> node);
<   virtual Ptr<ErrorModel> CreateReceiverErrorModel ();
<   virtual void ErrorClose  (SocketWho who);
<   virtual void AfterRTOExpired (const Ptr<const TcpSocketState> tcb, SocketWho who);
<   virtual void Tx (const Ptr<const Packet> p, const TcpHeader&h, SocketWho who);
<   virtual void FinalChecks ();
< 
<   virtual void ConfigureEnvironment ();
< 
<   /**
<    * \brief Called when a packet has been dropped.
<    * \param ipH IPv4 header.
<    * \param tcpH TCP header.
<    * \param p The packet.
<    */
<   void PktDropped (const Ipv4Header &ipH, const TcpHeader& tcpH, Ptr<const Packet> p);
< 
< private:
<   uint32_t m_senderSentSegments;  //!< Number of segments sent.
<   Time m_previousRTO;             //!< Previous RTO.
<   bool m_closed;                  //!< True if the connection is closed.
< };
< 
---
> // TcpTimeRtoTest
407c179,180
<       NS_LOG_INFO ("Measured RTO:" << GetRto (SENDER).GetSeconds ());
---
>       NS_LOG_INFO (Simulator::Now ().GetSeconds () << "\tMeasured RTO:" <<
>                    GetRto (SENDER).GetSeconds ());
420c193,194
<           NS_LOG_INFO ("TX: " << h << m_senderSentSegments);
---
>           NS_LOG_INFO (Simulator::Now ().GetSeconds () << "\tTX: " << h <<
>                        m_senderSentSegments);
473c247
< TcpTimeRtoTest::AfterRTOExpired (const Ptr<const TcpSocketState> tcb, SocketWho who)
---
> TcpTimeRtoTest::RTOExpired (const Ptr<const TcpSocketState> tcb, SocketWho who)
496c270
<   NS_LOG_INFO ("DROPPED! " << tcpH);
---
>   NS_LOG_INFO (Simulator::Now ().GetSeconds () << "\tDROPPED! " << tcpH);
505a280
> //-----------------------------------------------------------------------------
507,513c282
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief TCP RTO TestSuite
<  */
< class TcpRtoTestSuite : public TestSuite
---
> static class TcpRtoTestSuite : public TestSuite
524,532c293,294
<         AddTestCase (new TcpRtoTest ((*it), (*it).GetName () + " RTO retransmit testing"), TestCase::QUICK);
<         uint32_t seqToDrop = 25001;
<         Time minRto = Seconds (0.5);
<         // With RTO of 0.5 seconds, BytesInFlight winds down to zero before RTO
<         AddTestCase (new TcpSsThreshRtoTest ((*it), seqToDrop, minRto, (*it).GetName () + " RTO ssthresh testing, set to 2*MSL"), TestCase::QUICK);
<         // With RTO of 0.005 seconds, FlightSize/2 > 2*SMSS 
<         minRto = Seconds (0.005);
<         AddTestCase (new TcpSsThreshRtoTest ((*it), seqToDrop, minRto, (*it).GetName () + " RTO ssthresh testing, set to half of BytesInFlight"), TestCase::QUICK);
<         AddTestCase (new TcpTimeRtoTest ((*it), (*it).GetName () + " RTO timing testing"), TestCase::QUICK);
---
>         AddTestCase (new TcpRtoTest ((*it), "RTO retransmit testing"), TestCase::QUICK);
>         AddTestCase (new TcpTimeRtoTest ((*it), "RTO timing testing"), TestCase::QUICK);
535,538c297
< };
< 
< static TcpRtoTestSuite g_TcpRtoTestSuite; //!< Static variable for test initialization
< 
---
> } g_TcpRtoTestSuite;
539a299
> } // namespace ns3
Only in ../../ns-3-dev/src/internet/test: tcp-rto-test.h
diff ../../NS3-WiGig/src/internet/test/tcp-rtt-estimation.cc ../../ns-3-dev/src/internet/test/tcp-rtt-estimation.cc
23d22
< #include "ns3/rtt-estimator.h"
26c25
< using namespace ns3;
---
> namespace ns3 {
31,33d29
<  * \ingroup internet-test
<  * \ingroup tests
<  *
44,50c40
<   /**
<    * \brief Constructor.
<    * \param desc Test description.
<    * \param enableTs Enable TimeStamp option.
<    * \param pktCount Packet number.
<    */
<   TcpRttEstimationTest (const std::string &desc, bool enableTs, uint32_t pktCount);
---
>   TcpRttEstimationTest (const std::string &desc, bool enableTs, uint32_t dataPkt);
66,70c56,60
<   bool m_enableTs;      //!< Enable TimeStamp option
<   bool m_rttChanged;    //!< True if RTT has changed.
<   SequenceNumber32 m_highestTxSeq;  //!< Highest sequence number sent.
<   uint32_t m_pktCount;  //!< Packet counter.
<   uint32_t m_dataCount; //!< Data counter.
---
>   bool m_enableTs;
>   bool m_rttChanged;
>   SequenceNumber32 m_highestTxSeq;
>   uint32_t m_pktCount;
>   uint32_t m_dataCount;
186,194c176
< 
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief Check Rtt calculations with packet losses.
<  *
<  * \see TcpRttEstimationTest
<  */
---
> //-----------------------------------------------------------------------------
198,204d179
<   /**
<    * \brief Constructor.
<    * \param desc Test description.
<    * \param enableTs Enable TimeStamp option.
<    * \param pktCount Packet number.
<    * \param toDrop List of packet to drop.
<    */
212c187
<   std::vector<uint32_t> m_toDrop; //!< Packets to drop.
---
>   std::vector<uint32_t> m_toDrop;
239a215
> //-----------------------------------------------------------------------------
241,248c217
< 
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief TCP RTT estimation TestSuite
<  */
< class TcpRttEstimationTestSuite : public TestSuite
---
> static class TcpRttEstimationTestSuite : public TestSuite
299,301c268
< };
< 
< static TcpRttEstimationTestSuite g_tcpRttEstimationTestSuite; //!< Static variable for test initialization
---
> } g_tcpRttEstimationTestSuite;
302a270
> } // namespace ns3
Only in ../../NS3-WiGig/src/internet/test: tcp-rx-buffer-test.cc
Only in ../../NS3-WiGig/src/internet/test: tcp-sack-permitted-test.cc
diff ../../NS3-WiGig/src/internet/test/tcp-scalable-test.cc ../../ns-3-dev/src/internet/test/tcp-scalable-test.cc
34c34
< using namespace ns3;
---
> namespace ns3 {
39,41d38
<  * \ingroup internet-test
<  * \ingroup tests
<  *
47,53d43
<   /**
<    * \brief Constructor.
<    * \param cWnd Congestion window.
<    * \param segmentSize Segment size.
<    * \param segmentsAcked Segments ACKed.
<    * \param name Test description.
<    */
61,64c51,54
<   uint32_t m_cWnd;          //!< Congestion window.
<   uint32_t m_segmentSize;   //!< Segment size.
<   uint32_t m_segmentsAcked; //!< Segments ACKed.
<   Ptr<TcpSocketState> m_state;  //!< TCP socket state.
---
>   uint32_t m_cWnd;
>   uint32_t m_segmentSize;
>   uint32_t m_segmentsAcked;
>   Ptr<TcpSocketState> m_state;
107,109d96
<  * \ingroup internet-test
<  * \ingroup tests
<  *
115,121c102
<   /**
<    * \brief Constructor.
<    * \param cWnd Congestion window.
<    * \param segmentSize Segment size.
<    * \param name Test description.
<    */
<   TcpScalableDecrementTest (uint32_t cWnd, uint32_t segmentSize,
---
>   TcpScalableDecrementTest (uint32_t ssThresh, uint32_t segmentSize,
127,129c108,110
<   uint32_t m_cWnd;          //!< Congestion window.
<   uint32_t m_segmentSize;   //!< Segment size.
<   Ptr<TcpSocketState> m_state;  //!< TCP socket state.
---
>   uint32_t m_cWnd;
>   uint32_t m_segmentSize;
>   Ptr<TcpSocketState> m_state;
168,174c149,151
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief TcpScalable TestSuite.
<  */
< class TcpScalableTestSuite : public TestSuite
---
> // -------------------------------------------------------------------
> 
> static class TcpScalableTestSuite : public TestSuite
200,202c177
< };
< 
< static TcpScalableTestSuite g_tcpScalableTest; //!< Static variable for test initialization
---
> } g_tcpScalableTest;
203a179
> } // namespace ns3
diff ../../NS3-WiGig/src/internet/test/tcp-slow-start-test.cc ../../ns-3-dev/src/internet/test/tcp-slow-start-test.cc
18a19
> #include "tcp-slow-start-test.h"
20d20
< #include "ns3/test.h"
22c22
< #include "ns3/node.h"
---
> #include "ns3/internet-module.h"
24,26d23
< #include "ns3/tcp-westwood.h"
< #include "ns3/tcp-header.h"
< #include "tcp-general-test.h"
28c25
< using namespace ns3;
---
> namespace ns3 {
32,85c29
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief Test the normal behavior for slow start
<  *
<  * As method for checking the slow start, a callback is attached to the
<  * congestion window. With the knowledge of the number of segments, we can calculate
<  * if the value of the cWnd is right. Also, with a fixed delay for each packet,
<  * we can know if the timing is correct.
<  *
<  * Check what is done inside CWndTrace.
<  *
<  * \see CWndTrace
<  */
< class
< TcpSlowStartNormalTest : public TcpGeneralTest
< {
< public:
<   /**
<    * \brief Constructor.
<    * \param segmentSize Segment size.
<    * \param packetSize Packet size.
<    * \param initSsTh Initial SlowStart threshold.
<    * \param packets Packet counter.
<    * \param congControl Congestion control.
<    * \param desc Test description.
<    */
<   TcpSlowStartNormalTest (uint32_t segmentSize, uint32_t packetSize,
<                           uint32_t initSsTh, uint32_t packets, TypeId& congControl,
<                           const std::string &desc);
< 
< protected:
<   virtual void CWndTrace (uint32_t oldValue, uint32_t newValue);
<   virtual void Tx (const Ptr<const Packet> p, const TcpHeader &h, SocketWho who);
<   virtual void Rx (const Ptr<const Packet> p, const TcpHeader &h, SocketWho who);
<   void QueueDrop (SocketWho who);
<   void PhyDrop (SocketWho who);
< 
<   virtual void ConfigureEnvironment ();
<   virtual void ConfigureProperties ();
< 
<   uint32_t m_ackedBytes;        //!< ACKed bytes.
<   uint32_t m_sentBytes;         //!< Sent bytes.
<   uint32_t m_totalAckedBytes;   //!< Total ACKed bytes.
<   uint32_t m_allowedIncrease;   //!< Allowed increase.
< 
<   bool   m_initial; //!< First cycle flag.
< 
< private:
<   uint32_t m_segmentSize;   //!< Segment size.
<   uint32_t m_packetSize;    //!< Packet size.
<   uint32_t m_packets;       //!< Packet counter.
< };
---
> // TcpSlowStartNormalTest
209,240c153
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief A slow start test using a socket which sends smaller ACKs
<  *
<  * The same test are performed over a connection where, on one side, there is
<  * a malicious socket which sends smaller ACKs than the segment received.
<  *
<  * Slow start behavior should not change.
<  */
< class
< TcpSlowStartAttackerTest : public TcpSlowStartNormalTest
< {
< public:
<   /**
<    * \brief Constructor.
<    * \param segmentSize Segment size.
<    * \param packetSize Packet size.
<    * \param initSsTh Initial SlowStart threshold.
<    * \param packets Packet counter.
<    * \param congControl Congestion control.
<    * \param desc Test description.
<    */
<   TcpSlowStartAttackerTest (uint32_t segmentSize, uint32_t packetSize,
<                             uint32_t initSsTh, uint32_t packets, TypeId& congControl,
<                             const std::string &desc);
< 
< protected:
<   virtual Ptr<TcpSocketMsgBase> CreateReceiverSocket (Ptr<Node> node);
< };
< 
---
> // TcpSlowStartAttackerTest
264,270c177,179
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief TCP Slow Start TestSuite.
<  */
< class TcpSlowStartTestSuite : public TestSuite
---
> //-----------------------------------------------------------------------------
> 
> static class TcpSlowStartTestSuite : public TestSuite
299,301c208
< };
< 
< static TcpSlowStartTestSuite g_tcpSlowStartTestSuite; //!< Static variable for test initialization
---
> } g_tcpSlowStartTestSuite;
302a210
> } // namespace ns3
Only in ../../ns-3-dev/src/internet/test: tcp-slow-start-test.h
diff ../../NS3-WiGig/src/internet/test/tcp-test.cc ../../ns-3-dev/src/internet/test/tcp-test.cc
28a29
> #include "ns3/drop-tail-queue.h"
55,60d55
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief TCP Test - send string data from client to server and back.
<  */
64,73d58
< 
<   /**
<    * \brief Constructor.
<    * \param totalStreamSize Total stream size (in bytes).
<    * \param sourceWriteSize Client data size when sending.
<    * \param sourceReadSize Client data size when receiving.
<    * \param serverWriteSize Server data size when sending.
<    * \param serverReadSize Server data size when receiving.
<    * \param useIpv6 Use IPv6 instead of IPv4.
<    */
83,86d67
< 
<   /**
<    * \brief Setup the test (IPv4 version).
<    */
88,90d68
<   /**
<    * \brief Setup the test (IPv6 version).
<    */
93,96d70
<   /**
<    * \brief Create a node with the Internet stack (IPv4 version).
<    * \returns The new node.
<    */
98,101d71
<   /**
<    * \brief Create a node with the Internet stack (IPv6 version).
<    * \returns The new node.
<    */
103,110d72
< 
<   /**
<    * \brief Add a SimpleNetDevice to a node (IPv4 version).
<    * \param node The target node.
<    * \param ipaddr the SimpleNetDevice IPv4 address.
<    * \param netmask the SimpleNetDevice IPv4 address netmask.
<    * \returns The new SimpleNetDevice.
<    */
112,118d73
<   /**
<    * \brief Add a SimpleNetDevice to a node (IPv6 version).
<    * \param node The target node.
<    * \param ipaddr the SimpleNetDevice IPv6 address.
<    * \param prefix the SimpleNetDevice IP6 address prefix.
<    * \returns The new SimpleNetDevice.
<    */
120,125d74
< 
<   /**
<    * \brief Server: Handle connection created.
<    * \param s The socket.
<    * \param addr The other party address.
<    */
127,130d75
<   /**
<    * \brief Server: Receive data.
<    * \param sock The socket.
<    */
132,136d76
<   /**
<    * \brief Server: Send data.
<    * \param sock The socket.
<    * \param available Unused in the test.
<    */
138,142d77
<   /**
<    * \brief Client: Send data.
<    * \param sock The socket.
<    * \param available Unused in the test.
<    */
144,147d78
<   /**
<    * \brief Client: Receive data.
<    * \param sock The socket.
<    */
150,161c81,92
<   uint32_t m_totalBytes;        //!< Total stream size (in bytes).
<   uint32_t m_sourceWriteSize;   //!< Client data size when sending.
<   uint32_t m_sourceReadSize;    //!< Client data size when receiving.
<   uint32_t m_serverWriteSize;   //!< Server data size when sending.
<   uint32_t m_serverReadSize;    //!< Server data size when receiving.
<   uint32_t m_currentSourceTxBytes;  //!< Client Tx bytes.
<   uint32_t m_currentSourceRxBytes;  //!< Client Rx bytes.
<   uint32_t m_currentServerRxBytes;  //!< Server Tx bytes.
<   uint32_t m_currentServerTxBytes;  //!< Server Rx bytes.
<   uint8_t *m_sourceTxPayload; //!< Client Tx payload.
<   uint8_t *m_sourceRxPayload; //!< Client Rx payload.
<   uint8_t* m_serverRxPayload; //!< Server Rx payload.
---
>   uint32_t m_totalBytes;
>   uint32_t m_sourceWriteSize;
>   uint32_t m_sourceReadSize;
>   uint32_t m_serverWriteSize;
>   uint32_t m_serverReadSize;
>   uint32_t m_currentSourceTxBytes;
>   uint32_t m_currentSourceRxBytes;
>   uint32_t m_currentServerRxBytes;
>   uint32_t m_currentServerTxBytes;
>   uint8_t *m_sourceTxPayload;
>   uint8_t *m_sourceRxPayload;
>   uint8_t* m_serverRxPayload;
163c94
<   bool m_useIpv6; //!< Use IPv6 instead of IPv4.
---
>   bool m_useIpv6;
345,347d275
<   // Traffic Control
<   Ptr<TrafficControlLayer> tc = CreateObject<TrafficControlLayer> ();
<   node->AggregateObject (tc);
351d278
<   arp->SetTrafficControl (tc);
368a296,298
>   // Traffic Control
>   Ptr<TrafficControlLayer> tc = CreateObject<TrafficControlLayer> ();
>   node->AggregateObject (tc);
522,528c452
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief TCP TestSuite - send string data from client to server and back.
<  */
< class TcpTestSuite : public TestSuite
---
> static class TcpTestSuite : public TestSuite
547,549c471
< };
< 
< static TcpTestSuite g_tcpTestSuite; //!< Static variable for test initialization
---
> } g_tcpTestSuite;
diff ../../NS3-WiGig/src/internet/test/tcp-timestamp-test.cc ../../ns-3-dev/src/internet/test/tcp-timestamp-test.cc
23,24c23
< #include "ns3/tcp-option-ts.h"
< #include "ns3/tcp-header.h"
---
> #include "ns3/private/tcp-option-ts.h"
26c25
< using namespace ns3;
---
> namespace ns3 {
30,35d28
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief TCP TimeStamp enabling Test.
<  */
39,41d31
<   /**
<    * TimeStamp configuration.
<    */
50,53d39
<   /**
<    * \brief Constructor.
<    * \param conf Test configuration.
<    */
55d40
< 
63c48
<   Configuration m_configuration; //!< Test configuration.
---
>   Configuration m_configuration;
205,210c190
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief TCP TimeStamp values Test.
<  */
---
> // TimestampValueTestCase
214,219d193
<   /**
<    * \brief Constructor.
<    * \param startTime Start time (Seconds).
<    * \param timeToWait Time to wait (Seconds).
<    * \param name Test description.
<    */
227,229d200
<   /**
<    * \brief Perform the test checks.
<    */
231,233d201
<   /**
<    * \brief Test initialization.
<    */
236,238c204,206
<   double m_startTime;   //!< Start time (Seconds).
<   double m_timeToWait;  //!< Time to wait (Seconds).
<   double m_initValue;   //!< Initialization value (Seconds).
---
>   double m_startTime;
>   double m_timeToWait;
>   double m_initValue;
285,291c253
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief TCP TimeStamp TestSuite.
<  */
< class TcpTimestampTestSuite : public TestSuite
---
> static class TcpTimestampTestSuite : public TestSuite
309,311c271
< };
< 
< static TcpTimestampTestSuite g_tcpTimestampTestSuite; //!< Static variable for test initialization
---
> } g_tcpTimestampTestSuite;
312a273
> } // namespace ns3
Only in ../../NS3-WiGig/src/internet/test: tcp-tx-buffer-test.cc
diff ../../NS3-WiGig/src/internet/test/tcp-vegas-test.cc ../../ns-3-dev/src/internet/test/tcp-vegas-test.cc
33c33
< using namespace ns3;
---
> namespace ns3 {
38c38
<  * \brief TcpVegas congestion control algorithm test
---
>  * \brief Testing TcpVegas congestion control algorithm
43,53d42
<   /**
<    * \brief Constructor.
<    * \param cWnd Congestion window.
<    * \param segmentSize Segment size.
<    * \param ssThresh Slow Start Threshold.
<    * \param rtt The RTT.
<    * \param segmentsAcked Number of segments ACKed.
<    * \param nextTxSeq Next Tx sequence number.
<    * \param lastAckedSeq Last ACKed sequence number.
<    * \param name Test description.
<    */
65,68d53
<   /**
<    * \brief Increases the TCP window.
<    * \param cong The congestion control.
<    */
70,73d54
<   /**
<    * brief Get and check the SSH threshold.
<    * \param cong The congestion control.
<    */
76,84c57,64
<   uint32_t m_cWnd;        //!< Congestion window.
<   uint32_t m_segmentSize; //!< Segment size.
<   uint32_t m_ssThresh;    //!< Slow Start Threshold.
<   Time m_rtt;             //!< RTT.
<   uint32_t m_segmentsAcked; //!< Number of segments ACKed.
<   SequenceNumber32 m_nextTxSeq; //!< Next Tx sequence number.
<   SequenceNumber32 m_lastAckedSeq;  //!< Last ACKed sequence number.
< 
<   Ptr<TcpSocketState> m_state;  //!< TCP socket state.
---
>   uint32_t m_cWnd;
>   uint32_t m_segmentSize;
>   uint32_t m_ssThresh;
>   Time m_rtt;
>   uint32_t m_segmentsAcked;
>   SequenceNumber32 m_nextTxSeq;
>   SequenceNumber32 m_lastAckedSeq;
>   Ptr<TcpSocketState> m_state;
116d95
<   m_state->m_minRtt = m_rtt;
201,208c180,181
< 
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief TCP Vegas TestSuite
<  */
< class TcpVegasTestSuite : public TestSuite
---
> // -------------------------------------------------------------------
> static class TcpVegasTestSuite : public TestSuite
229c202
< };
---
> } g_tcpVegasTest;
231c204
< static TcpVegasTestSuite g_tcpVegasTest; //!< Static variable for test initialization
---
> } // namespace ns3
diff ../../NS3-WiGig/src/internet/test/tcp-veno-test.cc ../../ns-3-dev/src/internet/test/tcp-veno-test.cc
33c33
< using namespace ns3;
---
> namespace ns3 {
36a37,73
> static uint32_t
> NewReno_SlowStart (Ptr<TcpSocketState> tcb, uint32_t segmentsAcked)
> {
>   if (segmentsAcked >= 1)
>     {
>       tcb->m_cWnd += tcb->m_segmentSize;
>       return segmentsAcked - 1;
>     }
> 
>   return 0;
> }
> 
> static void
> NewReno_CongestionAvoidance (Ptr<TcpSocketState> tcb, uint32_t segmentsAcked)
> {
>   if (segmentsAcked > 0)
>     {
>       double adder = static_cast<double> (tcb->m_segmentSize * tcb->m_segmentSize) / tcb->m_cWnd.Get ();
>       adder = std::max (1.0, adder);
>       tcb->m_cWnd += static_cast<uint32_t> (adder);
>     }
> }
> 
> static void
> NewReno_IncreaseWindow (Ptr<TcpSocketState> tcb, uint32_t segmentsAcked)
> {
>   if (tcb->m_cWnd < tcb->m_ssThresh)
>     {
>       segmentsAcked = NewReno_SlowStart (tcb, segmentsAcked);
>     }
> 
>   if (tcb->m_cWnd >= tcb->m_ssThresh)
>     {
>       NewReno_CongestionAvoidance (tcb, segmentsAcked);
>     }
> }
> 
38,40d74
<  * \ingroup internet-test
<  * \ingroup tests
<  *
46,55d79
<   /**
<    * \brief Constructor.
<    * \param cWnd Congestion window.
<    * \param segmentSize Segment size.
<    * \param ssThresh Slow Start Threshold.
<    * \param rtt The RTT.
<    * \param segmentsAcked Number of segments acked.
<    * \param numRtt Number of RTTs (i.e., rounds) in the test.
<    * \param name Test description.
<    */
66,72d89
< 
<   /**
<    * \brief TCP Veno additive increase formula.
<    * \param state The congestion control state.
<    * \param diff The difference between actual and expected throughput.
<    * \param beta TCP Veno beta param.
<    */
74,81d90
< 
<   /**
<    * \brief TCP Veno multiplicative decrease formula.
<    * \param diff The difference between actual and expected throughput.
<    * \param beta TCP Veno beta param.
<    * \param bytesInFlight Bytes in flight.
<    * \returns The calculated SsThresh.
<    */
84,114c93,100
<   /**
<    * \brief Mimics the NewReno IncreaseWindow algorithm.
<    * \param state TCP socket state.
<    * \param segmentsAcked Number of segments acked.
<    */
<   void NewReno_IncreaseWindow (Ptr<TcpSocketState> state, uint32_t segmentsAcked);
< 
<   /**
<    * \brief Mimics the NewReno SlowStart algorithm.
<    * \param state TCP socket state.
<    * \param segmentsAcked Number of segments acked.
<    * \returns The number of segments that could be sent.
<    */
<   uint32_t NewReno_SlowStart (Ptr<TcpSocketState> state, uint32_t segmentsAcked);
< 
<   /**
<    * \brief Mimics the NewReno Congestion Avoidance algorithm.
<    * \param state TCP socket state.
<    * \param segmentsAcked Number of segments acked.
<    */
<   void NewReno_CongestionAvoidance (Ptr<TcpSocketState> state, uint32_t segmentsAcked);
< 
< 
<   uint32_t m_cWnd;        //!< Congestion window.
<   uint32_t m_segmentSize; //!< Segment size.
<   uint32_t m_ssThresh;    //!< Slow Start Threshold.
<   Time m_rtt;             //!< RTT.
<   uint32_t m_segmentsAcked; //!< Number of segments ACKed.
<   uint32_t m_numRtt;      //!< Number of RTT (i.e., rounds) of the test.
<   bool m_inc;             //!< Internal flag to increase every other round.
<   Ptr<TcpSocketState> m_state;  //!< TCP socket state.
---
>   uint32_t m_cWnd;
>   uint32_t m_segmentSize;
>   uint32_t m_ssThresh;
>   Time m_rtt;
>   uint32_t m_segmentsAcked;
>   uint32_t m_numRtt;
>   bool m_inc;
>   Ptr<TcpSocketState> m_state;
143d128
<   m_state->m_minRtt = m_rtt;
258,282d242
< void
< TcpVenoTest::NewReno_IncreaseWindow (Ptr<TcpSocketState> state, uint32_t segmentsAcked)
< {
<   if (state->m_cWnd < state->m_ssThresh)
<     {
<       segmentsAcked = NewReno_SlowStart (state, segmentsAcked);
<     }
< 
<   if (state->m_cWnd >= state->m_ssThresh)
<     {
<       NewReno_CongestionAvoidance (state, segmentsAcked);
<     }
< }
< 
< uint32_t
< TcpVenoTest::NewReno_SlowStart (Ptr<TcpSocketState> state, uint32_t segmentsAcked)
< {
<   if (segmentsAcked >= 1)
<     {
<       state->m_cWnd += state->m_segmentSize;
<       return segmentsAcked - 1;
<     }
< 
<   return 0;
< }
284,302c244,245
< void
< TcpVenoTest::NewReno_CongestionAvoidance (Ptr<TcpSocketState> state, uint32_t segmentsAcked)
< {
<   if (segmentsAcked > 0)
<     {
<       double adder = static_cast<double> (state->m_segmentSize * state->m_segmentSize) / state->m_cWnd.Get ();
<       adder = std::max (1.0, adder);
<       state->m_cWnd += static_cast<uint32_t> (adder);
<     }
< }
< 
< 
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief TCP Veno TestSuite
<  */
< class TcpVenoTestSuite : public TestSuite
---
> // -------------------------------------------------------------------
> static class TcpVenoTestSuite : public TestSuite
317,320c260
< };
< 
< static TcpVenoTestSuite g_tcpVenoTest; //!< Static variable for test initialization
< 
---
> } g_tcpVenoTest;
321a262
> } // namespace ns3
diff ../../NS3-WiGig/src/internet/test/tcp-wscaling-test.cc ../../ns-3-dev/src/internet/test/tcp-wscaling-test.cc
24,28d23
< #include "ns3/tcp-header.h"
< #include "ns3/tcp-tx-buffer.h"
< #include "ns3/tcp-rx-buffer.h"
< 
< using namespace ns3;
29a25
> namespace ns3 {
34,39d29
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief TCP Window Scaling enabling Test.
<  */
43,45d32
<   /**
<    * Window Scaling configuration.
<    */
54,60d40
<   /**
<    * \brief Constructor.
<    * \param conf Test configuration.
<    * \param maxRcvBufferSize Maximum receiver buffer size.
<    * \param maxSndBufferSize Maximum sender buffer size.
<    * \param name Test description.
<    */
71,73c51,53
<   Configuration m_configuration;  //!< Test configuration.
<   uint32_t m_maxRcvBufferSize;    //!< Maximum receiver buffer size.
<   uint32_t m_maxSndBufferSize;    //!< Maximum sender buffer size.
---
>   Configuration m_configuration;
>   uint32_t m_maxRcvBufferSize;
>   uint32_t m_maxSndBufferSize;
219,225c199
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief TCP Window Scaling TestSuite.
<  */
< class TcpWScalingTestSuite : public TestSuite
---
> static class TcpWScalingTestSuite : public TestSuite
244c218
< };
---
> } g_tcpWScalingTestSuite;
246c220
< static TcpWScalingTestSuite g_tcpWScalingTestSuite; //!< Static variable for test initialization
---
> } // namespace ns3
diff ../../NS3-WiGig/src/internet/test/tcp-yeah-test.cc ../../ns-3-dev/src/internet/test/tcp-yeah-test.cc
33c33
< using namespace ns3;
---
> namespace ns3 {
38,41c38
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief Testing TcpYeah additive increase algorithm.
---
>  * \brief Testing TcpYeah additive increase algorithm
46,56d42
<   /**
<    * \brief Constructor.
<    * \param cWnd Congestion window.
<    * \param ssThresh Slow Start Threshold.
<    * \param segmentSize Segment size.
<    * \param nextTxSeq Next Tx sequence number.
<    * \param lastAckedSeq Last ACKed sequence number.
<    * \param segmentsAcked Number of segments ACKed.
<    * \param minRtt Minimum RTT.
<    * \param name Test description.
<    */
68,71d53
<   /**
<    * \brief Increases the TCP window.
<    * \param cong The congestion control.
<    */
74,84c56,66
<   uint32_t m_cWnd;        //!< Congestion window.
<   uint32_t m_ssThresh;    //!< Slow Start Threshold.
<   uint32_t m_segmentSize; //!< Segment size.
<   SequenceNumber32 m_nextTxSeq; //!< Next Tx sequence number.
<   SequenceNumber32 m_lastAckedSeq;  //!< Last ACKed sequence number.
<   uint32_t m_segmentsAcked; //!< Number of segments ACKed.
<   Time m_baseRtt;         //!< Base RTT.
<   Time m_minRtt;          //!< Min RTT.
<   uint32_t m_doingRenoNow;  //!< TCP Reno fallback.
<   uint32_t m_cntRtt;      //!< RTT counter.
<   uint32_t m_renoCount;   //!< Reno counter.
---
>   uint32_t m_cWnd;
>   uint32_t m_ssThresh;
>   uint32_t m_segmentSize;
>   SequenceNumber32 m_nextTxSeq;
>   SequenceNumber32 m_lastAckedSeq;
>   uint32_t m_segmentsAcked;
>   Time m_baseRtt;
>   Time m_minRtt;
>   uint32_t m_doingRenoNow;
>   uint32_t m_cntRtt;
>   uint32_t m_renoCount;
119d100
<   state->m_minRtt = m_minRtt;
224,226d204
<  * \ingroup internet-test
<  * \ingroup tests
<  *
232,242d209
<   /**
<    * \brief Constructor.
<    * \param cWnd Congestion window.
<    * \param ssThresh Slow Start Threshold.
<    * \param segmentSize Segment size.
<    * \param nextTxSeq Next Tx sequence number.
<    * \param lastAckedSeq Last ACKed sequence number.
<    * \param minRtt Minimum RTT.
<    * \param rho TCP Yeah rho param.
<    * \param name Test description.
<    */
254,258d220
<   /**
<    * \brief Calculate the Slow Start threshold.
<    * \param cong The TCP state.
<    * \returns The SshThreshold.
<    */
261,270c223,232
<   uint32_t m_cWnd;        //!< Congestion window.
<   uint32_t m_ssThresh;    //!< Slow Start Threshold.
<   uint32_t m_segmentSize; //!< Segment size.
<   uint32_t m_doingRenoNow;  //!< TCP Reno fallback.
<   SequenceNumber32 m_nextTxSeq; //!< Next Tx sequence number.
<   SequenceNumber32 m_lastAckedSeq;  //!< Last ACKed sequence number.
<   Time m_minRtt;          //!< Min RTT.
<   Time m_baseRtt;         //!< Base RTT.
<   uint32_t m_segmentsAcked; //!< Number of segments ACKed.
<   UintegerValue m_rho;      //!< TCP Yeah rho param.
---
>   uint32_t m_cWnd;
>   uint32_t m_ssThresh;
>   uint32_t m_segmentSize;
>   uint32_t m_doingRenoNow;
>   SequenceNumber32 m_nextTxSeq;
>   SequenceNumber32 m_lastAckedSeq;
>   Time m_minRtt;
>   Time m_baseRtt;
>   uint32_t m_segmentsAcked;
>   UintegerValue m_rho;
370,376c332,333
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief TCP Yeah TestSuite
<  */
< class TcpYeahTestSuite : public TestSuite
---
> // -------------------------------------------------------------------
> static class TcpYeahTestSuite : public TestSuite
406,408c363
< };
< 
< static TcpYeahTestSuite g_tcpYeahTest; //!< Static variable for test initialization
---
> } g_tcpYeahTest;
409a365
> } // namespace ns3
diff ../../NS3-WiGig/src/internet/test/tcp-zero-window-test.cc ../../ns-3-dev/src/internet/test/tcp-zero-window-test.cc
25,26c25
< using namespace ns3;
< 
---
> namespace ns3 {
30,35d28
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief Testing the congestion avoidance increment on TCP ZeroWindow
<  */
39,42d31
<   /**
<    * \brief Constructor.
<    * \param desc Test description.
<    */
59,61d47
<   /**
<    * \brief Increase the receiver buffer size.
<    */
65,69c51,55
<   EventId m_receivePktEvent;  //!< Receive packet event.
<   bool m_zeroWindowProbe;     //!< ZeroWindow probe.
<   bool m_windowUpdated;       //!< Window updated.
<   bool m_senderFinished;      //!< Send finished.
<   bool m_receiverFinished;    //!< Receiver finished.
---
>   EventId m_receivePktEvent;
>   bool m_zeroWindowProbe;
>   bool m_windowUpdated;
>   bool m_senderFinished;
>   bool m_receiverFinished;
254a241
> //-----------------------------------------------------------------------------
256,262c243
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief TCP ZeroWindow TestSuite
<  */
< class TcpZeroWindowTestSuite : public TestSuite
---
> static class TcpZeroWindowTestSuite : public TestSuite
270,272c251
< };
< 
< static TcpZeroWindowTestSuite g_tcpZeroWindowTestSuite; //!< Static variable for test initialization
---
> } g_tcpZeroWindowTestSuite;
273a253
> } // namespace ns3
diff ../../NS3-WiGig/src/internet/test/udp-test.cc ../../ns-3-dev/src/internet/test/udp-test.cc
31a32
> #include "ns3/drop-tail-queue.h"
62,67d62
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief UDP Socket Loopback over IPv4 Test
<  */
74,77d68
<   /**
<    * \brief Receive a packet.
<    * \param socket The receiving socket.
<    */
79c70
<   Ptr<Packet> m_receivedPacket; //!< Received packet
---
>   Ptr<Packet> m_receivedPacket;
114,119d104
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief UDP Socket Loopback over IPv6 Test
<  */
126,129d110
<   /**
<    * \brief Receive a packet.
<    * \param socket The receiving socket.
<    */
131c112
<   Ptr<Packet> m_receivedPacket; //!< Received packet
---
>   Ptr<Packet> m_receivedPacket;
169,174d149
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief UDP Socket over IPv4 Test
<  */
177,184c152,154
<   Ptr<Packet> m_receivedPacket;   //!< Received packet (1).
<   Ptr<Packet> m_receivedPacket2;  //!< Received packet (2).
<   Ptr<Ipv4QueueDiscItem> m_sentPacket;  //!< Sent packet.
< 
<   /**
<    * \brief Get the TOS of the received packet.
<    * \returns The TOS.
<    */
---
>   Ptr<Packet> m_receivedPacket;
>   Ptr<Packet> m_receivedPacket2;
>   Ptr<Ipv4QueueDiscItem> m_sentPacket;
186,190d155
< 
<   /**
<    * \brief Get the priority of the received packet.
<    * \returns The priority.
<    */
192,197d156
< 
<   /**
<    * \brief Send data.
<    * \param socket The sending socket.
<    * \param to The destination address.
<    */
199,203d157
<   /**
<    * \brief Send data.
<    * \param socket The sending socket.
<    * \param to The destination address.
<    */
205,208d158
<   /**
<    * \brief Send data.
<    * \param socket The sending socket.
<    */
210,213d159
<   /**
<    * \brief Send data.
<    * \param socket The sending socket.
<    */
220,223d165
<   /**
<    * \brief Receive packets (1).
<    * \param socket The receiving socket.
<    */
225,228d166
<   /**
<    * \brief Receive packets (2).
<    * \param socket The receiving socket.
<    */
230,235c168
< 
<   /**
<    * \brief Adds a packet to the list of sent packets.
<    * \param item The sent packet.
<    */
<   void SentPkt (Ptr<const QueueDiscItem> item);
---
>   void SentPkt (Ptr<const QueueItem> item);
259c192
< void UdpSocketImplTest::SentPkt (Ptr<const QueueDiscItem> item)
---
> void UdpSocketImplTest::SentPkt (Ptr<const QueueItem> item)
345c278
<   ipv4Addr = Ipv4InterfaceAddress (Ipv4Address ("10.0.0.1"), Ipv4Mask ("/24"));
---
>   ipv4Addr = Ipv4InterfaceAddress (Ipv4Address ("10.0.0.1"), Ipv4Mask (0xffff0000U));
350c283
<   ipv4Addr = Ipv4InterfaceAddress (Ipv4Address ("10.0.1.1"), Ipv4Mask ("/24"));
---
>   ipv4Addr = Ipv4InterfaceAddress (Ipv4Address ("10.0.1.1"), Ipv4Mask (0xffff0000U));
357c290
<   ipv4Addr = Ipv4InterfaceAddress (Ipv4Address ("10.0.0.2"), Ipv4Mask ("/24"));
---
>   ipv4Addr = Ipv4InterfaceAddress (Ipv4Address ("10.0.0.2"), Ipv4Mask (0xffff0000U));
362c295
<   ipv4Addr = Ipv4InterfaceAddress (Ipv4Address ("10.0.1.2"), Ipv4Mask ("/24"));
---
>   ipv4Addr = Ipv4InterfaceAddress (Ipv4Address ("10.0.1.2"), Ipv4Mask (0xffff0000U));
368d300
< 
374d305
<   NS_TEST_EXPECT_MSG_EQ (rxSocket2->Bind (InetSocketAddress (Ipv4Address ("10.0.1.1"), 1234)), 0, "trivial");
375a307
>   NS_TEST_EXPECT_MSG_EQ (rxSocket2->Bind (InetSocketAddress (Ipv4Address ("10.0.1.1"), 1234)), 0, "trivial");
386c318
<   NS_TEST_EXPECT_MSG_EQ (m_receivedPacket2->GetSize (), 0, "second interface should not receive it");
---
>   NS_TEST_EXPECT_MSG_EQ (m_receivedPacket2->GetSize (), 0, "second interface should receive it");
394c326
<   NS_TEST_EXPECT_MSG_EQ (m_receivedPacket->GetSize (), 0, "first socket should not receive it (it is bound specifically to the first interface's address");
---
>   NS_TEST_EXPECT_MSG_EQ (m_receivedPacket->GetSize (), 123, "trivial");
411c343
<   NS_TEST_EXPECT_MSG_EQ (m_receivedPacket->GetSize (), 0, "first socket should not receive it (it is bound specifically to the first interface's address");
---
>   NS_TEST_EXPECT_MSG_EQ (m_receivedPacket->GetSize (), 123, "trivial");
421c353
<   NS_TEST_EXPECT_MSG_EQ (m_receivedPacket->GetSize (), 0, "first socket should not receive it (it is bound specifically to the first interface's address");
---
>   NS_TEST_EXPECT_MSG_EQ (m_receivedPacket->GetSize (), 0, "first socket should not receive it (it is bound specifically to the second interface's address");
481,486d412
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief UDP Socket over IPv6 Test
<  */
489,503c415,418
<   Ptr<Packet> m_receivedPacket;   //!< Received packet (1).
<   Ptr<Packet> m_receivedPacket2;  //!< Received packet (2).
< 
<   /**
<    * \brief Send data.
<    * \param socket The sending socket.
<    * \param to The destination address.
<    */
<   void DoSendDataTo (Ptr<Socket> socket, std::string to);
<   /**
<    * \brief Send data.
<    * \param socket The sending socket.
<    * \param to The destination address.
<    */
<   void SendDataTo (Ptr<Socket> socket, std::string to);
---
>   Ptr<Packet> m_receivedPacket;
>   Ptr<Packet> m_receivedPacket2;
>   void DoSendData (Ptr<Socket> socket, std::string to);
>   void SendData (Ptr<Socket> socket, std::string to);
509,514d423
<   /**
<    * \brief Receive packets (1).
<    * \param socket The receiving socket.
<    * \param packet The received packet.
<    * \param from The source address.
<    */
516,521d424
<   /**
<    * \brief Receive packets (2).
<    * \param socket The receiving socket.
<    * \param packet The received packet.
<    * \param from The source address.
<    */
523,526d425
<   /**
<    * \brief Receive packets (1).
<    * \param socket The receiving socket.
<    */
528,531d426
<   /**
<    * \brief Receive packets (2).
<    * \param socket The receiving socket.
<    */
573c468
< Udp6SocketImplTest::DoSendDataTo (Ptr<Socket> socket, std::string to)
---
> Udp6SocketImplTest::DoSendData (Ptr<Socket> socket, std::string to)
581c476
< Udp6SocketImplTest::SendDataTo (Ptr<Socket> socket, std::string to)
---
> Udp6SocketImplTest::SendData (Ptr<Socket> socket, std::string to)
586c481
<                                   &Udp6SocketImplTest::DoSendDataTo, this, socket, to);
---
>                                   &Udp6SocketImplTest::DoSendData, this, socket, to);
667c562
<   SendDataTo (txSocket, "2001:0100::1");
---
>   SendData (txSocket, "2001:0100::1");
685c580
<   SendDataTo (txSocket, "ff02::1");
---
>   SendData (txSocket, "ff02::1");
711,716c606
< /**
<  * \ingroup internet-test
<  * \ingroup tests
<  *
<  * \brief UDP TestSuite
<  */
---
> //-----------------------------------------------------------------------------
727,730c617
< };
< 
< static UdpTestSuite g_udpTestSuite; //!< Static variable for test initialization
< 
---
> } g_udpTestSuite;
