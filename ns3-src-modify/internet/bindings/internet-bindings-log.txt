diff ../../NS3-WiGig/src/internet/bindings/callbacks_list.py ../../ns-3-dev/src/internet/bindings/callbacks_list.py
2c2,3
<     ['ns3::ObjectBase *', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'],
---
>     ['void', 'ns3::Ipv6Address', 'unsigned char', 'unsigned char', 'unsigned char', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'],
>     ['void', 'ns3::Ipv4Address', 'unsigned char', 'unsigned char', 'unsigned char', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'],
4,11c5,6
<     ['bool', 'ns3::Ptr<ns3::NetDevice>', 'ns3::Ptr<const ns3::Packet>', 'unsigned short', 'const ns3::Address &', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'],
<     ['bool', 'ns3::Ptr<ns3::NetDevice>', 'ns3::Ptr<const ns3::Packet>', 'unsigned short', 'const ns3::Address &', 'const ns3::Address &', 'ns3::NetDevice::PacketType', 'ns3::empty', 'ns3::empty', 'ns3::empty'],
<     ['void', 'ns3::Ptr<const ns3::ArpCache>', 'ns3::Ipv4Address', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'],
<     ['void', 'ns3::Ptr<const ns3::Packet>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'],
<     ['void', 'ns3::Ptr<ns3::NetDevice>', 'ns3::Ptr<const ns3::Packet>', 'unsigned short', 'const ns3::Address &', 'const ns3::Address &', 'ns3::NetDevice::PacketType', 'ns3::empty', 'ns3::empty', 'ns3::empty'],
<     ['void', 'ns3::Ptr<ns3::NetDevice>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'],
<     ['void', 'ns3::Ptr<ns3::Packet>', 'ns3::Ipv4Address', 'ns3::Ipv4Address', 'unsigned char', 'ns3::Ptr<ns3::Ipv4Route>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'],
<     ['void', 'ns3::Ptr<ns3::Packet>', 'ns3::Ipv6Address', 'ns3::Ipv6Address', 'unsigned char', 'ns3::Ptr<ns3::Ipv6Route>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'],
---
>     ['unsigned char', 'ns3::Ptr<ns3::QueueItem>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'],
>     ['void', 'ns3::Ptr<ns3::QueueItem>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'],
13,14d7
<     ['bool', 'ns3::Ptr<ns3::Socket>', 'const ns3::Address &', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'],
<     ['void', 'ns3::Ptr<ns3::Socket>', 'const ns3::Address &', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'],
16,37c9,16
<     ['void', 'const ns3::Ipv4Header &', 'ns3::Ptr<const ns3::Packet>', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'],
<     ['void', 'ns3::Ptr<const ns3::Packet>', 'ns3::Ptr<ns3::Ipv4>', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'],
<     ['void', 'const ns3::Ipv4Header &', 'ns3::Ptr<const ns3::Packet>', 'ns3::Ipv4L3Protocol::DropReason', 'ns3::Ptr<ns3::Ipv4>', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'],
<     ['void', 'ns3::Ptr<const ns3::Packet>', 'ns3::Ptr<ns3::Ipv6>', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'],
<     ['void', 'const ns3::Ipv6Header &', 'ns3::Ptr<const ns3::Packet>', 'ns3::Ipv6L3Protocol::DropReason', 'ns3::Ptr<ns3::Ipv6>', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'],
<     ['void', 'const ns3::Ipv6Header &', 'ns3::Ptr<const ns3::Packet>', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'],
<     ['void', 'std::basic_string<char>', 'ns3::Ptr<const ns3::Packet>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'],
<     ['void', 'ns3::Ptr<ns3::Packet>', 'ns3::Ipv4Header', 'unsigned short', 'ns3::Ptr<ns3::Ipv4Interface>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'],
<     ['void', 'ns3::Ipv4Address', 'unsigned char', 'unsigned char', 'unsigned char', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'],
<     ['void', 'unsigned int', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'],
<     ['void', 'ns3::Ptr<ns3::Packet>', 'ns3::Ipv6Header', 'unsigned short', 'ns3::Ptr<ns3::Ipv6Interface>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'],
<     ['void', 'ns3::Ipv6Address', 'unsigned char', 'unsigned char', 'unsigned char', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'],
<     ['void', 'ns3::SequenceNumber<unsigned int, int>', 'ns3::SequenceNumber<unsigned int, int>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'],
<     ['void', 'ns3::TcpSocketState::TcpCongState_t', 'ns3::TcpSocketState::TcpCongState_t', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'],
<     ['void', 'ns3::TcpSocketState::EcnState_t', 'ns3::TcpSocketState::EcnState_t', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'],
<     ['void', 'ns3::Time', 'ns3::Time', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'],
<     ['void', 'unsigned char', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'],
<     ['void', 'const ns3::TcpRateOps::TcpRateConnection &', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'],
<     ['void', 'const ns3::TcpRateOps::TcpRateSample &', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'],
<     ['void', 'double', 'double', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'],
<     ['void', 'ns3::TcpSocket::TcpStates_t', 'ns3::TcpSocket::TcpStates_t', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'],
<     ['void', 'ns3::Ptr<const ns3::Packet>', 'const ns3::TcpHeader &', 'ns3::Ptr<const ns3::TcpSocketBase>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'],
---
>     ['void', 'ns3::Ptr<ns3::Socket>', 'ns3::Address const&', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'],
>     ['bool', 'ns3::Ptr<ns3::Socket>', 'ns3::Address const&', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'],
>     ['void', 'ns3::Ptr<ns3::Packet>', 'ns3::Ipv6Address', 'ns3::Ipv6Address', 'unsigned char', 'ns3::Ptr<ns3::Ipv6Route>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'],
>     ['void', 'ns3::Ptr<ns3::Packet>', 'ns3::Ipv4Address', 'ns3::Ipv4Address', 'unsigned char', 'ns3::Ptr<ns3::Ipv4Route>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'],
>     ['bool', 'ns3::Ptr<ns3::NetDevice>', 'ns3::Ptr<ns3::Packet const>', 'unsigned short', 'ns3::Address const&', 'ns3::Address const&', 'ns3::NetDevice::PacketType', 'ns3::empty', 'ns3::empty', 'ns3::empty'],
>     ['bool', 'ns3::Ptr<ns3::NetDevice>', 'ns3::Ptr<ns3::Packet const>', 'unsigned short', 'ns3::Address const&', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'],
>     ['void', 'ns3::Ptr<ns3::NetDevice>', 'ns3::Ptr<ns3::Packet const>', 'unsigned short', 'ns3::Address const&', 'ns3::Address const&', 'ns3::NetDevice::PacketType', 'ns3::empty', 'ns3::empty', 'ns3::empty'],
>     ['void', 'ns3::Ptr<ns3::ArpCache const>', 'ns3::Ipv4Address', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'],
diff ../../NS3-WiGig/src/internet/bindings/modulegen__gcc_ILP32.py ../../ns-3-dev/src/internet/bindings/modulegen__gcc_ILP32.py
30c30
<     module.add_class('AsciiTraceHelperForDevice', import_from_module='ns.network', allow_subclassing=True)
---
>     module.add_class('AsciiTraceHelperForDevice', allow_subclassing=True, import_from_module='ns.network')
39,41d38
<     typehandlers.add_type_alias('std::list< ns3::AttributeConstructionList::Item > const_iterator', 'ns3::AttributeConstructionList::CIterator')
<     typehandlers.add_type_alias('std::list< ns3::AttributeConstructionList::Item > const_iterator*', 'ns3::AttributeConstructionList::CIterator*')
<     typehandlers.add_type_alias('std::list< ns3::AttributeConstructionList::Item > const_iterator&', 'ns3::AttributeConstructionList::CIterator&')
60,85d56
<     ## data-rate.h (module 'network'): ns3::DataRate [class]
<     module.add_class('DataRate', import_from_module='ns.network')
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::AttributeAccessor> [struct]
<     module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::AttributeAccessor'])
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::AttributeChecker> [struct]
<     module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::AttributeChecker'])
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::AttributeValue> [struct]
<     module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::AttributeValue'])
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::CallbackImplBase> [struct]
<     module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::CallbackImplBase'])
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::EventImpl> [struct]
<     module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::EventImpl'])
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::Hash::Implementation> [struct]
<     module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::Hash::Implementation'])
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::Ipv4Route> [struct]
<     module.add_class('DefaultDeleter', template_parameters=['ns3::Ipv4Route'])
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::Ipv6Route> [struct]
<     module.add_class('DefaultDeleter', template_parameters=['ns3::Ipv6Route'])
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::NixVector> [struct]
<     module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::NixVector'])
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::OutputStreamWrapper> [struct]
<     module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::OutputStreamWrapper'])
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::Packet> [struct]
<     module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::Packet'])
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::TraceSourceAccessor> [struct]
<     module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::TraceSourceAccessor'])
150,159d120
<     ## ipv4-end-point.h (module 'internet'): ns3::Ipv4EndPoint [class]
<     module.add_class('Ipv4EndPoint')
<     ## ipv4-end-point-demux.h (module 'internet'): ns3::Ipv4EndPointDemux [class]
<     module.add_class('Ipv4EndPointDemux')
<     typehandlers.add_type_alias('std::list< ns3::Ipv4EndPoint * >', 'ns3::Ipv4EndPointDemux::EndPoints')
<     typehandlers.add_type_alias('std::list< ns3::Ipv4EndPoint * >*', 'ns3::Ipv4EndPointDemux::EndPoints*')
<     typehandlers.add_type_alias('std::list< ns3::Ipv4EndPoint * >&', 'ns3::Ipv4EndPointDemux::EndPoints&')
<     typehandlers.add_type_alias('std::list< ns3::Ipv4EndPoint * > iterator', 'ns3::Ipv4EndPointDemux::EndPointsI')
<     typehandlers.add_type_alias('std::list< ns3::Ipv4EndPoint * > iterator*', 'ns3::Ipv4EndPointDemux::EndPointsI*')
<     typehandlers.add_type_alias('std::list< ns3::Ipv4EndPoint * > iterator&', 'ns3::Ipv4EndPointDemux::EndPointsI&')
166,168d126
<     typehandlers.add_type_alias('std::vector< std::pair< ns3::Ptr< ns3::Ipv4 >, unsigned int > > const_iterator', 'ns3::Ipv4InterfaceContainer::Iterator')
<     typehandlers.add_type_alias('std::vector< std::pair< ns3::Ptr< ns3::Ipv4 >, unsigned int > > const_iterator*', 'ns3::Ipv4InterfaceContainer::Iterator*')
<     typehandlers.add_type_alias('std::vector< std::pair< ns3::Ptr< ns3::Ipv4 >, unsigned int > > const_iterator&', 'ns3::Ipv4InterfaceContainer::Iterator&')
187,196d144
<     ## ipv6-end-point.h (module 'internet'): ns3::Ipv6EndPoint [class]
<     module.add_class('Ipv6EndPoint')
<     ## ipv6-end-point-demux.h (module 'internet'): ns3::Ipv6EndPointDemux [class]
<     module.add_class('Ipv6EndPointDemux')
<     typehandlers.add_type_alias('std::list< ns3::Ipv6EndPoint * >', 'ns3::Ipv6EndPointDemux::EndPoints')
<     typehandlers.add_type_alias('std::list< ns3::Ipv6EndPoint * >*', 'ns3::Ipv6EndPointDemux::EndPoints*')
<     typehandlers.add_type_alias('std::list< ns3::Ipv6EndPoint * >&', 'ns3::Ipv6EndPointDemux::EndPoints&')
<     typehandlers.add_type_alias('std::list< ns3::Ipv6EndPoint * > iterator', 'ns3::Ipv6EndPointDemux::EndPointsI')
<     typehandlers.add_type_alias('std::list< ns3::Ipv6EndPoint * > iterator*', 'ns3::Ipv6EndPointDemux::EndPointsI*')
<     typehandlers.add_type_alias('std::list< ns3::Ipv6EndPoint * > iterator&', 'ns3::Ipv6EndPointDemux::EndPointsI&')
205,207d152
<     typehandlers.add_type_alias('std::vector< std::pair< ns3::Ptr< ns3::Ipv6 >, unsigned int > > const_iterator', 'ns3::Ipv6InterfaceContainer::Iterator')
<     typehandlers.add_type_alias('std::vector< std::pair< ns3::Ptr< ns3::Ipv6 >, unsigned int > > const_iterator*', 'ns3::Ipv6InterfaceContainer::Iterator*')
<     typehandlers.add_type_alias('std::vector< std::pair< ns3::Ptr< ns3::Ipv6 >, unsigned int > > const_iterator&', 'ns3::Ipv6InterfaceContainer::Iterator&')
220,222d164
<     typehandlers.add_type_alias('void ( * ) ( ns3::Mac48Address )', 'ns3::Mac48Address::TracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Mac48Address )*', 'ns3::Mac48Address::TracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Mac48Address )&', 'ns3::Mac48Address::TracedCallback&')
225,228d166
<     ## mac8-address.h (module 'network'): ns3::Mac8Address [class]
<     module.add_class('Mac8Address', import_from_module='ns.network')
<     ## mac8-address.h (module 'network'): ns3::Mac8Address [class]
<     root_module['ns3::Mac8Address'].implicitly_converts_to(root_module['ns3::Address'])
231,233d168
<     typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::NetDevice > > const_iterator', 'ns3::NetDeviceContainer::Iterator')
<     typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::NetDevice > > const_iterator*', 'ns3::NetDeviceContainer::Iterator*')
<     typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::NetDevice > > const_iterator&', 'ns3::NetDeviceContainer::Iterator&')
236,238d170
<     typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::Node > > const_iterator', 'ns3::NodeContainer::Iterator')
<     typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::Node > > const_iterator*', 'ns3::NodeContainer::Iterator*')
<     typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::Node > > const_iterator&', 'ns3::NodeContainer::Iterator&')
240c172
<     module.add_class('ObjectBase', import_from_module='ns.core', allow_subclassing=True)
---
>     module.add_class('ObjectBase', allow_subclassing=True, import_from_module='ns.core')
251,252c183,184
<     ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item::ItemType [enumeration]
<     module.add_enum('ItemType', ['PAYLOAD', 'HEADER', 'TRAILER'], outer_class=root_module['ns3::PacketMetadata::Item'], import_from_module='ns.network')
---
>     ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item [enumeration]
>     module.add_enum('', ['PAYLOAD', 'HEADER', 'TRAILER'], outer_class=root_module['ns3::PacketMetadata::Item'], import_from_module='ns.network')
262a195,196
>     ## packet-tag-list.h (module 'network'): ns3::PacketTagList::TagData::TagData_e [enumeration]
>     module.add_enum('TagData_e', ['MAX_SIZE'], outer_class=root_module['ns3::PacketTagList::TagData'], import_from_module='ns.network')
270c204
<     module.add_class('PcapHelperForDevice', import_from_module='ns.network', allow_subclassing=True)
---
>     module.add_class('PcapHelperForDevice', allow_subclassing=True, import_from_module='ns.network')
293,295d226
<     typehandlers.add_type_alias('std::pair< ns3::Ipv4Address, int >', 'ns3::SPFVertex::NodeExit_t')
<     typehandlers.add_type_alias('std::pair< ns3::Ipv4Address, int >*', 'ns3::SPFVertex::NodeExit_t*')
<     typehandlers.add_type_alias('std::pair< ns3::Ipv4Address, int >&', 'ns3::SPFVertex::NodeExit_t&')
299c230
<     module.add_class('SimpleRefCount', import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), automatic_type_narrowing=True, parent=root_module['ns3::ObjectBase'], template_parameters=['ns3::Object', 'ns3::ObjectBase', 'ns3::ObjectDeleter'])
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::Object', 'ns3::ObjectBase', 'ns3::ObjectDeleter'], parent=root_module['ns3::ObjectBase'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
301c232
<     module.add_class('Simulator', import_from_module='ns.core', destructor_visibility='private')
---
>     module.add_class('Simulator', destructor_visibility='private', import_from_module='ns.core')
308,311d238
<     ## tcp-tx-item.h (module 'internet'): ns3::TcpTxItem [class]
<     module.add_class('TcpTxItem')
<     ## tcp-tx-item.h (module 'internet'): ns3::TcpTxItem::RateInformation [struct]
<     module.add_class('RateInformation', outer_class=root_module['ns3::TcpTxItem'])
321c248
<     module.add_class('TimerImpl', import_from_module='ns.core', allow_subclassing=True)
---
>     module.add_class('TimerImpl', allow_subclassing=True, import_from_module='ns.core')
329,331c256
<     module.add_class('TracedValue', import_from_module='ns.core', template_parameters=['ns3::TcpSocket::TcpStates_t'])
<     ## traced-value.h (module 'core'): ns3::TracedValue<ns3::TcpSocketState::EcnState_t> [class]
<     module.add_class('TracedValue', import_from_module='ns.core', template_parameters=['ns3::TcpSocketState::EcnState_t'])
---
>     module.add_class('TracedValue', template_parameters=['ns3::TcpSocket::TcpStates_t'])
333c258
<     module.add_class('TracedValue', import_from_module='ns.core', template_parameters=['ns3::TcpSocketState::TcpCongState_t'])
---
>     module.add_class('TracedValue', template_parameters=['ns3::TcpSocketState::TcpCongState_t'])
346,348d270
<     typehandlers.add_type_alias('uint32_t', 'ns3::TypeId::hash_t')
<     typehandlers.add_type_alias('uint32_t*', 'ns3::TypeId::hash_t*')
<     typehandlers.add_type_alias('uint32_t&', 'ns3::TypeId::hash_t&')
351c273
<     ## int64x64-128.h (module 'core'): ns3::int64x64_t [class]
---
>     ## int64x64-double.h (module 'core'): ns3::int64x64_t [class]
353c275
<     ## int64x64-128.h (module 'core'): ns3::int64x64_t::impl_type [enumeration]
---
>     ## int64x64-double.h (module 'core'): ns3::int64x64_t::impl_type [enumeration]
361,362c283,284
<     ## icmpv4.h (module 'internet'): ns3::Icmpv4DestinationUnreachable::ErrorDestinationUnreachable_e [enumeration]
<     module.add_enum('ErrorDestinationUnreachable_e', ['ICMPV4_NET_UNREACHABLE', 'ICMPV4_HOST_UNREACHABLE', 'ICMPV4_PROTOCOL_UNREACHABLE', 'ICMPV4_PORT_UNREACHABLE', 'ICMPV4_FRAG_NEEDED', 'ICMPV4_SOURCE_ROUTE_FAILED'], outer_class=root_module['ns3::Icmpv4DestinationUnreachable'])
---
>     ## icmpv4.h (module 'internet'): ns3::Icmpv4DestinationUnreachable [enumeration]
>     module.add_enum('', ['NET_UNREACHABLE', 'HOST_UNREACHABLE', 'PROTOCOL_UNREACHABLE', 'PORT_UNREACHABLE', 'FRAG_NEEDED', 'SOURCE_ROUTE_FAILED'], outer_class=root_module['ns3::Icmpv4DestinationUnreachable'])
367,368c289,290
<     ## icmpv4.h (module 'internet'): ns3::Icmpv4Header::Type_e [enumeration]
<     module.add_enum('Type_e', ['ICMPV4_ECHO_REPLY', 'ICMPV4_DEST_UNREACH', 'ICMPV4_ECHO', 'ICMPV4_TIME_EXCEEDED'], outer_class=root_module['ns3::Icmpv4Header'])
---
>     ## icmpv4.h (module 'internet'): ns3::Icmpv4Header [enumeration]
>     module.add_enum('', ['ECHO_REPLY', 'DEST_UNREACH', 'ECHO', 'TIME_EXCEEDED'], outer_class=root_module['ns3::Icmpv4Header'])
371,372c293,294
<     ## icmpv4.h (module 'internet'): ns3::Icmpv4TimeExceeded::ErrorTimeExceeded_e [enumeration]
<     module.add_enum('ErrorTimeExceeded_e', ['ICMPV4_TIME_TO_LIVE', 'ICMPV4_FRAGMENT_REASSEMBLY'], outer_class=root_module['ns3::Icmpv4TimeExceeded'])
---
>     ## icmpv4.h (module 'internet'): ns3::Icmpv4TimeExceeded [enumeration]
>     module.add_enum('', ['TIME_TO_LIVE', 'FRAGMENT_REASSEMBLY'], outer_class=root_module['ns3::Icmpv4TimeExceeded'])
437,438d358
<     ## ipv6-header.h (module 'internet'): ns3::Ipv6Header::EcnType [enumeration]
<     module.add_enum('EcnType', ['ECN_NotECT', 'ECN_ECT1', 'ECN_ECT0', 'ECN_CE'], outer_class=root_module['ns3::Ipv6Header'])
462a383,392
>     ## queue.h (module 'network'): ns3::Queue [class]
>     module.add_class('Queue', import_from_module='ns.network', parent=root_module['ns3::Object'])
>     ## queue.h (module 'network'): ns3::Queue::QueueMode [enumeration]
>     module.add_enum('QueueMode', ['QUEUE_MODE_PACKETS', 'QUEUE_MODE_BYTES'], outer_class=root_module['ns3::Queue'], import_from_module='ns.network')
>     ## queue-disc.h (module 'traffic-control'): ns3::QueueDisc [class]
>     module.add_class('QueueDisc', import_from_module='ns.traffic_control', parent=root_module['ns3::Object'])
>     ## queue-disc.h (module 'traffic-control'): ns3::QueueDisc::WakeMode [enumeration]
>     module.add_enum('WakeMode', ['WAKE_ROOT', 'WAKE_CHILD'], outer_class=root_module['ns3::QueueDisc'], import_from_module='ns.traffic-control')
>     ## queue-disc.h (module 'traffic-control'): ns3::QueueDiscClass [class]
>     module.add_class('QueueDiscClass', import_from_module='ns.traffic_control', parent=root_module['ns3::Object'])
484c414
<     module.add_class('SimpleRefCount', import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), automatic_type_narrowing=True, parent=root_module['ns3::empty'], template_parameters=['ns3::AttributeAccessor', 'ns3::empty', 'ns3::DefaultDeleter<ns3::AttributeAccessor>'])
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::AttributeAccessor', 'ns3::empty', 'ns3::DefaultDeleter<ns3::AttributeAccessor>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
486c416
<     module.add_class('SimpleRefCount', import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), automatic_type_narrowing=True, parent=root_module['ns3::empty'], template_parameters=['ns3::AttributeChecker', 'ns3::empty', 'ns3::DefaultDeleter<ns3::AttributeChecker>'])
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::AttributeChecker', 'ns3::empty', 'ns3::DefaultDeleter<ns3::AttributeChecker>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
488c418
<     module.add_class('SimpleRefCount', import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), automatic_type_narrowing=True, parent=root_module['ns3::empty'], template_parameters=['ns3::AttributeValue', 'ns3::empty', 'ns3::DefaultDeleter<ns3::AttributeValue>'])
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::AttributeValue', 'ns3::empty', 'ns3::DefaultDeleter<ns3::AttributeValue>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
490c420
<     module.add_class('SimpleRefCount', import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), automatic_type_narrowing=True, parent=root_module['ns3::empty'], template_parameters=['ns3::CallbackImplBase', 'ns3::empty', 'ns3::DefaultDeleter<ns3::CallbackImplBase>'])
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::CallbackImplBase', 'ns3::empty', 'ns3::DefaultDeleter<ns3::CallbackImplBase>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
492c422
<     module.add_class('SimpleRefCount', import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), automatic_type_narrowing=True, parent=root_module['ns3::empty'], template_parameters=['ns3::EventImpl', 'ns3::empty', 'ns3::DefaultDeleter<ns3::EventImpl>'])
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::EventImpl', 'ns3::empty', 'ns3::DefaultDeleter<ns3::EventImpl>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
494c424
<     module.add_class('SimpleRefCount', import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), automatic_type_narrowing=True, parent=root_module['ns3::empty'], template_parameters=['ns3::Hash::Implementation', 'ns3::empty', 'ns3::DefaultDeleter<ns3::Hash::Implementation>'])
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::Hash::Implementation', 'ns3::empty', 'ns3::DefaultDeleter<ns3::Hash::Implementation>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
496c426
<     module.add_class('SimpleRefCount', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), automatic_type_narrowing=True, parent=root_module['ns3::empty'], template_parameters=['ns3::Ipv4MulticastRoute', 'ns3::empty', 'ns3::DefaultDeleter<ns3::Ipv4MulticastRoute>'])
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, template_parameters=['ns3::Ipv4MulticastRoute', 'ns3::empty', 'ns3::DefaultDeleter<ns3::Ipv4MulticastRoute>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
498c428
<     module.add_class('SimpleRefCount', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), automatic_type_narrowing=True, parent=root_module['ns3::empty'], template_parameters=['ns3::Ipv4Route', 'ns3::empty', 'ns3::DefaultDeleter<ns3::Ipv4Route>'])
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, template_parameters=['ns3::Ipv4Route', 'ns3::empty', 'ns3::DefaultDeleter<ns3::Ipv4Route>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
500c430
<     module.add_class('SimpleRefCount', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), automatic_type_narrowing=True, parent=root_module['ns3::empty'], template_parameters=['ns3::Ipv6MulticastRoute', 'ns3::empty', 'ns3::DefaultDeleter<ns3::Ipv6MulticastRoute>'])
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, template_parameters=['ns3::Ipv6MulticastRoute', 'ns3::empty', 'ns3::DefaultDeleter<ns3::Ipv6MulticastRoute>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
502c432,434
<     module.add_class('SimpleRefCount', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), automatic_type_narrowing=True, parent=root_module['ns3::empty'], template_parameters=['ns3::Ipv6Route', 'ns3::empty', 'ns3::DefaultDeleter<ns3::Ipv6Route>'])
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, template_parameters=['ns3::Ipv6Route', 'ns3::empty', 'ns3::DefaultDeleter<ns3::Ipv6Route>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
>     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::NetDeviceQueue, ns3::empty, ns3::DefaultDeleter<ns3::NetDeviceQueue> > [class]
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::NetDeviceQueue', 'ns3::empty', 'ns3::DefaultDeleter<ns3::NetDeviceQueue>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
504c436
<     module.add_class('SimpleRefCount', import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), automatic_type_narrowing=True, parent=root_module['ns3::empty'], template_parameters=['ns3::NixVector', 'ns3::empty', 'ns3::DefaultDeleter<ns3::NixVector>'])
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::NixVector', 'ns3::empty', 'ns3::DefaultDeleter<ns3::NixVector>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
506c438
<     module.add_class('SimpleRefCount', import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), automatic_type_narrowing=True, parent=root_module['ns3::empty'], template_parameters=['ns3::OutputStreamWrapper', 'ns3::empty', 'ns3::DefaultDeleter<ns3::OutputStreamWrapper>'])
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::OutputStreamWrapper', 'ns3::empty', 'ns3::DefaultDeleter<ns3::OutputStreamWrapper>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
508c440
<     module.add_class('SimpleRefCount', import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), automatic_type_narrowing=True, parent=root_module['ns3::empty'], template_parameters=['ns3::Packet', 'ns3::empty', 'ns3::DefaultDeleter<ns3::Packet>'])
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::Packet', 'ns3::empty', 'ns3::DefaultDeleter<ns3::Packet>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
510c442
<     module.add_class('SimpleRefCount', import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), automatic_type_narrowing=True, parent=root_module['ns3::empty'], template_parameters=['ns3::QueueItem', 'ns3::empty', 'ns3::DefaultDeleter<ns3::QueueItem>'])
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::QueueItem', 'ns3::empty', 'ns3::DefaultDeleter<ns3::QueueItem>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
512c444
<     module.add_class('SimpleRefCount', import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), automatic_type_narrowing=True, parent=root_module['ns3::empty'], template_parameters=['ns3::TraceSourceAccessor', 'ns3::empty', 'ns3::DefaultDeleter<ns3::TraceSourceAccessor>'])
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::TraceSourceAccessor', 'ns3::empty', 'ns3::DefaultDeleter<ns3::TraceSourceAccessor>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
543,548d474
<     typehandlers.add_type_alias('std::list< ns3::Ptr< ns3::TcpOption const > >', 'ns3::TcpHeader::TcpOptionList')
<     typehandlers.add_type_alias('std::list< ns3::Ptr< ns3::TcpOption const > >*', 'ns3::TcpHeader::TcpOptionList*')
<     typehandlers.add_type_alias('std::list< ns3::Ptr< ns3::TcpOption const > >&', 'ns3::TcpHeader::TcpOptionList&')
<     typehandlers.add_type_alias('ns3::TcpHeader::Flags_t', 'ns3::TcpHeader::Flags_t')
<     typehandlers.add_type_alias('ns3::TcpHeader::Flags_t*', 'ns3::TcpHeader::Flags_t*')
<     typehandlers.add_type_alias('ns3::TcpHeader::Flags_t&', 'ns3::TcpHeader::Flags_t&')
554,572c480
<     module.add_enum('Kind', ['END', 'NOP', 'MSS', 'WINSCALE', 'SACKPERMITTED', 'SACK', 'TS', 'UNKNOWN'], outer_class=root_module['ns3::TcpOption'])
<     ## tcp-option-rfc793.h (module 'internet'): ns3::TcpOptionEnd [class]
<     module.add_class('TcpOptionEnd', parent=root_module['ns3::TcpOption'])
<     ## tcp-option-rfc793.h (module 'internet'): ns3::TcpOptionMSS [class]
<     module.add_class('TcpOptionMSS', parent=root_module['ns3::TcpOption'])
<     ## tcp-option-rfc793.h (module 'internet'): ns3::TcpOptionNOP [class]
<     module.add_class('TcpOptionNOP', parent=root_module['ns3::TcpOption'])
<     ## tcp-option-sack.h (module 'internet'): ns3::TcpOptionSack [class]
<     module.add_class('TcpOptionSack', parent=root_module['ns3::TcpOption'])
<     typehandlers.add_type_alias('std::pair< ns3::SequenceNumber< unsigned int, int >, ns3::SequenceNumber< unsigned int, int > >', 'ns3::TcpOptionSack::SackBlock')
<     typehandlers.add_type_alias('std::pair< ns3::SequenceNumber< unsigned int, int >, ns3::SequenceNumber< unsigned int, int > >*', 'ns3::TcpOptionSack::SackBlock*')
<     typehandlers.add_type_alias('std::pair< ns3::SequenceNumber< unsigned int, int >, ns3::SequenceNumber< unsigned int, int > >&', 'ns3::TcpOptionSack::SackBlock&')
<     typehandlers.add_type_alias('std::list< std::pair< ns3::SequenceNumber< unsigned int, int >, ns3::SequenceNumber< unsigned int, int > > >', 'ns3::TcpOptionSack::SackList')
<     typehandlers.add_type_alias('std::list< std::pair< ns3::SequenceNumber< unsigned int, int >, ns3::SequenceNumber< unsigned int, int > > >*', 'ns3::TcpOptionSack::SackList*')
<     typehandlers.add_type_alias('std::list< std::pair< ns3::SequenceNumber< unsigned int, int >, ns3::SequenceNumber< unsigned int, int > > >&', 'ns3::TcpOptionSack::SackList&')
<     ## tcp-option-sack-permitted.h (module 'internet'): ns3::TcpOptionSackPermitted [class]
<     module.add_class('TcpOptionSackPermitted', parent=root_module['ns3::TcpOption'])
<     ## tcp-option-ts.h (module 'internet'): ns3::TcpOptionTS [class]
<     module.add_class('TcpOptionTS', parent=root_module['ns3::TcpOption'])
---
>     module.add_enum('Kind', ['END', 'NOP', 'MSS', 'WINSCALE', 'TS', 'UNKNOWN'], outer_class=root_module['ns3::TcpOption'])
575,584d482
<     ## tcp-option-winscale.h (module 'internet'): ns3::TcpOptionWinScale [class]
<     module.add_class('TcpOptionWinScale', parent=root_module['ns3::TcpOption'])
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps [class]
<     module.add_class('TcpRateOps', parent=root_module['ns3::Object'])
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateConnection [struct]
<     module.add_class('TcpRateConnection', outer_class=root_module['ns3::TcpRateOps'])
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateSample [struct]
<     module.add_class('TcpRateSample', outer_class=root_module['ns3::TcpRateOps'])
<     ## tcp-recovery-ops.h (module 'internet'): ns3::TcpRecoveryOps [class]
<     module.add_class('TcpRecoveryOps', parent=root_module['ns3::Object'])
593,595d490
<     typehandlers.add_type_alias('ns3::TcpSocket::TcpStates_t', 'ns3::TcpSocket::TcpStates_t')
<     typehandlers.add_type_alias('ns3::TcpSocket::TcpStates_t*', 'ns3::TcpSocket::TcpStates_t*')
<     typehandlers.add_type_alias('ns3::TcpSocket::TcpStates_t&', 'ns3::TcpSocket::TcpStates_t&')
598,600d492
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const > const, ns3::TcpHeader const &, ns3::Ptr< ns3::TcpSocketBase const > const )', 'ns3::TcpSocketBase::TcpTxRxTracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const > const, ns3::TcpHeader const &, ns3::Ptr< ns3::TcpSocketBase const > const )*', 'ns3::TcpSocketBase::TcpTxRxTracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const > const, ns3::TcpHeader const &, ns3::Ptr< ns3::TcpSocketBase const > const )&', 'ns3::TcpSocketBase::TcpTxRxTracedCallback&')
603c495
<     ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState [class]
---
>     ## tcp-socket-base.h (module 'internet'): ns3::TcpSocketState [class]
605c497
<     ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::TcpCongState_t [enumeration]
---
>     ## tcp-socket-base.h (module 'internet'): ns3::TcpSocketState::TcpCongState_t [enumeration]
607,634d498
<     ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::TcpCAEvent_t [enumeration]
<     module.add_enum('TcpCAEvent_t', ['CA_EVENT_TX_START', 'CA_EVENT_CWND_RESTART', 'CA_EVENT_COMPLETE_CWR', 'CA_EVENT_LOSS', 'CA_EVENT_ECN_NO_CE', 'CA_EVENT_ECN_IS_CE', 'CA_EVENT_DELAYED_ACK', 'CA_EVENT_NON_DELAYED_ACK'], outer_class=root_module['ns3::TcpSocketState'])
<     ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::UseEcn_t [enumeration]
<     module.add_enum('UseEcn_t', ['Off', 'On', 'AcceptOnly'], outer_class=root_module['ns3::TcpSocketState'])
<     ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::EcnCodePoint_t [enumeration]
<     module.add_enum('EcnCodePoint_t', ['NotECT', 'Ect1', 'Ect0', 'CongExp'], outer_class=root_module['ns3::TcpSocketState'])
<     ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::EcnMode_t [enumeration]
<     module.add_enum('EcnMode_t', ['ClassicEcn', 'DctcpEcn'], outer_class=root_module['ns3::TcpSocketState'])
<     ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::EcnState_t [enumeration]
<     module.add_enum('EcnState_t', ['ECN_DISABLED', 'ECN_IDLE', 'ECN_CE_RCVD', 'ECN_SENDING_ECE', 'ECN_ECE_RCVD', 'ECN_CWR_SENT'], outer_class=root_module['ns3::TcpSocketState'])
<     typehandlers.add_type_alias('ns3::TcpSocketState::TcpCongState_t', 'ns3::TcpSocketState::TcpCongState_t')
<     typehandlers.add_type_alias('ns3::TcpSocketState::TcpCongState_t*', 'ns3::TcpSocketState::TcpCongState_t*')
<     typehandlers.add_type_alias('ns3::TcpSocketState::TcpCongState_t&', 'ns3::TcpSocketState::TcpCongState_t&')
<     typehandlers.add_type_alias('ns3::TcpSocketState::TcpCAEvent_t', 'ns3::TcpSocketState::TcpCAEvent_t')
<     typehandlers.add_type_alias('ns3::TcpSocketState::TcpCAEvent_t*', 'ns3::TcpSocketState::TcpCAEvent_t*')
<     typehandlers.add_type_alias('ns3::TcpSocketState::TcpCAEvent_t&', 'ns3::TcpSocketState::TcpCAEvent_t&')
<     typehandlers.add_type_alias('ns3::TcpSocketState::UseEcn_t', 'ns3::TcpSocketState::UseEcn_t')
<     typehandlers.add_type_alias('ns3::TcpSocketState::UseEcn_t*', 'ns3::TcpSocketState::UseEcn_t*')
<     typehandlers.add_type_alias('ns3::TcpSocketState::UseEcn_t&', 'ns3::TcpSocketState::UseEcn_t&')
<     typehandlers.add_type_alias('ns3::TcpSocketState::EcnCodePoint_t', 'ns3::TcpSocketState::EcnCodePoint_t')
<     typehandlers.add_type_alias('ns3::TcpSocketState::EcnCodePoint_t*', 'ns3::TcpSocketState::EcnCodePoint_t*')
<     typehandlers.add_type_alias('ns3::TcpSocketState::EcnCodePoint_t&', 'ns3::TcpSocketState::EcnCodePoint_t&')
<     typehandlers.add_type_alias('ns3::TcpSocketState::EcnMode_t', 'ns3::TcpSocketState::EcnMode_t')
<     typehandlers.add_type_alias('ns3::TcpSocketState::EcnMode_t*', 'ns3::TcpSocketState::EcnMode_t*')
<     typehandlers.add_type_alias('ns3::TcpSocketState::EcnMode_t&', 'ns3::TcpSocketState::EcnMode_t&')
<     typehandlers.add_type_alias('ns3::TcpSocketState::EcnState_t', 'ns3::TcpSocketState::EcnState_t')
<     typehandlers.add_type_alias('ns3::TcpSocketState::EcnState_t*', 'ns3::TcpSocketState::EcnState_t*')
<     typehandlers.add_type_alias('ns3::TcpSocketState::EcnState_t&', 'ns3::TcpSocketState::EcnState_t&')
653,655d516
<     typehandlers.add_type_alias('void ( * ) ( ns3::Time )', 'ns3::Time::TracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Time )*', 'ns3::Time::TracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Time )&', 'ns3::Time::TracedCallback&')
663a525,526
>     ## traffic-control-layer.h (module 'traffic-control'): ns3::TrafficControlLayer [class]
>     module.add_class('TrafficControlLayer', import_from_module='ns.traffic_control', parent=root_module['ns3::Object'])
686,688d548
<     typehandlers.add_type_alias('std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv4Header >', 'ns3::ArpCache::Ipv4PayloadHeaderPair')
<     typehandlers.add_type_alias('std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv4Header >*', 'ns3::ArpCache::Ipv4PayloadHeaderPair*')
<     typehandlers.add_type_alias('std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv4Header >&', 'ns3::ArpCache::Ipv4PayloadHeaderPair&')
698c558
<     module.add_class('AttributeChecker', import_from_module='ns.core', automatic_type_narrowing=True, allow_subclassing=False, parent=root_module['ns3::SimpleRefCount< ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker> >'])
---
>     module.add_class('AttributeChecker', allow_subclassing=False, automatic_type_narrowing=True, import_from_module='ns.core', parent=root_module['ns3::SimpleRefCount< ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker> >'])
700c560
<     module.add_class('AttributeValue', import_from_module='ns.core', automatic_type_narrowing=True, allow_subclassing=False, parent=root_module['ns3::SimpleRefCount< ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue> >'])
---
>     module.add_class('AttributeValue', allow_subclassing=False, automatic_type_narrowing=True, import_from_module='ns.core', parent=root_module['ns3::SimpleRefCount< ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue> >'])
717,720d576
<     ## data-rate.h (module 'network'): ns3::DataRateChecker [class]
<     module.add_class('DataRateChecker', import_from_module='ns.network', parent=root_module['ns3::AttributeChecker'])
<     ## data-rate.h (module 'network'): ns3::DataRateValue [class]
<     module.add_class('DataRateValue', import_from_module='ns.network', parent=root_module['ns3::AttributeValue'])
757,762d612
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Ipv4Address, ns3::Ipv4Address, unsigned char, ns3::Ptr< ns3::Ipv4Route >, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::IpL4Protocol::DownTargetCallback')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Ipv4Address, ns3::Ipv4Address, unsigned char, ns3::Ptr< ns3::Ipv4Route >, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::IpL4Protocol::DownTargetCallback*')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Ipv4Address, ns3::Ipv4Address, unsigned char, ns3::Ptr< ns3::Ipv4Route >, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::IpL4Protocol::DownTargetCallback&')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Ipv6Address, ns3::Ipv6Address, unsigned char, ns3::Ptr< ns3::Ipv6Route >, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::IpL4Protocol::DownTargetCallback6')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Ipv6Address, ns3::Ipv6Address, unsigned char, ns3::Ptr< ns3::Ipv6Route >, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::IpL4Protocol::DownTargetCallback6*')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Ipv6Address, ns3::Ipv6Address, unsigned char, ns3::Ptr< ns3::Ipv6Route >, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::IpL4Protocol::DownTargetCallback6&')
774,783c624
<     module.add_enum('DropReason', ['DROP_TTL_EXPIRED', 'DROP_NO_ROUTE', 'DROP_BAD_CHECKSUM', 'DROP_INTERFACE_DOWN', 'DROP_ROUTE_ERROR', 'DROP_FRAGMENT_TIMEOUT', 'DROP_DUPLICATE'], outer_class=root_module['ns3::Ipv4L3Protocol'])
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ipv4Header const &, ns3::Ptr< ns3::Packet const >, uint32_t )', 'ns3::Ipv4L3Protocol::SentTracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ipv4Header const &, ns3::Ptr< ns3::Packet const >, uint32_t )*', 'ns3::Ipv4L3Protocol::SentTracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ipv4Header const &, ns3::Ptr< ns3::Packet const >, uint32_t )&', 'ns3::Ipv4L3Protocol::SentTracedCallback&')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Ptr< ns3::Ipv4 >, uint32_t )', 'ns3::Ipv4L3Protocol::TxRxTracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Ptr< ns3::Ipv4 >, uint32_t )*', 'ns3::Ipv4L3Protocol::TxRxTracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Ptr< ns3::Ipv4 >, uint32_t )&', 'ns3::Ipv4L3Protocol::TxRxTracedCallback&')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ipv4Header const &, ns3::Ptr< ns3::Packet const >, ns3::Ipv4L3Protocol::DropReason, ns3::Ptr< ns3::Ipv4 >, uint32_t )', 'ns3::Ipv4L3Protocol::DropTracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ipv4Header const &, ns3::Ptr< ns3::Packet const >, ns3::Ipv4L3Protocol::DropReason, ns3::Ptr< ns3::Ipv4 >, uint32_t )*', 'ns3::Ipv4L3Protocol::DropTracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ipv4Header const &, ns3::Ptr< ns3::Packet const >, ns3::Ipv4L3Protocol::DropReason, ns3::Ptr< ns3::Ipv4 >, uint32_t )&', 'ns3::Ipv4L3Protocol::DropTracedCallback&')
---
>     module.add_enum('DropReason', ['DROP_TTL_EXPIRED', 'DROP_NO_ROUTE', 'DROP_BAD_CHECKSUM', 'DROP_INTERFACE_DOWN', 'DROP_ROUTE_ERROR', 'DROP_FRAGMENT_TIMEOUT'], outer_class=root_module['ns3::Ipv4L3Protocol'])
800,811d640
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Ipv4Route >, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::Ipv4RoutingProtocol::UnicastForwardCallback')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Ipv4Route >, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::Ipv4RoutingProtocol::UnicastForwardCallback*')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Ipv4Route >, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::Ipv4RoutingProtocol::UnicastForwardCallback&')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Ipv4MulticastRoute >, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::Ipv4RoutingProtocol::MulticastForwardCallback')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Ipv4MulticastRoute >, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::Ipv4RoutingProtocol::MulticastForwardCallback*')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Ipv4MulticastRoute >, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::Ipv4RoutingProtocol::MulticastForwardCallback&')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::Ipv4RoutingProtocol::LocalDeliverCallback')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::Ipv4RoutingProtocol::LocalDeliverCallback*')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::Ipv4RoutingProtocol::LocalDeliverCallback&')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::Socket::SocketErrno, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::Ipv4RoutingProtocol::ErrorCallback')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::Socket::SocketErrno, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::Ipv4RoutingProtocol::ErrorCallback*')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::Socket::SocketErrno, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::Ipv4RoutingProtocol::ErrorCallback&')
838,840d666
<     typehandlers.add_type_alias('std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv6Header >', 'ns3::Ipv6ExtensionFragment::Ipv6PayloadHeaderPair')
<     typehandlers.add_type_alias('std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv6Header >*', 'ns3::Ipv6ExtensionFragment::Ipv6PayloadHeaderPair*')
<     typehandlers.add_type_alias('std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv6Header >&', 'ns3::Ipv6ExtensionFragment::Ipv6PayloadHeaderPair&')
857,865d682
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ipv6Header const &, ns3::Ptr< ns3::Packet const >, uint32_t )', 'ns3::Ipv6L3Protocol::SentTracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ipv6Header const &, ns3::Ptr< ns3::Packet const >, uint32_t )*', 'ns3::Ipv6L3Protocol::SentTracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ipv6Header const &, ns3::Ptr< ns3::Packet const >, uint32_t )&', 'ns3::Ipv6L3Protocol::SentTracedCallback&')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Ptr< ns3::Ipv6 >, uint32_t )', 'ns3::Ipv6L3Protocol::TxRxTracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Ptr< ns3::Ipv6 >, uint32_t )*', 'ns3::Ipv6L3Protocol::TxRxTracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Ptr< ns3::Ipv6 >, uint32_t )&', 'ns3::Ipv6L3Protocol::TxRxTracedCallback&')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ipv6Header const &, ns3::Ptr< ns3::Packet const >, ns3::Ipv6L3Protocol::DropReason, ns3::Ptr< ns3::Ipv6 >, uint32_t )', 'ns3::Ipv6L3Protocol::DropTracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ipv6Header const &, ns3::Ptr< ns3::Packet const >, ns3::Ipv6L3Protocol::DropReason, ns3::Ptr< ns3::Ipv6 >, uint32_t )*', 'ns3::Ipv6L3Protocol::DropTracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ipv6Header const &, ns3::Ptr< ns3::Packet const >, ns3::Ipv6L3Protocol::DropReason, ns3::Ptr< ns3::Ipv6 >, uint32_t )&', 'ns3::Ipv6L3Protocol::DropTracedCallback&')
868,877d684
<     ## ipv6-option.h (module 'internet'): ns3::Ipv6Option [class]
<     module.add_class('Ipv6Option', parent=root_module['ns3::Object'])
<     ## ipv6-option.h (module 'internet'): ns3::Ipv6OptionJumbogram [class]
<     module.add_class('Ipv6OptionJumbogram', parent=root_module['ns3::Ipv6Option'])
<     ## ipv6-option.h (module 'internet'): ns3::Ipv6OptionPad1 [class]
<     module.add_class('Ipv6OptionPad1', parent=root_module['ns3::Ipv6Option'])
<     ## ipv6-option.h (module 'internet'): ns3::Ipv6OptionPadn [class]
<     module.add_class('Ipv6OptionPadn', parent=root_module['ns3::Ipv6Option'])
<     ## ipv6-option.h (module 'internet'): ns3::Ipv6OptionRouterAlert [class]
<     module.add_class('Ipv6OptionRouterAlert', parent=root_module['ns3::Ipv6Option'])
892,903d698
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice const >, ns3::Ptr< ns3::Ipv6Route >, ns3::Ptr< ns3::Packet const >, ns3::Ipv6Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::Ipv6RoutingProtocol::UnicastForwardCallback')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice const >, ns3::Ptr< ns3::Ipv6Route >, ns3::Ptr< ns3::Packet const >, ns3::Ipv6Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::Ipv6RoutingProtocol::UnicastForwardCallback*')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice const >, ns3::Ptr< ns3::Ipv6Route >, ns3::Ptr< ns3::Packet const >, ns3::Ipv6Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::Ipv6RoutingProtocol::UnicastForwardCallback&')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice const >, ns3::Ptr< ns3::Ipv6MulticastRoute >, ns3::Ptr< ns3::Packet const >, ns3::Ipv6Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::Ipv6RoutingProtocol::MulticastForwardCallback')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice const >, ns3::Ptr< ns3::Ipv6MulticastRoute >, ns3::Ptr< ns3::Packet const >, ns3::Ipv6Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::Ipv6RoutingProtocol::MulticastForwardCallback*')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice const >, ns3::Ptr< ns3::Ipv6MulticastRoute >, ns3::Ptr< ns3::Packet const >, ns3::Ipv6Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::Ipv6RoutingProtocol::MulticastForwardCallback&')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv6Header const &, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::Ipv6RoutingProtocol::LocalDeliverCallback')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv6Header const &, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::Ipv6RoutingProtocol::LocalDeliverCallback*')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv6Header const &, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::Ipv6RoutingProtocol::LocalDeliverCallback&')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv6Header const &, ns3::Socket::SocketErrno, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::Ipv6RoutingProtocol::ErrorCallback')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv6Header const &, ns3::Socket::SocketErrno, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::Ipv6RoutingProtocol::ErrorCallback*')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv6Header const &, ns3::Socket::SocketErrno, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::Ipv6RoutingProtocol::ErrorCallback&')
916,918d710
<     typehandlers.add_type_alias('std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv6Header >', 'ns3::NdiscCache::Ipv6PayloadHeaderPair')
<     typehandlers.add_type_alias('std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv6Header >*', 'ns3::NdiscCache::Ipv6PayloadHeaderPair*')
<     typehandlers.add_type_alias('std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv6Header >&', 'ns3::NdiscCache::Ipv6PayloadHeaderPair&')
923,931c715,718
<     typehandlers.add_type_alias('void ( * ) (  )', 'ns3::NetDevice::LinkChangeTracedCallback')
<     typehandlers.add_type_alias('void ( * ) (  )*', 'ns3::NetDevice::LinkChangeTracedCallback*')
<     typehandlers.add_type_alias('void ( * ) (  )&', 'ns3::NetDevice::LinkChangeTracedCallback&')
<     typehandlers.add_type_alias('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::NetDevice::ReceiveCallback')
<     typehandlers.add_type_alias('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::NetDevice::ReceiveCallback*')
<     typehandlers.add_type_alias('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::NetDevice::ReceiveCallback&')
<     typehandlers.add_type_alias('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >', 'ns3::NetDevice::PromiscReceiveCallback')
<     typehandlers.add_type_alias('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::NetDevice::PromiscReceiveCallback*')
<     typehandlers.add_type_alias('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::NetDevice::PromiscReceiveCallback&')
---
>     ## net-device.h (module 'network'): ns3::NetDeviceQueue [class]
>     module.add_class('NetDeviceQueue', import_from_module='ns.network', parent=root_module['ns3::SimpleRefCount< ns3::NetDeviceQueue, ns3::empty, ns3::DefaultDeleter<ns3::NetDeviceQueue> >'])
>     ## net-device.h (module 'network'): ns3::NetDeviceQueueInterface [class]
>     module.add_class('NetDeviceQueueInterface', import_from_module='ns.network', parent=root_module['ns3::Object'])
936,941d722
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >', 'ns3::Node::ProtocolHandler')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::Node::ProtocolHandler*')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::Node::ProtocolHandler&')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::Node::DeviceAdditionListener')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::Node::DeviceAdditionListener*')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::Node::DeviceAdditionListener&')
952,969d732
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const > )', 'ns3::Packet::TracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const > )*', 'ns3::Packet::TracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const > )&', 'ns3::Packet::TracedCallback&')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Address const & )', 'ns3::Packet::AddressTracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Address const & )*', 'ns3::Packet::AddressTracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Address const & )&', 'ns3::Packet::AddressTracedCallback&')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const > const, ns3::Address const &, ns3::Address const & )', 'ns3::Packet::TwoAddressTracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const > const, ns3::Address const &, ns3::Address const & )*', 'ns3::Packet::TwoAddressTracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const > const, ns3::Address const &, ns3::Address const & )&', 'ns3::Packet::TwoAddressTracedCallback&')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Mac48Address )', 'ns3::Packet::Mac48AddressTracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Mac48Address )*', 'ns3::Packet::Mac48AddressTracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Mac48Address )&', 'ns3::Packet::Mac48AddressTracedCallback&')
<     typehandlers.add_type_alias('void ( * ) ( uint32_t, uint32_t )', 'ns3::Packet::SizeTracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( uint32_t, uint32_t )*', 'ns3::Packet::SizeTracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( uint32_t, uint32_t )&', 'ns3::Packet::SizeTracedCallback&')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, double )', 'ns3::Packet::SinrTracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, double )*', 'ns3::Packet::SinrTracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, double )&', 'ns3::Packet::SinrTracedCallback&')
974c737
<     ## queue-item.h (module 'network'): ns3::QueueItem [class]
---
>     ## net-device.h (module 'network'): ns3::QueueItem [class]
976c739
<     ## queue-item.h (module 'network'): ns3::QueueItem::Uint8Values [enumeration]
---
>     ## net-device.h (module 'network'): ns3::QueueItem::Uint8Values [enumeration]
978,980d740
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::QueueItem const > )', 'ns3::QueueItem::TracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::QueueItem const > )*', 'ns3::QueueItem::TracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::QueueItem const > )&', 'ns3::QueueItem::TracedCallback&')
991,994d750
<     ## tcp-recovery-ops.h (module 'internet'): ns3::TcpClassicRecovery [class]
<     module.add_class('TcpClassicRecovery', parent=root_module['ns3::TcpRecoveryOps'])
<     ## tcp-dctcp.h (module 'internet'): ns3::TcpDctcp [class]
<     module.add_class('TcpDctcp', parent=root_module['ns3::TcpNewReno'])
1005,1023d760
<     ## tcp-ledbat.h (module 'internet'): ns3::TcpLedbat [class]
<     module.add_class('TcpLedbat', parent=root_module['ns3::TcpNewReno'])
<     ## tcp-lp.h (module 'internet'): ns3::TcpLp [class]
<     module.add_class('TcpLp', parent=root_module['ns3::TcpNewReno'])
<     ## tcp-prr-recovery.h (module 'internet'): ns3::TcpPrrRecovery [class]
<     module.add_class('TcpPrrRecovery', parent=root_module['ns3::TcpClassicRecovery'])
<     ## tcp-prr-recovery.h (module 'internet'): ns3::TcpPrrRecovery::ReductionBound_t [enumeration]
<     module.add_enum('ReductionBound_t', ['CRB', 'SSRB'], outer_class=root_module['ns3::TcpPrrRecovery'])
<     typehandlers.add_type_alias('ns3::TcpPrrRecovery::ReductionBound_t', 'ns3::TcpPrrRecovery::ReductionBound_t')
<     typehandlers.add_type_alias('ns3::TcpPrrRecovery::ReductionBound_t*', 'ns3::TcpPrrRecovery::ReductionBound_t*')
<     typehandlers.add_type_alias('ns3::TcpPrrRecovery::ReductionBound_t&', 'ns3::TcpPrrRecovery::ReductionBound_t&')
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateLinux [class]
<     module.add_class('TcpRateLinux', parent=root_module['ns3::TcpRateOps'])
<     typehandlers.add_type_alias('void ( * ) ( ns3::TcpRateOps::TcpRateConnection const & )', 'ns3::TcpRateLinux::TcpRateUpdated')
<     typehandlers.add_type_alias('void ( * ) ( ns3::TcpRateOps::TcpRateConnection const & )*', 'ns3::TcpRateLinux::TcpRateUpdated*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::TcpRateOps::TcpRateConnection const & )&', 'ns3::TcpRateLinux::TcpRateUpdated&')
<     typehandlers.add_type_alias('void ( * ) ( ns3::TcpRateOps::TcpRateSample const & )', 'ns3::TcpRateLinux::TcpRateSampleUpdated')
<     typehandlers.add_type_alias('void ( * ) ( ns3::TcpRateOps::TcpRateSample const & )*', 'ns3::TcpRateLinux::TcpRateSampleUpdated*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::TcpRateOps::TcpRateSample const & )&', 'ns3::TcpRateLinux::TcpRateSampleUpdated&')
1042,1107c779,782
<     ## callback.h (module 'core'): ns3::CallbackImpl<bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['bool', 'ns3::Ptr<ns3::NetDevice>', 'ns3::Ptr<const ns3::Packet>', 'unsigned short', 'const ns3::Address &', 'const ns3::Address &', 'ns3::NetDevice::PacketType', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['bool', 'ns3::Ptr<ns3::NetDevice>', 'ns3::Ptr<const ns3::Packet>', 'unsigned short', 'const ns3::Address &', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<bool, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['bool', 'ns3::Ptr<ns3::Socket>', 'const ns3::Address &', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['ns3::ObjectBase *', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::Ipv4Header &, ns3::Ptr<const ns3::Packet>, ns3::Ipv4L3Protocol::DropReason, ns3::Ptr<ns3::Ipv4>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'const ns3::Ipv4Header &', 'ns3::Ptr<const ns3::Packet>', 'ns3::Ipv4L3Protocol::DropReason', 'ns3::Ptr<ns3::Ipv4>', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::Ipv4Header &, ns3::Ptr<const ns3::Packet>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'const ns3::Ipv4Header &', 'ns3::Ptr<const ns3::Packet>', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::Ipv6Header &, ns3::Ptr<const ns3::Packet>, ns3::Ipv6L3Protocol::DropReason, ns3::Ptr<ns3::Ipv6>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'const ns3::Ipv6Header &', 'ns3::Ptr<const ns3::Packet>', 'ns3::Ipv6L3Protocol::DropReason', 'ns3::Ptr<ns3::Ipv6>', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::Ipv6Header &, ns3::Ptr<const ns3::Packet>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'const ns3::Ipv6Header &', 'ns3::Ptr<const ns3::Packet>', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::TcpRateOps::TcpRateConnection &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'const ns3::TcpRateOps::TcpRateConnection &', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::TcpRateOps::TcpRateSample &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'const ns3::TcpRateOps::TcpRateSample &', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, double, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'double', 'double', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ipv4Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ipv4Address', 'unsigned char', 'unsigned char', 'unsigned char', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ipv6Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ipv6Address', 'unsigned char', 'unsigned char', 'unsigned char', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, const ns3::TcpHeader &, ns3::Ptr<const ns3::TcpSocketBase>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<const ns3::Packet>', 'const ns3::TcpHeader &', 'ns3::Ptr<const ns3::TcpSocketBase>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::Ptr<ns3::Ipv4>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<const ns3::Packet>', 'ns3::Ptr<ns3::Ipv4>', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::Ptr<ns3::Ipv6>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<const ns3::Packet>', 'ns3::Ptr<ns3::Ipv6>', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<const ns3::Packet>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<ns3::NetDevice>', 'ns3::Ptr<const ns3::Packet>', 'unsigned short', 'const ns3::Address &', 'const ns3::Address &', 'ns3::NetDevice::PacketType', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<ns3::NetDevice>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv4Address, ns3::Ipv4Address, unsigned char, ns3::Ptr<ns3::Ipv4Route>, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<ns3::Packet>', 'ns3::Ipv4Address', 'ns3::Ipv4Address', 'unsigned char', 'ns3::Ptr<ns3::Ipv4Route>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv4Header, unsigned short, ns3::Ptr<ns3::Ipv4Interface>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<ns3::Packet>', 'ns3::Ipv4Header', 'unsigned short', 'ns3::Ptr<ns3::Ipv4Interface>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv6Address, ns3::Ipv6Address, unsigned char, ns3::Ptr<ns3::Ipv6Route>, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<ns3::Packet>', 'ns3::Ipv6Address', 'ns3::Ipv6Address', 'unsigned char', 'ns3::Ptr<ns3::Ipv6Route>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv6Header, unsigned short, ns3::Ptr<ns3::Ipv6Interface>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<ns3::Packet>', 'ns3::Ipv6Header', 'unsigned short', 'ns3::Ptr<ns3::Ipv6Interface>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<ns3::Socket>', 'const ns3::Address &', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<ns3::Socket>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<ns3::Socket>', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::SequenceNumber<unsigned int, int>, ns3::SequenceNumber<unsigned int, int>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::SequenceNumber<unsigned int, int>', 'ns3::SequenceNumber<unsigned int, int>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::TcpSocket::TcpStates_t, ns3::TcpSocket::TcpStates_t, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::TcpSocket::TcpStates_t', 'ns3::TcpSocket::TcpStates_t', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::TcpSocketState::EcnState_t, ns3::TcpSocketState::EcnState_t, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::TcpSocketState::EcnState_t', 'ns3::TcpSocketState::EcnState_t', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::TcpSocketState::TcpCongState_t, ns3::TcpSocketState::TcpCongState_t, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::TcpSocketState::TcpCongState_t', 'ns3::TcpSocketState::TcpCongState_t', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Time, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Time', 'ns3::Time', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned int, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'unsigned int', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
---
>     ## ipv4-packet-filter.h (module 'internet'): ns3::FqCoDelIpv4PacketFilter [class]
>     module.add_class('FqCoDelIpv4PacketFilter', parent=root_module['ns3::Ipv4PacketFilter'])
>     ## ipv6-packet-filter.h (module 'internet'): ns3::FqCoDelIpv6PacketFilter [class]
>     module.add_class('FqCoDelIpv6PacketFilter', parent=root_module['ns3::Ipv6PacketFilter'])
1126,1129c801,802
<     ## queue-item.h (module 'network'): ns3::QueueDiscItem [class]
<     module.add_class('QueueDiscItem', import_from_module='ns.network', parent=root_module['ns3::QueueItem'])
<     ## arp-queue-disc-item.h (module 'internet'): ns3::ArpQueueDiscItem [class]
<     module.add_class('ArpQueueDiscItem', parent=root_module['ns3::QueueDiscItem'])
---
>     ## queue-disc.h (module 'traffic-control'): ns3::QueueDiscItem [class]
>     module.add_class('QueueDiscItem', import_from_module='ns.traffic_control', parent=root_module['ns3::QueueItem'])
1134,1169c807,836
<     module.add_container('std::list< ns3::Ipv4EndPoint * >', 'ns3::Ipv4EndPoint *', container_type='list')
<     module.add_container('ns3::Ipv4EndPointDemux::EndPoints', 'ns3::Ipv4EndPoint *', container_type='list')
<     module.add_container('std::vector< unsigned int >', 'unsigned int', container_type='vector')
<     module.add_container('std::vector< bool >', 'bool', container_type='vector')
<     module.add_container('std::list< ns3::Ipv6EndPoint * >', 'ns3::Ipv6EndPoint *', container_type='list')
<     module.add_container('ns3::Ipv6EndPointDemux::EndPoints', 'ns3::Ipv6EndPoint *', container_type='list')
<     module.add_container('std::list< ns3::RipRte >', 'ns3::RipRte', container_type='list')
<     module.add_container('std::list< ns3::RipNgRte >', 'ns3::RipNgRte', container_type='list')
<     module.add_container('std::vector< ns3::Ipv6Address >', 'ns3::Ipv6Address', container_type='vector')
<     module.add_container('std::list< ns3::Ptr< ns3::TcpOption const > >', 'ns3::Ptr< ns3::TcpOption const >', container_type='list')
<     module.add_container('std::list< std::pair< ns3::SequenceNumber< unsigned int, int >, ns3::SequenceNumber< unsigned int, int > > >', 'std::pair< ns3::SequenceNumber< unsigned int, int >, ns3::SequenceNumber< unsigned int, int > >', container_type='list')
<     module.add_container('ns3::TcpOptionSack::SackList', 'std::pair< ns3::SequenceNumber< unsigned int, int >, ns3::SequenceNumber< unsigned int, int > >', container_type='list')
<     module.add_container('std::list< std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv4Header > >', 'std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv4Header >', container_type='list')
<     module.add_container('std::list< ns3::ArpCache::Entry * >', 'ns3::ArpCache::Entry *', container_type='list')
<     module.add_container('std::map< unsigned int, unsigned int >', ('unsigned int', 'unsigned int'), container_type='map')
<     module.add_container('std::list< std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv6Header > >', 'std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv6Header >', container_type='list')
<     module.add_container('std::list< ns3::NdiscCache::Entry * >', 'ns3::NdiscCache::Entry *', container_type='list')
<     module.add_container('std::set< unsigned int >', 'unsigned int', container_type='set')
<     typehandlers.add_type_alias('void ( * ) ( ns3::TcpSocketState::TcpCongState_t const, ns3::TcpSocketState::TcpCongState_t const )', 'ns3::TcpCongStatesTracedValueCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::TcpSocketState::TcpCongState_t const, ns3::TcpSocketState::TcpCongState_t const )*', 'ns3::TcpCongStatesTracedValueCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::TcpSocketState::TcpCongState_t const, ns3::TcpSocketState::TcpCongState_t const )&', 'ns3::TcpCongStatesTracedValueCallback&')
<     typehandlers.add_type_alias('void ( * ) ( ns3::TcpSocketState::EcnState_t const, ns3::TcpSocketState::EcnState_t const )', 'ns3::EcnStatesTracedValueCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::TcpSocketState::EcnState_t const, ns3::TcpSocketState::EcnState_t const )*', 'ns3::EcnStatesTracedValueCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::TcpSocketState::EcnState_t const, ns3::TcpSocketState::EcnState_t const )&', 'ns3::EcnStatesTracedValueCallback&')
<     typehandlers.add_type_alias('void ( * ) ( ns3::TcpSocket::TcpStates_t const, ns3::TcpSocket::TcpStates_t const )', 'ns3::TcpStatesTracedValueCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::TcpSocket::TcpStates_t const, ns3::TcpSocket::TcpStates_t const )*', 'ns3::TcpStatesTracedValueCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::TcpSocket::TcpStates_t const, ns3::TcpSocket::TcpStates_t const )&', 'ns3::TcpStatesTracedValueCallback&')
<     typehandlers.add_type_alias('ns3::SequenceNumber< unsigned int, int >', 'ns3::SequenceNumber32')
<     typehandlers.add_type_alias('ns3::SequenceNumber< unsigned int, int >*', 'ns3::SequenceNumber32*')
<     typehandlers.add_type_alias('ns3::SequenceNumber< unsigned int, int >&', 'ns3::SequenceNumber32&')
<     typehandlers.add_type_alias('ns3::SequenceNumber< unsigned short, short >', 'ns3::SequenceNumber16')
<     typehandlers.add_type_alias('ns3::SequenceNumber< unsigned short, short >*', 'ns3::SequenceNumber16*')
<     typehandlers.add_type_alias('ns3::SequenceNumber< unsigned short, short >&', 'ns3::SequenceNumber16&')
<     typehandlers.add_type_alias('ns3::SequenceNumber< unsigned char, signed char >', 'ns3::SequenceNumber8')
<     typehandlers.add_type_alias('ns3::SequenceNumber< unsigned char, signed char >*', 'ns3::SequenceNumber8*')
<     typehandlers.add_type_alias('ns3::SequenceNumber< unsigned char, signed char >&', 'ns3::SequenceNumber8&')
---
>     module.add_container('std::vector< unsigned int >', 'unsigned int', container_type=u'vector')
>     module.add_container('std::vector< bool >', 'bool', container_type=u'vector')
>     module.add_container('std::list< ns3::RipRte >', 'ns3::RipRte', container_type=u'list')
>     module.add_container('std::list< ns3::RipNgRte >', 'ns3::RipNgRte', container_type=u'list')
>     module.add_container('std::vector< ns3::Ipv6Address >', 'ns3::Ipv6Address', container_type=u'vector')
>     module.add_container('std::vector< ns3::Ptr< ns3::QueueDisc > >', 'ns3::Ptr< ns3::QueueDisc >', container_type=u'vector')
>     module.add_container('std::list< std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv4Header > >', 'std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv4Header >', container_type=u'list')
>     module.add_container('std::list< ns3::ArpCache::Entry * >', 'ns3::ArpCache::Entry *', container_type=u'list')
>     module.add_container('std::map< unsigned int, unsigned int >', ('unsigned int', 'unsigned int'), container_type=u'map')
>     module.add_container('std::list< std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv6Header > >', 'std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv6Header >', container_type=u'list')
>     module.add_container('std::list< ns3::NdiscCache::Entry * >', 'ns3::NdiscCache::Entry *', container_type=u'list')
>     module.add_container('std::set< unsigned int >', 'unsigned int', container_type=u'set')
>     typehandlers.add_type_alias(u'ns3::SequenceNumber< short unsigned int, short int >', u'ns3::SequenceNumber16')
>     typehandlers.add_type_alias(u'ns3::SequenceNumber< short unsigned int, short int >*', u'ns3::SequenceNumber16*')
>     typehandlers.add_type_alias(u'ns3::SequenceNumber< short unsigned int, short int >&', u'ns3::SequenceNumber16&')
>     typehandlers.add_type_alias(u'ns3::SequenceNumber< unsigned int, int >', u'ns3::SequenceNumber32')
>     typehandlers.add_type_alias(u'ns3::SequenceNumber< unsigned int, int >*', u'ns3::SequenceNumber32*')
>     typehandlers.add_type_alias(u'ns3::SequenceNumber< unsigned int, int >&', u'ns3::SequenceNumber32&')
>     typehandlers.add_type_alias(u'std::deque< ns3::RttHistory, std::allocator< ns3::RttHistory > >', u'ns3::RttHistory_t')
>     typehandlers.add_type_alias(u'std::deque< ns3::RttHistory, std::allocator< ns3::RttHistory > >*', u'ns3::RttHistory_t*')
>     typehandlers.add_type_alias(u'std::deque< ns3::RttHistory, std::allocator< ns3::RttHistory > >&', u'ns3::RttHistory_t&')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::TcpSocket::TcpStates_t, ns3::TcpSocket::TcpStates_t ) *', u'ns3::TcpStatesTracedValueCallback')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::TcpSocket::TcpStates_t, ns3::TcpSocket::TcpStates_t ) **', u'ns3::TcpStatesTracedValueCallback*')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::TcpSocket::TcpStates_t, ns3::TcpSocket::TcpStates_t ) *&', u'ns3::TcpStatesTracedValueCallback&')
>     typehandlers.add_type_alias(u'ns3::SequenceNumber< unsigned char, signed char >', u'ns3::SequenceNumber8')
>     typehandlers.add_type_alias(u'ns3::SequenceNumber< unsigned char, signed char >*', u'ns3::SequenceNumber8*')
>     typehandlers.add_type_alias(u'ns3::SequenceNumber< unsigned char, signed char >&', u'ns3::SequenceNumber8&')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::TcpSocketState::TcpCongState_t, ns3::TcpSocketState::TcpCongState_t ) *', u'ns3::TcpCongStatesTracedValueCallback')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::TcpSocketState::TcpCongState_t, ns3::TcpSocketState::TcpCongState_t ) **', u'ns3::TcpCongStatesTracedValueCallback*')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::TcpSocketState::TcpCongState_t, ns3::TcpSocketState::TcpCongState_t ) *&', u'ns3::TcpCongStatesTracedValueCallback&')
1204,1209c871,876
<     typehandlers.add_type_alias('uint32_t ( * ) ( char const *, std::size_t const )', 'ns3::Hash::Hash32Function_ptr')
<     typehandlers.add_type_alias('uint32_t ( * ) ( char const *, std::size_t const )*', 'ns3::Hash::Hash32Function_ptr*')
<     typehandlers.add_type_alias('uint32_t ( * ) ( char const *, std::size_t const )&', 'ns3::Hash::Hash32Function_ptr&')
<     typehandlers.add_type_alias('uint64_t ( * ) ( char const *, std::size_t const )', 'ns3::Hash::Hash64Function_ptr')
<     typehandlers.add_type_alias('uint64_t ( * ) ( char const *, std::size_t const )*', 'ns3::Hash::Hash64Function_ptr*')
<     typehandlers.add_type_alias('uint64_t ( * ) ( char const *, std::size_t const )&', 'ns3::Hash::Hash64Function_ptr&')
---
>     typehandlers.add_type_alias(u'uint64_t ( * ) ( char const *, size_t ) *', u'ns3::Hash::Hash64Function_ptr')
>     typehandlers.add_type_alias(u'uint64_t ( * ) ( char const *, size_t ) **', u'ns3::Hash::Hash64Function_ptr*')
>     typehandlers.add_type_alias(u'uint64_t ( * ) ( char const *, size_t ) *&', u'ns3::Hash::Hash64Function_ptr&')
>     typehandlers.add_type_alias(u'uint32_t ( * ) ( char const *, size_t ) *', u'ns3::Hash::Hash32Function_ptr')
>     typehandlers.add_type_alias(u'uint32_t ( * ) ( char const *, size_t ) **', u'ns3::Hash::Hash32Function_ptr*')
>     typehandlers.add_type_alias(u'uint32_t ( * ) ( char const *, size_t ) *&', u'ns3::Hash::Hash32Function_ptr&')
1232,1270c899,931
<     typehandlers.add_type_alias('void ( * ) ( ns3::Time, ns3::Time )', 'ns3::TracedValueCallback::Time')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Time, ns3::Time )*', 'ns3::TracedValueCallback::Time*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Time, ns3::Time )&', 'ns3::TracedValueCallback::Time&')
<     typehandlers.add_type_alias('void ( * ) ( ns3::TcpSocketState::TcpCongState_t const, ns3::TcpSocketState::TcpCongState_t const )', 'ns3::TracedValueCallback::TcpCongState')
<     typehandlers.add_type_alias('void ( * ) ( ns3::TcpSocketState::TcpCongState_t const, ns3::TcpSocketState::TcpCongState_t const )*', 'ns3::TracedValueCallback::TcpCongState*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::TcpSocketState::TcpCongState_t const, ns3::TcpSocketState::TcpCongState_t const )&', 'ns3::TracedValueCallback::TcpCongState&')
<     typehandlers.add_type_alias('void ( * ) ( ns3::TcpSocketState::EcnState_t const, ns3::TcpSocketState::EcnState_t const )', 'ns3::TracedValueCallback::EcnState')
<     typehandlers.add_type_alias('void ( * ) ( ns3::TcpSocketState::EcnState_t const, ns3::TcpSocketState::EcnState_t const )*', 'ns3::TracedValueCallback::EcnState*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::TcpSocketState::EcnState_t const, ns3::TcpSocketState::EcnState_t const )&', 'ns3::TracedValueCallback::EcnState&')
<     typehandlers.add_type_alias('void ( * ) ( ns3::SequenceNumber32, ns3::SequenceNumber32 )', 'ns3::TracedValueCallback::SequenceNumber32')
<     typehandlers.add_type_alias('void ( * ) ( ns3::SequenceNumber32, ns3::SequenceNumber32 )*', 'ns3::TracedValueCallback::SequenceNumber32*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::SequenceNumber32, ns3::SequenceNumber32 )&', 'ns3::TracedValueCallback::SequenceNumber32&')
<     typehandlers.add_type_alias('void ( * ) ( bool, bool )', 'ns3::TracedValueCallback::Bool')
<     typehandlers.add_type_alias('void ( * ) ( bool, bool )*', 'ns3::TracedValueCallback::Bool*')
<     typehandlers.add_type_alias('void ( * ) ( bool, bool )&', 'ns3::TracedValueCallback::Bool&')
<     typehandlers.add_type_alias('void ( * ) ( int8_t, int8_t )', 'ns3::TracedValueCallback::Int8')
<     typehandlers.add_type_alias('void ( * ) ( int8_t, int8_t )*', 'ns3::TracedValueCallback::Int8*')
<     typehandlers.add_type_alias('void ( * ) ( int8_t, int8_t )&', 'ns3::TracedValueCallback::Int8&')
<     typehandlers.add_type_alias('void ( * ) ( uint8_t, uint8_t )', 'ns3::TracedValueCallback::Uint8')
<     typehandlers.add_type_alias('void ( * ) ( uint8_t, uint8_t )*', 'ns3::TracedValueCallback::Uint8*')
<     typehandlers.add_type_alias('void ( * ) ( uint8_t, uint8_t )&', 'ns3::TracedValueCallback::Uint8&')
<     typehandlers.add_type_alias('void ( * ) ( int16_t, int16_t )', 'ns3::TracedValueCallback::Int16')
<     typehandlers.add_type_alias('void ( * ) ( int16_t, int16_t )*', 'ns3::TracedValueCallback::Int16*')
<     typehandlers.add_type_alias('void ( * ) ( int16_t, int16_t )&', 'ns3::TracedValueCallback::Int16&')
<     typehandlers.add_type_alias('void ( * ) ( uint16_t, uint16_t )', 'ns3::TracedValueCallback::Uint16')
<     typehandlers.add_type_alias('void ( * ) ( uint16_t, uint16_t )*', 'ns3::TracedValueCallback::Uint16*')
<     typehandlers.add_type_alias('void ( * ) ( uint16_t, uint16_t )&', 'ns3::TracedValueCallback::Uint16&')
<     typehandlers.add_type_alias('void ( * ) ( int32_t, int32_t )', 'ns3::TracedValueCallback::Int32')
<     typehandlers.add_type_alias('void ( * ) ( int32_t, int32_t )*', 'ns3::TracedValueCallback::Int32*')
<     typehandlers.add_type_alias('void ( * ) ( int32_t, int32_t )&', 'ns3::TracedValueCallback::Int32&')
<     typehandlers.add_type_alias('void ( * ) ( uint32_t, uint32_t )', 'ns3::TracedValueCallback::Uint32')
<     typehandlers.add_type_alias('void ( * ) ( uint32_t, uint32_t )*', 'ns3::TracedValueCallback::Uint32*')
<     typehandlers.add_type_alias('void ( * ) ( uint32_t, uint32_t )&', 'ns3::TracedValueCallback::Uint32&')
<     typehandlers.add_type_alias('void ( * ) ( double, double )', 'ns3::TracedValueCallback::Double')
<     typehandlers.add_type_alias('void ( * ) ( double, double )*', 'ns3::TracedValueCallback::Double*')
<     typehandlers.add_type_alias('void ( * ) ( double, double )&', 'ns3::TracedValueCallback::Double&')
<     typehandlers.add_type_alias('void ( * ) (  )', 'ns3::TracedValueCallback::Void')
<     typehandlers.add_type_alias('void ( * ) (  )*', 'ns3::TracedValueCallback::Void*')
<     typehandlers.add_type_alias('void ( * ) (  )&', 'ns3::TracedValueCallback::Void&')
---
>     typehandlers.add_type_alias(u'void ( * ) ( double, double ) *', u'ns3::TracedValueCallback::Double')
>     typehandlers.add_type_alias(u'void ( * ) ( double, double ) **', u'ns3::TracedValueCallback::Double*')
>     typehandlers.add_type_alias(u'void ( * ) ( double, double ) *&', u'ns3::TracedValueCallback::Double&')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::SequenceNumber32, ns3::SequenceNumber32 ) *', u'ns3::TracedValueCallback::SequenceNumber32')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::SequenceNumber32, ns3::SequenceNumber32 ) **', u'ns3::TracedValueCallback::SequenceNumber32*')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::SequenceNumber32, ns3::SequenceNumber32 ) *&', u'ns3::TracedValueCallback::SequenceNumber32&')
>     typehandlers.add_type_alias(u'void ( * ) ( int8_t, int8_t ) *', u'ns3::TracedValueCallback::Int8')
>     typehandlers.add_type_alias(u'void ( * ) ( int8_t, int8_t ) **', u'ns3::TracedValueCallback::Int8*')
>     typehandlers.add_type_alias(u'void ( * ) ( int8_t, int8_t ) *&', u'ns3::TracedValueCallback::Int8&')
>     typehandlers.add_type_alias(u'void ( * ) ( uint8_t, uint8_t ) *', u'ns3::TracedValueCallback::Uint8')
>     typehandlers.add_type_alias(u'void ( * ) ( uint8_t, uint8_t ) **', u'ns3::TracedValueCallback::Uint8*')
>     typehandlers.add_type_alias(u'void ( * ) ( uint8_t, uint8_t ) *&', u'ns3::TracedValueCallback::Uint8&')
>     typehandlers.add_type_alias(u'void ( * ) ( int32_t, int32_t ) *', u'ns3::TracedValueCallback::Int32')
>     typehandlers.add_type_alias(u'void ( * ) ( int32_t, int32_t ) **', u'ns3::TracedValueCallback::Int32*')
>     typehandlers.add_type_alias(u'void ( * ) ( int32_t, int32_t ) *&', u'ns3::TracedValueCallback::Int32&')
>     typehandlers.add_type_alias(u'void ( * ) ( bool, bool ) *', u'ns3::TracedValueCallback::Bool')
>     typehandlers.add_type_alias(u'void ( * ) ( bool, bool ) **', u'ns3::TracedValueCallback::Bool*')
>     typehandlers.add_type_alias(u'void ( * ) ( bool, bool ) *&', u'ns3::TracedValueCallback::Bool&')
>     typehandlers.add_type_alias(u'void ( * ) ( uint16_t, uint16_t ) *', u'ns3::TracedValueCallback::Uint16')
>     typehandlers.add_type_alias(u'void ( * ) ( uint16_t, uint16_t ) **', u'ns3::TracedValueCallback::Uint16*')
>     typehandlers.add_type_alias(u'void ( * ) ( uint16_t, uint16_t ) *&', u'ns3::TracedValueCallback::Uint16&')
>     typehandlers.add_type_alias(u'void ( * ) ( uint32_t, uint32_t ) *', u'ns3::TracedValueCallback::Uint32')
>     typehandlers.add_type_alias(u'void ( * ) ( uint32_t, uint32_t ) **', u'ns3::TracedValueCallback::Uint32*')
>     typehandlers.add_type_alias(u'void ( * ) ( uint32_t, uint32_t ) *&', u'ns3::TracedValueCallback::Uint32&')
>     typehandlers.add_type_alias(u'void ( * ) ( int16_t, int16_t ) *', u'ns3::TracedValueCallback::Int16')
>     typehandlers.add_type_alias(u'void ( * ) ( int16_t, int16_t ) **', u'ns3::TracedValueCallback::Int16*')
>     typehandlers.add_type_alias(u'void ( * ) ( int16_t, int16_t ) *&', u'ns3::TracedValueCallback::Int16&')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Time, ns3::Time ) *', u'ns3::TracedValueCallback::Time')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Time, ns3::Time ) **', u'ns3::TracedValueCallback::Time*')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Time, ns3::Time ) *&', u'ns3::TracedValueCallback::Time&')
>     typehandlers.add_type_alias(u'void ( * ) (  ) *', u'ns3::TracedValueCallback::Void')
>     typehandlers.add_type_alias(u'void ( * ) (  ) **', u'ns3::TracedValueCallback::Void*')
>     typehandlers.add_type_alias(u'void ( * ) (  ) *&', u'ns3::TracedValueCallback::Void&')
1293,1305d953
<     register_Ns3DataRate_methods(root_module, root_module['ns3::DataRate'])
<     register_Ns3DefaultDeleter__Ns3AttributeAccessor_methods(root_module, root_module['ns3::DefaultDeleter< ns3::AttributeAccessor >'])
<     register_Ns3DefaultDeleter__Ns3AttributeChecker_methods(root_module, root_module['ns3::DefaultDeleter< ns3::AttributeChecker >'])
<     register_Ns3DefaultDeleter__Ns3AttributeValue_methods(root_module, root_module['ns3::DefaultDeleter< ns3::AttributeValue >'])
<     register_Ns3DefaultDeleter__Ns3CallbackImplBase_methods(root_module, root_module['ns3::DefaultDeleter< ns3::CallbackImplBase >'])
<     register_Ns3DefaultDeleter__Ns3EventImpl_methods(root_module, root_module['ns3::DefaultDeleter< ns3::EventImpl >'])
<     register_Ns3DefaultDeleter__Ns3HashImplementation_methods(root_module, root_module['ns3::DefaultDeleter< ns3::Hash::Implementation >'])
<     register_Ns3DefaultDeleter__Ns3Ipv4Route_methods(root_module, root_module['ns3::DefaultDeleter< ns3::Ipv4Route >'])
<     register_Ns3DefaultDeleter__Ns3Ipv6Route_methods(root_module, root_module['ns3::DefaultDeleter< ns3::Ipv6Route >'])
<     register_Ns3DefaultDeleter__Ns3NixVector_methods(root_module, root_module['ns3::DefaultDeleter< ns3::NixVector >'])
<     register_Ns3DefaultDeleter__Ns3OutputStreamWrapper_methods(root_module, root_module['ns3::DefaultDeleter< ns3::OutputStreamWrapper >'])
<     register_Ns3DefaultDeleter__Ns3Packet_methods(root_module, root_module['ns3::DefaultDeleter< ns3::Packet >'])
<     register_Ns3DefaultDeleter__Ns3TraceSourceAccessor_methods(root_module, root_module['ns3::DefaultDeleter< ns3::TraceSourceAccessor >'])
1325,1326d972
<     register_Ns3Ipv4EndPoint_methods(root_module, root_module['ns3::Ipv4EndPoint'])
<     register_Ns3Ipv4EndPointDemux_methods(root_module, root_module['ns3::Ipv4EndPointDemux'])
1337,1338d982
<     register_Ns3Ipv6EndPoint_methods(root_module, root_module['ns3::Ipv6EndPoint'])
<     register_Ns3Ipv6EndPointDemux_methods(root_module, root_module['ns3::Ipv6EndPointDemux'])
1347d990
<     register_Ns3Mac8Address_methods(root_module, root_module['ns3::Mac8Address'])
1377,1378d1019
<     register_Ns3TcpTxItem_methods(root_module, root_module['ns3::TcpTxItem'])
<     register_Ns3TcpTxItemRateInformation_methods(root_module, root_module['ns3::TcpTxItem::RateInformation'])
1385d1025
<     register_Ns3TracedValue__Ns3TcpSocketStateEcnState_t_methods(root_module, root_module['ns3::TracedValue< ns3::TcpSocketState::EcnState_t >'])
1433a1074,1076
>     register_Ns3Queue_methods(root_module, root_module['ns3::Queue'])
>     register_Ns3QueueDisc_methods(root_module, root_module['ns3::QueueDisc'])
>     register_Ns3QueueDiscClass_methods(root_module, root_module['ns3::QueueDiscClass'])
1451a1095
>     register_Ns3SimpleRefCount__Ns3NetDeviceQueue_Ns3Empty_Ns3DefaultDeleter__lt__ns3NetDeviceQueue__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::NetDeviceQueue, ns3::empty, ns3::DefaultDeleter<ns3::NetDeviceQueue> >'])
1469,1474d1112
<     register_Ns3TcpOptionEnd_methods(root_module, root_module['ns3::TcpOptionEnd'])
<     register_Ns3TcpOptionMSS_methods(root_module, root_module['ns3::TcpOptionMSS'])
<     register_Ns3TcpOptionNOP_methods(root_module, root_module['ns3::TcpOptionNOP'])
<     register_Ns3TcpOptionSack_methods(root_module, root_module['ns3::TcpOptionSack'])
<     register_Ns3TcpOptionSackPermitted_methods(root_module, root_module['ns3::TcpOptionSackPermitted'])
<     register_Ns3TcpOptionTS_methods(root_module, root_module['ns3::TcpOptionTS'])
1476,1480d1113
<     register_Ns3TcpOptionWinScale_methods(root_module, root_module['ns3::TcpOptionWinScale'])
<     register_Ns3TcpRateOps_methods(root_module, root_module['ns3::TcpRateOps'])
<     register_Ns3TcpRateOpsTcpRateConnection_methods(root_module, root_module['ns3::TcpRateOps::TcpRateConnection'])
<     register_Ns3TcpRateOpsTcpRateSample_methods(root_module, root_module['ns3::TcpRateOps::TcpRateSample'])
<     register_Ns3TcpRecoveryOps_methods(root_module, root_module['ns3::TcpRecoveryOps'])
1494a1128
>     register_Ns3TrafficControlLayer_methods(root_module, root_module['ns3::TrafficControlLayer'])
1519,1520d1152
<     register_Ns3DataRateChecker_methods(root_module, root_module['ns3::DataRateChecker'])
<     register_Ns3DataRateValue_methods(root_module, root_module['ns3::DataRateValue'])
1572,1576d1203
<     register_Ns3Ipv6Option_methods(root_module, root_module['ns3::Ipv6Option'])
<     register_Ns3Ipv6OptionJumbogram_methods(root_module, root_module['ns3::Ipv6OptionJumbogram'])
<     register_Ns3Ipv6OptionPad1_methods(root_module, root_module['ns3::Ipv6OptionPad1'])
<     register_Ns3Ipv6OptionPadn_methods(root_module, root_module['ns3::Ipv6OptionPadn'])
<     register_Ns3Ipv6OptionRouterAlert_methods(root_module, root_module['ns3::Ipv6OptionRouterAlert'])
1590a1218,1219
>     register_Ns3NetDeviceQueue_methods(root_module, root_module['ns3::NetDeviceQueue'])
>     register_Ns3NetDeviceQueueInterface_methods(root_module, root_module['ns3::NetDeviceQueueInterface'])
1604,1605d1232
<     register_Ns3TcpClassicRecovery_methods(root_module, root_module['ns3::TcpClassicRecovery'])
<     register_Ns3TcpDctcp_methods(root_module, root_module['ns3::TcpDctcp'])
1611,1614d1237
<     register_Ns3TcpLedbat_methods(root_module, root_module['ns3::TcpLedbat'])
<     register_Ns3TcpLp_methods(root_module, root_module['ns3::TcpLp'])
<     register_Ns3TcpPrrRecovery_methods(root_module, root_module['ns3::TcpPrrRecovery'])
<     register_Ns3TcpRateLinux_methods(root_module, root_module['ns3::TcpRateLinux'])
1624,1656c1247,1248
<     register_Ns3CallbackImpl__Bool_Ns3Ptr__lt__ns3NetDevice__gt___Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Const_ns3Address___amp___Const_ns3Address___amp___Ns3NetDevicePacketType_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >'])
<     register_Ns3CallbackImpl__Bool_Ns3Ptr__lt__ns3NetDevice__gt___Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Const_ns3Address___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
<     register_Ns3CallbackImpl__Bool_Ns3Ptr__lt__ns3Socket__gt___Const_ns3Address___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< bool, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
<     register_Ns3CallbackImpl__Ns3ObjectBase___star___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
<     register_Ns3CallbackImpl__Void_Const_ns3Ipv4Header___amp___Ns3Ptr__lt__const_ns3Packet__gt___Ns3Ipv4L3ProtocolDropReason_Ns3Ptr__lt__ns3Ipv4__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, const ns3::Ipv4Header &, ns3::Ptr<const ns3::Packet>, ns3::Ipv4L3Protocol::DropReason, ns3::Ptr<ns3::Ipv4>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
<     register_Ns3CallbackImpl__Void_Const_ns3Ipv4Header___amp___Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, const ns3::Ipv4Header &, ns3::Ptr<const ns3::Packet>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
<     register_Ns3CallbackImpl__Void_Const_ns3Ipv6Header___amp___Ns3Ptr__lt__const_ns3Packet__gt___Ns3Ipv6L3ProtocolDropReason_Ns3Ptr__lt__ns3Ipv6__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, const ns3::Ipv6Header &, ns3::Ptr<const ns3::Packet>, ns3::Ipv6L3Protocol::DropReason, ns3::Ptr<ns3::Ipv6>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
<     register_Ns3CallbackImpl__Void_Const_ns3Ipv6Header___amp___Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, const ns3::Ipv6Header &, ns3::Ptr<const ns3::Packet>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
<     register_Ns3CallbackImpl__Void_Const_ns3TcpRateOpsTcpRateConnection___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, const ns3::TcpRateOps::TcpRateConnection &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
<     register_Ns3CallbackImpl__Void_Const_ns3TcpRateOpsTcpRateSample___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, const ns3::TcpRateOps::TcpRateSample &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
<     register_Ns3CallbackImpl__Void_Double_Double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, double, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
<     register_Ns3CallbackImpl__Void_Ns3Ipv4Address_Unsigned_char_Unsigned_char_Unsigned_char_Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ipv4Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
<     register_Ns3CallbackImpl__Void_Ns3Ipv6Address_Unsigned_char_Unsigned_char_Unsigned_char_Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ipv6Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
<     register_Ns3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Const_ns3TcpHeader___amp___Ns3Ptr__lt__const_ns3TcpSocketBase__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<const ns3::Packet>, const ns3::TcpHeader &, ns3::Ptr<const ns3::TcpSocketBase>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
<     register_Ns3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3Ptr__lt__ns3Ipv4__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<const ns3::Packet>, ns3::Ptr<ns3::Ipv4>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
<     register_Ns3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3Ptr__lt__ns3Ipv6__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<const ns3::Packet>, ns3::Ptr<ns3::Ipv6>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
<     register_Ns3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<const ns3::Packet>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
<     register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3NetDevice__gt___Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Const_ns3Address___amp___Const_ns3Address___amp___Ns3NetDevicePacketType_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >'])
<     register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3NetDevice__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<ns3::NetDevice>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
<     register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Ns3Ipv4Address_Ns3Ipv4Address_Unsigned_char_Ns3Ptr__lt__ns3Ipv4Route__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<ns3::Packet>, ns3::Ipv4Address, ns3::Ipv4Address, unsigned char, ns3::Ptr<ns3::Ipv4Route>, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
<     register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Ns3Ipv4Header_Unsigned_short_Ns3Ptr__lt__ns3Ipv4Interface__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<ns3::Packet>, ns3::Ipv4Header, unsigned short, ns3::Ptr<ns3::Ipv4Interface>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
<     register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Ns3Ipv6Address_Ns3Ipv6Address_Unsigned_char_Ns3Ptr__lt__ns3Ipv6Route__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<ns3::Packet>, ns3::Ipv6Address, ns3::Ipv6Address, unsigned char, ns3::Ptr<ns3::Ipv6Route>, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
<     register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Ns3Ipv6Header_Unsigned_short_Ns3Ptr__lt__ns3Ipv6Interface__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<ns3::Packet>, ns3::Ipv6Header, unsigned short, ns3::Ptr<ns3::Ipv6Interface>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
<     register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3Socket__gt___Const_ns3Address___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
<     register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3Socket__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<ns3::Socket>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
<     register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3Socket__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<ns3::Socket>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
<     register_Ns3CallbackImpl__Void_Ns3SequenceNumber__lt__unsigned_int__int__gt___Ns3SequenceNumber__lt__unsigned_int__int__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::SequenceNumber<unsigned int, int>, ns3::SequenceNumber<unsigned int, int>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
<     register_Ns3CallbackImpl__Void_Ns3TcpSocketTcpStates_t_Ns3TcpSocketTcpStates_t_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::TcpSocket::TcpStates_t, ns3::TcpSocket::TcpStates_t, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
<     register_Ns3CallbackImpl__Void_Ns3TcpSocketStateEcnState_t_Ns3TcpSocketStateEcnState_t_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::TcpSocketState::EcnState_t, ns3::TcpSocketState::EcnState_t, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
<     register_Ns3CallbackImpl__Void_Ns3TcpSocketStateTcpCongState_t_Ns3TcpSocketStateTcpCongState_t_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::TcpSocketState::TcpCongState_t, ns3::TcpSocketState::TcpCongState_t, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
<     register_Ns3CallbackImpl__Void_Ns3Time_Ns3Time_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Time, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
<     register_Ns3CallbackImpl__Void_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
<     register_Ns3CallbackImpl__Void_Unsigned_int_Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, unsigned int, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
---
>     register_Ns3FqCoDelIpv4PacketFilter_methods(root_module, root_module['ns3::FqCoDelIpv4PacketFilter'])
>     register_Ns3FqCoDelIpv6PacketFilter_methods(root_module, root_module['ns3::FqCoDelIpv6PacketFilter'])
1667d1258
<     register_Ns3ArpQueueDiscItem_methods(root_module, root_module['ns3::ArpQueueDiscItem'])
1678d1268
<     cls.add_binary_comparison_operator('==')
1681a1272
>     cls.add_binary_comparison_operator('==')
1686c1277
<     ## address.h (module 'network'): ns3::Address::Address(ns3::Address const & address) [constructor]
---
>     ## address.h (module 'network'): ns3::Address::Address(ns3::Address const & address) [copy constructor]
1748c1339
<     ## trace-helper.h (module 'network'): ns3::AsciiTraceHelper::AsciiTraceHelper(ns3::AsciiTraceHelper const & arg0) [constructor]
---
>     ## trace-helper.h (module 'network'): ns3::AsciiTraceHelper::AsciiTraceHelper(ns3::AsciiTraceHelper const & arg0) [copy constructor]
1752c1343
<     ## trace-helper.h (module 'network'): ns3::Ptr<ns3::OutputStreamWrapper> ns3::AsciiTraceHelper::CreateFileStream(std::string filename, std::ios_base::openmode filemode=std::ios_base::out) [member function]
---
>     ## trace-helper.h (module 'network'): ns3::Ptr<ns3::OutputStreamWrapper> ns3::AsciiTraceHelper::CreateFileStream(std::string filename, std::_Ios_Openmode filemode=std::ios_base::out) [member function]
1755,1756c1346,1347
<                    [param('std::string', 'filename'), param('std::ios_base::openmode', 'filemode', default_value='std::ios_base::out')])
<     ## trace-helper.h (module 'network'): static void ns3::AsciiTraceHelper::DefaultDequeueSinkWithContext(ns3::Ptr<ns3::OutputStreamWrapper> file, std::string context, ns3::Ptr<const ns3::Packet> p) [member function]
---
>                    [param('std::string', 'filename'), param('std::_Ios_Openmode', 'filemode', default_value='std::ios_base::out')])
>     ## trace-helper.h (module 'network'): static void ns3::AsciiTraceHelper::DefaultDequeueSinkWithContext(ns3::Ptr<ns3::OutputStreamWrapper> file, std::string context, ns3::Ptr<ns3::Packet const> p) [member function]
1761c1352
<     ## trace-helper.h (module 'network'): static void ns3::AsciiTraceHelper::DefaultDequeueSinkWithoutContext(ns3::Ptr<ns3::OutputStreamWrapper> file, ns3::Ptr<const ns3::Packet> p) [member function]
---
>     ## trace-helper.h (module 'network'): static void ns3::AsciiTraceHelper::DefaultDequeueSinkWithoutContext(ns3::Ptr<ns3::OutputStreamWrapper> file, ns3::Ptr<ns3::Packet const> p) [member function]
1766c1357
<     ## trace-helper.h (module 'network'): static void ns3::AsciiTraceHelper::DefaultDropSinkWithContext(ns3::Ptr<ns3::OutputStreamWrapper> file, std::string context, ns3::Ptr<const ns3::Packet> p) [member function]
---
>     ## trace-helper.h (module 'network'): static void ns3::AsciiTraceHelper::DefaultDropSinkWithContext(ns3::Ptr<ns3::OutputStreamWrapper> file, std::string context, ns3::Ptr<ns3::Packet const> p) [member function]
1771c1362
<     ## trace-helper.h (module 'network'): static void ns3::AsciiTraceHelper::DefaultDropSinkWithoutContext(ns3::Ptr<ns3::OutputStreamWrapper> file, ns3::Ptr<const ns3::Packet> p) [member function]
---
>     ## trace-helper.h (module 'network'): static void ns3::AsciiTraceHelper::DefaultDropSinkWithoutContext(ns3::Ptr<ns3::OutputStreamWrapper> file, ns3::Ptr<ns3::Packet const> p) [member function]
1776c1367
<     ## trace-helper.h (module 'network'): static void ns3::AsciiTraceHelper::DefaultEnqueueSinkWithContext(ns3::Ptr<ns3::OutputStreamWrapper> file, std::string context, ns3::Ptr<const ns3::Packet> p) [member function]
---
>     ## trace-helper.h (module 'network'): static void ns3::AsciiTraceHelper::DefaultEnqueueSinkWithContext(ns3::Ptr<ns3::OutputStreamWrapper> file, std::string context, ns3::Ptr<ns3::Packet const> p) [member function]
1781c1372
<     ## trace-helper.h (module 'network'): static void ns3::AsciiTraceHelper::DefaultEnqueueSinkWithoutContext(ns3::Ptr<ns3::OutputStreamWrapper> file, ns3::Ptr<const ns3::Packet> p) [member function]
---
>     ## trace-helper.h (module 'network'): static void ns3::AsciiTraceHelper::DefaultEnqueueSinkWithoutContext(ns3::Ptr<ns3::OutputStreamWrapper> file, ns3::Ptr<ns3::Packet const> p) [member function]
1786c1377
<     ## trace-helper.h (module 'network'): static void ns3::AsciiTraceHelper::DefaultReceiveSinkWithContext(ns3::Ptr<ns3::OutputStreamWrapper> file, std::string context, ns3::Ptr<const ns3::Packet> p) [member function]
---
>     ## trace-helper.h (module 'network'): static void ns3::AsciiTraceHelper::DefaultReceiveSinkWithContext(ns3::Ptr<ns3::OutputStreamWrapper> file, std::string context, ns3::Ptr<ns3::Packet const> p) [member function]
1791c1382
<     ## trace-helper.h (module 'network'): static void ns3::AsciiTraceHelper::DefaultReceiveSinkWithoutContext(ns3::Ptr<ns3::OutputStreamWrapper> file, ns3::Ptr<const ns3::Packet> p) [member function]
---
>     ## trace-helper.h (module 'network'): static void ns3::AsciiTraceHelper::DefaultReceiveSinkWithoutContext(ns3::Ptr<ns3::OutputStreamWrapper> file, ns3::Ptr<ns3::Packet const> p) [member function]
1807c1398
<     ## trace-helper.h (module 'network'): ns3::AsciiTraceHelperForDevice::AsciiTraceHelperForDevice(ns3::AsciiTraceHelperForDevice const & arg0) [constructor]
---
>     ## trace-helper.h (module 'network'): ns3::AsciiTraceHelperForDevice::AsciiTraceHelperForDevice(ns3::AsciiTraceHelperForDevice const & arg0) [copy constructor]
1863c1454
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
1867c1458
<     ## internet-trace-helper.h (module 'internet'): ns3::AsciiTraceHelperForIpv4::AsciiTraceHelperForIpv4(ns3::AsciiTraceHelperForIpv4 const & arg0) [constructor]
---
>     ## internet-trace-helper.h (module 'internet'): ns3::AsciiTraceHelperForIpv4::AsciiTraceHelperForIpv4(ns3::AsciiTraceHelperForIpv4 const & arg0) [copy constructor]
1923c1514
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
1927c1518
<     ## internet-trace-helper.h (module 'internet'): ns3::AsciiTraceHelperForIpv6::AsciiTraceHelperForIpv6(ns3::AsciiTraceHelperForIpv6 const & arg0) [constructor]
---
>     ## internet-trace-helper.h (module 'internet'): ns3::AsciiTraceHelperForIpv6::AsciiTraceHelperForIpv6(ns3::AsciiTraceHelperForIpv6 const & arg0) [copy constructor]
1983c1574
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
1987c1578
<     ## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList::AttributeConstructionList(ns3::AttributeConstructionList const & arg0) [constructor]
---
>     ## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList::AttributeConstructionList(ns3::AttributeConstructionList const & arg0) [copy constructor]
1991c1582
<     ## attribute-construction-list.h (module 'core'): void ns3::AttributeConstructionList::Add(std::string name, ns3::Ptr<const ns3::AttributeChecker> checker, ns3::Ptr<ns3::AttributeValue> value) [member function]
---
>     ## attribute-construction-list.h (module 'core'): void ns3::AttributeConstructionList::Add(std::string name, ns3::Ptr<ns3::AttributeChecker const> checker, ns3::Ptr<ns3::AttributeValue> value) [member function]
1995c1586
<     ## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList::CIterator ns3::AttributeConstructionList::Begin() const [member function]
---
>     ## attribute-construction-list.h (module 'core'): std::_List_const_iterator<ns3::AttributeConstructionList::Item> ns3::AttributeConstructionList::Begin() const [member function]
1997c1588
<                    'ns3::AttributeConstructionList::CIterator', 
---
>                    'std::_List_const_iterator< ns3::AttributeConstructionList::Item >', 
2000c1591
<     ## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList::CIterator ns3::AttributeConstructionList::End() const [member function]
---
>     ## attribute-construction-list.h (module 'core'): std::_List_const_iterator<ns3::AttributeConstructionList::Item> ns3::AttributeConstructionList::End() const [member function]
2002c1593
<                    'ns3::AttributeConstructionList::CIterator', 
---
>                    'std::_List_const_iterator< ns3::AttributeConstructionList::Item >', 
2005c1596
<     ## attribute-construction-list.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::AttributeConstructionList::Find(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
---
>     ## attribute-construction-list.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::AttributeConstructionList::Find(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
2015c1606
<     ## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList::Item::Item(ns3::AttributeConstructionList::Item const & arg0) [constructor]
---
>     ## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList::Item::Item(ns3::AttributeConstructionList::Item const & arg0) [copy constructor]
2026,2027d1616
<     ## buffer.h (module 'network'): ns3::Buffer::Buffer(ns3::Buffer const & o) [constructor]
<     cls.add_constructor([param('ns3::Buffer const &', 'o')])
2033a1623,1624
>     ## buffer.h (module 'network'): ns3::Buffer::Buffer(ns3::Buffer const & o) [copy constructor]
>     cls.add_constructor([param('ns3::Buffer const &', 'o')])
2106c1697
<     ## buffer.h (module 'network'): ns3::Buffer::Iterator::Iterator(ns3::Buffer::Iterator const & arg0) [constructor]
---
>     ## buffer.h (module 'network'): ns3::Buffer::Iterator::Iterator(ns3::Buffer::Iterator const & arg0) [copy constructor]
2266c1857
<     ## packet.h (module 'network'): ns3::ByteTagIterator::ByteTagIterator(ns3::ByteTagIterator const & arg0) [constructor]
---
>     ## packet.h (module 'network'): ns3::ByteTagIterator::ByteTagIterator(ns3::ByteTagIterator const & arg0) [copy constructor]
2280c1871
<     ## packet.h (module 'network'): ns3::ByteTagIterator::Item::Item(ns3::ByteTagIterator::Item const & arg0) [constructor]
---
>     ## packet.h (module 'network'): ns3::ByteTagIterator::Item::Item(ns3::ByteTagIterator::Item const & arg0) [copy constructor]
2307c1898
<     ## byte-tag-list.h (module 'network'): ns3::ByteTagList::ByteTagList(ns3::ByteTagList const & o) [constructor]
---
>     ## byte-tag-list.h (module 'network'): ns3::ByteTagList::ByteTagList(ns3::ByteTagList const & o) [copy constructor]
2341c1932
<     ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator::Iterator(ns3::ByteTagList::Iterator const & arg0) [constructor]
---
>     ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator::Iterator(ns3::ByteTagList::Iterator const & arg0) [copy constructor]
2360c1951
<     ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator::Item::Item(ns3::ByteTagList::Iterator::Item const & arg0) [constructor]
---
>     ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator::Item::Item(ns3::ByteTagList::Iterator::Item const & arg0) [copy constructor]
2377c1968
<     ## callback.h (module 'core'): ns3::CallbackBase::CallbackBase(ns3::CallbackBase const & arg0) [constructor]
---
>     ## callback.h (module 'core'): ns3::CallbackBase::CallbackBase(ns3::CallbackBase const & arg0) [copy constructor]
2433,2614d2023
< def register_Ns3DataRate_methods(root_module, cls):
<     cls.add_output_stream_operator()
<     cls.add_binary_comparison_operator('!=')
<     cls.add_binary_comparison_operator('<')
<     cls.add_binary_comparison_operator('<=')
<     cls.add_binary_comparison_operator('==')
<     cls.add_binary_comparison_operator('>')
<     cls.add_binary_comparison_operator('>=')
<     ## data-rate.h (module 'network'): ns3::DataRate::DataRate(ns3::DataRate const & arg0) [constructor]
<     cls.add_constructor([param('ns3::DataRate const &', 'arg0')])
<     ## data-rate.h (module 'network'): ns3::DataRate::DataRate() [constructor]
<     cls.add_constructor([])
<     ## data-rate.h (module 'network'): ns3::DataRate::DataRate(uint64_t bps) [constructor]
<     cls.add_constructor([param('uint64_t', 'bps')])
<     ## data-rate.h (module 'network'): ns3::DataRate::DataRate(std::string rate) [constructor]
<     cls.add_constructor([param('std::string', 'rate')])
<     ## data-rate.h (module 'network'): ns3::Time ns3::DataRate::CalculateBitsTxTime(uint32_t bits) const [member function]
<     cls.add_method('CalculateBitsTxTime', 
<                    'ns3::Time', 
<                    [param('uint32_t', 'bits')], 
<                    is_const=True)
<     ## data-rate.h (module 'network'): ns3::Time ns3::DataRate::CalculateBytesTxTime(uint32_t bytes) const [member function]
<     cls.add_method('CalculateBytesTxTime', 
<                    'ns3::Time', 
<                    [param('uint32_t', 'bytes')], 
<                    is_const=True)
<     ## data-rate.h (module 'network'): double ns3::DataRate::CalculateTxTime(uint32_t bytes) const [member function]
<     cls.add_method('CalculateTxTime', 
<                    'double', 
<                    [param('uint32_t', 'bytes')], 
<                    is_const=True, deprecated=True)
<     ## data-rate.h (module 'network'): uint64_t ns3::DataRate::GetBitRate() const [member function]
<     cls.add_method('GetBitRate', 
<                    'uint64_t', 
<                    [], 
<                    is_const=True)
<     return
< 
< def register_Ns3DefaultDeleter__Ns3AttributeAccessor_methods(root_module, cls):
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::AttributeAccessor>::DefaultDeleter() [constructor]
<     cls.add_constructor([])
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::AttributeAccessor>::DefaultDeleter(ns3::DefaultDeleter<ns3::AttributeAccessor> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::DefaultDeleter< ns3::AttributeAccessor > const &', 'arg0')])
<     ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::AttributeAccessor>::Delete(ns3::AttributeAccessor * object) [member function]
<     cls.add_method('Delete', 
<                    'void', 
<                    [param('ns3::AttributeAccessor *', 'object')], 
<                    is_static=True)
<     return
< 
< def register_Ns3DefaultDeleter__Ns3AttributeChecker_methods(root_module, cls):
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::AttributeChecker>::DefaultDeleter() [constructor]
<     cls.add_constructor([])
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::AttributeChecker>::DefaultDeleter(ns3::DefaultDeleter<ns3::AttributeChecker> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::DefaultDeleter< ns3::AttributeChecker > const &', 'arg0')])
<     ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::AttributeChecker>::Delete(ns3::AttributeChecker * object) [member function]
<     cls.add_method('Delete', 
<                    'void', 
<                    [param('ns3::AttributeChecker *', 'object')], 
<                    is_static=True)
<     return
< 
< def register_Ns3DefaultDeleter__Ns3AttributeValue_methods(root_module, cls):
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::AttributeValue>::DefaultDeleter() [constructor]
<     cls.add_constructor([])
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::AttributeValue>::DefaultDeleter(ns3::DefaultDeleter<ns3::AttributeValue> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::DefaultDeleter< ns3::AttributeValue > const &', 'arg0')])
<     ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::AttributeValue>::Delete(ns3::AttributeValue * object) [member function]
<     cls.add_method('Delete', 
<                    'void', 
<                    [param('ns3::AttributeValue *', 'object')], 
<                    is_static=True)
<     return
< 
< def register_Ns3DefaultDeleter__Ns3CallbackImplBase_methods(root_module, cls):
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::CallbackImplBase>::DefaultDeleter() [constructor]
<     cls.add_constructor([])
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::CallbackImplBase>::DefaultDeleter(ns3::DefaultDeleter<ns3::CallbackImplBase> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::DefaultDeleter< ns3::CallbackImplBase > const &', 'arg0')])
<     ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::CallbackImplBase>::Delete(ns3::CallbackImplBase * object) [member function]
<     cls.add_method('Delete', 
<                    'void', 
<                    [param('ns3::CallbackImplBase *', 'object')], 
<                    is_static=True)
<     return
< 
< def register_Ns3DefaultDeleter__Ns3EventImpl_methods(root_module, cls):
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::EventImpl>::DefaultDeleter() [constructor]
<     cls.add_constructor([])
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::EventImpl>::DefaultDeleter(ns3::DefaultDeleter<ns3::EventImpl> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::DefaultDeleter< ns3::EventImpl > const &', 'arg0')])
<     ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::EventImpl>::Delete(ns3::EventImpl * object) [member function]
<     cls.add_method('Delete', 
<                    'void', 
<                    [param('ns3::EventImpl *', 'object')], 
<                    is_static=True)
<     return
< 
< def register_Ns3DefaultDeleter__Ns3HashImplementation_methods(root_module, cls):
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::Hash::Implementation>::DefaultDeleter() [constructor]
<     cls.add_constructor([])
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::Hash::Implementation>::DefaultDeleter(ns3::DefaultDeleter<ns3::Hash::Implementation> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::DefaultDeleter< ns3::Hash::Implementation > const &', 'arg0')])
<     ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::Hash::Implementation>::Delete(ns3::Hash::Implementation * object) [member function]
<     cls.add_method('Delete', 
<                    'void', 
<                    [param('ns3::Hash::Implementation *', 'object')], 
<                    is_static=True)
<     return
< 
< def register_Ns3DefaultDeleter__Ns3Ipv4Route_methods(root_module, cls):
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::Ipv4Route>::DefaultDeleter() [constructor]
<     cls.add_constructor([])
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::Ipv4Route>::DefaultDeleter(ns3::DefaultDeleter<ns3::Ipv4Route> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::DefaultDeleter< ns3::Ipv4Route > const &', 'arg0')])
<     ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::Ipv4Route>::Delete(ns3::Ipv4Route * object) [member function]
<     cls.add_method('Delete', 
<                    'void', 
<                    [param('ns3::Ipv4Route *', 'object')], 
<                    is_static=True)
<     return
< 
< def register_Ns3DefaultDeleter__Ns3Ipv6Route_methods(root_module, cls):
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::Ipv6Route>::DefaultDeleter() [constructor]
<     cls.add_constructor([])
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::Ipv6Route>::DefaultDeleter(ns3::DefaultDeleter<ns3::Ipv6Route> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::DefaultDeleter< ns3::Ipv6Route > const &', 'arg0')])
<     ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::Ipv6Route>::Delete(ns3::Ipv6Route * object) [member function]
<     cls.add_method('Delete', 
<                    'void', 
<                    [param('ns3::Ipv6Route *', 'object')], 
<                    is_static=True)
<     return
< 
< def register_Ns3DefaultDeleter__Ns3NixVector_methods(root_module, cls):
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::NixVector>::DefaultDeleter() [constructor]
<     cls.add_constructor([])
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::NixVector>::DefaultDeleter(ns3::DefaultDeleter<ns3::NixVector> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::DefaultDeleter< ns3::NixVector > const &', 'arg0')])
<     ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::NixVector>::Delete(ns3::NixVector * object) [member function]
<     cls.add_method('Delete', 
<                    'void', 
<                    [param('ns3::NixVector *', 'object')], 
<                    is_static=True)
<     return
< 
< def register_Ns3DefaultDeleter__Ns3OutputStreamWrapper_methods(root_module, cls):
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::OutputStreamWrapper>::DefaultDeleter() [constructor]
<     cls.add_constructor([])
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::OutputStreamWrapper>::DefaultDeleter(ns3::DefaultDeleter<ns3::OutputStreamWrapper> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::DefaultDeleter< ns3::OutputStreamWrapper > const &', 'arg0')])
<     ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::OutputStreamWrapper>::Delete(ns3::OutputStreamWrapper * object) [member function]
<     cls.add_method('Delete', 
<                    'void', 
<                    [param('ns3::OutputStreamWrapper *', 'object')], 
<                    is_static=True)
<     return
< 
< def register_Ns3DefaultDeleter__Ns3Packet_methods(root_module, cls):
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::Packet>::DefaultDeleter() [constructor]
<     cls.add_constructor([])
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::Packet>::DefaultDeleter(ns3::DefaultDeleter<ns3::Packet> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::DefaultDeleter< ns3::Packet > const &', 'arg0')])
<     ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::Packet>::Delete(ns3::Packet * object) [member function]
<     cls.add_method('Delete', 
<                    'void', 
<                    [param('ns3::Packet *', 'object')], 
<                    is_static=True)
<     return
< 
< def register_Ns3DefaultDeleter__Ns3TraceSourceAccessor_methods(root_module, cls):
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::TraceSourceAccessor>::DefaultDeleter() [constructor]
<     cls.add_constructor([])
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::TraceSourceAccessor>::DefaultDeleter(ns3::DefaultDeleter<ns3::TraceSourceAccessor> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::DefaultDeleter< ns3::TraceSourceAccessor > const &', 'arg0')])
<     ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::TraceSourceAccessor>::Delete(ns3::TraceSourceAccessor * object) [member function]
<     cls.add_method('Delete', 
<                    'void', 
<                    [param('ns3::TraceSourceAccessor *', 'object')], 
<                    is_static=True)
<     return
< 
2616d2024
<     cls.add_binary_comparison_operator('==')
2618,2619c2026,2027
<     cls.add_binary_comparison_operator('<')
<     ## event-id.h (module 'core'): ns3::EventId::EventId(ns3::EventId const & arg0) [constructor]
---
>     cls.add_binary_comparison_operator('==')
>     ## event-id.h (module 'core'): ns3::EventId::EventId(ns3::EventId const & arg0) [copy constructor]
2856c2264
<     ## global-router-interface.h (module 'internet'): ns3::GlobalRoutingLinkRecord::GlobalRoutingLinkRecord(ns3::GlobalRoutingLinkRecord const & arg0) [constructor]
---
>     ## global-router-interface.h (module 'internet'): ns3::GlobalRoutingLinkRecord::GlobalRoutingLinkRecord(ns3::GlobalRoutingLinkRecord const & arg0) [copy constructor]
2901c2309
<     ## hash.h (module 'core'): ns3::Hasher::Hasher(ns3::Hasher const & arg0) [constructor]
---
>     ## hash.h (module 'core'): ns3::Hasher::Hasher(ns3::Hasher const & arg0) [copy constructor]
2907c2315
<     ## hash.h (module 'core'): uint32_t ns3::Hasher::GetHash32(char const * buffer, std::size_t const size) [member function]
---
>     ## hash.h (module 'core'): uint32_t ns3::Hasher::GetHash32(char const * buffer, size_t const size) [member function]
2910c2318
<                    [param('char const *', 'buffer'), param('std::size_t const', 'size')])
---
>                    [param('char const *', 'buffer'), param('size_t const', 'size')])
2915c2323
<     ## hash.h (module 'core'): uint64_t ns3::Hasher::GetHash64(char const * buffer, std::size_t const size) [member function]
---
>     ## hash.h (module 'core'): uint64_t ns3::Hasher::GetHash64(char const * buffer, size_t const size) [member function]
2918c2326
<                    [param('char const *', 'buffer'), param('std::size_t const', 'size')])
---
>                    [param('char const *', 'buffer'), param('size_t const', 'size')])
2930c2338
<     ## inet6-socket-address.h (module 'network'): ns3::Inet6SocketAddress::Inet6SocketAddress(ns3::Inet6SocketAddress const & arg0) [constructor]
---
>     ## inet6-socket-address.h (module 'network'): ns3::Inet6SocketAddress::Inet6SocketAddress(ns3::Inet6SocketAddress const & arg0) [copy constructor]
2973c2381
<     ## inet-socket-address.h (module 'network'): ns3::InetSocketAddress::InetSocketAddress(ns3::InetSocketAddress const & arg0) [constructor]
---
>     ## inet-socket-address.h (module 'network'): ns3::InetSocketAddress::InetSocketAddress(ns3::InetSocketAddress const & arg0) [copy constructor]
3027c2435
<     ## int-to-type.h (module 'core'): ns3::IntToType<0>::IntToType(ns3::IntToType<0> const & arg0) [constructor]
---
>     ## int-to-type.h (module 'core'): ns3::IntToType<0>::IntToType(ns3::IntToType<0> const & arg0) [copy constructor]
3034c2442
<     ## int-to-type.h (module 'core'): ns3::IntToType<1>::IntToType(ns3::IntToType<1> const & arg0) [constructor]
---
>     ## int-to-type.h (module 'core'): ns3::IntToType<1>::IntToType(ns3::IntToType<1> const & arg0) [copy constructor]
3041c2449
<     ## int-to-type.h (module 'core'): ns3::IntToType<2>::IntToType(ns3::IntToType<2> const & arg0) [constructor]
---
>     ## int-to-type.h (module 'core'): ns3::IntToType<2>::IntToType(ns3::IntToType<2> const & arg0) [copy constructor]
3048c2456
<     ## int-to-type.h (module 'core'): ns3::IntToType<3>::IntToType(ns3::IntToType<3> const & arg0) [constructor]
---
>     ## int-to-type.h (module 'core'): ns3::IntToType<3>::IntToType(ns3::IntToType<3> const & arg0) [copy constructor]
3055c2463
<     ## int-to-type.h (module 'core'): ns3::IntToType<4>::IntToType(ns3::IntToType<4> const & arg0) [constructor]
---
>     ## int-to-type.h (module 'core'): ns3::IntToType<4>::IntToType(ns3::IntToType<4> const & arg0) [copy constructor]
3062c2470
<     ## int-to-type.h (module 'core'): ns3::IntToType<5>::IntToType(ns3::IntToType<5> const & arg0) [constructor]
---
>     ## int-to-type.h (module 'core'): ns3::IntToType<5>::IntToType(ns3::IntToType<5> const & arg0) [copy constructor]
3069c2477
<     ## int-to-type.h (module 'core'): ns3::IntToType<6>::IntToType(ns3::IntToType<6> const & arg0) [constructor]
---
>     ## int-to-type.h (module 'core'): ns3::IntToType<6>::IntToType(ns3::IntToType<6> const & arg0) [copy constructor]
3074,3075d2481
<     cls.add_output_stream_operator()
<     cls.add_binary_comparison_operator('==')
3078c2484,2486
<     ## ipv4-address.h (module 'network'): ns3::Ipv4Address::Ipv4Address(ns3::Ipv4Address const & arg0) [constructor]
---
>     cls.add_output_stream_operator()
>     cls.add_binary_comparison_operator('==')
>     ## ipv4-address.h (module 'network'): ns3::Ipv4Address::Ipv4Address(ns3::Ipv4Address const & arg0) [copy constructor]
3145c2553
<                    is_const=True, deprecated=True)
---
>                    is_const=True)
3194c2602
<     ## ipv4-address-generator.h (module 'internet'): ns3::Ipv4AddressGenerator::Ipv4AddressGenerator(ns3::Ipv4AddressGenerator const & arg0) [constructor]
---
>     ## ipv4-address-generator.h (module 'internet'): ns3::Ipv4AddressGenerator::Ipv4AddressGenerator(ns3::Ipv4AddressGenerator const & arg0) [copy constructor]
3221,3230d2628
<     ## ipv4-address-generator.h (module 'internet'): static bool ns3::Ipv4AddressGenerator::IsAddressAllocated(ns3::Ipv4Address const addr) [member function]
<     cls.add_method('IsAddressAllocated', 
<                    'bool', 
<                    [param('ns3::Ipv4Address const', 'addr')], 
<                    is_static=True)
<     ## ipv4-address-generator.h (module 'internet'): static bool ns3::Ipv4AddressGenerator::IsNetworkAllocated(ns3::Ipv4Address const addr, ns3::Ipv4Mask const mask) [member function]
<     cls.add_method('IsNetworkAllocated', 
<                    'bool', 
<                    [param('ns3::Ipv4Address const', 'addr'), param('ns3::Ipv4Mask const', 'mask')], 
<                    is_static=True)
3254c2652
<     ## ipv4-address-helper.h (module 'internet'): ns3::Ipv4AddressHelper::Ipv4AddressHelper(ns3::Ipv4AddressHelper const & arg0) [constructor]
---
>     ## ipv4-address-helper.h (module 'internet'): ns3::Ipv4AddressHelper::Ipv4AddressHelper(ns3::Ipv4AddressHelper const & arg0) [copy constructor]
3278,3395d2675
< def register_Ns3Ipv4EndPoint_methods(root_module, cls):
<     ## ipv4-end-point.h (module 'internet'): ns3::Ipv4EndPoint::Ipv4EndPoint(ns3::Ipv4EndPoint const & arg0) [constructor]
<     cls.add_constructor([param('ns3::Ipv4EndPoint const &', 'arg0')])
<     ## ipv4-end-point.h (module 'internet'): ns3::Ipv4EndPoint::Ipv4EndPoint(ns3::Ipv4Address address, uint16_t port) [constructor]
<     cls.add_constructor([param('ns3::Ipv4Address', 'address'), param('uint16_t', 'port')])
<     ## ipv4-end-point.h (module 'internet'): void ns3::Ipv4EndPoint::BindToNetDevice(ns3::Ptr<ns3::NetDevice> netdevice) [member function]
<     cls.add_method('BindToNetDevice', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::NetDevice >', 'netdevice')])
<     ## ipv4-end-point.h (module 'internet'): void ns3::Ipv4EndPoint::ForwardIcmp(ns3::Ipv4Address icmpSource, uint8_t icmpTtl, uint8_t icmpType, uint8_t icmpCode, uint32_t icmpInfo) [member function]
<     cls.add_method('ForwardIcmp', 
<                    'void', 
<                    [param('ns3::Ipv4Address', 'icmpSource'), param('uint8_t', 'icmpTtl'), param('uint8_t', 'icmpType'), param('uint8_t', 'icmpCode'), param('uint32_t', 'icmpInfo')])
<     ## ipv4-end-point.h (module 'internet'): void ns3::Ipv4EndPoint::ForwardUp(ns3::Ptr<ns3::Packet> p, ns3::Ipv4Header const & header, uint16_t sport, ns3::Ptr<ns3::Ipv4Interface> incomingInterface) [member function]
<     cls.add_method('ForwardUp', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Packet >', 'p'), param('ns3::Ipv4Header const &', 'header'), param('uint16_t', 'sport'), param('ns3::Ptr< ns3::Ipv4Interface >', 'incomingInterface')])
<     ## ipv4-end-point.h (module 'internet'): ns3::Ptr<ns3::NetDevice> ns3::Ipv4EndPoint::GetBoundNetDevice() [member function]
<     cls.add_method('GetBoundNetDevice', 
<                    'ns3::Ptr< ns3::NetDevice >', 
<                    [])
<     ## ipv4-end-point.h (module 'internet'): ns3::Ipv4Address ns3::Ipv4EndPoint::GetLocalAddress() [member function]
<     cls.add_method('GetLocalAddress', 
<                    'ns3::Ipv4Address', 
<                    [])
<     ## ipv4-end-point.h (module 'internet'): uint16_t ns3::Ipv4EndPoint::GetLocalPort() [member function]
<     cls.add_method('GetLocalPort', 
<                    'uint16_t', 
<                    [])
<     ## ipv4-end-point.h (module 'internet'): ns3::Ipv4Address ns3::Ipv4EndPoint::GetPeerAddress() [member function]
<     cls.add_method('GetPeerAddress', 
<                    'ns3::Ipv4Address', 
<                    [])
<     ## ipv4-end-point.h (module 'internet'): uint16_t ns3::Ipv4EndPoint::GetPeerPort() [member function]
<     cls.add_method('GetPeerPort', 
<                    'uint16_t', 
<                    [])
<     ## ipv4-end-point.h (module 'internet'): bool ns3::Ipv4EndPoint::IsRxEnabled() [member function]
<     cls.add_method('IsRxEnabled', 
<                    'bool', 
<                    [])
<     ## ipv4-end-point.h (module 'internet'): void ns3::Ipv4EndPoint::SetDestroyCallback(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> callback) [member function]
<     cls.add_method('SetDestroyCallback', 
<                    'void', 
<                    [param('ns3::Callback< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'callback')])
<     ## ipv4-end-point.h (module 'internet'): void ns3::Ipv4EndPoint::SetIcmpCallback(ns3::Callback<void, ns3::Ipv4Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty> callback) [member function]
<     cls.add_method('SetIcmpCallback', 
<                    'void', 
<                    [param('ns3::Callback< void, ns3::Ipv4Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'callback')])
<     ## ipv4-end-point.h (module 'internet'): void ns3::Ipv4EndPoint::SetLocalAddress(ns3::Ipv4Address address) [member function]
<     cls.add_method('SetLocalAddress', 
<                    'void', 
<                    [param('ns3::Ipv4Address', 'address')])
<     ## ipv4-end-point.h (module 'internet'): void ns3::Ipv4EndPoint::SetPeer(ns3::Ipv4Address address, uint16_t port) [member function]
<     cls.add_method('SetPeer', 
<                    'void', 
<                    [param('ns3::Ipv4Address', 'address'), param('uint16_t', 'port')])
<     ## ipv4-end-point.h (module 'internet'): void ns3::Ipv4EndPoint::SetRxCallback(ns3::Callback<void, ns3::Ptr<ns3::Packet>, ns3::Ipv4Header, unsigned short, ns3::Ptr<ns3::Ipv4Interface>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> callback) [member function]
<     cls.add_method('SetRxCallback', 
<                    'void', 
<                    [param('ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Ipv4Header, unsigned short, ns3::Ptr< ns3::Ipv4Interface >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'callback')])
<     ## ipv4-end-point.h (module 'internet'): void ns3::Ipv4EndPoint::SetRxEnabled(bool enabled) [member function]
<     cls.add_method('SetRxEnabled', 
<                    'void', 
<                    [param('bool', 'enabled')])
<     return
< 
< def register_Ns3Ipv4EndPointDemux_methods(root_module, cls):
<     ## ipv4-end-point-demux.h (module 'internet'): ns3::Ipv4EndPointDemux::Ipv4EndPointDemux(ns3::Ipv4EndPointDemux const & arg0) [constructor]
<     cls.add_constructor([param('ns3::Ipv4EndPointDemux const &', 'arg0')])
<     ## ipv4-end-point-demux.h (module 'internet'): ns3::Ipv4EndPointDemux::Ipv4EndPointDemux() [constructor]
<     cls.add_constructor([])
<     ## ipv4-end-point-demux.h (module 'internet'): ns3::Ipv4EndPoint * ns3::Ipv4EndPointDemux::Allocate() [member function]
<     cls.add_method('Allocate', 
<                    'ns3::Ipv4EndPoint *', 
<                    [])
<     ## ipv4-end-point-demux.h (module 'internet'): ns3::Ipv4EndPoint * ns3::Ipv4EndPointDemux::Allocate(ns3::Ipv4Address address) [member function]
<     cls.add_method('Allocate', 
<                    'ns3::Ipv4EndPoint *', 
<                    [param('ns3::Ipv4Address', 'address')])
<     ## ipv4-end-point-demux.h (module 'internet'): ns3::Ipv4EndPoint * ns3::Ipv4EndPointDemux::Allocate(ns3::Ptr<ns3::NetDevice> boundNetDevice, uint16_t port) [member function]
<     cls.add_method('Allocate', 
<                    'ns3::Ipv4EndPoint *', 
<                    [param('ns3::Ptr< ns3::NetDevice >', 'boundNetDevice'), param('uint16_t', 'port')])
<     ## ipv4-end-point-demux.h (module 'internet'): ns3::Ipv4EndPoint * ns3::Ipv4EndPointDemux::Allocate(ns3::Ptr<ns3::NetDevice> boundNetDevice, ns3::Ipv4Address address, uint16_t port) [member function]
<     cls.add_method('Allocate', 
<                    'ns3::Ipv4EndPoint *', 
<                    [param('ns3::Ptr< ns3::NetDevice >', 'boundNetDevice'), param('ns3::Ipv4Address', 'address'), param('uint16_t', 'port')])
<     ## ipv4-end-point-demux.h (module 'internet'): ns3::Ipv4EndPoint * ns3::Ipv4EndPointDemux::Allocate(ns3::Ptr<ns3::NetDevice> boundNetDevice, ns3::Ipv4Address localAddress, uint16_t localPort, ns3::Ipv4Address peerAddress, uint16_t peerPort) [member function]
<     cls.add_method('Allocate', 
<                    'ns3::Ipv4EndPoint *', 
<                    [param('ns3::Ptr< ns3::NetDevice >', 'boundNetDevice'), param('ns3::Ipv4Address', 'localAddress'), param('uint16_t', 'localPort'), param('ns3::Ipv4Address', 'peerAddress'), param('uint16_t', 'peerPort')])
<     ## ipv4-end-point-demux.h (module 'internet'): void ns3::Ipv4EndPointDemux::DeAllocate(ns3::Ipv4EndPoint * endPoint) [member function]
<     cls.add_method('DeAllocate', 
<                    'void', 
<                    [param('ns3::Ipv4EndPoint *', 'endPoint')])
<     ## ipv4-end-point-demux.h (module 'internet'): ns3::Ipv4EndPointDemux::EndPoints ns3::Ipv4EndPointDemux::GetAllEndPoints() [member function]
<     cls.add_method('GetAllEndPoints', 
<                    'ns3::Ipv4EndPointDemux::EndPoints', 
<                    [])
<     ## ipv4-end-point-demux.h (module 'internet'): ns3::Ipv4EndPointDemux::EndPoints ns3::Ipv4EndPointDemux::Lookup(ns3::Ipv4Address daddr, uint16_t dport, ns3::Ipv4Address saddr, uint16_t sport, ns3::Ptr<ns3::Ipv4Interface> incomingInterface) [member function]
<     cls.add_method('Lookup', 
<                    'ns3::Ipv4EndPointDemux::EndPoints', 
<                    [param('ns3::Ipv4Address', 'daddr'), param('uint16_t', 'dport'), param('ns3::Ipv4Address', 'saddr'), param('uint16_t', 'sport'), param('ns3::Ptr< ns3::Ipv4Interface >', 'incomingInterface')])
<     ## ipv4-end-point-demux.h (module 'internet'): bool ns3::Ipv4EndPointDemux::LookupLocal(ns3::Ptr<ns3::NetDevice> boundNetDevice, ns3::Ipv4Address addr, uint16_t port) [member function]
<     cls.add_method('LookupLocal', 
<                    'bool', 
<                    [param('ns3::Ptr< ns3::NetDevice >', 'boundNetDevice'), param('ns3::Ipv4Address', 'addr'), param('uint16_t', 'port')])
<     ## ipv4-end-point-demux.h (module 'internet'): bool ns3::Ipv4EndPointDemux::LookupPortLocal(uint16_t port) [member function]
<     cls.add_method('LookupPortLocal', 
<                    'bool', 
<                    [param('uint16_t', 'port')])
<     ## ipv4-end-point-demux.h (module 'internet'): ns3::Ipv4EndPoint * ns3::Ipv4EndPointDemux::SimpleLookup(ns3::Ipv4Address daddr, uint16_t dport, ns3::Ipv4Address saddr, uint16_t sport) [member function]
<     cls.add_method('SimpleLookup', 
<                    'ns3::Ipv4EndPoint *', 
<                    [param('ns3::Ipv4Address', 'daddr'), param('uint16_t', 'dport'), param('ns3::Ipv4Address', 'saddr'), param('uint16_t', 'sport')])
<     return
< 
3396a2677
>     cls.add_binary_comparison_operator('!=')
3399d2679
<     cls.add_binary_comparison_operator('!=')
3404c2684
<     ## ipv4-interface-address.h (module 'internet'): ns3::Ipv4InterfaceAddress::Ipv4InterfaceAddress(ns3::Ipv4InterfaceAddress const & o) [constructor]
---
>     ## ipv4-interface-address.h (module 'internet'): ns3::Ipv4InterfaceAddress::Ipv4InterfaceAddress(ns3::Ipv4InterfaceAddress const & o) [copy constructor]
3458c2738
<     ## ipv4-interface-container.h (module 'internet'): ns3::Ipv4InterfaceContainer::Ipv4InterfaceContainer(ns3::Ipv4InterfaceContainer const & arg0) [constructor]
---
>     ## ipv4-interface-container.h (module 'internet'): ns3::Ipv4InterfaceContainer::Ipv4InterfaceContainer(ns3::Ipv4InterfaceContainer const & arg0) [copy constructor]
3470c2750
<     ## ipv4-interface-container.h (module 'internet'): void ns3::Ipv4InterfaceContainer::Add(std::pair<ns3::Ptr<ns3::Ipv4>, unsigned int> ipInterfacePair) [member function]
---
>     ## ipv4-interface-container.h (module 'internet'): void ns3::Ipv4InterfaceContainer::Add(std::pair<ns3::Ptr<ns3::Ipv4>,unsigned int> ipInterfacePair) [member function]
3478c2758
<     ## ipv4-interface-container.h (module 'internet'): ns3::Ipv4InterfaceContainer::Iterator ns3::Ipv4InterfaceContainer::Begin() const [member function]
---
>     ## ipv4-interface-container.h (module 'internet'): __gnu_cxx::__normal_iterator<const std::pair<ns3::Ptr<ns3::Ipv4>, unsigned int>*,std::vector<std::pair<ns3::Ptr<ns3::Ipv4>, unsigned int>, std::allocator<std::pair<ns3::Ptr<ns3::Ipv4>, unsigned int> > > > ns3::Ipv4InterfaceContainer::Begin() const [member function]
3480c2760
<                    'ns3::Ipv4InterfaceContainer::Iterator', 
---
>                    '__gnu_cxx::__normal_iterator< std::pair< ns3::Ptr< ns3::Ipv4 >, unsigned int > const, std::vector< std::pair< ns3::Ptr< ns3::Ipv4 >, unsigned int > > >', 
3483c2763
<     ## ipv4-interface-container.h (module 'internet'): ns3::Ipv4InterfaceContainer::Iterator ns3::Ipv4InterfaceContainer::End() const [member function]
---
>     ## ipv4-interface-container.h (module 'internet'): __gnu_cxx::__normal_iterator<const std::pair<ns3::Ptr<ns3::Ipv4>, unsigned int>*,std::vector<std::pair<ns3::Ptr<ns3::Ipv4>, unsigned int>, std::allocator<std::pair<ns3::Ptr<ns3::Ipv4>, unsigned int> > > > ns3::Ipv4InterfaceContainer::End() const [member function]
3485c2765
<                    'ns3::Ipv4InterfaceContainer::Iterator', 
---
>                    '__gnu_cxx::__normal_iterator< std::pair< ns3::Ptr< ns3::Ipv4 >, unsigned int > const, std::vector< std::pair< ns3::Ptr< ns3::Ipv4 >, unsigned int > > >', 
3488c2768
<     ## ipv4-interface-container.h (module 'internet'): std::pair<ns3::Ptr<ns3::Ipv4>, unsigned int> ns3::Ipv4InterfaceContainer::Get(uint32_t i) const [member function]
---
>     ## ipv4-interface-container.h (module 'internet'): std::pair<ns3::Ptr<ns3::Ipv4>,unsigned int> ns3::Ipv4InterfaceContainer::Get(uint32_t i) const [member function]
3509a2790
>     cls.add_binary_comparison_operator('!=')
3512,3513c2793
<     cls.add_binary_comparison_operator('!=')
<     ## ipv4-address.h (module 'network'): ns3::Ipv4Mask::Ipv4Mask(ns3::Ipv4Mask const & arg0) [constructor]
---
>     ## ipv4-address.h (module 'network'): ns3::Ipv4Mask::Ipv4Mask(ns3::Ipv4Mask const & arg0) [copy constructor]
3555c2835
<                    is_const=True, deprecated=True)
---
>                    is_const=True)
3574d2853
<     cls.add_binary_comparison_operator('==')
3577c2856
<     ## ipv4-routing-table-entry.h (module 'internet'): ns3::Ipv4MulticastRoutingTableEntry::Ipv4MulticastRoutingTableEntry(ns3::Ipv4MulticastRoutingTableEntry const & route) [constructor]
---
>     ## ipv4-routing-table-entry.h (module 'internet'): ns3::Ipv4MulticastRoutingTableEntry::Ipv4MulticastRoutingTableEntry(ns3::Ipv4MulticastRoutingTableEntry const & route) [copy constructor]
3621c2900
<     ## ipv4-routing-helper.h (module 'internet'): ns3::Ipv4RoutingHelper::Ipv4RoutingHelper(ns3::Ipv4RoutingHelper const & arg0) [constructor]
---
>     ## ipv4-routing-helper.h (module 'internet'): ns3::Ipv4RoutingHelper::Ipv4RoutingHelper(ns3::Ipv4RoutingHelper const & arg0) [copy constructor]
3627c2906
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
3632c2911
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
3653c2932
<     ## ipv4-routing-helper.h (module 'internet'): static void ns3::Ipv4RoutingHelper::PrintRoutingTableAllAt(ns3::Time printTime, ns3::Ptr<ns3::OutputStreamWrapper> stream, ns3::Time::Unit unit=::ns3::Time::Unit::S) [member function]
---
>     ## ipv4-routing-helper.h (module 'internet'): static void ns3::Ipv4RoutingHelper::PrintRoutingTableAllAt(ns3::Time printTime, ns3::Ptr<ns3::OutputStreamWrapper> stream) [member function]
3656c2935
<                    [param('ns3::Time', 'printTime'), param('ns3::Ptr< ns3::OutputStreamWrapper >', 'stream'), param('ns3::Time::Unit', 'unit', default_value='::ns3::Time::Unit::S')], 
---
>                    [param('ns3::Time', 'printTime'), param('ns3::Ptr< ns3::OutputStreamWrapper >', 'stream')], 
3658c2937
<     ## ipv4-routing-helper.h (module 'internet'): static void ns3::Ipv4RoutingHelper::PrintRoutingTableAllEvery(ns3::Time printInterval, ns3::Ptr<ns3::OutputStreamWrapper> stream, ns3::Time::Unit unit=::ns3::Time::Unit::S) [member function]
---
>     ## ipv4-routing-helper.h (module 'internet'): static void ns3::Ipv4RoutingHelper::PrintRoutingTableAllEvery(ns3::Time printInterval, ns3::Ptr<ns3::OutputStreamWrapper> stream) [member function]
3661c2940
<                    [param('ns3::Time', 'printInterval'), param('ns3::Ptr< ns3::OutputStreamWrapper >', 'stream'), param('ns3::Time::Unit', 'unit', default_value='::ns3::Time::Unit::S')], 
---
>                    [param('ns3::Time', 'printInterval'), param('ns3::Ptr< ns3::OutputStreamWrapper >', 'stream')], 
3663c2942
<     ## ipv4-routing-helper.h (module 'internet'): static void ns3::Ipv4RoutingHelper::PrintRoutingTableAt(ns3::Time printTime, ns3::Ptr<ns3::Node> node, ns3::Ptr<ns3::OutputStreamWrapper> stream, ns3::Time::Unit unit=::ns3::Time::Unit::S) [member function]
---
>     ## ipv4-routing-helper.h (module 'internet'): static void ns3::Ipv4RoutingHelper::PrintRoutingTableAt(ns3::Time printTime, ns3::Ptr<ns3::Node> node, ns3::Ptr<ns3::OutputStreamWrapper> stream) [member function]
3666c2945
<                    [param('ns3::Time', 'printTime'), param('ns3::Ptr< ns3::Node >', 'node'), param('ns3::Ptr< ns3::OutputStreamWrapper >', 'stream'), param('ns3::Time::Unit', 'unit', default_value='::ns3::Time::Unit::S')], 
---
>                    [param('ns3::Time', 'printTime'), param('ns3::Ptr< ns3::Node >', 'node'), param('ns3::Ptr< ns3::OutputStreamWrapper >', 'stream')], 
3668c2947
<     ## ipv4-routing-helper.h (module 'internet'): static void ns3::Ipv4RoutingHelper::PrintRoutingTableEvery(ns3::Time printInterval, ns3::Ptr<ns3::Node> node, ns3::Ptr<ns3::OutputStreamWrapper> stream, ns3::Time::Unit unit=::ns3::Time::Unit::S) [member function]
---
>     ## ipv4-routing-helper.h (module 'internet'): static void ns3::Ipv4RoutingHelper::PrintRoutingTableEvery(ns3::Time printInterval, ns3::Ptr<ns3::Node> node, ns3::Ptr<ns3::OutputStreamWrapper> stream) [member function]
3671c2950
<                    [param('ns3::Time', 'printInterval'), param('ns3::Ptr< ns3::Node >', 'node'), param('ns3::Ptr< ns3::OutputStreamWrapper >', 'stream'), param('ns3::Time::Unit', 'unit', default_value='::ns3::Time::Unit::S')], 
---
>                    [param('ns3::Time', 'printInterval'), param('ns3::Ptr< ns3::Node >', 'node'), param('ns3::Ptr< ns3::OutputStreamWrapper >', 'stream')], 
3677d2955
<     cls.add_binary_comparison_operator('==')
3680c2958
<     ## ipv4-routing-table-entry.h (module 'internet'): ns3::Ipv4RoutingTableEntry::Ipv4RoutingTableEntry(ns3::Ipv4RoutingTableEntry const & route) [constructor]
---
>     ## ipv4-routing-table-entry.h (module 'internet'): ns3::Ipv4RoutingTableEntry::Ipv4RoutingTableEntry(ns3::Ipv4RoutingTableEntry const & route) [copy constructor]
3759c3037
<     ## ipv4-static-routing-helper.h (module 'internet'): ns3::Ipv4StaticRoutingHelper::Ipv4StaticRoutingHelper(ns3::Ipv4StaticRoutingHelper const & arg0) [constructor]
---
>     ## ipv4-static-routing-helper.h (module 'internet'): ns3::Ipv4StaticRoutingHelper::Ipv4StaticRoutingHelper(ns3::Ipv4StaticRoutingHelper const & arg0) [copy constructor]
3811,3812d3088
<     cls.add_output_stream_operator()
<     cls.add_binary_comparison_operator('==')
3814a3091,3092
>     cls.add_output_stream_operator()
>     cls.add_binary_comparison_operator('==')
3821c3099
<     ## ipv6-address.h (module 'network'): ns3::Ipv6Address::Ipv6Address(ns3::Ipv6Address const & addr) [constructor]
---
>     ## ipv6-address.h (module 'network'): ns3::Ipv6Address::Ipv6Address(ns3::Ipv6Address const & addr) [copy constructor]
3825c3103
<     ## ipv6-address.h (module 'network'): ns3::Ipv6Address ns3::Ipv6Address::CombinePrefix(ns3::Ipv6Prefix const & prefix) const [member function]
---
>     ## ipv6-address.h (module 'network'): ns3::Ipv6Address ns3::Ipv6Address::CombinePrefix(ns3::Ipv6Prefix const & prefix) [member function]
3828,3829c3106
<                    [param('ns3::Ipv6Prefix const &', 'prefix')], 
<                    is_const=True)
---
>                    [param('ns3::Ipv6Prefix const &', 'prefix')])
3885,3889d3161
<     ## ipv6-address.h (module 'network'): bool ns3::Ipv6Address::HasPrefix(ns3::Ipv6Prefix const & prefix) const [member function]
<     cls.add_method('HasPrefix', 
<                    'bool', 
<                    [param('ns3::Ipv6Prefix const &', 'prefix')], 
<                    is_const=True)
3894c3166
<                    is_const=True, deprecated=True)
---
>                    deprecated=True, is_const=True)
3919c3191
<                    is_const=True, deprecated=True)
---
>                    is_const=True)
3955,3959d3226
<     ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::MakeAutoconfiguredAddress(ns3::Address addr, ns3::Ipv6Address prefix) [member function]
<     cls.add_method('MakeAutoconfiguredAddress', 
<                    'ns3::Ipv6Address', 
<                    [param('ns3::Address', 'addr'), param('ns3::Ipv6Address', 'prefix')], 
<                    is_static=True)
3975,3984d3241
<     ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::MakeAutoconfiguredAddress(ns3::Mac8Address addr, ns3::Ipv6Address prefix) [member function]
<     cls.add_method('MakeAutoconfiguredAddress', 
<                    'ns3::Ipv6Address', 
<                    [param('ns3::Mac8Address', 'addr'), param('ns3::Ipv6Address', 'prefix')], 
<                    is_static=True)
<     ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::MakeAutoconfiguredLinkLocalAddress(ns3::Address mac) [member function]
<     cls.add_method('MakeAutoconfiguredLinkLocalAddress', 
<                    'ns3::Ipv6Address', 
<                    [param('ns3::Address', 'mac')], 
<                    is_static=True)
4000,4004d3256
<     ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::MakeAutoconfiguredLinkLocalAddress(ns3::Mac8Address mac) [member function]
<     cls.add_method('MakeAutoconfiguredLinkLocalAddress', 
<                    'ns3::Ipv6Address', 
<                    [param('ns3::Mac8Address', 'mac')], 
<                    is_static=True)
4038c3290
<     ## ipv6-address-generator.h (module 'internet'): ns3::Ipv6AddressGenerator::Ipv6AddressGenerator(ns3::Ipv6AddressGenerator const & arg0) [constructor]
---
>     ## ipv6-address-generator.h (module 'internet'): ns3::Ipv6AddressGenerator::Ipv6AddressGenerator(ns3::Ipv6AddressGenerator const & arg0) [copy constructor]
4065,4074d3316
<     ## ipv6-address-generator.h (module 'internet'): static bool ns3::Ipv6AddressGenerator::IsAddressAllocated(ns3::Ipv6Address const addr) [member function]
<     cls.add_method('IsAddressAllocated', 
<                    'bool', 
<                    [param('ns3::Ipv6Address const', 'addr')], 
<                    is_static=True)
<     ## ipv6-address-generator.h (module 'internet'): static bool ns3::Ipv6AddressGenerator::IsNetworkAllocated(ns3::Ipv6Address const addr, ns3::Ipv6Prefix const prefix) [member function]
<     cls.add_method('IsNetworkAllocated', 
<                    'bool', 
<                    [param('ns3::Ipv6Address const', 'addr'), param('ns3::Ipv6Prefix const', 'prefix')], 
<                    is_static=True)
4098c3340
<     ## ipv6-address-helper.h (module 'internet'): ns3::Ipv6AddressHelper::Ipv6AddressHelper(ns3::Ipv6AddressHelper const & arg0) [constructor]
---
>     ## ipv6-address-helper.h (module 'internet'): ns3::Ipv6AddressHelper::Ipv6AddressHelper(ns3::Ipv6AddressHelper const & arg0) [copy constructor]
4102,4103c3344,3345
<     ## ipv6-address-helper.h (module 'internet'): ns3::Ipv6AddressHelper::Ipv6AddressHelper(ns3::Ipv6Address network, ns3::Ipv6Prefix prefix, ns3::Ipv6Address base=ns3::Ipv6Address("::1")) [constructor]
<     cls.add_constructor([param('ns3::Ipv6Address', 'network'), param('ns3::Ipv6Prefix', 'prefix'), param('ns3::Ipv6Address', 'base', default_value='ns3::Ipv6Address("::1")')])
---
>     ## ipv6-address-helper.h (module 'internet'): ns3::Ipv6AddressHelper::Ipv6AddressHelper(ns3::Ipv6Address network, ns3::Ipv6Prefix prefix, ns3::Ipv6Address base=ns3::Ipv6Address(((const char*)"::1"))) [constructor]
>     cls.add_constructor([param('ns3::Ipv6Address', 'network'), param('ns3::Ipv6Prefix', 'prefix'), param('ns3::Ipv6Address', 'base', default_value='ns3::Ipv6Address(((const char*)"::1"))')])
4108c3350
<     ## ipv6-address-helper.h (module 'internet'): ns3::Ipv6InterfaceContainer ns3::Ipv6AddressHelper::Assign(ns3::NetDeviceContainer const & c, std::vector<bool, std::allocator<bool> > withConfiguration) [member function]
---
>     ## ipv6-address-helper.h (module 'internet'): ns3::Ipv6InterfaceContainer ns3::Ipv6AddressHelper::Assign(ns3::NetDeviceContainer const & c, std::vector<bool,std::allocator<bool> > withConfiguration) [member function]
4128c3370
<     ## ipv6-address-helper.h (module 'internet'): void ns3::Ipv6AddressHelper::SetBase(ns3::Ipv6Address network, ns3::Ipv6Prefix prefix, ns3::Ipv6Address base=ns3::Ipv6Address("::1")) [member function]
---
>     ## ipv6-address-helper.h (module 'internet'): void ns3::Ipv6AddressHelper::SetBase(ns3::Ipv6Address network, ns3::Ipv6Prefix prefix, ns3::Ipv6Address base=ns3::Ipv6Address(((const char*)"::1"))) [member function]
4131,4254c3373
<                    [param('ns3::Ipv6Address', 'network'), param('ns3::Ipv6Prefix', 'prefix'), param('ns3::Ipv6Address', 'base', default_value='ns3::Ipv6Address("::1")')])
<     return
< 
< def register_Ns3Ipv6EndPoint_methods(root_module, cls):
<     ## ipv6-end-point.h (module 'internet'): ns3::Ipv6EndPoint::Ipv6EndPoint(ns3::Ipv6EndPoint const & arg0) [constructor]
<     cls.add_constructor([param('ns3::Ipv6EndPoint const &', 'arg0')])
<     ## ipv6-end-point.h (module 'internet'): ns3::Ipv6EndPoint::Ipv6EndPoint(ns3::Ipv6Address addr, uint16_t port) [constructor]
<     cls.add_constructor([param('ns3::Ipv6Address', 'addr'), param('uint16_t', 'port')])
<     ## ipv6-end-point.h (module 'internet'): void ns3::Ipv6EndPoint::BindToNetDevice(ns3::Ptr<ns3::NetDevice> netdevice) [member function]
<     cls.add_method('BindToNetDevice', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::NetDevice >', 'netdevice')])
<     ## ipv6-end-point.h (module 'internet'): void ns3::Ipv6EndPoint::ForwardIcmp(ns3::Ipv6Address src, uint8_t ttl, uint8_t type, uint8_t code, uint32_t info) [member function]
<     cls.add_method('ForwardIcmp', 
<                    'void', 
<                    [param('ns3::Ipv6Address', 'src'), param('uint8_t', 'ttl'), param('uint8_t', 'type'), param('uint8_t', 'code'), param('uint32_t', 'info')])
<     ## ipv6-end-point.h (module 'internet'): void ns3::Ipv6EndPoint::ForwardUp(ns3::Ptr<ns3::Packet> p, ns3::Ipv6Header header, uint16_t port, ns3::Ptr<ns3::Ipv6Interface> incomingInterface) [member function]
<     cls.add_method('ForwardUp', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Packet >', 'p'), param('ns3::Ipv6Header', 'header'), param('uint16_t', 'port'), param('ns3::Ptr< ns3::Ipv6Interface >', 'incomingInterface')])
<     ## ipv6-end-point.h (module 'internet'): ns3::Ptr<ns3::NetDevice> ns3::Ipv6EndPoint::GetBoundNetDevice() [member function]
<     cls.add_method('GetBoundNetDevice', 
<                    'ns3::Ptr< ns3::NetDevice >', 
<                    [])
<     ## ipv6-end-point.h (module 'internet'): ns3::Ipv6Address ns3::Ipv6EndPoint::GetLocalAddress() [member function]
<     cls.add_method('GetLocalAddress', 
<                    'ns3::Ipv6Address', 
<                    [])
<     ## ipv6-end-point.h (module 'internet'): uint16_t ns3::Ipv6EndPoint::GetLocalPort() [member function]
<     cls.add_method('GetLocalPort', 
<                    'uint16_t', 
<                    [])
<     ## ipv6-end-point.h (module 'internet'): ns3::Ipv6Address ns3::Ipv6EndPoint::GetPeerAddress() [member function]
<     cls.add_method('GetPeerAddress', 
<                    'ns3::Ipv6Address', 
<                    [])
<     ## ipv6-end-point.h (module 'internet'): uint16_t ns3::Ipv6EndPoint::GetPeerPort() [member function]
<     cls.add_method('GetPeerPort', 
<                    'uint16_t', 
<                    [])
<     ## ipv6-end-point.h (module 'internet'): bool ns3::Ipv6EndPoint::IsRxEnabled() [member function]
<     cls.add_method('IsRxEnabled', 
<                    'bool', 
<                    [])
<     ## ipv6-end-point.h (module 'internet'): void ns3::Ipv6EndPoint::SetDestroyCallback(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> callback) [member function]
<     cls.add_method('SetDestroyCallback', 
<                    'void', 
<                    [param('ns3::Callback< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'callback')])
<     ## ipv6-end-point.h (module 'internet'): void ns3::Ipv6EndPoint::SetIcmpCallback(ns3::Callback<void, ns3::Ipv6Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty> callback) [member function]
<     cls.add_method('SetIcmpCallback', 
<                    'void', 
<                    [param('ns3::Callback< void, ns3::Ipv6Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'callback')])
<     ## ipv6-end-point.h (module 'internet'): void ns3::Ipv6EndPoint::SetLocalAddress(ns3::Ipv6Address addr) [member function]
<     cls.add_method('SetLocalAddress', 
<                    'void', 
<                    [param('ns3::Ipv6Address', 'addr')])
<     ## ipv6-end-point.h (module 'internet'): void ns3::Ipv6EndPoint::SetLocalPort(uint16_t port) [member function]
<     cls.add_method('SetLocalPort', 
<                    'void', 
<                    [param('uint16_t', 'port')])
<     ## ipv6-end-point.h (module 'internet'): void ns3::Ipv6EndPoint::SetPeer(ns3::Ipv6Address addr, uint16_t port) [member function]
<     cls.add_method('SetPeer', 
<                    'void', 
<                    [param('ns3::Ipv6Address', 'addr'), param('uint16_t', 'port')])
<     ## ipv6-end-point.h (module 'internet'): void ns3::Ipv6EndPoint::SetRxCallback(ns3::Callback<void, ns3::Ptr<ns3::Packet>, ns3::Ipv6Header, unsigned short, ns3::Ptr<ns3::Ipv6Interface>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> callback) [member function]
<     cls.add_method('SetRxCallback', 
<                    'void', 
<                    [param('ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Ipv6Header, unsigned short, ns3::Ptr< ns3::Ipv6Interface >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'callback')])
<     ## ipv6-end-point.h (module 'internet'): void ns3::Ipv6EndPoint::SetRxEnabled(bool enabled) [member function]
<     cls.add_method('SetRxEnabled', 
<                    'void', 
<                    [param('bool', 'enabled')])
<     return
< 
< def register_Ns3Ipv6EndPointDemux_methods(root_module, cls):
<     ## ipv6-end-point-demux.h (module 'internet'): ns3::Ipv6EndPointDemux::Ipv6EndPointDemux(ns3::Ipv6EndPointDemux const & arg0) [constructor]
<     cls.add_constructor([param('ns3::Ipv6EndPointDemux const &', 'arg0')])
<     ## ipv6-end-point-demux.h (module 'internet'): ns3::Ipv6EndPointDemux::Ipv6EndPointDemux() [constructor]
<     cls.add_constructor([])
<     ## ipv6-end-point-demux.h (module 'internet'): ns3::Ipv6EndPoint * ns3::Ipv6EndPointDemux::Allocate() [member function]
<     cls.add_method('Allocate', 
<                    'ns3::Ipv6EndPoint *', 
<                    [])
<     ## ipv6-end-point-demux.h (module 'internet'): ns3::Ipv6EndPoint * ns3::Ipv6EndPointDemux::Allocate(ns3::Ipv6Address address) [member function]
<     cls.add_method('Allocate', 
<                    'ns3::Ipv6EndPoint *', 
<                    [param('ns3::Ipv6Address', 'address')])
<     ## ipv6-end-point-demux.h (module 'internet'): ns3::Ipv6EndPoint * ns3::Ipv6EndPointDemux::Allocate(ns3::Ptr<ns3::NetDevice> boundNetDevice, uint16_t port) [member function]
<     cls.add_method('Allocate', 
<                    'ns3::Ipv6EndPoint *', 
<                    [param('ns3::Ptr< ns3::NetDevice >', 'boundNetDevice'), param('uint16_t', 'port')])
<     ## ipv6-end-point-demux.h (module 'internet'): ns3::Ipv6EndPoint * ns3::Ipv6EndPointDemux::Allocate(ns3::Ptr<ns3::NetDevice> boundNetDevice, ns3::Ipv6Address address, uint16_t port) [member function]
<     cls.add_method('Allocate', 
<                    'ns3::Ipv6EndPoint *', 
<                    [param('ns3::Ptr< ns3::NetDevice >', 'boundNetDevice'), param('ns3::Ipv6Address', 'address'), param('uint16_t', 'port')])
<     ## ipv6-end-point-demux.h (module 'internet'): ns3::Ipv6EndPoint * ns3::Ipv6EndPointDemux::Allocate(ns3::Ptr<ns3::NetDevice> boundNetDevice, ns3::Ipv6Address localAddress, uint16_t localPort, ns3::Ipv6Address peerAddress, uint16_t peerPort) [member function]
<     cls.add_method('Allocate', 
<                    'ns3::Ipv6EndPoint *', 
<                    [param('ns3::Ptr< ns3::NetDevice >', 'boundNetDevice'), param('ns3::Ipv6Address', 'localAddress'), param('uint16_t', 'localPort'), param('ns3::Ipv6Address', 'peerAddress'), param('uint16_t', 'peerPort')])
<     ## ipv6-end-point-demux.h (module 'internet'): void ns3::Ipv6EndPointDemux::DeAllocate(ns3::Ipv6EndPoint * endPoint) [member function]
<     cls.add_method('DeAllocate', 
<                    'void', 
<                    [param('ns3::Ipv6EndPoint *', 'endPoint')])
<     ## ipv6-end-point-demux.h (module 'internet'): ns3::Ipv6EndPointDemux::EndPoints ns3::Ipv6EndPointDemux::GetEndPoints() const [member function]
<     cls.add_method('GetEndPoints', 
<                    'ns3::Ipv6EndPointDemux::EndPoints', 
<                    [], 
<                    is_const=True)
<     ## ipv6-end-point-demux.h (module 'internet'): ns3::Ipv6EndPointDemux::EndPoints ns3::Ipv6EndPointDemux::Lookup(ns3::Ipv6Address dst, uint16_t dport, ns3::Ipv6Address src, uint16_t sport, ns3::Ptr<ns3::Ipv6Interface> incomingInterface) [member function]
<     cls.add_method('Lookup', 
<                    'ns3::Ipv6EndPointDemux::EndPoints', 
<                    [param('ns3::Ipv6Address', 'dst'), param('uint16_t', 'dport'), param('ns3::Ipv6Address', 'src'), param('uint16_t', 'sport'), param('ns3::Ptr< ns3::Ipv6Interface >', 'incomingInterface')])
<     ## ipv6-end-point-demux.h (module 'internet'): bool ns3::Ipv6EndPointDemux::LookupLocal(ns3::Ptr<ns3::NetDevice> boundNetDevice, ns3::Ipv6Address addr, uint16_t port) [member function]
<     cls.add_method('LookupLocal', 
<                    'bool', 
<                    [param('ns3::Ptr< ns3::NetDevice >', 'boundNetDevice'), param('ns3::Ipv6Address', 'addr'), param('uint16_t', 'port')])
<     ## ipv6-end-point-demux.h (module 'internet'): bool ns3::Ipv6EndPointDemux::LookupPortLocal(uint16_t port) [member function]
<     cls.add_method('LookupPortLocal', 
<                    'bool', 
<                    [param('uint16_t', 'port')])
<     ## ipv6-end-point-demux.h (module 'internet'): ns3::Ipv6EndPoint * ns3::Ipv6EndPointDemux::SimpleLookup(ns3::Ipv6Address dst, uint16_t dport, ns3::Ipv6Address src, uint16_t sport) [member function]
<     cls.add_method('SimpleLookup', 
<                    'ns3::Ipv6EndPoint *', 
<                    [param('ns3::Ipv6Address', 'dst'), param('uint16_t', 'dport'), param('ns3::Ipv6Address', 'src'), param('uint16_t', 'sport')])
---
>                    [param('ns3::Ipv6Address', 'network'), param('ns3::Ipv6Prefix', 'prefix'), param('ns3::Ipv6Address', 'base', default_value='ns3::Ipv6Address(((const char*)"::1"))')])
4257a3377
>     cls.add_binary_comparison_operator('!=')
4260d3379
<     cls.add_binary_comparison_operator('!=')
4267c3386
<     ## ipv6-interface-address.h (module 'internet'): ns3::Ipv6InterfaceAddress::Ipv6InterfaceAddress(ns3::Ipv6InterfaceAddress const & o) [constructor]
---
>     ## ipv6-interface-address.h (module 'internet'): ns3::Ipv6InterfaceAddress::Ipv6InterfaceAddress(ns3::Ipv6InterfaceAddress const & o) [copy constructor]
4318c3437
<     ## ipv6-interface-container.h (module 'internet'): ns3::Ipv6InterfaceContainer::Ipv6InterfaceContainer(ns3::Ipv6InterfaceContainer const & arg0) [constructor]
---
>     ## ipv6-interface-container.h (module 'internet'): ns3::Ipv6InterfaceContainer::Ipv6InterfaceContainer(ns3::Ipv6InterfaceContainer const & arg0) [copy constructor]
4334c3453
<     ## ipv6-interface-container.h (module 'internet'): ns3::Ipv6InterfaceContainer::Iterator ns3::Ipv6InterfaceContainer::Begin() const [member function]
---
>     ## ipv6-interface-container.h (module 'internet'): __gnu_cxx::__normal_iterator<const std::pair<ns3::Ptr<ns3::Ipv6>, unsigned int>*,std::vector<std::pair<ns3::Ptr<ns3::Ipv6>, unsigned int>, std::allocator<std::pair<ns3::Ptr<ns3::Ipv6>, unsigned int> > > > ns3::Ipv6InterfaceContainer::Begin() const [member function]
4336c3455
<                    'ns3::Ipv6InterfaceContainer::Iterator', 
---
>                    '__gnu_cxx::__normal_iterator< std::pair< ns3::Ptr< ns3::Ipv6 >, unsigned int > const, std::vector< std::pair< ns3::Ptr< ns3::Ipv6 >, unsigned int > > >', 
4339c3458
<     ## ipv6-interface-container.h (module 'internet'): ns3::Ipv6InterfaceContainer::Iterator ns3::Ipv6InterfaceContainer::End() const [member function]
---
>     ## ipv6-interface-container.h (module 'internet'): __gnu_cxx::__normal_iterator<const std::pair<ns3::Ptr<ns3::Ipv6>, unsigned int>*,std::vector<std::pair<ns3::Ptr<ns3::Ipv6>, unsigned int>, std::allocator<std::pair<ns3::Ptr<ns3::Ipv6>, unsigned int> > > > ns3::Ipv6InterfaceContainer::End() const [member function]
4341c3460
<                    'ns3::Ipv6InterfaceContainer::Iterator', 
---
>                    '__gnu_cxx::__normal_iterator< std::pair< ns3::Ptr< ns3::Ipv6 >, unsigned int > const, std::vector< std::pair< ns3::Ptr< ns3::Ipv6 >, unsigned int > > >', 
4393c3512
<     ## ipv6-routing-table-entry.h (module 'internet'): ns3::Ipv6MulticastRoutingTableEntry::Ipv6MulticastRoutingTableEntry(ns3::Ipv6MulticastRoutingTableEntry const & route) [constructor]
---
>     ## ipv6-routing-table-entry.h (module 'internet'): ns3::Ipv6MulticastRoutingTableEntry::Ipv6MulticastRoutingTableEntry(ns3::Ipv6MulticastRoutingTableEntry const & route) [copy constructor]
4434a3554
>     cls.add_binary_comparison_operator('!=')
4437d3556
<     cls.add_binary_comparison_operator('!=')
4444,4447d3562
<     ## ipv6-address.h (module 'network'): ns3::Ipv6Prefix::Ipv6Prefix(uint8_t * prefix, uint8_t prefixLength) [constructor]
<     cls.add_constructor([param('uint8_t *', 'prefix'), param('uint8_t', 'prefixLength')])
<     ## ipv6-address.h (module 'network'): ns3::Ipv6Prefix::Ipv6Prefix(char const * prefix, uint8_t prefixLength) [constructor]
<     cls.add_constructor([param('char const *', 'prefix'), param('uint8_t', 'prefixLength')])
4450c3565
<     ## ipv6-address.h (module 'network'): ns3::Ipv6Prefix::Ipv6Prefix(ns3::Ipv6Prefix const & prefix) [constructor]
---
>     ## ipv6-address.h (module 'network'): ns3::Ipv6Prefix::Ipv6Prefix(ns3::Ipv6Prefix const & prefix) [copy constructor]
4464,4468d3578
<     ## ipv6-address.h (module 'network'): uint8_t ns3::Ipv6Prefix::GetMinimumPrefixLength() const [member function]
<     cls.add_method('GetMinimumPrefixLength', 
<                    'uint8_t', 
<                    [], 
<                    is_const=True)
4488c3598
<                    is_const=True, deprecated=True)
---
>                    is_const=True)
4499,4502d3608
<     ## ipv6-address.h (module 'network'): void ns3::Ipv6Prefix::SetPrefixLength(uint8_t prefixLength) [member function]
<     cls.add_method('SetPrefixLength', 
<                    'void', 
<                    [param('uint8_t', 'prefixLength')])
4508c3614
<     ## ipv6-routing-helper.h (module 'internet'): ns3::Ipv6RoutingHelper::Ipv6RoutingHelper(ns3::Ipv6RoutingHelper const & arg0) [constructor]
---
>     ## ipv6-routing-helper.h (module 'internet'): ns3::Ipv6RoutingHelper::Ipv6RoutingHelper(ns3::Ipv6RoutingHelper const & arg0) [copy constructor]
4514c3620
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
4519c3625
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
4540c3646
<     ## ipv6-routing-helper.h (module 'internet'): static void ns3::Ipv6RoutingHelper::PrintRoutingTableAllAt(ns3::Time printTime, ns3::Ptr<ns3::OutputStreamWrapper> stream, ns3::Time::Unit unit=::ns3::Time::Unit::S) [member function]
---
>     ## ipv6-routing-helper.h (module 'internet'): static void ns3::Ipv6RoutingHelper::PrintRoutingTableAllAt(ns3::Time printTime, ns3::Ptr<ns3::OutputStreamWrapper> stream) [member function]
4543c3649
<                    [param('ns3::Time', 'printTime'), param('ns3::Ptr< ns3::OutputStreamWrapper >', 'stream'), param('ns3::Time::Unit', 'unit', default_value='::ns3::Time::Unit::S')], 
---
>                    [param('ns3::Time', 'printTime'), param('ns3::Ptr< ns3::OutputStreamWrapper >', 'stream')], 
4545c3651
<     ## ipv6-routing-helper.h (module 'internet'): static void ns3::Ipv6RoutingHelper::PrintRoutingTableAllEvery(ns3::Time printInterval, ns3::Ptr<ns3::OutputStreamWrapper> stream, ns3::Time::Unit unit=::ns3::Time::Unit::S) [member function]
---
>     ## ipv6-routing-helper.h (module 'internet'): static void ns3::Ipv6RoutingHelper::PrintRoutingTableAllEvery(ns3::Time printInterval, ns3::Ptr<ns3::OutputStreamWrapper> stream) [member function]
4548c3654
<                    [param('ns3::Time', 'printInterval'), param('ns3::Ptr< ns3::OutputStreamWrapper >', 'stream'), param('ns3::Time::Unit', 'unit', default_value='::ns3::Time::Unit::S')], 
---
>                    [param('ns3::Time', 'printInterval'), param('ns3::Ptr< ns3::OutputStreamWrapper >', 'stream')], 
4550c3656
<     ## ipv6-routing-helper.h (module 'internet'): static void ns3::Ipv6RoutingHelper::PrintRoutingTableAt(ns3::Time printTime, ns3::Ptr<ns3::Node> node, ns3::Ptr<ns3::OutputStreamWrapper> stream, ns3::Time::Unit unit=::ns3::Time::Unit::S) [member function]
---
>     ## ipv6-routing-helper.h (module 'internet'): static void ns3::Ipv6RoutingHelper::PrintRoutingTableAt(ns3::Time printTime, ns3::Ptr<ns3::Node> node, ns3::Ptr<ns3::OutputStreamWrapper> stream) [member function]
4553c3659
<                    [param('ns3::Time', 'printTime'), param('ns3::Ptr< ns3::Node >', 'node'), param('ns3::Ptr< ns3::OutputStreamWrapper >', 'stream'), param('ns3::Time::Unit', 'unit', default_value='::ns3::Time::Unit::S')], 
---
>                    [param('ns3::Time', 'printTime'), param('ns3::Ptr< ns3::Node >', 'node'), param('ns3::Ptr< ns3::OutputStreamWrapper >', 'stream')], 
4555c3661
<     ## ipv6-routing-helper.h (module 'internet'): static void ns3::Ipv6RoutingHelper::PrintRoutingTableEvery(ns3::Time printInterval, ns3::Ptr<ns3::Node> node, ns3::Ptr<ns3::OutputStreamWrapper> stream, ns3::Time::Unit unit=::ns3::Time::Unit::S) [member function]
---
>     ## ipv6-routing-helper.h (module 'internet'): static void ns3::Ipv6RoutingHelper::PrintRoutingTableEvery(ns3::Time printInterval, ns3::Ptr<ns3::Node> node, ns3::Ptr<ns3::OutputStreamWrapper> stream) [member function]
4558c3664
<                    [param('ns3::Time', 'printInterval'), param('ns3::Ptr< ns3::Node >', 'node'), param('ns3::Ptr< ns3::OutputStreamWrapper >', 'stream'), param('ns3::Time::Unit', 'unit', default_value='::ns3::Time::Unit::S')], 
---
>                    [param('ns3::Time', 'printInterval'), param('ns3::Ptr< ns3::Node >', 'node'), param('ns3::Ptr< ns3::OutputStreamWrapper >', 'stream')], 
4566c3672
<     ## ipv6-routing-table-entry.h (module 'internet'): ns3::Ipv6RoutingTableEntry::Ipv6RoutingTableEntry(ns3::Ipv6RoutingTableEntry const & route) [constructor]
---
>     ## ipv6-routing-table-entry.h (module 'internet'): ns3::Ipv6RoutingTableEntry::Ipv6RoutingTableEntry(ns3::Ipv6RoutingTableEntry const & route) [copy constructor]
4659c3765
<     ## ipv6-static-routing-helper.h (module 'internet'): ns3::Ipv6StaticRoutingHelper::Ipv6StaticRoutingHelper(ns3::Ipv6StaticRoutingHelper const & arg0) [constructor]
---
>     ## ipv6-static-routing-helper.h (module 'internet'): ns3::Ipv6StaticRoutingHelper::Ipv6StaticRoutingHelper(ns3::Ipv6StaticRoutingHelper const & arg0) [copy constructor]
4695d3800
<     cls.add_binary_comparison_operator('==')
4699c3804,3805
<     ## mac48-address.h (module 'network'): ns3::Mac48Address::Mac48Address(ns3::Mac48Address const & arg0) [constructor]
---
>     cls.add_binary_comparison_operator('==')
>     ## mac48-address.h (module 'network'): ns3::Mac48Address::Mac48Address(ns3::Mac48Address const & arg0) [copy constructor]
4766,4807d3871
< def register_Ns3Mac8Address_methods(root_module, cls):
<     cls.add_binary_comparison_operator('<')
<     cls.add_binary_comparison_operator('==')
<     cls.add_binary_comparison_operator('!=')
<     cls.add_output_stream_operator()
<     ## mac8-address.h (module 'network'): ns3::Mac8Address::Mac8Address(ns3::Mac8Address const & arg0) [constructor]
<     cls.add_constructor([param('ns3::Mac8Address const &', 'arg0')])
<     ## mac8-address.h (module 'network'): ns3::Mac8Address::Mac8Address() [constructor]
<     cls.add_constructor([])
<     ## mac8-address.h (module 'network'): ns3::Mac8Address::Mac8Address(uint8_t addr) [constructor]
<     cls.add_constructor([param('uint8_t', 'addr')])
<     ## mac8-address.h (module 'network'): static ns3::Mac8Address ns3::Mac8Address::Allocate() [member function]
<     cls.add_method('Allocate', 
<                    'ns3::Mac8Address', 
<                    [], 
<                    is_static=True)
<     ## mac8-address.h (module 'network'): static ns3::Mac8Address ns3::Mac8Address::ConvertFrom(ns3::Address const & address) [member function]
<     cls.add_method('ConvertFrom', 
<                    'ns3::Mac8Address', 
<                    [param('ns3::Address const &', 'address')], 
<                    is_static=True)
<     ## mac8-address.h (module 'network'): void ns3::Mac8Address::CopyFrom(uint8_t const * pBuffer) [member function]
<     cls.add_method('CopyFrom', 
<                    'void', 
<                    [param('uint8_t const *', 'pBuffer')])
<     ## mac8-address.h (module 'network'): void ns3::Mac8Address::CopyTo(uint8_t * pBuffer) const [member function]
<     cls.add_method('CopyTo', 
<                    'void', 
<                    [param('uint8_t *', 'pBuffer')], 
<                    is_const=True)
<     ## mac8-address.h (module 'network'): static ns3::Mac8Address ns3::Mac8Address::GetBroadcast() [member function]
<     cls.add_method('GetBroadcast', 
<                    'ns3::Mac8Address', 
<                    [], 
<                    is_static=True)
<     ## mac8-address.h (module 'network'): static bool ns3::Mac8Address::IsMatchingType(ns3::Address const & address) [member function]
<     cls.add_method('IsMatchingType', 
<                    'bool', 
<                    [param('ns3::Address const &', 'address')], 
<                    is_static=True)
<     return
< 
4809c3873
<     ## net-device-container.h (module 'network'): ns3::NetDeviceContainer::NetDeviceContainer(ns3::NetDeviceContainer const & arg0) [constructor]
---
>     ## net-device-container.h (module 'network'): ns3::NetDeviceContainer::NetDeviceContainer(ns3::NetDeviceContainer const & arg0) [copy constructor]
4831c3895
<     ## net-device-container.h (module 'network'): ns3::NetDeviceContainer::Iterator ns3::NetDeviceContainer::Begin() const [member function]
---
>     ## net-device-container.h (module 'network'): __gnu_cxx::__normal_iterator<const ns3::Ptr<ns3::NetDevice>*,std::vector<ns3::Ptr<ns3::NetDevice>, std::allocator<ns3::Ptr<ns3::NetDevice> > > > ns3::NetDeviceContainer::Begin() const [member function]
4833c3897
<                    'ns3::NetDeviceContainer::Iterator', 
---
>                    '__gnu_cxx::__normal_iterator< ns3::Ptr< ns3::NetDevice > const, std::vector< ns3::Ptr< ns3::NetDevice > > >', 
4836c3900
<     ## net-device-container.h (module 'network'): ns3::NetDeviceContainer::Iterator ns3::NetDeviceContainer::End() const [member function]
---
>     ## net-device-container.h (module 'network'): __gnu_cxx::__normal_iterator<const ns3::Ptr<ns3::NetDevice>*,std::vector<ns3::Ptr<ns3::NetDevice>, std::allocator<ns3::Ptr<ns3::NetDevice> > > > ns3::NetDeviceContainer::End() const [member function]
4838c3902
<                    'ns3::NetDeviceContainer::Iterator', 
---
>                    '__gnu_cxx::__normal_iterator< ns3::Ptr< ns3::NetDevice > const, std::vector< ns3::Ptr< ns3::NetDevice > > >', 
4854c3918
<     ## node-container.h (module 'network'): ns3::NodeContainer::NodeContainer(ns3::NodeContainer const & arg0) [constructor]
---
>     ## node-container.h (module 'network'): ns3::NodeContainer::NodeContainer(ns3::NodeContainer const & arg0) [copy constructor]
4882c3946
<     ## node-container.h (module 'network'): ns3::NodeContainer::Iterator ns3::NodeContainer::Begin() const [member function]
---
>     ## node-container.h (module 'network'): __gnu_cxx::__normal_iterator<const ns3::Ptr<ns3::Node>*,std::vector<ns3::Ptr<ns3::Node>, std::allocator<ns3::Ptr<ns3::Node> > > > ns3::NodeContainer::Begin() const [member function]
4884c3948
<                    'ns3::NodeContainer::Iterator', 
---
>                    '__gnu_cxx::__normal_iterator< ns3::Ptr< ns3::Node > const, std::vector< ns3::Ptr< ns3::Node > > >', 
4887,4891d3950
<     ## node-container.h (module 'network'): bool ns3::NodeContainer::Contains(uint32_t id) const [member function]
<     cls.add_method('Contains', 
<                    'bool', 
<                    [param('uint32_t', 'id')], 
<                    is_const=True)
4900c3959
<     ## node-container.h (module 'network'): ns3::NodeContainer::Iterator ns3::NodeContainer::End() const [member function]
---
>     ## node-container.h (module 'network'): __gnu_cxx::__normal_iterator<const ns3::Ptr<ns3::Node>*,std::vector<ns3::Ptr<ns3::Node>, std::allocator<ns3::Ptr<ns3::Node> > > > ns3::NodeContainer::End() const [member function]
4902c3961
<                    'ns3::NodeContainer::Iterator', 
---
>                    '__gnu_cxx::__normal_iterator< ns3::Ptr< ns3::Node > const, std::vector< ns3::Ptr< ns3::Node > > >', 
4925c3984
<     ## object-base.h (module 'core'): ns3::ObjectBase::ObjectBase(ns3::ObjectBase const & arg0) [constructor]
---
>     ## object-base.h (module 'core'): ns3::ObjectBase::ObjectBase(ns3::ObjectBase const & arg0) [copy constructor]
4941c4000
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
4980c4039
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
4986c4045
<     ## object.h (module 'core'): ns3::ObjectDeleter::ObjectDeleter(ns3::ObjectDeleter const & arg0) [constructor]
---
>     ## object.h (module 'core'): ns3::ObjectDeleter::ObjectDeleter(ns3::ObjectDeleter const & arg0) [copy constructor]
4997c4056
<     ## object-factory.h (module 'core'): ns3::ObjectFactory::ObjectFactory(ns3::ObjectFactory const & arg0) [constructor]
---
>     ## object-factory.h (module 'core'): ns3::ObjectFactory::ObjectFactory(ns3::ObjectFactory const & arg0) [copy constructor]
5013,5017d4071
<     ## object-factory.h (module 'core'): bool ns3::ObjectFactory::IsTypeIdSet() const [member function]
<     cls.add_method('IsTypeIdSet', 
<                    'bool', 
<                    [], 
<                    is_const=True)
5037c4091
<     ## ipv6-extension-header.h (module 'internet'): ns3::OptionField::OptionField(ns3::OptionField const & arg0) [constructor]
---
>     ## ipv6-extension-header.h (module 'internet'): ns3::OptionField::OptionField(ns3::OptionField const & arg0) [copy constructor]
5072c4126
<     ## packet-metadata.h (module 'network'): ns3::PacketMetadata::PacketMetadata(ns3::PacketMetadata const & o) [constructor]
---
>     ## packet-metadata.h (module 'network'): ns3::PacketMetadata::PacketMetadata(ns3::PacketMetadata const & o) [copy constructor]
5150c4204
<     ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item::Item(ns3::PacketMetadata::Item const & arg0) [constructor]
---
>     ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item::Item(ns3::PacketMetadata::Item const & arg0) [copy constructor]
5164,5165d4217
<     ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item::type [variable]
<     cls.add_instance_attribute('type', 'ns3::PacketMetadata::Item::ItemType', is_const=False)
5169c4221
<     ## packet-metadata.h (module 'network'): ns3::PacketMetadata::ItemIterator::ItemIterator(ns3::PacketMetadata::ItemIterator const & arg0) [constructor]
---
>     ## packet-metadata.h (module 'network'): ns3::PacketMetadata::ItemIterator::ItemIterator(ns3::PacketMetadata::ItemIterator const & arg0) [copy constructor]
5185c4237
<     ## packet.h (module 'network'): ns3::PacketTagIterator::PacketTagIterator(ns3::PacketTagIterator const & arg0) [constructor]
---
>     ## packet.h (module 'network'): ns3::PacketTagIterator::PacketTagIterator(ns3::PacketTagIterator const & arg0) [copy constructor]
5199c4251
<     ## packet.h (module 'network'): ns3::PacketTagIterator::Item::Item(ns3::PacketTagIterator::Item const & arg0) [constructor]
---
>     ## packet.h (module 'network'): ns3::PacketTagIterator::Item::Item(ns3::PacketTagIterator::Item const & arg0) [copy constructor]
5216c4268
<     ## packet-tag-list.h (module 'network'): ns3::PacketTagList::PacketTagList(ns3::PacketTagList const & o) [constructor]
---
>     ## packet-tag-list.h (module 'network'): ns3::PacketTagList::PacketTagList(ns3::PacketTagList const & o) [copy constructor]
5250c4302
<     ## packet-tag-list.h (module 'network'): ns3::PacketTagList::TagData::TagData(ns3::PacketTagList::TagData const & arg0) [constructor]
---
>     ## packet-tag-list.h (module 'network'): ns3::PacketTagList::TagData::TagData(ns3::PacketTagList::TagData const & arg0) [copy constructor]
5255c4307
<     cls.add_instance_attribute('data', 'uint8_t [ 1 ]', is_const=False)
---
>     cls.add_instance_attribute('data', 'uint8_t [ 21 ]', is_const=False)
5258,5259d4309
<     ## packet-tag-list.h (module 'network'): ns3::PacketTagList::TagData::size [variable]
<     cls.add_instance_attribute('size', 'uint32_t', is_const=False)
5330c4380
<     ## pcap-file.h (module 'network'): void ns3::PcapFile::Open(std::string const & filename, std::ios_base::openmode mode) [member function]
---
>     ## pcap-file.h (module 'network'): void ns3::PcapFile::Open(std::string const & filename, std::_Ios_Openmode mode) [member function]
5333c4383
<                    [param('std::string const &', 'filename'), param('std::ios_base::openmode', 'mode')])
---
>                    [param('std::string const &', 'filename'), param('std::_Ios_Openmode', 'mode')])
5342c4392
<     ## pcap-file.h (module 'network'): void ns3::PcapFile::Write(uint32_t tsSec, uint32_t tsUsec, ns3::Ptr<const ns3::Packet> p) [member function]
---
>     ## pcap-file.h (module 'network'): void ns3::PcapFile::Write(uint32_t tsSec, uint32_t tsUsec, ns3::Ptr<ns3::Packet const> p) [member function]
5346c4396
<     ## pcap-file.h (module 'network'): void ns3::PcapFile::Write(uint32_t tsSec, uint32_t tsUsec, ns3::Header const & header, ns3::Ptr<const ns3::Packet> p) [member function]
---
>     ## pcap-file.h (module 'network'): void ns3::PcapFile::Write(uint32_t tsSec, uint32_t tsUsec, ns3::Header const & header, ns3::Ptr<ns3::Packet const> p) [member function]
5357c4407
<     ## trace-helper.h (module 'network'): ns3::PcapHelper::PcapHelper(ns3::PcapHelper const & arg0) [constructor]
---
>     ## trace-helper.h (module 'network'): ns3::PcapHelper::PcapHelper(ns3::PcapHelper const & arg0) [copy constructor]
5361c4411
<     ## trace-helper.h (module 'network'): ns3::Ptr<ns3::PcapFileWrapper> ns3::PcapHelper::CreateFile(std::string filename, std::ios_base::openmode filemode, ns3::PcapHelper::DataLinkType dataLinkType, uint32_t snapLen=std::numeric_limits<unsigned int>::max(), int32_t tzCorrection=0) [member function]
---
>     ## trace-helper.h (module 'network'): ns3::Ptr<ns3::PcapFileWrapper> ns3::PcapHelper::CreateFile(std::string filename, std::_Ios_Openmode filemode, ns3::PcapHelper::DataLinkType dataLinkType, uint32_t snapLen=std::numeric_limits<unsigned int>::max(), int32_t tzCorrection=0) [member function]
5364c4414
<                    [param('std::string', 'filename'), param('std::ios_base::openmode', 'filemode'), param('ns3::PcapHelper::DataLinkType', 'dataLinkType'), param('uint32_t', 'snapLen', default_value='std::numeric_limits<unsigned int>::max()'), param('int32_t', 'tzCorrection', default_value='0')])
---
>                    [param('std::string', 'filename'), param('std::_Ios_Openmode', 'filemode'), param('ns3::PcapHelper::DataLinkType', 'dataLinkType'), param('uint32_t', 'snapLen', default_value='std::numeric_limits<unsigned int>::max()'), param('int32_t', 'tzCorrection', default_value='0')])
5376c4426
<     ## trace-helper.h (module 'network'): ns3::PcapHelperForDevice::PcapHelperForDevice(ns3::PcapHelperForDevice const & arg0) [constructor]
---
>     ## trace-helper.h (module 'network'): ns3::PcapHelperForDevice::PcapHelperForDevice(ns3::PcapHelperForDevice const & arg0) [copy constructor]
5408c4458
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
5412c4462
<     ## internet-trace-helper.h (module 'internet'): ns3::PcapHelperForIpv4::PcapHelperForIpv4(ns3::PcapHelperForIpv4 const & arg0) [constructor]
---
>     ## internet-trace-helper.h (module 'internet'): ns3::PcapHelperForIpv4::PcapHelperForIpv4(ns3::PcapHelperForIpv4 const & arg0) [copy constructor]
5444c4494
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
5448c4498
<     ## internet-trace-helper.h (module 'internet'): ns3::PcapHelperForIpv6::PcapHelperForIpv6(ns3::PcapHelperForIpv6 const & arg0) [constructor]
---
>     ## internet-trace-helper.h (module 'internet'): ns3::PcapHelperForIpv6::PcapHelperForIpv6(ns3::PcapHelperForIpv6 const & arg0) [copy constructor]
5480c4530
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
5486,5487c4536,4537
<     ## rip-helper.h (module 'internet'): ns3::RipHelper::RipHelper(ns3::RipHelper const & o) [constructor]
<     cls.add_constructor([param('ns3::RipHelper const &', 'o')])
---
>     ## rip-helper.h (module 'internet'): ns3::RipHelper::RipHelper(ns3::RipHelper const & arg0) [copy constructor]
>     cls.add_constructor([param('ns3::RipHelper const &', 'arg0')])
5523,5524c4573,4574
<     ## ripng-helper.h (module 'internet'): ns3::RipNgHelper::RipNgHelper(ns3::RipNgHelper const & o) [constructor]
<     cls.add_constructor([param('ns3::RipNgHelper const &', 'o')])
---
>     ## ripng-helper.h (module 'internet'): ns3::RipNgHelper::RipNgHelper(ns3::RipNgHelper const & arg0) [copy constructor]
>     cls.add_constructor([param('ns3::RipNgHelper const &', 'arg0')])
5559c4609
<     ## ripng.h (module 'internet'): ns3::RipNgRoutingTableEntry::RipNgRoutingTableEntry(ns3::RipNgRoutingTableEntry const & arg0) [constructor]
---
>     ## ripng.h (module 'internet'): ns3::RipNgRoutingTableEntry::RipNgRoutingTableEntry(ns3::RipNgRoutingTableEntry const & arg0) [copy constructor]
5607c4657
<     ## rip.h (module 'internet'): ns3::RipRoutingTableEntry::RipRoutingTableEntry(ns3::RipRoutingTableEntry const & arg0) [constructor]
---
>     ## rip.h (module 'internet'): ns3::RipRoutingTableEntry::RipRoutingTableEntry(ns3::RipRoutingTableEntry const & arg0) [copy constructor]
5656c4706
<     ## tcp-socket-base.h (module 'internet'): ns3::RttHistory::RttHistory(ns3::RttHistory const & h) [constructor]
---
>     ## tcp-socket-base.h (module 'internet'): ns3::RttHistory::RttHistory(ns3::RttHistory const & h) [copy constructor]
5713c4763
<     ## global-route-manager-impl.h (module 'internet'): void ns3::SPFVertex::SetRootExitDirection(ns3::SPFVertex::NodeExit_t exit) [member function]
---
>     ## global-route-manager-impl.h (module 'internet'): void ns3::SPFVertex::SetRootExitDirection(std::pair<ns3::Ipv4Address,int> exit) [member function]
5717c4767
<     ## global-route-manager-impl.h (module 'internet'): ns3::SPFVertex::NodeExit_t ns3::SPFVertex::GetRootExitDirection(uint32_t i) const [member function]
---
>     ## global-route-manager-impl.h (module 'internet'): std::pair<ns3::Ipv4Address,int> ns3::SPFVertex::GetRootExitDirection(uint32_t i) const [member function]
5719c4769
<                    'ns3::SPFVertex::NodeExit_t', 
---
>                    'std::pair< ns3::Ipv4Address, int >', 
5722c4772
<     ## global-route-manager-impl.h (module 'internet'): ns3::SPFVertex::NodeExit_t ns3::SPFVertex::GetRootExitDirection() const [member function]
---
>     ## global-route-manager-impl.h (module 'internet'): std::pair<ns3::Ipv4Address,int> ns3::SPFVertex::GetRootExitDirection() const [member function]
5724c4774
<                    'ns3::SPFVertex::NodeExit_t', 
---
>                    'std::pair< ns3::Ipv4Address, int >', 
5784,5788c4834,4838
<     cls.add_binary_numeric_operator('+', root_module['ns3::SequenceNumber32'], root_module['ns3::SequenceNumber32'], param('ns3::SequenceNumber< unsigned int, int > const &', 'right'))
<     cls.add_binary_numeric_operator('+', root_module['ns3::SequenceNumber32'], root_module['ns3::SequenceNumber32'], param('int', 'right'))
<     cls.add_inplace_numeric_operator('+=', param('int', 'right'))
<     cls.add_binary_numeric_operator('-', root_module['ns3::SequenceNumber32'], root_module['ns3::SequenceNumber32'], param('int', 'right'))
<     cls.add_inplace_numeric_operator('-=', param('int', 'right'))
---
>     cls.add_binary_numeric_operator('+', root_module['ns3::SequenceNumber32'], root_module['ns3::SequenceNumber32'], param('ns3::SequenceNumber< unsigned int, int > const &', u'right'))
>     cls.add_binary_numeric_operator('+', root_module['ns3::SequenceNumber32'], root_module['ns3::SequenceNumber32'], param('int', u'right'))
>     cls.add_inplace_numeric_operator('+=', param('int', u'right'))
>     cls.add_binary_numeric_operator('-', root_module['ns3::SequenceNumber32'], root_module['ns3::SequenceNumber32'], param('int', u'right'))
>     cls.add_inplace_numeric_operator('-=', param('int', u'right'))
5798c4848
<     ## sequence-number.h (module 'network'): ns3::SequenceNumber<unsigned int, int>::SequenceNumber(ns3::SequenceNumber<unsigned int, int> const & value) [constructor]
---
>     ## sequence-number.h (module 'network'): ns3::SequenceNumber<unsigned int, int>::SequenceNumber(ns3::SequenceNumber<unsigned int, int> const & value) [copy constructor]
5810c4860
<     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Object, ns3::ObjectBase, ns3::ObjectDeleter>::SimpleRefCount(ns3::SimpleRefCount<ns3::Object, ns3::ObjectBase, ns3::ObjectDeleter> const & o) [constructor]
---
>     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Object, ns3::ObjectBase, ns3::ObjectDeleter>::SimpleRefCount(ns3::SimpleRefCount<ns3::Object, ns3::ObjectBase, ns3::ObjectDeleter> const & o) [copy constructor]
5811a4862,4866
>     ## simple-ref-count.h (module 'core'): static void ns3::SimpleRefCount<ns3::Object, ns3::ObjectBase, ns3::ObjectDeleter>::Cleanup() [member function]
>     cls.add_method('Cleanup', 
>                    'void', 
>                    [], 
>                    is_static=True)
5815c4870
<     ## simulator.h (module 'core'): ns3::Simulator::Simulator(ns3::Simulator const & arg0) [constructor]
---
>     ## simulator.h (module 'core'): ns3::Simulator::Simulator(ns3::Simulator const & arg0) [copy constructor]
5837,5841d4891
<     ## simulator.h (module 'core'): static uint64_t ns3::Simulator::GetEventCount() [member function]
<     cls.add_method('GetEventCount', 
<                    'uint64_t', 
<                    [], 
<                    is_static=True)
5902c4952
<     ## tag.h (module 'network'): ns3::Tag::Tag(ns3::Tag const & arg0) [constructor]
---
>     ## tag.h (module 'network'): ns3::Tag::Tag(ns3::Tag const & arg0) [copy constructor]
5908c4958
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
5913c4963
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
5923c4973
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
5928c4978
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
5932c4982
<     ## tag-buffer.h (module 'network'): ns3::TagBuffer::TagBuffer(ns3::TagBuffer const & arg0) [constructor]
---
>     ## tag-buffer.h (module 'network'): ns3::TagBuffer::TagBuffer(ns3::TagBuffer const & arg0) [copy constructor]
5976c5026
<     ## tag-buffer.h (module 'network'): void ns3::TagBuffer::WriteU16(uint16_t v) [member function]
---
>     ## tag-buffer.h (module 'network'): void ns3::TagBuffer::WriteU16(uint16_t data) [member function]
5979,5980c5029,5030
<                    [param('uint16_t', 'v')])
<     ## tag-buffer.h (module 'network'): void ns3::TagBuffer::WriteU32(uint32_t v) [member function]
---
>                    [param('uint16_t', 'data')])
>     ## tag-buffer.h (module 'network'): void ns3::TagBuffer::WriteU32(uint32_t data) [member function]
5983c5033
<                    [param('uint32_t', 'v')])
---
>                    [param('uint32_t', 'data')])
5994,6055d5043
< def register_Ns3TcpTxItem_methods(root_module, cls):
<     cls.add_output_stream_operator()
<     ## tcp-tx-item.h (module 'internet'): ns3::TcpTxItem::TcpTxItem() [constructor]
<     cls.add_constructor([])
<     ## tcp-tx-item.h (module 'internet'): ns3::TcpTxItem::TcpTxItem(ns3::TcpTxItem const & arg0) [constructor]
<     cls.add_constructor([param('ns3::TcpTxItem const &', 'arg0')])
<     ## tcp-tx-item.h (module 'internet'): ns3::Time const & ns3::TcpTxItem::GetLastSent() const [member function]
<     cls.add_method('GetLastSent', 
<                    'ns3::Time const &', 
<                    [], 
<                    is_const=True)
<     ## tcp-tx-item.h (module 'internet'): ns3::Ptr<const ns3::Packet> ns3::TcpTxItem::GetPacket() const [member function]
<     cls.add_method('GetPacket', 
<                    'ns3::Ptr< ns3::Packet const >', 
<                    [], 
<                    is_const=True)
<     ## tcp-tx-item.h (module 'internet'): ns3::Ptr<ns3::Packet> ns3::TcpTxItem::GetPacketCopy() const [member function]
<     cls.add_method('GetPacketCopy', 
<                    'ns3::Ptr< ns3::Packet >', 
<                    [], 
<                    is_const=True)
<     ## tcp-tx-item.h (module 'internet'): ns3::TcpTxItem::RateInformation & ns3::TcpTxItem::GetRateInformation() [member function]
<     cls.add_method('GetRateInformation', 
<                    'ns3::TcpTxItem::RateInformation &', 
<                    [])
<     ## tcp-tx-item.h (module 'internet'): uint32_t ns3::TcpTxItem::GetSeqSize() const [member function]
<     cls.add_method('GetSeqSize', 
<                    'uint32_t', 
<                    [], 
<                    is_const=True)
<     ## tcp-tx-item.h (module 'internet'): bool ns3::TcpTxItem::IsRetrans() const [member function]
<     cls.add_method('IsRetrans', 
<                    'bool', 
<                    [], 
<                    is_const=True)
<     ## tcp-tx-item.h (module 'internet'): bool ns3::TcpTxItem::IsSacked() const [member function]
<     cls.add_method('IsSacked', 
<                    'bool', 
<                    [], 
<                    is_const=True)
<     ## tcp-tx-item.h (module 'internet'): void ns3::TcpTxItem::Print(std::ostream & os) const [member function]
<     cls.add_method('Print', 
<                    'void', 
<                    [param('std::ostream &', 'os')], 
<                    is_const=True)
<     return
< 
< def register_Ns3TcpTxItemRateInformation_methods(root_module, cls):
<     ## tcp-tx-item.h (module 'internet'): ns3::TcpTxItem::RateInformation::RateInformation() [constructor]
<     cls.add_constructor([])
<     ## tcp-tx-item.h (module 'internet'): ns3::TcpTxItem::RateInformation::RateInformation(ns3::TcpTxItem::RateInformation const & arg0) [constructor]
<     cls.add_constructor([param('ns3::TcpTxItem::RateInformation const &', 'arg0')])
<     ## tcp-tx-item.h (module 'internet'): ns3::TcpTxItem::RateInformation::m_delivered [variable]
<     cls.add_instance_attribute('m_delivered', 'uint64_t', is_const=False)
<     ## tcp-tx-item.h (module 'internet'): ns3::TcpTxItem::RateInformation::m_deliveredTime [variable]
<     cls.add_instance_attribute('m_deliveredTime', 'ns3::Time', is_const=False)
<     ## tcp-tx-item.h (module 'internet'): ns3::TcpTxItem::RateInformation::m_firstSent [variable]
<     cls.add_instance_attribute('m_firstSent', 'ns3::Time', is_const=False)
<     ## tcp-tx-item.h (module 'internet'): ns3::TcpTxItem::RateInformation::m_isAppLimited [variable]
<     cls.add_instance_attribute('m_isAppLimited', 'bool', is_const=False)
<     return
< 
6058c5046
<     ## nstime.h (module 'core'): ns3::TimeWithUnit::TimeWithUnit(ns3::TimeWithUnit const & arg0) [constructor]
---
>     ## nstime.h (module 'core'): ns3::TimeWithUnit::TimeWithUnit(ns3::TimeWithUnit const & arg0) [copy constructor]
6065c5053
<     ## timer.h (module 'core'): ns3::Timer::Timer(ns3::Timer const & arg0) [constructor]
---
>     ## timer.h (module 'core'): ns3::Timer::Timer(ns3::Timer const & arg0) [copy constructor]
6134c5122
<     ## timer-impl.h (module 'core'): ns3::TimerImpl::TimerImpl(ns3::TimerImpl const & arg0) [constructor]
---
>     ## timer-impl.h (module 'core'): ns3::TimerImpl::TimerImpl(ns3::TimerImpl const & arg0) [copy constructor]
6140c5128
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
6145c5133
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
6151c5139
<     ## traced-value.h (module 'core'): ns3::TracedValue<double>::TracedValue(ns3::TracedValue<double> const & o) [constructor]
---
>     ## traced-value.h (module 'core'): ns3::TracedValue<double>::TracedValue(ns3::TracedValue<double> const & o) [copy constructor]
6155c5143
<     ## traced-value.h (module 'core'): void ns3::TracedValue<double>::Connect(ns3::CallbackBase const & cb, std::string path) [member function]
---
>     ## traced-value.h (module 'core'): void ns3::TracedValue<double>::Connect(ns3::CallbackBase const & cb, std::basic_string<char,std::char_traits<char>,std::allocator<char> > path) [member function]
6163c5151
<     ## traced-value.h (module 'core'): void ns3::TracedValue<double>::Disconnect(ns3::CallbackBase const & cb, std::string path) [member function]
---
>     ## traced-value.h (module 'core'): void ns3::TracedValue<double>::Disconnect(ns3::CallbackBase const & cb, std::basic_string<char,std::char_traits<char>,std::allocator<char> > path) [member function]
6185c5173
<     ## traced-value.h (module 'core'): ns3::TracedValue<ns3::SequenceNumber<unsigned int, int> >::TracedValue(ns3::TracedValue<ns3::SequenceNumber<unsigned int, int> > const & o) [constructor]
---
>     ## traced-value.h (module 'core'): ns3::TracedValue<ns3::SequenceNumber<unsigned int, int> >::TracedValue(ns3::TracedValue<ns3::SequenceNumber<unsigned int, int> > const & o) [copy constructor]
6189,6195c5177
<     ## traced-value.h (module 'core'): ns3::TracedValue<ns3::SequenceNumber<unsigned int, int> >::TracedValue(ns3::TracedValue<ns3::SequenceNumber<unsigned int, int> > const & other) [constructor]
<     cls.add_constructor([param('ns3::TracedValue< ns3::SequenceNumber< unsigned int, int > > const &', 'other')])
<     ## traced-value.h (module 'core'): ns3::TracedValue<ns3::SequenceNumber<unsigned int, int> >::TracedValue(ns3::TracedValue<ns3::SequenceNumber<unsigned int, int> > const & other) [constructor]
<     cls.add_constructor([param('ns3::TracedValue< ns3::SequenceNumber< unsigned int, int > > const &', 'other')])
<     ## traced-value.h (module 'core'): ns3::TracedValue<ns3::SequenceNumber<unsigned int, int> >::TracedValue(int const & other) [constructor]
<     cls.add_constructor([param('int const &', 'other')])
<     ## traced-value.h (module 'core'): void ns3::TracedValue<ns3::SequenceNumber<unsigned int, int> >::Connect(ns3::CallbackBase const & cb, std::string path) [member function]
---
>     ## traced-value.h (module 'core'): void ns3::TracedValue<ns3::SequenceNumber<unsigned int, int> >::Connect(ns3::CallbackBase const & cb, std::basic_string<char,std::char_traits<char>,std::allocator<char> > path) [member function]
6203c5185
<     ## traced-value.h (module 'core'): void ns3::TracedValue<ns3::SequenceNumber<unsigned int, int> >::Disconnect(ns3::CallbackBase const & cb, std::string path) [member function]
---
>     ## traced-value.h (module 'core'): void ns3::TracedValue<ns3::SequenceNumber<unsigned int, int> >::Disconnect(ns3::CallbackBase const & cb, std::basic_string<char,std::char_traits<char>,std::allocator<char> > path) [member function]
6225c5207
<     ## traced-value.h (module 'core'): ns3::TracedValue<ns3::TcpSocket::TcpStates_t>::TracedValue(ns3::TracedValue<ns3::TcpSocket::TcpStates_t> const & o) [constructor]
---
>     ## traced-value.h (module 'core'): ns3::TracedValue<ns3::TcpSocket::TcpStates_t>::TracedValue(ns3::TracedValue<ns3::TcpSocket::TcpStates_t> const & o) [copy constructor]
6229,6231c5211
<     ## traced-value.h (module 'core'): ns3::TracedValue<ns3::TcpSocket::TcpStates_t>::TracedValue(ns3::TcpSocket::TcpStates_t const & other) [constructor]
<     cls.add_constructor([param('ns3::TcpSocket::TcpStates_t const &', 'other')])
<     ## traced-value.h (module 'core'): void ns3::TracedValue<ns3::TcpSocket::TcpStates_t>::Connect(ns3::CallbackBase const & cb, std::string path) [member function]
---
>     ## traced-value.h (module 'core'): void ns3::TracedValue<ns3::TcpSocket::TcpStates_t>::Connect(ns3::CallbackBase const & cb, std::basic_string<char,std::char_traits<char>,std::allocator<char> > path) [member function]
6239c5219
<     ## traced-value.h (module 'core'): void ns3::TracedValue<ns3::TcpSocket::TcpStates_t>::Disconnect(ns3::CallbackBase const & cb, std::string path) [member function]
---
>     ## traced-value.h (module 'core'): void ns3::TracedValue<ns3::TcpSocket::TcpStates_t>::Disconnect(ns3::CallbackBase const & cb, std::basic_string<char,std::char_traits<char>,std::allocator<char> > path) [member function]
6258,6293d5237
< def register_Ns3TracedValue__Ns3TcpSocketStateEcnState_t_methods(root_module, cls):
<     ## traced-value.h (module 'core'): ns3::TracedValue<ns3::TcpSocketState::EcnState_t>::TracedValue() [constructor]
<     cls.add_constructor([])
<     ## traced-value.h (module 'core'): ns3::TracedValue<ns3::TcpSocketState::EcnState_t>::TracedValue(ns3::TracedValue<ns3::TcpSocketState::EcnState_t> const & o) [constructor]
<     cls.add_constructor([param('ns3::TracedValue< ns3::TcpSocketState::EcnState_t > const &', 'o')])
<     ## traced-value.h (module 'core'): ns3::TracedValue<ns3::TcpSocketState::EcnState_t>::TracedValue(ns3::TcpSocketState::EcnState_t const & v) [constructor]
<     cls.add_constructor([param('ns3::TcpSocketState::EcnState_t const &', 'v')])
<     ## traced-value.h (module 'core'): ns3::TracedValue<ns3::TcpSocketState::EcnState_t>::TracedValue(ns3::TcpSocketState::EcnState_t const & other) [constructor]
<     cls.add_constructor([param('ns3::TcpSocketState::EcnState_t const &', 'other')])
<     ## traced-value.h (module 'core'): void ns3::TracedValue<ns3::TcpSocketState::EcnState_t>::Connect(ns3::CallbackBase const & cb, std::string path) [member function]
<     cls.add_method('Connect', 
<                    'void', 
<                    [param('ns3::CallbackBase const &', 'cb'), param('std::string', 'path')])
<     ## traced-value.h (module 'core'): void ns3::TracedValue<ns3::TcpSocketState::EcnState_t>::ConnectWithoutContext(ns3::CallbackBase const & cb) [member function]
<     cls.add_method('ConnectWithoutContext', 
<                    'void', 
<                    [param('ns3::CallbackBase const &', 'cb')])
<     ## traced-value.h (module 'core'): void ns3::TracedValue<ns3::TcpSocketState::EcnState_t>::Disconnect(ns3::CallbackBase const & cb, std::string path) [member function]
<     cls.add_method('Disconnect', 
<                    'void', 
<                    [param('ns3::CallbackBase const &', 'cb'), param('std::string', 'path')])
<     ## traced-value.h (module 'core'): void ns3::TracedValue<ns3::TcpSocketState::EcnState_t>::DisconnectWithoutContext(ns3::CallbackBase const & cb) [member function]
<     cls.add_method('DisconnectWithoutContext', 
<                    'void', 
<                    [param('ns3::CallbackBase const &', 'cb')])
<     ## traced-value.h (module 'core'): ns3::TcpSocketState::EcnState_t ns3::TracedValue<ns3::TcpSocketState::EcnState_t>::Get() const [member function]
<     cls.add_method('Get', 
<                    'ns3::TcpSocketState::EcnState_t', 
<                    [], 
<                    is_const=True)
<     ## traced-value.h (module 'core'): void ns3::TracedValue<ns3::TcpSocketState::EcnState_t>::Set(ns3::TcpSocketState::EcnState_t const & v) [member function]
<     cls.add_method('Set', 
<                    'void', 
<                    [param('ns3::TcpSocketState::EcnState_t const &', 'v')])
<     return
< 
6297c5241
<     ## traced-value.h (module 'core'): ns3::TracedValue<ns3::TcpSocketState::TcpCongState_t>::TracedValue(ns3::TracedValue<ns3::TcpSocketState::TcpCongState_t> const & o) [constructor]
---
>     ## traced-value.h (module 'core'): ns3::TracedValue<ns3::TcpSocketState::TcpCongState_t>::TracedValue(ns3::TracedValue<ns3::TcpSocketState::TcpCongState_t> const & o) [copy constructor]
6301,6303c5245
<     ## traced-value.h (module 'core'): ns3::TracedValue<ns3::TcpSocketState::TcpCongState_t>::TracedValue(ns3::TcpSocketState::TcpCongState_t const & other) [constructor]
<     cls.add_constructor([param('ns3::TcpSocketState::TcpCongState_t const &', 'other')])
<     ## traced-value.h (module 'core'): void ns3::TracedValue<ns3::TcpSocketState::TcpCongState_t>::Connect(ns3::CallbackBase const & cb, std::string path) [member function]
---
>     ## traced-value.h (module 'core'): void ns3::TracedValue<ns3::TcpSocketState::TcpCongState_t>::Connect(ns3::CallbackBase const & cb, std::basic_string<char,std::char_traits<char>,std::allocator<char> > path) [member function]
6311c5253
<     ## traced-value.h (module 'core'): void ns3::TracedValue<ns3::TcpSocketState::TcpCongState_t>::Disconnect(ns3::CallbackBase const & cb, std::string path) [member function]
---
>     ## traced-value.h (module 'core'): void ns3::TracedValue<ns3::TcpSocketState::TcpCongState_t>::Disconnect(ns3::CallbackBase const & cb, std::basic_string<char,std::char_traits<char>,std::allocator<char> > path) [member function]
6331c5273
<     cls.add_binary_numeric_operator('/', root_module['ns3::TracedValue< unsigned int >'], root_module['ns3::TracedValue< unsigned int >'], param('unsigned int const &', 'right'))
---
>     cls.add_binary_numeric_operator('/', root_module['ns3::TracedValue< unsigned int >'], root_module['ns3::TracedValue< unsigned int >'], param('uint32_t const &', u'right'))
6334c5276
<     ## traced-value.h (module 'core'): ns3::TracedValue<unsigned int>::TracedValue(ns3::TracedValue<unsigned int> const & o) [constructor]
---
>     ## traced-value.h (module 'core'): ns3::TracedValue<unsigned int>::TracedValue(ns3::TracedValue<unsigned int> const & o) [copy constructor]
6338,6346c5280
<     ## traced-value.h (module 'core'): ns3::TracedValue<unsigned int>::TracedValue(ns3::TracedValue<unsigned int> const & other) [constructor]
<     cls.add_constructor([param('ns3::TracedValue< unsigned int > const &', 'other')])
<     ## traced-value.h (module 'core'): ns3::TracedValue<unsigned int>::TracedValue(int const & other) [constructor]
<     cls.add_constructor([param('int const &', 'other')])
<     ## traced-value.h (module 'core'): ns3::TracedValue<unsigned int>::TracedValue(unsigned int const & other) [constructor]
<     cls.add_constructor([param('unsigned int const &', 'other')])
<     ## traced-value.h (module 'core'): ns3::TracedValue<unsigned int>::TracedValue(ns3::TracedValue<unsigned int> const & other) [constructor]
<     cls.add_constructor([param('ns3::TracedValue< unsigned int > const &', 'other')])
<     ## traced-value.h (module 'core'): void ns3::TracedValue<unsigned int>::Connect(ns3::CallbackBase const & cb, std::string path) [member function]
---
>     ## traced-value.h (module 'core'): void ns3::TracedValue<unsigned int>::Connect(ns3::CallbackBase const & cb, std::basic_string<char,std::char_traits<char>,std::allocator<char> > path) [member function]
6354c5288
<     ## traced-value.h (module 'core'): void ns3::TracedValue<unsigned int>::Disconnect(ns3::CallbackBase const & cb, std::string path) [member function]
---
>     ## traced-value.h (module 'core'): void ns3::TracedValue<unsigned int>::Disconnect(ns3::CallbackBase const & cb, std::basic_string<char,std::char_traits<char>,std::allocator<char> > path) [member function]
6374d5307
<     cls.add_binary_comparison_operator('==')
6376d5308
<     cls.add_output_stream_operator()
6377a5310,5311
>     cls.add_output_stream_operator()
>     cls.add_binary_comparison_operator('==')
6382c5316
<     ## type-id.h (module 'core'): ns3::TypeId::TypeId(ns3::TypeId const & o) [constructor]
---
>     ## type-id.h (module 'core'): ns3::TypeId::TypeId(ns3::TypeId const & o) [copy constructor]
6384c5318
<     ## type-id.h (module 'core'): ns3::TypeId ns3::TypeId::AddAttribute(std::string name, std::string help, ns3::AttributeValue const & initialValue, ns3::Ptr<const ns3::AttributeAccessor> accessor, ns3::Ptr<const ns3::AttributeChecker> checker, ns3::TypeId::SupportLevel supportLevel=::ns3::TypeId::SupportLevel::SUPPORTED, std::string const & supportMsg="") [member function]
---
>     ## type-id.h (module 'core'): ns3::TypeId ns3::TypeId::AddAttribute(std::string name, std::string help, ns3::AttributeValue const & initialValue, ns3::Ptr<ns3::AttributeAccessor const> accessor, ns3::Ptr<ns3::AttributeChecker const> checker, ns3::TypeId::SupportLevel supportLevel=::ns3::TypeId::SUPPORTED, std::string const & supportMsg="") [member function]
6387,6388c5321,5322
<                    [param('std::string', 'name'), param('std::string', 'help'), param('ns3::AttributeValue const &', 'initialValue'), param('ns3::Ptr< ns3::AttributeAccessor const >', 'accessor'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker'), param('ns3::TypeId::SupportLevel', 'supportLevel', default_value='::ns3::TypeId::SupportLevel::SUPPORTED'), param('std::string const &', 'supportMsg', default_value='""')])
<     ## type-id.h (module 'core'): ns3::TypeId ns3::TypeId::AddAttribute(std::string name, std::string help, uint32_t flags, ns3::AttributeValue const & initialValue, ns3::Ptr<const ns3::AttributeAccessor> accessor, ns3::Ptr<const ns3::AttributeChecker> checker, ns3::TypeId::SupportLevel supportLevel=::ns3::TypeId::SupportLevel::SUPPORTED, std::string const & supportMsg="") [member function]
---
>                    [param('std::string', 'name'), param('std::string', 'help'), param('ns3::AttributeValue const &', 'initialValue'), param('ns3::Ptr< ns3::AttributeAccessor const >', 'accessor'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker'), param('ns3::TypeId::SupportLevel', 'supportLevel', default_value='::ns3::TypeId::SUPPORTED'), param('std::string const &', 'supportMsg', default_value='""')])
>     ## type-id.h (module 'core'): ns3::TypeId ns3::TypeId::AddAttribute(std::string name, std::string help, uint32_t flags, ns3::AttributeValue const & initialValue, ns3::Ptr<ns3::AttributeAccessor const> accessor, ns3::Ptr<ns3::AttributeChecker const> checker, ns3::TypeId::SupportLevel supportLevel=::ns3::TypeId::SUPPORTED, std::string const & supportMsg="") [member function]
6391,6392c5325,5326
<                    [param('std::string', 'name'), param('std::string', 'help'), param('uint32_t', 'flags'), param('ns3::AttributeValue const &', 'initialValue'), param('ns3::Ptr< ns3::AttributeAccessor const >', 'accessor'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker'), param('ns3::TypeId::SupportLevel', 'supportLevel', default_value='::ns3::TypeId::SupportLevel::SUPPORTED'), param('std::string const &', 'supportMsg', default_value='""')])
<     ## type-id.h (module 'core'): ns3::TypeId ns3::TypeId::AddTraceSource(std::string name, std::string help, ns3::Ptr<const ns3::TraceSourceAccessor> accessor) [member function]
---
>                    [param('std::string', 'name'), param('std::string', 'help'), param('uint32_t', 'flags'), param('ns3::AttributeValue const &', 'initialValue'), param('ns3::Ptr< ns3::AttributeAccessor const >', 'accessor'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker'), param('ns3::TypeId::SupportLevel', 'supportLevel', default_value='::ns3::TypeId::SUPPORTED'), param('std::string const &', 'supportMsg', default_value='""')])
>     ## type-id.h (module 'core'): ns3::TypeId ns3::TypeId::AddTraceSource(std::string name, std::string help, ns3::Ptr<ns3::TraceSourceAccessor const> accessor) [member function]
6397c5331
<     ## type-id.h (module 'core'): ns3::TypeId ns3::TypeId::AddTraceSource(std::string name, std::string help, ns3::Ptr<const ns3::TraceSourceAccessor> accessor, std::string callback, ns3::TypeId::SupportLevel supportLevel=::ns3::TypeId::SupportLevel::SUPPORTED, std::string const & supportMsg="") [member function]
---
>     ## type-id.h (module 'core'): ns3::TypeId ns3::TypeId::AddTraceSource(std::string name, std::string help, ns3::Ptr<ns3::TraceSourceAccessor const> accessor, std::string callback, ns3::TypeId::SupportLevel supportLevel=::ns3::TypeId::SUPPORTED, std::string const & supportMsg="") [member function]
6400,6401c5334,5335
<                    [param('std::string', 'name'), param('std::string', 'help'), param('ns3::Ptr< ns3::TraceSourceAccessor const >', 'accessor'), param('std::string', 'callback'), param('ns3::TypeId::SupportLevel', 'supportLevel', default_value='::ns3::TypeId::SupportLevel::SUPPORTED'), param('std::string const &', 'supportMsg', default_value='""')])
<     ## type-id.h (module 'core'): ns3::TypeId::AttributeInformation ns3::TypeId::GetAttribute(std::size_t i) const [member function]
---
>                    [param('std::string', 'name'), param('std::string', 'help'), param('ns3::Ptr< ns3::TraceSourceAccessor const >', 'accessor'), param('std::string', 'callback'), param('ns3::TypeId::SupportLevel', 'supportLevel', default_value='::ns3::TypeId::SUPPORTED'), param('std::string const &', 'supportMsg', default_value='""')])
>     ## type-id.h (module 'core'): ns3::TypeId::AttributeInformation ns3::TypeId::GetAttribute(uint32_t i) const [member function]
6404c5338
<                    [param('std::size_t', 'i')], 
---
>                    [param('uint32_t', 'i')], 
6406c5340
<     ## type-id.h (module 'core'): std::string ns3::TypeId::GetAttributeFullName(std::size_t i) const [member function]
---
>     ## type-id.h (module 'core'): std::string ns3::TypeId::GetAttributeFullName(uint32_t i) const [member function]
6409c5343
<                    [param('std::size_t', 'i')], 
---
>                    [param('uint32_t', 'i')], 
6411c5345
<     ## type-id.h (module 'core'): std::size_t ns3::TypeId::GetAttributeN() const [member function]
---
>     ## type-id.h (module 'core'): uint32_t ns3::TypeId::GetAttributeN() const [member function]
6413c5347
<                    'std::size_t', 
---
>                    'uint32_t', 
6416c5350
<     ## type-id.h (module 'core'): ns3::Callback<ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> ns3::TypeId::GetConstructor() const [member function]
---
>     ## type-id.h (module 'core'): ns3::Callback<ns3::ObjectBase*,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> ns3::TypeId::GetConstructor() const [member function]
6426c5360
<     ## type-id.h (module 'core'): ns3::TypeId::hash_t ns3::TypeId::GetHash() const [member function]
---
>     ## type-id.h (module 'core'): uint32_t ns3::TypeId::GetHash() const [member function]
6428c5362
<                    'ns3::TypeId::hash_t', 
---
>                    'uint32_t', 
6441c5375
<     ## type-id.h (module 'core'): static ns3::TypeId ns3::TypeId::GetRegistered(uint16_t i) [member function]
---
>     ## type-id.h (module 'core'): static ns3::TypeId ns3::TypeId::GetRegistered(uint32_t i) [member function]
6444c5378
<                    [param('uint16_t', 'i')], 
---
>                    [param('uint32_t', 'i')], 
6446c5380
<     ## type-id.h (module 'core'): static uint16_t ns3::TypeId::GetRegisteredN() [member function]
---
>     ## type-id.h (module 'core'): static uint32_t ns3::TypeId::GetRegisteredN() [member function]
6448c5382
<                    'uint16_t', 
---
>                    'uint32_t', 
6456c5390
<     ## type-id.h (module 'core'): ns3::TypeId::TraceSourceInformation ns3::TypeId::GetTraceSource(std::size_t i) const [member function]
---
>     ## type-id.h (module 'core'): ns3::TypeId::TraceSourceInformation ns3::TypeId::GetTraceSource(uint32_t i) const [member function]
6459c5393
<                    [param('std::size_t', 'i')], 
---
>                    [param('uint32_t', 'i')], 
6461c5395
<     ## type-id.h (module 'core'): std::size_t ns3::TypeId::GetTraceSourceN() const [member function]
---
>     ## type-id.h (module 'core'): uint32_t ns3::TypeId::GetTraceSourceN() const [member function]
6463c5397
<                    'std::size_t', 
---
>                    'uint32_t', 
6495c5429
<     ## type-id.h (module 'core'): static ns3::TypeId ns3::TypeId::LookupByHash(ns3::TypeId::hash_t hash) [member function]
---
>     ## type-id.h (module 'core'): static ns3::TypeId ns3::TypeId::LookupByHash(uint32_t hash) [member function]
6500c5434
<     ## type-id.h (module 'core'): static bool ns3::TypeId::LookupByHashFailSafe(ns3::TypeId::hash_t hash, ns3::TypeId * tid) [member function]
---
>     ## type-id.h (module 'core'): static bool ns3::TypeId::LookupByHashFailSafe(uint32_t hash, ns3::TypeId * tid) [member function]
6510c5444
<     ## type-id.h (module 'core'): ns3::Ptr<const ns3::TraceSourceAccessor> ns3::TypeId::LookupTraceSourceByName(std::string name) const [member function]
---
>     ## type-id.h (module 'core'): ns3::Ptr<ns3::TraceSourceAccessor const> ns3::TypeId::LookupTraceSourceByName(std::string name) const [member function]
6515c5449
<     ## type-id.h (module 'core'): ns3::Ptr<const ns3::TraceSourceAccessor> ns3::TypeId::LookupTraceSourceByName(std::string name, ns3::TypeId::TraceSourceInformation * info) const [member function]
---
>     ## type-id.h (module 'core'): ns3::Ptr<ns3::TraceSourceAccessor const> ns3::TypeId::LookupTraceSourceByName(std::string name, ns3::TypeId::TraceSourceInformation * info) const [member function]
6525c5459
<     ## type-id.h (module 'core'): bool ns3::TypeId::SetAttributeInitialValue(std::size_t i, ns3::Ptr<const ns3::AttributeValue> initialValue) [member function]
---
>     ## type-id.h (module 'core'): bool ns3::TypeId::SetAttributeInitialValue(uint32_t i, ns3::Ptr<ns3::AttributeValue const> initialValue) [member function]
6528c5462
<                    [param('std::size_t', 'i'), param('ns3::Ptr< ns3::AttributeValue const >', 'initialValue')])
---
>                    [param('uint32_t', 'i'), param('ns3::Ptr< ns3::AttributeValue const >', 'initialValue')])
6550c5484
<     ## type-id.h (module 'core'): ns3::TypeId::AttributeInformation::AttributeInformation(ns3::TypeId::AttributeInformation const & arg0) [constructor]
---
>     ## type-id.h (module 'core'): ns3::TypeId::AttributeInformation::AttributeInformation(ns3::TypeId::AttributeInformation const & arg0) [copy constructor]
6555a5490
>     ## type-id.h (module 'core'): ns3::TypeId::AttributeInformation::flags [variable]
6574c5509
<     ## type-id.h (module 'core'): ns3::TypeId::TraceSourceInformation::TraceSourceInformation(ns3::TypeId::TraceSourceInformation const & arg0) [constructor]
---
>     ## type-id.h (module 'core'): ns3::TypeId::TraceSourceInformation::TraceSourceInformation(ns3::TypeId::TraceSourceInformation const & arg0) [copy constructor]
6593c5528
<     ## empty.h (module 'core'): ns3::empty::empty(ns3::empty const & arg0) [constructor]
---
>     ## empty.h (module 'core'): ns3::empty::empty(ns3::empty const & arg0) [copy constructor]
6598,6603d5532
<     cls.add_binary_numeric_operator('*', root_module['ns3::Time'], root_module['ns3::int64x64_t'], param('ns3::Time const &', 'right'))
<     cls.add_binary_numeric_operator('+', root_module['ns3::int64x64_t'], root_module['ns3::int64x64_t'], param('ns3::int64x64_t const &', 'right'))
<     cls.add_binary_numeric_operator('-', root_module['ns3::int64x64_t'], root_module['ns3::int64x64_t'], param('ns3::int64x64_t const &', 'right'))
<     cls.add_binary_numeric_operator('*', root_module['ns3::int64x64_t'], root_module['ns3::int64x64_t'], param('ns3::int64x64_t const &', 'right'))
<     cls.add_binary_numeric_operator('/', root_module['ns3::int64x64_t'], root_module['ns3::int64x64_t'], param('ns3::int64x64_t const &', 'right'))
<     cls.add_binary_comparison_operator('!=')
6605,6607c5534,5540
<     cls.add_binary_comparison_operator('>=')
<     cls.add_output_stream_operator()
<     cls.add_binary_comparison_operator('==')
---
>     cls.add_binary_comparison_operator('!=')
>     cls.add_inplace_numeric_operator('+=', param('ns3::int64x64_t const &', u'right'))
>     cls.add_binary_numeric_operator('*', root_module['ns3::int64x64_t'], root_module['ns3::int64x64_t'], param('ns3::int64x64_t const &', u'right'))
>     cls.add_binary_numeric_operator('+', root_module['ns3::int64x64_t'], root_module['ns3::int64x64_t'], param('ns3::int64x64_t const &', u'right'))
>     cls.add_binary_numeric_operator('-', root_module['ns3::int64x64_t'], root_module['ns3::int64x64_t'], param('ns3::int64x64_t const &', u'right'))
>     cls.add_unary_numeric_operator('-')
>     cls.add_binary_numeric_operator('/', root_module['ns3::int64x64_t'], root_module['ns3::int64x64_t'], param('ns3::int64x64_t const &', u'right'))
6610,6615c5543,5549
<     cls.add_inplace_numeric_operator('+=', param('ns3::int64x64_t const &', 'right'))
<     cls.add_inplace_numeric_operator('-=', param('ns3::int64x64_t const &', 'right'))
<     cls.add_inplace_numeric_operator('*=', param('ns3::int64x64_t const &', 'right'))
<     cls.add_inplace_numeric_operator('/=', param('ns3::int64x64_t const &', 'right'))
<     cls.add_unary_numeric_operator('-')
<     ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t() [constructor]
---
>     cls.add_inplace_numeric_operator('*=', param('ns3::int64x64_t const &', u'right'))
>     cls.add_inplace_numeric_operator('-=', param('ns3::int64x64_t const &', u'right'))
>     cls.add_inplace_numeric_operator('/=', param('ns3::int64x64_t const &', u'right'))
>     cls.add_output_stream_operator()
>     cls.add_binary_comparison_operator('==')
>     cls.add_binary_comparison_operator('>=')
>     ## int64x64-double.h (module 'core'): ns3::int64x64_t::int64x64_t() [constructor]
6617,6635c5551,5569
<     ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t(double const value) [constructor]
<     cls.add_constructor([param('double const', 'value')])
<     ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t(long double const value) [constructor]
<     cls.add_constructor([param('long double const', 'value')])
<     ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t(int const v) [constructor]
<     cls.add_constructor([param('int const', 'v')])
<     ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t(long int const v) [constructor]
<     cls.add_constructor([param('long int const', 'v')])
<     ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t(long long int const v) [constructor]
<     cls.add_constructor([param('long long int const', 'v')])
<     ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t(unsigned int const v) [constructor]
<     cls.add_constructor([param('unsigned int const', 'v')])
<     ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t(long unsigned int const v) [constructor]
<     cls.add_constructor([param('long unsigned int const', 'v')])
<     ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t(long long unsigned int const v) [constructor]
<     cls.add_constructor([param('long long unsigned int const', 'v')])
<     ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t(int64_t const hi, uint64_t const lo) [constructor]
<     cls.add_constructor([param('int64_t const', 'hi'), param('uint64_t const', 'lo')])
<     ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t(ns3::int64x64_t const & o) [constructor]
---
>     ## int64x64-double.h (module 'core'): ns3::int64x64_t::int64x64_t(double v) [constructor]
>     cls.add_constructor([param('double', 'v')])
>     ## int64x64-double.h (module 'core'): ns3::int64x64_t::int64x64_t(long double v) [constructor]
>     cls.add_constructor([param('long double', 'v')])
>     ## int64x64-double.h (module 'core'): ns3::int64x64_t::int64x64_t(int v) [constructor]
>     cls.add_constructor([param('int', 'v')])
>     ## int64x64-double.h (module 'core'): ns3::int64x64_t::int64x64_t(long int v) [constructor]
>     cls.add_constructor([param('long int', 'v')])
>     ## int64x64-double.h (module 'core'): ns3::int64x64_t::int64x64_t(long long int v) [constructor]
>     cls.add_constructor([param('long long int', 'v')])
>     ## int64x64-double.h (module 'core'): ns3::int64x64_t::int64x64_t(unsigned int v) [constructor]
>     cls.add_constructor([param('unsigned int', 'v')])
>     ## int64x64-double.h (module 'core'): ns3::int64x64_t::int64x64_t(long unsigned int v) [constructor]
>     cls.add_constructor([param('long unsigned int', 'v')])
>     ## int64x64-double.h (module 'core'): ns3::int64x64_t::int64x64_t(long long unsigned int v) [constructor]
>     cls.add_constructor([param('long long unsigned int', 'v')])
>     ## int64x64-double.h (module 'core'): ns3::int64x64_t::int64x64_t(int64_t hi, uint64_t lo) [constructor]
>     cls.add_constructor([param('int64_t', 'hi'), param('uint64_t', 'lo')])
>     ## int64x64-double.h (module 'core'): ns3::int64x64_t::int64x64_t(ns3::int64x64_t const & o) [copy constructor]
6637c5571
<     ## int64x64-128.h (module 'core'): double ns3::int64x64_t::GetDouble() const [member function]
---
>     ## int64x64-double.h (module 'core'): double ns3::int64x64_t::GetDouble() const [member function]
6642c5576
<     ## int64x64-128.h (module 'core'): int64_t ns3::int64x64_t::GetHigh() const [member function]
---
>     ## int64x64-double.h (module 'core'): int64_t ns3::int64x64_t::GetHigh() const [member function]
6647c5581
<     ## int64x64-128.h (module 'core'): uint64_t ns3::int64x64_t::GetLow() const [member function]
---
>     ## int64x64-double.h (module 'core'): uint64_t ns3::int64x64_t::GetLow() const [member function]
6652c5586
<     ## int64x64-128.h (module 'core'): static ns3::int64x64_t ns3::int64x64_t::Invert(uint64_t const v) [member function]
---
>     ## int64x64-double.h (module 'core'): static ns3::int64x64_t ns3::int64x64_t::Invert(uint64_t v) [member function]
6655c5589
<                    [param('uint64_t const', 'v')], 
---
>                    [param('uint64_t', 'v')], 
6657c5591
<     ## int64x64-128.h (module 'core'): void ns3::int64x64_t::MulByInvert(ns3::int64x64_t const & o) [member function]
---
>     ## int64x64-double.h (module 'core'): void ns3::int64x64_t::MulByInvert(ns3::int64x64_t const & o) [member function]
6661c5595
<     ## int64x64-128.h (module 'core'): ns3::int64x64_t::implementation [variable]
---
>     ## int64x64-double.h (module 'core'): ns3::int64x64_t::implementation [variable]
6668c5602
<     ## chunk.h (module 'network'): ns3::Chunk::Chunk(ns3::Chunk const & arg0) [constructor]
---
>     ## chunk.h (module 'network'): ns3::Chunk::Chunk(ns3::Chunk const & arg0) [copy constructor]
6674,6679c5608
<                    is_virtual=True, is_pure_virtual=True)
<     ## chunk.h (module 'network'): uint32_t ns3::Chunk::Deserialize(ns3::Buffer::Iterator start, ns3::Buffer::Iterator end) [member function]
<     cls.add_method('Deserialize', 
<                    'uint32_t', 
<                    [param('ns3::Buffer::Iterator', 'start'), param('ns3::Buffer::Iterator', 'end')], 
<                    is_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
6689c5618
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
6696c5625
<     ## header.h (module 'network'): ns3::Header::Header(ns3::Header const & arg0) [constructor]
---
>     ## header.h (module 'network'): ns3::Header::Header(ns3::Header const & arg0) [copy constructor]
6702c5631
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
6707c5636
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
6717c5646
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
6722c5651
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
6726c5655
<     ## icmpv4.h (module 'internet'): ns3::Icmpv4DestinationUnreachable::Icmpv4DestinationUnreachable(ns3::Icmpv4DestinationUnreachable const & arg0) [constructor]
---
>     ## icmpv4.h (module 'internet'): ns3::Icmpv4DestinationUnreachable::Icmpv4DestinationUnreachable(ns3::Icmpv4DestinationUnreachable const & arg0) [copy constructor]
6750c5679
<     ## icmpv4.h (module 'internet'): void ns3::Icmpv4DestinationUnreachable::SetData(ns3::Ptr<const ns3::Packet> data) [member function]
---
>     ## icmpv4.h (module 'internet'): void ns3::Icmpv4DestinationUnreachable::SetData(ns3::Ptr<ns3::Packet const> data) [member function]
6766c5695
<                    is_virtual=True, visibility='private')
---
>                    visibility='private', is_virtual=True)
6771c5700
<                    is_const=True, is_virtual=True, visibility='private')
---
>                    is_const=True, visibility='private', is_virtual=True)
6776c5705
<                    is_const=True, is_virtual=True, visibility='private')
---
>                    is_const=True, visibility='private', is_virtual=True)
6781c5710
<                    is_const=True, is_virtual=True, visibility='private')
---
>                    is_const=True, visibility='private', is_virtual=True)
6786c5715
<                    is_const=True, is_virtual=True, visibility='private')
---
>                    is_const=True, visibility='private', is_virtual=True)
6790c5719
<     ## icmpv4.h (module 'internet'): ns3::Icmpv4Echo::Icmpv4Echo(ns3::Icmpv4Echo const & arg0) [constructor]
---
>     ## icmpv4.h (module 'internet'): ns3::Icmpv4Echo::Icmpv4Echo(ns3::Icmpv4Echo const & arg0) [copy constructor]
6844c5773
<     ## icmpv4.h (module 'internet'): void ns3::Icmpv4Echo::SetData(ns3::Ptr<const ns3::Packet> data) [member function]
---
>     ## icmpv4.h (module 'internet'): void ns3::Icmpv4Echo::SetData(ns3::Ptr<ns3::Packet const> data) [member function]
6859c5788
<     ## icmpv4.h (module 'internet'): ns3::Icmpv4Header::Icmpv4Header(ns3::Icmpv4Header const & arg0) [constructor]
---
>     ## icmpv4.h (module 'internet'): ns3::Icmpv4Header::Icmpv4Header(ns3::Icmpv4Header const & arg0) [copy constructor]
6918c5847
<     ## icmpv4.h (module 'internet'): ns3::Icmpv4TimeExceeded::Icmpv4TimeExceeded(ns3::Icmpv4TimeExceeded const & arg0) [constructor]
---
>     ## icmpv4.h (module 'internet'): ns3::Icmpv4TimeExceeded::Icmpv4TimeExceeded(ns3::Icmpv4TimeExceeded const & arg0) [copy constructor]
6962c5891
<     ## icmpv4.h (module 'internet'): void ns3::Icmpv4TimeExceeded::SetData(ns3::Ptr<const ns3::Packet> data) [member function]
---
>     ## icmpv4.h (module 'internet'): void ns3::Icmpv4TimeExceeded::SetData(ns3::Ptr<ns3::Packet const> data) [member function]
6973c5902
<     ## icmpv6-header.h (module 'internet'): ns3::Icmpv6Header::Icmpv6Header(ns3::Icmpv6Header const & arg0) [constructor]
---
>     ## icmpv6-header.h (module 'internet'): ns3::Icmpv6Header::Icmpv6Header(ns3::Icmpv6Header const & arg0) [copy constructor]
7041c5970
<     ## icmpv6-header.h (module 'internet'): ns3::Icmpv6NA::Icmpv6NA(ns3::Icmpv6NA const & arg0) [constructor]
---
>     ## icmpv6-header.h (module 'internet'): ns3::Icmpv6NA::Icmpv6NA(ns3::Icmpv6NA const & arg0) [copy constructor]
7123c6052
<     ## icmpv6-header.h (module 'internet'): ns3::Icmpv6NS::Icmpv6NS(ns3::Icmpv6NS const & arg0) [constructor]
---
>     ## icmpv6-header.h (module 'internet'): ns3::Icmpv6NS::Icmpv6NS(ns3::Icmpv6NS const & arg0) [copy constructor]
7180c6109
<     ## icmpv6-header.h (module 'internet'): ns3::Icmpv6OptionHeader::Icmpv6OptionHeader(ns3::Icmpv6OptionHeader const & arg0) [constructor]
---
>     ## icmpv6-header.h (module 'internet'): ns3::Icmpv6OptionHeader::Icmpv6OptionHeader(ns3::Icmpv6OptionHeader const & arg0) [copy constructor]
7235c6164
<     ## icmpv6-header.h (module 'internet'): ns3::Icmpv6OptionLinkLayerAddress::Icmpv6OptionLinkLayerAddress(ns3::Icmpv6OptionLinkLayerAddress const & arg0) [constructor]
---
>     ## icmpv6-header.h (module 'internet'): ns3::Icmpv6OptionLinkLayerAddress::Icmpv6OptionLinkLayerAddress(ns3::Icmpv6OptionLinkLayerAddress const & arg0) [copy constructor]
7285c6214
<     ## icmpv6-header.h (module 'internet'): ns3::Icmpv6OptionMtu::Icmpv6OptionMtu(ns3::Icmpv6OptionMtu const & arg0) [constructor]
---
>     ## icmpv6-header.h (module 'internet'): ns3::Icmpv6OptionMtu::Icmpv6OptionMtu(ns3::Icmpv6OptionMtu const & arg0) [copy constructor]
7342c6271
<     ## icmpv6-header.h (module 'internet'): ns3::Icmpv6OptionPrefixInformation::Icmpv6OptionPrefixInformation(ns3::Icmpv6OptionPrefixInformation const & arg0) [constructor]
---
>     ## icmpv6-header.h (module 'internet'): ns3::Icmpv6OptionPrefixInformation::Icmpv6OptionPrefixInformation(ns3::Icmpv6OptionPrefixInformation const & arg0) [copy constructor]
7435c6364
<     ## icmpv6-header.h (module 'internet'): ns3::Icmpv6OptionRedirected::Icmpv6OptionRedirected(ns3::Icmpv6OptionRedirected const & arg0) [constructor]
---
>     ## icmpv6-header.h (module 'internet'): ns3::Icmpv6OptionRedirected::Icmpv6OptionRedirected(ns3::Icmpv6OptionRedirected const & arg0) [copy constructor]
7481c6410
<     ## icmpv6-header.h (module 'internet'): ns3::Icmpv6ParameterError::Icmpv6ParameterError(ns3::Icmpv6ParameterError const & arg0) [constructor]
---
>     ## icmpv6-header.h (module 'internet'): ns3::Icmpv6ParameterError::Icmpv6ParameterError(ns3::Icmpv6ParameterError const & arg0) [copy constructor]
7536c6465
<     ## icmpv6-header.h (module 'internet'): ns3::Icmpv6RA::Icmpv6RA(ns3::Icmpv6RA const & arg0) [constructor]
---
>     ## icmpv6-header.h (module 'internet'): ns3::Icmpv6RA::Icmpv6RA(ns3::Icmpv6RA const & arg0) [copy constructor]
7645c6574
<     ## icmpv6-header.h (module 'internet'): ns3::Icmpv6RS::Icmpv6RS(ns3::Icmpv6RS const & arg0) [constructor]
---
>     ## icmpv6-header.h (module 'internet'): ns3::Icmpv6RS::Icmpv6RS(ns3::Icmpv6RS const & arg0) [copy constructor]
7691c6620
<     ## icmpv6-header.h (module 'internet'): ns3::Icmpv6Redirection::Icmpv6Redirection(ns3::Icmpv6Redirection const & arg0) [constructor]
---
>     ## icmpv6-header.h (module 'internet'): ns3::Icmpv6Redirection::Icmpv6Redirection(ns3::Icmpv6Redirection const & arg0) [copy constructor]
7755c6684
<     ## icmpv6-header.h (module 'internet'): ns3::Icmpv6TimeExceeded::Icmpv6TimeExceeded(ns3::Icmpv6TimeExceeded const & arg0) [constructor]
---
>     ## icmpv6-header.h (module 'internet'): ns3::Icmpv6TimeExceeded::Icmpv6TimeExceeded(ns3::Icmpv6TimeExceeded const & arg0) [copy constructor]
7801c6730
<     ## icmpv6-header.h (module 'internet'): ns3::Icmpv6TooBig::Icmpv6TooBig(ns3::Icmpv6TooBig const & arg0) [constructor]
---
>     ## icmpv6-header.h (module 'internet'): ns3::Icmpv6TooBig::Icmpv6TooBig(ns3::Icmpv6TooBig const & arg0) [copy constructor]
7858,7859c6787,6788
<     ## internet-stack-helper.h (module 'internet'): ns3::InternetStackHelper::InternetStackHelper(ns3::InternetStackHelper const & o) [constructor]
<     cls.add_constructor([param('ns3::InternetStackHelper const &', 'o')])
---
>     ## internet-stack-helper.h (module 'internet'): ns3::InternetStackHelper::InternetStackHelper(ns3::InternetStackHelper const & arg0) [copy constructor]
>     cls.add_constructor([param('ns3::InternetStackHelper const &', 'arg0')])
7924c6853
<                    is_virtual=True, visibility='private')
---
>                    visibility='private', is_virtual=True)
7929c6858
<                    is_virtual=True, visibility='private')
---
>                    visibility='private', is_virtual=True)
7934c6863
<                    is_virtual=True, visibility='private')
---
>                    visibility='private', is_virtual=True)
7939c6868
<                    is_virtual=True, visibility='private')
---
>                    visibility='private', is_virtual=True)
7945c6874
<     ## ipv4-global-routing-helper.h (module 'internet'): ns3::Ipv4GlobalRoutingHelper::Ipv4GlobalRoutingHelper(ns3::Ipv4GlobalRoutingHelper const & arg0) [constructor]
---
>     ## ipv4-global-routing-helper.h (module 'internet'): ns3::Ipv4GlobalRoutingHelper::Ipv4GlobalRoutingHelper(ns3::Ipv4GlobalRoutingHelper const & arg0) [copy constructor]
7970c6899
<     ## ipv4-header.h (module 'internet'): ns3::Ipv4Header::Ipv4Header(ns3::Ipv4Header const & arg0) [constructor]
---
>     ## ipv4-header.h (module 'internet'): ns3::Ipv4Header::Ipv4Header(ns3::Ipv4Header const & arg0) [copy constructor]
8144c7073
<     ## ipv4-list-routing-helper.h (module 'internet'): ns3::Ipv4ListRoutingHelper::Ipv4ListRoutingHelper(ns3::Ipv4ListRoutingHelper const & arg0) [constructor]
---
>     ## ipv4-list-routing-helper.h (module 'internet'): ns3::Ipv4ListRoutingHelper::Ipv4ListRoutingHelper(ns3::Ipv4ListRoutingHelper const & arg0) [copy constructor]
8163c7092
<     ## ipv4-packet-info-tag.h (module 'internet'): ns3::Ipv4PacketInfoTag::Ipv4PacketInfoTag(ns3::Ipv4PacketInfoTag const & arg0) [constructor]
---
>     ## ipv4-packet-info-tag.h (module 'internet'): ns3::Ipv4PacketInfoTag::Ipv4PacketInfoTag(ns3::Ipv4PacketInfoTag const & arg0) [copy constructor]
8236c7165
<     ## ipv6-extension-header.h (module 'internet'): ns3::Ipv6ExtensionHeader::Ipv6ExtensionHeader(ns3::Ipv6ExtensionHeader const & arg0) [constructor]
---
>     ## ipv6-extension-header.h (module 'internet'): ns3::Ipv6ExtensionHeader::Ipv6ExtensionHeader(ns3::Ipv6ExtensionHeader const & arg0) [copy constructor]
8291c7220
<     ## ipv6-extension-header.h (module 'internet'): ns3::Ipv6ExtensionHopByHopHeader::Ipv6ExtensionHopByHopHeader(ns3::Ipv6ExtensionHopByHopHeader const & arg0) [constructor]
---
>     ## ipv6-extension-header.h (module 'internet'): ns3::Ipv6ExtensionHopByHopHeader::Ipv6ExtensionHopByHopHeader(ns3::Ipv6ExtensionHopByHopHeader const & arg0) [copy constructor]
8328c7257
<     ## ipv6-extension-header.h (module 'internet'): ns3::Ipv6ExtensionRoutingHeader::Ipv6ExtensionRoutingHeader(ns3::Ipv6ExtensionRoutingHeader const & arg0) [constructor]
---
>     ## ipv6-extension-header.h (module 'internet'): ns3::Ipv6ExtensionRoutingHeader::Ipv6ExtensionRoutingHeader(ns3::Ipv6ExtensionRoutingHeader const & arg0) [copy constructor]
8383c7312
<     ## ipv6-header.h (module 'internet'): ns3::Ipv6Header::Ipv6Header(ns3::Ipv6Header const & arg0) [constructor]
---
>     ## ipv6-header.h (module 'internet'): ns3::Ipv6Header::Ipv6Header(ns3::Ipv6Header const & arg0) [copy constructor]
8397,8401d7325
<     ## ipv6-header.h (module 'internet'): std::string ns3::Ipv6Header::EcnTypeToString(ns3::Ipv6Header::EcnType ecn) const [member function]
<     cls.add_method('EcnTypeToString', 
<                    'std::string', 
<                    [param('ns3::Ipv6Header::EcnType', 'ecn')], 
<                    is_const=True)
8412,8416d7335
<     ## ipv6-header.h (module 'internet'): ns3::Ipv6Header::EcnType ns3::Ipv6Header::GetEcn() const [member function]
<     cls.add_method('GetEcn', 
<                    'ns3::Ipv6Header::EcnType', 
<                    [], 
<                    is_const=True)
8480,8483d7398
<     ## ipv6-header.h (module 'internet'): void ns3::Ipv6Header::SetEcn(ns3::Ipv6Header::EcnType ecn) [member function]
<     cls.add_method('SetEcn', 
<                    'void', 
<                    [param('ns3::Ipv6Header::EcnType', 'ecn')])
8513c7428
<     ## ipv6-list-routing-helper.h (module 'internet'): ns3::Ipv6ListRoutingHelper::Ipv6ListRoutingHelper(ns3::Ipv6ListRoutingHelper const & arg0) [constructor]
---
>     ## ipv6-list-routing-helper.h (module 'internet'): ns3::Ipv6ListRoutingHelper::Ipv6ListRoutingHelper(ns3::Ipv6ListRoutingHelper const & arg0) [copy constructor]
8532c7447
<     ## ipv6-option-header.h (module 'internet'): ns3::Ipv6OptionHeader::Ipv6OptionHeader(ns3::Ipv6OptionHeader const & arg0) [constructor]
---
>     ## ipv6-option-header.h (module 'internet'): ns3::Ipv6OptionHeader::Ipv6OptionHeader(ns3::Ipv6OptionHeader const & arg0) [copy constructor]
8594c7509
<     ## ipv6-option-header.h (module 'internet'): ns3::Ipv6OptionHeader::Alignment::Alignment(ns3::Ipv6OptionHeader::Alignment const & arg0) [constructor]
---
>     ## ipv6-option-header.h (module 'internet'): ns3::Ipv6OptionHeader::Alignment::Alignment(ns3::Ipv6OptionHeader::Alignment const & arg0) [copy constructor]
8603c7518
<     ## ipv6-option-header.h (module 'internet'): ns3::Ipv6OptionJumbogramHeader::Ipv6OptionJumbogramHeader(ns3::Ipv6OptionJumbogramHeader const & arg0) [constructor]
---
>     ## ipv6-option-header.h (module 'internet'): ns3::Ipv6OptionJumbogramHeader::Ipv6OptionJumbogramHeader(ns3::Ipv6OptionJumbogramHeader const & arg0) [copy constructor]
8654c7569
<     ## ipv6-option-header.h (module 'internet'): ns3::Ipv6OptionPad1Header::Ipv6OptionPad1Header(ns3::Ipv6OptionPad1Header const & arg0) [constructor]
---
>     ## ipv6-option-header.h (module 'internet'): ns3::Ipv6OptionPad1Header::Ipv6OptionPad1Header(ns3::Ipv6OptionPad1Header const & arg0) [copy constructor]
8691c7606
<     ## ipv6-option-header.h (module 'internet'): ns3::Ipv6OptionPadnHeader::Ipv6OptionPadnHeader(ns3::Ipv6OptionPadnHeader const & arg0) [constructor]
---
>     ## ipv6-option-header.h (module 'internet'): ns3::Ipv6OptionPadnHeader::Ipv6OptionPadnHeader(ns3::Ipv6OptionPadnHeader const & arg0) [copy constructor]
8728c7643
<     ## ipv6-option-header.h (module 'internet'): ns3::Ipv6OptionRouterAlertHeader::Ipv6OptionRouterAlertHeader(ns3::Ipv6OptionRouterAlertHeader const & arg0) [constructor]
---
>     ## ipv6-option-header.h (module 'internet'): ns3::Ipv6OptionRouterAlertHeader::Ipv6OptionRouterAlertHeader(ns3::Ipv6OptionRouterAlertHeader const & arg0) [copy constructor]
8779c7694
<     ## ipv6-packet-info-tag.h (module 'internet'): ns3::Ipv6PacketInfoTag::Ipv6PacketInfoTag(ns3::Ipv6PacketInfoTag const & arg0) [constructor]
---
>     ## ipv6-packet-info-tag.h (module 'internet'): ns3::Ipv6PacketInfoTag::Ipv6PacketInfoTag(ns3::Ipv6PacketInfoTag const & arg0) [copy constructor]
8886c7801
<     ## object.h (module 'core'): ns3::Object::Object(ns3::Object const & o) [constructor]
---
>     ## object.h (module 'core'): ns3::Object::Object(ns3::Object const & o) [copy constructor]
8893c7808
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
8898c7813
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
8903c7818
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
8907c7822
<     ## object.h (module 'core'): ns3::Object::AggregateIterator::AggregateIterator(ns3::Object::AggregateIterator const & arg0) [constructor]
---
>     ## object.h (module 'core'): ns3::Object::AggregateIterator::AggregateIterator(ns3::Object::AggregateIterator const & arg0) [copy constructor]
8916c7831
<     ## object.h (module 'core'): ns3::Ptr<const ns3::Object> ns3::Object::AggregateIterator::Next() [member function]
---
>     ## object.h (module 'core'): ns3::Ptr<ns3::Object const> ns3::Object::AggregateIterator::Next() [member function]
8923c7838
<     ## packet-filter.h (module 'traffic-control'): ns3::PacketFilter::PacketFilter(ns3::PacketFilter const & arg0) [constructor]
---
>     ## packet-filter.h (module 'traffic-control'): ns3::PacketFilter::PacketFilter(ns3::PacketFilter const & arg0) [copy constructor]
8943c7858
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
8948c7863
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
8973c7888
<     ## pcap-file-wrapper.h (module 'network'): void ns3::PcapFileWrapper::Open(std::string const & filename, std::ios_base::openmode mode) [member function]
---
>     ## pcap-file-wrapper.h (module 'network'): void ns3::PcapFileWrapper::Open(std::string const & filename, std::_Ios_Openmode mode) [member function]
8976c7891
<                    [param('std::string const &', 'filename'), param('std::ios_base::openmode', 'mode')])
---
>                    [param('std::string const &', 'filename'), param('std::_Ios_Openmode', 'mode')])
8985c7900
<     ## pcap-file-wrapper.h (module 'network'): void ns3::PcapFileWrapper::Write(ns3::Time t, ns3::Ptr<const ns3::Packet> p) [member function]
---
>     ## pcap-file-wrapper.h (module 'network'): void ns3::PcapFileWrapper::Write(ns3::Time t, ns3::Ptr<ns3::Packet const> p) [member function]
8989c7904
<     ## pcap-file-wrapper.h (module 'network'): void ns3::PcapFileWrapper::Write(ns3::Time t, ns3::Header const & header, ns3::Ptr<const ns3::Packet> p) [member function]
---
>     ## pcap-file-wrapper.h (module 'network'): void ns3::PcapFileWrapper::Write(ns3::Time t, ns3::Header const & header, ns3::Ptr<ns3::Packet const> p) [member function]
9030a7946,8283
> def register_Ns3Queue_methods(root_module, cls):
>     ## queue.h (module 'network'): ns3::Queue::Queue(ns3::Queue const & arg0) [copy constructor]
>     cls.add_constructor([param('ns3::Queue const &', 'arg0')])
>     ## queue.h (module 'network'): ns3::Queue::Queue() [constructor]
>     cls.add_constructor([])
>     ## queue.h (module 'network'): ns3::Ptr<ns3::QueueItem> ns3::Queue::Dequeue() [member function]
>     cls.add_method('Dequeue', 
>                    'ns3::Ptr< ns3::QueueItem >', 
>                    [])
>     ## queue.h (module 'network'): void ns3::Queue::DequeueAll() [member function]
>     cls.add_method('DequeueAll', 
>                    'void', 
>                    [])
>     ## queue.h (module 'network'): bool ns3::Queue::Enqueue(ns3::Ptr<ns3::QueueItem> item) [member function]
>     cls.add_method('Enqueue', 
>                    'bool', 
>                    [param('ns3::Ptr< ns3::QueueItem >', 'item')])
>     ## queue.h (module 'network'): uint32_t ns3::Queue::GetMaxBytes() const [member function]
>     cls.add_method('GetMaxBytes', 
>                    'uint32_t', 
>                    [], 
>                    is_const=True)
>     ## queue.h (module 'network'): uint32_t ns3::Queue::GetMaxPackets() const [member function]
>     cls.add_method('GetMaxPackets', 
>                    'uint32_t', 
>                    [], 
>                    is_const=True)
>     ## queue.h (module 'network'): ns3::Queue::QueueMode ns3::Queue::GetMode() const [member function]
>     cls.add_method('GetMode', 
>                    'ns3::Queue::QueueMode', 
>                    [], 
>                    is_const=True)
>     ## queue.h (module 'network'): uint32_t ns3::Queue::GetNBytes() const [member function]
>     cls.add_method('GetNBytes', 
>                    'uint32_t', 
>                    [], 
>                    is_const=True)
>     ## queue.h (module 'network'): uint32_t ns3::Queue::GetNPackets() const [member function]
>     cls.add_method('GetNPackets', 
>                    'uint32_t', 
>                    [], 
>                    is_const=True)
>     ## queue.h (module 'network'): uint32_t ns3::Queue::GetTotalDroppedBytes() const [member function]
>     cls.add_method('GetTotalDroppedBytes', 
>                    'uint32_t', 
>                    [], 
>                    is_const=True)
>     ## queue.h (module 'network'): uint32_t ns3::Queue::GetTotalDroppedPackets() const [member function]
>     cls.add_method('GetTotalDroppedPackets', 
>                    'uint32_t', 
>                    [], 
>                    is_const=True)
>     ## queue.h (module 'network'): uint32_t ns3::Queue::GetTotalReceivedBytes() const [member function]
>     cls.add_method('GetTotalReceivedBytes', 
>                    'uint32_t', 
>                    [], 
>                    is_const=True)
>     ## queue.h (module 'network'): uint32_t ns3::Queue::GetTotalReceivedPackets() const [member function]
>     cls.add_method('GetTotalReceivedPackets', 
>                    'uint32_t', 
>                    [], 
>                    is_const=True)
>     ## queue.h (module 'network'): static ns3::TypeId ns3::Queue::GetTypeId() [member function]
>     cls.add_method('GetTypeId', 
>                    'ns3::TypeId', 
>                    [], 
>                    is_static=True)
>     ## queue.h (module 'network'): bool ns3::Queue::IsEmpty() const [member function]
>     cls.add_method('IsEmpty', 
>                    'bool', 
>                    [], 
>                    is_const=True)
>     ## queue.h (module 'network'): ns3::Ptr<const ns3::QueueItem> ns3::Queue::Peek() const [member function]
>     cls.add_method('Peek', 
>                    'ns3::Ptr< ns3::QueueItem const >', 
>                    [], 
>                    is_const=True)
>     ## queue.h (module 'network'): ns3::Ptr<ns3::QueueItem> ns3::Queue::Remove() [member function]
>     cls.add_method('Remove', 
>                    'ns3::Ptr< ns3::QueueItem >', 
>                    [])
>     ## queue.h (module 'network'): void ns3::Queue::ResetStatistics() [member function]
>     cls.add_method('ResetStatistics', 
>                    'void', 
>                    [])
>     ## queue.h (module 'network'): void ns3::Queue::SetDropCallback(ns3::Callback<void, ns3::Ptr<ns3::QueueItem>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> cb) [member function]
>     cls.add_method('SetDropCallback', 
>                    'void', 
>                    [param('ns3::Callback< void, ns3::Ptr< ns3::QueueItem >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'cb')], 
>                    is_virtual=True)
>     ## queue.h (module 'network'): void ns3::Queue::SetMaxBytes(uint32_t maxBytes) [member function]
>     cls.add_method('SetMaxBytes', 
>                    'void', 
>                    [param('uint32_t', 'maxBytes')])
>     ## queue.h (module 'network'): void ns3::Queue::SetMaxPackets(uint32_t maxPackets) [member function]
>     cls.add_method('SetMaxPackets', 
>                    'void', 
>                    [param('uint32_t', 'maxPackets')])
>     ## queue.h (module 'network'): void ns3::Queue::SetMode(ns3::Queue::QueueMode mode) [member function]
>     cls.add_method('SetMode', 
>                    'void', 
>                    [param('ns3::Queue::QueueMode', 'mode')])
>     ## queue.h (module 'network'): void ns3::Queue::Drop(ns3::Ptr<ns3::QueueItem> item) [member function]
>     cls.add_method('Drop', 
>                    'void', 
>                    [param('ns3::Ptr< ns3::QueueItem >', 'item')], 
>                    visibility='protected')
>     ## queue.h (module 'network'): ns3::Ptr<ns3::QueueItem> ns3::Queue::DoDequeue() [member function]
>     cls.add_method('DoDequeue', 
>                    'ns3::Ptr< ns3::QueueItem >', 
>                    [], 
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
>     ## queue.h (module 'network'): bool ns3::Queue::DoEnqueue(ns3::Ptr<ns3::QueueItem> item) [member function]
>     cls.add_method('DoEnqueue', 
>                    'bool', 
>                    [param('ns3::Ptr< ns3::QueueItem >', 'item')], 
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
>     ## queue.h (module 'network'): ns3::Ptr<const ns3::QueueItem> ns3::Queue::DoPeek() const [member function]
>     cls.add_method('DoPeek', 
>                    'ns3::Ptr< ns3::QueueItem const >', 
>                    [], 
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
>     ## queue.h (module 'network'): ns3::Ptr<ns3::QueueItem> ns3::Queue::DoRemove() [member function]
>     cls.add_method('DoRemove', 
>                    'ns3::Ptr< ns3::QueueItem >', 
>                    [], 
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
>     return
> 
> def register_Ns3QueueDisc_methods(root_module, cls):
>     ## queue-disc.h (module 'traffic-control'): ns3::QueueDisc::QueueDisc(ns3::QueueDisc const & arg0) [copy constructor]
>     cls.add_constructor([param('ns3::QueueDisc const &', 'arg0')])
>     ## queue-disc.h (module 'traffic-control'): ns3::QueueDisc::QueueDisc() [constructor]
>     cls.add_constructor([])
>     ## queue-disc.h (module 'traffic-control'): void ns3::QueueDisc::AddInternalQueue(ns3::Ptr<ns3::Queue> queue) [member function]
>     cls.add_method('AddInternalQueue', 
>                    'void', 
>                    [param('ns3::Ptr< ns3::Queue >', 'queue')])
>     ## queue-disc.h (module 'traffic-control'): void ns3::QueueDisc::AddPacketFilter(ns3::Ptr<ns3::PacketFilter> filter) [member function]
>     cls.add_method('AddPacketFilter', 
>                    'void', 
>                    [param('ns3::Ptr< ns3::PacketFilter >', 'filter')])
>     ## queue-disc.h (module 'traffic-control'): void ns3::QueueDisc::AddQueueDiscClass(ns3::Ptr<ns3::QueueDiscClass> qdClass) [member function]
>     cls.add_method('AddQueueDiscClass', 
>                    'void', 
>                    [param('ns3::Ptr< ns3::QueueDiscClass >', 'qdClass')])
>     ## queue-disc.h (module 'traffic-control'): int32_t ns3::QueueDisc::Classify(ns3::Ptr<ns3::QueueDiscItem> item) [member function]
>     cls.add_method('Classify', 
>                    'int32_t', 
>                    [param('ns3::Ptr< ns3::QueueDiscItem >', 'item')])
>     ## queue-disc.h (module 'traffic-control'): ns3::Ptr<ns3::QueueDiscItem> ns3::QueueDisc::Dequeue() [member function]
>     cls.add_method('Dequeue', 
>                    'ns3::Ptr< ns3::QueueDiscItem >', 
>                    [])
>     ## queue-disc.h (module 'traffic-control'): bool ns3::QueueDisc::Enqueue(ns3::Ptr<ns3::QueueDiscItem> item) [member function]
>     cls.add_method('Enqueue', 
>                    'bool', 
>                    [param('ns3::Ptr< ns3::QueueDiscItem >', 'item')])
>     ## queue-disc.h (module 'traffic-control'): ns3::Ptr<ns3::Queue> ns3::QueueDisc::GetInternalQueue(uint32_t i) const [member function]
>     cls.add_method('GetInternalQueue', 
>                    'ns3::Ptr< ns3::Queue >', 
>                    [param('uint32_t', 'i')], 
>                    is_const=True)
>     ## queue-disc.h (module 'traffic-control'): uint32_t ns3::QueueDisc::GetNBytes() const [member function]
>     cls.add_method('GetNBytes', 
>                    'uint32_t', 
>                    [], 
>                    is_const=True)
>     ## queue-disc.h (module 'traffic-control'): uint32_t ns3::QueueDisc::GetNInternalQueues() const [member function]
>     cls.add_method('GetNInternalQueues', 
>                    'uint32_t', 
>                    [], 
>                    is_const=True)
>     ## queue-disc.h (module 'traffic-control'): uint32_t ns3::QueueDisc::GetNPacketFilters() const [member function]
>     cls.add_method('GetNPacketFilters', 
>                    'uint32_t', 
>                    [], 
>                    is_const=True)
>     ## queue-disc.h (module 'traffic-control'): uint32_t ns3::QueueDisc::GetNPackets() const [member function]
>     cls.add_method('GetNPackets', 
>                    'uint32_t', 
>                    [], 
>                    is_const=True)
>     ## queue-disc.h (module 'traffic-control'): uint32_t ns3::QueueDisc::GetNQueueDiscClasses() const [member function]
>     cls.add_method('GetNQueueDiscClasses', 
>                    'uint32_t', 
>                    [], 
>                    is_const=True)
>     ## queue-disc.h (module 'traffic-control'): ns3::Ptr<ns3::NetDevice> ns3::QueueDisc::GetNetDevice() const [member function]
>     cls.add_method('GetNetDevice', 
>                    'ns3::Ptr< ns3::NetDevice >', 
>                    [], 
>                    is_const=True)
>     ## queue-disc.h (module 'traffic-control'): ns3::Ptr<ns3::PacketFilter> ns3::QueueDisc::GetPacketFilter(uint32_t i) const [member function]
>     cls.add_method('GetPacketFilter', 
>                    'ns3::Ptr< ns3::PacketFilter >', 
>                    [param('uint32_t', 'i')], 
>                    is_const=True)
>     ## queue-disc.h (module 'traffic-control'): ns3::Ptr<ns3::QueueDiscClass> ns3::QueueDisc::GetQueueDiscClass(uint32_t i) const [member function]
>     cls.add_method('GetQueueDiscClass', 
>                    'ns3::Ptr< ns3::QueueDiscClass >', 
>                    [param('uint32_t', 'i')], 
>                    is_const=True)
>     ## queue-disc.h (module 'traffic-control'): uint32_t ns3::QueueDisc::GetQuota() const [member function]
>     cls.add_method('GetQuota', 
>                    'uint32_t', 
>                    [], 
>                    is_const=True, is_virtual=True)
>     ## queue-disc.h (module 'traffic-control'): uint32_t ns3::QueueDisc::GetTotalDroppedBytes() const [member function]
>     cls.add_method('GetTotalDroppedBytes', 
>                    'uint32_t', 
>                    [], 
>                    is_const=True)
>     ## queue-disc.h (module 'traffic-control'): uint32_t ns3::QueueDisc::GetTotalDroppedPackets() const [member function]
>     cls.add_method('GetTotalDroppedPackets', 
>                    'uint32_t', 
>                    [], 
>                    is_const=True)
>     ## queue-disc.h (module 'traffic-control'): uint32_t ns3::QueueDisc::GetTotalReceivedBytes() const [member function]
>     cls.add_method('GetTotalReceivedBytes', 
>                    'uint32_t', 
>                    [], 
>                    is_const=True)
>     ## queue-disc.h (module 'traffic-control'): uint32_t ns3::QueueDisc::GetTotalReceivedPackets() const [member function]
>     cls.add_method('GetTotalReceivedPackets', 
>                    'uint32_t', 
>                    [], 
>                    is_const=True)
>     ## queue-disc.h (module 'traffic-control'): uint32_t ns3::QueueDisc::GetTotalRequeuedBytes() const [member function]
>     cls.add_method('GetTotalRequeuedBytes', 
>                    'uint32_t', 
>                    [], 
>                    is_const=True)
>     ## queue-disc.h (module 'traffic-control'): uint32_t ns3::QueueDisc::GetTotalRequeuedPackets() const [member function]
>     cls.add_method('GetTotalRequeuedPackets', 
>                    'uint32_t', 
>                    [], 
>                    is_const=True)
>     ## queue-disc.h (module 'traffic-control'): static ns3::TypeId ns3::QueueDisc::GetTypeId() [member function]
>     cls.add_method('GetTypeId', 
>                    'ns3::TypeId', 
>                    [], 
>                    is_static=True)
>     ## queue-disc.h (module 'traffic-control'): ns3::QueueDisc::WakeMode ns3::QueueDisc::GetWakeMode() [member function]
>     cls.add_method('GetWakeMode', 
>                    'ns3::QueueDisc::WakeMode', 
>                    [])
>     ## queue-disc.h (module 'traffic-control'): ns3::Ptr<const ns3::QueueDiscItem> ns3::QueueDisc::Peek() const [member function]
>     cls.add_method('Peek', 
>                    'ns3::Ptr< ns3::QueueDiscItem const >', 
>                    [], 
>                    is_const=True)
>     ## queue-disc.h (module 'traffic-control'): void ns3::QueueDisc::Run() [member function]
>     cls.add_method('Run', 
>                    'void', 
>                    [])
>     ## queue-disc.h (module 'traffic-control'): void ns3::QueueDisc::SetNetDevice(ns3::Ptr<ns3::NetDevice> device) [member function]
>     cls.add_method('SetNetDevice', 
>                    'void', 
>                    [param('ns3::Ptr< ns3::NetDevice >', 'device')])
>     ## queue-disc.h (module 'traffic-control'): void ns3::QueueDisc::SetParentDropCallback(ns3::Callback<void, ns3::Ptr<ns3::QueueItem>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> cb) [member function]
>     cls.add_method('SetParentDropCallback', 
>                    'void', 
>                    [param('ns3::Callback< void, ns3::Ptr< ns3::QueueItem >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'cb')], 
>                    is_virtual=True)
>     ## queue-disc.h (module 'traffic-control'): void ns3::QueueDisc::SetQuota(uint32_t const quota) [member function]
>     cls.add_method('SetQuota', 
>                    'void', 
>                    [param('uint32_t const', 'quota')], 
>                    is_virtual=True)
>     ## queue-disc.h (module 'traffic-control'): void ns3::QueueDisc::DoDispose() [member function]
>     cls.add_method('DoDispose', 
>                    'void', 
>                    [], 
>                    visibility='protected', is_virtual=True)
>     ## queue-disc.h (module 'traffic-control'): void ns3::QueueDisc::DoInitialize() [member function]
>     cls.add_method('DoInitialize', 
>                    'void', 
>                    [], 
>                    visibility='protected', is_virtual=True)
>     ## queue-disc.h (module 'traffic-control'): void ns3::QueueDisc::Drop(ns3::Ptr<ns3::QueueItem> item) [member function]
>     cls.add_method('Drop', 
>                    'void', 
>                    [param('ns3::Ptr< ns3::QueueItem >', 'item')], 
>                    visibility='protected')
>     ## queue-disc.h (module 'traffic-control'): bool ns3::QueueDisc::CheckConfig() [member function]
>     cls.add_method('CheckConfig', 
>                    'bool', 
>                    [], 
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
>     ## queue-disc.h (module 'traffic-control'): ns3::Ptr<ns3::QueueDiscItem> ns3::QueueDisc::DoDequeue() [member function]
>     cls.add_method('DoDequeue', 
>                    'ns3::Ptr< ns3::QueueDiscItem >', 
>                    [], 
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
>     ## queue-disc.h (module 'traffic-control'): bool ns3::QueueDisc::DoEnqueue(ns3::Ptr<ns3::QueueDiscItem> item) [member function]
>     cls.add_method('DoEnqueue', 
>                    'bool', 
>                    [param('ns3::Ptr< ns3::QueueDiscItem >', 'item')], 
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
>     ## queue-disc.h (module 'traffic-control'): ns3::Ptr<const ns3::QueueDiscItem> ns3::QueueDisc::DoPeek() const [member function]
>     cls.add_method('DoPeek', 
>                    'ns3::Ptr< ns3::QueueDiscItem const >', 
>                    [], 
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
>     ## queue-disc.h (module 'traffic-control'): void ns3::QueueDisc::InitializeParams() [member function]
>     cls.add_method('InitializeParams', 
>                    'void', 
>                    [], 
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
>     return
> 
> def register_Ns3QueueDiscClass_methods(root_module, cls):
>     ## queue-disc.h (module 'traffic-control'): ns3::QueueDiscClass::QueueDiscClass(ns3::QueueDiscClass const & arg0) [copy constructor]
>     cls.add_constructor([param('ns3::QueueDiscClass const &', 'arg0')])
>     ## queue-disc.h (module 'traffic-control'): ns3::QueueDiscClass::QueueDiscClass() [constructor]
>     cls.add_constructor([])
>     ## queue-disc.h (module 'traffic-control'): ns3::Ptr<ns3::QueueDisc> ns3::QueueDiscClass::GetQueueDisc() const [member function]
>     cls.add_method('GetQueueDisc', 
>                    'ns3::Ptr< ns3::QueueDisc >', 
>                    [], 
>                    is_const=True)
>     ## queue-disc.h (module 'traffic-control'): static ns3::TypeId ns3::QueueDiscClass::GetTypeId() [member function]
>     cls.add_method('GetTypeId', 
>                    'ns3::TypeId', 
>                    [], 
>                    is_static=True)
>     ## queue-disc.h (module 'traffic-control'): void ns3::QueueDiscClass::SetQueueDisc(ns3::Ptr<ns3::QueueDisc> qd) [member function]
>     cls.add_method('SetQueueDisc', 
>                    'void', 
>                    [param('ns3::Ptr< ns3::QueueDisc >', 'qd')])
>     ## queue-disc.h (module 'traffic-control'): void ns3::QueueDiscClass::DoDispose() [member function]
>     cls.add_method('DoDispose', 
>                    'void', 
>                    [], 
>                    visibility='protected', is_virtual=True)
>     return
> 
9061c8314
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
9066c8319
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
9076c8329
<     ## rip-header.h (module 'internet'): ns3::RipHeader::RipHeader(ns3::RipHeader const & arg0) [constructor]
---
>     ## rip-header.h (module 'internet'): ns3::RipHeader::RipHeader(ns3::RipHeader const & arg0) [copy constructor]
9141c8394
<     ## ripng-header.h (module 'internet'): ns3::RipNgHeader::RipNgHeader(ns3::RipNgHeader const & arg0) [constructor]
---
>     ## ripng-header.h (module 'internet'): ns3::RipNgHeader::RipNgHeader(ns3::RipNgHeader const & arg0) [copy constructor]
9206c8459
<     ## ripng-header.h (module 'internet'): ns3::RipNgRte::RipNgRte(ns3::RipNgRte const & arg0) [constructor]
---
>     ## ripng-header.h (module 'internet'): ns3::RipNgRte::RipNgRte(ns3::RipNgRte const & arg0) [copy constructor]
9280c8533
<     ## rip-header.h (module 'internet'): ns3::RipRte::RipRte(ns3::RipRte const & arg0) [constructor]
---
>     ## rip-header.h (module 'internet'): ns3::RipRte::RipRte(ns3::RipRte const & arg0) [copy constructor]
9364c8617
<     ## rtt-estimator.h (module 'internet'): ns3::RttEstimator::RttEstimator(ns3::RttEstimator const & r) [constructor]
---
>     ## rtt-estimator.h (module 'internet'): ns3::RttEstimator::RttEstimator(ns3::RttEstimator const & r) [copy constructor]
9370c8623
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
9400c8653
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
9411c8664
<     ## rtt-estimator.h (module 'internet'): ns3::RttMeanDeviation::RttMeanDeviation(ns3::RttMeanDeviation const & r) [constructor]
---
>     ## rtt-estimator.h (module 'internet'): ns3::RttMeanDeviation::RttMeanDeviation(ns3::RttMeanDeviation const & r) [copy constructor]
9483c8736
<     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::AttributeAccessor, ns3::empty, ns3::DefaultDeleter<ns3::AttributeAccessor> >::SimpleRefCount(ns3::SimpleRefCount<ns3::AttributeAccessor, ns3::empty, ns3::DefaultDeleter<ns3::AttributeAccessor> > const & o) [constructor]
---
>     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::AttributeAccessor, ns3::empty, ns3::DefaultDeleter<ns3::AttributeAccessor> >::SimpleRefCount(ns3::SimpleRefCount<ns3::AttributeAccessor, ns3::empty, ns3::DefaultDeleter<ns3::AttributeAccessor> > const & o) [copy constructor]
9484a8738,8742
>     ## simple-ref-count.h (module 'core'): static void ns3::SimpleRefCount<ns3::AttributeAccessor, ns3::empty, ns3::DefaultDeleter<ns3::AttributeAccessor> >::Cleanup() [member function]
>     cls.add_method('Cleanup', 
>                    'void', 
>                    [], 
>                    is_static=True)
9490c8748
<     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker> >::SimpleRefCount(ns3::SimpleRefCount<ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker> > const & o) [constructor]
---
>     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker> >::SimpleRefCount(ns3::SimpleRefCount<ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker> > const & o) [copy constructor]
9491a8750,8754
>     ## simple-ref-count.h (module 'core'): static void ns3::SimpleRefCount<ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker> >::Cleanup() [member function]
>     cls.add_method('Cleanup', 
>                    'void', 
>                    [], 
>                    is_static=True)
9497c8760
<     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue> >::SimpleRefCount(ns3::SimpleRefCount<ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue> > const & o) [constructor]
---
>     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue> >::SimpleRefCount(ns3::SimpleRefCount<ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue> > const & o) [copy constructor]
9498a8762,8766
>     ## simple-ref-count.h (module 'core'): static void ns3::SimpleRefCount<ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue> >::Cleanup() [member function]
>     cls.add_method('Cleanup', 
>                    'void', 
>                    [], 
>                    is_static=True)
9504c8772
<     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::CallbackImplBase, ns3::empty, ns3::DefaultDeleter<ns3::CallbackImplBase> >::SimpleRefCount(ns3::SimpleRefCount<ns3::CallbackImplBase, ns3::empty, ns3::DefaultDeleter<ns3::CallbackImplBase> > const & o) [constructor]
---
>     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::CallbackImplBase, ns3::empty, ns3::DefaultDeleter<ns3::CallbackImplBase> >::SimpleRefCount(ns3::SimpleRefCount<ns3::CallbackImplBase, ns3::empty, ns3::DefaultDeleter<ns3::CallbackImplBase> > const & o) [copy constructor]
9505a8774,8778
>     ## simple-ref-count.h (module 'core'): static void ns3::SimpleRefCount<ns3::CallbackImplBase, ns3::empty, ns3::DefaultDeleter<ns3::CallbackImplBase> >::Cleanup() [member function]
>     cls.add_method('Cleanup', 
>                    'void', 
>                    [], 
>                    is_static=True)
9511c8784
<     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::EventImpl, ns3::empty, ns3::DefaultDeleter<ns3::EventImpl> >::SimpleRefCount(ns3::SimpleRefCount<ns3::EventImpl, ns3::empty, ns3::DefaultDeleter<ns3::EventImpl> > const & o) [constructor]
---
>     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::EventImpl, ns3::empty, ns3::DefaultDeleter<ns3::EventImpl> >::SimpleRefCount(ns3::SimpleRefCount<ns3::EventImpl, ns3::empty, ns3::DefaultDeleter<ns3::EventImpl> > const & o) [copy constructor]
9512a8786,8790
>     ## simple-ref-count.h (module 'core'): static void ns3::SimpleRefCount<ns3::EventImpl, ns3::empty, ns3::DefaultDeleter<ns3::EventImpl> >::Cleanup() [member function]
>     cls.add_method('Cleanup', 
>                    'void', 
>                    [], 
>                    is_static=True)
9518c8796
<     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Hash::Implementation, ns3::empty, ns3::DefaultDeleter<ns3::Hash::Implementation> >::SimpleRefCount(ns3::SimpleRefCount<ns3::Hash::Implementation, ns3::empty, ns3::DefaultDeleter<ns3::Hash::Implementation> > const & o) [constructor]
---
>     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Hash::Implementation, ns3::empty, ns3::DefaultDeleter<ns3::Hash::Implementation> >::SimpleRefCount(ns3::SimpleRefCount<ns3::Hash::Implementation, ns3::empty, ns3::DefaultDeleter<ns3::Hash::Implementation> > const & o) [copy constructor]
9519a8798,8802
>     ## simple-ref-count.h (module 'core'): static void ns3::SimpleRefCount<ns3::Hash::Implementation, ns3::empty, ns3::DefaultDeleter<ns3::Hash::Implementation> >::Cleanup() [member function]
>     cls.add_method('Cleanup', 
>                    'void', 
>                    [], 
>                    is_static=True)
9525c8808
<     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Ipv4MulticastRoute, ns3::empty, ns3::DefaultDeleter<ns3::Ipv4MulticastRoute> >::SimpleRefCount(ns3::SimpleRefCount<ns3::Ipv4MulticastRoute, ns3::empty, ns3::DefaultDeleter<ns3::Ipv4MulticastRoute> > const & o) [constructor]
---
>     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Ipv4MulticastRoute, ns3::empty, ns3::DefaultDeleter<ns3::Ipv4MulticastRoute> >::SimpleRefCount(ns3::SimpleRefCount<ns3::Ipv4MulticastRoute, ns3::empty, ns3::DefaultDeleter<ns3::Ipv4MulticastRoute> > const & o) [copy constructor]
9526a8810,8814
>     ## simple-ref-count.h (module 'core'): static void ns3::SimpleRefCount<ns3::Ipv4MulticastRoute, ns3::empty, ns3::DefaultDeleter<ns3::Ipv4MulticastRoute> >::Cleanup() [member function]
>     cls.add_method('Cleanup', 
>                    'void', 
>                    [], 
>                    is_static=True)
9532c8820
<     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Ipv4Route, ns3::empty, ns3::DefaultDeleter<ns3::Ipv4Route> >::SimpleRefCount(ns3::SimpleRefCount<ns3::Ipv4Route, ns3::empty, ns3::DefaultDeleter<ns3::Ipv4Route> > const & o) [constructor]
---
>     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Ipv4Route, ns3::empty, ns3::DefaultDeleter<ns3::Ipv4Route> >::SimpleRefCount(ns3::SimpleRefCount<ns3::Ipv4Route, ns3::empty, ns3::DefaultDeleter<ns3::Ipv4Route> > const & o) [copy constructor]
9533a8822,8826
>     ## simple-ref-count.h (module 'core'): static void ns3::SimpleRefCount<ns3::Ipv4Route, ns3::empty, ns3::DefaultDeleter<ns3::Ipv4Route> >::Cleanup() [member function]
>     cls.add_method('Cleanup', 
>                    'void', 
>                    [], 
>                    is_static=True)
9539c8832
<     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Ipv6MulticastRoute, ns3::empty, ns3::DefaultDeleter<ns3::Ipv6MulticastRoute> >::SimpleRefCount(ns3::SimpleRefCount<ns3::Ipv6MulticastRoute, ns3::empty, ns3::DefaultDeleter<ns3::Ipv6MulticastRoute> > const & o) [constructor]
---
>     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Ipv6MulticastRoute, ns3::empty, ns3::DefaultDeleter<ns3::Ipv6MulticastRoute> >::SimpleRefCount(ns3::SimpleRefCount<ns3::Ipv6MulticastRoute, ns3::empty, ns3::DefaultDeleter<ns3::Ipv6MulticastRoute> > const & o) [copy constructor]
9540a8834,8838
>     ## simple-ref-count.h (module 'core'): static void ns3::SimpleRefCount<ns3::Ipv6MulticastRoute, ns3::empty, ns3::DefaultDeleter<ns3::Ipv6MulticastRoute> >::Cleanup() [member function]
>     cls.add_method('Cleanup', 
>                    'void', 
>                    [], 
>                    is_static=True)
9546c8844
<     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Ipv6Route, ns3::empty, ns3::DefaultDeleter<ns3::Ipv6Route> >::SimpleRefCount(ns3::SimpleRefCount<ns3::Ipv6Route, ns3::empty, ns3::DefaultDeleter<ns3::Ipv6Route> > const & o) [constructor]
---
>     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Ipv6Route, ns3::empty, ns3::DefaultDeleter<ns3::Ipv6Route> >::SimpleRefCount(ns3::SimpleRefCount<ns3::Ipv6Route, ns3::empty, ns3::DefaultDeleter<ns3::Ipv6Route> > const & o) [copy constructor]
9547a8846,8862
>     ## simple-ref-count.h (module 'core'): static void ns3::SimpleRefCount<ns3::Ipv6Route, ns3::empty, ns3::DefaultDeleter<ns3::Ipv6Route> >::Cleanup() [member function]
>     cls.add_method('Cleanup', 
>                    'void', 
>                    [], 
>                    is_static=True)
>     return
> 
> def register_Ns3SimpleRefCount__Ns3NetDeviceQueue_Ns3Empty_Ns3DefaultDeleter__lt__ns3NetDeviceQueue__gt___methods(root_module, cls):
>     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::NetDeviceQueue, ns3::empty, ns3::DefaultDeleter<ns3::NetDeviceQueue> >::SimpleRefCount() [constructor]
>     cls.add_constructor([])
>     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::NetDeviceQueue, ns3::empty, ns3::DefaultDeleter<ns3::NetDeviceQueue> >::SimpleRefCount(ns3::SimpleRefCount<ns3::NetDeviceQueue, ns3::empty, ns3::DefaultDeleter<ns3::NetDeviceQueue> > const & o) [copy constructor]
>     cls.add_constructor([param('ns3::SimpleRefCount< ns3::NetDeviceQueue, ns3::empty, ns3::DefaultDeleter< ns3::NetDeviceQueue > > const &', 'o')])
>     ## simple-ref-count.h (module 'core'): static void ns3::SimpleRefCount<ns3::NetDeviceQueue, ns3::empty, ns3::DefaultDeleter<ns3::NetDeviceQueue> >::Cleanup() [member function]
>     cls.add_method('Cleanup', 
>                    'void', 
>                    [], 
>                    is_static=True)
9553c8868
<     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::NixVector, ns3::empty, ns3::DefaultDeleter<ns3::NixVector> >::SimpleRefCount(ns3::SimpleRefCount<ns3::NixVector, ns3::empty, ns3::DefaultDeleter<ns3::NixVector> > const & o) [constructor]
---
>     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::NixVector, ns3::empty, ns3::DefaultDeleter<ns3::NixVector> >::SimpleRefCount(ns3::SimpleRefCount<ns3::NixVector, ns3::empty, ns3::DefaultDeleter<ns3::NixVector> > const & o) [copy constructor]
9554a8870,8874
>     ## simple-ref-count.h (module 'core'): static void ns3::SimpleRefCount<ns3::NixVector, ns3::empty, ns3::DefaultDeleter<ns3::NixVector> >::Cleanup() [member function]
>     cls.add_method('Cleanup', 
>                    'void', 
>                    [], 
>                    is_static=True)
9560c8880
<     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::OutputStreamWrapper, ns3::empty, ns3::DefaultDeleter<ns3::OutputStreamWrapper> >::SimpleRefCount(ns3::SimpleRefCount<ns3::OutputStreamWrapper, ns3::empty, ns3::DefaultDeleter<ns3::OutputStreamWrapper> > const & o) [constructor]
---
>     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::OutputStreamWrapper, ns3::empty, ns3::DefaultDeleter<ns3::OutputStreamWrapper> >::SimpleRefCount(ns3::SimpleRefCount<ns3::OutputStreamWrapper, ns3::empty, ns3::DefaultDeleter<ns3::OutputStreamWrapper> > const & o) [copy constructor]
9561a8882,8886
>     ## simple-ref-count.h (module 'core'): static void ns3::SimpleRefCount<ns3::OutputStreamWrapper, ns3::empty, ns3::DefaultDeleter<ns3::OutputStreamWrapper> >::Cleanup() [member function]
>     cls.add_method('Cleanup', 
>                    'void', 
>                    [], 
>                    is_static=True)
9567c8892
<     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Packet, ns3::empty, ns3::DefaultDeleter<ns3::Packet> >::SimpleRefCount(ns3::SimpleRefCount<ns3::Packet, ns3::empty, ns3::DefaultDeleter<ns3::Packet> > const & o) [constructor]
---
>     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Packet, ns3::empty, ns3::DefaultDeleter<ns3::Packet> >::SimpleRefCount(ns3::SimpleRefCount<ns3::Packet, ns3::empty, ns3::DefaultDeleter<ns3::Packet> > const & o) [copy constructor]
9568a8894,8898
>     ## simple-ref-count.h (module 'core'): static void ns3::SimpleRefCount<ns3::Packet, ns3::empty, ns3::DefaultDeleter<ns3::Packet> >::Cleanup() [member function]
>     cls.add_method('Cleanup', 
>                    'void', 
>                    [], 
>                    is_static=True)
9574c8904
<     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::QueueItem, ns3::empty, ns3::DefaultDeleter<ns3::QueueItem> >::SimpleRefCount(ns3::SimpleRefCount<ns3::QueueItem, ns3::empty, ns3::DefaultDeleter<ns3::QueueItem> > const & o) [constructor]
---
>     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::QueueItem, ns3::empty, ns3::DefaultDeleter<ns3::QueueItem> >::SimpleRefCount(ns3::SimpleRefCount<ns3::QueueItem, ns3::empty, ns3::DefaultDeleter<ns3::QueueItem> > const & o) [copy constructor]
9575a8906,8910
>     ## simple-ref-count.h (module 'core'): static void ns3::SimpleRefCount<ns3::QueueItem, ns3::empty, ns3::DefaultDeleter<ns3::QueueItem> >::Cleanup() [member function]
>     cls.add_method('Cleanup', 
>                    'void', 
>                    [], 
>                    is_static=True)
9581c8916
<     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::TraceSourceAccessor, ns3::empty, ns3::DefaultDeleter<ns3::TraceSourceAccessor> >::SimpleRefCount(ns3::SimpleRefCount<ns3::TraceSourceAccessor, ns3::empty, ns3::DefaultDeleter<ns3::TraceSourceAccessor> > const & o) [constructor]
---
>     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::TraceSourceAccessor, ns3::empty, ns3::DefaultDeleter<ns3::TraceSourceAccessor> >::SimpleRefCount(ns3::SimpleRefCount<ns3::TraceSourceAccessor, ns3::empty, ns3::DefaultDeleter<ns3::TraceSourceAccessor> > const & o) [copy constructor]
9582a8918,8922
>     ## simple-ref-count.h (module 'core'): static void ns3::SimpleRefCount<ns3::TraceSourceAccessor, ns3::empty, ns3::DefaultDeleter<ns3::TraceSourceAccessor> >::Cleanup() [member function]
>     cls.add_method('Cleanup', 
>                    'void', 
>                    [], 
>                    is_static=True)
9586c8926
<     ## socket.h (module 'network'): ns3::Socket::Socket(ns3::Socket const & arg0) [constructor]
---
>     ## socket.h (module 'network'): ns3::Socket::Socket(ns3::Socket const & arg0) [copy constructor]
9594c8934
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
9599c8939
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
9604c8944
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
9614c8954
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
9619c8959
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
9629c8969
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
9638c8978
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
9663c9003
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
9668c9008
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
9678c9018
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
9683c9023
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
9688c9028
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
9693c9033
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
9748c9088
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
9753c9093
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
9766c9106
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
9779c9119
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
9792c9132
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
9797c9137
<     ## socket.h (module 'network'): void ns3::Socket::SetAcceptCallback(ns3::Callback<bool, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> connectionRequest, ns3::Callback<void, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> newConnectionCreated) [member function]
---
>     ## socket.h (module 'network'): void ns3::Socket::SetAcceptCallback(ns3::Callback<bool, ns3::Ptr<ns3::Socket>, ns3::Address const&, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> connectionRequest, ns3::Callback<void, ns3::Ptr<ns3::Socket>, ns3::Address const&, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> newConnectionCreated) [member function]
9805c9145
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
9872c9212
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
9877c9217
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
9882c9222
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
9946c9286
<     ## socket-factory.h (module 'network'): ns3::SocketFactory::SocketFactory(ns3::SocketFactory const & arg0) [constructor]
---
>     ## socket-factory.h (module 'network'): ns3::SocketFactory::SocketFactory(ns3::SocketFactory const & arg0) [copy constructor]
9954c9294
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
9963c9303
<     ## socket.h (module 'network'): ns3::SocketIpTosTag::SocketIpTosTag(ns3::SocketIpTosTag const & arg0) [constructor]
---
>     ## socket.h (module 'network'): ns3::SocketIpTosTag::SocketIpTosTag(ns3::SocketIpTosTag const & arg0) [copy constructor]
10009c9349
<     ## socket.h (module 'network'): ns3::SocketIpTtlTag::SocketIpTtlTag(ns3::SocketIpTtlTag const & arg0) [constructor]
---
>     ## socket.h (module 'network'): ns3::SocketIpTtlTag::SocketIpTtlTag(ns3::SocketIpTtlTag const & arg0) [copy constructor]
10055c9395
<     ## socket.h (module 'network'): ns3::SocketIpv6HopLimitTag::SocketIpv6HopLimitTag(ns3::SocketIpv6HopLimitTag const & arg0) [constructor]
---
>     ## socket.h (module 'network'): ns3::SocketIpv6HopLimitTag::SocketIpv6HopLimitTag(ns3::SocketIpv6HopLimitTag const & arg0) [copy constructor]
10101c9441
<     ## socket.h (module 'network'): ns3::SocketIpv6TclassTag::SocketIpv6TclassTag(ns3::SocketIpv6TclassTag const & arg0) [constructor]
---
>     ## socket.h (module 'network'): ns3::SocketIpv6TclassTag::SocketIpv6TclassTag(ns3::SocketIpv6TclassTag const & arg0) [copy constructor]
10147c9487
<     ## socket.h (module 'network'): ns3::SocketPriorityTag::SocketPriorityTag(ns3::SocketPriorityTag const & arg0) [constructor]
---
>     ## socket.h (module 'network'): ns3::SocketPriorityTag::SocketPriorityTag(ns3::SocketPriorityTag const & arg0) [copy constructor]
10193c9533
<     ## socket.h (module 'network'): ns3::SocketSetDontFragmentTag::SocketSetDontFragmentTag(ns3::SocketSetDontFragmentTag const & arg0) [constructor]
---
>     ## socket.h (module 'network'): ns3::SocketSetDontFragmentTag::SocketSetDontFragmentTag(ns3::SocketSetDontFragmentTag const & arg0) [copy constructor]
10245c9585
<     ## tcp-congestion-ops.h (module 'internet'): ns3::TcpCongestionOps::TcpCongestionOps(ns3::TcpCongestionOps const & other) [constructor]
---
>     ## tcp-congestion-ops.h (module 'internet'): ns3::TcpCongestionOps::TcpCongestionOps(ns3::TcpCongestionOps const & other) [copy constructor]
10247,10251d9586
<     ## tcp-congestion-ops.h (module 'internet'): void ns3::TcpCongestionOps::CongControl(ns3::Ptr<ns3::TcpSocketState> tcb, ns3::TcpRateOps::TcpRateConnection const & rc, ns3::TcpRateOps::TcpRateSample const & rs) [member function]
<     cls.add_method('CongControl', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb'), param('ns3::TcpRateOps::TcpRateConnection const &', 'rc'), param('ns3::TcpRateOps::TcpRateSample const &', 'rs')], 
<                    is_virtual=True)
10257,10261d9591
<     ## tcp-congestion-ops.h (module 'internet'): void ns3::TcpCongestionOps::CwndEvent(ns3::Ptr<ns3::TcpSocketState> tcb, ns3::TcpSocketState::TcpCAEvent_t const event) [member function]
<     cls.add_method('CwndEvent', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb'), param('ns3::TcpSocketState::TcpCAEvent_t const', 'event')], 
<                    is_virtual=True)
10266c9596
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
10271c9601
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
10276c9606
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
10282,10286d9611
<     ## tcp-congestion-ops.h (module 'internet'): bool ns3::TcpCongestionOps::HasCongControl() const [member function]
<     cls.add_method('HasCongControl', 
<                    'bool', 
<                    [], 
<                    is_const=True, is_virtual=True)
10291,10296c9616
<                    is_virtual=True)
<     ## tcp-congestion-ops.h (module 'internet'): void ns3::TcpCongestionOps::Init(ns3::Ptr<ns3::TcpSocketState> tcb) [member function]
<     cls.add_method('Init', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb')], 
<                    is_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
10302,10306d9621
<     ## tcp-congestion-ops.h (module 'internet'): void ns3::TcpCongestionOps::ReduceCwnd(ns3::Ptr<ns3::TcpSocketState> tcb) [member function]
<     cls.add_method('ReduceCwnd', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb')], 
<                    is_virtual=True, is_pure_virtual=True)
10310d9624
<     cls.add_binary_comparison_operator('==')
10312c9626,9627
<     ## tcp-header.h (module 'internet'): ns3::TcpHeader::TcpHeader(ns3::TcpHeader const & arg0) [constructor]
---
>     cls.add_binary_comparison_operator('==')
>     ## tcp-header.h (module 'internet'): ns3::TcpHeader::TcpHeader(ns3::TcpHeader const & arg0) [copy constructor]
10316c9631
<     ## tcp-header.h (module 'internet'): bool ns3::TcpHeader::AppendOption(ns3::Ptr<const ns3::TcpOption> option) [member function]
---
>     ## tcp-header.h (module 'internet'): bool ns3::TcpHeader::AppendOption(ns3::Ptr<ns3::TcpOption> option) [member function]
10319c9634
<                    [param('ns3::Ptr< ns3::TcpOption const >', 'option')])
---
>                    [param('ns3::Ptr< ns3::TcpOption >', 'option')])
10364c9679
<     ## tcp-header.h (module 'internet'): ns3::Ptr<const ns3::TcpOption> ns3::TcpHeader::GetOption(uint8_t kind) const [member function]
---
>     ## tcp-header.h (module 'internet'): ns3::Ptr<ns3::TcpOption> ns3::TcpHeader::GetOption(uint8_t kind) const [member function]
10366c9681
<                    'ns3::Ptr< ns3::TcpOption const >', 
---
>                    'ns3::Ptr< ns3::TcpOption >', 
10374,10378d9688
<     ## tcp-header.h (module 'internet'): ns3::TcpHeader::TcpOptionList const & ns3::TcpHeader::GetOptionList() const [member function]
<     cls.add_method('GetOptionList', 
<                    'ns3::TcpHeader::TcpOptionList const &', 
<                    [], 
<                    is_const=True)
10444c9754
<                    [param('ns3::SequenceNumber< unsigned int, int >', 'ackNumber')])
---
>                    [param('ns3::SequenceNumber32', 'ackNumber')])
10456c9766
<                    [param('ns3::SequenceNumber< unsigned int, int >', 'sequenceNumber')])
---
>                    [param('ns3::SequenceNumber32', 'sequenceNumber')])
10474c9784
<     ## tcp-congestion-ops.h (module 'internet'): ns3::TcpNewReno::TcpNewReno(ns3::TcpNewReno const & sock) [constructor]
---
>     ## tcp-congestion-ops.h (module 'internet'): ns3::TcpNewReno::TcpNewReno(ns3::TcpNewReno const & sock) [copy constructor]
10501,10505d9810
<     ## tcp-congestion-ops.h (module 'internet'): void ns3::TcpNewReno::ReduceCwnd(ns3::Ptr<ns3::TcpSocketState> tcb) [member function]
<     cls.add_method('ReduceCwnd', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb')], 
<                    is_virtual=True)
10510c9815
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
10515c9820
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
10519c9824
<     ## tcp-option.h (module 'internet'): ns3::TcpOption::TcpOption(ns3::TcpOption const & arg0) [constructor]
---
>     ## tcp-option.h (module 'internet'): ns3::TcpOption::TcpOption(ns3::TcpOption const & arg0) [copy constructor]
10532c9837
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
10542c9847
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
10547c9852
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
10562c9867
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
10567,10875c9872
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3TcpOptionEnd_methods(root_module, cls):
<     ## tcp-option-rfc793.h (module 'internet'): ns3::TcpOptionEnd::TcpOptionEnd(ns3::TcpOptionEnd const & arg0) [constructor]
<     cls.add_constructor([param('ns3::TcpOptionEnd const &', 'arg0')])
<     ## tcp-option-rfc793.h (module 'internet'): ns3::TcpOptionEnd::TcpOptionEnd() [constructor]
<     cls.add_constructor([])
<     ## tcp-option-rfc793.h (module 'internet'): uint32_t ns3::TcpOptionEnd::Deserialize(ns3::Buffer::Iterator start) [member function]
<     cls.add_method('Deserialize', 
<                    'uint32_t', 
<                    [param('ns3::Buffer::Iterator', 'start')], 
<                    is_virtual=True)
<     ## tcp-option-rfc793.h (module 'internet'): ns3::TypeId ns3::TcpOptionEnd::GetInstanceTypeId() const [member function]
<     cls.add_method('GetInstanceTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## tcp-option-rfc793.h (module 'internet'): uint8_t ns3::TcpOptionEnd::GetKind() const [member function]
<     cls.add_method('GetKind', 
<                    'uint8_t', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## tcp-option-rfc793.h (module 'internet'): uint32_t ns3::TcpOptionEnd::GetSerializedSize() const [member function]
<     cls.add_method('GetSerializedSize', 
<                    'uint32_t', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## tcp-option-rfc793.h (module 'internet'): static ns3::TypeId ns3::TcpOptionEnd::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## tcp-option-rfc793.h (module 'internet'): void ns3::TcpOptionEnd::Print(std::ostream & os) const [member function]
<     cls.add_method('Print', 
<                    'void', 
<                    [param('std::ostream &', 'os')], 
<                    is_const=True, is_virtual=True)
<     ## tcp-option-rfc793.h (module 'internet'): void ns3::TcpOptionEnd::Serialize(ns3::Buffer::Iterator start) const [member function]
<     cls.add_method('Serialize', 
<                    'void', 
<                    [param('ns3::Buffer::Iterator', 'start')], 
<                    is_const=True, is_virtual=True)
<     return
< 
< def register_Ns3TcpOptionMSS_methods(root_module, cls):
<     ## tcp-option-rfc793.h (module 'internet'): ns3::TcpOptionMSS::TcpOptionMSS(ns3::TcpOptionMSS const & arg0) [constructor]
<     cls.add_constructor([param('ns3::TcpOptionMSS const &', 'arg0')])
<     ## tcp-option-rfc793.h (module 'internet'): ns3::TcpOptionMSS::TcpOptionMSS() [constructor]
<     cls.add_constructor([])
<     ## tcp-option-rfc793.h (module 'internet'): uint32_t ns3::TcpOptionMSS::Deserialize(ns3::Buffer::Iterator start) [member function]
<     cls.add_method('Deserialize', 
<                    'uint32_t', 
<                    [param('ns3::Buffer::Iterator', 'start')], 
<                    is_virtual=True)
<     ## tcp-option-rfc793.h (module 'internet'): ns3::TypeId ns3::TcpOptionMSS::GetInstanceTypeId() const [member function]
<     cls.add_method('GetInstanceTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## tcp-option-rfc793.h (module 'internet'): uint8_t ns3::TcpOptionMSS::GetKind() const [member function]
<     cls.add_method('GetKind', 
<                    'uint8_t', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## tcp-option-rfc793.h (module 'internet'): uint16_t ns3::TcpOptionMSS::GetMSS() const [member function]
<     cls.add_method('GetMSS', 
<                    'uint16_t', 
<                    [], 
<                    is_const=True)
<     ## tcp-option-rfc793.h (module 'internet'): uint32_t ns3::TcpOptionMSS::GetSerializedSize() const [member function]
<     cls.add_method('GetSerializedSize', 
<                    'uint32_t', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## tcp-option-rfc793.h (module 'internet'): static ns3::TypeId ns3::TcpOptionMSS::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## tcp-option-rfc793.h (module 'internet'): void ns3::TcpOptionMSS::Print(std::ostream & os) const [member function]
<     cls.add_method('Print', 
<                    'void', 
<                    [param('std::ostream &', 'os')], 
<                    is_const=True, is_virtual=True)
<     ## tcp-option-rfc793.h (module 'internet'): void ns3::TcpOptionMSS::Serialize(ns3::Buffer::Iterator start) const [member function]
<     cls.add_method('Serialize', 
<                    'void', 
<                    [param('ns3::Buffer::Iterator', 'start')], 
<                    is_const=True, is_virtual=True)
<     ## tcp-option-rfc793.h (module 'internet'): void ns3::TcpOptionMSS::SetMSS(uint16_t mss) [member function]
<     cls.add_method('SetMSS', 
<                    'void', 
<                    [param('uint16_t', 'mss')])
<     return
< 
< def register_Ns3TcpOptionNOP_methods(root_module, cls):
<     ## tcp-option-rfc793.h (module 'internet'): ns3::TcpOptionNOP::TcpOptionNOP(ns3::TcpOptionNOP const & arg0) [constructor]
<     cls.add_constructor([param('ns3::TcpOptionNOP const &', 'arg0')])
<     ## tcp-option-rfc793.h (module 'internet'): ns3::TcpOptionNOP::TcpOptionNOP() [constructor]
<     cls.add_constructor([])
<     ## tcp-option-rfc793.h (module 'internet'): uint32_t ns3::TcpOptionNOP::Deserialize(ns3::Buffer::Iterator start) [member function]
<     cls.add_method('Deserialize', 
<                    'uint32_t', 
<                    [param('ns3::Buffer::Iterator', 'start')], 
<                    is_virtual=True)
<     ## tcp-option-rfc793.h (module 'internet'): ns3::TypeId ns3::TcpOptionNOP::GetInstanceTypeId() const [member function]
<     cls.add_method('GetInstanceTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## tcp-option-rfc793.h (module 'internet'): uint8_t ns3::TcpOptionNOP::GetKind() const [member function]
<     cls.add_method('GetKind', 
<                    'uint8_t', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## tcp-option-rfc793.h (module 'internet'): uint32_t ns3::TcpOptionNOP::GetSerializedSize() const [member function]
<     cls.add_method('GetSerializedSize', 
<                    'uint32_t', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## tcp-option-rfc793.h (module 'internet'): static ns3::TypeId ns3::TcpOptionNOP::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## tcp-option-rfc793.h (module 'internet'): void ns3::TcpOptionNOP::Print(std::ostream & os) const [member function]
<     cls.add_method('Print', 
<                    'void', 
<                    [param('std::ostream &', 'os')], 
<                    is_const=True, is_virtual=True)
<     ## tcp-option-rfc793.h (module 'internet'): void ns3::TcpOptionNOP::Serialize(ns3::Buffer::Iterator start) const [member function]
<     cls.add_method('Serialize', 
<                    'void', 
<                    [param('ns3::Buffer::Iterator', 'start')], 
<                    is_const=True, is_virtual=True)
<     return
< 
< def register_Ns3TcpOptionSack_methods(root_module, cls):
<     cls.add_output_stream_operator()
<     ## tcp-option-sack.h (module 'internet'): ns3::TcpOptionSack::TcpOptionSack(ns3::TcpOptionSack const & arg0) [constructor]
<     cls.add_constructor([param('ns3::TcpOptionSack const &', 'arg0')])
<     ## tcp-option-sack.h (module 'internet'): ns3::TcpOptionSack::TcpOptionSack() [constructor]
<     cls.add_constructor([])
<     ## tcp-option-sack.h (module 'internet'): void ns3::TcpOptionSack::AddSackBlock(ns3::TcpOptionSack::SackBlock s) [member function]
<     cls.add_method('AddSackBlock', 
<                    'void', 
<                    [param('std::pair< ns3::SequenceNumber< unsigned int, int >, ns3::SequenceNumber< unsigned int, int > >', 's')])
<     ## tcp-option-sack.h (module 'internet'): void ns3::TcpOptionSack::ClearSackList() [member function]
<     cls.add_method('ClearSackList', 
<                    'void', 
<                    [])
<     ## tcp-option-sack.h (module 'internet'): uint32_t ns3::TcpOptionSack::Deserialize(ns3::Buffer::Iterator start) [member function]
<     cls.add_method('Deserialize', 
<                    'uint32_t', 
<                    [param('ns3::Buffer::Iterator', 'start')], 
<                    is_virtual=True)
<     ## tcp-option-sack.h (module 'internet'): ns3::TypeId ns3::TcpOptionSack::GetInstanceTypeId() const [member function]
<     cls.add_method('GetInstanceTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## tcp-option-sack.h (module 'internet'): uint8_t ns3::TcpOptionSack::GetKind() const [member function]
<     cls.add_method('GetKind', 
<                    'uint8_t', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## tcp-option-sack.h (module 'internet'): uint32_t ns3::TcpOptionSack::GetNumSackBlocks() const [member function]
<     cls.add_method('GetNumSackBlocks', 
<                    'uint32_t', 
<                    [], 
<                    is_const=True)
<     ## tcp-option-sack.h (module 'internet'): ns3::TcpOptionSack::SackList ns3::TcpOptionSack::GetSackList() const [member function]
<     cls.add_method('GetSackList', 
<                    'ns3::TcpOptionSack::SackList', 
<                    [], 
<                    is_const=True)
<     ## tcp-option-sack.h (module 'internet'): uint32_t ns3::TcpOptionSack::GetSerializedSize() const [member function]
<     cls.add_method('GetSerializedSize', 
<                    'uint32_t', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## tcp-option-sack.h (module 'internet'): static ns3::TypeId ns3::TcpOptionSack::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## tcp-option-sack.h (module 'internet'): void ns3::TcpOptionSack::Print(std::ostream & os) const [member function]
<     cls.add_method('Print', 
<                    'void', 
<                    [param('std::ostream &', 'os')], 
<                    is_const=True, is_virtual=True)
<     ## tcp-option-sack.h (module 'internet'): void ns3::TcpOptionSack::Serialize(ns3::Buffer::Iterator start) const [member function]
<     cls.add_method('Serialize', 
<                    'void', 
<                    [param('ns3::Buffer::Iterator', 'start')], 
<                    is_const=True, is_virtual=True)
<     return
< 
< def register_Ns3TcpOptionSackPermitted_methods(root_module, cls):
<     ## tcp-option-sack-permitted.h (module 'internet'): ns3::TcpOptionSackPermitted::TcpOptionSackPermitted(ns3::TcpOptionSackPermitted const & arg0) [constructor]
<     cls.add_constructor([param('ns3::TcpOptionSackPermitted const &', 'arg0')])
<     ## tcp-option-sack-permitted.h (module 'internet'): ns3::TcpOptionSackPermitted::TcpOptionSackPermitted() [constructor]
<     cls.add_constructor([])
<     ## tcp-option-sack-permitted.h (module 'internet'): uint32_t ns3::TcpOptionSackPermitted::Deserialize(ns3::Buffer::Iterator start) [member function]
<     cls.add_method('Deserialize', 
<                    'uint32_t', 
<                    [param('ns3::Buffer::Iterator', 'start')], 
<                    is_virtual=True)
<     ## tcp-option-sack-permitted.h (module 'internet'): ns3::TypeId ns3::TcpOptionSackPermitted::GetInstanceTypeId() const [member function]
<     cls.add_method('GetInstanceTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## tcp-option-sack-permitted.h (module 'internet'): uint8_t ns3::TcpOptionSackPermitted::GetKind() const [member function]
<     cls.add_method('GetKind', 
<                    'uint8_t', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## tcp-option-sack-permitted.h (module 'internet'): uint32_t ns3::TcpOptionSackPermitted::GetSerializedSize() const [member function]
<     cls.add_method('GetSerializedSize', 
<                    'uint32_t', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## tcp-option-sack-permitted.h (module 'internet'): static ns3::TypeId ns3::TcpOptionSackPermitted::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## tcp-option-sack-permitted.h (module 'internet'): void ns3::TcpOptionSackPermitted::Print(std::ostream & os) const [member function]
<     cls.add_method('Print', 
<                    'void', 
<                    [param('std::ostream &', 'os')], 
<                    is_const=True, is_virtual=True)
<     ## tcp-option-sack-permitted.h (module 'internet'): void ns3::TcpOptionSackPermitted::Serialize(ns3::Buffer::Iterator start) const [member function]
<     cls.add_method('Serialize', 
<                    'void', 
<                    [param('ns3::Buffer::Iterator', 'start')], 
<                    is_const=True, is_virtual=True)
<     return
< 
< def register_Ns3TcpOptionTS_methods(root_module, cls):
<     ## tcp-option-ts.h (module 'internet'): ns3::TcpOptionTS::TcpOptionTS(ns3::TcpOptionTS const & arg0) [constructor]
<     cls.add_constructor([param('ns3::TcpOptionTS const &', 'arg0')])
<     ## tcp-option-ts.h (module 'internet'): ns3::TcpOptionTS::TcpOptionTS() [constructor]
<     cls.add_constructor([])
<     ## tcp-option-ts.h (module 'internet'): uint32_t ns3::TcpOptionTS::Deserialize(ns3::Buffer::Iterator start) [member function]
<     cls.add_method('Deserialize', 
<                    'uint32_t', 
<                    [param('ns3::Buffer::Iterator', 'start')], 
<                    is_virtual=True)
<     ## tcp-option-ts.h (module 'internet'): static ns3::Time ns3::TcpOptionTS::ElapsedTimeFromTsValue(uint32_t echoTime) [member function]
<     cls.add_method('ElapsedTimeFromTsValue', 
<                    'ns3::Time', 
<                    [param('uint32_t', 'echoTime')], 
<                    is_static=True)
<     ## tcp-option-ts.h (module 'internet'): uint32_t ns3::TcpOptionTS::GetEcho() const [member function]
<     cls.add_method('GetEcho', 
<                    'uint32_t', 
<                    [], 
<                    is_const=True)
<     ## tcp-option-ts.h (module 'internet'): ns3::TypeId ns3::TcpOptionTS::GetInstanceTypeId() const [member function]
<     cls.add_method('GetInstanceTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## tcp-option-ts.h (module 'internet'): uint8_t ns3::TcpOptionTS::GetKind() const [member function]
<     cls.add_method('GetKind', 
<                    'uint8_t', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## tcp-option-ts.h (module 'internet'): uint32_t ns3::TcpOptionTS::GetSerializedSize() const [member function]
<     cls.add_method('GetSerializedSize', 
<                    'uint32_t', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## tcp-option-ts.h (module 'internet'): uint32_t ns3::TcpOptionTS::GetTimestamp() const [member function]
<     cls.add_method('GetTimestamp', 
<                    'uint32_t', 
<                    [], 
<                    is_const=True)
<     ## tcp-option-ts.h (module 'internet'): static ns3::TypeId ns3::TcpOptionTS::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## tcp-option-ts.h (module 'internet'): static uint32_t ns3::TcpOptionTS::NowToTsValue() [member function]
<     cls.add_method('NowToTsValue', 
<                    'uint32_t', 
<                    [], 
<                    is_static=True)
<     ## tcp-option-ts.h (module 'internet'): void ns3::TcpOptionTS::Print(std::ostream & os) const [member function]
<     cls.add_method('Print', 
<                    'void', 
<                    [param('std::ostream &', 'os')], 
<                    is_const=True, is_virtual=True)
<     ## tcp-option-ts.h (module 'internet'): void ns3::TcpOptionTS::Serialize(ns3::Buffer::Iterator start) const [member function]
<     cls.add_method('Serialize', 
<                    'void', 
<                    [param('ns3::Buffer::Iterator', 'start')], 
<                    is_const=True, is_virtual=True)
<     ## tcp-option-ts.h (module 'internet'): void ns3::TcpOptionTS::SetEcho(uint32_t ts) [member function]
<     cls.add_method('SetEcho', 
<                    'void', 
<                    [param('uint32_t', 'ts')])
<     ## tcp-option-ts.h (module 'internet'): void ns3::TcpOptionTS::SetTimestamp(uint32_t ts) [member function]
<     cls.add_method('SetTimestamp', 
<                    'void', 
<                    [param('uint32_t', 'ts')])
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
10879c9876
<     ## tcp-option.h (module 'internet'): ns3::TcpOptionUnknown::TcpOptionUnknown(ns3::TcpOptionUnknown const & arg0) [constructor]
---
>     ## tcp-option.h (module 'internet'): ns3::TcpOptionUnknown::TcpOptionUnknown(ns3::TcpOptionUnknown const & arg0) [copy constructor]
10920,11110d9916
< def register_Ns3TcpOptionWinScale_methods(root_module, cls):
<     ## tcp-option-winscale.h (module 'internet'): ns3::TcpOptionWinScale::TcpOptionWinScale(ns3::TcpOptionWinScale const & arg0) [constructor]
<     cls.add_constructor([param('ns3::TcpOptionWinScale const &', 'arg0')])
<     ## tcp-option-winscale.h (module 'internet'): ns3::TcpOptionWinScale::TcpOptionWinScale() [constructor]
<     cls.add_constructor([])
<     ## tcp-option-winscale.h (module 'internet'): uint32_t ns3::TcpOptionWinScale::Deserialize(ns3::Buffer::Iterator start) [member function]
<     cls.add_method('Deserialize', 
<                    'uint32_t', 
<                    [param('ns3::Buffer::Iterator', 'start')], 
<                    is_virtual=True)
<     ## tcp-option-winscale.h (module 'internet'): ns3::TypeId ns3::TcpOptionWinScale::GetInstanceTypeId() const [member function]
<     cls.add_method('GetInstanceTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## tcp-option-winscale.h (module 'internet'): uint8_t ns3::TcpOptionWinScale::GetKind() const [member function]
<     cls.add_method('GetKind', 
<                    'uint8_t', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## tcp-option-winscale.h (module 'internet'): uint8_t ns3::TcpOptionWinScale::GetScale() const [member function]
<     cls.add_method('GetScale', 
<                    'uint8_t', 
<                    [], 
<                    is_const=True)
<     ## tcp-option-winscale.h (module 'internet'): uint32_t ns3::TcpOptionWinScale::GetSerializedSize() const [member function]
<     cls.add_method('GetSerializedSize', 
<                    'uint32_t', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## tcp-option-winscale.h (module 'internet'): static ns3::TypeId ns3::TcpOptionWinScale::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## tcp-option-winscale.h (module 'internet'): void ns3::TcpOptionWinScale::Print(std::ostream & os) const [member function]
<     cls.add_method('Print', 
<                    'void', 
<                    [param('std::ostream &', 'os')], 
<                    is_const=True, is_virtual=True)
<     ## tcp-option-winscale.h (module 'internet'): void ns3::TcpOptionWinScale::Serialize(ns3::Buffer::Iterator start) const [member function]
<     cls.add_method('Serialize', 
<                    'void', 
<                    [param('ns3::Buffer::Iterator', 'start')], 
<                    is_const=True, is_virtual=True)
<     ## tcp-option-winscale.h (module 'internet'): void ns3::TcpOptionWinScale::SetScale(uint8_t scale) [member function]
<     cls.add_method('SetScale', 
<                    'void', 
<                    [param('uint8_t', 'scale')])
<     return
< 
< def register_Ns3TcpRateOps_methods(root_module, cls):
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateOps() [constructor]
<     cls.add_constructor([])
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateOps(ns3::TcpRateOps const & arg0) [constructor]
<     cls.add_constructor([param('ns3::TcpRateOps const &', 'arg0')])
<     ## tcp-rate-ops.h (module 'internet'): void ns3::TcpRateOps::CalculateAppLimited(uint32_t cWnd, uint32_t in_flight, uint32_t segmentSize, ns3::SequenceNumber32 const & tailSeq, ns3::SequenceNumber32 const & nextTx, uint32_t const lostOut, uint32_t const retransOut) [member function]
<     cls.add_method('CalculateAppLimited', 
<                    'void', 
<                    [param('uint32_t', 'cWnd'), param('uint32_t', 'in_flight'), param('uint32_t', 'segmentSize'), param('ns3::SequenceNumber32 const &', 'tailSeq'), param('ns3::SequenceNumber32 const &', 'nextTx'), param('uint32_t const', 'lostOut'), param('uint32_t const', 'retransOut')], 
<                    is_virtual=True, is_pure_virtual=True)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateSample const & ns3::TcpRateOps::GenerateSample(uint32_t delivered, uint32_t lost, bool is_sack_reneg, uint32_t priorInFlight, ns3::Time const & minRtt) [member function]
<     cls.add_method('GenerateSample', 
<                    'ns3::TcpRateOps::TcpRateSample const &', 
<                    [param('uint32_t', 'delivered'), param('uint32_t', 'lost'), param('bool', 'is_sack_reneg'), param('uint32_t', 'priorInFlight'), param('ns3::Time const &', 'minRtt')], 
<                    is_virtual=True, is_pure_virtual=True)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateConnection const & ns3::TcpRateOps::GetConnectionRate() [member function]
<     cls.add_method('GetConnectionRate', 
<                    'ns3::TcpRateOps::TcpRateConnection const &', 
<                    [], 
<                    is_virtual=True, is_pure_virtual=True)
<     ## tcp-rate-ops.h (module 'internet'): static ns3::TypeId ns3::TcpRateOps::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## tcp-rate-ops.h (module 'internet'): void ns3::TcpRateOps::SkbDelivered(ns3::TcpTxItem * skb) [member function]
<     cls.add_method('SkbDelivered', 
<                    'void', 
<                    [param('ns3::TcpTxItem *', 'skb')], 
<                    is_virtual=True, is_pure_virtual=True)
<     ## tcp-rate-ops.h (module 'internet'): void ns3::TcpRateOps::SkbSent(ns3::TcpTxItem * skb, bool isStartOfTransmission) [member function]
<     cls.add_method('SkbSent', 
<                    'void', 
<                    [param('ns3::TcpTxItem *', 'skb'), param('bool', 'isStartOfTransmission')], 
<                    is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3TcpRateOpsTcpRateConnection_methods(root_module, cls):
<     cls.add_output_stream_operator()
<     cls.add_binary_comparison_operator('==')
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateConnection::TcpRateConnection() [constructor]
<     cls.add_constructor([])
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateConnection::TcpRateConnection(ns3::TcpRateOps::TcpRateConnection const & arg0) [constructor]
<     cls.add_constructor([param('ns3::TcpRateOps::TcpRateConnection const &', 'arg0')])
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateConnection::m_appLimited [variable]
<     cls.add_instance_attribute('m_appLimited', 'uint32_t', is_const=False)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateConnection::m_delivered [variable]
<     cls.add_instance_attribute('m_delivered', 'uint64_t', is_const=False)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateConnection::m_deliveredTime [variable]
<     cls.add_instance_attribute('m_deliveredTime', 'ns3::Time', is_const=False)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateConnection::m_firstSentTime [variable]
<     cls.add_instance_attribute('m_firstSentTime', 'ns3::Time', is_const=False)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateConnection::m_rateAppLimited [variable]
<     cls.add_instance_attribute('m_rateAppLimited', 'bool', is_const=False)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateConnection::m_rateDelivered [variable]
<     cls.add_instance_attribute('m_rateDelivered', 'int32_t', is_const=False)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateConnection::m_rateInterval [variable]
<     cls.add_instance_attribute('m_rateInterval', 'ns3::Time', is_const=False)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateConnection::m_txItemDelivered [variable]
<     cls.add_instance_attribute('m_txItemDelivered', 'uint32_t', is_const=False)
<     return
< 
< def register_Ns3TcpRateOpsTcpRateSample_methods(root_module, cls):
<     cls.add_output_stream_operator()
<     cls.add_binary_comparison_operator('==')
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateSample::TcpRateSample() [constructor]
<     cls.add_constructor([])
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateSample::TcpRateSample(ns3::TcpRateOps::TcpRateSample const & arg0) [constructor]
<     cls.add_constructor([param('ns3::TcpRateOps::TcpRateSample const &', 'arg0')])
<     ## tcp-rate-ops.h (module 'internet'): bool ns3::TcpRateOps::TcpRateSample::IsValid() const [member function]
<     cls.add_method('IsValid', 
<                    'bool', 
<                    [], 
<                    is_const=True)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateSample::m_ackElapsed [variable]
<     cls.add_instance_attribute('m_ackElapsed', 'ns3::Time', is_const=False)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateSample::m_ackedSacked [variable]
<     cls.add_instance_attribute('m_ackedSacked', 'uint32_t', is_const=False)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateSample::m_bytesLoss [variable]
<     cls.add_instance_attribute('m_bytesLoss', 'uint32_t', is_const=False)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateSample::m_delivered [variable]
<     cls.add_instance_attribute('m_delivered', 'int32_t', is_const=False)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateSample::m_deliveryRate [variable]
<     cls.add_instance_attribute('m_deliveryRate', 'ns3::DataRate', is_const=False)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateSample::m_interval [variable]
<     cls.add_instance_attribute('m_interval', 'ns3::Time', is_const=False)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateSample::m_isAppLimited [variable]
<     cls.add_instance_attribute('m_isAppLimited', 'bool', is_const=False)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateSample::m_priorDelivered [variable]
<     cls.add_instance_attribute('m_priorDelivered', 'uint32_t', is_const=False)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateSample::m_priorInFlight [variable]
<     cls.add_instance_attribute('m_priorInFlight', 'uint32_t', is_const=False)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateSample::m_priorTime [variable]
<     cls.add_instance_attribute('m_priorTime', 'ns3::Time', is_const=False)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateSample::m_sendElapsed [variable]
<     cls.add_instance_attribute('m_sendElapsed', 'ns3::Time', is_const=False)
<     return
< 
< def register_Ns3TcpRecoveryOps_methods(root_module, cls):
<     ## tcp-recovery-ops.h (module 'internet'): ns3::TcpRecoveryOps::TcpRecoveryOps() [constructor]
<     cls.add_constructor([])
<     ## tcp-recovery-ops.h (module 'internet'): ns3::TcpRecoveryOps::TcpRecoveryOps(ns3::TcpRecoveryOps const & other) [constructor]
<     cls.add_constructor([param('ns3::TcpRecoveryOps const &', 'other')])
<     ## tcp-recovery-ops.h (module 'internet'): void ns3::TcpRecoveryOps::DoRecovery(ns3::Ptr<ns3::TcpSocketState> tcb, uint32_t deliveredBytes) [member function]
<     cls.add_method('DoRecovery', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb'), param('uint32_t', 'deliveredBytes')], 
<                    is_virtual=True, is_pure_virtual=True)
<     ## tcp-recovery-ops.h (module 'internet'): void ns3::TcpRecoveryOps::EnterRecovery(ns3::Ptr<ns3::TcpSocketState> tcb, uint32_t dupAckCount, uint32_t unAckDataCount, uint32_t deliveredBytes) [member function]
<     cls.add_method('EnterRecovery', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb'), param('uint32_t', 'dupAckCount'), param('uint32_t', 'unAckDataCount'), param('uint32_t', 'deliveredBytes')], 
<                    is_virtual=True, is_pure_virtual=True)
<     ## tcp-recovery-ops.h (module 'internet'): void ns3::TcpRecoveryOps::ExitRecovery(ns3::Ptr<ns3::TcpSocketState> tcb) [member function]
<     cls.add_method('ExitRecovery', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb')], 
<                    is_virtual=True, is_pure_virtual=True)
<     ## tcp-recovery-ops.h (module 'internet'): ns3::Ptr<ns3::TcpRecoveryOps> ns3::TcpRecoveryOps::Fork() [member function]
<     cls.add_method('Fork', 
<                    'ns3::Ptr< ns3::TcpRecoveryOps >', 
<                    [], 
<                    is_virtual=True, is_pure_virtual=True)
<     ## tcp-recovery-ops.h (module 'internet'): std::string ns3::TcpRecoveryOps::GetName() const [member function]
<     cls.add_method('GetName', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
<     ## tcp-recovery-ops.h (module 'internet'): static ns3::TypeId ns3::TcpRecoveryOps::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## tcp-recovery-ops.h (module 'internet'): void ns3::TcpRecoveryOps::UpdateBytesSent(uint32_t bytesSent) [member function]
<     cls.add_method('UpdateBytesSent', 
<                    'void', 
<                    [param('uint32_t', 'bytesSent')], 
<                    is_virtual=True)
<     return
< 
11112c9918
<     ## tcp-rx-buffer.h (module 'internet'): ns3::TcpRxBuffer::TcpRxBuffer(ns3::TcpRxBuffer const & arg0) [constructor]
---
>     ## tcp-rx-buffer.h (module 'internet'): ns3::TcpRxBuffer::TcpRxBuffer(ns3::TcpRxBuffer const & arg0) [copy constructor]
11133,11142d9938
<     ## tcp-rx-buffer.h (module 'internet'): ns3::TcpOptionSack::SackList ns3::TcpRxBuffer::GetSackList() const [member function]
<     cls.add_method('GetSackList', 
<                    'ns3::TcpOptionSack::SackList', 
<                    [], 
<                    is_const=True)
<     ## tcp-rx-buffer.h (module 'internet'): uint32_t ns3::TcpRxBuffer::GetSackListSize() const [member function]
<     cls.add_method('GetSackListSize', 
<                    'uint32_t', 
<                    [], 
<                    is_const=True)
11148,11152d9943
<     ## tcp-rx-buffer.h (module 'internet'): bool ns3::TcpRxBuffer::GotFin() const [member function]
<     cls.add_method('GotFin', 
<                    'bool', 
<                    [], 
<                    is_const=True)
11194c9985
<     ## tcp-scalable.h (module 'internet'): ns3::TcpScalable::TcpScalable(ns3::TcpScalable const & sock) [constructor]
---
>     ## tcp-scalable.h (module 'internet'): ns3::TcpScalable::TcpScalable(ns3::TcpScalable const & sock) [copy constructor]
11220c10011
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
11224c10015
<     ## tcp-socket.h (module 'internet'): ns3::TcpSocket::TcpSocket(ns3::TcpSocket const & arg0) [constructor]
---
>     ## tcp-socket.h (module 'internet'): ns3::TcpSocket::TcpSocket(ns3::TcpSocket const & arg0) [copy constructor]
11239c10030
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
11244c10035
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
11249c10040
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
11254c10045
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
11259c10050
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
11264c10055
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
11269c10060
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
11274c10065
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
11279c10070
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
11284c10075
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
11289c10080
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
11294c10085
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
11299c10090
<                    is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
11304c10095
<                    is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
11309c10100
<                    is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
11314c10105
<                    is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
11319c10110
<                    is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
11324c10115
<                    is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
11329c10120
<                    is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
11334c10125
<                    is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
11339c10130
<                    is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
11344c10135
<                    is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
11349c10140
<                    is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
11354c10145
<                    is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
11360c10151
<     ## tcp-socket-base.h (module 'internet'): ns3::TcpSocketBase::TcpSocketBase(ns3::TcpSocketBase const & sock) [constructor]
---
>     ## tcp-socket-base.h (module 'internet'): ns3::TcpSocketBase::TcpSocketBase(ns3::TcpSocketBase const & sock) [copy constructor]
11382,11406d10172
<     ## tcp-socket-base.h (module 'internet'): bool ns3::TcpSocketBase::CheckEcnCe(uint8_t tos) const [member function]
<     cls.add_method('CheckEcnCe', 
<                    'bool', 
<                    [param('uint8_t', 'tos')], 
<                    is_const=True)
<     ## tcp-socket-base.h (module 'internet'): bool ns3::TcpSocketBase::CheckEcnEct0(uint8_t tos) const [member function]
<     cls.add_method('CheckEcnEct0', 
<                    'bool', 
<                    [param('uint8_t', 'tos')], 
<                    is_const=True)
<     ## tcp-socket-base.h (module 'internet'): bool ns3::TcpSocketBase::CheckEcnEct1(uint8_t tos) const [member function]
<     cls.add_method('CheckEcnEct1', 
<                    'bool', 
<                    [param('uint8_t', 'tos')], 
<                    is_const=True)
<     ## tcp-socket-base.h (module 'internet'): bool ns3::TcpSocketBase::CheckNoEcn(uint8_t tos) const [member function]
<     cls.add_method('CheckNoEcn', 
<                    'bool', 
<                    [param('uint8_t', 'tos')], 
<                    is_const=True)
<     ## tcp-socket-base.h (module 'internet'): uint8_t ns3::TcpSocketBase::ClearEcnBits(uint8_t tos) const [member function]
<     cls.add_method('ClearEcnBits', 
<                    'uint8_t', 
<                    [param('uint8_t', 'tos')], 
<                    is_const=True)
11447,11451d10212
<     ## tcp-socket-base.h (module 'internet'): uint32_t ns3::TcpSocketBase::GetRetxThresh() const [member function]
<     cls.add_method('GetRetxThresh', 
<                    'uint32_t', 
<                    [], 
<                    is_const=True)
11492,11511d10252
<     ## tcp-socket-base.h (module 'internet'): uint8_t ns3::TcpSocketBase::MarkEcnCe(uint8_t tos) const [member function]
<     cls.add_method('MarkEcnCe', 
<                    'uint8_t', 
<                    [param('uint8_t', 'tos')], 
<                    is_const=True)
<     ## tcp-socket-base.h (module 'internet'): uint8_t ns3::TcpSocketBase::MarkEcnCodePoint(uint8_t const tos, ns3::TcpSocketState::EcnCodePoint_t const codePoint) const [member function]
<     cls.add_method('MarkEcnCodePoint', 
<                    'uint8_t', 
<                    [param('uint8_t const', 'tos'), param('ns3::TcpSocketState::EcnCodePoint_t const', 'codePoint')], 
<                    is_const=True)
<     ## tcp-socket-base.h (module 'internet'): uint8_t ns3::TcpSocketBase::MarkEcnEct0(uint8_t tos) const [member function]
<     cls.add_method('MarkEcnEct0', 
<                    'uint8_t', 
<                    [param('uint8_t', 'tos')], 
<                    is_const=True)
<     ## tcp-socket-base.h (module 'internet'): uint8_t ns3::TcpSocketBase::MarkEcnEct1(uint8_t tos) const [member function]
<     cls.add_method('MarkEcnEct1', 
<                    'uint8_t', 
<                    [param('uint8_t', 'tos')], 
<                    is_const=True)
11549,11556d10289
<     ## tcp-socket-base.h (module 'internet'): void ns3::TcpSocketBase::SetRecoveryAlgorithm(ns3::Ptr<ns3::TcpRecoveryOps> recovery) [member function]
<     cls.add_method('SetRecoveryAlgorithm', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::TcpRecoveryOps >', 'recovery')])
<     ## tcp-socket-base.h (module 'internet'): void ns3::TcpSocketBase::SetRetxThresh(uint32_t retxThresh) [member function]
<     cls.add_method('SetRetxThresh', 
<                    'void', 
<                    [param('uint32_t', 'retxThresh')])
11567,11570d10299
<     ## tcp-socket-base.h (module 'internet'): void ns3::TcpSocketBase::SetUseEcn(ns3::TcpSocketState::UseEcn_t useEcn) [member function]
<     cls.add_method('SetUseEcn', 
<                    'void', 
<                    [param('ns3::TcpSocketState::UseEcn_t', 'useEcn')])
11581,11584d10309
<     ## tcp-socket-base.h (module 'internet'): void ns3::TcpSocketBase::UpdateBytesInFlight(uint32_t oldValue, uint32_t newValue) [member function]
<     cls.add_method('UpdateBytesInFlight', 
<                    'void', 
<                    [param('uint32_t', 'oldValue'), param('uint32_t', 'newValue')])
11593,11600d10317
<     ## tcp-socket-base.h (module 'internet'): void ns3::TcpSocketBase::UpdateCwndInfl(uint32_t oldValue, uint32_t newValue) [member function]
<     cls.add_method('UpdateCwndInfl', 
<                    'void', 
<                    [param('uint32_t', 'oldValue'), param('uint32_t', 'newValue')])
<     ## tcp-socket-base.h (module 'internet'): void ns3::TcpSocketBase::UpdateEcnState(ns3::TcpSocketState::EcnState_t oldValue, ns3::TcpSocketState::EcnState_t newValue) [member function]
<     cls.add_method('UpdateEcnState', 
<                    'void', 
<                    [param('ns3::TcpSocketState::EcnState_t', 'oldValue'), param('ns3::TcpSocketState::EcnState_t', 'newValue')])
11604c10321
<                    [param('ns3::SequenceNumber< unsigned int, int >', 'oldValue'), param('ns3::SequenceNumber< unsigned int, int >', 'newValue')])
---
>                    [param('ns3::SequenceNumber32', 'oldValue'), param('ns3::SequenceNumber32', 'newValue')])
11608,11612c10325
<                    [param('ns3::SequenceNumber< unsigned int, int >', 'oldValue'), param('ns3::SequenceNumber< unsigned int, int >', 'newValue')])
<     ## tcp-socket-base.h (module 'internet'): void ns3::TcpSocketBase::UpdateRtt(ns3::Time oldValue, ns3::Time newValue) [member function]
<     cls.add_method('UpdateRtt', 
<                    'void', 
<                    [param('ns3::Time', 'oldValue'), param('ns3::Time', 'newValue')])
---
>                    [param('ns3::SequenceNumber32', 'oldValue'), param('ns3::SequenceNumber32', 'newValue')])
11617,11620d10329
<     ## tcp-socket-base.h (module 'internet'): ns3::TcpSocketBase::m_bytesInFlightTrace [variable]
<     cls.add_instance_attribute('m_bytesInFlightTrace', 'ns3::TracedCallback< unsigned int, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', is_const=False)
<     ## tcp-socket-base.h (module 'internet'): ns3::TcpSocketBase::m_cWndInflTrace [variable]
<     cls.add_instance_attribute('m_cWndInflTrace', 'ns3::TracedCallback< unsigned int, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', is_const=False)
11625,11626d10333
<     ## tcp-socket-base.h (module 'internet'): ns3::TcpSocketBase::m_ecnStateTrace [variable]
<     cls.add_instance_attribute('m_ecnStateTrace', 'ns3::TracedCallback< ns3::TcpSocketState::EcnState_t, ns3::TcpSocketState::EcnState_t, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', is_const=False)
11629,11630d10335
<     ## tcp-socket-base.h (module 'internet'): ns3::TcpSocketBase::m_lastRttTrace [variable]
<     cls.add_instance_attribute('m_lastRttTrace', 'ns3::TracedCallback< ns3::Time, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', is_const=False)
11635,11644d10339
<     ## tcp-socket-base.h (module 'internet'): void ns3::TcpSocketBase::AddOptionSack(ns3::TcpHeader & header) [member function]
<     cls.add_method('AddOptionSack', 
<                    'void', 
<                    [param('ns3::TcpHeader &', 'header')], 
<                    visibility='protected')
<     ## tcp-socket-base.h (module 'internet'): void ns3::TcpSocketBase::AddOptionSackPermitted(ns3::TcpHeader & header) [member function]
<     cls.add_method('AddOptionSackPermitted', 
<                    'void', 
<                    [param('ns3::TcpHeader &', 'header')], 
<                    visibility='protected')
11659,11664c10354
<                    visibility='protected')
<     ## tcp-socket-base.h (module 'internet'): void ns3::TcpSocketBase::AddSocketTags(ns3::Ptr<ns3::Packet> const & p) const [member function]
<     cls.add_method('AddSocketTags', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Packet > const &', 'p')], 
<                    is_const=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
11669c10359
<                    is_const=True, is_virtual=True, visibility='protected')
---
>                    is_const=True, visibility='protected', is_virtual=True)
11674,11675c10364,10365
<                    is_const=True, is_virtual=True, visibility='protected')
<     ## tcp-socket-base.h (module 'internet'): uint32_t ns3::TcpSocketBase::BytesInFlight() const [member function]
---
>                    is_const=True, visibility='protected', is_virtual=True)
>     ## tcp-socket-base.h (module 'internet'): uint32_t ns3::TcpSocketBase::BytesInFlight() [member function]
11679c10369
<                    is_const=True, is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
11699c10389
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
11714c10404
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
11739c10429
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
11749,11750c10439,10440
<                    visibility='protected')
<     ## tcp-socket-base.h (module 'internet'): void ns3::TcpSocketBase::DupAck(uint32_t currentDelivered) [member function]
---
>                    visibility='protected', is_virtual=True)
>     ## tcp-socket-base.h (module 'internet'): void ns3::TcpSocketBase::DupAck() [member function]
11753,11758c10443
<                    [param('uint32_t', 'currentDelivered')], 
<                    visibility='protected')
<     ## tcp-socket-base.h (module 'internet'): void ns3::TcpSocketBase::EnterRecovery(uint32_t currentDelivered) [member function]
<     cls.add_method('EnterRecovery', 
<                    'void', 
<                    [param('uint32_t', 'currentDelivered')], 
---
>                    [], 
11764c10449,10454
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
>     ## tcp-socket-base.h (module 'internet'): void ns3::TcpSocketBase::FastRetransmit() [member function]
>     cls.add_method('FastRetransmit', 
>                    'void', 
>                    [], 
>                    visibility='protected')
11769c10459
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
11794c10484
<                    is_const=True, is_virtual=True, visibility='protected')
---
>                    is_const=True, visibility='protected', is_virtual=True)
11799c10489
<                    is_const=True, is_virtual=True, visibility='protected')
---
>                    is_const=True, visibility='protected', is_virtual=True)
11804c10494
<                    is_const=True, is_virtual=True, visibility='protected')
---
>                    is_const=True, visibility='protected', is_virtual=True)
11809c10499
<                    is_const=True, is_virtual=True, visibility='protected')
---
>                    is_const=True, visibility='protected', is_virtual=True)
11814c10504
<                    is_const=True, is_virtual=True, visibility='protected')
---
>                    is_const=True, visibility='protected', is_virtual=True)
11819c10509
<                    is_const=True, is_virtual=True, visibility='protected')
---
>                    is_const=True, visibility='protected', is_virtual=True)
11824c10514
<                    is_const=True, is_virtual=True, visibility='protected')
---
>                    is_const=True, visibility='protected', is_virtual=True)
11829c10519
<                    is_const=True, is_virtual=True, visibility='protected')
---
>                    is_const=True, visibility='protected', is_virtual=True)
11834c10524
<                    is_const=True, is_virtual=True, visibility='protected')
---
>                    is_const=True, visibility='protected', is_virtual=True)
11839c10529
<                    is_const=True, is_virtual=True, visibility='protected')
---
>                    is_const=True, visibility='protected', is_virtual=True)
11844c10534
<                    is_const=True, is_virtual=True, visibility='protected')
---
>                    is_const=True, visibility='protected', is_virtual=True)
11849c10539
<                    is_const=True, is_virtual=True, visibility='protected')
---
>                    is_const=True, visibility='protected', is_virtual=True)
11854,11864c10544
<                    is_const=True, is_virtual=True, visibility='protected')
<     ## tcp-socket-base.h (module 'internet'): bool ns3::TcpSocketBase::IsTcpOptionEnabled(uint8_t kind) const [member function]
<     cls.add_method('IsTcpOptionEnabled', 
<                    'bool', 
<                    [param('uint8_t', 'kind')], 
<                    is_const=True, visibility='protected')
<     ## tcp-socket-base.h (module 'internet'): bool ns3::TcpSocketBase::IsValidTcpSegment(ns3::SequenceNumber32 const seq, uint32_t const tcpHeaderSize, uint32_t const tcpPayloadSize) [member function]
<     cls.add_method('IsValidTcpSegment', 
<                    'bool', 
<                    [param('ns3::SequenceNumber32 const', 'seq'), param('uint32_t const', 'tcpHeaderSize'), param('uint32_t const', 'tcpPayloadSize')], 
<                    visibility='protected')
---
>                    is_const=True, visibility='protected', is_virtual=True)
11869c10549,10554
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
>     ## tcp-socket-base.h (module 'internet'): void ns3::TcpSocketBase::LimitedTransmit() [member function]
>     cls.add_method('LimitedTransmit', 
>                    'void', 
>                    [], 
>                    visibility='protected')
11874,11879c10559
<                    is_virtual=True, visibility='protected')
<     ## tcp-socket-base.h (module 'internet'): void ns3::TcpSocketBase::NotifyPacingPerformed() [member function]
<     cls.add_method('NotifyPacingPerformed', 
<                    'void', 
<                    [], 
<                    visibility='protected')
---
>                    visibility='protected', is_virtual=True)
11883c10563
<                    [param('ns3::SequenceNumber< unsigned int, int >', 'head'), param('ns3::SequenceNumber< unsigned int, int >', 'tail')], 
---
>                    [param('ns3::SequenceNumber32', 'head'), param('ns3::SequenceNumber32', 'tail')], 
11894,11899c10574
<                    is_virtual=True, visibility='protected')
<     ## tcp-socket-base.h (module 'internet'): void ns3::TcpSocketBase::ProcessAck(ns3::SequenceNumber32 const & ackNumber, bool scoreboardUpdated, uint32_t currentDelivered, ns3::SequenceNumber32 const & oldHeadSequence) [member function]
<     cls.add_method('ProcessAck', 
<                    'void', 
<                    [param('ns3::SequenceNumber32 const &', 'ackNumber'), param('bool', 'scoreboardUpdated'), param('uint32_t', 'currentDelivered'), param('ns3::SequenceNumber32 const &', 'oldHeadSequence')], 
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
11920,11929d10594
<     ## tcp-socket-base.h (module 'internet'): uint32_t ns3::TcpSocketBase::ProcessOptionSack(ns3::Ptr<const ns3::TcpOption> const option) [member function]
<     cls.add_method('ProcessOptionSack', 
<                    'uint32_t', 
<                    [param('ns3::Ptr< ns3::TcpOption const > const', 'option')], 
<                    visibility='protected')
<     ## tcp-socket-base.h (module 'internet'): void ns3::TcpSocketBase::ProcessOptionSackPermitted(ns3::Ptr<const ns3::TcpOption> const option) [member function]
<     cls.add_method('ProcessOptionSackPermitted', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::TcpOption const > const', 'option')], 
<                    visibility='protected')
11959,11964c10624
<                    is_virtual=True, visibility='protected')
<     ## tcp-socket-base.h (module 'internet'): void ns3::TcpSocketBase::ReadOptions(ns3::TcpHeader const & tcpHeader, uint32_t * bytesSacked) [member function]
<     cls.add_method('ReadOptions', 
<                    'void', 
<                    [param('ns3::TcpHeader const &', 'tcpHeader'), param('uint32_t *', 'bytesSacked')], 
<                    visibility='protected')
---
>                    visibility='protected', is_virtual=True)
11969c10629
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
11974c10634,10639
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
>     ## tcp-socket-base.h (module 'internet'): void ns3::TcpSocketBase::Retransmit() [member function]
>     cls.add_method('Retransmit', 
>                    'void', 
>                    [], 
>                    visibility='protected', is_virtual=True)
11983,11984c10648,10649
<                    [param('ns3::SequenceNumber< unsigned int, int >', 'seq'), param('uint32_t', 'maxSize'), param('bool', 'withAck')], 
<                    is_virtual=True, visibility='protected')
---
>                    [param('ns3::SequenceNumber32', 'seq'), param('uint32_t', 'maxSize'), param('bool', 'withAck')], 
>                    visibility='protected')
11989,11990c10654,10655
<                    is_virtual=True, visibility='protected')
<     ## tcp-socket-base.h (module 'internet'): uint32_t ns3::TcpSocketBase::SendPendingData(bool withAck=false) [member function]
---
>                    visibility='protected', is_virtual=True)
>     ## tcp-socket-base.h (module 'internet'): bool ns3::TcpSocketBase::SendPendingData(bool withAck=false) [member function]
11992c10657
<                    'uint32_t', 
---
>                    'bool', 
12004c10669
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
12009c10674
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
12014c10679
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
12019c10684
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
12024c10689
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
12029c10694
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
12034c10699
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
12039c10704
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
12044c10709
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
12049c10714
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
12054c10719
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
12059c10724
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
12064c10729
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
12089c10754
<                    is_const=True, is_virtual=True, visibility='protected')
---
>                    is_const=True, visibility='protected', is_virtual=True)
12094c10759
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
12104c10769
<                    is_const=True, is_virtual=True, visibility='protected')
---
>                    is_const=True, visibility='protected', is_virtual=True)
12110c10775
<     ## tcp-socket-factory.h (module 'internet'): ns3::TcpSocketFactory::TcpSocketFactory(ns3::TcpSocketFactory const & arg0) [constructor]
---
>     ## tcp-socket-factory.h (module 'internet'): ns3::TcpSocketFactory::TcpSocketFactory(ns3::TcpSocketFactory const & arg0) [copy constructor]
12120c10785
<     ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::TcpSocketState() [constructor]
---
>     ## tcp-socket-base.h (module 'internet'): ns3::TcpSocketState::TcpSocketState() [constructor]
12122c10787
<     ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::TcpSocketState(ns3::TcpSocketState const & other) [constructor]
---
>     ## tcp-socket-base.h (module 'internet'): ns3::TcpSocketState::TcpSocketState(ns3::TcpSocketState const & other) [copy constructor]
12124c10789
<     ## tcp-socket-state.h (module 'internet'): uint32_t ns3::TcpSocketState::GetCwndInSegments() const [member function]
---
>     ## tcp-socket-base.h (module 'internet'): uint32_t ns3::TcpSocketState::GetCwndInSegments() const [member function]
12129c10794
<     ## tcp-socket-state.h (module 'internet'): uint32_t ns3::TcpSocketState::GetSsThreshInSegments() const [member function]
---
>     ## tcp-socket-base.h (module 'internet'): uint32_t ns3::TcpSocketState::GetSsThreshInSegments() const [member function]
12134c10799
<     ## tcp-socket-state.h (module 'internet'): static ns3::TypeId ns3::TcpSocketState::GetTypeId() [member function]
---
>     ## tcp-socket-base.h (module 'internet'): static ns3::TypeId ns3::TcpSocketState::GetTypeId() [member function]
12139,12141c10804
<     ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::EcnStateName [variable]
<     cls.add_static_attribute('EcnStateName', 'char const * [ 6 ] const', is_const=True)
<     ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::TcpCongStateName [variable]
---
>     ## tcp-socket-base.h (module 'internet'): ns3::TcpSocketState::TcpCongStateName [variable]
12143,12145c10806
<     ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::m_bytesInFlight [variable]
<     cls.add_instance_attribute('m_bytesInFlight', 'ns3::TracedValue< unsigned int >', is_const=False)
<     ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::m_cWnd [variable]
---
>     ## tcp-socket-base.h (module 'internet'): ns3::TcpSocketState::m_cWnd [variable]
12147,12149c10808
<     ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::m_cWndInfl [variable]
<     cls.add_instance_attribute('m_cWndInfl', 'ns3::TracedValue< unsigned int >', is_const=False)
<     ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::m_congState [variable]
---
>     ## tcp-socket-base.h (module 'internet'): ns3::TcpSocketState::m_congState [variable]
12151,12159c10810
<     ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::m_currentPacingRate [variable]
<     cls.add_instance_attribute('m_currentPacingRate', 'ns3::DataRate', is_const=False)
<     ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::m_ecnMode [variable]
<     cls.add_instance_attribute('m_ecnMode', 'ns3::TcpSocketState::EcnMode_t', is_const=False)
<     ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::m_ecnState [variable]
<     cls.add_instance_attribute('m_ecnState', 'ns3::TracedValue< ns3::TcpSocketState::EcnState_t >', is_const=False)
<     ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::m_ectCodePoint [variable]
<     cls.add_instance_attribute('m_ectCodePoint', 'ns3::TcpSocketState::EcnCodePoint_t', is_const=False)
<     ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::m_highTxMark [variable]
---
>     ## tcp-socket-base.h (module 'internet'): ns3::TcpSocketState::m_highTxMark [variable]
12161c10812
<     ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::m_initialCWnd [variable]
---
>     ## tcp-socket-base.h (module 'internet'): ns3::TcpSocketState::m_initialCWnd [variable]
12163c10814
<     ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::m_initialSsThresh [variable]
---
>     ## tcp-socket-base.h (module 'internet'): ns3::TcpSocketState::m_initialSsThresh [variable]
12165c10816
<     ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::m_lastAckedSeq [variable]
---
>     ## tcp-socket-base.h (module 'internet'): ns3::TcpSocketState::m_lastAckedSeq [variable]
12167,12173c10818
<     ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::m_lastRtt [variable]
<     cls.add_instance_attribute('m_lastRtt', 'ns3::TracedValue< ns3::Time >', is_const=False)
<     ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::m_maxPacingRate [variable]
<     cls.add_instance_attribute('m_maxPacingRate', 'ns3::DataRate', is_const=False)
<     ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::m_minRtt [variable]
<     cls.add_instance_attribute('m_minRtt', 'ns3::Time', is_const=False)
<     ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::m_nextTxSequence [variable]
---
>     ## tcp-socket-base.h (module 'internet'): ns3::TcpSocketState::m_nextTxSequence [variable]
12175,12183c10820
<     ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::m_pacing [variable]
<     cls.add_instance_attribute('m_pacing', 'bool', is_const=False)
<     ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::m_rcvTimestampEchoReply [variable]
<     cls.add_instance_attribute('m_rcvTimestampEchoReply', 'uint32_t', is_const=False)
<     ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::m_rcvTimestampValue [variable]
<     cls.add_instance_attribute('m_rcvTimestampValue', 'uint32_t', is_const=False)
<     ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::m_rxBuffer [variable]
<     cls.add_instance_attribute('m_rxBuffer', 'ns3::Ptr< ns3::TcpRxBuffer >', is_const=False)
<     ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::m_segmentSize [variable]
---
>     ## tcp-socket-base.h (module 'internet'): ns3::TcpSocketState::m_segmentSize [variable]
12185,12187c10822
<     ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::m_sendEmptyPacketCallback [variable]
<     cls.add_instance_attribute('m_sendEmptyPacketCallback', 'ns3::Callback< void, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', is_const=False)
<     ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::m_ssThresh [variable]
---
>     ## tcp-socket-base.h (module 'internet'): ns3::TcpSocketState::m_ssThresh [variable]
12189,12190d10823
<     ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::m_useEcn [variable]
<     cls.add_instance_attribute('m_useEcn', 'ns3::TcpSocketState::UseEcn_t', is_const=False)
12194,12195c10827
<     cls.add_output_stream_operator()
<     ## tcp-tx-buffer.h (module 'internet'): ns3::TcpTxBuffer::TcpTxBuffer(ns3::TcpTxBuffer const & arg0) [constructor]
---
>     ## tcp-tx-buffer.h (module 'internet'): ns3::TcpTxBuffer::TcpTxBuffer(ns3::TcpTxBuffer const & arg0) [copy constructor]
12203,12206d10834
<     ## tcp-tx-buffer.h (module 'internet'): void ns3::TcpTxBuffer::AddRenoSack() [member function]
<     cls.add_method('AddRenoSack', 
<                    'void', 
<                    [])
12212,12217c10840
<     ## tcp-tx-buffer.h (module 'internet'): uint32_t ns3::TcpTxBuffer::BytesInFlight() const [member function]
<     cls.add_method('BytesInFlight', 
<                    'uint32_t', 
<                    [], 
<                    is_const=True)
<     ## tcp-tx-buffer.h (module 'internet'): ns3::TcpTxItem * ns3::TcpTxBuffer::CopyFromSequence(uint32_t numBytes, ns3::SequenceNumber32 const & seq) [member function]
---
>     ## tcp-tx-buffer.h (module 'internet'): ns3::Ptr<ns3::Packet> ns3::TcpTxBuffer::CopyFromSequence(uint32_t numBytes, ns3::SequenceNumber32 const & seq) [member function]
12219c10842
<                    'ns3::TcpTxItem *', 
---
>                    'ns3::Ptr< ns3::Packet >', 
12221,12225c10844
<     ## tcp-tx-buffer.h (module 'internet'): void ns3::TcpTxBuffer::DeleteRetransmittedFlagFromHead() [member function]
<     cls.add_method('DeleteRetransmittedFlagFromHead', 
<                    'void', 
<                    [])
<     ## tcp-tx-buffer.h (module 'internet'): void ns3::TcpTxBuffer::DiscardUpTo(ns3::SequenceNumber32 const & seq, ns3::Callback<void, ns3::TcpTxItem *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & beforeDelCb=ns3::TcpTxBuffer::m_nullCb) [member function]
---
>     ## tcp-tx-buffer.h (module 'internet'): void ns3::TcpTxBuffer::DiscardUpTo(ns3::SequenceNumber32 const & seq) [member function]
12228,12243c10847
<                    [param('ns3::SequenceNumber32 const &', 'seq'), param('ns3::Callback< void, ns3::TcpTxItem *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'beforeDelCb', default_value='ns3::TcpTxBuffer::m_nullCb')])
<     ## tcp-tx-buffer.h (module 'internet'): uint32_t ns3::TcpTxBuffer::GetLost() const [member function]
<     cls.add_method('GetLost', 
<                    'uint32_t', 
<                    [], 
<                    is_const=True)
<     ## tcp-tx-buffer.h (module 'internet'): uint32_t ns3::TcpTxBuffer::GetRetransmitsCount() const [member function]
<     cls.add_method('GetRetransmitsCount', 
<                    'uint32_t', 
<                    [], 
<                    is_const=True)
<     ## tcp-tx-buffer.h (module 'internet'): uint32_t ns3::TcpTxBuffer::GetSacked() const [member function]
<     cls.add_method('GetSacked', 
<                    'uint32_t', 
<                    [], 
<                    is_const=True)
---
>                    [param('ns3::SequenceNumber32 const &', 'seq')])
12254,12267d10857
<     ## tcp-tx-buffer.h (module 'internet'): bool ns3::TcpTxBuffer::IsHeadRetransmitted() const [member function]
<     cls.add_method('IsHeadRetransmitted', 
<                    'bool', 
<                    [], 
<                    is_const=True)
<     ## tcp-tx-buffer.h (module 'internet'): bool ns3::TcpTxBuffer::IsLost(ns3::SequenceNumber32 const & seq) const [member function]
<     cls.add_method('IsLost', 
<                    'bool', 
<                    [param('ns3::SequenceNumber32 const &', 'seq')], 
<                    is_const=True)
<     ## tcp-tx-buffer.h (module 'internet'): void ns3::TcpTxBuffer::MarkHeadAsLost() [member function]
<     cls.add_method('MarkHeadAsLost', 
<                    'void', 
<                    [])
12273,12293d10862
<     ## tcp-tx-buffer.h (module 'internet'): bool ns3::TcpTxBuffer::NextSeg(ns3::SequenceNumber32 * seq, bool isRecovery) const [member function]
<     cls.add_method('NextSeg', 
<                    'bool', 
<                    [param('ns3::SequenceNumber32 *', 'seq'), param('bool', 'isRecovery')], 
<                    is_const=True)
<     ## tcp-tx-buffer.h (module 'internet'): void ns3::TcpTxBuffer::ResetLastSegmentSent() [member function]
<     cls.add_method('ResetLastSegmentSent', 
<                    'void', 
<                    [])
<     ## tcp-tx-buffer.h (module 'internet'): void ns3::TcpTxBuffer::ResetRenoSack() [member function]
<     cls.add_method('ResetRenoSack', 
<                    'void', 
<                    [])
<     ## tcp-tx-buffer.h (module 'internet'): void ns3::TcpTxBuffer::ResetSentList() [member function]
<     cls.add_method('ResetSentList', 
<                    'void', 
<                    [])
<     ## tcp-tx-buffer.h (module 'internet'): void ns3::TcpTxBuffer::SetDupAckThresh(uint32_t dupAckThresh) [member function]
<     cls.add_method('SetDupAckThresh', 
<                    'void', 
<                    [param('uint32_t', 'dupAckThresh')])
12302,12309d10870
<     ## tcp-tx-buffer.h (module 'internet'): void ns3::TcpTxBuffer::SetSegmentSize(uint32_t segmentSize) [member function]
<     cls.add_method('SetSegmentSize', 
<                    'void', 
<                    [param('uint32_t', 'segmentSize')])
<     ## tcp-tx-buffer.h (module 'internet'): void ns3::TcpTxBuffer::SetSentListLost(bool resetSack=false) [member function]
<     cls.add_method('SetSentListLost', 
<                    'void', 
<                    [param('bool', 'resetSack', default_value='false')])
12325,12328d10885
<     ## tcp-tx-buffer.h (module 'internet'): uint32_t ns3::TcpTxBuffer::Update(ns3::TcpOptionSack::SackList const & list, ns3::Callback<void, ns3::TcpTxItem *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & sackedCb=ns3::TcpTxBuffer::m_nullCb) [member function]
<     cls.add_method('Update', 
<                    'uint32_t', 
<                    [param('ns3::TcpOptionSack::SackList const &', 'list'), param('ns3::Callback< void, ns3::TcpTxItem *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'sackedCb', default_value='ns3::TcpTxBuffer::m_nullCb')])
12334c10891
<     ## tcp-vegas.h (module 'internet'): ns3::TcpVegas::TcpVegas(ns3::TcpVegas const & sock) [constructor]
---
>     ## tcp-vegas.h (module 'internet'): ns3::TcpVegas::TcpVegas(ns3::TcpVegas const & sock) [copy constructor]
12376c10933
<     ## tcp-veno.h (module 'internet'): ns3::TcpVeno::TcpVeno(ns3::TcpVeno const & sock) [constructor]
---
>     ## tcp-veno.h (module 'internet'): ns3::TcpVeno::TcpVeno(ns3::TcpVeno const & sock) [copy constructor]
12418c10975
<     ## tcp-westwood.h (module 'internet'): ns3::TcpWestwood::TcpWestwood(ns3::TcpWestwood const & sock) [constructor]
---
>     ## tcp-westwood.h (module 'internet'): ns3::TcpWestwood::TcpWestwood(ns3::TcpWestwood const & sock) [copy constructor]
12445c11002
<     ## tcp-yeah.h (module 'internet'): ns3::TcpYeah::TcpYeah(ns3::TcpYeah const & sock) [constructor]
---
>     ## tcp-yeah.h (module 'internet'): ns3::TcpYeah::TcpYeah(ns3::TcpYeah const & sock) [copy constructor]
12485,12486d11041
<     cls.add_binary_comparison_operator('==')
<     cls.add_binary_comparison_operator('!=')
12488c11043,11048
<     cls.add_binary_comparison_operator('>=')
---
>     cls.add_binary_comparison_operator('!=')
>     cls.add_inplace_numeric_operator('+=', param('ns3::Time const &', u'right'))
>     cls.add_binary_numeric_operator('*', root_module['ns3::Time'], root_module['ns3::Time'], param('int64_t const &', u'right'))
>     cls.add_binary_numeric_operator('+', root_module['ns3::Time'], root_module['ns3::Time'], param('ns3::Time const &', u'right'))
>     cls.add_binary_numeric_operator('-', root_module['ns3::Time'], root_module['ns3::Time'], param('ns3::Time const &', u'right'))
>     cls.add_binary_numeric_operator('/', root_module['ns3::Time'], root_module['ns3::Time'], param('int64_t const &', u'right'))
12491,12499c11051
<     cls.add_binary_numeric_operator('+', root_module['ns3::Time'], root_module['ns3::Time'], param('ns3::Time const &', 'right'))
<     cls.add_binary_numeric_operator('-', root_module['ns3::Time'], root_module['ns3::Time'], param('ns3::Time const &', 'right'))
<     cls.add_binary_numeric_operator('*', root_module['ns3::Time'], root_module['ns3::Time'], param('int64_t const &', 'right'))
<     cls.add_binary_numeric_operator('*', root_module['ns3::Time'], root_module['ns3::Time'], param('ns3::int64x64_t const &', 'right'))
<     cls.add_binary_numeric_operator('/', root_module['ns3::int64x64_t'], root_module['ns3::Time'], param('ns3::Time const &', 'right'))
<     cls.add_binary_numeric_operator('/', root_module['ns3::Time'], root_module['ns3::Time'], param('int64_t const &', 'right'))
<     cls.add_binary_numeric_operator('/', root_module['ns3::Time'], root_module['ns3::Time'], param('ns3::int64x64_t const &', 'right'))
<     cls.add_inplace_numeric_operator('+=', param('ns3::Time const &', 'right'))
<     cls.add_inplace_numeric_operator('-=', param('ns3::Time const &', 'right'))
---
>     cls.add_inplace_numeric_operator('-=', param('ns3::Time const &', u'right'))
12500a11053,11054
>     cls.add_binary_comparison_operator('==')
>     cls.add_binary_comparison_operator('>=')
12503c11057
<     ## nstime.h (module 'core'): ns3::Time::Time(ns3::Time const & o) [constructor]
---
>     ## nstime.h (module 'core'): ns3::Time::Time(ns3::Time const & o) [copy constructor]
12686c11240
<     ## trace-source-accessor.h (module 'core'): ns3::TraceSourceAccessor::TraceSourceAccessor(ns3::TraceSourceAccessor const & arg0) [constructor]
---
>     ## trace-source-accessor.h (module 'core'): ns3::TraceSourceAccessor::TraceSourceAccessor(ns3::TraceSourceAccessor const & arg0) [copy constructor]
12694c11248
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
12699c11253
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
12704c11258
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
12709c11263
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
12715c11269
<     ## traced-value.h (module 'core'): ns3::TracedValue<ns3::Time>::TracedValue(ns3::TracedValue<ns3::Time> const & o) [constructor]
---
>     ## traced-value.h (module 'core'): ns3::TracedValue<ns3::Time>::TracedValue(ns3::TracedValue<ns3::Time> const & o) [copy constructor]
12719,12721c11273
<     ## traced-value.h (module 'core'): ns3::TracedValue<ns3::Time>::TracedValue(ns3::Time const & other) [constructor]
<     cls.add_constructor([param('ns3::Time const &', 'other')])
<     ## traced-value.h (module 'core'): void ns3::TracedValue<ns3::Time>::Connect(ns3::CallbackBase const & cb, std::string path) [member function]
---
>     ## traced-value.h (module 'core'): void ns3::TracedValue<ns3::Time>::Connect(ns3::CallbackBase const & cb, std::basic_string<char,std::char_traits<char>,std::allocator<char> > path) [member function]
12729c11281
<     ## traced-value.h (module 'core'): void ns3::TracedValue<ns3::Time>::Disconnect(ns3::CallbackBase const & cb, std::string path) [member function]
---
>     ## traced-value.h (module 'core'): void ns3::TracedValue<ns3::Time>::Disconnect(ns3::CallbackBase const & cb, std::basic_string<char,std::char_traits<char>,std::allocator<char> > path) [member function]
12747a11300,11367
> def register_Ns3TrafficControlLayer_methods(root_module, cls):
>     ## traffic-control-layer.h (module 'traffic-control'): ns3::TrafficControlLayer::TrafficControlLayer() [constructor]
>     cls.add_constructor([])
>     ## traffic-control-layer.h (module 'traffic-control'): void ns3::TrafficControlLayer::DeleteRootQueueDiscOnDevice(ns3::Ptr<ns3::NetDevice> device) [member function]
>     cls.add_method('DeleteRootQueueDiscOnDevice', 
>                    'void', 
>                    [param('ns3::Ptr< ns3::NetDevice >', 'device')], 
>                    is_virtual=True)
>     ## traffic-control-layer.h (module 'traffic-control'): ns3::TypeId ns3::TrafficControlLayer::GetInstanceTypeId() const [member function]
>     cls.add_method('GetInstanceTypeId', 
>                    'ns3::TypeId', 
>                    [], 
>                    is_const=True, is_virtual=True)
>     ## traffic-control-layer.h (module 'traffic-control'): ns3::Ptr<ns3::QueueDisc> ns3::TrafficControlLayer::GetRootQueueDiscOnDevice(ns3::Ptr<ns3::NetDevice> device) const [member function]
>     cls.add_method('GetRootQueueDiscOnDevice', 
>                    'ns3::Ptr< ns3::QueueDisc >', 
>                    [param('ns3::Ptr< ns3::NetDevice >', 'device')], 
>                    is_const=True, is_virtual=True)
>     ## traffic-control-layer.h (module 'traffic-control'): static ns3::TypeId ns3::TrafficControlLayer::GetTypeId() [member function]
>     cls.add_method('GetTypeId', 
>                    'ns3::TypeId', 
>                    [], 
>                    is_static=True)
>     ## traffic-control-layer.h (module 'traffic-control'): void ns3::TrafficControlLayer::Receive(ns3::Ptr<ns3::NetDevice> device, ns3::Ptr<ns3::Packet const> p, uint16_t protocol, ns3::Address const & from, ns3::Address const & to, ns3::NetDevice::PacketType packetType) [member function]
>     cls.add_method('Receive', 
>                    'void', 
>                    [param('ns3::Ptr< ns3::NetDevice >', 'device'), param('ns3::Ptr< ns3::Packet const >', 'p'), param('uint16_t', 'protocol'), param('ns3::Address const &', 'from'), param('ns3::Address const &', 'to'), param('ns3::NetDevice::PacketType', 'packetType')], 
>                    is_virtual=True)
>     ## traffic-control-layer.h (module 'traffic-control'): void ns3::TrafficControlLayer::RegisterProtocolHandler(ns3::Callback<void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<ns3::Packet const>, unsigned short, ns3::Address const&, ns3::Address const&, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty> handler, uint16_t protocolType, ns3::Ptr<ns3::NetDevice> device) [member function]
>     cls.add_method('RegisterProtocolHandler', 
>                    'void', 
>                    [param('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >', 'handler'), param('uint16_t', 'protocolType'), param('ns3::Ptr< ns3::NetDevice >', 'device')])
>     ## traffic-control-layer.h (module 'traffic-control'): void ns3::TrafficControlLayer::Send(ns3::Ptr<ns3::NetDevice> device, ns3::Ptr<ns3::QueueDiscItem> item) [member function]
>     cls.add_method('Send', 
>                    'void', 
>                    [param('ns3::Ptr< ns3::NetDevice >', 'device'), param('ns3::Ptr< ns3::QueueDiscItem >', 'item')], 
>                    is_virtual=True)
>     ## traffic-control-layer.h (module 'traffic-control'): void ns3::TrafficControlLayer::SetNode(ns3::Ptr<ns3::Node> node) [member function]
>     cls.add_method('SetNode', 
>                    'void', 
>                    [param('ns3::Ptr< ns3::Node >', 'node')])
>     ## traffic-control-layer.h (module 'traffic-control'): void ns3::TrafficControlLayer::SetRootQueueDiscOnDevice(ns3::Ptr<ns3::NetDevice> device, ns3::Ptr<ns3::QueueDisc> qDisc) [member function]
>     cls.add_method('SetRootQueueDiscOnDevice', 
>                    'void', 
>                    [param('ns3::Ptr< ns3::NetDevice >', 'device'), param('ns3::Ptr< ns3::QueueDisc >', 'qDisc')], 
>                    is_virtual=True)
>     ## traffic-control-layer.h (module 'traffic-control'): void ns3::TrafficControlLayer::SetupDevice(ns3::Ptr<ns3::NetDevice> device) [member function]
>     cls.add_method('SetupDevice', 
>                    'void', 
>                    [param('ns3::Ptr< ns3::NetDevice >', 'device')], 
>                    is_virtual=True)
>     ## traffic-control-layer.h (module 'traffic-control'): void ns3::TrafficControlLayer::DoDispose() [member function]
>     cls.add_method('DoDispose', 
>                    'void', 
>                    [], 
>                    visibility='protected', is_virtual=True)
>     ## traffic-control-layer.h (module 'traffic-control'): void ns3::TrafficControlLayer::DoInitialize() [member function]
>     cls.add_method('DoInitialize', 
>                    'void', 
>                    [], 
>                    visibility='protected', is_virtual=True)
>     ## traffic-control-layer.h (module 'traffic-control'): void ns3::TrafficControlLayer::NotifyNewAggregate() [member function]
>     cls.add_method('NotifyNewAggregate', 
>                    'void', 
>                    [], 
>                    visibility='protected', is_virtual=True)
>     return
> 
12752c11372
<     ## trailer.h (module 'network'): ns3::Trailer::Trailer(ns3::Trailer const & arg0) [constructor]
---
>     ## trailer.h (module 'network'): ns3::Trailer::Trailer(ns3::Trailer const & arg0) [copy constructor]
12758,12763c11378
<                    is_virtual=True, is_pure_virtual=True)
<     ## trailer.h (module 'network'): uint32_t ns3::Trailer::Deserialize(ns3::Buffer::Iterator start, ns3::Buffer::Iterator end) [member function]
<     cls.add_method('Deserialize', 
<                    'uint32_t', 
<                    [param('ns3::Buffer::Iterator', 'start'), param('ns3::Buffer::Iterator', 'end')], 
<                    is_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
12768c11383
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
12778c11393
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
12783c11398
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
12830c11445
<     ## udp-header.h (module 'internet'): ns3::UdpHeader::UdpHeader(ns3::UdpHeader const & arg0) [constructor]
---
>     ## udp-header.h (module 'internet'): ns3::UdpHeader::UdpHeader(ns3::UdpHeader const & arg0) [copy constructor]
12918c11533
<     ## udp-socket.h (module 'internet'): ns3::UdpSocket::UdpSocket(ns3::UdpSocket const & arg0) [constructor]
---
>     ## udp-socket.h (module 'internet'): ns3::UdpSocket::UdpSocket(ns3::UdpSocket const & arg0) [copy constructor]
12931c11546
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
12936c11551
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
12941c11556
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
12946c11561
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
12951c11566
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
12956c11571
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
12961c11576
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
12966c11581
<                    is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
12971c11586
<                    is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
12976c11591
<                    is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
12981c11596
<                    is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
12986c11601
<                    is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
12992c11607
<     ## udp-socket-factory.h (module 'internet'): ns3::UdpSocketFactory::UdpSocketFactory(ns3::UdpSocketFactory const & arg0) [constructor]
---
>     ## udp-socket-factory.h (module 'internet'): ns3::UdpSocketFactory::UdpSocketFactory(ns3::UdpSocketFactory const & arg0) [copy constructor]
13198c11813
<     ## arp-cache.h (module 'internet'): std::list<ns3::ArpCache::Entry *, std::allocator<ns3::ArpCache::Entry *> > ns3::ArpCache::LookupInverse(ns3::Address destination) [member function]
---
>     ## arp-cache.h (module 'internet'): std::list<ns3::ArpCache::Entry*,std::allocator<ns3::ArpCache::Entry*> > ns3::ArpCache::LookupInverse(ns3::Address destination) [member function]
13214c11829
<     ## arp-cache.h (module 'internet'): void ns3::ArpCache::SetArpRequestCallback(ns3::Callback<void, ns3::Ptr<const ns3::ArpCache>, ns3::Ipv4Address, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> arpRequestCallback) [member function]
---
>     ## arp-cache.h (module 'internet'): void ns3::ArpCache::SetArpRequestCallback(ns3::Callback<void, ns3::Ptr<ns3::ArpCache const>, ns3::Ipv4Address, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> arpRequestCallback) [member function]
13238c11853
<                    is_virtual=True, visibility='private')
---
>                    visibility='private', is_virtual=True)
13242c11857
<     ## arp-cache.h (module 'internet'): ns3::ArpCache::Entry::Entry(ns3::ArpCache::Entry const & arg0) [constructor]
---
>     ## arp-cache.h (module 'internet'): ns3::ArpCache::Entry::Entry(ns3::ArpCache::Entry const & arg0) [copy constructor]
13254c11869
<     ## arp-cache.h (module 'internet'): ns3::ArpCache::Ipv4PayloadHeaderPair ns3::ArpCache::Entry::DequeuePending() [member function]
---
>     ## arp-cache.h (module 'internet'): std::pair<ns3::Ptr<ns3::Packet>,ns3::Ipv4Header> ns3::ArpCache::Entry::DequeuePending() [member function]
13256c11871
<                    'ns3::ArpCache::Ipv4PayloadHeaderPair', 
---
>                    'std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv4Header >', 
13310c11925
<     ## arp-cache.h (module 'internet'): void ns3::ArpCache::Entry::MarkWaitReply(ns3::ArpCache::Ipv4PayloadHeaderPair waiting) [member function]
---
>     ## arp-cache.h (module 'internet'): void ns3::ArpCache::Entry::MarkWaitReply(std::pair<ns3::Ptr<ns3::Packet>,ns3::Ipv4Header> waiting) [member function]
13318,13319c11933,11934
<     ## arp-cache.h (module 'internet'): void ns3::ArpCache::Entry::SetMacAddress(ns3::Address macAddress) [member function]
<     cls.add_method('SetMacAddress', 
---
>     ## arp-cache.h (module 'internet'): void ns3::ArpCache::Entry::SetMacAddresss(ns3::Address macAddress) [member function]
>     cls.add_method('SetMacAddresss', 
13326c11941
<     ## arp-cache.h (module 'internet'): bool ns3::ArpCache::Entry::UpdateWaitReply(ns3::ArpCache::Ipv4PayloadHeaderPair waiting) [member function]
---
>     ## arp-cache.h (module 'internet'): bool ns3::ArpCache::Entry::UpdateWaitReply(std::pair<ns3::Ptr<ns3::Packet>,ns3::Ipv4Header> waiting) [member function]
13335c11950
<     ## arp-header.h (module 'internet'): ns3::ArpHeader::ArpHeader(ns3::ArpHeader const & arg0) [constructor]
---
>     ## arp-header.h (module 'internet'): ns3::ArpHeader::ArpHeader(ns3::ArpHeader const & arg0) [copy constructor]
13342c11957
<     ## arp-header.h (module 'internet'): ns3::Address ns3::ArpHeader::GetDestinationHardwareAddress() const [member function]
---
>     ## arp-header.h (module 'internet'): ns3::Address ns3::ArpHeader::GetDestinationHardwareAddress() [member function]
13345,13347c11960,11961
<                    [], 
<                    is_const=True)
<     ## arp-header.h (module 'internet'): ns3::Ipv4Address ns3::ArpHeader::GetDestinationIpv4Address() const [member function]
---
>                    [])
>     ## arp-header.h (module 'internet'): ns3::Ipv4Address ns3::ArpHeader::GetDestinationIpv4Address() [member function]
13350,13351c11964
<                    [], 
<                    is_const=True)
---
>                    [])
13362c11975
<     ## arp-header.h (module 'internet'): ns3::Address ns3::ArpHeader::GetSourceHardwareAddress() const [member function]
---
>     ## arp-header.h (module 'internet'): ns3::Address ns3::ArpHeader::GetSourceHardwareAddress() [member function]
13365,13367c11978,11979
<                    [], 
<                    is_const=True)
<     ## arp-header.h (module 'internet'): ns3::Ipv4Address ns3::ArpHeader::GetSourceIpv4Address() const [member function]
---
>                    [])
>     ## arp-header.h (module 'internet'): ns3::Ipv4Address ns3::ArpHeader::GetSourceIpv4Address() [member function]
13370,13371c11982
<                    [], 
<                    is_const=True)
---
>                    [])
13417a12029,12030
>     ## arp-l3-protocol.h (module 'internet'): ns3::ArpL3Protocol::PROT_NUMBER [variable]
>     cls.add_static_attribute('PROT_NUMBER', 'uint16_t const', is_const=True)
13423,13424d12035
<     ## arp-l3-protocol.h (module 'internet'): ns3::ArpL3Protocol::PROT_NUMBER [variable]
<     cls.add_static_attribute('PROT_NUMBER', 'uint16_t const', is_const=True)
13431,13434d12041
<     ## arp-l3-protocol.h (module 'internet'): void ns3::ArpL3Protocol::SetTrafficControl(ns3::Ptr<ns3::TrafficControlLayer> tc) [member function]
<     cls.add_method('SetTrafficControl', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::TrafficControlLayer >', 'tc')])
13439c12046
<     ## arp-l3-protocol.h (module 'internet'): void ns3::ArpL3Protocol::Receive(ns3::Ptr<ns3::NetDevice> device, ns3::Ptr<const ns3::Packet> p, uint16_t protocol, ns3::Address const & from, ns3::Address const & to, ns3::NetDevice::PacketType packetType) [member function]
---
>     ## arp-l3-protocol.h (module 'internet'): void ns3::ArpL3Protocol::Receive(ns3::Ptr<ns3::NetDevice> device, ns3::Ptr<ns3::Packet const> p, uint16_t protocol, ns3::Address const & from, ns3::Address const & to, ns3::NetDevice::PacketType packetType) [member function]
13455c12062
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
13460c12067
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
13464c12071
<     ## attribute.h (module 'core'): ns3::AttributeAccessor::AttributeAccessor(ns3::AttributeAccessor const & arg0) [constructor]
---
>     ## attribute.h (module 'core'): ns3::AttributeAccessor::AttributeAccessor(ns3::AttributeAccessor const & arg0) [copy constructor]
13472c12079
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
13477c12084
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
13482c12089
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
13487c12094
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
13491c12098
<     ## attribute.h (module 'core'): ns3::AttributeChecker::AttributeChecker(ns3::AttributeChecker const & arg0) [constructor]
---
>     ## attribute.h (module 'core'): ns3::AttributeChecker::AttributeChecker(ns3::AttributeChecker const & arg0) [copy constructor]
13499c12106
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
13504c12111
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
13509c12116
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
13519c12126
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
13524c12131
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
13529c12136
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
13533c12140
<     ## attribute.h (module 'core'): ns3::AttributeValue::AttributeValue(ns3::AttributeValue const & arg0) [constructor]
---
>     ## attribute.h (module 'core'): ns3::AttributeValue::AttributeValue(ns3::AttributeValue const & arg0) [copy constructor]
13541,13542c12148,12149
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
<     ## attribute.h (module 'core'): bool ns3::AttributeValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
>     ## attribute.h (module 'core'): bool ns3::AttributeValue::DeserializeFromString(std::string value, ns3::Ptr<ns3::AttributeChecker const> checker) [member function]
13546,13547c12153,12154
<                    is_virtual=True, is_pure_virtual=True)
<     ## attribute.h (module 'core'): std::string ns3::AttributeValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
---
>                    is_pure_virtual=True, is_virtual=True)
>     ## attribute.h (module 'core'): std::string ns3::AttributeValue::SerializeToString(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
13551c12158
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
13557c12164
<     ## boolean.h (module 'core'): ns3::BooleanChecker::BooleanChecker(ns3::BooleanChecker const & arg0) [constructor]
---
>     ## boolean.h (module 'core'): ns3::BooleanChecker::BooleanChecker(ns3::BooleanChecker const & arg0) [copy constructor]
13563c12170
<     ## boolean.h (module 'core'): ns3::BooleanValue::BooleanValue(ns3::BooleanValue const & arg0) [constructor]
---
>     ## boolean.h (module 'core'): ns3::BooleanValue::BooleanValue(ns3::BooleanValue const & arg0) [copy constructor]
13574c12181
<     ## boolean.h (module 'core'): bool ns3::BooleanValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
---
>     ## boolean.h (module 'core'): bool ns3::BooleanValue::DeserializeFromString(std::string value, ns3::Ptr<ns3::AttributeChecker const> checker) [member function]
13584c12191
<     ## boolean.h (module 'core'): std::string ns3::BooleanValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
---
>     ## boolean.h (module 'core'): std::string ns3::BooleanValue::SerializeToString(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
13598c12205
<     ## callback.h (module 'core'): ns3::CallbackChecker::CallbackChecker(ns3::CallbackChecker const & arg0) [constructor]
---
>     ## callback.h (module 'core'): ns3::CallbackChecker::CallbackChecker(ns3::CallbackChecker const & arg0) [copy constructor]
13605c12212
<     ## callback.h (module 'core'): ns3::CallbackImplBase::CallbackImplBase(ns3::CallbackImplBase const & arg0) [constructor]
---
>     ## callback.h (module 'core'): ns3::CallbackImplBase::CallbackImplBase(ns3::CallbackImplBase const & arg0) [copy constructor]
13611,13612c12218,12219
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
<     ## callback.h (module 'core'): bool ns3::CallbackImplBase::IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other) const [member function]
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
>     ## callback.h (module 'core'): bool ns3::CallbackImplBase::IsEqual(ns3::Ptr<ns3::CallbackImplBase const> other) const [member function]
13616c12223
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
13622,13801d12228
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True, template_parameters=['ns3::ObjectBase*'], visibility='protected')
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True, template_parameters=['void'], visibility='protected')
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True, template_parameters=['ns3::SequenceNumber<unsigned int', ' int> '], visibility='protected')
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True, template_parameters=['unsigned int'], visibility='protected')
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True, template_parameters=['ns3::TcpSocketState::TcpCongState_t'], visibility='protected')
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True, template_parameters=['ns3::TcpSocketState::EcnState_t'], visibility='protected')
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True, template_parameters=['ns3::Time'], visibility='protected')
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True, template_parameters=['double'], visibility='protected')
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True, template_parameters=['ns3::TcpSocket::TcpStates_t'], visibility='protected')
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True, template_parameters=['ns3::Ptr<ns3::Packet const> '], visibility='protected')
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True, template_parameters=['ns3::Ptr<ns3::NetDevice> '], visibility='protected')
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True, template_parameters=['unsigned short'], visibility='protected')
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True, template_parameters=['ns3::Address const&'], visibility='protected')
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True, template_parameters=['ns3::NetDevice::PacketType'], visibility='protected')
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True, template_parameters=['ns3::Ptr<ns3::Packet> '], visibility='protected')
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True, template_parameters=['ns3::Ipv4Address'], visibility='protected')
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True, template_parameters=['unsigned char'], visibility='protected')
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True, template_parameters=['ns3::Ptr<ns3::Ipv4Route> '], visibility='protected')
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True, template_parameters=['ns3::Ipv6Address'], visibility='protected')
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True, template_parameters=['ns3::Ptr<ns3::Ipv6Route> '], visibility='protected')
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True, template_parameters=['ns3::Ptr<ns3::Socket> '], visibility='protected')
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True, template_parameters=['bool'], visibility='protected')
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True, template_parameters=['ns3::Ipv4Header const&'], visibility='protected')
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True, template_parameters=['ns3::Ptr<ns3::Ipv4> '], visibility='protected')
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True, template_parameters=['ns3::Ipv4L3Protocol::DropReason'], visibility='protected')
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True, template_parameters=['ns3::Ptr<ns3::Ipv6> '], visibility='protected')
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True, template_parameters=['ns3::Ipv6Header const&'], visibility='protected')
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True, template_parameters=['ns3::Ipv6L3Protocol::DropReason'], visibility='protected')
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True, template_parameters=['ns3::Ipv4Header'], visibility='protected')
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True, template_parameters=['ns3::Ptr<ns3::Ipv4Interface> '], visibility='protected')
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True, template_parameters=['ns3::Ipv6Header'], visibility='protected')
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True, template_parameters=['ns3::Ptr<ns3::Ipv6Interface> '], visibility='protected')
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True, template_parameters=['ns3::TcpRateOps::TcpRateConnection const&'], visibility='protected')
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True, template_parameters=['ns3::TcpRateOps::TcpRateSample const&'], visibility='protected')
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True, template_parameters=['ns3::TcpHeader const&'], visibility='protected')
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True, template_parameters=['ns3::Ptr<ns3::TcpSocketBase const> '], visibility='protected')
13805c12232
<     ## callback.h (module 'core'): ns3::CallbackValue::CallbackValue(ns3::CallbackValue const & arg0) [constructor]
---
>     ## callback.h (module 'core'): ns3::CallbackValue::CallbackValue(ns3::CallbackValue const & arg0) [copy constructor]
13816c12243
<     ## callback.h (module 'core'): bool ns3::CallbackValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
---
>     ## callback.h (module 'core'): bool ns3::CallbackValue::DeserializeFromString(std::string value, ns3::Ptr<ns3::AttributeChecker const> checker) [member function]
13821c12248
<     ## callback.h (module 'core'): std::string ns3::CallbackValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
---
>     ## callback.h (module 'core'): std::string ns3::CallbackValue::SerializeToString(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
13833c12260
<     ## channel.h (module 'network'): ns3::Channel::Channel(ns3::Channel const & arg0) [constructor]
---
>     ## channel.h (module 'network'): ns3::Channel::Channel(ns3::Channel const & arg0) [copy constructor]
13837c12264
<     ## channel.h (module 'network'): ns3::Ptr<ns3::NetDevice> ns3::Channel::GetDevice(std::size_t i) const [member function]
---
>     ## channel.h (module 'network'): ns3::Ptr<ns3::NetDevice> ns3::Channel::GetDevice(uint32_t i) const [member function]
13840,13841c12267,12268
<                    [param('std::size_t', 'i')], 
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    [param('uint32_t', 'i')], 
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
13847c12274
<     ## channel.h (module 'network'): std::size_t ns3::Channel::GetNDevices() const [member function]
---
>     ## channel.h (module 'network'): uint32_t ns3::Channel::GetNDevices() const [member function]
13849c12276
<                    'std::size_t', 
---
>                    'uint32_t', 
13851c12278
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
13893c12320
<     ## data-collection-object.h (module 'stats'): ns3::DataCollectionObject::DataCollectionObject(ns3::DataCollectionObject const & arg0) [constructor]
---
>     ## data-collection-object.h (module 'stats'): ns3::DataCollectionObject::DataCollectionObject(ns3::DataCollectionObject const & arg0) [copy constructor]
13926,13965d12352
< def register_Ns3DataRateChecker_methods(root_module, cls):
<     ## data-rate.h (module 'network'): ns3::DataRateChecker::DataRateChecker() [constructor]
<     cls.add_constructor([])
<     ## data-rate.h (module 'network'): ns3::DataRateChecker::DataRateChecker(ns3::DataRateChecker const & arg0) [constructor]
<     cls.add_constructor([param('ns3::DataRateChecker const &', 'arg0')])
<     return
< 
< def register_Ns3DataRateValue_methods(root_module, cls):
<     ## data-rate.h (module 'network'): ns3::DataRateValue::DataRateValue() [constructor]
<     cls.add_constructor([])
<     ## data-rate.h (module 'network'): ns3::DataRateValue::DataRateValue(ns3::DataRate const & value) [constructor]
<     cls.add_constructor([param('ns3::DataRate const &', 'value')])
<     ## data-rate.h (module 'network'): ns3::DataRateValue::DataRateValue(ns3::DataRateValue const & arg0) [constructor]
<     cls.add_constructor([param('ns3::DataRateValue const &', 'arg0')])
<     ## data-rate.h (module 'network'): ns3::Ptr<ns3::AttributeValue> ns3::DataRateValue::Copy() const [member function]
<     cls.add_method('Copy', 
<                    'ns3::Ptr< ns3::AttributeValue >', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## data-rate.h (module 'network'): bool ns3::DataRateValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
<     cls.add_method('DeserializeFromString', 
<                    'bool', 
<                    [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
<                    is_virtual=True)
<     ## data-rate.h (module 'network'): ns3::DataRate ns3::DataRateValue::Get() const [member function]
<     cls.add_method('Get', 
<                    'ns3::DataRate', 
<                    [], 
<                    is_const=True)
<     ## data-rate.h (module 'network'): std::string ns3::DataRateValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
<     cls.add_method('SerializeToString', 
<                    'std::string', 
<                    [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
<                    is_const=True, is_virtual=True)
<     ## data-rate.h (module 'network'): void ns3::DataRateValue::Set(ns3::DataRate const & value) [member function]
<     cls.add_method('Set', 
<                    'void', 
<                    [param('ns3::DataRate const &', 'value')])
<     return
< 
13974c12361
<     ## random-variable-stream.h (module 'core'): void ns3::DeterministicRandomVariable::SetValueArray(double * values, std::size_t length) [member function]
---
>     ## random-variable-stream.h (module 'core'): void ns3::DeterministicRandomVariable::SetValueArray(double * values, uint64_t length) [member function]
13977c12364
<                    [param('double *', 'values'), param('std::size_t', 'length')])
---
>                    [param('double *', 'values'), param('uint64_t', 'length')])
13992a12380,12381
>     ## double.h (module 'core'): ns3::DoubleValue::DoubleValue(ns3::DoubleValue const & arg0) [copy constructor]
>     cls.add_constructor([param('ns3::DoubleValue const &', 'arg0')])
13995,13996d12383
<     ## double.h (module 'core'): ns3::DoubleValue::DoubleValue(ns3::DoubleValue const & arg0) [constructor]
<     cls.add_constructor([param('ns3::DoubleValue const &', 'arg0')])
14002c12389
<     ## double.h (module 'core'): bool ns3::DoubleValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
---
>     ## double.h (module 'core'): bool ns3::DoubleValue::DeserializeFromString(std::string value, ns3::Ptr<ns3::AttributeChecker const> checker) [member function]
14012c12399
<     ## double.h (module 'core'): std::string ns3::DoubleValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
---
>     ## double.h (module 'core'): std::string ns3::DoubleValue::SerializeToString(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
14049c12436
<                    is_virtual=True, visibility='private')
---
>                    visibility='private', is_virtual=True)
14054c12441
<                    is_virtual=True, visibility='private')
---
>                    visibility='private', is_virtual=True)
14058c12445
<     ## attribute.h (module 'core'): ns3::EmptyAttributeAccessor::EmptyAttributeAccessor(ns3::EmptyAttributeAccessor const & arg0) [constructor]
---
>     ## attribute.h (module 'core'): ns3::EmptyAttributeAccessor::EmptyAttributeAccessor(ns3::EmptyAttributeAccessor const & arg0) [copy constructor]
14085c12472
<     ## attribute.h (module 'core'): ns3::EmptyAttributeChecker::EmptyAttributeChecker(ns3::EmptyAttributeChecker const & arg0) [constructor]
---
>     ## attribute.h (module 'core'): ns3::EmptyAttributeChecker::EmptyAttributeChecker(ns3::EmptyAttributeChecker const & arg0) [copy constructor]
14122c12509
<     ## attribute.h (module 'core'): ns3::EmptyAttributeValue::EmptyAttributeValue(ns3::EmptyAttributeValue const & arg0) [constructor]
---
>     ## attribute.h (module 'core'): ns3::EmptyAttributeValue::EmptyAttributeValue(ns3::EmptyAttributeValue const & arg0) [copy constructor]
14130,14131c12517,12518
<                    is_const=True, is_virtual=True, visibility='private')
<     ## attribute.h (module 'core'): bool ns3::EmptyAttributeValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
---
>                    is_const=True, visibility='private', is_virtual=True)
>     ## attribute.h (module 'core'): bool ns3::EmptyAttributeValue::DeserializeFromString(std::string value, ns3::Ptr<ns3::AttributeChecker const> checker) [member function]
14135,14136c12522,12523
<                    is_virtual=True, visibility='private')
<     ## attribute.h (module 'core'): std::string ns3::EmptyAttributeValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
---
>                    visibility='private', is_virtual=True)
>     ## attribute.h (module 'core'): std::string ns3::EmptyAttributeValue::SerializeToString(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
14140c12527
<                    is_const=True, is_virtual=True, visibility='private')
---
>                    is_const=True, visibility='private', is_virtual=True)
14144c12531
<     ## enum.h (module 'core'): ns3::EnumChecker::EnumChecker(ns3::EnumChecker const & arg0) [constructor]
---
>     ## enum.h (module 'core'): ns3::EnumChecker::EnumChecker(ns3::EnumChecker const & arg0) [copy constructor]
14189c12576
<     ## enum.h (module 'core'): ns3::EnumValue::EnumValue(ns3::EnumValue const & arg0) [constructor]
---
>     ## enum.h (module 'core'): ns3::EnumValue::EnumValue(ns3::EnumValue const & arg0) [copy constructor]
14200c12587
<     ## enum.h (module 'core'): bool ns3::EnumValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
---
>     ## enum.h (module 'core'): bool ns3::EnumValue::DeserializeFromString(std::string value, ns3::Ptr<ns3::AttributeChecker const> checker) [member function]
14210c12597
<     ## enum.h (module 'core'): std::string ns3::EnumValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
---
>     ## enum.h (module 'core'): std::string ns3::EnumValue::SerializeToString(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
14260c12647
<     ## event-impl.h (module 'core'): ns3::EventImpl::EventImpl(ns3::EventImpl const & arg0) [constructor]
---
>     ## event-impl.h (module 'core'): ns3::EventImpl::EventImpl(ns3::EventImpl const & arg0) [copy constructor]
14280c12667
<                    is_virtual=True, is_pure_virtual=True, visibility='protected')
---
>                    is_pure_virtual=True, visibility='protected', is_virtual=True)
14418c12805
<                    is_virtual=True, visibility='private')
---
>                    visibility='private', is_virtual=True)
14422c12809
<     ## icmpv6-header.h (module 'internet'): ns3::Icmpv6DestinationUnreachable::Icmpv6DestinationUnreachable(ns3::Icmpv6DestinationUnreachable const & arg0) [constructor]
---
>     ## icmpv6-header.h (module 'internet'): ns3::Icmpv6DestinationUnreachable::Icmpv6DestinationUnreachable(ns3::Icmpv6DestinationUnreachable const & arg0) [copy constructor]
14468c12855
<     ## icmpv6-header.h (module 'internet'): ns3::Icmpv6Echo::Icmpv6Echo(ns3::Icmpv6Echo const & arg0) [constructor]
---
>     ## icmpv6-header.h (module 'internet'): ns3::Icmpv6Echo::Icmpv6Echo(ns3::Icmpv6Echo const & arg0) [copy constructor]
14526a12914,12915
>     ## integer.h (module 'core'): ns3::IntegerValue::IntegerValue(ns3::IntegerValue const & arg0) [copy constructor]
>     cls.add_constructor([param('ns3::IntegerValue const &', 'arg0')])
14529,14530d12917
<     ## integer.h (module 'core'): ns3::IntegerValue::IntegerValue(ns3::IntegerValue const & arg0) [constructor]
<     cls.add_constructor([param('ns3::IntegerValue const &', 'arg0')])
14536c12923
<     ## integer.h (module 'core'): bool ns3::IntegerValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
---
>     ## integer.h (module 'core'): bool ns3::IntegerValue::DeserializeFromString(std::string value, ns3::Ptr<ns3::AttributeChecker const> checker) [member function]
14546c12933
<     ## integer.h (module 'core'): std::string ns3::IntegerValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
---
>     ## integer.h (module 'core'): std::string ns3::IntegerValue::SerializeToString(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
14560c12947
<     ## ip-l4-protocol.h (module 'internet'): ns3::IpL4Protocol::IpL4Protocol(ns3::IpL4Protocol const & arg0) [constructor]
---
>     ## ip-l4-protocol.h (module 'internet'): ns3::IpL4Protocol::IpL4Protocol(ns3::IpL4Protocol const & arg0) [copy constructor]
14562c12949
<     ## ip-l4-protocol.h (module 'internet'): ns3::IpL4Protocol::DownTargetCallback ns3::IpL4Protocol::GetDownTarget() const [member function]
---
>     ## ip-l4-protocol.h (module 'internet'): ns3::Callback<void, ns3::Ptr<ns3::Packet>, ns3::Ipv4Address, ns3::Ipv4Address, unsigned char, ns3::Ptr<ns3::Ipv4Route>, ns3::empty, ns3::empty, ns3::empty, ns3::empty> ns3::IpL4Protocol::GetDownTarget() const [member function]
14564c12951
<                    'ns3::IpL4Protocol::DownTargetCallback', 
---
>                    'ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Ipv4Address, ns3::Ipv4Address, unsigned char, ns3::Ptr< ns3::Ipv4Route >, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 
14566,14567c12953,12954
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
<     ## ip-l4-protocol.h (module 'internet'): ns3::IpL4Protocol::DownTargetCallback6 ns3::IpL4Protocol::GetDownTarget6() const [member function]
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
>     ## ip-l4-protocol.h (module 'internet'): ns3::Callback<void, ns3::Ptr<ns3::Packet>, ns3::Ipv6Address, ns3::Ipv6Address, unsigned char, ns3::Ptr<ns3::Ipv6Route>, ns3::empty, ns3::empty, ns3::empty, ns3::empty> ns3::IpL4Protocol::GetDownTarget6() const [member function]
14569c12956
<                    'ns3::IpL4Protocol::DownTargetCallback6', 
---
>                    'ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Ipv6Address, ns3::Ipv6Address, unsigned char, ns3::Ptr< ns3::Ipv6Route >, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 
14571c12958
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
14576c12963
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
14586c12973
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14591c12978
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14602c12989
<     ## ip-l4-protocol.h (module 'internet'): void ns3::IpL4Protocol::SetDownTarget(ns3::IpL4Protocol::DownTargetCallback cb) [member function]
---
>     ## ip-l4-protocol.h (module 'internet'): void ns3::IpL4Protocol::SetDownTarget(ns3::Callback<void, ns3::Ptr<ns3::Packet>, ns3::Ipv4Address, ns3::Ipv4Address, unsigned char, ns3::Ptr<ns3::Ipv4Route>, ns3::empty, ns3::empty, ns3::empty, ns3::empty> cb) [member function]
14606,14607c12993,12994
<                    is_virtual=True, is_pure_virtual=True)
<     ## ip-l4-protocol.h (module 'internet'): void ns3::IpL4Protocol::SetDownTarget6(ns3::IpL4Protocol::DownTargetCallback6 cb) [member function]
---
>                    is_pure_virtual=True, is_virtual=True)
>     ## ip-l4-protocol.h (module 'internet'): void ns3::IpL4Protocol::SetDownTarget6(ns3::Callback<void, ns3::Ptr<ns3::Packet>, ns3::Ipv6Address, ns3::Ipv6Address, unsigned char, ns3::Ptr<ns3::Ipv6Route>, ns3::empty, ns3::empty, ns3::empty, ns3::empty> cb) [member function]
14611c12998
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14615c13002
<     ## ipv4.h (module 'internet'): ns3::Ipv4::Ipv4(ns3::Ipv4 const & arg0) [constructor]
---
>     ## ipv4.h (module 'internet'): ns3::Ipv4::Ipv4(ns3::Ipv4 const & arg0) [copy constructor]
14623c13010
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14628c13015
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14633c13020
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14638c13025
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14643c13030
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
14648c13035
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
14653c13040
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
14658c13045
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
14663c13050
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
14668c13055
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
14673c13060
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
14678c13065
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
14683c13070
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14688c13075
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
14693c13080
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
14698c13085
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
14708c13095
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14713c13100
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14718c13105
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
14723c13110
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
14728c13115
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
14733c13120
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14738c13125
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14743c13130
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14748c13135
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14753c13140
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14758c13145
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14763c13150
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14768c13155
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14773c13160
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14778c13165
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14783c13170
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14788c13175
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14793c13180
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14800c13187
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
14805c13192
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
14810c13197
<                    is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
14815c13202
<                    is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
14821c13208
<     ## ipv4-address.h (module 'network'): ns3::Ipv4AddressChecker::Ipv4AddressChecker(ns3::Ipv4AddressChecker const & arg0) [constructor]
---
>     ## ipv4-address.h (module 'network'): ns3::Ipv4AddressChecker::Ipv4AddressChecker(ns3::Ipv4AddressChecker const & arg0) [copy constructor]
14827a13215,13216
>     ## ipv4-address.h (module 'network'): ns3::Ipv4AddressValue::Ipv4AddressValue(ns3::Ipv4AddressValue const & arg0) [copy constructor]
>     cls.add_constructor([param('ns3::Ipv4AddressValue const &', 'arg0')])
14830,14831d13218
<     ## ipv4-address.h (module 'network'): ns3::Ipv4AddressValue::Ipv4AddressValue(ns3::Ipv4AddressValue const & arg0) [constructor]
<     cls.add_constructor([param('ns3::Ipv4AddressValue const &', 'arg0')])
14837c13224
<     ## ipv4-address.h (module 'network'): bool ns3::Ipv4AddressValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
---
>     ## ipv4-address.h (module 'network'): bool ns3::Ipv4AddressValue::DeserializeFromString(std::string value, ns3::Ptr<ns3::AttributeChecker const> checker) [member function]
14847c13234
<     ## ipv4-address.h (module 'network'): std::string ns3::Ipv4AddressValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
---
>     ## ipv4-address.h (module 'network'): std::string ns3::Ipv4AddressValue::SerializeToString(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
14859,14863c13246,13247
<     ## ipv4-interface.h (module 'internet'): static ns3::TypeId ns3::Ipv4Interface::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
---
>     ## ipv4-interface.h (module 'internet'): ns3::Ipv4Interface::Ipv4Interface(ns3::Ipv4Interface const & arg0) [copy constructor]
>     cls.add_constructor([param('ns3::Ipv4Interface const &', 'arg0')])
14866,14885c13250,13257
<     ## ipv4-interface.h (module 'internet'): void ns3::Ipv4Interface::SetNode(ns3::Ptr<ns3::Node> node) [member function]
<     cls.add_method('SetNode', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Node >', 'node')])
<     ## ipv4-interface.h (module 'internet'): void ns3::Ipv4Interface::SetDevice(ns3::Ptr<ns3::NetDevice> device) [member function]
<     cls.add_method('SetDevice', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::NetDevice >', 'device')])
<     ## ipv4-interface.h (module 'internet'): void ns3::Ipv4Interface::SetTrafficControl(ns3::Ptr<ns3::TrafficControlLayer> tc) [member function]
<     cls.add_method('SetTrafficControl', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::TrafficControlLayer >', 'tc')])
<     ## ipv4-interface.h (module 'internet'): void ns3::Ipv4Interface::SetArpCache(ns3::Ptr<ns3::ArpCache> arpCache) [member function]
<     cls.add_method('SetArpCache', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::ArpCache >', 'arpCache')])
<     ## ipv4-interface.h (module 'internet'): ns3::Ptr<ns3::NetDevice> ns3::Ipv4Interface::GetDevice() const [member function]
<     cls.add_method('GetDevice', 
<                    'ns3::Ptr< ns3::NetDevice >', 
<                    [], 
---
>     ## ipv4-interface.h (module 'internet'): bool ns3::Ipv4Interface::AddAddress(ns3::Ipv4InterfaceAddress address) [member function]
>     cls.add_method('AddAddress', 
>                    'bool', 
>                    [param('ns3::Ipv4InterfaceAddress', 'address')])
>     ## ipv4-interface.h (module 'internet'): ns3::Ipv4InterfaceAddress ns3::Ipv4Interface::GetAddress(uint32_t index) const [member function]
>     cls.add_method('GetAddress', 
>                    'ns3::Ipv4InterfaceAddress', 
>                    [param('uint32_t', 'index')], 
14892,14895c13264,13268
<     ## ipv4-interface.h (module 'internet'): void ns3::Ipv4Interface::SetMetric(uint16_t metric) [member function]
<     cls.add_method('SetMetric', 
<                    'void', 
<                    [param('uint16_t', 'metric')])
---
>     ## ipv4-interface.h (module 'internet'): ns3::Ptr<ns3::NetDevice> ns3::Ipv4Interface::GetDevice() const [member function]
>     cls.add_method('GetDevice', 
>                    'ns3::Ptr< ns3::NetDevice >', 
>                    [], 
>                    is_const=True)
14901,14903c13274,13276
<     ## ipv4-interface.h (module 'internet'): bool ns3::Ipv4Interface::IsUp() const [member function]
<     cls.add_method('IsUp', 
<                    'bool', 
---
>     ## ipv4-interface.h (module 'internet'): uint32_t ns3::Ipv4Interface::GetNAddresses() const [member function]
>     cls.add_method('GetNAddresses', 
>                    'uint32_t', 
14905a13279,13283
>     ## ipv4-interface.h (module 'internet'): static ns3::TypeId ns3::Ipv4Interface::GetTypeId() [member function]
>     cls.add_method('GetTypeId', 
>                    'ns3::TypeId', 
>                    [], 
>                    is_static=True)
14911,14918d13288
<     ## ipv4-interface.h (module 'internet'): void ns3::Ipv4Interface::SetUp() [member function]
<     cls.add_method('SetUp', 
<                    'void', 
<                    [])
<     ## ipv4-interface.h (module 'internet'): void ns3::Ipv4Interface::SetDown() [member function]
<     cls.add_method('SetDown', 
<                    'void', 
<                    [])
14924,14933c13294,13295
<     ## ipv4-interface.h (module 'internet'): void ns3::Ipv4Interface::SetForwarding(bool val) [member function]
<     cls.add_method('SetForwarding', 
<                    'void', 
<                    [param('bool', 'val')])
<     ## ipv4-interface.h (module 'internet'): void ns3::Ipv4Interface::Send(ns3::Ptr<ns3::Packet> p, ns3::Ipv4Header const & hdr, ns3::Ipv4Address dest) [member function]
<     cls.add_method('Send', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Packet >', 'p'), param('ns3::Ipv4Header const &', 'hdr'), param('ns3::Ipv4Address', 'dest')])
<     ## ipv4-interface.h (module 'internet'): bool ns3::Ipv4Interface::AddAddress(ns3::Ipv4InterfaceAddress address) [member function]
<     cls.add_method('AddAddress', 
---
>     ## ipv4-interface.h (module 'internet'): bool ns3::Ipv4Interface::IsUp() const [member function]
>     cls.add_method('IsUp', 
14935,14943d13296
<                    [param('ns3::Ipv4InterfaceAddress', 'address')])
<     ## ipv4-interface.h (module 'internet'): ns3::Ipv4InterfaceAddress ns3::Ipv4Interface::GetAddress(uint32_t index) const [member function]
<     cls.add_method('GetAddress', 
<                    'ns3::Ipv4InterfaceAddress', 
<                    [param('uint32_t', 'index')], 
<                    is_const=True)
<     ## ipv4-interface.h (module 'internet'): uint32_t ns3::Ipv4Interface::GetNAddresses() const [member function]
<     cls.add_method('GetNAddresses', 
<                    'uint32_t', 
14953a13307,13342
>     ## ipv4-interface.h (module 'internet'): void ns3::Ipv4Interface::Send(ns3::Ptr<ns3::Packet> p, ns3::Ipv4Header const & hdr, ns3::Ipv4Address dest) [member function]
>     cls.add_method('Send', 
>                    'void', 
>                    [param('ns3::Ptr< ns3::Packet >', 'p'), param('ns3::Ipv4Header const &', 'hdr'), param('ns3::Ipv4Address', 'dest')])
>     ## ipv4-interface.h (module 'internet'): void ns3::Ipv4Interface::SetArpCache(ns3::Ptr<ns3::ArpCache> arpCache) [member function]
>     cls.add_method('SetArpCache', 
>                    'void', 
>                    [param('ns3::Ptr< ns3::ArpCache >', 'arpCache')])
>     ## ipv4-interface.h (module 'internet'): void ns3::Ipv4Interface::SetDevice(ns3::Ptr<ns3::NetDevice> device) [member function]
>     cls.add_method('SetDevice', 
>                    'void', 
>                    [param('ns3::Ptr< ns3::NetDevice >', 'device')])
>     ## ipv4-interface.h (module 'internet'): void ns3::Ipv4Interface::SetDown() [member function]
>     cls.add_method('SetDown', 
>                    'void', 
>                    [])
>     ## ipv4-interface.h (module 'internet'): void ns3::Ipv4Interface::SetForwarding(bool val) [member function]
>     cls.add_method('SetForwarding', 
>                    'void', 
>                    [param('bool', 'val')])
>     ## ipv4-interface.h (module 'internet'): void ns3::Ipv4Interface::SetMetric(uint16_t metric) [member function]
>     cls.add_method('SetMetric', 
>                    'void', 
>                    [param('uint16_t', 'metric')])
>     ## ipv4-interface.h (module 'internet'): void ns3::Ipv4Interface::SetNode(ns3::Ptr<ns3::Node> node) [member function]
>     cls.add_method('SetNode', 
>                    'void', 
>                    [param('ns3::Ptr< ns3::Node >', 'node')])
>     ## ipv4-interface.h (module 'internet'): void ns3::Ipv4Interface::SetTrafficControl(ns3::Ptr<ns3::TrafficControlLayer> tc) [member function]
>     cls.add_method('SetTrafficControl', 
>                    'void', 
>                    [param('ns3::Ptr< ns3::TrafficControlLayer >', 'tc')])
>     ## ipv4-interface.h (module 'internet'): void ns3::Ipv4Interface::SetUp() [member function]
>     cls.add_method('SetUp', 
>                    'void', 
>                    [])
14958c13347
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
15084c13473
<     ## ipv4-l3-protocol.h (module 'internet'): void ns3::Ipv4L3Protocol::Receive(ns3::Ptr<ns3::NetDevice> device, ns3::Ptr<const ns3::Packet> p, uint16_t protocol, ns3::Address const & from, ns3::Address const & to, ns3::NetDevice::PacketType packetType) [member function]
---
>     ## ipv4-l3-protocol.h (module 'internet'): void ns3::Ipv4L3Protocol::Receive(ns3::Ptr<ns3::NetDevice> device, ns3::Ptr<ns3::Packet const> p, uint16_t protocol, ns3::Address const & from, ns3::Address const & to, ns3::NetDevice::PacketType packetType) [member function]
15167c13556
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
15172c13561
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
15177c13566
<                    is_const=True, is_virtual=True, visibility='private')
---
>                    is_const=True, visibility='private', is_virtual=True)
15182c13571
<                    is_const=True, is_virtual=True, visibility='private')
---
>                    is_const=True, visibility='private', is_virtual=True)
15187c13576
<                    is_virtual=True, visibility='private')
---
>                    visibility='private', is_virtual=True)
15192c13581
<                    is_virtual=True, visibility='private')
---
>                    visibility='private', is_virtual=True)
15198c13587
<     ## ipv4-address.h (module 'network'): ns3::Ipv4MaskChecker::Ipv4MaskChecker(ns3::Ipv4MaskChecker const & arg0) [constructor]
---
>     ## ipv4-address.h (module 'network'): ns3::Ipv4MaskChecker::Ipv4MaskChecker(ns3::Ipv4MaskChecker const & arg0) [copy constructor]
15204a13594,13595
>     ## ipv4-address.h (module 'network'): ns3::Ipv4MaskValue::Ipv4MaskValue(ns3::Ipv4MaskValue const & arg0) [copy constructor]
>     cls.add_constructor([param('ns3::Ipv4MaskValue const &', 'arg0')])
15207,15208d13597
<     ## ipv4-address.h (module 'network'): ns3::Ipv4MaskValue::Ipv4MaskValue(ns3::Ipv4MaskValue const & arg0) [constructor]
<     cls.add_constructor([param('ns3::Ipv4MaskValue const &', 'arg0')])
15214c13603
<     ## ipv4-address.h (module 'network'): bool ns3::Ipv4MaskValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
---
>     ## ipv4-address.h (module 'network'): bool ns3::Ipv4MaskValue::DeserializeFromString(std::string value, ns3::Ptr<ns3::AttributeChecker const> checker) [member function]
15224c13613
<     ## ipv4-address.h (module 'network'): std::string ns3::Ipv4MaskValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
---
>     ## ipv4-address.h (module 'network'): std::string ns3::Ipv4MaskValue::SerializeToString(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
15236c13625
<     ## ipv4-route.h (module 'internet'): ns3::Ipv4MulticastRoute::Ipv4MulticastRoute(ns3::Ipv4MulticastRoute const & arg0) [constructor]
---
>     ## ipv4-route.h (module 'internet'): ns3::Ipv4MulticastRoute::Ipv4MulticastRoute(ns3::Ipv4MulticastRoute const & arg0) [copy constructor]
15250c13639
<     ## ipv4-route.h (module 'internet'): std::map<unsigned int, unsigned int, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, unsigned int> > > ns3::Ipv4MulticastRoute::GetOutputTtlMap() const [member function]
---
>     ## ipv4-route.h (module 'internet'): std::map<unsigned int, unsigned int, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > ns3::Ipv4MulticastRoute::GetOutputTtlMap() const [member function]
15283c13672
<     ## ipv4-packet-filter.h (module 'internet'): ns3::Ipv4PacketFilter::Ipv4PacketFilter(ns3::Ipv4PacketFilter const & arg0) [constructor]
---
>     ## ipv4-packet-filter.h (module 'internet'): ns3::Ipv4PacketFilter::Ipv4PacketFilter(ns3::Ipv4PacketFilter const & arg0) [copy constructor]
15296c13685
<                    is_const=True, is_virtual=True, visibility='private')
---
>                    is_const=True, visibility='private', is_virtual=True)
15301c13690
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
15307c13696
<     ## ipv4-raw-socket-factory.h (module 'internet'): ns3::Ipv4RawSocketFactory::Ipv4RawSocketFactory(ns3::Ipv4RawSocketFactory const & arg0) [constructor]
---
>     ## ipv4-raw-socket-factory.h (module 'internet'): ns3::Ipv4RawSocketFactory::Ipv4RawSocketFactory(ns3::Ipv4RawSocketFactory const & arg0) [copy constructor]
15317c13706
<     ## ipv4-raw-socket-impl.h (module 'internet'): ns3::Ipv4RawSocketImpl::Ipv4RawSocketImpl(ns3::Ipv4RawSocketImpl const & arg0) [constructor]
---
>     ## ipv4-raw-socket-impl.h (module 'internet'): ns3::Ipv4RawSocketImpl::Ipv4RawSocketImpl(ns3::Ipv4RawSocketImpl const & arg0) [copy constructor]
15346c13735
<     ## ipv4-raw-socket-impl.h (module 'internet'): bool ns3::Ipv4RawSocketImpl::ForwardUp(ns3::Ptr<const ns3::Packet> p, ns3::Ipv4Header ipHeader, ns3::Ptr<ns3::Ipv4Interface> incomingInterface) [member function]
---
>     ## ipv4-raw-socket-impl.h (module 'internet'): bool ns3::Ipv4RawSocketImpl::ForwardUp(ns3::Ptr<ns3::Packet const> p, ns3::Ipv4Header ipHeader, ns3::Ptr<ns3::Ipv4Interface> incomingInterface) [member function]
15447c13836
<                    is_virtual=True, visibility='private')
---
>                    visibility='private', is_virtual=True)
15452c13841
<     ## ipv4-route.h (module 'internet'): ns3::Ipv4Route::Ipv4Route(ns3::Ipv4Route const & arg0) [constructor]
---
>     ## ipv4-route.h (module 'internet'): ns3::Ipv4Route::Ipv4Route(ns3::Ipv4Route const & arg0) [copy constructor]
15497c13886
<     ## ipv4-routing-protocol.h (module 'internet'): ns3::Ipv4RoutingProtocol::Ipv4RoutingProtocol(ns3::Ipv4RoutingProtocol const & arg0) [constructor]
---
>     ## ipv4-routing-protocol.h (module 'internet'): ns3::Ipv4RoutingProtocol::Ipv4RoutingProtocol(ns3::Ipv4RoutingProtocol const & arg0) [copy constructor]
15508c13897
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15513c13902
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15518c13907
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15523,15524c13912,13913
<                    is_virtual=True, is_pure_virtual=True)
<     ## ipv4-routing-protocol.h (module 'internet'): void ns3::Ipv4RoutingProtocol::PrintRoutingTable(ns3::Ptr<ns3::OutputStreamWrapper> stream, ns3::Time::Unit unit=::ns3::Time::Unit::S) const [member function]
---
>                    is_pure_virtual=True, is_virtual=True)
>     ## ipv4-routing-protocol.h (module 'internet'): void ns3::Ipv4RoutingProtocol::PrintRoutingTable(ns3::Ptr<ns3::OutputStreamWrapper> stream) const [member function]
15527,15529c13916,13918
<                    [param('ns3::Ptr< ns3::OutputStreamWrapper >', 'stream'), param('ns3::Time::Unit', 'unit', default_value='::ns3::Time::Unit::S')], 
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
<     ## ipv4-routing-protocol.h (module 'internet'): bool ns3::Ipv4RoutingProtocol::RouteInput(ns3::Ptr<const ns3::Packet> p, ns3::Ipv4Header const & header, ns3::Ptr<const ns3::NetDevice> idev, ns3::Ipv4RoutingProtocol::UnicastForwardCallback ucb, ns3::Ipv4RoutingProtocol::MulticastForwardCallback mcb, ns3::Ipv4RoutingProtocol::LocalDeliverCallback lcb, ns3::Ipv4RoutingProtocol::ErrorCallback ecb) [member function]
---
>                    [param('ns3::Ptr< ns3::OutputStreamWrapper >', 'stream')], 
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
>     ## ipv4-routing-protocol.h (module 'internet'): bool ns3::Ipv4RoutingProtocol::RouteInput(ns3::Ptr<ns3::Packet const> p, ns3::Ipv4Header const & header, ns3::Ptr<const ns3::NetDevice> idev, ns3::Callback<void,ns3::Ptr<ns3::Ipv4Route>,ns3::Ptr<const ns3::Packet>,const ns3::Ipv4Header&,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> ucb, ns3::Callback<void,ns3::Ptr<ns3::Ipv4MulticastRoute>,ns3::Ptr<const ns3::Packet>,const ns3::Ipv4Header&,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> mcb, ns3::Callback<void,ns3::Ptr<const ns3::Packet>,const ns3::Ipv4Header&,unsigned int,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> lcb, ns3::Callback<void,ns3::Ptr<const ns3::Packet>,const ns3::Ipv4Header&,ns3::Socket::SocketErrno,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> ecb) [member function]
15533c13922
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15538c13927
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15543c13932
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15547c13936
<     ## ipv4-static-routing.h (module 'internet'): ns3::Ipv4StaticRouting::Ipv4StaticRouting(ns3::Ipv4StaticRouting const & arg0) [constructor]
---
>     ## ipv4-static-routing.h (module 'internet'): ns3::Ipv4StaticRouting::Ipv4StaticRouting(ns3::Ipv4StaticRouting const & arg0) [copy constructor]
15625c14014
<     ## ipv4-static-routing.h (module 'internet'): void ns3::Ipv4StaticRouting::PrintRoutingTable(ns3::Ptr<ns3::OutputStreamWrapper> stream, ns3::Time::Unit unit=::ns3::Time::Unit::S) const [member function]
---
>     ## ipv4-static-routing.h (module 'internet'): void ns3::Ipv4StaticRouting::PrintRoutingTable(ns3::Ptr<ns3::OutputStreamWrapper> stream) const [member function]
15628c14017
<                    [param('ns3::Ptr< ns3::OutputStreamWrapper >', 'stream'), param('ns3::Time::Unit', 'unit', default_value='::ns3::Time::Unit::S')], 
---
>                    [param('ns3::Ptr< ns3::OutputStreamWrapper >', 'stream')], 
15642c14031
<     ## ipv4-static-routing.h (module 'internet'): bool ns3::Ipv4StaticRouting::RouteInput(ns3::Ptr<const ns3::Packet> p, ns3::Ipv4Header const & header, ns3::Ptr<const ns3::NetDevice> idev, ns3::Ipv4RoutingProtocol::UnicastForwardCallback ucb, ns3::Ipv4RoutingProtocol::MulticastForwardCallback mcb, ns3::Ipv4RoutingProtocol::LocalDeliverCallback lcb, ns3::Ipv4RoutingProtocol::ErrorCallback ecb) [member function]
---
>     ## ipv4-static-routing.h (module 'internet'): bool ns3::Ipv4StaticRouting::RouteInput(ns3::Ptr<ns3::Packet const> p, ns3::Ipv4Header const & header, ns3::Ptr<const ns3::NetDevice> idev, ns3::Callback<void,ns3::Ptr<ns3::Ipv4Route>,ns3::Ptr<const ns3::Packet>,const ns3::Ipv4Header&,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> ucb, ns3::Callback<void,ns3::Ptr<ns3::Ipv4MulticastRoute>,ns3::Ptr<const ns3::Packet>,const ns3::Ipv4Header&,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> mcb, ns3::Callback<void,ns3::Ptr<const ns3::Packet>,const ns3::Ipv4Header&,unsigned int,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> lcb, ns3::Callback<void,ns3::Ptr<const ns3::Packet>,const ns3::Ipv4Header&,ns3::Socket::SocketErrno,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> ecb) [member function]
15669c14058
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
15673c14062
<     ## ipv6.h (module 'internet'): ns3::Ipv6::Ipv6(ns3::Ipv6 const & arg0) [constructor]
---
>     ## ipv6.h (module 'internet'): ns3::Ipv6::Ipv6(ns3::Ipv6 const & arg0) [copy constructor]
15681c14070
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15686c14075
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15691c14080
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
15696c14085
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
15701c14090
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
15706c14095
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
15711c14100
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
15716c14105
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
15721c14110
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
15726c14115
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
15731c14120
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15736c14125
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
15741c14130
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
15746c14135
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
15756c14145
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15761c14150
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15766c14155
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
15771c14160
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
15776c14165
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15781c14170
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15786c14175
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15791c14180
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15796c14185
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15801c14190
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15806c14195
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15811c14200
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15816c14205
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15821c14210
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15826c14215
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15831c14220
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15836c14225
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15841c14230
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15848c14237
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
15853c14242
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
15858c14247
<                    is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
15863c14252
<                    is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
15869c14258
<     ## ipv6-address.h (module 'network'): ns3::Ipv6AddressChecker::Ipv6AddressChecker(ns3::Ipv6AddressChecker const & arg0) [constructor]
---
>     ## ipv6-address.h (module 'network'): ns3::Ipv6AddressChecker::Ipv6AddressChecker(ns3::Ipv6AddressChecker const & arg0) [copy constructor]
15875a14265,14266
>     ## ipv6-address.h (module 'network'): ns3::Ipv6AddressValue::Ipv6AddressValue(ns3::Ipv6AddressValue const & arg0) [copy constructor]
>     cls.add_constructor([param('ns3::Ipv6AddressValue const &', 'arg0')])
15878,15879d14268
<     ## ipv6-address.h (module 'network'): ns3::Ipv6AddressValue::Ipv6AddressValue(ns3::Ipv6AddressValue const & arg0) [constructor]
<     cls.add_constructor([param('ns3::Ipv6AddressValue const &', 'arg0')])
15885c14274
<     ## ipv6-address.h (module 'network'): bool ns3::Ipv6AddressValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
---
>     ## ipv6-address.h (module 'network'): bool ns3::Ipv6AddressValue::DeserializeFromString(std::string value, ns3::Ptr<ns3::AttributeChecker const> checker) [member function]
15895c14284
<     ## ipv6-address.h (module 'network'): std::string ns3::Ipv6AddressValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
---
>     ## ipv6-address.h (module 'network'): std::string ns3::Ipv6AddressValue::SerializeToString(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
15907c14296
<     ## ipv6-extension.h (module 'internet'): ns3::Ipv6Extension::Ipv6Extension(ns3::Ipv6Extension const & arg0) [constructor]
---
>     ## ipv6-extension.h (module 'internet'): ns3::Ipv6Extension::Ipv6Extension(ns3::Ipv6Extension const & arg0) [copy constructor]
15919c14308
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
15934c14323
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15947c14336
<     ## ipv6-extension.h (module 'internet'): ns3::Ipv6ExtensionAH::Ipv6ExtensionAH(ns3::Ipv6ExtensionAH const & arg0) [constructor]
---
>     ## ipv6-extension.h (module 'internet'): ns3::Ipv6ExtensionAH::Ipv6ExtensionAH(ns3::Ipv6ExtensionAH const & arg0) [copy constructor]
15971c14360
<     ## ipv6-extension-header.h (module 'internet'): ns3::Ipv6ExtensionAHHeader::Ipv6ExtensionAHHeader(ns3::Ipv6ExtensionAHHeader const & arg0) [constructor]
---
>     ## ipv6-extension-header.h (module 'internet'): ns3::Ipv6ExtensionAHHeader::Ipv6ExtensionAHHeader(ns3::Ipv6ExtensionAHHeader const & arg0) [copy constructor]
16008c14397
<     ## ipv6-extension-demux.h (module 'internet'): ns3::Ipv6ExtensionDemux::Ipv6ExtensionDemux(ns3::Ipv6ExtensionDemux const & arg0) [constructor]
---
>     ## ipv6-extension-demux.h (module 'internet'): ns3::Ipv6ExtensionDemux::Ipv6ExtensionDemux(ns3::Ipv6ExtensionDemux const & arg0) [copy constructor]
16037c14426
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
16041c14430
<     ## ipv6-extension.h (module 'internet'): ns3::Ipv6ExtensionDestination::Ipv6ExtensionDestination(ns3::Ipv6ExtensionDestination const & arg0) [constructor]
---
>     ## ipv6-extension.h (module 'internet'): ns3::Ipv6ExtensionDestination::Ipv6ExtensionDestination(ns3::Ipv6ExtensionDestination const & arg0) [copy constructor]
16065c14454
<     ## ipv6-extension-header.h (module 'internet'): ns3::Ipv6ExtensionDestinationHeader::Ipv6ExtensionDestinationHeader(ns3::Ipv6ExtensionDestinationHeader const & arg0) [constructor]
---
>     ## ipv6-extension-header.h (module 'internet'): ns3::Ipv6ExtensionDestinationHeader::Ipv6ExtensionDestinationHeader(ns3::Ipv6ExtensionDestinationHeader const & arg0) [copy constructor]
16102c14491
<     ## ipv6-extension.h (module 'internet'): ns3::Ipv6ExtensionESP::Ipv6ExtensionESP(ns3::Ipv6ExtensionESP const & arg0) [constructor]
---
>     ## ipv6-extension.h (module 'internet'): ns3::Ipv6ExtensionESP::Ipv6ExtensionESP(ns3::Ipv6ExtensionESP const & arg0) [copy constructor]
16126c14515
<     ## ipv6-extension-header.h (module 'internet'): ns3::Ipv6ExtensionESPHeader::Ipv6ExtensionESPHeader(ns3::Ipv6ExtensionESPHeader const & arg0) [constructor]
---
>     ## ipv6-extension-header.h (module 'internet'): ns3::Ipv6ExtensionESPHeader::Ipv6ExtensionESPHeader(ns3::Ipv6ExtensionESPHeader const & arg0) [copy constructor]
16163c14552
<     ## ipv6-extension.h (module 'internet'): ns3::Ipv6ExtensionFragment::Ipv6ExtensionFragment(ns3::Ipv6ExtensionFragment const & arg0) [constructor]
---
>     ## ipv6-extension.h (module 'internet'): ns3::Ipv6ExtensionFragment::Ipv6ExtensionFragment(ns3::Ipv6ExtensionFragment const & arg0) [copy constructor]
16192c14581
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
16196c14585
<     ## ipv6-extension-header.h (module 'internet'): ns3::Ipv6ExtensionFragmentHeader::Ipv6ExtensionFragmentHeader(ns3::Ipv6ExtensionFragmentHeader const & arg0) [constructor]
---
>     ## ipv6-extension-header.h (module 'internet'): ns3::Ipv6ExtensionFragmentHeader::Ipv6ExtensionFragmentHeader(ns3::Ipv6ExtensionFragmentHeader const & arg0) [copy constructor]
16260c14649
<     ## ipv6-extension.h (module 'internet'): ns3::Ipv6ExtensionHopByHop::Ipv6ExtensionHopByHop(ns3::Ipv6ExtensionHopByHop const & arg0) [constructor]
---
>     ## ipv6-extension.h (module 'internet'): ns3::Ipv6ExtensionHopByHop::Ipv6ExtensionHopByHop(ns3::Ipv6ExtensionHopByHop const & arg0) [copy constructor]
16284c14673
<     ## ipv6-extension-header.h (module 'internet'): ns3::Ipv6ExtensionLooseRoutingHeader::Ipv6ExtensionLooseRoutingHeader(ns3::Ipv6ExtensionLooseRoutingHeader const & arg0) [constructor]
---
>     ## ipv6-extension-header.h (module 'internet'): ns3::Ipv6ExtensionLooseRoutingHeader::Ipv6ExtensionLooseRoutingHeader(ns3::Ipv6ExtensionLooseRoutingHeader const & arg0) [copy constructor]
16343c14732
<     ## ipv6-extension.h (module 'internet'): ns3::Ipv6ExtensionRouting::Ipv6ExtensionRouting(ns3::Ipv6ExtensionRouting const & arg0) [constructor]
---
>     ## ipv6-extension.h (module 'internet'): ns3::Ipv6ExtensionRouting::Ipv6ExtensionRouting(ns3::Ipv6ExtensionRouting const & arg0) [copy constructor]
16372c14761
<     ## ipv6-extension.h (module 'internet'): ns3::Ipv6ExtensionRoutingDemux::Ipv6ExtensionRoutingDemux(ns3::Ipv6ExtensionRoutingDemux const & arg0) [constructor]
---
>     ## ipv6-extension.h (module 'internet'): ns3::Ipv6ExtensionRoutingDemux::Ipv6ExtensionRoutingDemux(ns3::Ipv6ExtensionRoutingDemux const & arg0) [copy constructor]
16401c14790
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
16405,16409c14794,14795
<     ## ipv6-interface.h (module 'internet'): static ns3::TypeId ns3::Ipv6Interface::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
---
>     ## ipv6-interface.h (module 'internet'): ns3::Ipv6Interface::Ipv6Interface(ns3::Ipv6Interface const & arg0) [copy constructor]
>     cls.add_constructor([param('ns3::Ipv6Interface const &', 'arg0')])
16412,16423c14798,14820
<     ## ipv6-interface.h (module 'internet'): void ns3::Ipv6Interface::SetNode(ns3::Ptr<ns3::Node> node) [member function]
<     cls.add_method('SetNode', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Node >', 'node')])
<     ## ipv6-interface.h (module 'internet'): void ns3::Ipv6Interface::SetDevice(ns3::Ptr<ns3::NetDevice> device) [member function]
<     cls.add_method('SetDevice', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::NetDevice >', 'device')])
<     ## ipv6-interface.h (module 'internet'): void ns3::Ipv6Interface::SetTrafficControl(ns3::Ptr<ns3::TrafficControlLayer> tc) [member function]
<     cls.add_method('SetTrafficControl', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::TrafficControlLayer >', 'tc')])
---
>     ## ipv6-interface.h (module 'internet'): bool ns3::Ipv6Interface::AddAddress(ns3::Ipv6InterfaceAddress iface) [member function]
>     cls.add_method('AddAddress', 
>                    'bool', 
>                    [param('ns3::Ipv6InterfaceAddress', 'iface')])
>     ## ipv6-interface.h (module 'internet'): ns3::Ipv6InterfaceAddress ns3::Ipv6Interface::GetAddress(uint32_t index) const [member function]
>     cls.add_method('GetAddress', 
>                    'ns3::Ipv6InterfaceAddress', 
>                    [param('uint32_t', 'index')], 
>                    is_const=True)
>     ## ipv6-interface.h (module 'internet'): ns3::Ipv6InterfaceAddress ns3::Ipv6Interface::GetAddressMatchingDestination(ns3::Ipv6Address dst) [member function]
>     cls.add_method('GetAddressMatchingDestination', 
>                    'ns3::Ipv6InterfaceAddress', 
>                    [param('ns3::Ipv6Address', 'dst')])
>     ## ipv6-interface.h (module 'internet'): uint16_t ns3::Ipv6Interface::GetBaseReachableTime() const [member function]
>     cls.add_method('GetBaseReachableTime', 
>                    'uint16_t', 
>                    [], 
>                    is_const=True)
>     ## ipv6-interface.h (module 'internet'): uint8_t ns3::Ipv6Interface::GetCurHopLimit() const [member function]
>     cls.add_method('GetCurHopLimit', 
>                    'uint8_t', 
>                    [], 
>                    is_const=True)
16429,16432c14826,14830
<     ## ipv6-interface.h (module 'internet'): void ns3::Ipv6Interface::SetMetric(uint16_t metric) [member function]
<     cls.add_method('SetMetric', 
<                    'void', 
<                    [param('uint16_t', 'metric')])
---
>     ## ipv6-interface.h (module 'internet'): ns3::Ipv6InterfaceAddress ns3::Ipv6Interface::GetLinkLocalAddress() const [member function]
>     cls.add_method('GetLinkLocalAddress', 
>                    'ns3::Ipv6InterfaceAddress', 
>                    [], 
>                    is_const=True)
16438,16471c14836,14838
<     ## ipv6-interface.h (module 'internet'): bool ns3::Ipv6Interface::IsUp() const [member function]
<     cls.add_method('IsUp', 
<                    'bool', 
<                    [], 
<                    is_const=True)
<     ## ipv6-interface.h (module 'internet'): bool ns3::Ipv6Interface::IsDown() const [member function]
<     cls.add_method('IsDown', 
<                    'bool', 
<                    [], 
<                    is_const=True)
<     ## ipv6-interface.h (module 'internet'): void ns3::Ipv6Interface::SetUp() [member function]
<     cls.add_method('SetUp', 
<                    'void', 
<                    [])
<     ## ipv6-interface.h (module 'internet'): void ns3::Ipv6Interface::SetDown() [member function]
<     cls.add_method('SetDown', 
<                    'void', 
<                    [])
<     ## ipv6-interface.h (module 'internet'): bool ns3::Ipv6Interface::IsForwarding() const [member function]
<     cls.add_method('IsForwarding', 
<                    'bool', 
<                    [], 
<                    is_const=True)
<     ## ipv6-interface.h (module 'internet'): void ns3::Ipv6Interface::SetForwarding(bool forward) [member function]
<     cls.add_method('SetForwarding', 
<                    'void', 
<                    [param('bool', 'forward')])
<     ## ipv6-interface.h (module 'internet'): void ns3::Ipv6Interface::SetCurHopLimit(uint8_t curHopLimit) [member function]
<     cls.add_method('SetCurHopLimit', 
<                    'void', 
<                    [param('uint8_t', 'curHopLimit')])
<     ## ipv6-interface.h (module 'internet'): uint8_t ns3::Ipv6Interface::GetCurHopLimit() const [member function]
<     cls.add_method('GetCurHopLimit', 
<                    'uint8_t', 
---
>     ## ipv6-interface.h (module 'internet'): uint32_t ns3::Ipv6Interface::GetNAddresses() const [member function]
>     cls.add_method('GetNAddresses', 
>                    'uint32_t', 
16474,16480c14841,14843
<     ## ipv6-interface.h (module 'internet'): void ns3::Ipv6Interface::SetBaseReachableTime(uint16_t baseReachableTime) [member function]
<     cls.add_method('SetBaseReachableTime', 
<                    'void', 
<                    [param('uint16_t', 'baseReachableTime')])
<     ## ipv6-interface.h (module 'internet'): uint16_t ns3::Ipv6Interface::GetBaseReachableTime() const [member function]
<     cls.add_method('GetBaseReachableTime', 
<                    'uint16_t', 
---
>     ## ipv6-interface.h (module 'internet'): ns3::Ptr<ns3::NdiscCache> ns3::Ipv6Interface::GetNdiscCache() const [member function]
>     cls.add_method('GetNdiscCache', 
>                    'ns3::Ptr< ns3::NdiscCache >', 
16483,16486d14845
<     ## ipv6-interface.h (module 'internet'): void ns3::Ipv6Interface::SetReachableTime(uint16_t reachableTime) [member function]
<     cls.add_method('SetReachableTime', 
<                    'void', 
<                    [param('uint16_t', 'reachableTime')])
16492,16495d14850
<     ## ipv6-interface.h (module 'internet'): void ns3::Ipv6Interface::SetRetransTimer(uint16_t retransTimer) [member function]
<     cls.add_method('SetRetransTimer', 
<                    'void', 
<                    [param('uint16_t', 'retransTimer')])
16501,16506c14856,14867
<     ## ipv6-interface.h (module 'internet'): void ns3::Ipv6Interface::Send(ns3::Ptr<ns3::Packet> p, ns3::Ipv6Header const & hdr, ns3::Ipv6Address dest) [member function]
<     cls.add_method('Send', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Packet >', 'p'), param('ns3::Ipv6Header const &', 'hdr'), param('ns3::Ipv6Address', 'dest')])
<     ## ipv6-interface.h (module 'internet'): bool ns3::Ipv6Interface::AddAddress(ns3::Ipv6InterfaceAddress iface) [member function]
<     cls.add_method('AddAddress', 
---
>     ## ipv6-interface.h (module 'internet'): static ns3::TypeId ns3::Ipv6Interface::GetTypeId() [member function]
>     cls.add_method('GetTypeId', 
>                    'ns3::TypeId', 
>                    [], 
>                    is_static=True)
>     ## ipv6-interface.h (module 'internet'): bool ns3::Ipv6Interface::IsDown() const [member function]
>     cls.add_method('IsDown', 
>                    'bool', 
>                    [], 
>                    is_const=True)
>     ## ipv6-interface.h (module 'internet'): bool ns3::Ipv6Interface::IsForwarding() const [member function]
>     cls.add_method('IsForwarding', 
16508,16511d14868
<                    [param('ns3::Ipv6InterfaceAddress', 'iface')])
<     ## ipv6-interface.h (module 'internet'): ns3::Ipv6InterfaceAddress ns3::Ipv6Interface::GetLinkLocalAddress() const [member function]
<     cls.add_method('GetLinkLocalAddress', 
<                    'ns3::Ipv6InterfaceAddress', 
16519,16530c14876,14878
<     ## ipv6-interface.h (module 'internet'): ns3::Ipv6InterfaceAddress ns3::Ipv6Interface::GetAddress(uint32_t index) const [member function]
<     cls.add_method('GetAddress', 
<                    'ns3::Ipv6InterfaceAddress', 
<                    [param('uint32_t', 'index')], 
<                    is_const=True)
<     ## ipv6-interface.h (module 'internet'): ns3::Ipv6InterfaceAddress ns3::Ipv6Interface::GetAddressMatchingDestination(ns3::Ipv6Address dst) [member function]
<     cls.add_method('GetAddressMatchingDestination', 
<                    'ns3::Ipv6InterfaceAddress', 
<                    [param('ns3::Ipv6Address', 'dst')])
<     ## ipv6-interface.h (module 'internet'): uint32_t ns3::Ipv6Interface::GetNAddresses() const [member function]
<     cls.add_method('GetNAddresses', 
<                    'uint32_t', 
---
>     ## ipv6-interface.h (module 'internet'): bool ns3::Ipv6Interface::IsUp() const [member function]
>     cls.add_method('IsUp', 
>                    'bool', 
16541,16542c14889,14890
<     ## ipv6-interface.h (module 'internet'): void ns3::Ipv6Interface::SetState(ns3::Ipv6Address address, ns3::Ipv6InterfaceAddress::State_e state) [member function]
<     cls.add_method('SetState', 
---
>     ## ipv6-interface.h (module 'internet'): void ns3::Ipv6Interface::Send(ns3::Ptr<ns3::Packet> p, ns3::Ipv6Header const & hdr, ns3::Ipv6Address dest) [member function]
>     cls.add_method('Send', 
16544c14892,14920
<                    [param('ns3::Ipv6Address', 'address'), param('ns3::Ipv6InterfaceAddress::State_e', 'state')])
---
>                    [param('ns3::Ptr< ns3::Packet >', 'p'), param('ns3::Ipv6Header const &', 'hdr'), param('ns3::Ipv6Address', 'dest')])
>     ## ipv6-interface.h (module 'internet'): void ns3::Ipv6Interface::SetBaseReachableTime(uint16_t baseReachableTime) [member function]
>     cls.add_method('SetBaseReachableTime', 
>                    'void', 
>                    [param('uint16_t', 'baseReachableTime')])
>     ## ipv6-interface.h (module 'internet'): void ns3::Ipv6Interface::SetCurHopLimit(uint8_t curHopLimit) [member function]
>     cls.add_method('SetCurHopLimit', 
>                    'void', 
>                    [param('uint8_t', 'curHopLimit')])
>     ## ipv6-interface.h (module 'internet'): void ns3::Ipv6Interface::SetDevice(ns3::Ptr<ns3::NetDevice> device) [member function]
>     cls.add_method('SetDevice', 
>                    'void', 
>                    [param('ns3::Ptr< ns3::NetDevice >', 'device')])
>     ## ipv6-interface.h (module 'internet'): void ns3::Ipv6Interface::SetDown() [member function]
>     cls.add_method('SetDown', 
>                    'void', 
>                    [])
>     ## ipv6-interface.h (module 'internet'): void ns3::Ipv6Interface::SetForwarding(bool forward) [member function]
>     cls.add_method('SetForwarding', 
>                    'void', 
>                    [param('bool', 'forward')])
>     ## ipv6-interface.h (module 'internet'): void ns3::Ipv6Interface::SetMetric(uint16_t metric) [member function]
>     cls.add_method('SetMetric', 
>                    'void', 
>                    [param('uint16_t', 'metric')])
>     ## ipv6-interface.h (module 'internet'): void ns3::Ipv6Interface::SetNode(ns3::Ptr<ns3::Node> node) [member function]
>     cls.add_method('SetNode', 
>                    'void', 
>                    [param('ns3::Ptr< ns3::Node >', 'node')])
16549,16553c14925,14944
<     ## ipv6-interface.h (module 'internet'): ns3::Ptr<ns3::NdiscCache> ns3::Ipv6Interface::GetNdiscCache() const [member function]
<     cls.add_method('GetNdiscCache', 
<                    'ns3::Ptr< ns3::NdiscCache >', 
<                    [], 
<                    is_const=True)
---
>     ## ipv6-interface.h (module 'internet'): void ns3::Ipv6Interface::SetReachableTime(uint16_t reachableTime) [member function]
>     cls.add_method('SetReachableTime', 
>                    'void', 
>                    [param('uint16_t', 'reachableTime')])
>     ## ipv6-interface.h (module 'internet'): void ns3::Ipv6Interface::SetRetransTimer(uint16_t retransTimer) [member function]
>     cls.add_method('SetRetransTimer', 
>                    'void', 
>                    [param('uint16_t', 'retransTimer')])
>     ## ipv6-interface.h (module 'internet'): void ns3::Ipv6Interface::SetState(ns3::Ipv6Address address, ns3::Ipv6InterfaceAddress::State_e state) [member function]
>     cls.add_method('SetState', 
>                    'void', 
>                    [param('ns3::Ipv6Address', 'address'), param('ns3::Ipv6InterfaceAddress::State_e', 'state')])
>     ## ipv6-interface.h (module 'internet'): void ns3::Ipv6Interface::SetTrafficControl(ns3::Ptr<ns3::TrafficControlLayer> tc) [member function]
>     cls.add_method('SetTrafficControl', 
>                    'void', 
>                    [param('ns3::Ptr< ns3::TrafficControlLayer >', 'tc')])
>     ## ipv6-interface.h (module 'internet'): void ns3::Ipv6Interface::SetUp() [member function]
>     cls.add_method('SetUp', 
>                    'void', 
>                    [])
16558c14949
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
16561a14953,14954
>     ## ipv6-l3-protocol.h (module 'internet'): ns3::Ipv6L3Protocol::PROT_NUMBER [variable]
>     cls.add_static_attribute('PROT_NUMBER', 'uint16_t const', is_const=True)
16567,16568d14959
<     ## ipv6-l3-protocol.h (module 'internet'): ns3::Ipv6L3Protocol::PROT_NUMBER [variable]
<     cls.add_static_attribute('PROT_NUMBER', 'uint16_t const', is_const=True)
16621c15012
<     ## ipv6-l3-protocol.h (module 'internet'): void ns3::Ipv6L3Protocol::Receive(ns3::Ptr<ns3::NetDevice> device, ns3::Ptr<const ns3::Packet> p, uint16_t protocol, ns3::Address const & from, ns3::Address const & to, ns3::NetDevice::PacketType packetType) [member function]
---
>     ## ipv6-l3-protocol.h (module 'internet'): void ns3::Ipv6L3Protocol::Receive(ns3::Ptr<ns3::NetDevice> device, ns3::Ptr<ns3::Packet const> p, uint16_t protocol, ns3::Address const & from, ns3::Address const & to, ns3::NetDevice::PacketType packetType) [member function]
16755c15146
<     ## ipv6-l3-protocol.h (module 'internet'): void ns3::Ipv6L3Protocol::AddAutoconfiguredAddress(uint32_t interface, ns3::Ipv6Address network, ns3::Ipv6Prefix mask, uint8_t flags, uint32_t validTime, uint32_t preferredTime, ns3::Ipv6Address defaultRouter=ns3::Ipv6Address::GetZero()) [member function]
---
>     ## ipv6-l3-protocol.h (module 'internet'): void ns3::Ipv6L3Protocol::AddAutoconfiguredAddress(uint32_t interface, ns3::Ipv6Address network, ns3::Ipv6Prefix mask, uint8_t flags, uint32_t validTime, uint32_t preferredTime, ns3::Ipv6Address defaultRouter=ns3::Ipv6Address::GetZero( )) [member function]
16758c15149
<                    [param('uint32_t', 'interface'), param('ns3::Ipv6Address', 'network'), param('ns3::Ipv6Prefix', 'mask'), param('uint8_t', 'flags'), param('uint32_t', 'validTime'), param('uint32_t', 'preferredTime'), param('ns3::Ipv6Address', 'defaultRouter', default_value='ns3::Ipv6Address::GetZero()')])
---
>                    [param('uint32_t', 'interface'), param('ns3::Ipv6Address', 'network'), param('ns3::Ipv6Prefix', 'mask'), param('uint8_t', 'flags'), param('uint32_t', 'validTime'), param('uint32_t', 'preferredTime'), param('ns3::Ipv6Address', 'defaultRouter', default_value='ns3::Ipv6Address::GetZero( )')])
16808c15199
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
16813c15204
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
16818c15209
<                    is_virtual=True, visibility='private')
---
>                    visibility='private', is_virtual=True)
16823c15214
<                    is_const=True, is_virtual=True, visibility='private')
---
>                    is_const=True, visibility='private', is_virtual=True)
16828c15219
<                    is_virtual=True, visibility='private')
---
>                    visibility='private', is_virtual=True)
16833c15224
<                    is_const=True, is_virtual=True, visibility='private')
---
>                    is_const=True, visibility='private', is_virtual=True)
16838c15229
<                    is_virtual=True, visibility='private')
---
>                    visibility='private', is_virtual=True)
16843c15234
<                    is_const=True, is_virtual=True, visibility='private')
---
>                    is_const=True, visibility='private', is_virtual=True)
16848c15239
<     ## ipv6-route.h (module 'internet'): ns3::Ipv6MulticastRoute::Ipv6MulticastRoute(ns3::Ipv6MulticastRoute const & arg0) [constructor]
---
>     ## ipv6-route.h (module 'internet'): ns3::Ipv6MulticastRoute::Ipv6MulticastRoute(ns3::Ipv6MulticastRoute const & arg0) [copy constructor]
16862c15253
<     ## ipv6-route.h (module 'internet'): std::map<unsigned int, unsigned int, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, unsigned int> > > ns3::Ipv6MulticastRoute::GetOutputTtlMap() const [member function]
---
>     ## ipv6-route.h (module 'internet'): std::map<unsigned int, unsigned int, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > ns3::Ipv6MulticastRoute::GetOutputTtlMap() const [member function]
16894,17015d15284
< def register_Ns3Ipv6Option_methods(root_module, cls):
<     ## ipv6-option.h (module 'internet'): ns3::Ipv6Option::Ipv6Option() [constructor]
<     cls.add_constructor([])
<     ## ipv6-option.h (module 'internet'): ns3::Ipv6Option::Ipv6Option(ns3::Ipv6Option const & arg0) [constructor]
<     cls.add_constructor([param('ns3::Ipv6Option const &', 'arg0')])
<     ## ipv6-option.h (module 'internet'): uint8_t ns3::Ipv6Option::GetOptionNumber() const [member function]
<     cls.add_method('GetOptionNumber', 
<                    'uint8_t', 
<                    [], 
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
<     ## ipv6-option.h (module 'internet'): static ns3::TypeId ns3::Ipv6Option::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## ipv6-option.h (module 'internet'): uint8_t ns3::Ipv6Option::Process(ns3::Ptr<ns3::Packet> packet, uint8_t offset, ns3::Ipv6Header const & ipv6Header, bool & isDropped) [member function]
<     cls.add_method('Process', 
<                    'uint8_t', 
<                    [param('ns3::Ptr< ns3::Packet >', 'packet'), param('uint8_t', 'offset'), param('ns3::Ipv6Header const &', 'ipv6Header'), param('bool &', 'isDropped')], 
<                    is_virtual=True, is_pure_virtual=True)
<     ## ipv6-option.h (module 'internet'): void ns3::Ipv6Option::SetNode(ns3::Ptr<ns3::Node> node) [member function]
<     cls.add_method('SetNode', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Node >', 'node')])
<     return
< 
< def register_Ns3Ipv6OptionJumbogram_methods(root_module, cls):
<     ## ipv6-option.h (module 'internet'): ns3::Ipv6OptionJumbogram::Ipv6OptionJumbogram(ns3::Ipv6OptionJumbogram const & arg0) [constructor]
<     cls.add_constructor([param('ns3::Ipv6OptionJumbogram const &', 'arg0')])
<     ## ipv6-option.h (module 'internet'): ns3::Ipv6OptionJumbogram::Ipv6OptionJumbogram() [constructor]
<     cls.add_constructor([])
<     ## ipv6-option.h (module 'internet'): uint8_t ns3::Ipv6OptionJumbogram::GetOptionNumber() const [member function]
<     cls.add_method('GetOptionNumber', 
<                    'uint8_t', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## ipv6-option.h (module 'internet'): static ns3::TypeId ns3::Ipv6OptionJumbogram::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## ipv6-option.h (module 'internet'): uint8_t ns3::Ipv6OptionJumbogram::Process(ns3::Ptr<ns3::Packet> packet, uint8_t offset, ns3::Ipv6Header const & ipv6Header, bool & isDropped) [member function]
<     cls.add_method('Process', 
<                    'uint8_t', 
<                    [param('ns3::Ptr< ns3::Packet >', 'packet'), param('uint8_t', 'offset'), param('ns3::Ipv6Header const &', 'ipv6Header'), param('bool &', 'isDropped')], 
<                    is_virtual=True)
<     ## ipv6-option.h (module 'internet'): ns3::Ipv6OptionJumbogram::OPT_NUMBER [variable]
<     cls.add_static_attribute('OPT_NUMBER', 'uint8_t const', is_const=True)
<     return
< 
< def register_Ns3Ipv6OptionPad1_methods(root_module, cls):
<     ## ipv6-option.h (module 'internet'): ns3::Ipv6OptionPad1::Ipv6OptionPad1(ns3::Ipv6OptionPad1 const & arg0) [constructor]
<     cls.add_constructor([param('ns3::Ipv6OptionPad1 const &', 'arg0')])
<     ## ipv6-option.h (module 'internet'): ns3::Ipv6OptionPad1::Ipv6OptionPad1() [constructor]
<     cls.add_constructor([])
<     ## ipv6-option.h (module 'internet'): uint8_t ns3::Ipv6OptionPad1::GetOptionNumber() const [member function]
<     cls.add_method('GetOptionNumber', 
<                    'uint8_t', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## ipv6-option.h (module 'internet'): static ns3::TypeId ns3::Ipv6OptionPad1::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## ipv6-option.h (module 'internet'): uint8_t ns3::Ipv6OptionPad1::Process(ns3::Ptr<ns3::Packet> packet, uint8_t offset, ns3::Ipv6Header const & ipv6Header, bool & isDropped) [member function]
<     cls.add_method('Process', 
<                    'uint8_t', 
<                    [param('ns3::Ptr< ns3::Packet >', 'packet'), param('uint8_t', 'offset'), param('ns3::Ipv6Header const &', 'ipv6Header'), param('bool &', 'isDropped')], 
<                    is_virtual=True)
<     ## ipv6-option.h (module 'internet'): ns3::Ipv6OptionPad1::OPT_NUMBER [variable]
<     cls.add_static_attribute('OPT_NUMBER', 'uint8_t const', is_const=True)
<     return
< 
< def register_Ns3Ipv6OptionPadn_methods(root_module, cls):
<     ## ipv6-option.h (module 'internet'): ns3::Ipv6OptionPadn::Ipv6OptionPadn(ns3::Ipv6OptionPadn const & arg0) [constructor]
<     cls.add_constructor([param('ns3::Ipv6OptionPadn const &', 'arg0')])
<     ## ipv6-option.h (module 'internet'): ns3::Ipv6OptionPadn::Ipv6OptionPadn() [constructor]
<     cls.add_constructor([])
<     ## ipv6-option.h (module 'internet'): uint8_t ns3::Ipv6OptionPadn::GetOptionNumber() const [member function]
<     cls.add_method('GetOptionNumber', 
<                    'uint8_t', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## ipv6-option.h (module 'internet'): static ns3::TypeId ns3::Ipv6OptionPadn::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## ipv6-option.h (module 'internet'): uint8_t ns3::Ipv6OptionPadn::Process(ns3::Ptr<ns3::Packet> packet, uint8_t offset, ns3::Ipv6Header const & ipv6Header, bool & isDropped) [member function]
<     cls.add_method('Process', 
<                    'uint8_t', 
<                    [param('ns3::Ptr< ns3::Packet >', 'packet'), param('uint8_t', 'offset'), param('ns3::Ipv6Header const &', 'ipv6Header'), param('bool &', 'isDropped')], 
<                    is_virtual=True)
<     ## ipv6-option.h (module 'internet'): ns3::Ipv6OptionPadn::OPT_NUMBER [variable]
<     cls.add_static_attribute('OPT_NUMBER', 'uint8_t const', is_const=True)
<     return
< 
< def register_Ns3Ipv6OptionRouterAlert_methods(root_module, cls):
<     ## ipv6-option.h (module 'internet'): ns3::Ipv6OptionRouterAlert::Ipv6OptionRouterAlert(ns3::Ipv6OptionRouterAlert const & arg0) [constructor]
<     cls.add_constructor([param('ns3::Ipv6OptionRouterAlert const &', 'arg0')])
<     ## ipv6-option.h (module 'internet'): ns3::Ipv6OptionRouterAlert::Ipv6OptionRouterAlert() [constructor]
<     cls.add_constructor([])
<     ## ipv6-option.h (module 'internet'): uint8_t ns3::Ipv6OptionRouterAlert::GetOptionNumber() const [member function]
<     cls.add_method('GetOptionNumber', 
<                    'uint8_t', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## ipv6-option.h (module 'internet'): static ns3::TypeId ns3::Ipv6OptionRouterAlert::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## ipv6-option.h (module 'internet'): uint8_t ns3::Ipv6OptionRouterAlert::Process(ns3::Ptr<ns3::Packet> packet, uint8_t offset, ns3::Ipv6Header const & ipv6Header, bool & isDropped) [member function]
<     cls.add_method('Process', 
<                    'uint8_t', 
<                    [param('ns3::Ptr< ns3::Packet >', 'packet'), param('uint8_t', 'offset'), param('ns3::Ipv6Header const &', 'ipv6Header'), param('bool &', 'isDropped')], 
<                    is_virtual=True)
<     ## ipv6-option.h (module 'internet'): ns3::Ipv6OptionRouterAlert::OPT_NUMBER [variable]
<     cls.add_static_attribute('OPT_NUMBER', 'uint8_t const', is_const=True)
<     return
< 
17017c15286
<     ## ipv6-packet-filter.h (module 'internet'): ns3::Ipv6PacketFilter::Ipv6PacketFilter(ns3::Ipv6PacketFilter const & arg0) [constructor]
---
>     ## ipv6-packet-filter.h (module 'internet'): ns3::Ipv6PacketFilter::Ipv6PacketFilter(ns3::Ipv6PacketFilter const & arg0) [copy constructor]
17030c15299
<                    is_const=True, is_virtual=True, visibility='private')
---
>                    is_const=True, visibility='private', is_virtual=True)
17035c15304
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
17039c15308
<     ## ipv6-pmtu-cache.h (module 'internet'): ns3::Ipv6PmtuCache::Ipv6PmtuCache(ns3::Ipv6PmtuCache const & arg0) [constructor]
---
>     ## ipv6-pmtu-cache.h (module 'internet'): ns3::Ipv6PmtuCache::Ipv6PmtuCache(ns3::Ipv6PmtuCache const & arg0) [copy constructor]
17075c15344
<     ## ipv6-address.h (module 'network'): ns3::Ipv6PrefixChecker::Ipv6PrefixChecker(ns3::Ipv6PrefixChecker const & arg0) [constructor]
---
>     ## ipv6-address.h (module 'network'): ns3::Ipv6PrefixChecker::Ipv6PrefixChecker(ns3::Ipv6PrefixChecker const & arg0) [copy constructor]
17081a15351,15352
>     ## ipv6-address.h (module 'network'): ns3::Ipv6PrefixValue::Ipv6PrefixValue(ns3::Ipv6PrefixValue const & arg0) [copy constructor]
>     cls.add_constructor([param('ns3::Ipv6PrefixValue const &', 'arg0')])
17084,17085d15354
<     ## ipv6-address.h (module 'network'): ns3::Ipv6PrefixValue::Ipv6PrefixValue(ns3::Ipv6PrefixValue const & arg0) [constructor]
<     cls.add_constructor([param('ns3::Ipv6PrefixValue const &', 'arg0')])
17091c15360
<     ## ipv6-address.h (module 'network'): bool ns3::Ipv6PrefixValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
---
>     ## ipv6-address.h (module 'network'): bool ns3::Ipv6PrefixValue::DeserializeFromString(std::string value, ns3::Ptr<ns3::AttributeChecker const> checker) [member function]
17101c15370
<     ## ipv6-address.h (module 'network'): std::string ns3::Ipv6PrefixValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
---
>     ## ipv6-address.h (module 'network'): std::string ns3::Ipv6PrefixValue::SerializeToString(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
17115c15384
<     ## ipv6-raw-socket-factory.h (module 'internet'): ns3::Ipv6RawSocketFactory::Ipv6RawSocketFactory(ns3::Ipv6RawSocketFactory const & arg0) [constructor]
---
>     ## ipv6-raw-socket-factory.h (module 'internet'): ns3::Ipv6RawSocketFactory::Ipv6RawSocketFactory(ns3::Ipv6RawSocketFactory const & arg0) [copy constructor]
17126c15395
<     ## ipv6-route.h (module 'internet'): ns3::Ipv6Route::Ipv6Route(ns3::Ipv6Route const & arg0) [constructor]
---
>     ## ipv6-route.h (module 'internet'): ns3::Ipv6Route::Ipv6Route(ns3::Ipv6Route const & arg0) [copy constructor]
17171c15440
<     ## ipv6-routing-protocol.h (module 'internet'): ns3::Ipv6RoutingProtocol::Ipv6RoutingProtocol(ns3::Ipv6RoutingProtocol const & arg0) [constructor]
---
>     ## ipv6-routing-protocol.h (module 'internet'): ns3::Ipv6RoutingProtocol::Ipv6RoutingProtocol(ns3::Ipv6RoutingProtocol const & arg0) [copy constructor]
17182,17183c15451,15452
<                    is_virtual=True, is_pure_virtual=True)
<     ## ipv6-routing-protocol.h (module 'internet'): void ns3::Ipv6RoutingProtocol::NotifyAddRoute(ns3::Ipv6Address dst, ns3::Ipv6Prefix mask, ns3::Ipv6Address nextHop, uint32_t interface, ns3::Ipv6Address prefixToUse=ns3::Ipv6Address::GetZero()) [member function]
---
>                    is_pure_virtual=True, is_virtual=True)
>     ## ipv6-routing-protocol.h (module 'internet'): void ns3::Ipv6RoutingProtocol::NotifyAddRoute(ns3::Ipv6Address dst, ns3::Ipv6Prefix mask, ns3::Ipv6Address nextHop, uint32_t interface, ns3::Ipv6Address prefixToUse=ns3::Ipv6Address::GetZero( )) [member function]
17186,17187c15455,15456
<                    [param('ns3::Ipv6Address', 'dst'), param('ns3::Ipv6Prefix', 'mask'), param('ns3::Ipv6Address', 'nextHop'), param('uint32_t', 'interface'), param('ns3::Ipv6Address', 'prefixToUse', default_value='ns3::Ipv6Address::GetZero()')], 
<                    is_virtual=True, is_pure_virtual=True)
---
>                    [param('ns3::Ipv6Address', 'dst'), param('ns3::Ipv6Prefix', 'mask'), param('ns3::Ipv6Address', 'nextHop'), param('uint32_t', 'interface'), param('ns3::Ipv6Address', 'prefixToUse', default_value='ns3::Ipv6Address::GetZero( )')], 
>                    is_pure_virtual=True, is_virtual=True)
17192c15461
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
17197c15466
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
17202,17203c15471,15472
<                    is_virtual=True, is_pure_virtual=True)
<     ## ipv6-routing-protocol.h (module 'internet'): void ns3::Ipv6RoutingProtocol::NotifyRemoveRoute(ns3::Ipv6Address dst, ns3::Ipv6Prefix mask, ns3::Ipv6Address nextHop, uint32_t interface, ns3::Ipv6Address prefixToUse=ns3::Ipv6Address::GetZero()) [member function]
---
>                    is_pure_virtual=True, is_virtual=True)
>     ## ipv6-routing-protocol.h (module 'internet'): void ns3::Ipv6RoutingProtocol::NotifyRemoveRoute(ns3::Ipv6Address dst, ns3::Ipv6Prefix mask, ns3::Ipv6Address nextHop, uint32_t interface, ns3::Ipv6Address prefixToUse=ns3::Ipv6Address::GetZero( )) [member function]
17206,17208c15475,15477
<                    [param('ns3::Ipv6Address', 'dst'), param('ns3::Ipv6Prefix', 'mask'), param('ns3::Ipv6Address', 'nextHop'), param('uint32_t', 'interface'), param('ns3::Ipv6Address', 'prefixToUse', default_value='ns3::Ipv6Address::GetZero()')], 
<                    is_virtual=True, is_pure_virtual=True)
<     ## ipv6-routing-protocol.h (module 'internet'): void ns3::Ipv6RoutingProtocol::PrintRoutingTable(ns3::Ptr<ns3::OutputStreamWrapper> stream, ns3::Time::Unit unit=::ns3::Time::Unit::S) const [member function]
---
>                    [param('ns3::Ipv6Address', 'dst'), param('ns3::Ipv6Prefix', 'mask'), param('ns3::Ipv6Address', 'nextHop'), param('uint32_t', 'interface'), param('ns3::Ipv6Address', 'prefixToUse', default_value='ns3::Ipv6Address::GetZero( )')], 
>                    is_pure_virtual=True, is_virtual=True)
>     ## ipv6-routing-protocol.h (module 'internet'): void ns3::Ipv6RoutingProtocol::PrintRoutingTable(ns3::Ptr<ns3::OutputStreamWrapper> stream) const [member function]
17211,17213c15480,15482
<                    [param('ns3::Ptr< ns3::OutputStreamWrapper >', 'stream'), param('ns3::Time::Unit', 'unit', default_value='::ns3::Time::Unit::S')], 
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
<     ## ipv6-routing-protocol.h (module 'internet'): bool ns3::Ipv6RoutingProtocol::RouteInput(ns3::Ptr<const ns3::Packet> p, ns3::Ipv6Header const & header, ns3::Ptr<const ns3::NetDevice> idev, ns3::Ipv6RoutingProtocol::UnicastForwardCallback ucb, ns3::Ipv6RoutingProtocol::MulticastForwardCallback mcb, ns3::Ipv6RoutingProtocol::LocalDeliverCallback lcb, ns3::Ipv6RoutingProtocol::ErrorCallback ecb) [member function]
---
>                    [param('ns3::Ptr< ns3::OutputStreamWrapper >', 'stream')], 
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
>     ## ipv6-routing-protocol.h (module 'internet'): bool ns3::Ipv6RoutingProtocol::RouteInput(ns3::Ptr<ns3::Packet const> p, ns3::Ipv6Header const & header, ns3::Ptr<const ns3::NetDevice> idev, ns3::Callback<void,ns3::Ptr<const ns3::NetDevice>,ns3::Ptr<ns3::Ipv6Route>,ns3::Ptr<const ns3::Packet>,const ns3::Ipv6Header&,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> ucb, ns3::Callback<void,ns3::Ptr<const ns3::NetDevice>,ns3::Ptr<ns3::Ipv6MulticastRoute>,ns3::Ptr<const ns3::Packet>,const ns3::Ipv6Header&,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> mcb, ns3::Callback<void,ns3::Ptr<const ns3::Packet>,const ns3::Ipv6Header&,unsigned int,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> lcb, ns3::Callback<void,ns3::Ptr<const ns3::Packet>,const ns3::Ipv6Header&,ns3::Socket::SocketErrno,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> ecb) [member function]
17217c15486
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
17222c15491
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
17227c15496
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
17231c15500
<     ## ipv6-static-routing.h (module 'internet'): ns3::Ipv6StaticRouting::Ipv6StaticRouting(ns3::Ipv6StaticRouting const & arg0) [constructor]
---
>     ## ipv6-static-routing.h (module 'internet'): ns3::Ipv6StaticRouting::Ipv6StaticRouting(ns3::Ipv6StaticRouting const & arg0) [copy constructor]
17235c15504
<     ## ipv6-static-routing.h (module 'internet'): void ns3::Ipv6StaticRouting::AddHostRouteTo(ns3::Ipv6Address dest, ns3::Ipv6Address nextHop, uint32_t interface, ns3::Ipv6Address prefixToUse=ns3::Ipv6Address("::"), uint32_t metric=0) [member function]
---
>     ## ipv6-static-routing.h (module 'internet'): void ns3::Ipv6StaticRouting::AddHostRouteTo(ns3::Ipv6Address dest, ns3::Ipv6Address nextHop, uint32_t interface, ns3::Ipv6Address prefixToUse=ns3::Ipv6Address(((const char*)"::")), uint32_t metric=0) [member function]
17238c15507
<                    [param('ns3::Ipv6Address', 'dest'), param('ns3::Ipv6Address', 'nextHop'), param('uint32_t', 'interface'), param('ns3::Ipv6Address', 'prefixToUse', default_value='ns3::Ipv6Address("::")'), param('uint32_t', 'metric', default_value='0')])
---
>                    [param('ns3::Ipv6Address', 'dest'), param('ns3::Ipv6Address', 'nextHop'), param('uint32_t', 'interface'), param('ns3::Ipv6Address', 'prefixToUse', default_value='ns3::Ipv6Address(((const char*)"::"))'), param('uint32_t', 'metric', default_value='0')])
17302c15571
<     ## ipv6-static-routing.h (module 'internet'): void ns3::Ipv6StaticRouting::NotifyAddRoute(ns3::Ipv6Address dst, ns3::Ipv6Prefix mask, ns3::Ipv6Address nextHop, uint32_t interface, ns3::Ipv6Address prefixToUse=ns3::Ipv6Address::GetZero()) [member function]
---
>     ## ipv6-static-routing.h (module 'internet'): void ns3::Ipv6StaticRouting::NotifyAddRoute(ns3::Ipv6Address dst, ns3::Ipv6Prefix mask, ns3::Ipv6Address nextHop, uint32_t interface, ns3::Ipv6Address prefixToUse=ns3::Ipv6Address::GetZero( )) [member function]
17305c15574
<                    [param('ns3::Ipv6Address', 'dst'), param('ns3::Ipv6Prefix', 'mask'), param('ns3::Ipv6Address', 'nextHop'), param('uint32_t', 'interface'), param('ns3::Ipv6Address', 'prefixToUse', default_value='ns3::Ipv6Address::GetZero()')], 
---
>                    [param('ns3::Ipv6Address', 'dst'), param('ns3::Ipv6Prefix', 'mask'), param('ns3::Ipv6Address', 'nextHop'), param('uint32_t', 'interface'), param('ns3::Ipv6Address', 'prefixToUse', default_value='ns3::Ipv6Address::GetZero( )')], 
17322c15591
<     ## ipv6-static-routing.h (module 'internet'): void ns3::Ipv6StaticRouting::NotifyRemoveRoute(ns3::Ipv6Address dst, ns3::Ipv6Prefix mask, ns3::Ipv6Address nextHop, uint32_t interface, ns3::Ipv6Address prefixToUse=ns3::Ipv6Address::GetZero()) [member function]
---
>     ## ipv6-static-routing.h (module 'internet'): void ns3::Ipv6StaticRouting::NotifyRemoveRoute(ns3::Ipv6Address dst, ns3::Ipv6Prefix mask, ns3::Ipv6Address nextHop, uint32_t interface, ns3::Ipv6Address prefixToUse=ns3::Ipv6Address::GetZero( )) [member function]
17325c15594
<                    [param('ns3::Ipv6Address', 'dst'), param('ns3::Ipv6Prefix', 'mask'), param('ns3::Ipv6Address', 'nextHop'), param('uint32_t', 'interface'), param('ns3::Ipv6Address', 'prefixToUse', default_value='ns3::Ipv6Address::GetZero()')], 
---
>                    [param('ns3::Ipv6Address', 'dst'), param('ns3::Ipv6Prefix', 'mask'), param('ns3::Ipv6Address', 'nextHop'), param('uint32_t', 'interface'), param('ns3::Ipv6Address', 'prefixToUse', default_value='ns3::Ipv6Address::GetZero( )')], 
17327c15596
<     ## ipv6-static-routing.h (module 'internet'): void ns3::Ipv6StaticRouting::PrintRoutingTable(ns3::Ptr<ns3::OutputStreamWrapper> stream, ns3::Time::Unit unit=::ns3::Time::Unit::S) const [member function]
---
>     ## ipv6-static-routing.h (module 'internet'): void ns3::Ipv6StaticRouting::PrintRoutingTable(ns3::Ptr<ns3::OutputStreamWrapper> stream) const [member function]
17330c15599
<                    [param('ns3::Ptr< ns3::OutputStreamWrapper >', 'stream'), param('ns3::Time::Unit', 'unit', default_value='::ns3::Time::Unit::S')], 
---
>                    [param('ns3::Ptr< ns3::OutputStreamWrapper >', 'stream')], 
17348c15617
<     ## ipv6-static-routing.h (module 'internet'): bool ns3::Ipv6StaticRouting::RouteInput(ns3::Ptr<const ns3::Packet> p, ns3::Ipv6Header const & header, ns3::Ptr<const ns3::NetDevice> idev, ns3::Ipv6RoutingProtocol::UnicastForwardCallback ucb, ns3::Ipv6RoutingProtocol::MulticastForwardCallback mcb, ns3::Ipv6RoutingProtocol::LocalDeliverCallback lcb, ns3::Ipv6RoutingProtocol::ErrorCallback ecb) [member function]
---
>     ## ipv6-static-routing.h (module 'internet'): bool ns3::Ipv6StaticRouting::RouteInput(ns3::Ptr<ns3::Packet const> p, ns3::Ipv6Header const & header, ns3::Ptr<const ns3::NetDevice> idev, ns3::Callback<void,ns3::Ptr<const ns3::NetDevice>,ns3::Ptr<ns3::Ipv6Route>,ns3::Ptr<const ns3::Packet>,const ns3::Ipv6Header&,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> ucb, ns3::Callback<void,ns3::Ptr<const ns3::NetDevice>,ns3::Ptr<ns3::Ipv6MulticastRoute>,ns3::Ptr<const ns3::Packet>,const ns3::Ipv6Header&,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> mcb, ns3::Callback<void,ns3::Ptr<const ns3::Packet>,const ns3::Ipv6Header&,unsigned int,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> lcb, ns3::Callback<void,ns3::Ptr<const ns3::Packet>,const ns3::Ipv6Header&,ns3::Socket::SocketErrno,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> ecb) [member function]
17362c15631
<     ## ipv6-static-routing.h (module 'internet'): void ns3::Ipv6StaticRouting::SetDefaultRoute(ns3::Ipv6Address nextHop, uint32_t interface, ns3::Ipv6Address prefixToUse=ns3::Ipv6Address("::"), uint32_t metric=0) [member function]
---
>     ## ipv6-static-routing.h (module 'internet'): void ns3::Ipv6StaticRouting::SetDefaultRoute(ns3::Ipv6Address nextHop, uint32_t interface, ns3::Ipv6Address prefixToUse=ns3::Ipv6Address(((const char*)"::")), uint32_t metric=0) [member function]
17365c15634
<                    [param('ns3::Ipv6Address', 'nextHop'), param('uint32_t', 'interface'), param('ns3::Ipv6Address', 'prefixToUse', default_value='ns3::Ipv6Address("::")'), param('uint32_t', 'metric', default_value='0')])
---
>                    [param('ns3::Ipv6Address', 'nextHop'), param('uint32_t', 'interface'), param('ns3::Ipv6Address', 'prefixToUse', default_value='ns3::Ipv6Address(((const char*)"::"))'), param('uint32_t', 'metric', default_value='0')])
17375c15644
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
17419c15688
<     ## mac48-address.h (module 'network'): ns3::Mac48AddressChecker::Mac48AddressChecker(ns3::Mac48AddressChecker const & arg0) [constructor]
---
>     ## mac48-address.h (module 'network'): ns3::Mac48AddressChecker::Mac48AddressChecker(ns3::Mac48AddressChecker const & arg0) [copy constructor]
17425a15695,15696
>     ## mac48-address.h (module 'network'): ns3::Mac48AddressValue::Mac48AddressValue(ns3::Mac48AddressValue const & arg0) [copy constructor]
>     cls.add_constructor([param('ns3::Mac48AddressValue const &', 'arg0')])
17428,17429d15698
<     ## mac48-address.h (module 'network'): ns3::Mac48AddressValue::Mac48AddressValue(ns3::Mac48AddressValue const & arg0) [constructor]
<     cls.add_constructor([param('ns3::Mac48AddressValue const &', 'arg0')])
17435c15704
<     ## mac48-address.h (module 'network'): bool ns3::Mac48AddressValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
---
>     ## mac48-address.h (module 'network'): bool ns3::Mac48AddressValue::DeserializeFromString(std::string value, ns3::Ptr<ns3::AttributeChecker const> checker) [member function]
17445c15714
<     ## mac48-address.h (module 'network'): std::string ns3::Mac48AddressValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
---
>     ## mac48-address.h (module 'network'): std::string ns3::Mac48AddressValue::SerializeToString(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
17490c15759
<     ## ndisc-cache.h (module 'internet'): std::list<ns3::NdiscCache::Entry *, std::allocator<ns3::NdiscCache::Entry *> > ns3::NdiscCache::LookupInverse(ns3::Address dst) [member function]
---
>     ## ndisc-cache.h (module 'internet'): std::list<ns3::NdiscCache::Entry*,std::allocator<ns3::NdiscCache::Entry*> > ns3::NdiscCache::LookupInverse(ns3::Address dst) [member function]
17502c15771
<     ## ndisc-cache.h (module 'internet'): void ns3::NdiscCache::SetDevice(ns3::Ptr<ns3::NetDevice> device, ns3::Ptr<ns3::Ipv6Interface> interface, ns3::Ptr<ns3::Icmpv6L4Protocol> icmpv6) [member function]
---
>     ## ndisc-cache.h (module 'internet'): void ns3::NdiscCache::SetDevice(ns3::Ptr<ns3::NetDevice> device, ns3::Ptr<ns3::Ipv6Interface> interface) [member function]
17505c15774
<                    [param('ns3::Ptr< ns3::NetDevice >', 'device'), param('ns3::Ptr< ns3::Ipv6Interface >', 'interface'), param('ns3::Ptr< ns3::Icmpv6L4Protocol >', 'icmpv6')])
---
>                    [param('ns3::Ptr< ns3::NetDevice >', 'device'), param('ns3::Ptr< ns3::Ipv6Interface >', 'interface')])
17516c15785
<                    is_virtual=True, visibility='private')
---
>                    visibility='private', is_virtual=True)
17520c15789
<     ## ndisc-cache.h (module 'internet'): ns3::NdiscCache::Entry::Entry(ns3::NdiscCache::Entry const & arg0) [constructor]
---
>     ## ndisc-cache.h (module 'internet'): ns3::NdiscCache::Entry::Entry(ns3::NdiscCache::Entry const & arg0) [copy constructor]
17524c15793
<     ## ndisc-cache.h (module 'internet'): void ns3::NdiscCache::Entry::AddWaitingPacket(ns3::NdiscCache::Ipv6PayloadHeaderPair p) [member function]
---
>     ## ndisc-cache.h (module 'internet'): void ns3::NdiscCache::Entry::AddWaitingPacket(std::pair<ns3::Ptr<ns3::Packet>,ns3::Ipv6Header> p) [member function]
17597c15866
<     ## ndisc-cache.h (module 'internet'): void ns3::NdiscCache::Entry::MarkIncomplete(ns3::NdiscCache::Ipv6PayloadHeaderPair p) [member function]
---
>     ## ndisc-cache.h (module 'internet'): void ns3::NdiscCache::Entry::MarkIncomplete(std::pair<ns3::Ptr<ns3::Packet>,ns3::Ipv6Header> p) [member function]
17666c15935
<     ## net-device.h (module 'network'): ns3::NetDevice::NetDevice(ns3::NetDevice const & arg0) [constructor]
---
>     ## net-device.h (module 'network'): ns3::NetDevice::NetDevice(ns3::NetDevice const & arg0) [copy constructor]
17672c15941
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
17677c15946
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
17682c15951
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
17687c15956
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
17692c15961
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
17697c15966
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
17702c15971
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
17707c15976
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
17712c15981
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
17722c15991
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
17727c15996
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
17732c16001
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
17737c16006
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
17742c16011
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
17747c16016
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
17752c16021
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
17757c16026
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
17762c16031
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
17767c16036
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
17772c16041
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
17777,17778c16046,16047
<                    is_virtual=True, is_pure_virtual=True)
<     ## net-device.h (module 'network'): void ns3::NetDevice::SetPromiscReceiveCallback(ns3::NetDevice::PromiscReceiveCallback cb) [member function]
---
>                    is_pure_virtual=True, is_virtual=True)
>     ## net-device.h (module 'network'): void ns3::NetDevice::SetPromiscReceiveCallback(ns3::Callback<bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<ns3::Packet const>, unsigned short, ns3::Address const&, ns3::Address const&, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty> cb) [member function]
17782,17783c16051,16052
<                    is_virtual=True, is_pure_virtual=True)
<     ## net-device.h (module 'network'): void ns3::NetDevice::SetReceiveCallback(ns3::NetDevice::ReceiveCallback cb) [member function]
---
>                    is_pure_virtual=True, is_virtual=True)
>     ## net-device.h (module 'network'): void ns3::NetDevice::SetReceiveCallback(ns3::Callback<bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<ns3::Packet const>, unsigned short, ns3::Address const&, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> cb) [member function]
17787c16056
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
17792c16061,16157
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
>     return
> 
> def register_Ns3NetDeviceQueue_methods(root_module, cls):
>     ## net-device.h (module 'network'): ns3::NetDeviceQueue::NetDeviceQueue(ns3::NetDeviceQueue const & arg0) [copy constructor]
>     cls.add_constructor([param('ns3::NetDeviceQueue const &', 'arg0')])
>     ## net-device.h (module 'network'): ns3::NetDeviceQueue::NetDeviceQueue() [constructor]
>     cls.add_constructor([])
>     ## net-device.h (module 'network'): ns3::Ptr<ns3::QueueLimits> ns3::NetDeviceQueue::GetQueueLimits() [member function]
>     cls.add_method('GetQueueLimits', 
>                    'ns3::Ptr< ns3::QueueLimits >', 
>                    [])
>     ## net-device.h (module 'network'): bool ns3::NetDeviceQueue::IsStopped() const [member function]
>     cls.add_method('IsStopped', 
>                    'bool', 
>                    [], 
>                    is_const=True)
>     ## net-device.h (module 'network'): void ns3::NetDeviceQueue::NotifyQueuedBytes(uint32_t bytes) [member function]
>     cls.add_method('NotifyQueuedBytes', 
>                    'void', 
>                    [param('uint32_t', 'bytes')])
>     ## net-device.h (module 'network'): void ns3::NetDeviceQueue::NotifyTransmittedBytes(uint32_t bytes) [member function]
>     cls.add_method('NotifyTransmittedBytes', 
>                    'void', 
>                    [param('uint32_t', 'bytes')])
>     ## net-device.h (module 'network'): void ns3::NetDeviceQueue::ResetQueueLimits() [member function]
>     cls.add_method('ResetQueueLimits', 
>                    'void', 
>                    [])
>     ## net-device.h (module 'network'): void ns3::NetDeviceQueue::SetQueueLimits(ns3::Ptr<ns3::QueueLimits> ql) [member function]
>     cls.add_method('SetQueueLimits', 
>                    'void', 
>                    [param('ns3::Ptr< ns3::QueueLimits >', 'ql')])
>     ## net-device.h (module 'network'): void ns3::NetDeviceQueue::SetWakeCallback(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> cb) [member function]
>     cls.add_method('SetWakeCallback', 
>                    'void', 
>                    [param('ns3::Callback< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'cb')], 
>                    is_virtual=True)
>     ## net-device.h (module 'network'): void ns3::NetDeviceQueue::Start() [member function]
>     cls.add_method('Start', 
>                    'void', 
>                    [], 
>                    is_virtual=True)
>     ## net-device.h (module 'network'): void ns3::NetDeviceQueue::Stop() [member function]
>     cls.add_method('Stop', 
>                    'void', 
>                    [], 
>                    is_virtual=True)
>     ## net-device.h (module 'network'): void ns3::NetDeviceQueue::Wake() [member function]
>     cls.add_method('Wake', 
>                    'void', 
>                    [], 
>                    is_virtual=True)
>     return
> 
> def register_Ns3NetDeviceQueueInterface_methods(root_module, cls):
>     ## net-device.h (module 'network'): ns3::NetDeviceQueueInterface::NetDeviceQueueInterface(ns3::NetDeviceQueueInterface const & arg0) [copy constructor]
>     cls.add_constructor([param('ns3::NetDeviceQueueInterface const &', 'arg0')])
>     ## net-device.h (module 'network'): ns3::NetDeviceQueueInterface::NetDeviceQueueInterface() [constructor]
>     cls.add_constructor([])
>     ## net-device.h (module 'network'): void ns3::NetDeviceQueueInterface::CreateTxQueues() [member function]
>     cls.add_method('CreateTxQueues', 
>                    'void', 
>                    [])
>     ## net-device.h (module 'network'): uint8_t ns3::NetDeviceQueueInterface::GetNTxQueues() const [member function]
>     cls.add_method('GetNTxQueues', 
>                    'uint8_t', 
>                    [], 
>                    is_const=True)
>     ## net-device.h (module 'network'): ns3::Callback<unsigned char, ns3::Ptr<ns3::QueueItem>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> ns3::NetDeviceQueueInterface::GetSelectQueueCallback() const [member function]
>     cls.add_method('GetSelectQueueCallback', 
>                    'ns3::Callback< unsigned char, ns3::Ptr< ns3::QueueItem >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 
>                    [], 
>                    is_const=True)
>     ## net-device.h (module 'network'): ns3::Ptr<ns3::NetDeviceQueue> ns3::NetDeviceQueueInterface::GetTxQueue(uint8_t i) const [member function]
>     cls.add_method('GetTxQueue', 
>                    'ns3::Ptr< ns3::NetDeviceQueue >', 
>                    [param('uint8_t', 'i')], 
>                    is_const=True)
>     ## net-device.h (module 'network'): static ns3::TypeId ns3::NetDeviceQueueInterface::GetTypeId() [member function]
>     cls.add_method('GetTypeId', 
>                    'ns3::TypeId', 
>                    [], 
>                    is_static=True)
>     ## net-device.h (module 'network'): void ns3::NetDeviceQueueInterface::SetSelectQueueCallback(ns3::Callback<unsigned char, ns3::Ptr<ns3::QueueItem>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> cb) [member function]
>     cls.add_method('SetSelectQueueCallback', 
>                    'void', 
>                    [param('ns3::Callback< unsigned char, ns3::Ptr< ns3::QueueItem >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'cb')])
>     ## net-device.h (module 'network'): void ns3::NetDeviceQueueInterface::SetTxQueuesN(uint8_t numTxQueues) [member function]
>     cls.add_method('SetTxQueuesN', 
>                    'void', 
>                    [param('uint8_t', 'numTxQueues')])
>     ## net-device.h (module 'network'): void ns3::NetDeviceQueueInterface::DoDispose() [member function]
>     cls.add_method('DoDispose', 
>                    'void', 
>                    [], 
>                    visibility='protected', is_virtual=True)
17799c16164
<     ## nix-vector.h (module 'network'): ns3::NixVector::NixVector(ns3::NixVector const & o) [constructor]
---
>     ## nix-vector.h (module 'network'): ns3::NixVector::NixVector(ns3::NixVector const & o) [copy constructor]
17840c16205
<     ## node.h (module 'network'): ns3::Node::Node(ns3::Node const & arg0) [constructor]
---
>     ## node.h (module 'network'): ns3::Node::Node(ns3::Node const & arg0) [copy constructor]
17899c16264
<     ## node.h (module 'network'): void ns3::Node::RegisterDeviceAdditionListener(ns3::Node::DeviceAdditionListener listener) [member function]
---
>     ## node.h (module 'network'): void ns3::Node::RegisterDeviceAdditionListener(ns3::Callback<void,ns3::Ptr<ns3::NetDevice>,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> listener) [member function]
17903c16268
<     ## node.h (module 'network'): void ns3::Node::RegisterProtocolHandler(ns3::Node::ProtocolHandler handler, uint16_t protocolType, ns3::Ptr<ns3::NetDevice> device, bool promiscuous=false) [member function]
---
>     ## node.h (module 'network'): void ns3::Node::RegisterProtocolHandler(ns3::Callback<void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<ns3::Packet const>, unsigned short, ns3::Address const&, ns3::Address const&, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty> handler, uint16_t protocolType, ns3::Ptr<ns3::NetDevice> device, bool promiscuous=false) [member function]
17907c16272
<     ## node.h (module 'network'): void ns3::Node::UnregisterDeviceAdditionListener(ns3::Node::DeviceAdditionListener listener) [member function]
---
>     ## node.h (module 'network'): void ns3::Node::UnregisterDeviceAdditionListener(ns3::Callback<void,ns3::Ptr<ns3::NetDevice>,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> listener) [member function]
17911c16276
<     ## node.h (module 'network'): void ns3::Node::UnregisterProtocolHandler(ns3::Node::ProtocolHandler handler) [member function]
---
>     ## node.h (module 'network'): void ns3::Node::UnregisterProtocolHandler(ns3::Callback<void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<ns3::Packet const>, unsigned short, ns3::Address const&, ns3::Address const&, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty> handler) [member function]
17919c16284
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
17924c16289
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
17975c16340
<     ## object-factory.h (module 'core'): ns3::ObjectFactoryChecker::ObjectFactoryChecker(ns3::ObjectFactoryChecker const & arg0) [constructor]
---
>     ## object-factory.h (module 'core'): ns3::ObjectFactoryChecker::ObjectFactoryChecker(ns3::ObjectFactoryChecker const & arg0) [copy constructor]
17981a16347,16348
>     ## object-factory.h (module 'core'): ns3::ObjectFactoryValue::ObjectFactoryValue(ns3::ObjectFactoryValue const & arg0) [copy constructor]
>     cls.add_constructor([param('ns3::ObjectFactoryValue const &', 'arg0')])
17984,17985d16350
<     ## object-factory.h (module 'core'): ns3::ObjectFactoryValue::ObjectFactoryValue(ns3::ObjectFactoryValue const & arg0) [constructor]
<     cls.add_constructor([param('ns3::ObjectFactoryValue const &', 'arg0')])
17991c16356
<     ## object-factory.h (module 'core'): bool ns3::ObjectFactoryValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
---
>     ## object-factory.h (module 'core'): bool ns3::ObjectFactoryValue::DeserializeFromString(std::string value, ns3::Ptr<ns3::AttributeChecker const> checker) [member function]
18001c16366
<     ## object-factory.h (module 'core'): std::string ns3::ObjectFactoryValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
---
>     ## object-factory.h (module 'core'): std::string ns3::ObjectFactoryValue::SerializeToString(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
18013c16378
<     ## output-stream-wrapper.h (module 'network'): ns3::OutputStreamWrapper::OutputStreamWrapper(ns3::OutputStreamWrapper const & arg0) [constructor]
---
>     ## output-stream-wrapper.h (module 'network'): ns3::OutputStreamWrapper::OutputStreamWrapper(ns3::OutputStreamWrapper const & arg0) [copy constructor]
18015,18016c16380,16381
<     ## output-stream-wrapper.h (module 'network'): ns3::OutputStreamWrapper::OutputStreamWrapper(std::string filename, std::ios_base::openmode filemode) [constructor]
<     cls.add_constructor([param('std::string', 'filename'), param('std::ios_base::openmode', 'filemode')])
---
>     ## output-stream-wrapper.h (module 'network'): ns3::OutputStreamWrapper::OutputStreamWrapper(std::string filename, std::_Ios_Openmode filemode) [constructor]
>     cls.add_constructor([param('std::string', 'filename'), param('std::_Ios_Openmode', 'filemode')])
18029c16394
<     ## packet.h (module 'network'): ns3::Packet::Packet(ns3::Packet const & o) [constructor]
---
>     ## packet.h (module 'network'): ns3::Packet::Packet(ns3::Packet const & o) [copy constructor]
18037c16402
<     ## packet.h (module 'network'): void ns3::Packet::AddAtEnd(ns3::Ptr<const ns3::Packet> packet) [member function]
---
>     ## packet.h (module 'network'): void ns3::Packet::AddAtEnd(ns3::Ptr<ns3::Packet const> packet) [member function]
18046,18050d16410
<     ## packet.h (module 'network'): void ns3::Packet::AddByteTag(ns3::Tag const & tag, uint32_t start, uint32_t end) const [member function]
<     cls.add_method('AddByteTag', 
<                    'void', 
<                    [param('ns3::Tag const &', 'tag'), param('uint32_t', 'start'), param('uint32_t', 'end')], 
<                    is_const=True)
18143,18147d16502
<     ## packet.h (module 'network'): uint32_t ns3::Packet::PeekHeader(ns3::Header & header, uint32_t size) const [member function]
<     cls.add_method('PeekHeader', 
<                    'uint32_t', 
<                    [param('ns3::Header &', 'header'), param('uint32_t', 'size')], 
<                    is_const=True)
18192,18195d16546
<     ## packet.h (module 'network'): uint32_t ns3::Packet::RemoveHeader(ns3::Header & header, uint32_t size) [member function]
<     cls.add_method('RemoveHeader', 
<                    'uint32_t', 
<                    [param('ns3::Header &', 'header'), param('uint32_t', 'size')])
18236,18240d16586
<                    is_const=True, deprecated=True)
<     ## random-variable-stream.h (module 'core'): double ns3::ParetoRandomVariable::GetScale() const [member function]
<     cls.add_method('GetScale', 
<                    'double', 
<                    [], 
18252c16598
<     ## random-variable-stream.h (module 'core'): double ns3::ParetoRandomVariable::GetValue(double scale, double shape, double bound) [member function]
---
>     ## random-variable-stream.h (module 'core'): double ns3::ParetoRandomVariable::GetValue(double mean, double shape, double bound) [member function]
18255,18256c16601,16602
<                    [param('double', 'scale'), param('double', 'shape'), param('double', 'bound')])
<     ## random-variable-stream.h (module 'core'): uint32_t ns3::ParetoRandomVariable::GetInteger(uint32_t scale, uint32_t shape, uint32_t bound) [member function]
---
>                    [param('double', 'mean'), param('double', 'shape'), param('double', 'bound')])
>     ## random-variable-stream.h (module 'core'): uint32_t ns3::ParetoRandomVariable::GetInteger(uint32_t mean, uint32_t shape, uint32_t bound) [member function]
18259c16605
<                    [param('uint32_t', 'scale'), param('uint32_t', 'shape'), param('uint32_t', 'bound')])
---
>                    [param('uint32_t', 'mean'), param('uint32_t', 'shape'), param('uint32_t', 'bound')])
18273c16619
<     ## probe.h (module 'stats'): ns3::Probe::Probe(ns3::Probe const & arg0) [constructor]
---
>     ## probe.h (module 'stats'): ns3::Probe::Probe(ns3::Probe const & arg0) [copy constructor]
18281c16627
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
18286c16632
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
18301c16647
<     ## queue-item.h (module 'network'): ns3::QueueItem::QueueItem(ns3::Ptr<ns3::Packet> p) [constructor]
---
>     ## net-device.h (module 'network'): ns3::QueueItem::QueueItem(ns3::Ptr<ns3::Packet> p) [constructor]
18303c16649
<     ## queue-item.h (module 'network'): ns3::Ptr<ns3::Packet> ns3::QueueItem::GetPacket() const [member function]
---
>     ## net-device.h (module 'network'): ns3::Ptr<ns3::Packet> ns3::QueueItem::GetPacket() const [member function]
18308,18309c16654,16655
<     ## queue-item.h (module 'network'): uint32_t ns3::QueueItem::GetSize() const [member function]
<     cls.add_method('GetSize', 
---
>     ## net-device.h (module 'network'): uint32_t ns3::QueueItem::GetPacketSize() const [member function]
>     cls.add_method('GetPacketSize', 
18313c16659
<     ## queue-item.h (module 'network'): bool ns3::QueueItem::GetUint8Value(ns3::QueueItem::Uint8Values field, uint8_t & value) const [member function]
---
>     ## net-device.h (module 'network'): bool ns3::QueueItem::GetUint8Value(ns3::QueueItem::Uint8Values field, uint8_t & value) const [member function]
18318c16664
<     ## queue-item.h (module 'network'): void ns3::QueueItem::Print(std::ostream & os) const [member function]
---
>     ## net-device.h (module 'network'): void ns3::QueueItem::Print(std::ostream & os) const [member function]
18326c16672
<     ## rip.h (module 'internet'): ns3::Rip::Rip(ns3::Rip const & arg0) [constructor]
---
>     ## rip.h (module 'internet'): ns3::Rip::Rip(ns3::Rip const & arg0) [copy constructor]
18373c16719
<     ## rip.h (module 'internet'): void ns3::Rip::PrintRoutingTable(ns3::Ptr<ns3::OutputStreamWrapper> stream, ns3::Time::Unit unit=::ns3::Time::Unit::S) const [member function]
---
>     ## rip.h (module 'internet'): void ns3::Rip::PrintRoutingTable(ns3::Ptr<ns3::OutputStreamWrapper> stream) const [member function]
18376c16722
<                    [param('ns3::Ptr< ns3::OutputStreamWrapper >', 'stream'), param('ns3::Time::Unit', 'unit', default_value='::ns3::Time::Unit::S')], 
---
>                    [param('ns3::Ptr< ns3::OutputStreamWrapper >', 'stream')], 
18378c16724
<     ## rip.h (module 'internet'): bool ns3::Rip::RouteInput(ns3::Ptr<const ns3::Packet> p, ns3::Ipv4Header const & header, ns3::Ptr<const ns3::NetDevice> idev, ns3::Ipv4RoutingProtocol::UnicastForwardCallback ucb, ns3::Ipv4RoutingProtocol::MulticastForwardCallback mcb, ns3::Ipv4RoutingProtocol::LocalDeliverCallback lcb, ns3::Ipv4RoutingProtocol::ErrorCallback ecb) [member function]
---
>     ## rip.h (module 'internet'): bool ns3::Rip::RouteInput(ns3::Ptr<ns3::Packet const> p, ns3::Ipv4Header const & header, ns3::Ptr<const ns3::NetDevice> idev, ns3::Callback<void,ns3::Ptr<ns3::Ipv4Route>,ns3::Ptr<const ns3::Packet>,const ns3::Ipv4Header&,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> ucb, ns3::Callback<void,ns3::Ptr<ns3::Ipv4MulticastRoute>,ns3::Ptr<const ns3::Packet>,const ns3::Ipv4Header&,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> mcb, ns3::Callback<void,ns3::Ptr<const ns3::Packet>,const ns3::Ipv4Header&,unsigned int,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> lcb, ns3::Callback<void,ns3::Ptr<const ns3::Packet>,const ns3::Ipv4Header&,ns3::Socket::SocketErrno,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> ecb) [member function]
18405c16751
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
18410c16756
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
18414c16760
<     ## ripng.h (module 'internet'): ns3::RipNg::RipNg(ns3::RipNg const & arg0) [constructor]
---
>     ## ripng.h (module 'internet'): ns3::RipNg::RipNg(ns3::RipNg const & arg0) [copy constructor]
18446c16792
<     ## ripng.h (module 'internet'): void ns3::RipNg::NotifyAddRoute(ns3::Ipv6Address dst, ns3::Ipv6Prefix mask, ns3::Ipv6Address nextHop, uint32_t interface, ns3::Ipv6Address prefixToUse=ns3::Ipv6Address::GetZero()) [member function]
---
>     ## ripng.h (module 'internet'): void ns3::RipNg::NotifyAddRoute(ns3::Ipv6Address dst, ns3::Ipv6Prefix mask, ns3::Ipv6Address nextHop, uint32_t interface, ns3::Ipv6Address prefixToUse=ns3::Ipv6Address::GetZero( )) [member function]
18449c16795
<                    [param('ns3::Ipv6Address', 'dst'), param('ns3::Ipv6Prefix', 'mask'), param('ns3::Ipv6Address', 'nextHop'), param('uint32_t', 'interface'), param('ns3::Ipv6Address', 'prefixToUse', default_value='ns3::Ipv6Address::GetZero()')], 
---
>                    [param('ns3::Ipv6Address', 'dst'), param('ns3::Ipv6Prefix', 'mask'), param('ns3::Ipv6Address', 'nextHop'), param('uint32_t', 'interface'), param('ns3::Ipv6Address', 'prefixToUse', default_value='ns3::Ipv6Address::GetZero( )')], 
18466c16812
<     ## ripng.h (module 'internet'): void ns3::RipNg::NotifyRemoveRoute(ns3::Ipv6Address dst, ns3::Ipv6Prefix mask, ns3::Ipv6Address nextHop, uint32_t interface, ns3::Ipv6Address prefixToUse=ns3::Ipv6Address::GetZero()) [member function]
---
>     ## ripng.h (module 'internet'): void ns3::RipNg::NotifyRemoveRoute(ns3::Ipv6Address dst, ns3::Ipv6Prefix mask, ns3::Ipv6Address nextHop, uint32_t interface, ns3::Ipv6Address prefixToUse=ns3::Ipv6Address::GetZero( )) [member function]
18469c16815
<                    [param('ns3::Ipv6Address', 'dst'), param('ns3::Ipv6Prefix', 'mask'), param('ns3::Ipv6Address', 'nextHop'), param('uint32_t', 'interface'), param('ns3::Ipv6Address', 'prefixToUse', default_value='ns3::Ipv6Address::GetZero()')], 
---
>                    [param('ns3::Ipv6Address', 'dst'), param('ns3::Ipv6Prefix', 'mask'), param('ns3::Ipv6Address', 'nextHop'), param('uint32_t', 'interface'), param('ns3::Ipv6Address', 'prefixToUse', default_value='ns3::Ipv6Address::GetZero( )')], 
18471c16817
<     ## ripng.h (module 'internet'): void ns3::RipNg::PrintRoutingTable(ns3::Ptr<ns3::OutputStreamWrapper> stream, ns3::Time::Unit unit=::ns3::Time::Unit::S) const [member function]
---
>     ## ripng.h (module 'internet'): void ns3::RipNg::PrintRoutingTable(ns3::Ptr<ns3::OutputStreamWrapper> stream) const [member function]
18474c16820
<                    [param('ns3::Ptr< ns3::OutputStreamWrapper >', 'stream'), param('ns3::Time::Unit', 'unit', default_value='::ns3::Time::Unit::S')], 
---
>                    [param('ns3::Ptr< ns3::OutputStreamWrapper >', 'stream')], 
18476c16822
<     ## ripng.h (module 'internet'): bool ns3::RipNg::RouteInput(ns3::Ptr<const ns3::Packet> p, ns3::Ipv6Header const & header, ns3::Ptr<const ns3::NetDevice> idev, ns3::Ipv6RoutingProtocol::UnicastForwardCallback ucb, ns3::Ipv6RoutingProtocol::MulticastForwardCallback mcb, ns3::Ipv6RoutingProtocol::LocalDeliverCallback lcb, ns3::Ipv6RoutingProtocol::ErrorCallback ecb) [member function]
---
>     ## ripng.h (module 'internet'): bool ns3::RipNg::RouteInput(ns3::Ptr<ns3::Packet const> p, ns3::Ipv6Header const & header, ns3::Ptr<const ns3::NetDevice> idev, ns3::Callback<void,ns3::Ptr<const ns3::NetDevice>,ns3::Ptr<ns3::Ipv6Route>,ns3::Ptr<const ns3::Packet>,const ns3::Ipv6Header&,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> ucb, ns3::Callback<void,ns3::Ptr<const ns3::NetDevice>,ns3::Ptr<ns3::Ipv6MulticastRoute>,ns3::Ptr<const ns3::Packet>,const ns3::Ipv6Header&,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> mcb, ns3::Callback<void,ns3::Ptr<const ns3::Packet>,const ns3::Ipv6Header&,unsigned int,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> lcb, ns3::Callback<void,ns3::Ptr<const ns3::Packet>,const ns3::Ipv6Header&,ns3::Socket::SocketErrno,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> ecb) [member function]
18503c16849
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
18508c16854
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
18514c16860
<     ## tcp-bic.h (module 'internet'): ns3::TcpBic::TcpBic(ns3::TcpBic const & sock) [constructor]
---
>     ## tcp-bic.h (module 'internet'): ns3::TcpBic::TcpBic(ns3::TcpBic const & sock) [copy constructor]
18541,18545d16886
<     ## tcp-bic.h (module 'internet'): void ns3::TcpBic::ReduceCwnd(ns3::Ptr<ns3::TcpSocketState> tcb) [member function]
<     cls.add_method('ReduceCwnd', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb')], 
<                    is_virtual=True)
18550,18629c16891
<                    is_virtual=True, visibility='protected')
<     return
< 
< def register_Ns3TcpClassicRecovery_methods(root_module, cls):
<     ## tcp-recovery-ops.h (module 'internet'): ns3::TcpClassicRecovery::TcpClassicRecovery() [constructor]
<     cls.add_constructor([])
<     ## tcp-recovery-ops.h (module 'internet'): ns3::TcpClassicRecovery::TcpClassicRecovery(ns3::TcpClassicRecovery const & recovery) [constructor]
<     cls.add_constructor([param('ns3::TcpClassicRecovery const &', 'recovery')])
<     ## tcp-recovery-ops.h (module 'internet'): void ns3::TcpClassicRecovery::DoRecovery(ns3::Ptr<ns3::TcpSocketState> tcb, uint32_t deliveredBytes) [member function]
<     cls.add_method('DoRecovery', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb'), param('uint32_t', 'deliveredBytes')], 
<                    is_virtual=True)
<     ## tcp-recovery-ops.h (module 'internet'): void ns3::TcpClassicRecovery::EnterRecovery(ns3::Ptr<ns3::TcpSocketState> tcb, uint32_t dupAckCount, uint32_t unAckDataCount, uint32_t deliveredBytes) [member function]
<     cls.add_method('EnterRecovery', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb'), param('uint32_t', 'dupAckCount'), param('uint32_t', 'unAckDataCount'), param('uint32_t', 'deliveredBytes')], 
<                    is_virtual=True)
<     ## tcp-recovery-ops.h (module 'internet'): void ns3::TcpClassicRecovery::ExitRecovery(ns3::Ptr<ns3::TcpSocketState> tcb) [member function]
<     cls.add_method('ExitRecovery', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb')], 
<                    is_virtual=True)
<     ## tcp-recovery-ops.h (module 'internet'): ns3::Ptr<ns3::TcpRecoveryOps> ns3::TcpClassicRecovery::Fork() [member function]
<     cls.add_method('Fork', 
<                    'ns3::Ptr< ns3::TcpRecoveryOps >', 
<                    [], 
<                    is_virtual=True)
<     ## tcp-recovery-ops.h (module 'internet'): std::string ns3::TcpClassicRecovery::GetName() const [member function]
<     cls.add_method('GetName', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## tcp-recovery-ops.h (module 'internet'): static ns3::TypeId ns3::TcpClassicRecovery::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     return
< 
< def register_Ns3TcpDctcp_methods(root_module, cls):
<     ## tcp-dctcp.h (module 'internet'): ns3::TcpDctcp::TcpDctcp() [constructor]
<     cls.add_constructor([])
<     ## tcp-dctcp.h (module 'internet'): ns3::TcpDctcp::TcpDctcp(ns3::TcpDctcp const & sock) [constructor]
<     cls.add_constructor([param('ns3::TcpDctcp const &', 'sock')])
<     ## tcp-dctcp.h (module 'internet'): void ns3::TcpDctcp::CwndEvent(ns3::Ptr<ns3::TcpSocketState> tcb, ns3::TcpSocketState::TcpCAEvent_t const event) [member function]
<     cls.add_method('CwndEvent', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb'), param('ns3::TcpSocketState::TcpCAEvent_t const', 'event')], 
<                    is_virtual=True)
<     ## tcp-dctcp.h (module 'internet'): ns3::Ptr<ns3::TcpCongestionOps> ns3::TcpDctcp::Fork() [member function]
<     cls.add_method('Fork', 
<                    'ns3::Ptr< ns3::TcpCongestionOps >', 
<                    [], 
<                    is_virtual=True)
<     ## tcp-dctcp.h (module 'internet'): std::string ns3::TcpDctcp::GetName() const [member function]
<     cls.add_method('GetName', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## tcp-dctcp.h (module 'internet'): static ns3::TypeId ns3::TcpDctcp::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## tcp-dctcp.h (module 'internet'): void ns3::TcpDctcp::Init(ns3::Ptr<ns3::TcpSocketState> tcb) [member function]
<     cls.add_method('Init', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb')], 
<                    is_virtual=True)
<     ## tcp-dctcp.h (module 'internet'): void ns3::TcpDctcp::PktsAcked(ns3::Ptr<ns3::TcpSocketState> tcb, uint32_t segmentsAcked, ns3::Time const & rtt) [member function]
<     cls.add_method('PktsAcked', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb'), param('uint32_t', 'segmentsAcked'), param('ns3::Time const &', 'rtt')], 
<                    is_virtual=True)
<     ## tcp-dctcp.h (module 'internet'): void ns3::TcpDctcp::ReduceCwnd(ns3::Ptr<ns3::TcpSocketState> tcb) [member function]
<     cls.add_method('ReduceCwnd', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb')], 
<                    is_virtual=True)
---
>                    visibility='protected', is_virtual=True)
18635c16897
<     ## tcp-highspeed.h (module 'internet'): ns3::TcpHighSpeed::TcpHighSpeed(ns3::TcpHighSpeed const & sock) [constructor]
---
>     ## tcp-highspeed.h (module 'internet'): ns3::TcpHighSpeed::TcpHighSpeed(ns3::TcpHighSpeed const & sock) [copy constructor]
18671c16933
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
18677c16939
<     ## tcp-htcp.h (module 'internet'): ns3::TcpHtcp::TcpHtcp(ns3::TcpHtcp const & sock) [constructor]
---
>     ## tcp-htcp.h (module 'internet'): ns3::TcpHtcp::TcpHtcp(ns3::TcpHtcp const & sock) [copy constructor]
18708c16970
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
18714c16976
<     ## tcp-hybla.h (module 'internet'): ns3::TcpHybla::TcpHybla(ns3::TcpHybla const & sock) [constructor]
---
>     ## tcp-hybla.h (module 'internet'): ns3::TcpHybla::TcpHybla(ns3::TcpHybla const & sock) [copy constructor]
18740c17002
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
18745c17007
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
18751c17013
<     ## tcp-illinois.h (module 'internet'): ns3::TcpIllinois::TcpIllinois(ns3::TcpIllinois const & sock) [constructor]
---
>     ## tcp-illinois.h (module 'internet'): ns3::TcpIllinois::TcpIllinois(ns3::TcpIllinois const & sock) [copy constructor]
18790a17053,17054
>     ## tcp-l4-protocol.h (module 'internet'): ns3::TcpL4Protocol::PROT_NUMBER [variable]
>     cls.add_static_attribute('PROT_NUMBER', 'uint8_t const', is_const=True)
18796,18797d17059
<     ## tcp-l4-protocol.h (module 'internet'): ns3::TcpL4Protocol::PROT_NUMBER [variable]
<     cls.add_static_attribute('PROT_NUMBER', 'uint8_t const', is_const=True)
18808,18811d17069
<     ## tcp-l4-protocol.h (module 'internet'): ns3::Ptr<ns3::Socket> ns3::TcpL4Protocol::CreateSocket(ns3::TypeId congestionTypeId, ns3::TypeId recoveryTypeId) [member function]
<     cls.add_method('CreateSocket', 
<                    'ns3::Ptr< ns3::Socket >', 
<                    [param('ns3::TypeId', 'congestionTypeId'), param('ns3::TypeId', 'recoveryTypeId')])
18824c17082
<     ## tcp-l4-protocol.h (module 'internet'): ns3::Ipv4EndPoint * ns3::TcpL4Protocol::Allocate(ns3::Ptr<ns3::NetDevice> boundNetDevice, uint16_t port) [member function]
---
>     ## tcp-l4-protocol.h (module 'internet'): ns3::Ipv4EndPoint * ns3::TcpL4Protocol::Allocate(uint16_t port) [member function]
18827,18828c17085,17086
<                    [param('ns3::Ptr< ns3::NetDevice >', 'boundNetDevice'), param('uint16_t', 'port')])
<     ## tcp-l4-protocol.h (module 'internet'): ns3::Ipv4EndPoint * ns3::TcpL4Protocol::Allocate(ns3::Ptr<ns3::NetDevice> boundNetDevice, ns3::Ipv4Address address, uint16_t port) [member function]
---
>                    [param('uint16_t', 'port')])
>     ## tcp-l4-protocol.h (module 'internet'): ns3::Ipv4EndPoint * ns3::TcpL4Protocol::Allocate(ns3::Ipv4Address address, uint16_t port) [member function]
18831,18832c17089,17090
<                    [param('ns3::Ptr< ns3::NetDevice >', 'boundNetDevice'), param('ns3::Ipv4Address', 'address'), param('uint16_t', 'port')])
<     ## tcp-l4-protocol.h (module 'internet'): ns3::Ipv4EndPoint * ns3::TcpL4Protocol::Allocate(ns3::Ptr<ns3::NetDevice> boundNetDevice, ns3::Ipv4Address localAddress, uint16_t localPort, ns3::Ipv4Address peerAddress, uint16_t peerPort) [member function]
---
>                    [param('ns3::Ipv4Address', 'address'), param('uint16_t', 'port')])
>     ## tcp-l4-protocol.h (module 'internet'): ns3::Ipv4EndPoint * ns3::TcpL4Protocol::Allocate(ns3::Ipv4Address localAddress, uint16_t localPort, ns3::Ipv4Address peerAddress, uint16_t peerPort) [member function]
18835c17093
<                    [param('ns3::Ptr< ns3::NetDevice >', 'boundNetDevice'), param('ns3::Ipv4Address', 'localAddress'), param('uint16_t', 'localPort'), param('ns3::Ipv4Address', 'peerAddress'), param('uint16_t', 'peerPort')])
---
>                    [param('ns3::Ipv4Address', 'localAddress'), param('uint16_t', 'localPort'), param('ns3::Ipv4Address', 'peerAddress'), param('uint16_t', 'peerPort')])
18844c17102
<     ## tcp-l4-protocol.h (module 'internet'): ns3::Ipv6EndPoint * ns3::TcpL4Protocol::Allocate6(ns3::Ptr<ns3::NetDevice> boundNetDevice, uint16_t port) [member function]
---
>     ## tcp-l4-protocol.h (module 'internet'): ns3::Ipv6EndPoint * ns3::TcpL4Protocol::Allocate6(uint16_t port) [member function]
18847,18848c17105,17106
<                    [param('ns3::Ptr< ns3::NetDevice >', 'boundNetDevice'), param('uint16_t', 'port')])
<     ## tcp-l4-protocol.h (module 'internet'): ns3::Ipv6EndPoint * ns3::TcpL4Protocol::Allocate6(ns3::Ptr<ns3::NetDevice> boundNetDevice, ns3::Ipv6Address address, uint16_t port) [member function]
---
>                    [param('uint16_t', 'port')])
>     ## tcp-l4-protocol.h (module 'internet'): ns3::Ipv6EndPoint * ns3::TcpL4Protocol::Allocate6(ns3::Ipv6Address address, uint16_t port) [member function]
18851,18852c17109,17110
<                    [param('ns3::Ptr< ns3::NetDevice >', 'boundNetDevice'), param('ns3::Ipv6Address', 'address'), param('uint16_t', 'port')])
<     ## tcp-l4-protocol.h (module 'internet'): ns3::Ipv6EndPoint * ns3::TcpL4Protocol::Allocate6(ns3::Ptr<ns3::NetDevice> boundNetDevice, ns3::Ipv6Address localAddress, uint16_t localPort, ns3::Ipv6Address peerAddress, uint16_t peerPort) [member function]
---
>                    [param('ns3::Ipv6Address', 'address'), param('uint16_t', 'port')])
>     ## tcp-l4-protocol.h (module 'internet'): ns3::Ipv6EndPoint * ns3::TcpL4Protocol::Allocate6(ns3::Ipv6Address localAddress, uint16_t localPort, ns3::Ipv6Address peerAddress, uint16_t peerPort) [member function]
18855c17113
<                    [param('ns3::Ptr< ns3::NetDevice >', 'boundNetDevice'), param('ns3::Ipv6Address', 'localAddress'), param('uint16_t', 'localPort'), param('ns3::Ipv6Address', 'peerAddress'), param('uint16_t', 'peerPort')])
---
>                    [param('ns3::Ipv6Address', 'localAddress'), param('uint16_t', 'localPort'), param('ns3::Ipv6Address', 'peerAddress'), param('uint16_t', 'peerPort')])
18897c17155
<     ## tcp-l4-protocol.h (module 'internet'): void ns3::TcpL4Protocol::SetDownTarget(ns3::IpL4Protocol::DownTargetCallback cb) [member function]
---
>     ## tcp-l4-protocol.h (module 'internet'): void ns3::TcpL4Protocol::SetDownTarget(ns3::Callback<void, ns3::Ptr<ns3::Packet>, ns3::Ipv4Address, ns3::Ipv4Address, unsigned char, ns3::Ptr<ns3::Ipv4Route>, ns3::empty, ns3::empty, ns3::empty, ns3::empty> cb) [member function]
18902c17160
<     ## tcp-l4-protocol.h (module 'internet'): void ns3::TcpL4Protocol::SetDownTarget6(ns3::IpL4Protocol::DownTargetCallback6 cb) [member function]
---
>     ## tcp-l4-protocol.h (module 'internet'): void ns3::TcpL4Protocol::SetDownTarget6(ns3::Callback<void, ns3::Ptr<ns3::Packet>, ns3::Ipv6Address, ns3::Ipv6Address, unsigned char, ns3::Ptr<ns3::Ipv6Route>, ns3::empty, ns3::empty, ns3::empty, ns3::empty> cb) [member function]
18912c17170
<     ## tcp-l4-protocol.h (module 'internet'): ns3::IpL4Protocol::DownTargetCallback ns3::TcpL4Protocol::GetDownTarget() const [member function]
---
>     ## tcp-l4-protocol.h (module 'internet'): ns3::Callback<void, ns3::Ptr<ns3::Packet>, ns3::Ipv4Address, ns3::Ipv4Address, unsigned char, ns3::Ptr<ns3::Ipv4Route>, ns3::empty, ns3::empty, ns3::empty, ns3::empty> ns3::TcpL4Protocol::GetDownTarget() const [member function]
18914c17172
<                    'ns3::IpL4Protocol::DownTargetCallback', 
---
>                    'ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Ipv4Address, ns3::Ipv4Address, unsigned char, ns3::Ptr< ns3::Ipv4Route >, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 
18917c17175
<     ## tcp-l4-protocol.h (module 'internet'): ns3::IpL4Protocol::DownTargetCallback6 ns3::TcpL4Protocol::GetDownTarget6() const [member function]
---
>     ## tcp-l4-protocol.h (module 'internet'): ns3::Callback<void, ns3::Ptr<ns3::Packet>, ns3::Ipv6Address, ns3::Ipv6Address, unsigned char, ns3::Ptr<ns3::Ipv6Route>, ns3::empty, ns3::empty, ns3::empty, ns3::empty> ns3::TcpL4Protocol::GetDownTarget6() const [member function]
18919c17177
<                    'ns3::IpL4Protocol::DownTargetCallback6', 
---
>                    'ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Ipv6Address, ns3::Ipv6Address, unsigned char, ns3::Ptr< ns3::Ipv6Route >, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 
18926c17184
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
18931c17189
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
18944,19095d17201
< def register_Ns3TcpLedbat_methods(root_module, cls):
<     ## tcp-ledbat.h (module 'internet'): ns3::TcpLedbat::TcpLedbat() [constructor]
<     cls.add_constructor([])
<     ## tcp-ledbat.h (module 'internet'): ns3::TcpLedbat::TcpLedbat(ns3::TcpLedbat const & sock) [constructor]
<     cls.add_constructor([param('ns3::TcpLedbat const &', 'sock')])
<     ## tcp-ledbat.h (module 'internet'): ns3::Ptr<ns3::TcpCongestionOps> ns3::TcpLedbat::Fork() [member function]
<     cls.add_method('Fork', 
<                    'ns3::Ptr< ns3::TcpCongestionOps >', 
<                    [], 
<                    is_virtual=True)
<     ## tcp-ledbat.h (module 'internet'): std::string ns3::TcpLedbat::GetName() const [member function]
<     cls.add_method('GetName', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## tcp-ledbat.h (module 'internet'): static ns3::TypeId ns3::TcpLedbat::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## tcp-ledbat.h (module 'internet'): void ns3::TcpLedbat::IncreaseWindow(ns3::Ptr<ns3::TcpSocketState> tcb, uint32_t segmentsAcked) [member function]
<     cls.add_method('IncreaseWindow', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb'), param('uint32_t', 'segmentsAcked')], 
<                    is_virtual=True)
<     ## tcp-ledbat.h (module 'internet'): void ns3::TcpLedbat::PktsAcked(ns3::Ptr<ns3::TcpSocketState> tcb, uint32_t segmentsAcked, ns3::Time const & rtt) [member function]
<     cls.add_method('PktsAcked', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb'), param('uint32_t', 'segmentsAcked'), param('ns3::Time const &', 'rtt')], 
<                    is_virtual=True)
<     ## tcp-ledbat.h (module 'internet'): void ns3::TcpLedbat::SetDoSs(ns3::TcpLedbat::SlowStartType doSS) [member function]
<     cls.add_method('SetDoSs', 
<                    'void', 
<                    [param('ns3::TcpLedbat::SlowStartType', 'doSS')])
<     ## tcp-ledbat.h (module 'internet'): void ns3::TcpLedbat::CongestionAvoidance(ns3::Ptr<ns3::TcpSocketState> tcb, uint32_t segmentsAcked) [member function]
<     cls.add_method('CongestionAvoidance', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb'), param('uint32_t', 'segmentsAcked')], 
<                    is_virtual=True, visibility='protected')
<     return
< 
< def register_Ns3TcpLp_methods(root_module, cls):
<     ## tcp-lp.h (module 'internet'): ns3::TcpLp::TcpLp() [constructor]
<     cls.add_constructor([])
<     ## tcp-lp.h (module 'internet'): ns3::TcpLp::TcpLp(ns3::TcpLp const & sock) [constructor]
<     cls.add_constructor([param('ns3::TcpLp const &', 'sock')])
<     ## tcp-lp.h (module 'internet'): ns3::Ptr<ns3::TcpCongestionOps> ns3::TcpLp::Fork() [member function]
<     cls.add_method('Fork', 
<                    'ns3::Ptr< ns3::TcpCongestionOps >', 
<                    [], 
<                    is_virtual=True)
<     ## tcp-lp.h (module 'internet'): std::string ns3::TcpLp::GetName() const [member function]
<     cls.add_method('GetName', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## tcp-lp.h (module 'internet'): static ns3::TypeId ns3::TcpLp::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## tcp-lp.h (module 'internet'): void ns3::TcpLp::PktsAcked(ns3::Ptr<ns3::TcpSocketState> tcb, uint32_t segmentsAcked, ns3::Time const & rtt) [member function]
<     cls.add_method('PktsAcked', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb'), param('uint32_t', 'segmentsAcked'), param('ns3::Time const &', 'rtt')], 
<                    is_virtual=True)
<     ## tcp-lp.h (module 'internet'): void ns3::TcpLp::CongestionAvoidance(ns3::Ptr<ns3::TcpSocketState> tcb, uint32_t segmentsAcked) [member function]
<     cls.add_method('CongestionAvoidance', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb'), param('uint32_t', 'segmentsAcked')], 
<                    is_virtual=True, visibility='protected')
<     return
< 
< def register_Ns3TcpPrrRecovery_methods(root_module, cls):
<     ## tcp-prr-recovery.h (module 'internet'): ns3::TcpPrrRecovery::TcpPrrRecovery() [constructor]
<     cls.add_constructor([])
<     ## tcp-prr-recovery.h (module 'internet'): ns3::TcpPrrRecovery::TcpPrrRecovery(ns3::TcpPrrRecovery const & sock) [constructor]
<     cls.add_constructor([param('ns3::TcpPrrRecovery const &', 'sock')])
<     ## tcp-prr-recovery.h (module 'internet'): void ns3::TcpPrrRecovery::DoRecovery(ns3::Ptr<ns3::TcpSocketState> tcb, uint32_t deliveredBytes) [member function]
<     cls.add_method('DoRecovery', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb'), param('uint32_t', 'deliveredBytes')], 
<                    is_virtual=True)
<     ## tcp-prr-recovery.h (module 'internet'): void ns3::TcpPrrRecovery::EnterRecovery(ns3::Ptr<ns3::TcpSocketState> tcb, uint32_t dupAckCount, uint32_t unAckDataCount, uint32_t deliveredBytes) [member function]
<     cls.add_method('EnterRecovery', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb'), param('uint32_t', 'dupAckCount'), param('uint32_t', 'unAckDataCount'), param('uint32_t', 'deliveredBytes')], 
<                    is_virtual=True)
<     ## tcp-prr-recovery.h (module 'internet'): void ns3::TcpPrrRecovery::ExitRecovery(ns3::Ptr<ns3::TcpSocketState> tcb) [member function]
<     cls.add_method('ExitRecovery', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb')], 
<                    is_virtual=True)
<     ## tcp-prr-recovery.h (module 'internet'): ns3::Ptr<ns3::TcpRecoveryOps> ns3::TcpPrrRecovery::Fork() [member function]
<     cls.add_method('Fork', 
<                    'ns3::Ptr< ns3::TcpRecoveryOps >', 
<                    [], 
<                    is_virtual=True)
<     ## tcp-prr-recovery.h (module 'internet'): std::string ns3::TcpPrrRecovery::GetName() const [member function]
<     cls.add_method('GetName', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## tcp-prr-recovery.h (module 'internet'): static ns3::TypeId ns3::TcpPrrRecovery::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## tcp-prr-recovery.h (module 'internet'): void ns3::TcpPrrRecovery::UpdateBytesSent(uint32_t bytesSent) [member function]
<     cls.add_method('UpdateBytesSent', 
<                    'void', 
<                    [param('uint32_t', 'bytesSent')], 
<                    is_virtual=True)
<     return
< 
< def register_Ns3TcpRateLinux_methods(root_module, cls):
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateLinux::TcpRateLinux() [constructor]
<     cls.add_constructor([])
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateLinux::TcpRateLinux(ns3::TcpRateLinux const & arg0) [constructor]
<     cls.add_constructor([param('ns3::TcpRateLinux const &', 'arg0')])
<     ## tcp-rate-ops.h (module 'internet'): void ns3::TcpRateLinux::CalculateAppLimited(uint32_t cWnd, uint32_t in_flight, uint32_t segmentSize, ns3::SequenceNumber32 const & tailSeq, ns3::SequenceNumber32 const & nextTx, uint32_t const lostOut, uint32_t const retransOut) [member function]
<     cls.add_method('CalculateAppLimited', 
<                    'void', 
<                    [param('uint32_t', 'cWnd'), param('uint32_t', 'in_flight'), param('uint32_t', 'segmentSize'), param('ns3::SequenceNumber32 const &', 'tailSeq'), param('ns3::SequenceNumber32 const &', 'nextTx'), param('uint32_t const', 'lostOut'), param('uint32_t const', 'retransOut')], 
<                    is_virtual=True)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateSample const & ns3::TcpRateLinux::GenerateSample(uint32_t delivered, uint32_t lost, bool is_sack_reneg, uint32_t priorInFlight, ns3::Time const & minRtt) [member function]
<     cls.add_method('GenerateSample', 
<                    'ns3::TcpRateOps::TcpRateSample const &', 
<                    [param('uint32_t', 'delivered'), param('uint32_t', 'lost'), param('bool', 'is_sack_reneg'), param('uint32_t', 'priorInFlight'), param('ns3::Time const &', 'minRtt')], 
<                    is_virtual=True)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateConnection const & ns3::TcpRateLinux::GetConnectionRate() [member function]
<     cls.add_method('GetConnectionRate', 
<                    'ns3::TcpRateOps::TcpRateConnection const &', 
<                    [], 
<                    is_virtual=True)
<     ## tcp-rate-ops.h (module 'internet'): static ns3::TypeId ns3::TcpRateLinux::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## tcp-rate-ops.h (module 'internet'): void ns3::TcpRateLinux::SkbDelivered(ns3::TcpTxItem * skb) [member function]
<     cls.add_method('SkbDelivered', 
<                    'void', 
<                    [param('ns3::TcpTxItem *', 'skb')], 
<                    is_virtual=True)
<     ## tcp-rate-ops.h (module 'internet'): void ns3::TcpRateLinux::SkbSent(ns3::TcpTxItem * skb, bool isStartOfTransmission) [member function]
<     cls.add_method('SkbSent', 
<                    'void', 
<                    [param('ns3::TcpTxItem *', 'skb'), param('bool', 'isStartOfTransmission')], 
<                    is_virtual=True)
<     return
< 
19098a17205,17206
>     ## nstime.h (module 'core'): ns3::TimeValue::TimeValue(ns3::TimeValue const & arg0) [copy constructor]
>     cls.add_constructor([param('ns3::TimeValue const &', 'arg0')])
19101,19102d17208
<     ## nstime.h (module 'core'): ns3::TimeValue::TimeValue(ns3::TimeValue const & arg0) [constructor]
<     cls.add_constructor([param('ns3::TimeValue const &', 'arg0')])
19108c17214
<     ## nstime.h (module 'core'): bool ns3::TimeValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
---
>     ## nstime.h (module 'core'): bool ns3::TimeValue::DeserializeFromString(std::string value, ns3::Ptr<ns3::AttributeChecker const> checker) [member function]
19118c17224
<     ## nstime.h (module 'core'): std::string ns3::TimeValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
---
>     ## nstime.h (module 'core'): std::string ns3::TimeValue::SerializeToString(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
19132c17238
<     ## type-id.h (module 'core'): ns3::TypeIdChecker::TypeIdChecker(ns3::TypeIdChecker const & arg0) [constructor]
---
>     ## type-id.h (module 'core'): ns3::TypeIdChecker::TypeIdChecker(ns3::TypeIdChecker const & arg0) [copy constructor]
19138a17245,17246
>     ## type-id.h (module 'core'): ns3::TypeIdValue::TypeIdValue(ns3::TypeIdValue const & arg0) [copy constructor]
>     cls.add_constructor([param('ns3::TypeIdValue const &', 'arg0')])
19141,19142d17248
<     ## type-id.h (module 'core'): ns3::TypeIdValue::TypeIdValue(ns3::TypeIdValue const & arg0) [constructor]
<     cls.add_constructor([param('ns3::TypeIdValue const &', 'arg0')])
19148c17254
<     ## type-id.h (module 'core'): bool ns3::TypeIdValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
---
>     ## type-id.h (module 'core'): bool ns3::TypeIdValue::DeserializeFromString(std::string value, ns3::Ptr<ns3::AttributeChecker const> checker) [member function]
19158c17264
<     ## type-id.h (module 'core'): std::string ns3::TypeIdValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
---
>     ## type-id.h (module 'core'): std::string ns3::TypeIdValue::SerializeToString(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
19169a17276,17277
>     ## udp-l4-protocol.h (module 'internet'): ns3::UdpL4Protocol::PROT_NUMBER [variable]
>     cls.add_static_attribute('PROT_NUMBER', 'uint8_t const', is_const=True)
19175,19176d17282
<     ## udp-l4-protocol.h (module 'internet'): ns3::UdpL4Protocol::PROT_NUMBER [variable]
<     cls.add_static_attribute('PROT_NUMBER', 'uint8_t const', is_const=True)
19200c17306
<     ## udp-l4-protocol.h (module 'internet'): ns3::Ipv4EndPoint * ns3::UdpL4Protocol::Allocate(ns3::Ptr<ns3::NetDevice> boundNetDevice, uint16_t port) [member function]
---
>     ## udp-l4-protocol.h (module 'internet'): ns3::Ipv4EndPoint * ns3::UdpL4Protocol::Allocate(uint16_t port) [member function]
19203,19204c17309,17310
<                    [param('ns3::Ptr< ns3::NetDevice >', 'boundNetDevice'), param('uint16_t', 'port')])
<     ## udp-l4-protocol.h (module 'internet'): ns3::Ipv4EndPoint * ns3::UdpL4Protocol::Allocate(ns3::Ptr<ns3::NetDevice> boundNetDevice, ns3::Ipv4Address address, uint16_t port) [member function]
---
>                    [param('uint16_t', 'port')])
>     ## udp-l4-protocol.h (module 'internet'): ns3::Ipv4EndPoint * ns3::UdpL4Protocol::Allocate(ns3::Ipv4Address address, uint16_t port) [member function]
19207,19208c17313,17314
<                    [param('ns3::Ptr< ns3::NetDevice >', 'boundNetDevice'), param('ns3::Ipv4Address', 'address'), param('uint16_t', 'port')])
<     ## udp-l4-protocol.h (module 'internet'): ns3::Ipv4EndPoint * ns3::UdpL4Protocol::Allocate(ns3::Ptr<ns3::NetDevice> boundNetDevice, ns3::Ipv4Address localAddress, uint16_t localPort, ns3::Ipv4Address peerAddress, uint16_t peerPort) [member function]
---
>                    [param('ns3::Ipv4Address', 'address'), param('uint16_t', 'port')])
>     ## udp-l4-protocol.h (module 'internet'): ns3::Ipv4EndPoint * ns3::UdpL4Protocol::Allocate(ns3::Ipv4Address localAddress, uint16_t localPort, ns3::Ipv4Address peerAddress, uint16_t peerPort) [member function]
19211c17317
<                    [param('ns3::Ptr< ns3::NetDevice >', 'boundNetDevice'), param('ns3::Ipv4Address', 'localAddress'), param('uint16_t', 'localPort'), param('ns3::Ipv4Address', 'peerAddress'), param('uint16_t', 'peerPort')])
---
>                    [param('ns3::Ipv4Address', 'localAddress'), param('uint16_t', 'localPort'), param('ns3::Ipv4Address', 'peerAddress'), param('uint16_t', 'peerPort')])
19220c17326
<     ## udp-l4-protocol.h (module 'internet'): ns3::Ipv6EndPoint * ns3::UdpL4Protocol::Allocate6(ns3::Ptr<ns3::NetDevice> boundNetDevice, uint16_t port) [member function]
---
>     ## udp-l4-protocol.h (module 'internet'): ns3::Ipv6EndPoint * ns3::UdpL4Protocol::Allocate6(uint16_t port) [member function]
19223,19224c17329,17330
<                    [param('ns3::Ptr< ns3::NetDevice >', 'boundNetDevice'), param('uint16_t', 'port')])
<     ## udp-l4-protocol.h (module 'internet'): ns3::Ipv6EndPoint * ns3::UdpL4Protocol::Allocate6(ns3::Ptr<ns3::NetDevice> boundNetDevice, ns3::Ipv6Address address, uint16_t port) [member function]
---
>                    [param('uint16_t', 'port')])
>     ## udp-l4-protocol.h (module 'internet'): ns3::Ipv6EndPoint * ns3::UdpL4Protocol::Allocate6(ns3::Ipv6Address address, uint16_t port) [member function]
19227,19228c17333,17334
<                    [param('ns3::Ptr< ns3::NetDevice >', 'boundNetDevice'), param('ns3::Ipv6Address', 'address'), param('uint16_t', 'port')])
<     ## udp-l4-protocol.h (module 'internet'): ns3::Ipv6EndPoint * ns3::UdpL4Protocol::Allocate6(ns3::Ptr<ns3::NetDevice> boundNetDevice, ns3::Ipv6Address localAddress, uint16_t localPort, ns3::Ipv6Address peerAddress, uint16_t peerPort) [member function]
---
>                    [param('ns3::Ipv6Address', 'address'), param('uint16_t', 'port')])
>     ## udp-l4-protocol.h (module 'internet'): ns3::Ipv6EndPoint * ns3::UdpL4Protocol::Allocate6(ns3::Ipv6Address localAddress, uint16_t localPort, ns3::Ipv6Address peerAddress, uint16_t peerPort) [member function]
19231c17337
<                    [param('ns3::Ptr< ns3::NetDevice >', 'boundNetDevice'), param('ns3::Ipv6Address', 'localAddress'), param('uint16_t', 'localPort'), param('ns3::Ipv6Address', 'peerAddress'), param('uint16_t', 'peerPort')])
---
>                    [param('ns3::Ipv6Address', 'localAddress'), param('uint16_t', 'localPort'), param('ns3::Ipv6Address', 'peerAddress'), param('uint16_t', 'peerPort')])
19276c17382
<     ## udp-l4-protocol.h (module 'internet'): void ns3::UdpL4Protocol::SetDownTarget(ns3::IpL4Protocol::DownTargetCallback cb) [member function]
---
>     ## udp-l4-protocol.h (module 'internet'): void ns3::UdpL4Protocol::SetDownTarget(ns3::Callback<void, ns3::Ptr<ns3::Packet>, ns3::Ipv4Address, ns3::Ipv4Address, unsigned char, ns3::Ptr<ns3::Ipv4Route>, ns3::empty, ns3::empty, ns3::empty, ns3::empty> cb) [member function]
19281c17387
<     ## udp-l4-protocol.h (module 'internet'): void ns3::UdpL4Protocol::SetDownTarget6(ns3::IpL4Protocol::DownTargetCallback6 cb) [member function]
---
>     ## udp-l4-protocol.h (module 'internet'): void ns3::UdpL4Protocol::SetDownTarget6(ns3::Callback<void, ns3::Ptr<ns3::Packet>, ns3::Ipv6Address, ns3::Ipv6Address, unsigned char, ns3::Ptr<ns3::Ipv6Route>, ns3::empty, ns3::empty, ns3::empty, ns3::empty> cb) [member function]
19286c17392
<     ## udp-l4-protocol.h (module 'internet'): ns3::IpL4Protocol::DownTargetCallback ns3::UdpL4Protocol::GetDownTarget() const [member function]
---
>     ## udp-l4-protocol.h (module 'internet'): ns3::Callback<void, ns3::Ptr<ns3::Packet>, ns3::Ipv4Address, ns3::Ipv4Address, unsigned char, ns3::Ptr<ns3::Ipv4Route>, ns3::empty, ns3::empty, ns3::empty, ns3::empty> ns3::UdpL4Protocol::GetDownTarget() const [member function]
19288c17394
<                    'ns3::IpL4Protocol::DownTargetCallback', 
---
>                    'ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Ipv4Address, ns3::Ipv4Address, unsigned char, ns3::Ptr< ns3::Ipv4Route >, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 
19291c17397
<     ## udp-l4-protocol.h (module 'internet'): ns3::IpL4Protocol::DownTargetCallback6 ns3::UdpL4Protocol::GetDownTarget6() const [member function]
---
>     ## udp-l4-protocol.h (module 'internet'): ns3::Callback<void, ns3::Ptr<ns3::Packet>, ns3::Ipv6Address, ns3::Ipv6Address, unsigned char, ns3::Ptr<ns3::Ipv6Route>, ns3::empty, ns3::empty, ns3::empty, ns3::empty> ns3::UdpL4Protocol::GetDownTarget6() const [member function]
19293c17399
<                    'ns3::IpL4Protocol::DownTargetCallback6', 
---
>                    'ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Ipv6Address, ns3::Ipv6Address, unsigned char, ns3::Ptr< ns3::Ipv6Route >, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 
19300c17406
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
19305c17411
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
19310a17417,17418
>     ## uinteger.h (module 'core'): ns3::UintegerValue::UintegerValue(ns3::UintegerValue const & arg0) [copy constructor]
>     cls.add_constructor([param('ns3::UintegerValue const &', 'arg0')])
19313,19314d17420
<     ## uinteger.h (module 'core'): ns3::UintegerValue::UintegerValue(ns3::UintegerValue const & arg0) [constructor]
<     cls.add_constructor([param('ns3::UintegerValue const &', 'arg0')])
19320c17426
<     ## uinteger.h (module 'core'): bool ns3::UintegerValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
---
>     ## uinteger.h (module 'core'): bool ns3::UintegerValue::DeserializeFromString(std::string value, ns3::Ptr<ns3::AttributeChecker const> checker) [member function]
19330c17436
<     ## uinteger.h (module 'core'): std::string ns3::UintegerValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
---
>     ## uinteger.h (module 'core'): std::string ns3::UintegerValue::SerializeToString(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
19344c17450
<     ## address.h (module 'network'): ns3::AddressChecker::AddressChecker(ns3::AddressChecker const & arg0) [constructor]
---
>     ## address.h (module 'network'): ns3::AddressChecker::AddressChecker(ns3::AddressChecker const & arg0) [copy constructor]
19350a17457,17458
>     ## address.h (module 'network'): ns3::AddressValue::AddressValue(ns3::AddressValue const & arg0) [copy constructor]
>     cls.add_constructor([param('ns3::AddressValue const &', 'arg0')])
19353,19354d17460
<     ## address.h (module 'network'): ns3::AddressValue::AddressValue(ns3::AddressValue const & arg0) [constructor]
<     cls.add_constructor([param('ns3::AddressValue const &', 'arg0')])
19360c17466
<     ## address.h (module 'network'): bool ns3::AddressValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
---
>     ## address.h (module 'network'): bool ns3::AddressValue::DeserializeFromString(std::string value, ns3::Ptr<ns3::AttributeChecker const> checker) [member function]
19370c17476
<     ## address.h (module 'network'): std::string ns3::AddressValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
---
>     ## address.h (module 'network'): std::string ns3::AddressValue::SerializeToString(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
19393c17499
<     ## bridge-channel.h (module 'bridge'): std::size_t ns3::BridgeChannel::GetNDevices() const [member function]
---
>     ## bridge-channel.h (module 'bridge'): uint32_t ns3::BridgeChannel::GetNDevices() const [member function]
19395c17501
<                    'std::size_t', 
---
>                    'uint32_t', 
19398c17504
<     ## bridge-channel.h (module 'bridge'): ns3::Ptr<ns3::NetDevice> ns3::BridgeChannel::GetDevice(std::size_t i) const [member function]
---
>     ## bridge-channel.h (module 'bridge'): ns3::Ptr<ns3::NetDevice> ns3::BridgeChannel::GetDevice(uint32_t i) const [member function]
19401c17507
<                    [param('std::size_t', 'i')], 
---
>                    [param('uint32_t', 'i')], 
19532c17638
<     ## bridge-net-device.h (module 'bridge'): void ns3::BridgeNetDevice::SetPromiscReceiveCallback(ns3::NetDevice::PromiscReceiveCallback cb) [member function]
---
>     ## bridge-net-device.h (module 'bridge'): void ns3::BridgeNetDevice::SetPromiscReceiveCallback(ns3::Callback<bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<ns3::Packet const>, unsigned short, ns3::Address const&, ns3::Address const&, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty> cb) [member function]
19537c17643
<     ## bridge-net-device.h (module 'bridge'): void ns3::BridgeNetDevice::SetReceiveCallback(ns3::NetDevice::ReceiveCallback cb) [member function]
---
>     ## bridge-net-device.h (module 'bridge'): void ns3::BridgeNetDevice::SetReceiveCallback(ns3::Callback<bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<ns3::Packet const>, unsigned short, ns3::Address const&, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> cb) [member function]
19551,19552c17657,17658
<                    is_virtual=True, visibility='protected')
<     ## bridge-net-device.h (module 'bridge'): void ns3::BridgeNetDevice::ForwardBroadcast(ns3::Ptr<ns3::NetDevice> incomingPort, ns3::Ptr<const ns3::Packet> packet, uint16_t protocol, ns3::Mac48Address src, ns3::Mac48Address dst) [member function]
---
>                    visibility='protected', is_virtual=True)
>     ## bridge-net-device.h (module 'bridge'): void ns3::BridgeNetDevice::ForwardBroadcast(ns3::Ptr<ns3::NetDevice> incomingPort, ns3::Ptr<ns3::Packet const> packet, uint16_t protocol, ns3::Mac48Address src, ns3::Mac48Address dst) [member function]
19557c17663
<     ## bridge-net-device.h (module 'bridge'): void ns3::BridgeNetDevice::ForwardUnicast(ns3::Ptr<ns3::NetDevice> incomingPort, ns3::Ptr<const ns3::Packet> packet, uint16_t protocol, ns3::Mac48Address src, ns3::Mac48Address dst) [member function]
---
>     ## bridge-net-device.h (module 'bridge'): void ns3::BridgeNetDevice::ForwardUnicast(ns3::Ptr<ns3::NetDevice> incomingPort, ns3::Ptr<ns3::Packet const> packet, uint16_t protocol, ns3::Mac48Address src, ns3::Mac48Address dst) [member function]
19572c17678
<     ## bridge-net-device.h (module 'bridge'): void ns3::BridgeNetDevice::ReceiveFromDevice(ns3::Ptr<ns3::NetDevice> device, ns3::Ptr<const ns3::Packet> packet, uint16_t protocol, ns3::Address const & source, ns3::Address const & destination, ns3::NetDevice::PacketType packetType) [member function]
---
>     ## bridge-net-device.h (module 'bridge'): void ns3::BridgeNetDevice::ReceiveFromDevice(ns3::Ptr<ns3::NetDevice> device, ns3::Ptr<ns3::Packet const> packet, uint16_t protocol, ns3::Address const & source, ns3::Address const & destination, ns3::NetDevice::PacketType packetType) [member function]
19579,20262c17685,17688
< def register_Ns3CallbackImpl__Bool_Ns3Ptr__lt__ns3NetDevice__gt___Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Const_ns3Address___amp___Const_ns3Address___amp___Ns3NetDevicePacketType_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
<     cls.add_constructor([])
<     ## callback.h (module 'core'): ns3::CallbackImpl<bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True)
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): bool ns3::CallbackImpl<bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<ns3::NetDevice> arg0, ns3::Ptr<const ns3::Packet> arg1, short unsigned int arg2, ns3::Address const & arg3, ns3::Address const & arg4, ns3::NetDevice::PacketType arg5) [member operator]
<     cls.add_method('operator()', 
<                    'bool', 
<                    [param('ns3::Ptr< ns3::NetDevice >', 'arg0'), param('ns3::Ptr< ns3::Packet const >', 'arg1'), param('short unsigned int', 'arg2'), param('ns3::Address const &', 'arg3'), param('ns3::Address const &', 'arg4'), param('ns3::NetDevice::PacketType', 'arg5')], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3CallbackImpl__Bool_Ns3Ptr__lt__ns3NetDevice__gt___Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Const_ns3Address___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
<     cls.add_constructor([])
<     ## callback.h (module 'core'): ns3::CallbackImpl<bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True)
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): bool ns3::CallbackImpl<bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<ns3::NetDevice> arg0, ns3::Ptr<const ns3::Packet> arg1, short unsigned int arg2, ns3::Address const & arg3) [member operator]
<     cls.add_method('operator()', 
<                    'bool', 
<                    [param('ns3::Ptr< ns3::NetDevice >', 'arg0'), param('ns3::Ptr< ns3::Packet const >', 'arg1'), param('short unsigned int', 'arg2'), param('ns3::Address const &', 'arg3')], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3CallbackImpl__Bool_Ns3Ptr__lt__ns3Socket__gt___Const_ns3Address___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<bool, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
<     cls.add_constructor([])
<     ## callback.h (module 'core'): ns3::CallbackImpl<bool, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<bool, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< bool, ns3::Ptr< ns3::Socket >, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<bool, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True)
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<bool, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): bool ns3::CallbackImpl<bool, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<ns3::Socket> arg0, ns3::Address const & arg1) [member operator]
<     cls.add_method('operator()', 
<                    'bool', 
<                    [param('ns3::Ptr< ns3::Socket >', 'arg0'), param('ns3::Address const &', 'arg1')], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3CallbackImpl__Ns3ObjectBase___star___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
<     cls.add_constructor([])
<     ## callback.h (module 'core'): ns3::CallbackImpl<ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True)
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): ns3::ObjectBase * ns3::CallbackImpl<ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()() [member operator]
<     cls.add_method('operator()', 
<                    'ns3::ObjectBase *', 
<                    [], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3CallbackImpl__Void_Const_ns3Ipv4Header___amp___Ns3Ptr__lt__const_ns3Packet__gt___Ns3Ipv4L3ProtocolDropReason_Ns3Ptr__lt__ns3Ipv4__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::Ipv4Header &, ns3::Ptr<const ns3::Packet>, ns3::Ipv4L3Protocol::DropReason, ns3::Ptr<ns3::Ipv4>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
<     cls.add_constructor([])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::Ipv4Header &, ns3::Ptr<const ns3::Packet>, ns3::Ipv4L3Protocol::DropReason, ns3::Ptr<ns3::Ipv4>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, const ns3::Ipv4Header &, ns3::Ptr<const ns3::Packet>, ns3::Ipv4L3Protocol::DropReason, ns3::Ptr<ns3::Ipv4>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ipv4Header const &, ns3::Ptr< ns3::Packet const >, ns3::Ipv4L3Protocol::DropReason, ns3::Ptr< ns3::Ipv4 >, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, const ns3::Ipv4Header &, ns3::Ptr<const ns3::Packet>, ns3::Ipv4L3Protocol::DropReason, ns3::Ptr<ns3::Ipv4>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True)
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, const ns3::Ipv4Header &, ns3::Ptr<const ns3::Packet>, ns3::Ipv4L3Protocol::DropReason, ns3::Ptr<ns3::Ipv4>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): void ns3::CallbackImpl<void, const ns3::Ipv4Header &, ns3::Ptr<const ns3::Packet>, ns3::Ipv4L3Protocol::DropReason, ns3::Ptr<ns3::Ipv4>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ipv4Header const & arg0, ns3::Ptr<const ns3::Packet> arg1, ns3::Ipv4L3Protocol::DropReason arg2, ns3::Ptr<ns3::Ipv4> arg3, unsigned int arg4) [member operator]
<     cls.add_method('operator()', 
<                    'void', 
<                    [param('ns3::Ipv4Header const &', 'arg0'), param('ns3::Ptr< ns3::Packet const >', 'arg1'), param('ns3::Ipv4L3Protocol::DropReason', 'arg2'), param('ns3::Ptr< ns3::Ipv4 >', 'arg3'), param('unsigned int', 'arg4')], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3CallbackImpl__Void_Const_ns3Ipv4Header___amp___Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::Ipv4Header &, ns3::Ptr<const ns3::Packet>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
<     cls.add_constructor([])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::Ipv4Header &, ns3::Ptr<const ns3::Packet>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, const ns3::Ipv4Header &, ns3::Ptr<const ns3::Packet>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ipv4Header const &, ns3::Ptr< ns3::Packet const >, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, const ns3::Ipv4Header &, ns3::Ptr<const ns3::Packet>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True)
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, const ns3::Ipv4Header &, ns3::Ptr<const ns3::Packet>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): void ns3::CallbackImpl<void, const ns3::Ipv4Header &, ns3::Ptr<const ns3::Packet>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ipv4Header const & arg0, ns3::Ptr<const ns3::Packet> arg1, unsigned int arg2) [member operator]
<     cls.add_method('operator()', 
<                    'void', 
<                    [param('ns3::Ipv4Header const &', 'arg0'), param('ns3::Ptr< ns3::Packet const >', 'arg1'), param('unsigned int', 'arg2')], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3CallbackImpl__Void_Const_ns3Ipv6Header___amp___Ns3Ptr__lt__const_ns3Packet__gt___Ns3Ipv6L3ProtocolDropReason_Ns3Ptr__lt__ns3Ipv6__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::Ipv6Header &, ns3::Ptr<const ns3::Packet>, ns3::Ipv6L3Protocol::DropReason, ns3::Ptr<ns3::Ipv6>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
<     cls.add_constructor([])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::Ipv6Header &, ns3::Ptr<const ns3::Packet>, ns3::Ipv6L3Protocol::DropReason, ns3::Ptr<ns3::Ipv6>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, const ns3::Ipv6Header &, ns3::Ptr<const ns3::Packet>, ns3::Ipv6L3Protocol::DropReason, ns3::Ptr<ns3::Ipv6>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ipv6Header const &, ns3::Ptr< ns3::Packet const >, ns3::Ipv6L3Protocol::DropReason, ns3::Ptr< ns3::Ipv6 >, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, const ns3::Ipv6Header &, ns3::Ptr<const ns3::Packet>, ns3::Ipv6L3Protocol::DropReason, ns3::Ptr<ns3::Ipv6>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True)
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, const ns3::Ipv6Header &, ns3::Ptr<const ns3::Packet>, ns3::Ipv6L3Protocol::DropReason, ns3::Ptr<ns3::Ipv6>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): void ns3::CallbackImpl<void, const ns3::Ipv6Header &, ns3::Ptr<const ns3::Packet>, ns3::Ipv6L3Protocol::DropReason, ns3::Ptr<ns3::Ipv6>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ipv6Header const & arg0, ns3::Ptr<const ns3::Packet> arg1, ns3::Ipv6L3Protocol::DropReason arg2, ns3::Ptr<ns3::Ipv6> arg3, unsigned int arg4) [member operator]
<     cls.add_method('operator()', 
<                    'void', 
<                    [param('ns3::Ipv6Header const &', 'arg0'), param('ns3::Ptr< ns3::Packet const >', 'arg1'), param('ns3::Ipv6L3Protocol::DropReason', 'arg2'), param('ns3::Ptr< ns3::Ipv6 >', 'arg3'), param('unsigned int', 'arg4')], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3CallbackImpl__Void_Const_ns3Ipv6Header___amp___Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::Ipv6Header &, ns3::Ptr<const ns3::Packet>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
<     cls.add_constructor([])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::Ipv6Header &, ns3::Ptr<const ns3::Packet>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, const ns3::Ipv6Header &, ns3::Ptr<const ns3::Packet>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ipv6Header const &, ns3::Ptr< ns3::Packet const >, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, const ns3::Ipv6Header &, ns3::Ptr<const ns3::Packet>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True)
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, const ns3::Ipv6Header &, ns3::Ptr<const ns3::Packet>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): void ns3::CallbackImpl<void, const ns3::Ipv6Header &, ns3::Ptr<const ns3::Packet>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ipv6Header const & arg0, ns3::Ptr<const ns3::Packet> arg1, unsigned int arg2) [member operator]
<     cls.add_method('operator()', 
<                    'void', 
<                    [param('ns3::Ipv6Header const &', 'arg0'), param('ns3::Ptr< ns3::Packet const >', 'arg1'), param('unsigned int', 'arg2')], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3CallbackImpl__Void_Const_ns3TcpRateOpsTcpRateConnection___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::TcpRateOps::TcpRateConnection &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
<     cls.add_constructor([])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::TcpRateOps::TcpRateConnection &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, const ns3::TcpRateOps::TcpRateConnection &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< void, ns3::TcpRateOps::TcpRateConnection const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, const ns3::TcpRateOps::TcpRateConnection &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True)
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, const ns3::TcpRateOps::TcpRateConnection &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): void ns3::CallbackImpl<void, const ns3::TcpRateOps::TcpRateConnection &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::TcpRateOps::TcpRateConnection const & arg0) [member operator]
<     cls.add_method('operator()', 
<                    'void', 
<                    [param('ns3::TcpRateOps::TcpRateConnection const &', 'arg0')], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3CallbackImpl__Void_Const_ns3TcpRateOpsTcpRateSample___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::TcpRateOps::TcpRateSample &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
<     cls.add_constructor([])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::TcpRateOps::TcpRateSample &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, const ns3::TcpRateOps::TcpRateSample &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< void, ns3::TcpRateOps::TcpRateSample const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, const ns3::TcpRateOps::TcpRateSample &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True)
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, const ns3::TcpRateOps::TcpRateSample &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): void ns3::CallbackImpl<void, const ns3::TcpRateOps::TcpRateSample &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::TcpRateOps::TcpRateSample const & arg0) [member operator]
<     cls.add_method('operator()', 
<                    'void', 
<                    [param('ns3::TcpRateOps::TcpRateSample const &', 'arg0')], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3CallbackImpl__Void_Double_Double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, double, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
<     cls.add_constructor([])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, double, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, double, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< void, double, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, double, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True)
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, double, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): void ns3::CallbackImpl<void, double, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(double arg0, double arg1) [member operator]
<     cls.add_method('operator()', 
<                    'void', 
<                    [param('double', 'arg0'), param('double', 'arg1')], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3CallbackImpl__Void_Ns3Ipv4Address_Unsigned_char_Unsigned_char_Unsigned_char_Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ipv4Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
<     cls.add_constructor([])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ipv4Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ipv4Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ipv4Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ipv4Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True)
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ipv4Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ipv4Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ipv4Address arg0, unsigned char arg1, unsigned char arg2, unsigned char arg3, unsigned int arg4) [member operator]
<     cls.add_method('operator()', 
<                    'void', 
<                    [param('ns3::Ipv4Address', 'arg0'), param('unsigned char', 'arg1'), param('unsigned char', 'arg2'), param('unsigned char', 'arg3'), param('unsigned int', 'arg4')], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3CallbackImpl__Void_Ns3Ipv6Address_Unsigned_char_Unsigned_char_Unsigned_char_Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ipv6Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
<     cls.add_constructor([])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ipv6Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ipv6Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ipv6Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ipv6Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True)
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ipv6Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ipv6Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ipv6Address arg0, unsigned char arg1, unsigned char arg2, unsigned char arg3, unsigned int arg4) [member operator]
<     cls.add_method('operator()', 
<                    'void', 
<                    [param('ns3::Ipv6Address', 'arg0'), param('unsigned char', 'arg1'), param('unsigned char', 'arg2'), param('unsigned char', 'arg3'), param('unsigned int', 'arg4')], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Const_ns3TcpHeader___amp___Ns3Ptr__lt__const_ns3TcpSocketBase__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, const ns3::TcpHeader &, ns3::Ptr<const ns3::TcpSocketBase>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
<     cls.add_constructor([])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, const ns3::TcpHeader &, ns3::Ptr<const ns3::TcpSocketBase>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, const ns3::TcpHeader &, ns3::Ptr<const ns3::TcpSocketBase>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::Packet const >, ns3::TcpHeader const &, ns3::Ptr< ns3::TcpSocketBase const >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, const ns3::TcpHeader &, ns3::Ptr<const ns3::TcpSocketBase>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True)
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, const ns3::TcpHeader &, ns3::Ptr<const ns3::TcpSocketBase>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, const ns3::TcpHeader &, ns3::Ptr<const ns3::TcpSocketBase>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<const ns3::Packet> arg0, ns3::TcpHeader const & arg1, ns3::Ptr<const ns3::TcpSocketBase> arg2) [member operator]
<     cls.add_method('operator()', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Packet const >', 'arg0'), param('ns3::TcpHeader const &', 'arg1'), param('ns3::Ptr< ns3::TcpSocketBase const >', 'arg2')], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3Ptr__lt__ns3Ipv4__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::Ptr<ns3::Ipv4>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
<     cls.add_constructor([])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::Ptr<ns3::Ipv4>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::Ptr<ns3::Ipv4>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::Packet const >, ns3::Ptr< ns3::Ipv4 >, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::Ptr<ns3::Ipv4>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True)
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::Ptr<ns3::Ipv4>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::Ptr<ns3::Ipv4>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<const ns3::Packet> arg0, ns3::Ptr<ns3::Ipv4> arg1, unsigned int arg2) [member operator]
<     cls.add_method('operator()', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Packet const >', 'arg0'), param('ns3::Ptr< ns3::Ipv4 >', 'arg1'), param('unsigned int', 'arg2')], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3Ptr__lt__ns3Ipv6__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::Ptr<ns3::Ipv6>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
<     cls.add_constructor([])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::Ptr<ns3::Ipv6>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::Ptr<ns3::Ipv6>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::Packet const >, ns3::Ptr< ns3::Ipv6 >, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::Ptr<ns3::Ipv6>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True)
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::Ptr<ns3::Ipv6>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::Ptr<ns3::Ipv6>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<const ns3::Packet> arg0, ns3::Ptr<ns3::Ipv6> arg1, unsigned int arg2) [member operator]
<     cls.add_method('operator()', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Packet const >', 'arg0'), param('ns3::Ptr< ns3::Ipv6 >', 'arg1'), param('unsigned int', 'arg2')], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
<     cls.add_constructor([])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::Packet const >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True)
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<const ns3::Packet> arg0) [member operator]
<     cls.add_method('operator()', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Packet const >', 'arg0')], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3NetDevice__gt___Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Const_ns3Address___amp___Const_ns3Address___amp___Ns3NetDevicePacketType_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
<     cls.add_constructor([])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True)
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<ns3::NetDevice> arg0, ns3::Ptr<const ns3::Packet> arg1, short unsigned int arg2, ns3::Address const & arg3, ns3::Address const & arg4, ns3::NetDevice::PacketType arg5) [member operator]
<     cls.add_method('operator()', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::NetDevice >', 'arg0'), param('ns3::Ptr< ns3::Packet const >', 'arg1'), param('short unsigned int', 'arg2'), param('ns3::Address const &', 'arg3'), param('ns3::Address const &', 'arg4'), param('ns3::NetDevice::PacketType', 'arg5')], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3NetDevice__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
<     cls.add_constructor([])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::NetDevice >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True)
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<ns3::NetDevice> arg0) [member operator]
<     cls.add_method('operator()', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::NetDevice >', 'arg0')], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Ns3Ipv4Address_Ns3Ipv4Address_Unsigned_char_Ns3Ptr__lt__ns3Ipv4Route__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv4Address, ns3::Ipv4Address, unsigned char, ns3::Ptr<ns3::Ipv4Route>, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
<     cls.add_constructor([])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv4Address, ns3::Ipv4Address, unsigned char, ns3::Ptr<ns3::Ipv4Route>, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv4Address, ns3::Ipv4Address, unsigned char, ns3::Ptr<ns3::Ipv4Route>, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::Packet >, ns3::Ipv4Address, ns3::Ipv4Address, unsigned char, ns3::Ptr< ns3::Ipv4Route >, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv4Address, ns3::Ipv4Address, unsigned char, ns3::Ptr<ns3::Ipv4Route>, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True)
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv4Address, ns3::Ipv4Address, unsigned char, ns3::Ptr<ns3::Ipv4Route>, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv4Address, ns3::Ipv4Address, unsigned char, ns3::Ptr<ns3::Ipv4Route>, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<ns3::Packet> arg0, ns3::Ipv4Address arg1, ns3::Ipv4Address arg2, unsigned char arg3, ns3::Ptr<ns3::Ipv4Route> arg4) [member operator]
<     cls.add_method('operator()', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Packet >', 'arg0'), param('ns3::Ipv4Address', 'arg1'), param('ns3::Ipv4Address', 'arg2'), param('unsigned char', 'arg3'), param('ns3::Ptr< ns3::Ipv4Route >', 'arg4')], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Ns3Ipv4Header_Unsigned_short_Ns3Ptr__lt__ns3Ipv4Interface__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv4Header, unsigned short, ns3::Ptr<ns3::Ipv4Interface>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
<     cls.add_constructor([])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv4Header, unsigned short, ns3::Ptr<ns3::Ipv4Interface>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv4Header, unsigned short, ns3::Ptr<ns3::Ipv4Interface>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::Packet >, ns3::Ipv4Header, unsigned short, ns3::Ptr< ns3::Ipv4Interface >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv4Header, unsigned short, ns3::Ptr<ns3::Ipv4Interface>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True)
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv4Header, unsigned short, ns3::Ptr<ns3::Ipv4Interface>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv4Header, unsigned short, ns3::Ptr<ns3::Ipv4Interface>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<ns3::Packet> arg0, ns3::Ipv4Header arg1, short unsigned int arg2, ns3::Ptr<ns3::Ipv4Interface> arg3) [member operator]
<     cls.add_method('operator()', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Packet >', 'arg0'), param('ns3::Ipv4Header', 'arg1'), param('short unsigned int', 'arg2'), param('ns3::Ptr< ns3::Ipv4Interface >', 'arg3')], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Ns3Ipv6Address_Ns3Ipv6Address_Unsigned_char_Ns3Ptr__lt__ns3Ipv6Route__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv6Address, ns3::Ipv6Address, unsigned char, ns3::Ptr<ns3::Ipv6Route>, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
<     cls.add_constructor([])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv6Address, ns3::Ipv6Address, unsigned char, ns3::Ptr<ns3::Ipv6Route>, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv6Address, ns3::Ipv6Address, unsigned char, ns3::Ptr<ns3::Ipv6Route>, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::Packet >, ns3::Ipv6Address, ns3::Ipv6Address, unsigned char, ns3::Ptr< ns3::Ipv6Route >, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv6Address, ns3::Ipv6Address, unsigned char, ns3::Ptr<ns3::Ipv6Route>, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True)
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv6Address, ns3::Ipv6Address, unsigned char, ns3::Ptr<ns3::Ipv6Route>, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv6Address, ns3::Ipv6Address, unsigned char, ns3::Ptr<ns3::Ipv6Route>, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<ns3::Packet> arg0, ns3::Ipv6Address arg1, ns3::Ipv6Address arg2, unsigned char arg3, ns3::Ptr<ns3::Ipv6Route> arg4) [member operator]
<     cls.add_method('operator()', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Packet >', 'arg0'), param('ns3::Ipv6Address', 'arg1'), param('ns3::Ipv6Address', 'arg2'), param('unsigned char', 'arg3'), param('ns3::Ptr< ns3::Ipv6Route >', 'arg4')], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Ns3Ipv6Header_Unsigned_short_Ns3Ptr__lt__ns3Ipv6Interface__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv6Header, unsigned short, ns3::Ptr<ns3::Ipv6Interface>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
<     cls.add_constructor([])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv6Header, unsigned short, ns3::Ptr<ns3::Ipv6Interface>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv6Header, unsigned short, ns3::Ptr<ns3::Ipv6Interface>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::Packet >, ns3::Ipv6Header, unsigned short, ns3::Ptr< ns3::Ipv6Interface >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv6Header, unsigned short, ns3::Ptr<ns3::Ipv6Interface>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True)
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv6Header, unsigned short, ns3::Ptr<ns3::Ipv6Interface>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv6Header, unsigned short, ns3::Ptr<ns3::Ipv6Interface>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<ns3::Packet> arg0, ns3::Ipv6Header arg1, short unsigned int arg2, ns3::Ptr<ns3::Ipv6Interface> arg3) [member operator]
<     cls.add_method('operator()', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Packet >', 'arg0'), param('ns3::Ipv6Header', 'arg1'), param('short unsigned int', 'arg2'), param('ns3::Ptr< ns3::Ipv6Interface >', 'arg3')], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3Socket__gt___Const_ns3Address___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
<     cls.add_constructor([])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::Socket >, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True)
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<ns3::Socket> arg0, ns3::Address const & arg1) [member operator]
<     cls.add_method('operator()', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Socket >', 'arg0'), param('ns3::Address const &', 'arg1')], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3Socket__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
<     cls.add_constructor([])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::Socket >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True)
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<ns3::Socket> arg0) [member operator]
<     cls.add_method('operator()', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Socket >', 'arg0')], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3Socket__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
<     cls.add_constructor([])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::Socket >, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True)
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<ns3::Socket> arg0, unsigned int arg1) [member operator]
<     cls.add_method('operator()', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Socket >', 'arg0'), param('unsigned int', 'arg1')], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3CallbackImpl__Void_Ns3SequenceNumber__lt__unsigned_int__int__gt___Ns3SequenceNumber__lt__unsigned_int__int__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::SequenceNumber<unsigned int, int>, ns3::SequenceNumber<unsigned int, int>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
<     cls.add_constructor([])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::SequenceNumber<unsigned int, int>, ns3::SequenceNumber<unsigned int, int>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::SequenceNumber<unsigned int, int>, ns3::SequenceNumber<unsigned int, int>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< void, ns3::SequenceNumber< unsigned int, int >, ns3::SequenceNumber< unsigned int, int >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::SequenceNumber<unsigned int, int>, ns3::SequenceNumber<unsigned int, int>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True)
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::SequenceNumber<unsigned int, int>, ns3::SequenceNumber<unsigned int, int>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::SequenceNumber<unsigned int, int>, ns3::SequenceNumber<unsigned int, int>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::SequenceNumber<unsigned int, int> arg0, ns3::SequenceNumber<unsigned int, int> arg1) [member operator]
<     cls.add_method('operator()', 
<                    'void', 
<                    [param('ns3::SequenceNumber< unsigned int, int >', 'arg0'), param('ns3::SequenceNumber< unsigned int, int >', 'arg1')], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3CallbackImpl__Void_Ns3TcpSocketTcpStates_t_Ns3TcpSocketTcpStates_t_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::TcpSocket::TcpStates_t, ns3::TcpSocket::TcpStates_t, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
<     cls.add_constructor([])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::TcpSocket::TcpStates_t, ns3::TcpSocket::TcpStates_t, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::TcpSocket::TcpStates_t, ns3::TcpSocket::TcpStates_t, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< void, ns3::TcpSocket::TcpStates_t, ns3::TcpSocket::TcpStates_t, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::TcpSocket::TcpStates_t, ns3::TcpSocket::TcpStates_t, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True)
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::TcpSocket::TcpStates_t, ns3::TcpSocket::TcpStates_t, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::TcpSocket::TcpStates_t, ns3::TcpSocket::TcpStates_t, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::TcpSocket::TcpStates_t arg0, ns3::TcpSocket::TcpStates_t arg1) [member operator]
<     cls.add_method('operator()', 
<                    'void', 
<                    [param('ns3::TcpSocket::TcpStates_t', 'arg0'), param('ns3::TcpSocket::TcpStates_t', 'arg1')], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3CallbackImpl__Void_Ns3TcpSocketStateEcnState_t_Ns3TcpSocketStateEcnState_t_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::TcpSocketState::EcnState_t, ns3::TcpSocketState::EcnState_t, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
<     cls.add_constructor([])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::TcpSocketState::EcnState_t, ns3::TcpSocketState::EcnState_t, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::TcpSocketState::EcnState_t, ns3::TcpSocketState::EcnState_t, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< void, ns3::TcpSocketState::EcnState_t, ns3::TcpSocketState::EcnState_t, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::TcpSocketState::EcnState_t, ns3::TcpSocketState::EcnState_t, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True)
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::TcpSocketState::EcnState_t, ns3::TcpSocketState::EcnState_t, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::TcpSocketState::EcnState_t, ns3::TcpSocketState::EcnState_t, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::TcpSocketState::EcnState_t arg0, ns3::TcpSocketState::EcnState_t arg1) [member operator]
<     cls.add_method('operator()', 
<                    'void', 
<                    [param('ns3::TcpSocketState::EcnState_t', 'arg0'), param('ns3::TcpSocketState::EcnState_t', 'arg1')], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3CallbackImpl__Void_Ns3TcpSocketStateTcpCongState_t_Ns3TcpSocketStateTcpCongState_t_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::TcpSocketState::TcpCongState_t, ns3::TcpSocketState::TcpCongState_t, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
<     cls.add_constructor([])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::TcpSocketState::TcpCongState_t, ns3::TcpSocketState::TcpCongState_t, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::TcpSocketState::TcpCongState_t, ns3::TcpSocketState::TcpCongState_t, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< void, ns3::TcpSocketState::TcpCongState_t, ns3::TcpSocketState::TcpCongState_t, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::TcpSocketState::TcpCongState_t, ns3::TcpSocketState::TcpCongState_t, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True)
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::TcpSocketState::TcpCongState_t, ns3::TcpSocketState::TcpCongState_t, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::TcpSocketState::TcpCongState_t, ns3::TcpSocketState::TcpCongState_t, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::TcpSocketState::TcpCongState_t arg0, ns3::TcpSocketState::TcpCongState_t arg1) [member operator]
<     cls.add_method('operator()', 
<                    'void', 
<                    [param('ns3::TcpSocketState::TcpCongState_t', 'arg0'), param('ns3::TcpSocketState::TcpCongState_t', 'arg1')], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3CallbackImpl__Void_Ns3Time_Ns3Time_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Time, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
<     cls.add_constructor([])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Time, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Time, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Time, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Time, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True)
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Time, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Time, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Time arg0, ns3::Time arg1) [member operator]
<     cls.add_method('operator()', 
<                    'void', 
<                    [param('ns3::Time', 'arg0'), param('ns3::Time', 'arg1')], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3CallbackImpl__Void_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
---
> def register_Ns3FqCoDelIpv4PacketFilter_methods(root_module, cls):
>     ## ipv4-packet-filter.h (module 'internet'): ns3::FqCoDelIpv4PacketFilter::FqCoDelIpv4PacketFilter(ns3::FqCoDelIpv4PacketFilter const & arg0) [copy constructor]
>     cls.add_constructor([param('ns3::FqCoDelIpv4PacketFilter const &', 'arg0')])
>     ## ipv4-packet-filter.h (module 'internet'): ns3::FqCoDelIpv4PacketFilter::FqCoDelIpv4PacketFilter() [constructor]
20264,20268c17690,17692
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
---
>     ## ipv4-packet-filter.h (module 'internet'): static ns3::TypeId ns3::FqCoDelIpv4PacketFilter::GetTypeId() [member function]
>     cls.add_method('GetTypeId', 
>                    'ns3::TypeId', 
20271,20280c17695,17699
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()() [member operator]
<     cls.add_method('operator()', 
<                    'void', 
<                    [], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
---
>     ## ipv4-packet-filter.h (module 'internet'): int32_t ns3::FqCoDelIpv4PacketFilter::DoClassify(ns3::Ptr<ns3::QueueDiscItem> item) const [member function]
>     cls.add_method('DoClassify', 
>                    'int32_t', 
>                    [param('ns3::Ptr< ns3::QueueDiscItem >', 'item')], 
>                    is_const=True, visibility='private', is_virtual=True)
20283,20284c17702,17705
< def register_Ns3CallbackImpl__Void_Unsigned_int_Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned int, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
---
> def register_Ns3FqCoDelIpv6PacketFilter_methods(root_module, cls):
>     ## ipv6-packet-filter.h (module 'internet'): ns3::FqCoDelIpv6PacketFilter::FqCoDelIpv6PacketFilter(ns3::FqCoDelIpv6PacketFilter const & arg0) [copy constructor]
>     cls.add_constructor([param('ns3::FqCoDelIpv6PacketFilter const &', 'arg0')])
>     ## ipv6-packet-filter.h (module 'internet'): ns3::FqCoDelIpv6PacketFilter::FqCoDelIpv6PacketFilter() [constructor]
20286,20290c17707,17709
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned int, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, unsigned int, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< void, unsigned int, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, unsigned int, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
---
>     ## ipv6-packet-filter.h (module 'internet'): static ns3::TypeId ns3::FqCoDelIpv6PacketFilter::GetTypeId() [member function]
>     cls.add_method('GetTypeId', 
>                    'ns3::TypeId', 
20293,20302c17712,17716
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, unsigned int, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): void ns3::CallbackImpl<void, unsigned int, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(unsigned int arg0, unsigned int arg1) [member operator]
<     cls.add_method('operator()', 
<                    'void', 
<                    [param('unsigned int', 'arg0'), param('unsigned int', 'arg1')], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
---
>     ## ipv6-packet-filter.h (module 'internet'): int32_t ns3::FqCoDelIpv6PacketFilter::DoClassify(ns3::Ptr<ns3::QueueDiscItem> item) const [member function]
>     cls.add_method('DoClassify', 
>                    'int32_t', 
>                    [param('ns3::Ptr< ns3::QueueDiscItem >', 'item')], 
>                    is_const=True, visibility='private', is_virtual=True)
20306c17720
<     ## icmpv4-l4-protocol.h (module 'internet'): ns3::Icmpv4L4Protocol::Icmpv4L4Protocol(ns3::Icmpv4L4Protocol const & arg0) [constructor]
---
>     ## icmpv4-l4-protocol.h (module 'internet'): ns3::Icmpv4L4Protocol::Icmpv4L4Protocol(ns3::Icmpv4L4Protocol const & arg0) [copy constructor]
20310c17724
<     ## icmpv4-l4-protocol.h (module 'internet'): ns3::IpL4Protocol::DownTargetCallback ns3::Icmpv4L4Protocol::GetDownTarget() const [member function]
---
>     ## icmpv4-l4-protocol.h (module 'internet'): ns3::Callback<void, ns3::Ptr<ns3::Packet>, ns3::Ipv4Address, ns3::Ipv4Address, unsigned char, ns3::Ptr<ns3::Ipv4Route>, ns3::empty, ns3::empty, ns3::empty, ns3::empty> ns3::Icmpv4L4Protocol::GetDownTarget() const [member function]
20312c17726
<                    'ns3::IpL4Protocol::DownTargetCallback', 
---
>                    'ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Ipv4Address, ns3::Ipv4Address, unsigned char, ns3::Ptr< ns3::Ipv4Route >, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 
20315c17729
<     ## icmpv4-l4-protocol.h (module 'internet'): ns3::IpL4Protocol::DownTargetCallback6 ns3::Icmpv4L4Protocol::GetDownTarget6() const [member function]
---
>     ## icmpv4-l4-protocol.h (module 'internet'): ns3::Callback<void, ns3::Ptr<ns3::Packet>, ns3::Ipv6Address, ns3::Ipv6Address, unsigned char, ns3::Ptr<ns3::Ipv6Route>, ns3::empty, ns3::empty, ns3::empty, ns3::empty> ns3::Icmpv4L4Protocol::GetDownTarget6() const [member function]
20317c17731
<                    'ns3::IpL4Protocol::DownTargetCallback6', 
---
>                    'ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Ipv6Address, ns3::Ipv6Address, unsigned char, ns3::Ptr< ns3::Ipv6Route >, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 
20345c17759
<     ## icmpv4-l4-protocol.h (module 'internet'): void ns3::Icmpv4L4Protocol::SendDestUnreachFragNeeded(ns3::Ipv4Header header, ns3::Ptr<const ns3::Packet> orgData, uint16_t nextHopMtu) [member function]
---
>     ## icmpv4-l4-protocol.h (module 'internet'): void ns3::Icmpv4L4Protocol::SendDestUnreachFragNeeded(ns3::Ipv4Header header, ns3::Ptr<ns3::Packet const> orgData, uint16_t nextHopMtu) [member function]
20349c17763
<     ## icmpv4-l4-protocol.h (module 'internet'): void ns3::Icmpv4L4Protocol::SendDestUnreachPort(ns3::Ipv4Header header, ns3::Ptr<const ns3::Packet> orgData) [member function]
---
>     ## icmpv4-l4-protocol.h (module 'internet'): void ns3::Icmpv4L4Protocol::SendDestUnreachPort(ns3::Ipv4Header header, ns3::Ptr<ns3::Packet const> orgData) [member function]
20353c17767
<     ## icmpv4-l4-protocol.h (module 'internet'): void ns3::Icmpv4L4Protocol::SendTimeExceededTtl(ns3::Ipv4Header header, ns3::Ptr<const ns3::Packet> orgData, bool isFragment) [member function]
---
>     ## icmpv4-l4-protocol.h (module 'internet'): void ns3::Icmpv4L4Protocol::SendTimeExceededTtl(ns3::Ipv4Header header, ns3::Ptr<ns3::Packet const> orgData) [member function]
20356,20357c17770,17771
<                    [param('ns3::Ipv4Header', 'header'), param('ns3::Ptr< ns3::Packet const >', 'orgData'), param('bool', 'isFragment')])
<     ## icmpv4-l4-protocol.h (module 'internet'): void ns3::Icmpv4L4Protocol::SetDownTarget(ns3::IpL4Protocol::DownTargetCallback cb) [member function]
---
>                    [param('ns3::Ipv4Header', 'header'), param('ns3::Ptr< ns3::Packet const >', 'orgData')])
>     ## icmpv4-l4-protocol.h (module 'internet'): void ns3::Icmpv4L4Protocol::SetDownTarget(ns3::Callback<void, ns3::Ptr<ns3::Packet>, ns3::Ipv4Address, ns3::Ipv4Address, unsigned char, ns3::Ptr<ns3::Ipv4Route>, ns3::empty, ns3::empty, ns3::empty, ns3::empty> cb) [member function]
20362c17776
<     ## icmpv4-l4-protocol.h (module 'internet'): void ns3::Icmpv4L4Protocol::SetDownTarget6(ns3::IpL4Protocol::DownTargetCallback6 cb) [member function]
---
>     ## icmpv4-l4-protocol.h (module 'internet'): void ns3::Icmpv4L4Protocol::SetDownTarget6(ns3::Callback<void, ns3::Ptr<ns3::Packet>, ns3::Ipv6Address, ns3::Ipv6Address, unsigned char, ns3::Ptr<ns3::Ipv6Route>, ns3::empty, ns3::empty, ns3::empty, ns3::empty> cb) [member function]
20377c17791
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
20382c17796
<                    is_virtual=True, visibility='private')
---
>                    visibility='private', is_virtual=True)
20386c17800
<     ## icmpv6-l4-protocol.h (module 'internet'): ns3::Icmpv6L4Protocol::Icmpv6L4Protocol(ns3::Icmpv6L4Protocol const & arg0) [constructor]
---
>     ## icmpv6-l4-protocol.h (module 'internet'): ns3::Icmpv6L4Protocol::Icmpv6L4Protocol(ns3::Icmpv6L4Protocol const & arg0) [copy constructor]
20397,20398c17811
<                    [param('ns3::Ptr< ns3::NetDevice >', 'device'), param('ns3::Ptr< ns3::Ipv6Interface >', 'interface')], 
<                    is_virtual=True)
---
>                    [param('ns3::Ptr< ns3::NetDevice >', 'device'), param('ns3::Ptr< ns3::Ipv6Interface >', 'interface')])
20407c17820
<     ## icmpv6-l4-protocol.h (module 'internet'): ns3::NdiscCache::Ipv6PayloadHeaderPair ns3::Icmpv6L4Protocol::ForgeEchoRequest(ns3::Ipv6Address src, ns3::Ipv6Address dst, uint16_t id, uint16_t seq, ns3::Ptr<ns3::Packet> data) [member function]
---
>     ## icmpv6-l4-protocol.h (module 'internet'): std::pair<ns3::Ptr<ns3::Packet>,ns3::Ipv6Header> ns3::Icmpv6L4Protocol::ForgeEchoRequest(ns3::Ipv6Address src, ns3::Ipv6Address dst, uint16_t id, uint16_t seq, ns3::Ptr<ns3::Packet> data) [member function]
20409c17822
<                    'ns3::NdiscCache::Ipv6PayloadHeaderPair', 
---
>                    'std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv6Header >', 
20411c17824
<     ## icmpv6-l4-protocol.h (module 'internet'): ns3::NdiscCache::Ipv6PayloadHeaderPair ns3::Icmpv6L4Protocol::ForgeNA(ns3::Ipv6Address src, ns3::Ipv6Address dst, ns3::Address * hardwareAddress, uint8_t flags) [member function]
---
>     ## icmpv6-l4-protocol.h (module 'internet'): std::pair<ns3::Ptr<ns3::Packet>,ns3::Ipv6Header> ns3::Icmpv6L4Protocol::ForgeNA(ns3::Ipv6Address src, ns3::Ipv6Address dst, ns3::Address * hardwareAddress, uint8_t flags) [member function]
20413c17826
<                    'ns3::NdiscCache::Ipv6PayloadHeaderPair', 
---
>                    'std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv6Header >', 
20415c17828
<     ## icmpv6-l4-protocol.h (module 'internet'): ns3::NdiscCache::Ipv6PayloadHeaderPair ns3::Icmpv6L4Protocol::ForgeNS(ns3::Ipv6Address src, ns3::Ipv6Address dst, ns3::Ipv6Address target, ns3::Address hardwareAddress) [member function]
---
>     ## icmpv6-l4-protocol.h (module 'internet'): std::pair<ns3::Ptr<ns3::Packet>,ns3::Ipv6Header> ns3::Icmpv6L4Protocol::ForgeNS(ns3::Ipv6Address src, ns3::Ipv6Address dst, ns3::Ipv6Address target, ns3::Address hardwareAddress) [member function]
20417c17830
<                    'ns3::NdiscCache::Ipv6PayloadHeaderPair', 
---
>                    'std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv6Header >', 
20419c17832
<     ## icmpv6-l4-protocol.h (module 'internet'): ns3::NdiscCache::Ipv6PayloadHeaderPair ns3::Icmpv6L4Protocol::ForgeRS(ns3::Ipv6Address src, ns3::Ipv6Address dst, ns3::Address hardwareAddress) [member function]
---
>     ## icmpv6-l4-protocol.h (module 'internet'): std::pair<ns3::Ptr<ns3::Packet>,ns3::Ipv6Header> ns3::Icmpv6L4Protocol::ForgeRS(ns3::Ipv6Address src, ns3::Ipv6Address dst, ns3::Address hardwareAddress) [member function]
20421c17834
<                    'ns3::NdiscCache::Ipv6PayloadHeaderPair', 
---
>                    'std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv6Header >', 
20428,20451d17840
<     ## icmpv6-l4-protocol.h (module 'internet'): ns3::Time ns3::Icmpv6L4Protocol::GetDelayFirstProbe() const [member function]
<     cls.add_method('GetDelayFirstProbe', 
<                    'ns3::Time', 
<                    [], 
<                    is_const=True)
<     ## icmpv6-l4-protocol.h (module 'internet'): ns3::TypeId ns3::Icmpv6L4Protocol::GetInstanceTypeId() const [member function]
<     cls.add_method('GetInstanceTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## icmpv6-l4-protocol.h (module 'internet'): uint8_t ns3::Icmpv6L4Protocol::GetMaxMulticastSolicit() const [member function]
<     cls.add_method('GetMaxMulticastSolicit', 
<                    'uint8_t', 
<                    [], 
<                    is_const=True)
<     ## icmpv6-l4-protocol.h (module 'internet'): uint8_t ns3::Icmpv6L4Protocol::GetMaxUnicastSolicit() const [member function]
<     cls.add_method('GetMaxUnicastSolicit', 
<                    'uint8_t', 
<                    [], 
<                    is_const=True)
<     ## icmpv6-l4-protocol.h (module 'internet'): ns3::Ptr<ns3::Node> ns3::Icmpv6L4Protocol::GetNode() [member function]
<     cls.add_method('GetNode', 
<                    'ns3::Ptr< ns3::Node >', 
<                    [])
20457,20466d17845
<     ## icmpv6-l4-protocol.h (module 'internet'): ns3::Time ns3::Icmpv6L4Protocol::GetReachableTime() const [member function]
<     cls.add_method('GetReachableTime', 
<                    'ns3::Time', 
<                    [], 
<                    is_const=True)
<     ## icmpv6-l4-protocol.h (module 'internet'): ns3::Time ns3::Icmpv6L4Protocol::GetRetransmissionTime() const [member function]
<     cls.add_method('GetRetransmissionTime', 
<                    'ns3::Time', 
<                    [], 
<                    is_const=True)
20545,20546c17924
<                    [param('ns3::Ipv6Address', 'src'), param('ns3::Ipv6Address', 'dst'), param('ns3::Ipv6Address', 'target'), param('ns3::Address', 'hardwareAddress')], 
<                    is_virtual=True)
---
>                    [param('ns3::Ipv6Address', 'src'), param('ns3::Ipv6Address', 'dst'), param('ns3::Ipv6Address', 'target'), param('ns3::Address', 'hardwareAddress')])
20558a17937,17964
>     ## icmpv6-l4-protocol.h (module 'internet'): ns3::Icmpv6L4Protocol::DELAY_FIRST_PROBE_TIME [variable]
>     cls.add_static_attribute('DELAY_FIRST_PROBE_TIME', 'uint8_t const', is_const=True)
>     ## icmpv6-l4-protocol.h (module 'internet'): ns3::Icmpv6L4Protocol::MAX_ANYCAST_DELAY_TIME [variable]
>     cls.add_static_attribute('MAX_ANYCAST_DELAY_TIME', 'uint8_t const', is_const=True)
>     ## icmpv6-l4-protocol.h (module 'internet'): ns3::Icmpv6L4Protocol::MAX_FINAL_RTR_ADVERTISEMENTS [variable]
>     cls.add_static_attribute('MAX_FINAL_RTR_ADVERTISEMENTS', 'uint8_t const', is_const=True)
>     ## icmpv6-l4-protocol.h (module 'internet'): ns3::Icmpv6L4Protocol::MAX_INITIAL_RTR_ADVERTISEMENTS [variable]
>     cls.add_static_attribute('MAX_INITIAL_RTR_ADVERTISEMENTS', 'uint8_t const', is_const=True)
>     ## icmpv6-l4-protocol.h (module 'internet'): ns3::Icmpv6L4Protocol::MAX_INITIAL_RTR_ADVERT_INTERVAL [variable]
>     cls.add_static_attribute('MAX_INITIAL_RTR_ADVERT_INTERVAL', 'uint8_t const', is_const=True)
>     ## icmpv6-l4-protocol.h (module 'internet'): ns3::Icmpv6L4Protocol::MAX_MULTICAST_SOLICIT [variable]
>     cls.add_static_attribute('MAX_MULTICAST_SOLICIT', 'uint8_t const', is_const=True)
>     ## icmpv6-l4-protocol.h (module 'internet'): ns3::Icmpv6L4Protocol::MAX_NEIGHBOR_ADVERTISEMENT [variable]
>     cls.add_static_attribute('MAX_NEIGHBOR_ADVERTISEMENT', 'uint8_t const', is_const=True)
>     ## icmpv6-l4-protocol.h (module 'internet'): ns3::Icmpv6L4Protocol::MAX_RANDOM_FACTOR [variable]
>     cls.add_static_attribute('MAX_RANDOM_FACTOR', 'double const', is_const=True)
>     ## icmpv6-l4-protocol.h (module 'internet'): ns3::Icmpv6L4Protocol::MAX_RA_DELAY_TIME [variable]
>     cls.add_static_attribute('MAX_RA_DELAY_TIME', 'uint32_t const', is_const=True)
>     ## icmpv6-l4-protocol.h (module 'internet'): ns3::Icmpv6L4Protocol::MAX_RTR_SOLICITATIONS [variable]
>     cls.add_static_attribute('MAX_RTR_SOLICITATIONS', 'uint8_t const', is_const=True)
>     ## icmpv6-l4-protocol.h (module 'internet'): ns3::Icmpv6L4Protocol::MAX_RTR_SOLICITATION_DELAY [variable]
>     cls.add_static_attribute('MAX_RTR_SOLICITATION_DELAY', 'uint8_t const', is_const=True)
>     ## icmpv6-l4-protocol.h (module 'internet'): ns3::Icmpv6L4Protocol::MAX_UNICAST_SOLICIT [variable]
>     cls.add_static_attribute('MAX_UNICAST_SOLICIT', 'uint8_t const', is_const=True)
>     ## icmpv6-l4-protocol.h (module 'internet'): ns3::Icmpv6L4Protocol::MIN_DELAY_BETWEEN_RAS [variable]
>     cls.add_static_attribute('MIN_DELAY_BETWEEN_RAS', 'uint8_t const', is_const=True)
>     ## icmpv6-l4-protocol.h (module 'internet'): ns3::Icmpv6L4Protocol::MIN_RANDOM_FACTOR [variable]
>     cls.add_static_attribute('MIN_RANDOM_FACTOR', 'double const', is_const=True)
20560a17967,17972
>     ## icmpv6-l4-protocol.h (module 'internet'): ns3::Icmpv6L4Protocol::REACHABLE_TIME [variable]
>     cls.add_static_attribute('REACHABLE_TIME', 'uint32_t const', is_const=True)
>     ## icmpv6-l4-protocol.h (module 'internet'): ns3::Icmpv6L4Protocol::RETRANS_TIMER [variable]
>     cls.add_static_attribute('RETRANS_TIMER', 'uint32_t const', is_const=True)
>     ## icmpv6-l4-protocol.h (module 'internet'): ns3::Icmpv6L4Protocol::RTR_SOLICITATION_INTERVAL [variable]
>     cls.add_static_attribute('RTR_SOLICITATION_INTERVAL', 'uint8_t const', is_const=True)
20565,20576c17977,17978
<                    is_virtual=True, visibility='protected')
<     ## icmpv6-l4-protocol.h (module 'internet'): ns3::Ptr<ns3::NdiscCache> ns3::Icmpv6L4Protocol::FindCache(ns3::Ptr<ns3::NetDevice> device) [member function]
<     cls.add_method('FindCache', 
<                    'ns3::Ptr< ns3::NdiscCache >', 
<                    [param('ns3::Ptr< ns3::NetDevice >', 'device')], 
<                    visibility='protected')
<     ## icmpv6-l4-protocol.h (module 'internet'): void ns3::Icmpv6L4Protocol::Forward(ns3::Ipv6Address source, ns3::Icmpv6Header icmp, uint32_t info, ns3::Ipv6Header ipHeader, uint8_t const * payload) [member function]
<     cls.add_method('Forward', 
<                    'void', 
<                    [param('ns3::Ipv6Address', 'source'), param('ns3::Icmpv6Header', 'icmp'), param('uint32_t', 'info'), param('ns3::Ipv6Header', 'ipHeader'), param('uint8_t const *', 'payload')], 
<                    visibility='protected')
<     ## icmpv6-l4-protocol.h (module 'internet'): ns3::IpL4Protocol::DownTargetCallback ns3::Icmpv6L4Protocol::GetDownTarget() const [member function]
---
>                    visibility='protected', is_virtual=True)
>     ## icmpv6-l4-protocol.h (module 'internet'): ns3::Callback<void, ns3::Ptr<ns3::Packet>, ns3::Ipv4Address, ns3::Ipv4Address, unsigned char, ns3::Ptr<ns3::Ipv4Route>, ns3::empty, ns3::empty, ns3::empty, ns3::empty> ns3::Icmpv6L4Protocol::GetDownTarget() const [member function]
20578c17980
<                    'ns3::IpL4Protocol::DownTargetCallback', 
---
>                    'ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Ipv4Address, ns3::Ipv4Address, unsigned char, ns3::Ptr< ns3::Ipv4Route >, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 
20580,20581c17982,17983
<                    is_const=True, is_virtual=True, visibility='protected')
<     ## icmpv6-l4-protocol.h (module 'internet'): ns3::IpL4Protocol::DownTargetCallback6 ns3::Icmpv6L4Protocol::GetDownTarget6() const [member function]
---
>                    is_const=True, visibility='private', is_virtual=True)
>     ## icmpv6-l4-protocol.h (module 'internet'): ns3::Callback<void, ns3::Ptr<ns3::Packet>, ns3::Ipv6Address, ns3::Ipv6Address, unsigned char, ns3::Ptr<ns3::Ipv6Route>, ns3::empty, ns3::empty, ns3::empty, ns3::empty> ns3::Icmpv6L4Protocol::GetDownTarget6() const [member function]
20583c17985
<                    'ns3::IpL4Protocol::DownTargetCallback6', 
---
>                    'ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Ipv6Address, ns3::Ipv6Address, unsigned char, ns3::Ptr< ns3::Ipv6Route >, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 
20585,20641c17987,17988
<                    is_const=True, is_virtual=True, visibility='protected')
<     ## icmpv6-l4-protocol.h (module 'internet'): void ns3::Icmpv6L4Protocol::HandleDestinationUnreachable(ns3::Ptr<ns3::Packet> p, ns3::Ipv6Address const & src, ns3::Ipv6Address const & dst, ns3::Ptr<ns3::Ipv6Interface> interface) [member function]
<     cls.add_method('HandleDestinationUnreachable', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Packet >', 'p'), param('ns3::Ipv6Address const &', 'src'), param('ns3::Ipv6Address const &', 'dst'), param('ns3::Ptr< ns3::Ipv6Interface >', 'interface')], 
<                    visibility='protected')
<     ## icmpv6-l4-protocol.h (module 'internet'): void ns3::Icmpv6L4Protocol::HandleEchoRequest(ns3::Ptr<ns3::Packet> p, ns3::Ipv6Address const & src, ns3::Ipv6Address const & dst, ns3::Ptr<ns3::Ipv6Interface> interface) [member function]
<     cls.add_method('HandleEchoRequest', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Packet >', 'p'), param('ns3::Ipv6Address const &', 'src'), param('ns3::Ipv6Address const &', 'dst'), param('ns3::Ptr< ns3::Ipv6Interface >', 'interface')], 
<                    visibility='protected')
<     ## icmpv6-l4-protocol.h (module 'internet'): void ns3::Icmpv6L4Protocol::HandleNA(ns3::Ptr<ns3::Packet> p, ns3::Ipv6Address const & src, ns3::Ipv6Address const & dst, ns3::Ptr<ns3::Ipv6Interface> interface) [member function]
<     cls.add_method('HandleNA', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Packet >', 'p'), param('ns3::Ipv6Address const &', 'src'), param('ns3::Ipv6Address const &', 'dst'), param('ns3::Ptr< ns3::Ipv6Interface >', 'interface')], 
<                    visibility='protected')
<     ## icmpv6-l4-protocol.h (module 'internet'): void ns3::Icmpv6L4Protocol::HandleNS(ns3::Ptr<ns3::Packet> p, ns3::Ipv6Address const & src, ns3::Ipv6Address const & dst, ns3::Ptr<ns3::Ipv6Interface> interface) [member function]
<     cls.add_method('HandleNS', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Packet >', 'p'), param('ns3::Ipv6Address const &', 'src'), param('ns3::Ipv6Address const &', 'dst'), param('ns3::Ptr< ns3::Ipv6Interface >', 'interface')], 
<                    visibility='protected')
<     ## icmpv6-l4-protocol.h (module 'internet'): void ns3::Icmpv6L4Protocol::HandlePacketTooBig(ns3::Ptr<ns3::Packet> p, ns3::Ipv6Address const & src, ns3::Ipv6Address const & dst, ns3::Ptr<ns3::Ipv6Interface> interface) [member function]
<     cls.add_method('HandlePacketTooBig', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Packet >', 'p'), param('ns3::Ipv6Address const &', 'src'), param('ns3::Ipv6Address const &', 'dst'), param('ns3::Ptr< ns3::Ipv6Interface >', 'interface')], 
<                    visibility='protected')
<     ## icmpv6-l4-protocol.h (module 'internet'): void ns3::Icmpv6L4Protocol::HandleParameterError(ns3::Ptr<ns3::Packet> p, ns3::Ipv6Address const & src, ns3::Ipv6Address const & dst, ns3::Ptr<ns3::Ipv6Interface> interface) [member function]
<     cls.add_method('HandleParameterError', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Packet >', 'p'), param('ns3::Ipv6Address const &', 'src'), param('ns3::Ipv6Address const &', 'dst'), param('ns3::Ptr< ns3::Ipv6Interface >', 'interface')], 
<                    visibility='protected')
<     ## icmpv6-l4-protocol.h (module 'internet'): void ns3::Icmpv6L4Protocol::HandleRA(ns3::Ptr<ns3::Packet> p, ns3::Ipv6Address const & src, ns3::Ipv6Address const & dst, ns3::Ptr<ns3::Ipv6Interface> interface) [member function]
<     cls.add_method('HandleRA', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Packet >', 'p'), param('ns3::Ipv6Address const &', 'src'), param('ns3::Ipv6Address const &', 'dst'), param('ns3::Ptr< ns3::Ipv6Interface >', 'interface')], 
<                    visibility='protected')
<     ## icmpv6-l4-protocol.h (module 'internet'): void ns3::Icmpv6L4Protocol::HandleRS(ns3::Ptr<ns3::Packet> p, ns3::Ipv6Address const & src, ns3::Ipv6Address const & dst, ns3::Ptr<ns3::Ipv6Interface> interface) [member function]
<     cls.add_method('HandleRS', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Packet >', 'p'), param('ns3::Ipv6Address const &', 'src'), param('ns3::Ipv6Address const &', 'dst'), param('ns3::Ptr< ns3::Ipv6Interface >', 'interface')], 
<                    visibility='protected')
<     ## icmpv6-l4-protocol.h (module 'internet'): void ns3::Icmpv6L4Protocol::HandleRedirection(ns3::Ptr<ns3::Packet> p, ns3::Ipv6Address const & src, ns3::Ipv6Address const & dst, ns3::Ptr<ns3::Ipv6Interface> interface) [member function]
<     cls.add_method('HandleRedirection', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Packet >', 'p'), param('ns3::Ipv6Address const &', 'src'), param('ns3::Ipv6Address const &', 'dst'), param('ns3::Ptr< ns3::Ipv6Interface >', 'interface')], 
<                    visibility='protected')
<     ## icmpv6-l4-protocol.h (module 'internet'): void ns3::Icmpv6L4Protocol::HandleTimeExceeded(ns3::Ptr<ns3::Packet> p, ns3::Ipv6Address const & src, ns3::Ipv6Address const & dst, ns3::Ptr<ns3::Ipv6Interface> interface) [member function]
<     cls.add_method('HandleTimeExceeded', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Packet >', 'p'), param('ns3::Ipv6Address const &', 'src'), param('ns3::Ipv6Address const &', 'dst'), param('ns3::Ptr< ns3::Ipv6Interface >', 'interface')], 
<                    visibility='protected')
<     ## icmpv6-l4-protocol.h (module 'internet'): void ns3::Icmpv6L4Protocol::ReceiveLLA(ns3::Icmpv6OptionLinkLayerAddress lla, ns3::Ipv6Address const & src, ns3::Ipv6Address const & dst, ns3::Ptr<ns3::Ipv6Interface> interface) [member function]
<     cls.add_method('ReceiveLLA', 
<                    'void', 
<                    [param('ns3::Icmpv6OptionLinkLayerAddress', 'lla'), param('ns3::Ipv6Address const &', 'src'), param('ns3::Ipv6Address const &', 'dst'), param('ns3::Ptr< ns3::Ipv6Interface >', 'interface')], 
<                    visibility='protected')
<     ## icmpv6-l4-protocol.h (module 'internet'): void ns3::Icmpv6L4Protocol::SetDownTarget(ns3::IpL4Protocol::DownTargetCallback cb) [member function]
---
>                    is_const=True, visibility='private', is_virtual=True)
>     ## icmpv6-l4-protocol.h (module 'internet'): void ns3::Icmpv6L4Protocol::SetDownTarget(ns3::Callback<void, ns3::Ptr<ns3::Packet>, ns3::Ipv4Address, ns3::Ipv4Address, unsigned char, ns3::Ptr<ns3::Ipv4Route>, ns3::empty, ns3::empty, ns3::empty, ns3::empty> cb) [member function]
20645,20646c17992,17993
<                    is_virtual=True, visibility='protected')
<     ## icmpv6-l4-protocol.h (module 'internet'): void ns3::Icmpv6L4Protocol::SetDownTarget6(ns3::IpL4Protocol::DownTargetCallback6 cb) [member function]
---
>                    visibility='private', is_virtual=True)
>     ## icmpv6-l4-protocol.h (module 'internet'): void ns3::Icmpv6L4Protocol::SetDownTarget6(ns3::Callback<void, ns3::Ptr<ns3::Packet>, ns3::Ipv6Address, ns3::Ipv6Address, unsigned char, ns3::Ptr<ns3::Ipv6Route>, ns3::empty, ns3::empty, ns3::empty, ns3::empty> cb) [member function]
20650c17997
<                    is_virtual=True, visibility='protected')
---
>                    visibility='private', is_virtual=True)
20654c18001
<     ## ipv4-global-routing.h (module 'internet'): ns3::Ipv4GlobalRouting::Ipv4GlobalRouting(ns3::Ipv4GlobalRouting const & arg0) [constructor]
---
>     ## ipv4-global-routing.h (module 'internet'): ns3::Ipv4GlobalRouting::Ipv4GlobalRouting(ns3::Ipv4GlobalRouting const & arg0) [copy constructor]
20717c18064
<     ## ipv4-global-routing.h (module 'internet'): void ns3::Ipv4GlobalRouting::PrintRoutingTable(ns3::Ptr<ns3::OutputStreamWrapper> stream, ns3::Time::Unit unit=::ns3::Time::Unit::S) const [member function]
---
>     ## ipv4-global-routing.h (module 'internet'): void ns3::Ipv4GlobalRouting::PrintRoutingTable(ns3::Ptr<ns3::OutputStreamWrapper> stream) const [member function]
20720c18067
<                    [param('ns3::Ptr< ns3::OutputStreamWrapper >', 'stream'), param('ns3::Time::Unit', 'unit', default_value='::ns3::Time::Unit::S')], 
---
>                    [param('ns3::Ptr< ns3::OutputStreamWrapper >', 'stream')], 
20726c18073
<     ## ipv4-global-routing.h (module 'internet'): bool ns3::Ipv4GlobalRouting::RouteInput(ns3::Ptr<const ns3::Packet> p, ns3::Ipv4Header const & header, ns3::Ptr<const ns3::NetDevice> idev, ns3::Ipv4RoutingProtocol::UnicastForwardCallback ucb, ns3::Ipv4RoutingProtocol::MulticastForwardCallback mcb, ns3::Ipv4RoutingProtocol::LocalDeliverCallback lcb, ns3::Ipv4RoutingProtocol::ErrorCallback ecb) [member function]
---
>     ## ipv4-global-routing.h (module 'internet'): bool ns3::Ipv4GlobalRouting::RouteInput(ns3::Ptr<ns3::Packet const> p, ns3::Ipv4Header const & header, ns3::Ptr<const ns3::NetDevice> idev, ns3::Callback<void,ns3::Ptr<ns3::Ipv4Route>,ns3::Ptr<const ns3::Packet>,const ns3::Ipv4Header&,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> ucb, ns3::Callback<void,ns3::Ptr<ns3::Ipv4MulticastRoute>,ns3::Ptr<const ns3::Packet>,const ns3::Ipv4Header&,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> mcb, ns3::Callback<void,ns3::Ptr<const ns3::Packet>,const ns3::Ipv4Header&,unsigned int,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> lcb, ns3::Callback<void,ns3::Ptr<const ns3::Packet>,const ns3::Ipv4Header&,ns3::Socket::SocketErrno,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> ecb) [member function]
20745c18092
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
20749c18096
<     ## ipv4-list-routing.h (module 'internet'): ns3::Ipv4ListRouting::Ipv4ListRouting(ns3::Ipv4ListRouting const & arg0) [constructor]
---
>     ## ipv4-list-routing.h (module 'internet'): ns3::Ipv4ListRouting::Ipv4ListRouting(ns3::Ipv4ListRouting const & arg0) [copy constructor]
20793c18140
<     ## ipv4-list-routing.h (module 'internet'): void ns3::Ipv4ListRouting::PrintRoutingTable(ns3::Ptr<ns3::OutputStreamWrapper> stream, ns3::Time::Unit unit=::ns3::Time::Unit::S) const [member function]
---
>     ## ipv4-list-routing.h (module 'internet'): void ns3::Ipv4ListRouting::PrintRoutingTable(ns3::Ptr<ns3::OutputStreamWrapper> stream) const [member function]
20796c18143
<                    [param('ns3::Ptr< ns3::OutputStreamWrapper >', 'stream'), param('ns3::Time::Unit', 'unit', default_value='::ns3::Time::Unit::S')], 
---
>                    [param('ns3::Ptr< ns3::OutputStreamWrapper >', 'stream')], 
20798c18145
<     ## ipv4-list-routing.h (module 'internet'): bool ns3::Ipv4ListRouting::RouteInput(ns3::Ptr<const ns3::Packet> p, ns3::Ipv4Header const & header, ns3::Ptr<const ns3::NetDevice> idev, ns3::Ipv4RoutingProtocol::UnicastForwardCallback ucb, ns3::Ipv4RoutingProtocol::MulticastForwardCallback mcb, ns3::Ipv4RoutingProtocol::LocalDeliverCallback lcb, ns3::Ipv4RoutingProtocol::ErrorCallback ecb) [member function]
---
>     ## ipv4-list-routing.h (module 'internet'): bool ns3::Ipv4ListRouting::RouteInput(ns3::Ptr<ns3::Packet const> p, ns3::Ipv4Header const & header, ns3::Ptr<const ns3::NetDevice> idev, ns3::Callback<void,ns3::Ptr<ns3::Ipv4Route>,ns3::Ptr<const ns3::Packet>,const ns3::Ipv4Header&,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> ucb, ns3::Callback<void,ns3::Ptr<ns3::Ipv4MulticastRoute>,ns3::Ptr<const ns3::Packet>,const ns3::Ipv4Header&,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> mcb, ns3::Callback<void,ns3::Ptr<const ns3::Packet>,const ns3::Ipv4Header&,unsigned int,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> lcb, ns3::Callback<void,ns3::Ptr<const ns3::Packet>,const ns3::Ipv4Header&,ns3::Socket::SocketErrno,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> ecb) [member function]
20817c18164
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
20822c18169
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
20826c18173
<     ## ipv4-packet-probe.h (module 'internet'): ns3::Ipv4PacketProbe::Ipv4PacketProbe(ns3::Ipv4PacketProbe const & arg0) [constructor]
---
>     ## ipv4-packet-probe.h (module 'internet'): ns3::Ipv4PacketProbe::Ipv4PacketProbe(ns3::Ipv4PacketProbe const & arg0) [copy constructor]
20845c18192
<     ## ipv4-packet-probe.h (module 'internet'): void ns3::Ipv4PacketProbe::SetValue(ns3::Ptr<const ns3::Packet> packet, ns3::Ptr<ns3::Ipv4> ipv4, uint32_t interface) [member function]
---
>     ## ipv4-packet-probe.h (module 'internet'): void ns3::Ipv4PacketProbe::SetValue(ns3::Ptr<ns3::Packet const> packet, ns3::Ptr<ns3::Ipv4> ipv4, uint32_t interface) [member function]
20849c18196
<     ## ipv4-packet-probe.h (module 'internet'): static void ns3::Ipv4PacketProbe::SetValueByPath(std::string path, ns3::Ptr<const ns3::Packet> packet, ns3::Ptr<ns3::Ipv4> ipv4, uint32_t interface) [member function]
---
>     ## ipv4-packet-probe.h (module 'internet'): static void ns3::Ipv4PacketProbe::SetValueByPath(std::string path, ns3::Ptr<ns3::Packet const> packet, ns3::Ptr<ns3::Ipv4> ipv4, uint32_t interface) [member function]
20857c18204
<     ## ipv6-extension.h (module 'internet'): ns3::Ipv6ExtensionLooseRouting::Ipv6ExtensionLooseRouting(ns3::Ipv6ExtensionLooseRouting const & arg0) [constructor]
---
>     ## ipv6-extension.h (module 'internet'): ns3::Ipv6ExtensionLooseRouting::Ipv6ExtensionLooseRouting(ns3::Ipv6ExtensionLooseRouting const & arg0) [copy constructor]
20881c18228
<     ## ipv6-list-routing.h (module 'internet'): ns3::Ipv6ListRouting::Ipv6ListRouting(ns3::Ipv6ListRouting const & arg0) [constructor]
---
>     ## ipv6-list-routing.h (module 'internet'): ns3::Ipv6ListRouting::Ipv6ListRouting(ns3::Ipv6ListRouting const & arg0) [copy constructor]
20910c18257
<     ## ipv6-list-routing.h (module 'internet'): void ns3::Ipv6ListRouting::NotifyAddRoute(ns3::Ipv6Address dst, ns3::Ipv6Prefix mask, ns3::Ipv6Address nextHop, uint32_t interface, ns3::Ipv6Address prefixToUse=ns3::Ipv6Address::GetZero()) [member function]
---
>     ## ipv6-list-routing.h (module 'internet'): void ns3::Ipv6ListRouting::NotifyAddRoute(ns3::Ipv6Address dst, ns3::Ipv6Prefix mask, ns3::Ipv6Address nextHop, uint32_t interface, ns3::Ipv6Address prefixToUse=ns3::Ipv6Address::GetZero( )) [member function]
20913c18260
<                    [param('ns3::Ipv6Address', 'dst'), param('ns3::Ipv6Prefix', 'mask'), param('ns3::Ipv6Address', 'nextHop'), param('uint32_t', 'interface'), param('ns3::Ipv6Address', 'prefixToUse', default_value='ns3::Ipv6Address::GetZero()')], 
---
>                    [param('ns3::Ipv6Address', 'dst'), param('ns3::Ipv6Prefix', 'mask'), param('ns3::Ipv6Address', 'nextHop'), param('uint32_t', 'interface'), param('ns3::Ipv6Address', 'prefixToUse', default_value='ns3::Ipv6Address::GetZero( )')], 
20930c18277
<     ## ipv6-list-routing.h (module 'internet'): void ns3::Ipv6ListRouting::NotifyRemoveRoute(ns3::Ipv6Address dst, ns3::Ipv6Prefix mask, ns3::Ipv6Address nextHop, uint32_t interface, ns3::Ipv6Address prefixToUse=ns3::Ipv6Address::GetZero()) [member function]
---
>     ## ipv6-list-routing.h (module 'internet'): void ns3::Ipv6ListRouting::NotifyRemoveRoute(ns3::Ipv6Address dst, ns3::Ipv6Prefix mask, ns3::Ipv6Address nextHop, uint32_t interface, ns3::Ipv6Address prefixToUse=ns3::Ipv6Address::GetZero( )) [member function]
20933c18280
<                    [param('ns3::Ipv6Address', 'dst'), param('ns3::Ipv6Prefix', 'mask'), param('ns3::Ipv6Address', 'nextHop'), param('uint32_t', 'interface'), param('ns3::Ipv6Address', 'prefixToUse', default_value='ns3::Ipv6Address::GetZero()')], 
---
>                    [param('ns3::Ipv6Address', 'dst'), param('ns3::Ipv6Prefix', 'mask'), param('ns3::Ipv6Address', 'nextHop'), param('uint32_t', 'interface'), param('ns3::Ipv6Address', 'prefixToUse', default_value='ns3::Ipv6Address::GetZero( )')], 
20935c18282
<     ## ipv6-list-routing.h (module 'internet'): void ns3::Ipv6ListRouting::PrintRoutingTable(ns3::Ptr<ns3::OutputStreamWrapper> stream, ns3::Time::Unit unit=::ns3::Time::Unit::S) const [member function]
---
>     ## ipv6-list-routing.h (module 'internet'): void ns3::Ipv6ListRouting::PrintRoutingTable(ns3::Ptr<ns3::OutputStreamWrapper> stream) const [member function]
20938c18285
<                    [param('ns3::Ptr< ns3::OutputStreamWrapper >', 'stream'), param('ns3::Time::Unit', 'unit', default_value='::ns3::Time::Unit::S')], 
---
>                    [param('ns3::Ptr< ns3::OutputStreamWrapper >', 'stream')], 
20940c18287
<     ## ipv6-list-routing.h (module 'internet'): bool ns3::Ipv6ListRouting::RouteInput(ns3::Ptr<const ns3::Packet> p, ns3::Ipv6Header const & header, ns3::Ptr<const ns3::NetDevice> idev, ns3::Ipv6RoutingProtocol::UnicastForwardCallback ucb, ns3::Ipv6RoutingProtocol::MulticastForwardCallback mcb, ns3::Ipv6RoutingProtocol::LocalDeliverCallback lcb, ns3::Ipv6RoutingProtocol::ErrorCallback ecb) [member function]
---
>     ## ipv6-list-routing.h (module 'internet'): bool ns3::Ipv6ListRouting::RouteInput(ns3::Ptr<ns3::Packet const> p, ns3::Ipv6Header const & header, ns3::Ptr<const ns3::NetDevice> idev, ns3::Callback<void,ns3::Ptr<const ns3::NetDevice>,ns3::Ptr<ns3::Ipv6Route>,ns3::Ptr<const ns3::Packet>,const ns3::Ipv6Header&,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> ucb, ns3::Callback<void,ns3::Ptr<const ns3::NetDevice>,ns3::Ptr<ns3::Ipv6MulticastRoute>,ns3::Ptr<const ns3::Packet>,const ns3::Ipv6Header&,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> mcb, ns3::Callback<void,ns3::Ptr<const ns3::Packet>,const ns3::Ipv6Header&,unsigned int,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> lcb, ns3::Callback<void,ns3::Ptr<const ns3::Packet>,const ns3::Ipv6Header&,ns3::Socket::SocketErrno,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> ecb) [member function]
20959c18306
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
20963c18310
<     ## ipv6-packet-probe.h (module 'internet'): ns3::Ipv6PacketProbe::Ipv6PacketProbe(ns3::Ipv6PacketProbe const & arg0) [constructor]
---
>     ## ipv6-packet-probe.h (module 'internet'): ns3::Ipv6PacketProbe::Ipv6PacketProbe(ns3::Ipv6PacketProbe const & arg0) [copy constructor]
20982c18329
<     ## ipv6-packet-probe.h (module 'internet'): void ns3::Ipv6PacketProbe::SetValue(ns3::Ptr<const ns3::Packet> packet, ns3::Ptr<ns3::Ipv6> ipv6, uint32_t interface) [member function]
---
>     ## ipv6-packet-probe.h (module 'internet'): void ns3::Ipv6PacketProbe::SetValue(ns3::Ptr<ns3::Packet const> packet, ns3::Ptr<ns3::Ipv6> ipv6, uint32_t interface) [member function]
20986c18333
<     ## ipv6-packet-probe.h (module 'internet'): static void ns3::Ipv6PacketProbe::SetValueByPath(std::string path, ns3::Ptr<const ns3::Packet> packet, ns3::Ptr<ns3::Ipv6> ipv6, uint32_t interface) [member function]
---
>     ## ipv6-packet-probe.h (module 'internet'): static void ns3::Ipv6PacketProbe::SetValueByPath(std::string path, ns3::Ptr<ns3::Packet const> packet, ns3::Ptr<ns3::Ipv6> ipv6, uint32_t interface) [member function]
20994c18341
<     ## loopback-net-device.h (module 'internet'): ns3::LoopbackNetDevice::LoopbackNetDevice(ns3::LoopbackNetDevice const & arg0) [constructor]
---
>     ## loopback-net-device.h (module 'internet'): ns3::LoopbackNetDevice::LoopbackNetDevice(ns3::LoopbackNetDevice const & arg0) [copy constructor]
21108c18455
<     ## loopback-net-device.h (module 'internet'): void ns3::LoopbackNetDevice::SetPromiscReceiveCallback(ns3::NetDevice::PromiscReceiveCallback cb) [member function]
---
>     ## loopback-net-device.h (module 'internet'): void ns3::LoopbackNetDevice::SetPromiscReceiveCallback(ns3::Callback<bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<ns3::Packet const>, unsigned short, ns3::Address const&, ns3::Address const&, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty> cb) [member function]
21113c18460
<     ## loopback-net-device.h (module 'internet'): void ns3::LoopbackNetDevice::SetReceiveCallback(ns3::NetDevice::ReceiveCallback cb) [member function]
---
>     ## loopback-net-device.h (module 'internet'): void ns3::LoopbackNetDevice::SetReceiveCallback(ns3::Callback<bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<ns3::Packet const>, unsigned short, ns3::Address const&, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> cb) [member function]
21127c18474
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
21131c18478
<     ## queue-item.h (module 'network'): ns3::QueueDiscItem::QueueDiscItem(ns3::Ptr<ns3::Packet> p, ns3::Address const & addr, uint16_t protocol) [constructor]
---
>     ## queue-disc.h (module 'traffic-control'): ns3::QueueDiscItem::QueueDiscItem(ns3::Ptr<ns3::Packet> p, ns3::Address const & addr, uint16_t protocol) [constructor]
21133c18480
<     ## queue-item.h (module 'network'): ns3::Address ns3::QueueDiscItem::GetAddress() const [member function]
---
>     ## queue-disc.h (module 'traffic-control'): ns3::Address ns3::QueueDiscItem::GetAddress() const [member function]
21138c18485
<     ## queue-item.h (module 'network'): uint16_t ns3::QueueDiscItem::GetProtocol() const [member function]
---
>     ## queue-disc.h (module 'traffic-control'): uint16_t ns3::QueueDiscItem::GetProtocol() const [member function]
21143c18490
<     ## queue-item.h (module 'network'): uint8_t ns3::QueueDiscItem::GetTxQueueIndex() const [member function]
---
>     ## queue-disc.h (module 'traffic-control'): uint8_t ns3::QueueDiscItem::GetTxQueueIndex() const [member function]
21148c18495
<     ## queue-item.h (module 'network'): void ns3::QueueDiscItem::SetTxQueueIndex(uint8_t txq) [member function]
---
>     ## queue-disc.h (module 'traffic-control'): void ns3::QueueDiscItem::SetTxQueueIndex(uint8_t txq) [member function]
21152,21161c18499
<     ## queue-item.h (module 'network'): ns3::Time ns3::QueueDiscItem::GetTimeStamp() const [member function]
<     cls.add_method('GetTimeStamp', 
<                    'ns3::Time', 
<                    [], 
<                    is_const=True)
<     ## queue-item.h (module 'network'): void ns3::QueueDiscItem::SetTimeStamp(ns3::Time t) [member function]
<     cls.add_method('SetTimeStamp', 
<                    'void', 
<                    [param('ns3::Time', 't')])
<     ## queue-item.h (module 'network'): void ns3::QueueDiscItem::AddHeader() [member function]
---
>     ## queue-disc.h (module 'traffic-control'): void ns3::QueueDiscItem::AddHeader() [member function]
21165,21166c18503,18504
<                    is_virtual=True, is_pure_virtual=True)
<     ## queue-item.h (module 'network'): void ns3::QueueDiscItem::Print(std::ostream & os) const [member function]
---
>                    is_pure_virtual=True, is_virtual=True)
>     ## queue-disc.h (module 'traffic-control'): void ns3::QueueDiscItem::Print(std::ostream & os) const [member function]
21171,21215d18508
<     ## queue-item.h (module 'network'): bool ns3::QueueDiscItem::Mark() [member function]
<     cls.add_method('Mark', 
<                    'bool', 
<                    [], 
<                    is_virtual=True, is_pure_virtual=True)
<     ## queue-item.h (module 'network'): uint32_t ns3::QueueDiscItem::Hash(uint32_t perturbation=0) const [member function]
<     cls.add_method('Hash', 
<                    'uint32_t', 
<                    [param('uint32_t', 'perturbation', default_value='0')], 
<                    is_const=True, is_virtual=True)
<     return
< 
< def register_Ns3ArpQueueDiscItem_methods(root_module, cls):
<     ## arp-queue-disc-item.h (module 'internet'): ns3::ArpQueueDiscItem::ArpQueueDiscItem(ns3::Ptr<ns3::Packet> p, ns3::Address const & addr, uint16_t protocol, ns3::ArpHeader const & header) [constructor]
<     cls.add_constructor([param('ns3::Ptr< ns3::Packet >', 'p'), param('ns3::Address const &', 'addr'), param('uint16_t', 'protocol'), param('ns3::ArpHeader const &', 'header')])
<     ## arp-queue-disc-item.h (module 'internet'): uint32_t ns3::ArpQueueDiscItem::GetSize() const [member function]
<     cls.add_method('GetSize', 
<                    'uint32_t', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## arp-queue-disc-item.h (module 'internet'): ns3::ArpHeader const & ns3::ArpQueueDiscItem::GetHeader() const [member function]
<     cls.add_method('GetHeader', 
<                    'ns3::ArpHeader const &', 
<                    [], 
<                    is_const=True)
<     ## arp-queue-disc-item.h (module 'internet'): void ns3::ArpQueueDiscItem::AddHeader() [member function]
<     cls.add_method('AddHeader', 
<                    'void', 
<                    [], 
<                    is_virtual=True)
<     ## arp-queue-disc-item.h (module 'internet'): void ns3::ArpQueueDiscItem::Print(std::ostream & os) const [member function]
<     cls.add_method('Print', 
<                    'void', 
<                    [param('std::ostream &', 'os')], 
<                    is_const=True, is_virtual=True)
<     ## arp-queue-disc-item.h (module 'internet'): bool ns3::ArpQueueDiscItem::Mark() [member function]
<     cls.add_method('Mark', 
<                    'bool', 
<                    [], 
<                    is_virtual=True)
<     ## arp-queue-disc-item.h (module 'internet'): uint32_t ns3::ArpQueueDiscItem::Hash(uint32_t perturbation) const [member function]
<     cls.add_method('Hash', 
<                    'uint32_t', 
<                    [param('uint32_t', 'perturbation')], 
<                    is_const=True, is_virtual=True)
21221,21222c18514,18515
<     ## ipv4-queue-disc-item.h (module 'internet'): uint32_t ns3::Ipv4QueueDiscItem::GetSize() const [member function]
<     cls.add_method('GetSize', 
---
>     ## ipv4-queue-disc-item.h (module 'internet'): uint32_t ns3::Ipv4QueueDiscItem::GetPacketSize() const [member function]
>     cls.add_method('GetPacketSize', 
21246,21255d18538
<     ## ipv4-queue-disc-item.h (module 'internet'): bool ns3::Ipv4QueueDiscItem::Mark() [member function]
<     cls.add_method('Mark', 
<                    'bool', 
<                    [], 
<                    is_virtual=True)
<     ## ipv4-queue-disc-item.h (module 'internet'): uint32_t ns3::Ipv4QueueDiscItem::Hash(uint32_t perturbation) const [member function]
<     cls.add_method('Hash', 
<                    'uint32_t', 
<                    [param('uint32_t', 'perturbation')], 
<                    is_const=True, is_virtual=True)
21261,21262c18544,18545
<     ## ipv6-queue-disc-item.h (module 'internet'): uint32_t ns3::Ipv6QueueDiscItem::GetSize() const [member function]
<     cls.add_method('GetSize', 
---
>     ## ipv6-queue-disc-item.h (module 'internet'): uint32_t ns3::Ipv6QueueDiscItem::GetPacketSize() const [member function]
>     cls.add_method('GetPacketSize', 
21286,21295d18568
<     ## ipv6-queue-disc-item.h (module 'internet'): bool ns3::Ipv6QueueDiscItem::Mark() [member function]
<     cls.add_method('Mark', 
<                    'bool', 
<                    [], 
<                    is_virtual=True)
<     ## ipv6-queue-disc-item.h (module 'internet'): uint32_t ns3::Ipv6QueueDiscItem::Hash(uint32_t perturbation) const [member function]
<     cls.add_method('Hash', 
<                    'uint32_t', 
<                    [param('uint32_t', 'perturbation')], 
<                    is_const=True, is_virtual=True)
21299c18572
<     ## hash-function.h (module 'core'): ns3::Hash::Implementation::Implementation(ns3::Hash::Implementation const & arg0) [constructor]
---
>     ## hash-function.h (module 'core'): ns3::Hash::Implementation::Implementation(ns3::Hash::Implementation const & arg0) [copy constructor]
21303c18576
<     ## hash-function.h (module 'core'): uint32_t ns3::Hash::Implementation::GetHash32(char const * buffer, std::size_t const size) [member function]
---
>     ## hash-function.h (module 'core'): uint32_t ns3::Hash::Implementation::GetHash32(char const * buffer, size_t const size) [member function]
21306,21308c18579,18581
<                    [param('char const *', 'buffer'), param('std::size_t const', 'size')], 
<                    is_virtual=True, is_pure_virtual=True)
<     ## hash-function.h (module 'core'): uint64_t ns3::Hash::Implementation::GetHash64(char const * buffer, std::size_t const size) [member function]
---
>                    [param('char const *', 'buffer'), param('size_t const', 'size')], 
>                    is_pure_virtual=True, is_virtual=True)
>     ## hash-function.h (module 'core'): uint64_t ns3::Hash::Implementation::GetHash64(char const * buffer, size_t const size) [member function]
21311c18584
<                    [param('char const *', 'buffer'), param('std::size_t const', 'size')], 
---
>                    [param('char const *', 'buffer'), param('size_t const', 'size')], 
21317c18590
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
21321c18594
<     ## hash-fnv.h (module 'core'): ns3::Hash::Function::Fnv1a::Fnv1a(ns3::Hash::Function::Fnv1a const & arg0) [constructor]
---
>     ## hash-fnv.h (module 'core'): ns3::Hash::Function::Fnv1a::Fnv1a(ns3::Hash::Function::Fnv1a const & arg0) [copy constructor]
21343c18616
<     ## hash-function.h (module 'core'): ns3::Hash::Function::Hash32::Hash32(ns3::Hash::Function::Hash32 const & arg0) [constructor]
---
>     ## hash-function.h (module 'core'): ns3::Hash::Function::Hash32::Hash32(ns3::Hash::Function::Hash32 const & arg0) [copy constructor]
21347c18620
<     ## hash-function.h (module 'core'): uint32_t ns3::Hash::Function::Hash32::GetHash32(char const * buffer, std::size_t const size) [member function]
---
>     ## hash-function.h (module 'core'): uint32_t ns3::Hash::Function::Hash32::GetHash32(char const * buffer, size_t const size) [member function]
21350c18623
<                    [param('char const *', 'buffer'), param('std::size_t const', 'size')], 
---
>                    [param('char const *', 'buffer'), param('size_t const', 'size')], 
21360c18633
<     ## hash-function.h (module 'core'): ns3::Hash::Function::Hash64::Hash64(ns3::Hash::Function::Hash64 const & arg0) [constructor]
---
>     ## hash-function.h (module 'core'): ns3::Hash::Function::Hash64::Hash64(ns3::Hash::Function::Hash64 const & arg0) [copy constructor]
21364c18637
<     ## hash-function.h (module 'core'): uint32_t ns3::Hash::Function::Hash64::GetHash32(char const * buffer, std::size_t const size) [member function]
---
>     ## hash-function.h (module 'core'): uint32_t ns3::Hash::Function::Hash64::GetHash32(char const * buffer, size_t const size) [member function]
21367c18640
<                    [param('char const *', 'buffer'), param('std::size_t const', 'size')], 
---
>                    [param('char const *', 'buffer'), param('size_t const', 'size')], 
21369c18642
<     ## hash-function.h (module 'core'): uint64_t ns3::Hash::Function::Hash64::GetHash64(char const * buffer, std::size_t const size) [member function]
---
>     ## hash-function.h (module 'core'): uint64_t ns3::Hash::Function::Hash64::GetHash64(char const * buffer, size_t const size) [member function]
21372c18645
<                    [param('char const *', 'buffer'), param('std::size_t const', 'size')], 
---
>                    [param('char const *', 'buffer'), param('size_t const', 'size')], 
21382c18655
<     ## hash-murmur3.h (module 'core'): ns3::Hash::Function::Murmur3::Murmur3(ns3::Hash::Function::Murmur3 const & arg0) [constructor]
---
>     ## hash-murmur3.h (module 'core'): ns3::Hash::Function::Murmur3::Murmur3(ns3::Hash::Function::Murmur3 const & arg0) [copy constructor]
21386c18659
<     ## hash-murmur3.h (module 'core'): uint32_t ns3::Hash::Function::Murmur3::GetHash32(char const * buffer, std::size_t const size) [member function]
---
>     ## hash-murmur3.h (module 'core'): uint32_t ns3::Hash::Function::Murmur3::GetHash32(char const * buffer, size_t const size) [member function]
21389c18662
<                    [param('char const *', 'buffer'), param('std::size_t const', 'size')], 
---
>                    [param('char const *', 'buffer'), param('size_t const', 'size')], 
21391c18664
<     ## hash-murmur3.h (module 'core'): uint64_t ns3::Hash::Function::Murmur3::GetHash64(char const * buffer, std::size_t const size) [member function]
---
>     ## hash-murmur3.h (module 'core'): uint64_t ns3::Hash::Function::Murmur3::GetHash64(char const * buffer, size_t const size) [member function]
21394c18667
<                    [param('char const *', 'buffer'), param('std::size_t const', 'size')], 
---
>                    [param('char const *', 'buffer'), param('size_t const', 'size')], 
21405,21408c18678,18681
<     register_functions_ns3_FatalImpl(module.add_cpp_namespace('FatalImpl'), root_module)
<     register_functions_ns3_Hash(module.add_cpp_namespace('Hash'), root_module)
<     register_functions_ns3_TracedValueCallback(module.add_cpp_namespace('TracedValueCallback'), root_module)
<     register_functions_ns3_internal(module.add_cpp_namespace('internal'), root_module)
---
>     register_functions_ns3_FatalImpl(module.get_submodule('FatalImpl'), root_module)
>     register_functions_ns3_Hash(module.get_submodule('Hash'), root_module)
>     register_functions_ns3_TracedValueCallback(module.get_submodule('TracedValueCallback'), root_module)
>     register_functions_ns3_internal(module.get_submodule('internal'), root_module)
21415c18688
<     register_functions_ns3_Hash_Function(module.add_cpp_namespace('Function'), root_module)
---
>     register_functions_ns3_Hash_Function(module.get_submodule('Function'), root_module)
diff ../../NS3-WiGig/src/internet/bindings/modulegen__gcc_LP64.py ../../ns-3-dev/src/internet/bindings/modulegen__gcc_LP64.py
30c30
<     module.add_class('AsciiTraceHelperForDevice', import_from_module='ns.network', allow_subclassing=True)
---
>     module.add_class('AsciiTraceHelperForDevice', allow_subclassing=True, import_from_module='ns.network')
39,41d38
<     typehandlers.add_type_alias('std::list< ns3::AttributeConstructionList::Item > const_iterator', 'ns3::AttributeConstructionList::CIterator')
<     typehandlers.add_type_alias('std::list< ns3::AttributeConstructionList::Item > const_iterator*', 'ns3::AttributeConstructionList::CIterator*')
<     typehandlers.add_type_alias('std::list< ns3::AttributeConstructionList::Item > const_iterator&', 'ns3::AttributeConstructionList::CIterator&')
60,85d56
<     ## data-rate.h (module 'network'): ns3::DataRate [class]
<     module.add_class('DataRate', import_from_module='ns.network')
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::AttributeAccessor> [struct]
<     module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::AttributeAccessor'])
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::AttributeChecker> [struct]
<     module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::AttributeChecker'])
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::AttributeValue> [struct]
<     module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::AttributeValue'])
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::CallbackImplBase> [struct]
<     module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::CallbackImplBase'])
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::EventImpl> [struct]
<     module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::EventImpl'])
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::Hash::Implementation> [struct]
<     module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::Hash::Implementation'])
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::Ipv4Route> [struct]
<     module.add_class('DefaultDeleter', template_parameters=['ns3::Ipv4Route'])
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::Ipv6Route> [struct]
<     module.add_class('DefaultDeleter', template_parameters=['ns3::Ipv6Route'])
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::NixVector> [struct]
<     module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::NixVector'])
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::OutputStreamWrapper> [struct]
<     module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::OutputStreamWrapper'])
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::Packet> [struct]
<     module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::Packet'])
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::TraceSourceAccessor> [struct]
<     module.add_class('DefaultDeleter', import_from_module='ns.core', template_parameters=['ns3::TraceSourceAccessor'])
150,159d120
<     ## ipv4-end-point.h (module 'internet'): ns3::Ipv4EndPoint [class]
<     module.add_class('Ipv4EndPoint')
<     ## ipv4-end-point-demux.h (module 'internet'): ns3::Ipv4EndPointDemux [class]
<     module.add_class('Ipv4EndPointDemux')
<     typehandlers.add_type_alias('std::list< ns3::Ipv4EndPoint * >', 'ns3::Ipv4EndPointDemux::EndPoints')
<     typehandlers.add_type_alias('std::list< ns3::Ipv4EndPoint * >*', 'ns3::Ipv4EndPointDemux::EndPoints*')
<     typehandlers.add_type_alias('std::list< ns3::Ipv4EndPoint * >&', 'ns3::Ipv4EndPointDemux::EndPoints&')
<     typehandlers.add_type_alias('std::list< ns3::Ipv4EndPoint * > iterator', 'ns3::Ipv4EndPointDemux::EndPointsI')
<     typehandlers.add_type_alias('std::list< ns3::Ipv4EndPoint * > iterator*', 'ns3::Ipv4EndPointDemux::EndPointsI*')
<     typehandlers.add_type_alias('std::list< ns3::Ipv4EndPoint * > iterator&', 'ns3::Ipv4EndPointDemux::EndPointsI&')
166,168d126
<     typehandlers.add_type_alias('std::vector< std::pair< ns3::Ptr< ns3::Ipv4 >, unsigned int > > const_iterator', 'ns3::Ipv4InterfaceContainer::Iterator')
<     typehandlers.add_type_alias('std::vector< std::pair< ns3::Ptr< ns3::Ipv4 >, unsigned int > > const_iterator*', 'ns3::Ipv4InterfaceContainer::Iterator*')
<     typehandlers.add_type_alias('std::vector< std::pair< ns3::Ptr< ns3::Ipv4 >, unsigned int > > const_iterator&', 'ns3::Ipv4InterfaceContainer::Iterator&')
187,196d144
<     ## ipv6-end-point.h (module 'internet'): ns3::Ipv6EndPoint [class]
<     module.add_class('Ipv6EndPoint')
<     ## ipv6-end-point-demux.h (module 'internet'): ns3::Ipv6EndPointDemux [class]
<     module.add_class('Ipv6EndPointDemux')
<     typehandlers.add_type_alias('std::list< ns3::Ipv6EndPoint * >', 'ns3::Ipv6EndPointDemux::EndPoints')
<     typehandlers.add_type_alias('std::list< ns3::Ipv6EndPoint * >*', 'ns3::Ipv6EndPointDemux::EndPoints*')
<     typehandlers.add_type_alias('std::list< ns3::Ipv6EndPoint * >&', 'ns3::Ipv6EndPointDemux::EndPoints&')
<     typehandlers.add_type_alias('std::list< ns3::Ipv6EndPoint * > iterator', 'ns3::Ipv6EndPointDemux::EndPointsI')
<     typehandlers.add_type_alias('std::list< ns3::Ipv6EndPoint * > iterator*', 'ns3::Ipv6EndPointDemux::EndPointsI*')
<     typehandlers.add_type_alias('std::list< ns3::Ipv6EndPoint * > iterator&', 'ns3::Ipv6EndPointDemux::EndPointsI&')
205,207d152
<     typehandlers.add_type_alias('std::vector< std::pair< ns3::Ptr< ns3::Ipv6 >, unsigned int > > const_iterator', 'ns3::Ipv6InterfaceContainer::Iterator')
<     typehandlers.add_type_alias('std::vector< std::pair< ns3::Ptr< ns3::Ipv6 >, unsigned int > > const_iterator*', 'ns3::Ipv6InterfaceContainer::Iterator*')
<     typehandlers.add_type_alias('std::vector< std::pair< ns3::Ptr< ns3::Ipv6 >, unsigned int > > const_iterator&', 'ns3::Ipv6InterfaceContainer::Iterator&')
220,222d164
<     typehandlers.add_type_alias('void ( * ) ( ns3::Mac48Address )', 'ns3::Mac48Address::TracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Mac48Address )*', 'ns3::Mac48Address::TracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Mac48Address )&', 'ns3::Mac48Address::TracedCallback&')
225,228d166
<     ## mac8-address.h (module 'network'): ns3::Mac8Address [class]
<     module.add_class('Mac8Address', import_from_module='ns.network')
<     ## mac8-address.h (module 'network'): ns3::Mac8Address [class]
<     root_module['ns3::Mac8Address'].implicitly_converts_to(root_module['ns3::Address'])
231,233d168
<     typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::NetDevice > > const_iterator', 'ns3::NetDeviceContainer::Iterator')
<     typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::NetDevice > > const_iterator*', 'ns3::NetDeviceContainer::Iterator*')
<     typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::NetDevice > > const_iterator&', 'ns3::NetDeviceContainer::Iterator&')
236,238d170
<     typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::Node > > const_iterator', 'ns3::NodeContainer::Iterator')
<     typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::Node > > const_iterator*', 'ns3::NodeContainer::Iterator*')
<     typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::Node > > const_iterator&', 'ns3::NodeContainer::Iterator&')
240c172
<     module.add_class('ObjectBase', import_from_module='ns.core', allow_subclassing=True)
---
>     module.add_class('ObjectBase', allow_subclassing=True, import_from_module='ns.core')
251,252c183,184
<     ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item::ItemType [enumeration]
<     module.add_enum('ItemType', ['PAYLOAD', 'HEADER', 'TRAILER'], outer_class=root_module['ns3::PacketMetadata::Item'], import_from_module='ns.network')
---
>     ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item [enumeration]
>     module.add_enum('', ['PAYLOAD', 'HEADER', 'TRAILER'], outer_class=root_module['ns3::PacketMetadata::Item'], import_from_module='ns.network')
262a195,196
>     ## packet-tag-list.h (module 'network'): ns3::PacketTagList::TagData::TagData_e [enumeration]
>     module.add_enum('TagData_e', ['MAX_SIZE'], outer_class=root_module['ns3::PacketTagList::TagData'], import_from_module='ns.network')
270c204
<     module.add_class('PcapHelperForDevice', import_from_module='ns.network', allow_subclassing=True)
---
>     module.add_class('PcapHelperForDevice', allow_subclassing=True, import_from_module='ns.network')
293,295d226
<     typehandlers.add_type_alias('std::pair< ns3::Ipv4Address, int >', 'ns3::SPFVertex::NodeExit_t')
<     typehandlers.add_type_alias('std::pair< ns3::Ipv4Address, int >*', 'ns3::SPFVertex::NodeExit_t*')
<     typehandlers.add_type_alias('std::pair< ns3::Ipv4Address, int >&', 'ns3::SPFVertex::NodeExit_t&')
299c230
<     module.add_class('SimpleRefCount', import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), automatic_type_narrowing=True, parent=root_module['ns3::ObjectBase'], template_parameters=['ns3::Object', 'ns3::ObjectBase', 'ns3::ObjectDeleter'])
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::Object', 'ns3::ObjectBase', 'ns3::ObjectDeleter'], parent=root_module['ns3::ObjectBase'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
301c232
<     module.add_class('Simulator', import_from_module='ns.core', destructor_visibility='private')
---
>     module.add_class('Simulator', destructor_visibility='private', import_from_module='ns.core')
308,311d238
<     ## tcp-tx-item.h (module 'internet'): ns3::TcpTxItem [class]
<     module.add_class('TcpTxItem')
<     ## tcp-tx-item.h (module 'internet'): ns3::TcpTxItem::RateInformation [struct]
<     module.add_class('RateInformation', outer_class=root_module['ns3::TcpTxItem'])
321c248
<     module.add_class('TimerImpl', import_from_module='ns.core', allow_subclassing=True)
---
>     module.add_class('TimerImpl', allow_subclassing=True, import_from_module='ns.core')
329,331c256
<     module.add_class('TracedValue', import_from_module='ns.core', template_parameters=['ns3::TcpSocket::TcpStates_t'])
<     ## traced-value.h (module 'core'): ns3::TracedValue<ns3::TcpSocketState::EcnState_t> [class]
<     module.add_class('TracedValue', import_from_module='ns.core', template_parameters=['ns3::TcpSocketState::EcnState_t'])
---
>     module.add_class('TracedValue', template_parameters=['ns3::TcpSocket::TcpStates_t'])
333c258
<     module.add_class('TracedValue', import_from_module='ns.core', template_parameters=['ns3::TcpSocketState::TcpCongState_t'])
---
>     module.add_class('TracedValue', template_parameters=['ns3::TcpSocketState::TcpCongState_t'])
346,348d270
<     typehandlers.add_type_alias('uint32_t', 'ns3::TypeId::hash_t')
<     typehandlers.add_type_alias('uint32_t*', 'ns3::TypeId::hash_t*')
<     typehandlers.add_type_alias('uint32_t&', 'ns3::TypeId::hash_t&')
351c273
<     ## int64x64-128.h (module 'core'): ns3::int64x64_t [class]
---
>     ## int64x64-double.h (module 'core'): ns3::int64x64_t [class]
353c275
<     ## int64x64-128.h (module 'core'): ns3::int64x64_t::impl_type [enumeration]
---
>     ## int64x64-double.h (module 'core'): ns3::int64x64_t::impl_type [enumeration]
361,362c283,284
<     ## icmpv4.h (module 'internet'): ns3::Icmpv4DestinationUnreachable::ErrorDestinationUnreachable_e [enumeration]
<     module.add_enum('ErrorDestinationUnreachable_e', ['ICMPV4_NET_UNREACHABLE', 'ICMPV4_HOST_UNREACHABLE', 'ICMPV4_PROTOCOL_UNREACHABLE', 'ICMPV4_PORT_UNREACHABLE', 'ICMPV4_FRAG_NEEDED', 'ICMPV4_SOURCE_ROUTE_FAILED'], outer_class=root_module['ns3::Icmpv4DestinationUnreachable'])
---
>     ## icmpv4.h (module 'internet'): ns3::Icmpv4DestinationUnreachable [enumeration]
>     module.add_enum('', ['NET_UNREACHABLE', 'HOST_UNREACHABLE', 'PROTOCOL_UNREACHABLE', 'PORT_UNREACHABLE', 'FRAG_NEEDED', 'SOURCE_ROUTE_FAILED'], outer_class=root_module['ns3::Icmpv4DestinationUnreachable'])
367,368c289,290
<     ## icmpv4.h (module 'internet'): ns3::Icmpv4Header::Type_e [enumeration]
<     module.add_enum('Type_e', ['ICMPV4_ECHO_REPLY', 'ICMPV4_DEST_UNREACH', 'ICMPV4_ECHO', 'ICMPV4_TIME_EXCEEDED'], outer_class=root_module['ns3::Icmpv4Header'])
---
>     ## icmpv4.h (module 'internet'): ns3::Icmpv4Header [enumeration]
>     module.add_enum('', ['ECHO_REPLY', 'DEST_UNREACH', 'ECHO', 'TIME_EXCEEDED'], outer_class=root_module['ns3::Icmpv4Header'])
371,372c293,294
<     ## icmpv4.h (module 'internet'): ns3::Icmpv4TimeExceeded::ErrorTimeExceeded_e [enumeration]
<     module.add_enum('ErrorTimeExceeded_e', ['ICMPV4_TIME_TO_LIVE', 'ICMPV4_FRAGMENT_REASSEMBLY'], outer_class=root_module['ns3::Icmpv4TimeExceeded'])
---
>     ## icmpv4.h (module 'internet'): ns3::Icmpv4TimeExceeded [enumeration]
>     module.add_enum('', ['TIME_TO_LIVE', 'FRAGMENT_REASSEMBLY'], outer_class=root_module['ns3::Icmpv4TimeExceeded'])
437,438d358
<     ## ipv6-header.h (module 'internet'): ns3::Ipv6Header::EcnType [enumeration]
<     module.add_enum('EcnType', ['ECN_NotECT', 'ECN_ECT1', 'ECN_ECT0', 'ECN_CE'], outer_class=root_module['ns3::Ipv6Header'])
462a383,392
>     ## queue.h (module 'network'): ns3::Queue [class]
>     module.add_class('Queue', import_from_module='ns.network', parent=root_module['ns3::Object'])
>     ## queue.h (module 'network'): ns3::Queue::QueueMode [enumeration]
>     module.add_enum('QueueMode', ['QUEUE_MODE_PACKETS', 'QUEUE_MODE_BYTES'], outer_class=root_module['ns3::Queue'], import_from_module='ns.network')
>     ## queue-disc.h (module 'traffic-control'): ns3::QueueDisc [class]
>     module.add_class('QueueDisc', import_from_module='ns.traffic_control', parent=root_module['ns3::Object'])
>     ## queue-disc.h (module 'traffic-control'): ns3::QueueDisc::WakeMode [enumeration]
>     module.add_enum('WakeMode', ['WAKE_ROOT', 'WAKE_CHILD'], outer_class=root_module['ns3::QueueDisc'], import_from_module='ns.traffic-control')
>     ## queue-disc.h (module 'traffic-control'): ns3::QueueDiscClass [class]
>     module.add_class('QueueDiscClass', import_from_module='ns.traffic_control', parent=root_module['ns3::Object'])
484c414
<     module.add_class('SimpleRefCount', import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), automatic_type_narrowing=True, parent=root_module['ns3::empty'], template_parameters=['ns3::AttributeAccessor', 'ns3::empty', 'ns3::DefaultDeleter<ns3::AttributeAccessor>'])
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::AttributeAccessor', 'ns3::empty', 'ns3::DefaultDeleter<ns3::AttributeAccessor>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
486c416
<     module.add_class('SimpleRefCount', import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), automatic_type_narrowing=True, parent=root_module['ns3::empty'], template_parameters=['ns3::AttributeChecker', 'ns3::empty', 'ns3::DefaultDeleter<ns3::AttributeChecker>'])
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::AttributeChecker', 'ns3::empty', 'ns3::DefaultDeleter<ns3::AttributeChecker>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
488c418
<     module.add_class('SimpleRefCount', import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), automatic_type_narrowing=True, parent=root_module['ns3::empty'], template_parameters=['ns3::AttributeValue', 'ns3::empty', 'ns3::DefaultDeleter<ns3::AttributeValue>'])
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::AttributeValue', 'ns3::empty', 'ns3::DefaultDeleter<ns3::AttributeValue>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
490c420
<     module.add_class('SimpleRefCount', import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), automatic_type_narrowing=True, parent=root_module['ns3::empty'], template_parameters=['ns3::CallbackImplBase', 'ns3::empty', 'ns3::DefaultDeleter<ns3::CallbackImplBase>'])
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::CallbackImplBase', 'ns3::empty', 'ns3::DefaultDeleter<ns3::CallbackImplBase>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
492c422
<     module.add_class('SimpleRefCount', import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), automatic_type_narrowing=True, parent=root_module['ns3::empty'], template_parameters=['ns3::EventImpl', 'ns3::empty', 'ns3::DefaultDeleter<ns3::EventImpl>'])
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::EventImpl', 'ns3::empty', 'ns3::DefaultDeleter<ns3::EventImpl>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
494c424
<     module.add_class('SimpleRefCount', import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), automatic_type_narrowing=True, parent=root_module['ns3::empty'], template_parameters=['ns3::Hash::Implementation', 'ns3::empty', 'ns3::DefaultDeleter<ns3::Hash::Implementation>'])
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::Hash::Implementation', 'ns3::empty', 'ns3::DefaultDeleter<ns3::Hash::Implementation>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
496c426
<     module.add_class('SimpleRefCount', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), automatic_type_narrowing=True, parent=root_module['ns3::empty'], template_parameters=['ns3::Ipv4MulticastRoute', 'ns3::empty', 'ns3::DefaultDeleter<ns3::Ipv4MulticastRoute>'])
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, template_parameters=['ns3::Ipv4MulticastRoute', 'ns3::empty', 'ns3::DefaultDeleter<ns3::Ipv4MulticastRoute>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
498c428
<     module.add_class('SimpleRefCount', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), automatic_type_narrowing=True, parent=root_module['ns3::empty'], template_parameters=['ns3::Ipv4Route', 'ns3::empty', 'ns3::DefaultDeleter<ns3::Ipv4Route>'])
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, template_parameters=['ns3::Ipv4Route', 'ns3::empty', 'ns3::DefaultDeleter<ns3::Ipv4Route>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
500c430
<     module.add_class('SimpleRefCount', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), automatic_type_narrowing=True, parent=root_module['ns3::empty'], template_parameters=['ns3::Ipv6MulticastRoute', 'ns3::empty', 'ns3::DefaultDeleter<ns3::Ipv6MulticastRoute>'])
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, template_parameters=['ns3::Ipv6MulticastRoute', 'ns3::empty', 'ns3::DefaultDeleter<ns3::Ipv6MulticastRoute>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
502c432,434
<     module.add_class('SimpleRefCount', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), automatic_type_narrowing=True, parent=root_module['ns3::empty'], template_parameters=['ns3::Ipv6Route', 'ns3::empty', 'ns3::DefaultDeleter<ns3::Ipv6Route>'])
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, template_parameters=['ns3::Ipv6Route', 'ns3::empty', 'ns3::DefaultDeleter<ns3::Ipv6Route>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
>     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::NetDeviceQueue, ns3::empty, ns3::DefaultDeleter<ns3::NetDeviceQueue> > [class]
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::NetDeviceQueue', 'ns3::empty', 'ns3::DefaultDeleter<ns3::NetDeviceQueue>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
504c436
<     module.add_class('SimpleRefCount', import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), automatic_type_narrowing=True, parent=root_module['ns3::empty'], template_parameters=['ns3::NixVector', 'ns3::empty', 'ns3::DefaultDeleter<ns3::NixVector>'])
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::NixVector', 'ns3::empty', 'ns3::DefaultDeleter<ns3::NixVector>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
506c438
<     module.add_class('SimpleRefCount', import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), automatic_type_narrowing=True, parent=root_module['ns3::empty'], template_parameters=['ns3::OutputStreamWrapper', 'ns3::empty', 'ns3::DefaultDeleter<ns3::OutputStreamWrapper>'])
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::OutputStreamWrapper', 'ns3::empty', 'ns3::DefaultDeleter<ns3::OutputStreamWrapper>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
508c440
<     module.add_class('SimpleRefCount', import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), automatic_type_narrowing=True, parent=root_module['ns3::empty'], template_parameters=['ns3::Packet', 'ns3::empty', 'ns3::DefaultDeleter<ns3::Packet>'])
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::Packet', 'ns3::empty', 'ns3::DefaultDeleter<ns3::Packet>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
510c442
<     module.add_class('SimpleRefCount', import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), automatic_type_narrowing=True, parent=root_module['ns3::empty'], template_parameters=['ns3::QueueItem', 'ns3::empty', 'ns3::DefaultDeleter<ns3::QueueItem>'])
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::QueueItem', 'ns3::empty', 'ns3::DefaultDeleter<ns3::QueueItem>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
512c444
<     module.add_class('SimpleRefCount', import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), automatic_type_narrowing=True, parent=root_module['ns3::empty'], template_parameters=['ns3::TraceSourceAccessor', 'ns3::empty', 'ns3::DefaultDeleter<ns3::TraceSourceAccessor>'])
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::TraceSourceAccessor', 'ns3::empty', 'ns3::DefaultDeleter<ns3::TraceSourceAccessor>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
543,548d474
<     typehandlers.add_type_alias('std::list< ns3::Ptr< ns3::TcpOption const > >', 'ns3::TcpHeader::TcpOptionList')
<     typehandlers.add_type_alias('std::list< ns3::Ptr< ns3::TcpOption const > >*', 'ns3::TcpHeader::TcpOptionList*')
<     typehandlers.add_type_alias('std::list< ns3::Ptr< ns3::TcpOption const > >&', 'ns3::TcpHeader::TcpOptionList&')
<     typehandlers.add_type_alias('ns3::TcpHeader::Flags_t', 'ns3::TcpHeader::Flags_t')
<     typehandlers.add_type_alias('ns3::TcpHeader::Flags_t*', 'ns3::TcpHeader::Flags_t*')
<     typehandlers.add_type_alias('ns3::TcpHeader::Flags_t&', 'ns3::TcpHeader::Flags_t&')
554,572c480
<     module.add_enum('Kind', ['END', 'NOP', 'MSS', 'WINSCALE', 'SACKPERMITTED', 'SACK', 'TS', 'UNKNOWN'], outer_class=root_module['ns3::TcpOption'])
<     ## tcp-option-rfc793.h (module 'internet'): ns3::TcpOptionEnd [class]
<     module.add_class('TcpOptionEnd', parent=root_module['ns3::TcpOption'])
<     ## tcp-option-rfc793.h (module 'internet'): ns3::TcpOptionMSS [class]
<     module.add_class('TcpOptionMSS', parent=root_module['ns3::TcpOption'])
<     ## tcp-option-rfc793.h (module 'internet'): ns3::TcpOptionNOP [class]
<     module.add_class('TcpOptionNOP', parent=root_module['ns3::TcpOption'])
<     ## tcp-option-sack.h (module 'internet'): ns3::TcpOptionSack [class]
<     module.add_class('TcpOptionSack', parent=root_module['ns3::TcpOption'])
<     typehandlers.add_type_alias('std::pair< ns3::SequenceNumber< unsigned int, int >, ns3::SequenceNumber< unsigned int, int > >', 'ns3::TcpOptionSack::SackBlock')
<     typehandlers.add_type_alias('std::pair< ns3::SequenceNumber< unsigned int, int >, ns3::SequenceNumber< unsigned int, int > >*', 'ns3::TcpOptionSack::SackBlock*')
<     typehandlers.add_type_alias('std::pair< ns3::SequenceNumber< unsigned int, int >, ns3::SequenceNumber< unsigned int, int > >&', 'ns3::TcpOptionSack::SackBlock&')
<     typehandlers.add_type_alias('std::list< std::pair< ns3::SequenceNumber< unsigned int, int >, ns3::SequenceNumber< unsigned int, int > > >', 'ns3::TcpOptionSack::SackList')
<     typehandlers.add_type_alias('std::list< std::pair< ns3::SequenceNumber< unsigned int, int >, ns3::SequenceNumber< unsigned int, int > > >*', 'ns3::TcpOptionSack::SackList*')
<     typehandlers.add_type_alias('std::list< std::pair< ns3::SequenceNumber< unsigned int, int >, ns3::SequenceNumber< unsigned int, int > > >&', 'ns3::TcpOptionSack::SackList&')
<     ## tcp-option-sack-permitted.h (module 'internet'): ns3::TcpOptionSackPermitted [class]
<     module.add_class('TcpOptionSackPermitted', parent=root_module['ns3::TcpOption'])
<     ## tcp-option-ts.h (module 'internet'): ns3::TcpOptionTS [class]
<     module.add_class('TcpOptionTS', parent=root_module['ns3::TcpOption'])
---
>     module.add_enum('Kind', ['END', 'NOP', 'MSS', 'WINSCALE', 'TS', 'UNKNOWN'], outer_class=root_module['ns3::TcpOption'])
575,584d482
<     ## tcp-option-winscale.h (module 'internet'): ns3::TcpOptionWinScale [class]
<     module.add_class('TcpOptionWinScale', parent=root_module['ns3::TcpOption'])
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps [class]
<     module.add_class('TcpRateOps', parent=root_module['ns3::Object'])
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateConnection [struct]
<     module.add_class('TcpRateConnection', outer_class=root_module['ns3::TcpRateOps'])
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateSample [struct]
<     module.add_class('TcpRateSample', outer_class=root_module['ns3::TcpRateOps'])
<     ## tcp-recovery-ops.h (module 'internet'): ns3::TcpRecoveryOps [class]
<     module.add_class('TcpRecoveryOps', parent=root_module['ns3::Object'])
593,595d490
<     typehandlers.add_type_alias('ns3::TcpSocket::TcpStates_t', 'ns3::TcpSocket::TcpStates_t')
<     typehandlers.add_type_alias('ns3::TcpSocket::TcpStates_t*', 'ns3::TcpSocket::TcpStates_t*')
<     typehandlers.add_type_alias('ns3::TcpSocket::TcpStates_t&', 'ns3::TcpSocket::TcpStates_t&')
598,600d492
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const > const, ns3::TcpHeader const &, ns3::Ptr< ns3::TcpSocketBase const > const )', 'ns3::TcpSocketBase::TcpTxRxTracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const > const, ns3::TcpHeader const &, ns3::Ptr< ns3::TcpSocketBase const > const )*', 'ns3::TcpSocketBase::TcpTxRxTracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const > const, ns3::TcpHeader const &, ns3::Ptr< ns3::TcpSocketBase const > const )&', 'ns3::TcpSocketBase::TcpTxRxTracedCallback&')
603c495
<     ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState [class]
---
>     ## tcp-socket-base.h (module 'internet'): ns3::TcpSocketState [class]
605c497
<     ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::TcpCongState_t [enumeration]
---
>     ## tcp-socket-base.h (module 'internet'): ns3::TcpSocketState::TcpCongState_t [enumeration]
607,634d498
<     ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::TcpCAEvent_t [enumeration]
<     module.add_enum('TcpCAEvent_t', ['CA_EVENT_TX_START', 'CA_EVENT_CWND_RESTART', 'CA_EVENT_COMPLETE_CWR', 'CA_EVENT_LOSS', 'CA_EVENT_ECN_NO_CE', 'CA_EVENT_ECN_IS_CE', 'CA_EVENT_DELAYED_ACK', 'CA_EVENT_NON_DELAYED_ACK'], outer_class=root_module['ns3::TcpSocketState'])
<     ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::UseEcn_t [enumeration]
<     module.add_enum('UseEcn_t', ['Off', 'On', 'AcceptOnly'], outer_class=root_module['ns3::TcpSocketState'])
<     ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::EcnCodePoint_t [enumeration]
<     module.add_enum('EcnCodePoint_t', ['NotECT', 'Ect1', 'Ect0', 'CongExp'], outer_class=root_module['ns3::TcpSocketState'])
<     ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::EcnMode_t [enumeration]
<     module.add_enum('EcnMode_t', ['ClassicEcn', 'DctcpEcn'], outer_class=root_module['ns3::TcpSocketState'])
<     ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::EcnState_t [enumeration]
<     module.add_enum('EcnState_t', ['ECN_DISABLED', 'ECN_IDLE', 'ECN_CE_RCVD', 'ECN_SENDING_ECE', 'ECN_ECE_RCVD', 'ECN_CWR_SENT'], outer_class=root_module['ns3::TcpSocketState'])
<     typehandlers.add_type_alias('ns3::TcpSocketState::TcpCongState_t', 'ns3::TcpSocketState::TcpCongState_t')
<     typehandlers.add_type_alias('ns3::TcpSocketState::TcpCongState_t*', 'ns3::TcpSocketState::TcpCongState_t*')
<     typehandlers.add_type_alias('ns3::TcpSocketState::TcpCongState_t&', 'ns3::TcpSocketState::TcpCongState_t&')
<     typehandlers.add_type_alias('ns3::TcpSocketState::TcpCAEvent_t', 'ns3::TcpSocketState::TcpCAEvent_t')
<     typehandlers.add_type_alias('ns3::TcpSocketState::TcpCAEvent_t*', 'ns3::TcpSocketState::TcpCAEvent_t*')
<     typehandlers.add_type_alias('ns3::TcpSocketState::TcpCAEvent_t&', 'ns3::TcpSocketState::TcpCAEvent_t&')
<     typehandlers.add_type_alias('ns3::TcpSocketState::UseEcn_t', 'ns3::TcpSocketState::UseEcn_t')
<     typehandlers.add_type_alias('ns3::TcpSocketState::UseEcn_t*', 'ns3::TcpSocketState::UseEcn_t*')
<     typehandlers.add_type_alias('ns3::TcpSocketState::UseEcn_t&', 'ns3::TcpSocketState::UseEcn_t&')
<     typehandlers.add_type_alias('ns3::TcpSocketState::EcnCodePoint_t', 'ns3::TcpSocketState::EcnCodePoint_t')
<     typehandlers.add_type_alias('ns3::TcpSocketState::EcnCodePoint_t*', 'ns3::TcpSocketState::EcnCodePoint_t*')
<     typehandlers.add_type_alias('ns3::TcpSocketState::EcnCodePoint_t&', 'ns3::TcpSocketState::EcnCodePoint_t&')
<     typehandlers.add_type_alias('ns3::TcpSocketState::EcnMode_t', 'ns3::TcpSocketState::EcnMode_t')
<     typehandlers.add_type_alias('ns3::TcpSocketState::EcnMode_t*', 'ns3::TcpSocketState::EcnMode_t*')
<     typehandlers.add_type_alias('ns3::TcpSocketState::EcnMode_t&', 'ns3::TcpSocketState::EcnMode_t&')
<     typehandlers.add_type_alias('ns3::TcpSocketState::EcnState_t', 'ns3::TcpSocketState::EcnState_t')
<     typehandlers.add_type_alias('ns3::TcpSocketState::EcnState_t*', 'ns3::TcpSocketState::EcnState_t*')
<     typehandlers.add_type_alias('ns3::TcpSocketState::EcnState_t&', 'ns3::TcpSocketState::EcnState_t&')
653,655d516
<     typehandlers.add_type_alias('void ( * ) ( ns3::Time )', 'ns3::Time::TracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Time )*', 'ns3::Time::TracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Time )&', 'ns3::Time::TracedCallback&')
663a525,526
>     ## traffic-control-layer.h (module 'traffic-control'): ns3::TrafficControlLayer [class]
>     module.add_class('TrafficControlLayer', import_from_module='ns.traffic_control', parent=root_module['ns3::Object'])
686,688d548
<     typehandlers.add_type_alias('std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv4Header >', 'ns3::ArpCache::Ipv4PayloadHeaderPair')
<     typehandlers.add_type_alias('std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv4Header >*', 'ns3::ArpCache::Ipv4PayloadHeaderPair*')
<     typehandlers.add_type_alias('std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv4Header >&', 'ns3::ArpCache::Ipv4PayloadHeaderPair&')
698c558
<     module.add_class('AttributeChecker', import_from_module='ns.core', automatic_type_narrowing=True, allow_subclassing=False, parent=root_module['ns3::SimpleRefCount< ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker> >'])
---
>     module.add_class('AttributeChecker', allow_subclassing=False, automatic_type_narrowing=True, import_from_module='ns.core', parent=root_module['ns3::SimpleRefCount< ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker> >'])
700c560
<     module.add_class('AttributeValue', import_from_module='ns.core', automatic_type_narrowing=True, allow_subclassing=False, parent=root_module['ns3::SimpleRefCount< ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue> >'])
---
>     module.add_class('AttributeValue', allow_subclassing=False, automatic_type_narrowing=True, import_from_module='ns.core', parent=root_module['ns3::SimpleRefCount< ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue> >'])
717,720d576
<     ## data-rate.h (module 'network'): ns3::DataRateChecker [class]
<     module.add_class('DataRateChecker', import_from_module='ns.network', parent=root_module['ns3::AttributeChecker'])
<     ## data-rate.h (module 'network'): ns3::DataRateValue [class]
<     module.add_class('DataRateValue', import_from_module='ns.network', parent=root_module['ns3::AttributeValue'])
757,762d612
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Ipv4Address, ns3::Ipv4Address, unsigned char, ns3::Ptr< ns3::Ipv4Route >, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::IpL4Protocol::DownTargetCallback')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Ipv4Address, ns3::Ipv4Address, unsigned char, ns3::Ptr< ns3::Ipv4Route >, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::IpL4Protocol::DownTargetCallback*')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Ipv4Address, ns3::Ipv4Address, unsigned char, ns3::Ptr< ns3::Ipv4Route >, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::IpL4Protocol::DownTargetCallback&')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Ipv6Address, ns3::Ipv6Address, unsigned char, ns3::Ptr< ns3::Ipv6Route >, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::IpL4Protocol::DownTargetCallback6')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Ipv6Address, ns3::Ipv6Address, unsigned char, ns3::Ptr< ns3::Ipv6Route >, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::IpL4Protocol::DownTargetCallback6*')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Ipv6Address, ns3::Ipv6Address, unsigned char, ns3::Ptr< ns3::Ipv6Route >, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::IpL4Protocol::DownTargetCallback6&')
774,783c624
<     module.add_enum('DropReason', ['DROP_TTL_EXPIRED', 'DROP_NO_ROUTE', 'DROP_BAD_CHECKSUM', 'DROP_INTERFACE_DOWN', 'DROP_ROUTE_ERROR', 'DROP_FRAGMENT_TIMEOUT', 'DROP_DUPLICATE'], outer_class=root_module['ns3::Ipv4L3Protocol'])
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ipv4Header const &, ns3::Ptr< ns3::Packet const >, uint32_t )', 'ns3::Ipv4L3Protocol::SentTracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ipv4Header const &, ns3::Ptr< ns3::Packet const >, uint32_t )*', 'ns3::Ipv4L3Protocol::SentTracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ipv4Header const &, ns3::Ptr< ns3::Packet const >, uint32_t )&', 'ns3::Ipv4L3Protocol::SentTracedCallback&')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Ptr< ns3::Ipv4 >, uint32_t )', 'ns3::Ipv4L3Protocol::TxRxTracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Ptr< ns3::Ipv4 >, uint32_t )*', 'ns3::Ipv4L3Protocol::TxRxTracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Ptr< ns3::Ipv4 >, uint32_t )&', 'ns3::Ipv4L3Protocol::TxRxTracedCallback&')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ipv4Header const &, ns3::Ptr< ns3::Packet const >, ns3::Ipv4L3Protocol::DropReason, ns3::Ptr< ns3::Ipv4 >, uint32_t )', 'ns3::Ipv4L3Protocol::DropTracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ipv4Header const &, ns3::Ptr< ns3::Packet const >, ns3::Ipv4L3Protocol::DropReason, ns3::Ptr< ns3::Ipv4 >, uint32_t )*', 'ns3::Ipv4L3Protocol::DropTracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ipv4Header const &, ns3::Ptr< ns3::Packet const >, ns3::Ipv4L3Protocol::DropReason, ns3::Ptr< ns3::Ipv4 >, uint32_t )&', 'ns3::Ipv4L3Protocol::DropTracedCallback&')
---
>     module.add_enum('DropReason', ['DROP_TTL_EXPIRED', 'DROP_NO_ROUTE', 'DROP_BAD_CHECKSUM', 'DROP_INTERFACE_DOWN', 'DROP_ROUTE_ERROR', 'DROP_FRAGMENT_TIMEOUT'], outer_class=root_module['ns3::Ipv4L3Protocol'])
800,811d640
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Ipv4Route >, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::Ipv4RoutingProtocol::UnicastForwardCallback')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Ipv4Route >, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::Ipv4RoutingProtocol::UnicastForwardCallback*')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Ipv4Route >, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::Ipv4RoutingProtocol::UnicastForwardCallback&')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Ipv4MulticastRoute >, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::Ipv4RoutingProtocol::MulticastForwardCallback')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Ipv4MulticastRoute >, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::Ipv4RoutingProtocol::MulticastForwardCallback*')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Ipv4MulticastRoute >, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::Ipv4RoutingProtocol::MulticastForwardCallback&')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::Ipv4RoutingProtocol::LocalDeliverCallback')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::Ipv4RoutingProtocol::LocalDeliverCallback*')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::Ipv4RoutingProtocol::LocalDeliverCallback&')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::Socket::SocketErrno, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::Ipv4RoutingProtocol::ErrorCallback')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::Socket::SocketErrno, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::Ipv4RoutingProtocol::ErrorCallback*')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::Socket::SocketErrno, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::Ipv4RoutingProtocol::ErrorCallback&')
838,840d666
<     typehandlers.add_type_alias('std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv6Header >', 'ns3::Ipv6ExtensionFragment::Ipv6PayloadHeaderPair')
<     typehandlers.add_type_alias('std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv6Header >*', 'ns3::Ipv6ExtensionFragment::Ipv6PayloadHeaderPair*')
<     typehandlers.add_type_alias('std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv6Header >&', 'ns3::Ipv6ExtensionFragment::Ipv6PayloadHeaderPair&')
857,865d682
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ipv6Header const &, ns3::Ptr< ns3::Packet const >, uint32_t )', 'ns3::Ipv6L3Protocol::SentTracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ipv6Header const &, ns3::Ptr< ns3::Packet const >, uint32_t )*', 'ns3::Ipv6L3Protocol::SentTracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ipv6Header const &, ns3::Ptr< ns3::Packet const >, uint32_t )&', 'ns3::Ipv6L3Protocol::SentTracedCallback&')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Ptr< ns3::Ipv6 >, uint32_t )', 'ns3::Ipv6L3Protocol::TxRxTracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Ptr< ns3::Ipv6 >, uint32_t )*', 'ns3::Ipv6L3Protocol::TxRxTracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Ptr< ns3::Ipv6 >, uint32_t )&', 'ns3::Ipv6L3Protocol::TxRxTracedCallback&')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ipv6Header const &, ns3::Ptr< ns3::Packet const >, ns3::Ipv6L3Protocol::DropReason, ns3::Ptr< ns3::Ipv6 >, uint32_t )', 'ns3::Ipv6L3Protocol::DropTracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ipv6Header const &, ns3::Ptr< ns3::Packet const >, ns3::Ipv6L3Protocol::DropReason, ns3::Ptr< ns3::Ipv6 >, uint32_t )*', 'ns3::Ipv6L3Protocol::DropTracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ipv6Header const &, ns3::Ptr< ns3::Packet const >, ns3::Ipv6L3Protocol::DropReason, ns3::Ptr< ns3::Ipv6 >, uint32_t )&', 'ns3::Ipv6L3Protocol::DropTracedCallback&')
868,877d684
<     ## ipv6-option.h (module 'internet'): ns3::Ipv6Option [class]
<     module.add_class('Ipv6Option', parent=root_module['ns3::Object'])
<     ## ipv6-option.h (module 'internet'): ns3::Ipv6OptionJumbogram [class]
<     module.add_class('Ipv6OptionJumbogram', parent=root_module['ns3::Ipv6Option'])
<     ## ipv6-option.h (module 'internet'): ns3::Ipv6OptionPad1 [class]
<     module.add_class('Ipv6OptionPad1', parent=root_module['ns3::Ipv6Option'])
<     ## ipv6-option.h (module 'internet'): ns3::Ipv6OptionPadn [class]
<     module.add_class('Ipv6OptionPadn', parent=root_module['ns3::Ipv6Option'])
<     ## ipv6-option.h (module 'internet'): ns3::Ipv6OptionRouterAlert [class]
<     module.add_class('Ipv6OptionRouterAlert', parent=root_module['ns3::Ipv6Option'])
892,903d698
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice const >, ns3::Ptr< ns3::Ipv6Route >, ns3::Ptr< ns3::Packet const >, ns3::Ipv6Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::Ipv6RoutingProtocol::UnicastForwardCallback')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice const >, ns3::Ptr< ns3::Ipv6Route >, ns3::Ptr< ns3::Packet const >, ns3::Ipv6Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::Ipv6RoutingProtocol::UnicastForwardCallback*')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice const >, ns3::Ptr< ns3::Ipv6Route >, ns3::Ptr< ns3::Packet const >, ns3::Ipv6Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::Ipv6RoutingProtocol::UnicastForwardCallback&')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice const >, ns3::Ptr< ns3::Ipv6MulticastRoute >, ns3::Ptr< ns3::Packet const >, ns3::Ipv6Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::Ipv6RoutingProtocol::MulticastForwardCallback')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice const >, ns3::Ptr< ns3::Ipv6MulticastRoute >, ns3::Ptr< ns3::Packet const >, ns3::Ipv6Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::Ipv6RoutingProtocol::MulticastForwardCallback*')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice const >, ns3::Ptr< ns3::Ipv6MulticastRoute >, ns3::Ptr< ns3::Packet const >, ns3::Ipv6Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::Ipv6RoutingProtocol::MulticastForwardCallback&')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv6Header const &, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::Ipv6RoutingProtocol::LocalDeliverCallback')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv6Header const &, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::Ipv6RoutingProtocol::LocalDeliverCallback*')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv6Header const &, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::Ipv6RoutingProtocol::LocalDeliverCallback&')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv6Header const &, ns3::Socket::SocketErrno, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::Ipv6RoutingProtocol::ErrorCallback')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv6Header const &, ns3::Socket::SocketErrno, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::Ipv6RoutingProtocol::ErrorCallback*')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv6Header const &, ns3::Socket::SocketErrno, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::Ipv6RoutingProtocol::ErrorCallback&')
916,918d710
<     typehandlers.add_type_alias('std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv6Header >', 'ns3::NdiscCache::Ipv6PayloadHeaderPair')
<     typehandlers.add_type_alias('std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv6Header >*', 'ns3::NdiscCache::Ipv6PayloadHeaderPair*')
<     typehandlers.add_type_alias('std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv6Header >&', 'ns3::NdiscCache::Ipv6PayloadHeaderPair&')
923,931c715,718
<     typehandlers.add_type_alias('void ( * ) (  )', 'ns3::NetDevice::LinkChangeTracedCallback')
<     typehandlers.add_type_alias('void ( * ) (  )*', 'ns3::NetDevice::LinkChangeTracedCallback*')
<     typehandlers.add_type_alias('void ( * ) (  )&', 'ns3::NetDevice::LinkChangeTracedCallback&')
<     typehandlers.add_type_alias('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::NetDevice::ReceiveCallback')
<     typehandlers.add_type_alias('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::NetDevice::ReceiveCallback*')
<     typehandlers.add_type_alias('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::NetDevice::ReceiveCallback&')
<     typehandlers.add_type_alias('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >', 'ns3::NetDevice::PromiscReceiveCallback')
<     typehandlers.add_type_alias('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::NetDevice::PromiscReceiveCallback*')
<     typehandlers.add_type_alias('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::NetDevice::PromiscReceiveCallback&')
---
>     ## net-device.h (module 'network'): ns3::NetDeviceQueue [class]
>     module.add_class('NetDeviceQueue', import_from_module='ns.network', parent=root_module['ns3::SimpleRefCount< ns3::NetDeviceQueue, ns3::empty, ns3::DefaultDeleter<ns3::NetDeviceQueue> >'])
>     ## net-device.h (module 'network'): ns3::NetDeviceQueueInterface [class]
>     module.add_class('NetDeviceQueueInterface', import_from_module='ns.network', parent=root_module['ns3::Object'])
936,941d722
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >', 'ns3::Node::ProtocolHandler')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::Node::ProtocolHandler*')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::Node::ProtocolHandler&')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::Node::DeviceAdditionListener')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::Node::DeviceAdditionListener*')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::Node::DeviceAdditionListener&')
952,969d732
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const > )', 'ns3::Packet::TracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const > )*', 'ns3::Packet::TracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const > )&', 'ns3::Packet::TracedCallback&')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Address const & )', 'ns3::Packet::AddressTracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Address const & )*', 'ns3::Packet::AddressTracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Address const & )&', 'ns3::Packet::AddressTracedCallback&')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const > const, ns3::Address const &, ns3::Address const & )', 'ns3::Packet::TwoAddressTracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const > const, ns3::Address const &, ns3::Address const & )*', 'ns3::Packet::TwoAddressTracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const > const, ns3::Address const &, ns3::Address const & )&', 'ns3::Packet::TwoAddressTracedCallback&')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Mac48Address )', 'ns3::Packet::Mac48AddressTracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Mac48Address )*', 'ns3::Packet::Mac48AddressTracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Mac48Address )&', 'ns3::Packet::Mac48AddressTracedCallback&')
<     typehandlers.add_type_alias('void ( * ) ( uint32_t, uint32_t )', 'ns3::Packet::SizeTracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( uint32_t, uint32_t )*', 'ns3::Packet::SizeTracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( uint32_t, uint32_t )&', 'ns3::Packet::SizeTracedCallback&')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, double )', 'ns3::Packet::SinrTracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, double )*', 'ns3::Packet::SinrTracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, double )&', 'ns3::Packet::SinrTracedCallback&')
974c737
<     ## queue-item.h (module 'network'): ns3::QueueItem [class]
---
>     ## net-device.h (module 'network'): ns3::QueueItem [class]
976c739
<     ## queue-item.h (module 'network'): ns3::QueueItem::Uint8Values [enumeration]
---
>     ## net-device.h (module 'network'): ns3::QueueItem::Uint8Values [enumeration]
978,980d740
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::QueueItem const > )', 'ns3::QueueItem::TracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::QueueItem const > )*', 'ns3::QueueItem::TracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::QueueItem const > )&', 'ns3::QueueItem::TracedCallback&')
991,994d750
<     ## tcp-recovery-ops.h (module 'internet'): ns3::TcpClassicRecovery [class]
<     module.add_class('TcpClassicRecovery', parent=root_module['ns3::TcpRecoveryOps'])
<     ## tcp-dctcp.h (module 'internet'): ns3::TcpDctcp [class]
<     module.add_class('TcpDctcp', parent=root_module['ns3::TcpNewReno'])
1005,1023d760
<     ## tcp-ledbat.h (module 'internet'): ns3::TcpLedbat [class]
<     module.add_class('TcpLedbat', parent=root_module['ns3::TcpNewReno'])
<     ## tcp-lp.h (module 'internet'): ns3::TcpLp [class]
<     module.add_class('TcpLp', parent=root_module['ns3::TcpNewReno'])
<     ## tcp-prr-recovery.h (module 'internet'): ns3::TcpPrrRecovery [class]
<     module.add_class('TcpPrrRecovery', parent=root_module['ns3::TcpClassicRecovery'])
<     ## tcp-prr-recovery.h (module 'internet'): ns3::TcpPrrRecovery::ReductionBound_t [enumeration]
<     module.add_enum('ReductionBound_t', ['CRB', 'SSRB'], outer_class=root_module['ns3::TcpPrrRecovery'])
<     typehandlers.add_type_alias('ns3::TcpPrrRecovery::ReductionBound_t', 'ns3::TcpPrrRecovery::ReductionBound_t')
<     typehandlers.add_type_alias('ns3::TcpPrrRecovery::ReductionBound_t*', 'ns3::TcpPrrRecovery::ReductionBound_t*')
<     typehandlers.add_type_alias('ns3::TcpPrrRecovery::ReductionBound_t&', 'ns3::TcpPrrRecovery::ReductionBound_t&')
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateLinux [class]
<     module.add_class('TcpRateLinux', parent=root_module['ns3::TcpRateOps'])
<     typehandlers.add_type_alias('void ( * ) ( ns3::TcpRateOps::TcpRateConnection const & )', 'ns3::TcpRateLinux::TcpRateUpdated')
<     typehandlers.add_type_alias('void ( * ) ( ns3::TcpRateOps::TcpRateConnection const & )*', 'ns3::TcpRateLinux::TcpRateUpdated*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::TcpRateOps::TcpRateConnection const & )&', 'ns3::TcpRateLinux::TcpRateUpdated&')
<     typehandlers.add_type_alias('void ( * ) ( ns3::TcpRateOps::TcpRateSample const & )', 'ns3::TcpRateLinux::TcpRateSampleUpdated')
<     typehandlers.add_type_alias('void ( * ) ( ns3::TcpRateOps::TcpRateSample const & )*', 'ns3::TcpRateLinux::TcpRateSampleUpdated*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::TcpRateOps::TcpRateSample const & )&', 'ns3::TcpRateLinux::TcpRateSampleUpdated&')
1042,1107c779,782
<     ## callback.h (module 'core'): ns3::CallbackImpl<bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['bool', 'ns3::Ptr<ns3::NetDevice>', 'ns3::Ptr<const ns3::Packet>', 'unsigned short', 'const ns3::Address &', 'const ns3::Address &', 'ns3::NetDevice::PacketType', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['bool', 'ns3::Ptr<ns3::NetDevice>', 'ns3::Ptr<const ns3::Packet>', 'unsigned short', 'const ns3::Address &', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<bool, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['bool', 'ns3::Ptr<ns3::Socket>', 'const ns3::Address &', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['ns3::ObjectBase *', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::Ipv4Header &, ns3::Ptr<const ns3::Packet>, ns3::Ipv4L3Protocol::DropReason, ns3::Ptr<ns3::Ipv4>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'const ns3::Ipv4Header &', 'ns3::Ptr<const ns3::Packet>', 'ns3::Ipv4L3Protocol::DropReason', 'ns3::Ptr<ns3::Ipv4>', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::Ipv4Header &, ns3::Ptr<const ns3::Packet>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'const ns3::Ipv4Header &', 'ns3::Ptr<const ns3::Packet>', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::Ipv6Header &, ns3::Ptr<const ns3::Packet>, ns3::Ipv6L3Protocol::DropReason, ns3::Ptr<ns3::Ipv6>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'const ns3::Ipv6Header &', 'ns3::Ptr<const ns3::Packet>', 'ns3::Ipv6L3Protocol::DropReason', 'ns3::Ptr<ns3::Ipv6>', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::Ipv6Header &, ns3::Ptr<const ns3::Packet>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'const ns3::Ipv6Header &', 'ns3::Ptr<const ns3::Packet>', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::TcpRateOps::TcpRateConnection &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'const ns3::TcpRateOps::TcpRateConnection &', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::TcpRateOps::TcpRateSample &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'const ns3::TcpRateOps::TcpRateSample &', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, double, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'double', 'double', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ipv4Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ipv4Address', 'unsigned char', 'unsigned char', 'unsigned char', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ipv6Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ipv6Address', 'unsigned char', 'unsigned char', 'unsigned char', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, const ns3::TcpHeader &, ns3::Ptr<const ns3::TcpSocketBase>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<const ns3::Packet>', 'const ns3::TcpHeader &', 'ns3::Ptr<const ns3::TcpSocketBase>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::Ptr<ns3::Ipv4>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<const ns3::Packet>', 'ns3::Ptr<ns3::Ipv4>', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::Ptr<ns3::Ipv6>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<const ns3::Packet>', 'ns3::Ptr<ns3::Ipv6>', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<const ns3::Packet>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<ns3::NetDevice>', 'ns3::Ptr<const ns3::Packet>', 'unsigned short', 'const ns3::Address &', 'const ns3::Address &', 'ns3::NetDevice::PacketType', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<ns3::NetDevice>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv4Address, ns3::Ipv4Address, unsigned char, ns3::Ptr<ns3::Ipv4Route>, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<ns3::Packet>', 'ns3::Ipv4Address', 'ns3::Ipv4Address', 'unsigned char', 'ns3::Ptr<ns3::Ipv4Route>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv4Header, unsigned short, ns3::Ptr<ns3::Ipv4Interface>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<ns3::Packet>', 'ns3::Ipv4Header', 'unsigned short', 'ns3::Ptr<ns3::Ipv4Interface>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv6Address, ns3::Ipv6Address, unsigned char, ns3::Ptr<ns3::Ipv6Route>, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<ns3::Packet>', 'ns3::Ipv6Address', 'ns3::Ipv6Address', 'unsigned char', 'ns3::Ptr<ns3::Ipv6Route>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv6Header, unsigned short, ns3::Ptr<ns3::Ipv6Interface>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<ns3::Packet>', 'ns3::Ipv6Header', 'unsigned short', 'ns3::Ptr<ns3::Ipv6Interface>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<ns3::Socket>', 'const ns3::Address &', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<ns3::Socket>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<ns3::Socket>', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::SequenceNumber<unsigned int, int>, ns3::SequenceNumber<unsigned int, int>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::SequenceNumber<unsigned int, int>', 'ns3::SequenceNumber<unsigned int, int>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::TcpSocket::TcpStates_t, ns3::TcpSocket::TcpStates_t, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::TcpSocket::TcpStates_t', 'ns3::TcpSocket::TcpStates_t', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::TcpSocketState::EcnState_t, ns3::TcpSocketState::EcnState_t, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::TcpSocketState::EcnState_t', 'ns3::TcpSocketState::EcnState_t', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::TcpSocketState::TcpCongState_t, ns3::TcpSocketState::TcpCongState_t, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::TcpSocketState::TcpCongState_t', 'ns3::TcpSocketState::TcpCongState_t', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Time, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Time', 'ns3::Time', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned int, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'unsigned int', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
---
>     ## ipv4-packet-filter.h (module 'internet'): ns3::FqCoDelIpv4PacketFilter [class]
>     module.add_class('FqCoDelIpv4PacketFilter', parent=root_module['ns3::Ipv4PacketFilter'])
>     ## ipv6-packet-filter.h (module 'internet'): ns3::FqCoDelIpv6PacketFilter [class]
>     module.add_class('FqCoDelIpv6PacketFilter', parent=root_module['ns3::Ipv6PacketFilter'])
1126,1129c801,802
<     ## queue-item.h (module 'network'): ns3::QueueDiscItem [class]
<     module.add_class('QueueDiscItem', import_from_module='ns.network', parent=root_module['ns3::QueueItem'])
<     ## arp-queue-disc-item.h (module 'internet'): ns3::ArpQueueDiscItem [class]
<     module.add_class('ArpQueueDiscItem', parent=root_module['ns3::QueueDiscItem'])
---
>     ## queue-disc.h (module 'traffic-control'): ns3::QueueDiscItem [class]
>     module.add_class('QueueDiscItem', import_from_module='ns.traffic_control', parent=root_module['ns3::QueueItem'])
1134,1169c807,836
<     module.add_container('std::list< ns3::Ipv4EndPoint * >', 'ns3::Ipv4EndPoint *', container_type='list')
<     module.add_container('ns3::Ipv4EndPointDemux::EndPoints', 'ns3::Ipv4EndPoint *', container_type='list')
<     module.add_container('std::vector< unsigned int >', 'unsigned int', container_type='vector')
<     module.add_container('std::vector< bool >', 'bool', container_type='vector')
<     module.add_container('std::list< ns3::Ipv6EndPoint * >', 'ns3::Ipv6EndPoint *', container_type='list')
<     module.add_container('ns3::Ipv6EndPointDemux::EndPoints', 'ns3::Ipv6EndPoint *', container_type='list')
<     module.add_container('std::list< ns3::RipRte >', 'ns3::RipRte', container_type='list')
<     module.add_container('std::list< ns3::RipNgRte >', 'ns3::RipNgRte', container_type='list')
<     module.add_container('std::vector< ns3::Ipv6Address >', 'ns3::Ipv6Address', container_type='vector')
<     module.add_container('std::list< ns3::Ptr< ns3::TcpOption const > >', 'ns3::Ptr< ns3::TcpOption const >', container_type='list')
<     module.add_container('std::list< std::pair< ns3::SequenceNumber< unsigned int, int >, ns3::SequenceNumber< unsigned int, int > > >', 'std::pair< ns3::SequenceNumber< unsigned int, int >, ns3::SequenceNumber< unsigned int, int > >', container_type='list')
<     module.add_container('ns3::TcpOptionSack::SackList', 'std::pair< ns3::SequenceNumber< unsigned int, int >, ns3::SequenceNumber< unsigned int, int > >', container_type='list')
<     module.add_container('std::list< std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv4Header > >', 'std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv4Header >', container_type='list')
<     module.add_container('std::list< ns3::ArpCache::Entry * >', 'ns3::ArpCache::Entry *', container_type='list')
<     module.add_container('std::map< unsigned int, unsigned int >', ('unsigned int', 'unsigned int'), container_type='map')
<     module.add_container('std::list< std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv6Header > >', 'std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv6Header >', container_type='list')
<     module.add_container('std::list< ns3::NdiscCache::Entry * >', 'ns3::NdiscCache::Entry *', container_type='list')
<     module.add_container('std::set< unsigned int >', 'unsigned int', container_type='set')
<     typehandlers.add_type_alias('void ( * ) ( ns3::TcpSocketState::TcpCongState_t const, ns3::TcpSocketState::TcpCongState_t const )', 'ns3::TcpCongStatesTracedValueCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::TcpSocketState::TcpCongState_t const, ns3::TcpSocketState::TcpCongState_t const )*', 'ns3::TcpCongStatesTracedValueCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::TcpSocketState::TcpCongState_t const, ns3::TcpSocketState::TcpCongState_t const )&', 'ns3::TcpCongStatesTracedValueCallback&')
<     typehandlers.add_type_alias('void ( * ) ( ns3::TcpSocketState::EcnState_t const, ns3::TcpSocketState::EcnState_t const )', 'ns3::EcnStatesTracedValueCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::TcpSocketState::EcnState_t const, ns3::TcpSocketState::EcnState_t const )*', 'ns3::EcnStatesTracedValueCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::TcpSocketState::EcnState_t const, ns3::TcpSocketState::EcnState_t const )&', 'ns3::EcnStatesTracedValueCallback&')
<     typehandlers.add_type_alias('void ( * ) ( ns3::TcpSocket::TcpStates_t const, ns3::TcpSocket::TcpStates_t const )', 'ns3::TcpStatesTracedValueCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::TcpSocket::TcpStates_t const, ns3::TcpSocket::TcpStates_t const )*', 'ns3::TcpStatesTracedValueCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::TcpSocket::TcpStates_t const, ns3::TcpSocket::TcpStates_t const )&', 'ns3::TcpStatesTracedValueCallback&')
<     typehandlers.add_type_alias('ns3::SequenceNumber< unsigned int, int >', 'ns3::SequenceNumber32')
<     typehandlers.add_type_alias('ns3::SequenceNumber< unsigned int, int >*', 'ns3::SequenceNumber32*')
<     typehandlers.add_type_alias('ns3::SequenceNumber< unsigned int, int >&', 'ns3::SequenceNumber32&')
<     typehandlers.add_type_alias('ns3::SequenceNumber< unsigned short, short >', 'ns3::SequenceNumber16')
<     typehandlers.add_type_alias('ns3::SequenceNumber< unsigned short, short >*', 'ns3::SequenceNumber16*')
<     typehandlers.add_type_alias('ns3::SequenceNumber< unsigned short, short >&', 'ns3::SequenceNumber16&')
<     typehandlers.add_type_alias('ns3::SequenceNumber< unsigned char, signed char >', 'ns3::SequenceNumber8')
<     typehandlers.add_type_alias('ns3::SequenceNumber< unsigned char, signed char >*', 'ns3::SequenceNumber8*')
<     typehandlers.add_type_alias('ns3::SequenceNumber< unsigned char, signed char >&', 'ns3::SequenceNumber8&')
---
>     module.add_container('std::vector< unsigned int >', 'unsigned int', container_type=u'vector')
>     module.add_container('std::vector< bool >', 'bool', container_type=u'vector')
>     module.add_container('std::list< ns3::RipRte >', 'ns3::RipRte', container_type=u'list')
>     module.add_container('std::list< ns3::RipNgRte >', 'ns3::RipNgRte', container_type=u'list')
>     module.add_container('std::vector< ns3::Ipv6Address >', 'ns3::Ipv6Address', container_type=u'vector')
>     module.add_container('std::vector< ns3::Ptr< ns3::QueueDisc > >', 'ns3::Ptr< ns3::QueueDisc >', container_type=u'vector')
>     module.add_container('std::list< std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv4Header > >', 'std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv4Header >', container_type=u'list')
>     module.add_container('std::list< ns3::ArpCache::Entry * >', 'ns3::ArpCache::Entry *', container_type=u'list')
>     module.add_container('std::map< unsigned int, unsigned int >', ('unsigned int', 'unsigned int'), container_type=u'map')
>     module.add_container('std::list< std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv6Header > >', 'std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv6Header >', container_type=u'list')
>     module.add_container('std::list< ns3::NdiscCache::Entry * >', 'ns3::NdiscCache::Entry *', container_type=u'list')
>     module.add_container('std::set< unsigned int >', 'unsigned int', container_type=u'set')
>     typehandlers.add_type_alias(u'ns3::SequenceNumber< short unsigned int, short int >', u'ns3::SequenceNumber16')
>     typehandlers.add_type_alias(u'ns3::SequenceNumber< short unsigned int, short int >*', u'ns3::SequenceNumber16*')
>     typehandlers.add_type_alias(u'ns3::SequenceNumber< short unsigned int, short int >&', u'ns3::SequenceNumber16&')
>     typehandlers.add_type_alias(u'ns3::SequenceNumber< unsigned int, int >', u'ns3::SequenceNumber32')
>     typehandlers.add_type_alias(u'ns3::SequenceNumber< unsigned int, int >*', u'ns3::SequenceNumber32*')
>     typehandlers.add_type_alias(u'ns3::SequenceNumber< unsigned int, int >&', u'ns3::SequenceNumber32&')
>     typehandlers.add_type_alias(u'std::deque< ns3::RttHistory, std::allocator< ns3::RttHistory > >', u'ns3::RttHistory_t')
>     typehandlers.add_type_alias(u'std::deque< ns3::RttHistory, std::allocator< ns3::RttHistory > >*', u'ns3::RttHistory_t*')
>     typehandlers.add_type_alias(u'std::deque< ns3::RttHistory, std::allocator< ns3::RttHistory > >&', u'ns3::RttHistory_t&')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::TcpSocket::TcpStates_t, ns3::TcpSocket::TcpStates_t ) *', u'ns3::TcpStatesTracedValueCallback')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::TcpSocket::TcpStates_t, ns3::TcpSocket::TcpStates_t ) **', u'ns3::TcpStatesTracedValueCallback*')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::TcpSocket::TcpStates_t, ns3::TcpSocket::TcpStates_t ) *&', u'ns3::TcpStatesTracedValueCallback&')
>     typehandlers.add_type_alias(u'ns3::SequenceNumber< unsigned char, signed char >', u'ns3::SequenceNumber8')
>     typehandlers.add_type_alias(u'ns3::SequenceNumber< unsigned char, signed char >*', u'ns3::SequenceNumber8*')
>     typehandlers.add_type_alias(u'ns3::SequenceNumber< unsigned char, signed char >&', u'ns3::SequenceNumber8&')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::TcpSocketState::TcpCongState_t, ns3::TcpSocketState::TcpCongState_t ) *', u'ns3::TcpCongStatesTracedValueCallback')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::TcpSocketState::TcpCongState_t, ns3::TcpSocketState::TcpCongState_t ) **', u'ns3::TcpCongStatesTracedValueCallback*')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::TcpSocketState::TcpCongState_t, ns3::TcpSocketState::TcpCongState_t ) *&', u'ns3::TcpCongStatesTracedValueCallback&')
1204,1209c871,876
<     typehandlers.add_type_alias('uint32_t ( * ) ( char const *, std::size_t const )', 'ns3::Hash::Hash32Function_ptr')
<     typehandlers.add_type_alias('uint32_t ( * ) ( char const *, std::size_t const )*', 'ns3::Hash::Hash32Function_ptr*')
<     typehandlers.add_type_alias('uint32_t ( * ) ( char const *, std::size_t const )&', 'ns3::Hash::Hash32Function_ptr&')
<     typehandlers.add_type_alias('uint64_t ( * ) ( char const *, std::size_t const )', 'ns3::Hash::Hash64Function_ptr')
<     typehandlers.add_type_alias('uint64_t ( * ) ( char const *, std::size_t const )*', 'ns3::Hash::Hash64Function_ptr*')
<     typehandlers.add_type_alias('uint64_t ( * ) ( char const *, std::size_t const )&', 'ns3::Hash::Hash64Function_ptr&')
---
>     typehandlers.add_type_alias(u'uint64_t ( * ) ( char const *, size_t ) *', u'ns3::Hash::Hash64Function_ptr')
>     typehandlers.add_type_alias(u'uint64_t ( * ) ( char const *, size_t ) **', u'ns3::Hash::Hash64Function_ptr*')
>     typehandlers.add_type_alias(u'uint64_t ( * ) ( char const *, size_t ) *&', u'ns3::Hash::Hash64Function_ptr&')
>     typehandlers.add_type_alias(u'uint32_t ( * ) ( char const *, size_t ) *', u'ns3::Hash::Hash32Function_ptr')
>     typehandlers.add_type_alias(u'uint32_t ( * ) ( char const *, size_t ) **', u'ns3::Hash::Hash32Function_ptr*')
>     typehandlers.add_type_alias(u'uint32_t ( * ) ( char const *, size_t ) *&', u'ns3::Hash::Hash32Function_ptr&')
1232,1270c899,931
<     typehandlers.add_type_alias('void ( * ) ( ns3::Time, ns3::Time )', 'ns3::TracedValueCallback::Time')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Time, ns3::Time )*', 'ns3::TracedValueCallback::Time*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Time, ns3::Time )&', 'ns3::TracedValueCallback::Time&')
<     typehandlers.add_type_alias('void ( * ) ( ns3::TcpSocketState::TcpCongState_t const, ns3::TcpSocketState::TcpCongState_t const )', 'ns3::TracedValueCallback::TcpCongState')
<     typehandlers.add_type_alias('void ( * ) ( ns3::TcpSocketState::TcpCongState_t const, ns3::TcpSocketState::TcpCongState_t const )*', 'ns3::TracedValueCallback::TcpCongState*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::TcpSocketState::TcpCongState_t const, ns3::TcpSocketState::TcpCongState_t const )&', 'ns3::TracedValueCallback::TcpCongState&')
<     typehandlers.add_type_alias('void ( * ) ( ns3::TcpSocketState::EcnState_t const, ns3::TcpSocketState::EcnState_t const )', 'ns3::TracedValueCallback::EcnState')
<     typehandlers.add_type_alias('void ( * ) ( ns3::TcpSocketState::EcnState_t const, ns3::TcpSocketState::EcnState_t const )*', 'ns3::TracedValueCallback::EcnState*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::TcpSocketState::EcnState_t const, ns3::TcpSocketState::EcnState_t const )&', 'ns3::TracedValueCallback::EcnState&')
<     typehandlers.add_type_alias('void ( * ) ( ns3::SequenceNumber32, ns3::SequenceNumber32 )', 'ns3::TracedValueCallback::SequenceNumber32')
<     typehandlers.add_type_alias('void ( * ) ( ns3::SequenceNumber32, ns3::SequenceNumber32 )*', 'ns3::TracedValueCallback::SequenceNumber32*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::SequenceNumber32, ns3::SequenceNumber32 )&', 'ns3::TracedValueCallback::SequenceNumber32&')
<     typehandlers.add_type_alias('void ( * ) ( bool, bool )', 'ns3::TracedValueCallback::Bool')
<     typehandlers.add_type_alias('void ( * ) ( bool, bool )*', 'ns3::TracedValueCallback::Bool*')
<     typehandlers.add_type_alias('void ( * ) ( bool, bool )&', 'ns3::TracedValueCallback::Bool&')
<     typehandlers.add_type_alias('void ( * ) ( int8_t, int8_t )', 'ns3::TracedValueCallback::Int8')
<     typehandlers.add_type_alias('void ( * ) ( int8_t, int8_t )*', 'ns3::TracedValueCallback::Int8*')
<     typehandlers.add_type_alias('void ( * ) ( int8_t, int8_t )&', 'ns3::TracedValueCallback::Int8&')
<     typehandlers.add_type_alias('void ( * ) ( uint8_t, uint8_t )', 'ns3::TracedValueCallback::Uint8')
<     typehandlers.add_type_alias('void ( * ) ( uint8_t, uint8_t )*', 'ns3::TracedValueCallback::Uint8*')
<     typehandlers.add_type_alias('void ( * ) ( uint8_t, uint8_t )&', 'ns3::TracedValueCallback::Uint8&')
<     typehandlers.add_type_alias('void ( * ) ( int16_t, int16_t )', 'ns3::TracedValueCallback::Int16')
<     typehandlers.add_type_alias('void ( * ) ( int16_t, int16_t )*', 'ns3::TracedValueCallback::Int16*')
<     typehandlers.add_type_alias('void ( * ) ( int16_t, int16_t )&', 'ns3::TracedValueCallback::Int16&')
<     typehandlers.add_type_alias('void ( * ) ( uint16_t, uint16_t )', 'ns3::TracedValueCallback::Uint16')
<     typehandlers.add_type_alias('void ( * ) ( uint16_t, uint16_t )*', 'ns3::TracedValueCallback::Uint16*')
<     typehandlers.add_type_alias('void ( * ) ( uint16_t, uint16_t )&', 'ns3::TracedValueCallback::Uint16&')
<     typehandlers.add_type_alias('void ( * ) ( int32_t, int32_t )', 'ns3::TracedValueCallback::Int32')
<     typehandlers.add_type_alias('void ( * ) ( int32_t, int32_t )*', 'ns3::TracedValueCallback::Int32*')
<     typehandlers.add_type_alias('void ( * ) ( int32_t, int32_t )&', 'ns3::TracedValueCallback::Int32&')
<     typehandlers.add_type_alias('void ( * ) ( uint32_t, uint32_t )', 'ns3::TracedValueCallback::Uint32')
<     typehandlers.add_type_alias('void ( * ) ( uint32_t, uint32_t )*', 'ns3::TracedValueCallback::Uint32*')
<     typehandlers.add_type_alias('void ( * ) ( uint32_t, uint32_t )&', 'ns3::TracedValueCallback::Uint32&')
<     typehandlers.add_type_alias('void ( * ) ( double, double )', 'ns3::TracedValueCallback::Double')
<     typehandlers.add_type_alias('void ( * ) ( double, double )*', 'ns3::TracedValueCallback::Double*')
<     typehandlers.add_type_alias('void ( * ) ( double, double )&', 'ns3::TracedValueCallback::Double&')
<     typehandlers.add_type_alias('void ( * ) (  )', 'ns3::TracedValueCallback::Void')
<     typehandlers.add_type_alias('void ( * ) (  )*', 'ns3::TracedValueCallback::Void*')
<     typehandlers.add_type_alias('void ( * ) (  )&', 'ns3::TracedValueCallback::Void&')
---
>     typehandlers.add_type_alias(u'void ( * ) ( double, double ) *', u'ns3::TracedValueCallback::Double')
>     typehandlers.add_type_alias(u'void ( * ) ( double, double ) **', u'ns3::TracedValueCallback::Double*')
>     typehandlers.add_type_alias(u'void ( * ) ( double, double ) *&', u'ns3::TracedValueCallback::Double&')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::SequenceNumber32, ns3::SequenceNumber32 ) *', u'ns3::TracedValueCallback::SequenceNumber32')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::SequenceNumber32, ns3::SequenceNumber32 ) **', u'ns3::TracedValueCallback::SequenceNumber32*')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::SequenceNumber32, ns3::SequenceNumber32 ) *&', u'ns3::TracedValueCallback::SequenceNumber32&')
>     typehandlers.add_type_alias(u'void ( * ) ( int8_t, int8_t ) *', u'ns3::TracedValueCallback::Int8')
>     typehandlers.add_type_alias(u'void ( * ) ( int8_t, int8_t ) **', u'ns3::TracedValueCallback::Int8*')
>     typehandlers.add_type_alias(u'void ( * ) ( int8_t, int8_t ) *&', u'ns3::TracedValueCallback::Int8&')
>     typehandlers.add_type_alias(u'void ( * ) ( uint8_t, uint8_t ) *', u'ns3::TracedValueCallback::Uint8')
>     typehandlers.add_type_alias(u'void ( * ) ( uint8_t, uint8_t ) **', u'ns3::TracedValueCallback::Uint8*')
>     typehandlers.add_type_alias(u'void ( * ) ( uint8_t, uint8_t ) *&', u'ns3::TracedValueCallback::Uint8&')
>     typehandlers.add_type_alias(u'void ( * ) ( int32_t, int32_t ) *', u'ns3::TracedValueCallback::Int32')
>     typehandlers.add_type_alias(u'void ( * ) ( int32_t, int32_t ) **', u'ns3::TracedValueCallback::Int32*')
>     typehandlers.add_type_alias(u'void ( * ) ( int32_t, int32_t ) *&', u'ns3::TracedValueCallback::Int32&')
>     typehandlers.add_type_alias(u'void ( * ) ( bool, bool ) *', u'ns3::TracedValueCallback::Bool')
>     typehandlers.add_type_alias(u'void ( * ) ( bool, bool ) **', u'ns3::TracedValueCallback::Bool*')
>     typehandlers.add_type_alias(u'void ( * ) ( bool, bool ) *&', u'ns3::TracedValueCallback::Bool&')
>     typehandlers.add_type_alias(u'void ( * ) ( uint16_t, uint16_t ) *', u'ns3::TracedValueCallback::Uint16')
>     typehandlers.add_type_alias(u'void ( * ) ( uint16_t, uint16_t ) **', u'ns3::TracedValueCallback::Uint16*')
>     typehandlers.add_type_alias(u'void ( * ) ( uint16_t, uint16_t ) *&', u'ns3::TracedValueCallback::Uint16&')
>     typehandlers.add_type_alias(u'void ( * ) ( uint32_t, uint32_t ) *', u'ns3::TracedValueCallback::Uint32')
>     typehandlers.add_type_alias(u'void ( * ) ( uint32_t, uint32_t ) **', u'ns3::TracedValueCallback::Uint32*')
>     typehandlers.add_type_alias(u'void ( * ) ( uint32_t, uint32_t ) *&', u'ns3::TracedValueCallback::Uint32&')
>     typehandlers.add_type_alias(u'void ( * ) ( int16_t, int16_t ) *', u'ns3::TracedValueCallback::Int16')
>     typehandlers.add_type_alias(u'void ( * ) ( int16_t, int16_t ) **', u'ns3::TracedValueCallback::Int16*')
>     typehandlers.add_type_alias(u'void ( * ) ( int16_t, int16_t ) *&', u'ns3::TracedValueCallback::Int16&')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Time, ns3::Time ) *', u'ns3::TracedValueCallback::Time')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Time, ns3::Time ) **', u'ns3::TracedValueCallback::Time*')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Time, ns3::Time ) *&', u'ns3::TracedValueCallback::Time&')
>     typehandlers.add_type_alias(u'void ( * ) (  ) *', u'ns3::TracedValueCallback::Void')
>     typehandlers.add_type_alias(u'void ( * ) (  ) **', u'ns3::TracedValueCallback::Void*')
>     typehandlers.add_type_alias(u'void ( * ) (  ) *&', u'ns3::TracedValueCallback::Void&')
1293,1305d953
<     register_Ns3DataRate_methods(root_module, root_module['ns3::DataRate'])
<     register_Ns3DefaultDeleter__Ns3AttributeAccessor_methods(root_module, root_module['ns3::DefaultDeleter< ns3::AttributeAccessor >'])
<     register_Ns3DefaultDeleter__Ns3AttributeChecker_methods(root_module, root_module['ns3::DefaultDeleter< ns3::AttributeChecker >'])
<     register_Ns3DefaultDeleter__Ns3AttributeValue_methods(root_module, root_module['ns3::DefaultDeleter< ns3::AttributeValue >'])
<     register_Ns3DefaultDeleter__Ns3CallbackImplBase_methods(root_module, root_module['ns3::DefaultDeleter< ns3::CallbackImplBase >'])
<     register_Ns3DefaultDeleter__Ns3EventImpl_methods(root_module, root_module['ns3::DefaultDeleter< ns3::EventImpl >'])
<     register_Ns3DefaultDeleter__Ns3HashImplementation_methods(root_module, root_module['ns3::DefaultDeleter< ns3::Hash::Implementation >'])
<     register_Ns3DefaultDeleter__Ns3Ipv4Route_methods(root_module, root_module['ns3::DefaultDeleter< ns3::Ipv4Route >'])
<     register_Ns3DefaultDeleter__Ns3Ipv6Route_methods(root_module, root_module['ns3::DefaultDeleter< ns3::Ipv6Route >'])
<     register_Ns3DefaultDeleter__Ns3NixVector_methods(root_module, root_module['ns3::DefaultDeleter< ns3::NixVector >'])
<     register_Ns3DefaultDeleter__Ns3OutputStreamWrapper_methods(root_module, root_module['ns3::DefaultDeleter< ns3::OutputStreamWrapper >'])
<     register_Ns3DefaultDeleter__Ns3Packet_methods(root_module, root_module['ns3::DefaultDeleter< ns3::Packet >'])
<     register_Ns3DefaultDeleter__Ns3TraceSourceAccessor_methods(root_module, root_module['ns3::DefaultDeleter< ns3::TraceSourceAccessor >'])
1325,1326d972
<     register_Ns3Ipv4EndPoint_methods(root_module, root_module['ns3::Ipv4EndPoint'])
<     register_Ns3Ipv4EndPointDemux_methods(root_module, root_module['ns3::Ipv4EndPointDemux'])
1337,1338d982
<     register_Ns3Ipv6EndPoint_methods(root_module, root_module['ns3::Ipv6EndPoint'])
<     register_Ns3Ipv6EndPointDemux_methods(root_module, root_module['ns3::Ipv6EndPointDemux'])
1347d990
<     register_Ns3Mac8Address_methods(root_module, root_module['ns3::Mac8Address'])
1377,1378d1019
<     register_Ns3TcpTxItem_methods(root_module, root_module['ns3::TcpTxItem'])
<     register_Ns3TcpTxItemRateInformation_methods(root_module, root_module['ns3::TcpTxItem::RateInformation'])
1385d1025
<     register_Ns3TracedValue__Ns3TcpSocketStateEcnState_t_methods(root_module, root_module['ns3::TracedValue< ns3::TcpSocketState::EcnState_t >'])
1433a1074,1076
>     register_Ns3Queue_methods(root_module, root_module['ns3::Queue'])
>     register_Ns3QueueDisc_methods(root_module, root_module['ns3::QueueDisc'])
>     register_Ns3QueueDiscClass_methods(root_module, root_module['ns3::QueueDiscClass'])
1451a1095
>     register_Ns3SimpleRefCount__Ns3NetDeviceQueue_Ns3Empty_Ns3DefaultDeleter__lt__ns3NetDeviceQueue__gt___methods(root_module, root_module['ns3::SimpleRefCount< ns3::NetDeviceQueue, ns3::empty, ns3::DefaultDeleter<ns3::NetDeviceQueue> >'])
1469,1474d1112
<     register_Ns3TcpOptionEnd_methods(root_module, root_module['ns3::TcpOptionEnd'])
<     register_Ns3TcpOptionMSS_methods(root_module, root_module['ns3::TcpOptionMSS'])
<     register_Ns3TcpOptionNOP_methods(root_module, root_module['ns3::TcpOptionNOP'])
<     register_Ns3TcpOptionSack_methods(root_module, root_module['ns3::TcpOptionSack'])
<     register_Ns3TcpOptionSackPermitted_methods(root_module, root_module['ns3::TcpOptionSackPermitted'])
<     register_Ns3TcpOptionTS_methods(root_module, root_module['ns3::TcpOptionTS'])
1476,1480d1113
<     register_Ns3TcpOptionWinScale_methods(root_module, root_module['ns3::TcpOptionWinScale'])
<     register_Ns3TcpRateOps_methods(root_module, root_module['ns3::TcpRateOps'])
<     register_Ns3TcpRateOpsTcpRateConnection_methods(root_module, root_module['ns3::TcpRateOps::TcpRateConnection'])
<     register_Ns3TcpRateOpsTcpRateSample_methods(root_module, root_module['ns3::TcpRateOps::TcpRateSample'])
<     register_Ns3TcpRecoveryOps_methods(root_module, root_module['ns3::TcpRecoveryOps'])
1494a1128
>     register_Ns3TrafficControlLayer_methods(root_module, root_module['ns3::TrafficControlLayer'])
1519,1520d1152
<     register_Ns3DataRateChecker_methods(root_module, root_module['ns3::DataRateChecker'])
<     register_Ns3DataRateValue_methods(root_module, root_module['ns3::DataRateValue'])
1572,1576d1203
<     register_Ns3Ipv6Option_methods(root_module, root_module['ns3::Ipv6Option'])
<     register_Ns3Ipv6OptionJumbogram_methods(root_module, root_module['ns3::Ipv6OptionJumbogram'])
<     register_Ns3Ipv6OptionPad1_methods(root_module, root_module['ns3::Ipv6OptionPad1'])
<     register_Ns3Ipv6OptionPadn_methods(root_module, root_module['ns3::Ipv6OptionPadn'])
<     register_Ns3Ipv6OptionRouterAlert_methods(root_module, root_module['ns3::Ipv6OptionRouterAlert'])
1590a1218,1219
>     register_Ns3NetDeviceQueue_methods(root_module, root_module['ns3::NetDeviceQueue'])
>     register_Ns3NetDeviceQueueInterface_methods(root_module, root_module['ns3::NetDeviceQueueInterface'])
1604,1605d1232
<     register_Ns3TcpClassicRecovery_methods(root_module, root_module['ns3::TcpClassicRecovery'])
<     register_Ns3TcpDctcp_methods(root_module, root_module['ns3::TcpDctcp'])
1611,1614d1237
<     register_Ns3TcpLedbat_methods(root_module, root_module['ns3::TcpLedbat'])
<     register_Ns3TcpLp_methods(root_module, root_module['ns3::TcpLp'])
<     register_Ns3TcpPrrRecovery_methods(root_module, root_module['ns3::TcpPrrRecovery'])
<     register_Ns3TcpRateLinux_methods(root_module, root_module['ns3::TcpRateLinux'])
1624,1656c1247,1248
<     register_Ns3CallbackImpl__Bool_Ns3Ptr__lt__ns3NetDevice__gt___Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Const_ns3Address___amp___Const_ns3Address___amp___Ns3NetDevicePacketType_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >'])
<     register_Ns3CallbackImpl__Bool_Ns3Ptr__lt__ns3NetDevice__gt___Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Const_ns3Address___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
<     register_Ns3CallbackImpl__Bool_Ns3Ptr__lt__ns3Socket__gt___Const_ns3Address___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< bool, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
<     register_Ns3CallbackImpl__Ns3ObjectBase___star___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
<     register_Ns3CallbackImpl__Void_Const_ns3Ipv4Header___amp___Ns3Ptr__lt__const_ns3Packet__gt___Ns3Ipv4L3ProtocolDropReason_Ns3Ptr__lt__ns3Ipv4__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, const ns3::Ipv4Header &, ns3::Ptr<const ns3::Packet>, ns3::Ipv4L3Protocol::DropReason, ns3::Ptr<ns3::Ipv4>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
<     register_Ns3CallbackImpl__Void_Const_ns3Ipv4Header___amp___Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, const ns3::Ipv4Header &, ns3::Ptr<const ns3::Packet>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
<     register_Ns3CallbackImpl__Void_Const_ns3Ipv6Header___amp___Ns3Ptr__lt__const_ns3Packet__gt___Ns3Ipv6L3ProtocolDropReason_Ns3Ptr__lt__ns3Ipv6__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, const ns3::Ipv6Header &, ns3::Ptr<const ns3::Packet>, ns3::Ipv6L3Protocol::DropReason, ns3::Ptr<ns3::Ipv6>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
<     register_Ns3CallbackImpl__Void_Const_ns3Ipv6Header___amp___Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, const ns3::Ipv6Header &, ns3::Ptr<const ns3::Packet>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
<     register_Ns3CallbackImpl__Void_Const_ns3TcpRateOpsTcpRateConnection___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, const ns3::TcpRateOps::TcpRateConnection &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
<     register_Ns3CallbackImpl__Void_Const_ns3TcpRateOpsTcpRateSample___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, const ns3::TcpRateOps::TcpRateSample &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
<     register_Ns3CallbackImpl__Void_Double_Double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, double, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
<     register_Ns3CallbackImpl__Void_Ns3Ipv4Address_Unsigned_char_Unsigned_char_Unsigned_char_Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ipv4Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
<     register_Ns3CallbackImpl__Void_Ns3Ipv6Address_Unsigned_char_Unsigned_char_Unsigned_char_Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ipv6Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
<     register_Ns3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Const_ns3TcpHeader___amp___Ns3Ptr__lt__const_ns3TcpSocketBase__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<const ns3::Packet>, const ns3::TcpHeader &, ns3::Ptr<const ns3::TcpSocketBase>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
<     register_Ns3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3Ptr__lt__ns3Ipv4__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<const ns3::Packet>, ns3::Ptr<ns3::Ipv4>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
<     register_Ns3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3Ptr__lt__ns3Ipv6__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<const ns3::Packet>, ns3::Ptr<ns3::Ipv6>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
<     register_Ns3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<const ns3::Packet>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
<     register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3NetDevice__gt___Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Const_ns3Address___amp___Const_ns3Address___amp___Ns3NetDevicePacketType_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >'])
<     register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3NetDevice__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<ns3::NetDevice>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
<     register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Ns3Ipv4Address_Ns3Ipv4Address_Unsigned_char_Ns3Ptr__lt__ns3Ipv4Route__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<ns3::Packet>, ns3::Ipv4Address, ns3::Ipv4Address, unsigned char, ns3::Ptr<ns3::Ipv4Route>, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
<     register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Ns3Ipv4Header_Unsigned_short_Ns3Ptr__lt__ns3Ipv4Interface__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<ns3::Packet>, ns3::Ipv4Header, unsigned short, ns3::Ptr<ns3::Ipv4Interface>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
<     register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Ns3Ipv6Address_Ns3Ipv6Address_Unsigned_char_Ns3Ptr__lt__ns3Ipv6Route__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<ns3::Packet>, ns3::Ipv6Address, ns3::Ipv6Address, unsigned char, ns3::Ptr<ns3::Ipv6Route>, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
<     register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Ns3Ipv6Header_Unsigned_short_Ns3Ptr__lt__ns3Ipv6Interface__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<ns3::Packet>, ns3::Ipv6Header, unsigned short, ns3::Ptr<ns3::Ipv6Interface>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
<     register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3Socket__gt___Const_ns3Address___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
<     register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3Socket__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<ns3::Socket>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
<     register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3Socket__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<ns3::Socket>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
<     register_Ns3CallbackImpl__Void_Ns3SequenceNumber__lt__unsigned_int__int__gt___Ns3SequenceNumber__lt__unsigned_int__int__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::SequenceNumber<unsigned int, int>, ns3::SequenceNumber<unsigned int, int>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
<     register_Ns3CallbackImpl__Void_Ns3TcpSocketTcpStates_t_Ns3TcpSocketTcpStates_t_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::TcpSocket::TcpStates_t, ns3::TcpSocket::TcpStates_t, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
<     register_Ns3CallbackImpl__Void_Ns3TcpSocketStateEcnState_t_Ns3TcpSocketStateEcnState_t_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::TcpSocketState::EcnState_t, ns3::TcpSocketState::EcnState_t, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
<     register_Ns3CallbackImpl__Void_Ns3TcpSocketStateTcpCongState_t_Ns3TcpSocketStateTcpCongState_t_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::TcpSocketState::TcpCongState_t, ns3::TcpSocketState::TcpCongState_t, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
<     register_Ns3CallbackImpl__Void_Ns3Time_Ns3Time_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Time, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
<     register_Ns3CallbackImpl__Void_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
<     register_Ns3CallbackImpl__Void_Unsigned_int_Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, unsigned int, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
---
>     register_Ns3FqCoDelIpv4PacketFilter_methods(root_module, root_module['ns3::FqCoDelIpv4PacketFilter'])
>     register_Ns3FqCoDelIpv6PacketFilter_methods(root_module, root_module['ns3::FqCoDelIpv6PacketFilter'])
1667d1258
<     register_Ns3ArpQueueDiscItem_methods(root_module, root_module['ns3::ArpQueueDiscItem'])
1678d1268
<     cls.add_binary_comparison_operator('==')
1681a1272
>     cls.add_binary_comparison_operator('==')
1686c1277
<     ## address.h (module 'network'): ns3::Address::Address(ns3::Address const & address) [constructor]
---
>     ## address.h (module 'network'): ns3::Address::Address(ns3::Address const & address) [copy constructor]
1748c1339
<     ## trace-helper.h (module 'network'): ns3::AsciiTraceHelper::AsciiTraceHelper(ns3::AsciiTraceHelper const & arg0) [constructor]
---
>     ## trace-helper.h (module 'network'): ns3::AsciiTraceHelper::AsciiTraceHelper(ns3::AsciiTraceHelper const & arg0) [copy constructor]
1752c1343
<     ## trace-helper.h (module 'network'): ns3::Ptr<ns3::OutputStreamWrapper> ns3::AsciiTraceHelper::CreateFileStream(std::string filename, std::ios_base::openmode filemode=std::ios_base::out) [member function]
---
>     ## trace-helper.h (module 'network'): ns3::Ptr<ns3::OutputStreamWrapper> ns3::AsciiTraceHelper::CreateFileStream(std::string filename, std::_Ios_Openmode filemode=std::ios_base::out) [member function]
1755,1756c1346,1347
<                    [param('std::string', 'filename'), param('std::ios_base::openmode', 'filemode', default_value='std::ios_base::out')])
<     ## trace-helper.h (module 'network'): static void ns3::AsciiTraceHelper::DefaultDequeueSinkWithContext(ns3::Ptr<ns3::OutputStreamWrapper> file, std::string context, ns3::Ptr<const ns3::Packet> p) [member function]
---
>                    [param('std::string', 'filename'), param('std::_Ios_Openmode', 'filemode', default_value='std::ios_base::out')])
>     ## trace-helper.h (module 'network'): static void ns3::AsciiTraceHelper::DefaultDequeueSinkWithContext(ns3::Ptr<ns3::OutputStreamWrapper> file, std::string context, ns3::Ptr<ns3::Packet const> p) [member function]
1761c1352
<     ## trace-helper.h (module 'network'): static void ns3::AsciiTraceHelper::DefaultDequeueSinkWithoutContext(ns3::Ptr<ns3::OutputStreamWrapper> file, ns3::Ptr<const ns3::Packet> p) [member function]
---
>     ## trace-helper.h (module 'network'): static void ns3::AsciiTraceHelper::DefaultDequeueSinkWithoutContext(ns3::Ptr<ns3::OutputStreamWrapper> file, ns3::Ptr<ns3::Packet const> p) [member function]
1766c1357
<     ## trace-helper.h (module 'network'): static void ns3::AsciiTraceHelper::DefaultDropSinkWithContext(ns3::Ptr<ns3::OutputStreamWrapper> file, std::string context, ns3::Ptr<const ns3::Packet> p) [member function]
---
>     ## trace-helper.h (module 'network'): static void ns3::AsciiTraceHelper::DefaultDropSinkWithContext(ns3::Ptr<ns3::OutputStreamWrapper> file, std::string context, ns3::Ptr<ns3::Packet const> p) [member function]
1771c1362
<     ## trace-helper.h (module 'network'): static void ns3::AsciiTraceHelper::DefaultDropSinkWithoutContext(ns3::Ptr<ns3::OutputStreamWrapper> file, ns3::Ptr<const ns3::Packet> p) [member function]
---
>     ## trace-helper.h (module 'network'): static void ns3::AsciiTraceHelper::DefaultDropSinkWithoutContext(ns3::Ptr<ns3::OutputStreamWrapper> file, ns3::Ptr<ns3::Packet const> p) [member function]
1776c1367
<     ## trace-helper.h (module 'network'): static void ns3::AsciiTraceHelper::DefaultEnqueueSinkWithContext(ns3::Ptr<ns3::OutputStreamWrapper> file, std::string context, ns3::Ptr<const ns3::Packet> p) [member function]
---
>     ## trace-helper.h (module 'network'): static void ns3::AsciiTraceHelper::DefaultEnqueueSinkWithContext(ns3::Ptr<ns3::OutputStreamWrapper> file, std::string context, ns3::Ptr<ns3::Packet const> p) [member function]
1781c1372
<     ## trace-helper.h (module 'network'): static void ns3::AsciiTraceHelper::DefaultEnqueueSinkWithoutContext(ns3::Ptr<ns3::OutputStreamWrapper> file, ns3::Ptr<const ns3::Packet> p) [member function]
---
>     ## trace-helper.h (module 'network'): static void ns3::AsciiTraceHelper::DefaultEnqueueSinkWithoutContext(ns3::Ptr<ns3::OutputStreamWrapper> file, ns3::Ptr<ns3::Packet const> p) [member function]
1786c1377
<     ## trace-helper.h (module 'network'): static void ns3::AsciiTraceHelper::DefaultReceiveSinkWithContext(ns3::Ptr<ns3::OutputStreamWrapper> file, std::string context, ns3::Ptr<const ns3::Packet> p) [member function]
---
>     ## trace-helper.h (module 'network'): static void ns3::AsciiTraceHelper::DefaultReceiveSinkWithContext(ns3::Ptr<ns3::OutputStreamWrapper> file, std::string context, ns3::Ptr<ns3::Packet const> p) [member function]
1791c1382
<     ## trace-helper.h (module 'network'): static void ns3::AsciiTraceHelper::DefaultReceiveSinkWithoutContext(ns3::Ptr<ns3::OutputStreamWrapper> file, ns3::Ptr<const ns3::Packet> p) [member function]
---
>     ## trace-helper.h (module 'network'): static void ns3::AsciiTraceHelper::DefaultReceiveSinkWithoutContext(ns3::Ptr<ns3::OutputStreamWrapper> file, ns3::Ptr<ns3::Packet const> p) [member function]
1807c1398
<     ## trace-helper.h (module 'network'): ns3::AsciiTraceHelperForDevice::AsciiTraceHelperForDevice(ns3::AsciiTraceHelperForDevice const & arg0) [constructor]
---
>     ## trace-helper.h (module 'network'): ns3::AsciiTraceHelperForDevice::AsciiTraceHelperForDevice(ns3::AsciiTraceHelperForDevice const & arg0) [copy constructor]
1863c1454
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
1867c1458
<     ## internet-trace-helper.h (module 'internet'): ns3::AsciiTraceHelperForIpv4::AsciiTraceHelperForIpv4(ns3::AsciiTraceHelperForIpv4 const & arg0) [constructor]
---
>     ## internet-trace-helper.h (module 'internet'): ns3::AsciiTraceHelperForIpv4::AsciiTraceHelperForIpv4(ns3::AsciiTraceHelperForIpv4 const & arg0) [copy constructor]
1923c1514
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
1927c1518
<     ## internet-trace-helper.h (module 'internet'): ns3::AsciiTraceHelperForIpv6::AsciiTraceHelperForIpv6(ns3::AsciiTraceHelperForIpv6 const & arg0) [constructor]
---
>     ## internet-trace-helper.h (module 'internet'): ns3::AsciiTraceHelperForIpv6::AsciiTraceHelperForIpv6(ns3::AsciiTraceHelperForIpv6 const & arg0) [copy constructor]
1983c1574
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
1987c1578
<     ## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList::AttributeConstructionList(ns3::AttributeConstructionList const & arg0) [constructor]
---
>     ## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList::AttributeConstructionList(ns3::AttributeConstructionList const & arg0) [copy constructor]
1991c1582
<     ## attribute-construction-list.h (module 'core'): void ns3::AttributeConstructionList::Add(std::string name, ns3::Ptr<const ns3::AttributeChecker> checker, ns3::Ptr<ns3::AttributeValue> value) [member function]
---
>     ## attribute-construction-list.h (module 'core'): void ns3::AttributeConstructionList::Add(std::string name, ns3::Ptr<ns3::AttributeChecker const> checker, ns3::Ptr<ns3::AttributeValue> value) [member function]
1995c1586
<     ## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList::CIterator ns3::AttributeConstructionList::Begin() const [member function]
---
>     ## attribute-construction-list.h (module 'core'): std::_List_const_iterator<ns3::AttributeConstructionList::Item> ns3::AttributeConstructionList::Begin() const [member function]
1997c1588
<                    'ns3::AttributeConstructionList::CIterator', 
---
>                    'std::_List_const_iterator< ns3::AttributeConstructionList::Item >', 
2000c1591
<     ## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList::CIterator ns3::AttributeConstructionList::End() const [member function]
---
>     ## attribute-construction-list.h (module 'core'): std::_List_const_iterator<ns3::AttributeConstructionList::Item> ns3::AttributeConstructionList::End() const [member function]
2002c1593
<                    'ns3::AttributeConstructionList::CIterator', 
---
>                    'std::_List_const_iterator< ns3::AttributeConstructionList::Item >', 
2005c1596
<     ## attribute-construction-list.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::AttributeConstructionList::Find(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
---
>     ## attribute-construction-list.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::AttributeConstructionList::Find(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
2015c1606
<     ## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList::Item::Item(ns3::AttributeConstructionList::Item const & arg0) [constructor]
---
>     ## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList::Item::Item(ns3::AttributeConstructionList::Item const & arg0) [copy constructor]
2026,2027d1616
<     ## buffer.h (module 'network'): ns3::Buffer::Buffer(ns3::Buffer const & o) [constructor]
<     cls.add_constructor([param('ns3::Buffer const &', 'o')])
2033a1623,1624
>     ## buffer.h (module 'network'): ns3::Buffer::Buffer(ns3::Buffer const & o) [copy constructor]
>     cls.add_constructor([param('ns3::Buffer const &', 'o')])
2106c1697
<     ## buffer.h (module 'network'): ns3::Buffer::Iterator::Iterator(ns3::Buffer::Iterator const & arg0) [constructor]
---
>     ## buffer.h (module 'network'): ns3::Buffer::Iterator::Iterator(ns3::Buffer::Iterator const & arg0) [copy constructor]
2266c1857
<     ## packet.h (module 'network'): ns3::ByteTagIterator::ByteTagIterator(ns3::ByteTagIterator const & arg0) [constructor]
---
>     ## packet.h (module 'network'): ns3::ByteTagIterator::ByteTagIterator(ns3::ByteTagIterator const & arg0) [copy constructor]
2280c1871
<     ## packet.h (module 'network'): ns3::ByteTagIterator::Item::Item(ns3::ByteTagIterator::Item const & arg0) [constructor]
---
>     ## packet.h (module 'network'): ns3::ByteTagIterator::Item::Item(ns3::ByteTagIterator::Item const & arg0) [copy constructor]
2307c1898
<     ## byte-tag-list.h (module 'network'): ns3::ByteTagList::ByteTagList(ns3::ByteTagList const & o) [constructor]
---
>     ## byte-tag-list.h (module 'network'): ns3::ByteTagList::ByteTagList(ns3::ByteTagList const & o) [copy constructor]
2341c1932
<     ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator::Iterator(ns3::ByteTagList::Iterator const & arg0) [constructor]
---
>     ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator::Iterator(ns3::ByteTagList::Iterator const & arg0) [copy constructor]
2360c1951
<     ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator::Item::Item(ns3::ByteTagList::Iterator::Item const & arg0) [constructor]
---
>     ## byte-tag-list.h (module 'network'): ns3::ByteTagList::Iterator::Item::Item(ns3::ByteTagList::Iterator::Item const & arg0) [copy constructor]
2377c1968
<     ## callback.h (module 'core'): ns3::CallbackBase::CallbackBase(ns3::CallbackBase const & arg0) [constructor]
---
>     ## callback.h (module 'core'): ns3::CallbackBase::CallbackBase(ns3::CallbackBase const & arg0) [copy constructor]
2433,2614d2023
< def register_Ns3DataRate_methods(root_module, cls):
<     cls.add_output_stream_operator()
<     cls.add_binary_comparison_operator('!=')
<     cls.add_binary_comparison_operator('<')
<     cls.add_binary_comparison_operator('<=')
<     cls.add_binary_comparison_operator('==')
<     cls.add_binary_comparison_operator('>')
<     cls.add_binary_comparison_operator('>=')
<     ## data-rate.h (module 'network'): ns3::DataRate::DataRate(ns3::DataRate const & arg0) [constructor]
<     cls.add_constructor([param('ns3::DataRate const &', 'arg0')])
<     ## data-rate.h (module 'network'): ns3::DataRate::DataRate() [constructor]
<     cls.add_constructor([])
<     ## data-rate.h (module 'network'): ns3::DataRate::DataRate(uint64_t bps) [constructor]
<     cls.add_constructor([param('uint64_t', 'bps')])
<     ## data-rate.h (module 'network'): ns3::DataRate::DataRate(std::string rate) [constructor]
<     cls.add_constructor([param('std::string', 'rate')])
<     ## data-rate.h (module 'network'): ns3::Time ns3::DataRate::CalculateBitsTxTime(uint32_t bits) const [member function]
<     cls.add_method('CalculateBitsTxTime', 
<                    'ns3::Time', 
<                    [param('uint32_t', 'bits')], 
<                    is_const=True)
<     ## data-rate.h (module 'network'): ns3::Time ns3::DataRate::CalculateBytesTxTime(uint32_t bytes) const [member function]
<     cls.add_method('CalculateBytesTxTime', 
<                    'ns3::Time', 
<                    [param('uint32_t', 'bytes')], 
<                    is_const=True)
<     ## data-rate.h (module 'network'): double ns3::DataRate::CalculateTxTime(uint32_t bytes) const [member function]
<     cls.add_method('CalculateTxTime', 
<                    'double', 
<                    [param('uint32_t', 'bytes')], 
<                    is_const=True, deprecated=True)
<     ## data-rate.h (module 'network'): uint64_t ns3::DataRate::GetBitRate() const [member function]
<     cls.add_method('GetBitRate', 
<                    'uint64_t', 
<                    [], 
<                    is_const=True)
<     return
< 
< def register_Ns3DefaultDeleter__Ns3AttributeAccessor_methods(root_module, cls):
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::AttributeAccessor>::DefaultDeleter() [constructor]
<     cls.add_constructor([])
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::AttributeAccessor>::DefaultDeleter(ns3::DefaultDeleter<ns3::AttributeAccessor> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::DefaultDeleter< ns3::AttributeAccessor > const &', 'arg0')])
<     ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::AttributeAccessor>::Delete(ns3::AttributeAccessor * object) [member function]
<     cls.add_method('Delete', 
<                    'void', 
<                    [param('ns3::AttributeAccessor *', 'object')], 
<                    is_static=True)
<     return
< 
< def register_Ns3DefaultDeleter__Ns3AttributeChecker_methods(root_module, cls):
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::AttributeChecker>::DefaultDeleter() [constructor]
<     cls.add_constructor([])
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::AttributeChecker>::DefaultDeleter(ns3::DefaultDeleter<ns3::AttributeChecker> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::DefaultDeleter< ns3::AttributeChecker > const &', 'arg0')])
<     ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::AttributeChecker>::Delete(ns3::AttributeChecker * object) [member function]
<     cls.add_method('Delete', 
<                    'void', 
<                    [param('ns3::AttributeChecker *', 'object')], 
<                    is_static=True)
<     return
< 
< def register_Ns3DefaultDeleter__Ns3AttributeValue_methods(root_module, cls):
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::AttributeValue>::DefaultDeleter() [constructor]
<     cls.add_constructor([])
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::AttributeValue>::DefaultDeleter(ns3::DefaultDeleter<ns3::AttributeValue> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::DefaultDeleter< ns3::AttributeValue > const &', 'arg0')])
<     ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::AttributeValue>::Delete(ns3::AttributeValue * object) [member function]
<     cls.add_method('Delete', 
<                    'void', 
<                    [param('ns3::AttributeValue *', 'object')], 
<                    is_static=True)
<     return
< 
< def register_Ns3DefaultDeleter__Ns3CallbackImplBase_methods(root_module, cls):
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::CallbackImplBase>::DefaultDeleter() [constructor]
<     cls.add_constructor([])
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::CallbackImplBase>::DefaultDeleter(ns3::DefaultDeleter<ns3::CallbackImplBase> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::DefaultDeleter< ns3::CallbackImplBase > const &', 'arg0')])
<     ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::CallbackImplBase>::Delete(ns3::CallbackImplBase * object) [member function]
<     cls.add_method('Delete', 
<                    'void', 
<                    [param('ns3::CallbackImplBase *', 'object')], 
<                    is_static=True)
<     return
< 
< def register_Ns3DefaultDeleter__Ns3EventImpl_methods(root_module, cls):
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::EventImpl>::DefaultDeleter() [constructor]
<     cls.add_constructor([])
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::EventImpl>::DefaultDeleter(ns3::DefaultDeleter<ns3::EventImpl> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::DefaultDeleter< ns3::EventImpl > const &', 'arg0')])
<     ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::EventImpl>::Delete(ns3::EventImpl * object) [member function]
<     cls.add_method('Delete', 
<                    'void', 
<                    [param('ns3::EventImpl *', 'object')], 
<                    is_static=True)
<     return
< 
< def register_Ns3DefaultDeleter__Ns3HashImplementation_methods(root_module, cls):
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::Hash::Implementation>::DefaultDeleter() [constructor]
<     cls.add_constructor([])
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::Hash::Implementation>::DefaultDeleter(ns3::DefaultDeleter<ns3::Hash::Implementation> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::DefaultDeleter< ns3::Hash::Implementation > const &', 'arg0')])
<     ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::Hash::Implementation>::Delete(ns3::Hash::Implementation * object) [member function]
<     cls.add_method('Delete', 
<                    'void', 
<                    [param('ns3::Hash::Implementation *', 'object')], 
<                    is_static=True)
<     return
< 
< def register_Ns3DefaultDeleter__Ns3Ipv4Route_methods(root_module, cls):
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::Ipv4Route>::DefaultDeleter() [constructor]
<     cls.add_constructor([])
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::Ipv4Route>::DefaultDeleter(ns3::DefaultDeleter<ns3::Ipv4Route> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::DefaultDeleter< ns3::Ipv4Route > const &', 'arg0')])
<     ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::Ipv4Route>::Delete(ns3::Ipv4Route * object) [member function]
<     cls.add_method('Delete', 
<                    'void', 
<                    [param('ns3::Ipv4Route *', 'object')], 
<                    is_static=True)
<     return
< 
< def register_Ns3DefaultDeleter__Ns3Ipv6Route_methods(root_module, cls):
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::Ipv6Route>::DefaultDeleter() [constructor]
<     cls.add_constructor([])
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::Ipv6Route>::DefaultDeleter(ns3::DefaultDeleter<ns3::Ipv6Route> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::DefaultDeleter< ns3::Ipv6Route > const &', 'arg0')])
<     ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::Ipv6Route>::Delete(ns3::Ipv6Route * object) [member function]
<     cls.add_method('Delete', 
<                    'void', 
<                    [param('ns3::Ipv6Route *', 'object')], 
<                    is_static=True)
<     return
< 
< def register_Ns3DefaultDeleter__Ns3NixVector_methods(root_module, cls):
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::NixVector>::DefaultDeleter() [constructor]
<     cls.add_constructor([])
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::NixVector>::DefaultDeleter(ns3::DefaultDeleter<ns3::NixVector> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::DefaultDeleter< ns3::NixVector > const &', 'arg0')])
<     ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::NixVector>::Delete(ns3::NixVector * object) [member function]
<     cls.add_method('Delete', 
<                    'void', 
<                    [param('ns3::NixVector *', 'object')], 
<                    is_static=True)
<     return
< 
< def register_Ns3DefaultDeleter__Ns3OutputStreamWrapper_methods(root_module, cls):
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::OutputStreamWrapper>::DefaultDeleter() [constructor]
<     cls.add_constructor([])
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::OutputStreamWrapper>::DefaultDeleter(ns3::DefaultDeleter<ns3::OutputStreamWrapper> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::DefaultDeleter< ns3::OutputStreamWrapper > const &', 'arg0')])
<     ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::OutputStreamWrapper>::Delete(ns3::OutputStreamWrapper * object) [member function]
<     cls.add_method('Delete', 
<                    'void', 
<                    [param('ns3::OutputStreamWrapper *', 'object')], 
<                    is_static=True)
<     return
< 
< def register_Ns3DefaultDeleter__Ns3Packet_methods(root_module, cls):
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::Packet>::DefaultDeleter() [constructor]
<     cls.add_constructor([])
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::Packet>::DefaultDeleter(ns3::DefaultDeleter<ns3::Packet> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::DefaultDeleter< ns3::Packet > const &', 'arg0')])
<     ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::Packet>::Delete(ns3::Packet * object) [member function]
<     cls.add_method('Delete', 
<                    'void', 
<                    [param('ns3::Packet *', 'object')], 
<                    is_static=True)
<     return
< 
< def register_Ns3DefaultDeleter__Ns3TraceSourceAccessor_methods(root_module, cls):
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::TraceSourceAccessor>::DefaultDeleter() [constructor]
<     cls.add_constructor([])
<     ## default-deleter.h (module 'core'): ns3::DefaultDeleter<ns3::TraceSourceAccessor>::DefaultDeleter(ns3::DefaultDeleter<ns3::TraceSourceAccessor> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::DefaultDeleter< ns3::TraceSourceAccessor > const &', 'arg0')])
<     ## default-deleter.h (module 'core'): static void ns3::DefaultDeleter<ns3::TraceSourceAccessor>::Delete(ns3::TraceSourceAccessor * object) [member function]
<     cls.add_method('Delete', 
<                    'void', 
<                    [param('ns3::TraceSourceAccessor *', 'object')], 
<                    is_static=True)
<     return
< 
2616d2024
<     cls.add_binary_comparison_operator('==')
2618,2619c2026,2027
<     cls.add_binary_comparison_operator('<')
<     ## event-id.h (module 'core'): ns3::EventId::EventId(ns3::EventId const & arg0) [constructor]
---
>     cls.add_binary_comparison_operator('==')
>     ## event-id.h (module 'core'): ns3::EventId::EventId(ns3::EventId const & arg0) [copy constructor]
2856c2264
<     ## global-router-interface.h (module 'internet'): ns3::GlobalRoutingLinkRecord::GlobalRoutingLinkRecord(ns3::GlobalRoutingLinkRecord const & arg0) [constructor]
---
>     ## global-router-interface.h (module 'internet'): ns3::GlobalRoutingLinkRecord::GlobalRoutingLinkRecord(ns3::GlobalRoutingLinkRecord const & arg0) [copy constructor]
2901c2309
<     ## hash.h (module 'core'): ns3::Hasher::Hasher(ns3::Hasher const & arg0) [constructor]
---
>     ## hash.h (module 'core'): ns3::Hasher::Hasher(ns3::Hasher const & arg0) [copy constructor]
2907c2315
<     ## hash.h (module 'core'): uint32_t ns3::Hasher::GetHash32(char const * buffer, std::size_t const size) [member function]
---
>     ## hash.h (module 'core'): uint32_t ns3::Hasher::GetHash32(char const * buffer, size_t const size) [member function]
2910c2318
<                    [param('char const *', 'buffer'), param('std::size_t const', 'size')])
---
>                    [param('char const *', 'buffer'), param('size_t const', 'size')])
2915c2323
<     ## hash.h (module 'core'): uint64_t ns3::Hasher::GetHash64(char const * buffer, std::size_t const size) [member function]
---
>     ## hash.h (module 'core'): uint64_t ns3::Hasher::GetHash64(char const * buffer, size_t const size) [member function]
2918c2326
<                    [param('char const *', 'buffer'), param('std::size_t const', 'size')])
---
>                    [param('char const *', 'buffer'), param('size_t const', 'size')])
2930c2338
<     ## inet6-socket-address.h (module 'network'): ns3::Inet6SocketAddress::Inet6SocketAddress(ns3::Inet6SocketAddress const & arg0) [constructor]
---
>     ## inet6-socket-address.h (module 'network'): ns3::Inet6SocketAddress::Inet6SocketAddress(ns3::Inet6SocketAddress const & arg0) [copy constructor]
2973c2381
<     ## inet-socket-address.h (module 'network'): ns3::InetSocketAddress::InetSocketAddress(ns3::InetSocketAddress const & arg0) [constructor]
---
>     ## inet-socket-address.h (module 'network'): ns3::InetSocketAddress::InetSocketAddress(ns3::InetSocketAddress const & arg0) [copy constructor]
3027c2435
<     ## int-to-type.h (module 'core'): ns3::IntToType<0>::IntToType(ns3::IntToType<0> const & arg0) [constructor]
---
>     ## int-to-type.h (module 'core'): ns3::IntToType<0>::IntToType(ns3::IntToType<0> const & arg0) [copy constructor]
3034c2442
<     ## int-to-type.h (module 'core'): ns3::IntToType<1>::IntToType(ns3::IntToType<1> const & arg0) [constructor]
---
>     ## int-to-type.h (module 'core'): ns3::IntToType<1>::IntToType(ns3::IntToType<1> const & arg0) [copy constructor]
3041c2449
<     ## int-to-type.h (module 'core'): ns3::IntToType<2>::IntToType(ns3::IntToType<2> const & arg0) [constructor]
---
>     ## int-to-type.h (module 'core'): ns3::IntToType<2>::IntToType(ns3::IntToType<2> const & arg0) [copy constructor]
3048c2456
<     ## int-to-type.h (module 'core'): ns3::IntToType<3>::IntToType(ns3::IntToType<3> const & arg0) [constructor]
---
>     ## int-to-type.h (module 'core'): ns3::IntToType<3>::IntToType(ns3::IntToType<3> const & arg0) [copy constructor]
3055c2463
<     ## int-to-type.h (module 'core'): ns3::IntToType<4>::IntToType(ns3::IntToType<4> const & arg0) [constructor]
---
>     ## int-to-type.h (module 'core'): ns3::IntToType<4>::IntToType(ns3::IntToType<4> const & arg0) [copy constructor]
3062c2470
<     ## int-to-type.h (module 'core'): ns3::IntToType<5>::IntToType(ns3::IntToType<5> const & arg0) [constructor]
---
>     ## int-to-type.h (module 'core'): ns3::IntToType<5>::IntToType(ns3::IntToType<5> const & arg0) [copy constructor]
3069c2477
<     ## int-to-type.h (module 'core'): ns3::IntToType<6>::IntToType(ns3::IntToType<6> const & arg0) [constructor]
---
>     ## int-to-type.h (module 'core'): ns3::IntToType<6>::IntToType(ns3::IntToType<6> const & arg0) [copy constructor]
3074,3075d2481
<     cls.add_output_stream_operator()
<     cls.add_binary_comparison_operator('==')
3078c2484,2486
<     ## ipv4-address.h (module 'network'): ns3::Ipv4Address::Ipv4Address(ns3::Ipv4Address const & arg0) [constructor]
---
>     cls.add_output_stream_operator()
>     cls.add_binary_comparison_operator('==')
>     ## ipv4-address.h (module 'network'): ns3::Ipv4Address::Ipv4Address(ns3::Ipv4Address const & arg0) [copy constructor]
3145c2553
<                    is_const=True, deprecated=True)
---
>                    is_const=True)
3194c2602
<     ## ipv4-address-generator.h (module 'internet'): ns3::Ipv4AddressGenerator::Ipv4AddressGenerator(ns3::Ipv4AddressGenerator const & arg0) [constructor]
---
>     ## ipv4-address-generator.h (module 'internet'): ns3::Ipv4AddressGenerator::Ipv4AddressGenerator(ns3::Ipv4AddressGenerator const & arg0) [copy constructor]
3221,3230d2628
<     ## ipv4-address-generator.h (module 'internet'): static bool ns3::Ipv4AddressGenerator::IsAddressAllocated(ns3::Ipv4Address const addr) [member function]
<     cls.add_method('IsAddressAllocated', 
<                    'bool', 
<                    [param('ns3::Ipv4Address const', 'addr')], 
<                    is_static=True)
<     ## ipv4-address-generator.h (module 'internet'): static bool ns3::Ipv4AddressGenerator::IsNetworkAllocated(ns3::Ipv4Address const addr, ns3::Ipv4Mask const mask) [member function]
<     cls.add_method('IsNetworkAllocated', 
<                    'bool', 
<                    [param('ns3::Ipv4Address const', 'addr'), param('ns3::Ipv4Mask const', 'mask')], 
<                    is_static=True)
3254c2652
<     ## ipv4-address-helper.h (module 'internet'): ns3::Ipv4AddressHelper::Ipv4AddressHelper(ns3::Ipv4AddressHelper const & arg0) [constructor]
---
>     ## ipv4-address-helper.h (module 'internet'): ns3::Ipv4AddressHelper::Ipv4AddressHelper(ns3::Ipv4AddressHelper const & arg0) [copy constructor]
3278,3395d2675
< def register_Ns3Ipv4EndPoint_methods(root_module, cls):
<     ## ipv4-end-point.h (module 'internet'): ns3::Ipv4EndPoint::Ipv4EndPoint(ns3::Ipv4EndPoint const & arg0) [constructor]
<     cls.add_constructor([param('ns3::Ipv4EndPoint const &', 'arg0')])
<     ## ipv4-end-point.h (module 'internet'): ns3::Ipv4EndPoint::Ipv4EndPoint(ns3::Ipv4Address address, uint16_t port) [constructor]
<     cls.add_constructor([param('ns3::Ipv4Address', 'address'), param('uint16_t', 'port')])
<     ## ipv4-end-point.h (module 'internet'): void ns3::Ipv4EndPoint::BindToNetDevice(ns3::Ptr<ns3::NetDevice> netdevice) [member function]
<     cls.add_method('BindToNetDevice', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::NetDevice >', 'netdevice')])
<     ## ipv4-end-point.h (module 'internet'): void ns3::Ipv4EndPoint::ForwardIcmp(ns3::Ipv4Address icmpSource, uint8_t icmpTtl, uint8_t icmpType, uint8_t icmpCode, uint32_t icmpInfo) [member function]
<     cls.add_method('ForwardIcmp', 
<                    'void', 
<                    [param('ns3::Ipv4Address', 'icmpSource'), param('uint8_t', 'icmpTtl'), param('uint8_t', 'icmpType'), param('uint8_t', 'icmpCode'), param('uint32_t', 'icmpInfo')])
<     ## ipv4-end-point.h (module 'internet'): void ns3::Ipv4EndPoint::ForwardUp(ns3::Ptr<ns3::Packet> p, ns3::Ipv4Header const & header, uint16_t sport, ns3::Ptr<ns3::Ipv4Interface> incomingInterface) [member function]
<     cls.add_method('ForwardUp', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Packet >', 'p'), param('ns3::Ipv4Header const &', 'header'), param('uint16_t', 'sport'), param('ns3::Ptr< ns3::Ipv4Interface >', 'incomingInterface')])
<     ## ipv4-end-point.h (module 'internet'): ns3::Ptr<ns3::NetDevice> ns3::Ipv4EndPoint::GetBoundNetDevice() [member function]
<     cls.add_method('GetBoundNetDevice', 
<                    'ns3::Ptr< ns3::NetDevice >', 
<                    [])
<     ## ipv4-end-point.h (module 'internet'): ns3::Ipv4Address ns3::Ipv4EndPoint::GetLocalAddress() [member function]
<     cls.add_method('GetLocalAddress', 
<                    'ns3::Ipv4Address', 
<                    [])
<     ## ipv4-end-point.h (module 'internet'): uint16_t ns3::Ipv4EndPoint::GetLocalPort() [member function]
<     cls.add_method('GetLocalPort', 
<                    'uint16_t', 
<                    [])
<     ## ipv4-end-point.h (module 'internet'): ns3::Ipv4Address ns3::Ipv4EndPoint::GetPeerAddress() [member function]
<     cls.add_method('GetPeerAddress', 
<                    'ns3::Ipv4Address', 
<                    [])
<     ## ipv4-end-point.h (module 'internet'): uint16_t ns3::Ipv4EndPoint::GetPeerPort() [member function]
<     cls.add_method('GetPeerPort', 
<                    'uint16_t', 
<                    [])
<     ## ipv4-end-point.h (module 'internet'): bool ns3::Ipv4EndPoint::IsRxEnabled() [member function]
<     cls.add_method('IsRxEnabled', 
<                    'bool', 
<                    [])
<     ## ipv4-end-point.h (module 'internet'): void ns3::Ipv4EndPoint::SetDestroyCallback(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> callback) [member function]
<     cls.add_method('SetDestroyCallback', 
<                    'void', 
<                    [param('ns3::Callback< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'callback')])
<     ## ipv4-end-point.h (module 'internet'): void ns3::Ipv4EndPoint::SetIcmpCallback(ns3::Callback<void, ns3::Ipv4Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty> callback) [member function]
<     cls.add_method('SetIcmpCallback', 
<                    'void', 
<                    [param('ns3::Callback< void, ns3::Ipv4Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'callback')])
<     ## ipv4-end-point.h (module 'internet'): void ns3::Ipv4EndPoint::SetLocalAddress(ns3::Ipv4Address address) [member function]
<     cls.add_method('SetLocalAddress', 
<                    'void', 
<                    [param('ns3::Ipv4Address', 'address')])
<     ## ipv4-end-point.h (module 'internet'): void ns3::Ipv4EndPoint::SetPeer(ns3::Ipv4Address address, uint16_t port) [member function]
<     cls.add_method('SetPeer', 
<                    'void', 
<                    [param('ns3::Ipv4Address', 'address'), param('uint16_t', 'port')])
<     ## ipv4-end-point.h (module 'internet'): void ns3::Ipv4EndPoint::SetRxCallback(ns3::Callback<void, ns3::Ptr<ns3::Packet>, ns3::Ipv4Header, unsigned short, ns3::Ptr<ns3::Ipv4Interface>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> callback) [member function]
<     cls.add_method('SetRxCallback', 
<                    'void', 
<                    [param('ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Ipv4Header, unsigned short, ns3::Ptr< ns3::Ipv4Interface >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'callback')])
<     ## ipv4-end-point.h (module 'internet'): void ns3::Ipv4EndPoint::SetRxEnabled(bool enabled) [member function]
<     cls.add_method('SetRxEnabled', 
<                    'void', 
<                    [param('bool', 'enabled')])
<     return
< 
< def register_Ns3Ipv4EndPointDemux_methods(root_module, cls):
<     ## ipv4-end-point-demux.h (module 'internet'): ns3::Ipv4EndPointDemux::Ipv4EndPointDemux(ns3::Ipv4EndPointDemux const & arg0) [constructor]
<     cls.add_constructor([param('ns3::Ipv4EndPointDemux const &', 'arg0')])
<     ## ipv4-end-point-demux.h (module 'internet'): ns3::Ipv4EndPointDemux::Ipv4EndPointDemux() [constructor]
<     cls.add_constructor([])
<     ## ipv4-end-point-demux.h (module 'internet'): ns3::Ipv4EndPoint * ns3::Ipv4EndPointDemux::Allocate() [member function]
<     cls.add_method('Allocate', 
<                    'ns3::Ipv4EndPoint *', 
<                    [])
<     ## ipv4-end-point-demux.h (module 'internet'): ns3::Ipv4EndPoint * ns3::Ipv4EndPointDemux::Allocate(ns3::Ipv4Address address) [member function]
<     cls.add_method('Allocate', 
<                    'ns3::Ipv4EndPoint *', 
<                    [param('ns3::Ipv4Address', 'address')])
<     ## ipv4-end-point-demux.h (module 'internet'): ns3::Ipv4EndPoint * ns3::Ipv4EndPointDemux::Allocate(ns3::Ptr<ns3::NetDevice> boundNetDevice, uint16_t port) [member function]
<     cls.add_method('Allocate', 
<                    'ns3::Ipv4EndPoint *', 
<                    [param('ns3::Ptr< ns3::NetDevice >', 'boundNetDevice'), param('uint16_t', 'port')])
<     ## ipv4-end-point-demux.h (module 'internet'): ns3::Ipv4EndPoint * ns3::Ipv4EndPointDemux::Allocate(ns3::Ptr<ns3::NetDevice> boundNetDevice, ns3::Ipv4Address address, uint16_t port) [member function]
<     cls.add_method('Allocate', 
<                    'ns3::Ipv4EndPoint *', 
<                    [param('ns3::Ptr< ns3::NetDevice >', 'boundNetDevice'), param('ns3::Ipv4Address', 'address'), param('uint16_t', 'port')])
<     ## ipv4-end-point-demux.h (module 'internet'): ns3::Ipv4EndPoint * ns3::Ipv4EndPointDemux::Allocate(ns3::Ptr<ns3::NetDevice> boundNetDevice, ns3::Ipv4Address localAddress, uint16_t localPort, ns3::Ipv4Address peerAddress, uint16_t peerPort) [member function]
<     cls.add_method('Allocate', 
<                    'ns3::Ipv4EndPoint *', 
<                    [param('ns3::Ptr< ns3::NetDevice >', 'boundNetDevice'), param('ns3::Ipv4Address', 'localAddress'), param('uint16_t', 'localPort'), param('ns3::Ipv4Address', 'peerAddress'), param('uint16_t', 'peerPort')])
<     ## ipv4-end-point-demux.h (module 'internet'): void ns3::Ipv4EndPointDemux::DeAllocate(ns3::Ipv4EndPoint * endPoint) [member function]
<     cls.add_method('DeAllocate', 
<                    'void', 
<                    [param('ns3::Ipv4EndPoint *', 'endPoint')])
<     ## ipv4-end-point-demux.h (module 'internet'): ns3::Ipv4EndPointDemux::EndPoints ns3::Ipv4EndPointDemux::GetAllEndPoints() [member function]
<     cls.add_method('GetAllEndPoints', 
<                    'ns3::Ipv4EndPointDemux::EndPoints', 
<                    [])
<     ## ipv4-end-point-demux.h (module 'internet'): ns3::Ipv4EndPointDemux::EndPoints ns3::Ipv4EndPointDemux::Lookup(ns3::Ipv4Address daddr, uint16_t dport, ns3::Ipv4Address saddr, uint16_t sport, ns3::Ptr<ns3::Ipv4Interface> incomingInterface) [member function]
<     cls.add_method('Lookup', 
<                    'ns3::Ipv4EndPointDemux::EndPoints', 
<                    [param('ns3::Ipv4Address', 'daddr'), param('uint16_t', 'dport'), param('ns3::Ipv4Address', 'saddr'), param('uint16_t', 'sport'), param('ns3::Ptr< ns3::Ipv4Interface >', 'incomingInterface')])
<     ## ipv4-end-point-demux.h (module 'internet'): bool ns3::Ipv4EndPointDemux::LookupLocal(ns3::Ptr<ns3::NetDevice> boundNetDevice, ns3::Ipv4Address addr, uint16_t port) [member function]
<     cls.add_method('LookupLocal', 
<                    'bool', 
<                    [param('ns3::Ptr< ns3::NetDevice >', 'boundNetDevice'), param('ns3::Ipv4Address', 'addr'), param('uint16_t', 'port')])
<     ## ipv4-end-point-demux.h (module 'internet'): bool ns3::Ipv4EndPointDemux::LookupPortLocal(uint16_t port) [member function]
<     cls.add_method('LookupPortLocal', 
<                    'bool', 
<                    [param('uint16_t', 'port')])
<     ## ipv4-end-point-demux.h (module 'internet'): ns3::Ipv4EndPoint * ns3::Ipv4EndPointDemux::SimpleLookup(ns3::Ipv4Address daddr, uint16_t dport, ns3::Ipv4Address saddr, uint16_t sport) [member function]
<     cls.add_method('SimpleLookup', 
<                    'ns3::Ipv4EndPoint *', 
<                    [param('ns3::Ipv4Address', 'daddr'), param('uint16_t', 'dport'), param('ns3::Ipv4Address', 'saddr'), param('uint16_t', 'sport')])
<     return
< 
3396a2677
>     cls.add_binary_comparison_operator('!=')
3399d2679
<     cls.add_binary_comparison_operator('!=')
3404c2684
<     ## ipv4-interface-address.h (module 'internet'): ns3::Ipv4InterfaceAddress::Ipv4InterfaceAddress(ns3::Ipv4InterfaceAddress const & o) [constructor]
---
>     ## ipv4-interface-address.h (module 'internet'): ns3::Ipv4InterfaceAddress::Ipv4InterfaceAddress(ns3::Ipv4InterfaceAddress const & o) [copy constructor]
3458c2738
<     ## ipv4-interface-container.h (module 'internet'): ns3::Ipv4InterfaceContainer::Ipv4InterfaceContainer(ns3::Ipv4InterfaceContainer const & arg0) [constructor]
---
>     ## ipv4-interface-container.h (module 'internet'): ns3::Ipv4InterfaceContainer::Ipv4InterfaceContainer(ns3::Ipv4InterfaceContainer const & arg0) [copy constructor]
3470c2750
<     ## ipv4-interface-container.h (module 'internet'): void ns3::Ipv4InterfaceContainer::Add(std::pair<ns3::Ptr<ns3::Ipv4>, unsigned int> ipInterfacePair) [member function]
---
>     ## ipv4-interface-container.h (module 'internet'): void ns3::Ipv4InterfaceContainer::Add(std::pair<ns3::Ptr<ns3::Ipv4>,unsigned int> ipInterfacePair) [member function]
3478c2758
<     ## ipv4-interface-container.h (module 'internet'): ns3::Ipv4InterfaceContainer::Iterator ns3::Ipv4InterfaceContainer::Begin() const [member function]
---
>     ## ipv4-interface-container.h (module 'internet'): __gnu_cxx::__normal_iterator<const std::pair<ns3::Ptr<ns3::Ipv4>, unsigned int>*,std::vector<std::pair<ns3::Ptr<ns3::Ipv4>, unsigned int>, std::allocator<std::pair<ns3::Ptr<ns3::Ipv4>, unsigned int> > > > ns3::Ipv4InterfaceContainer::Begin() const [member function]
3480c2760
<                    'ns3::Ipv4InterfaceContainer::Iterator', 
---
>                    '__gnu_cxx::__normal_iterator< std::pair< ns3::Ptr< ns3::Ipv4 >, unsigned int > const, std::vector< std::pair< ns3::Ptr< ns3::Ipv4 >, unsigned int > > >', 
3483c2763
<     ## ipv4-interface-container.h (module 'internet'): ns3::Ipv4InterfaceContainer::Iterator ns3::Ipv4InterfaceContainer::End() const [member function]
---
>     ## ipv4-interface-container.h (module 'internet'): __gnu_cxx::__normal_iterator<const std::pair<ns3::Ptr<ns3::Ipv4>, unsigned int>*,std::vector<std::pair<ns3::Ptr<ns3::Ipv4>, unsigned int>, std::allocator<std::pair<ns3::Ptr<ns3::Ipv4>, unsigned int> > > > ns3::Ipv4InterfaceContainer::End() const [member function]
3485c2765
<                    'ns3::Ipv4InterfaceContainer::Iterator', 
---
>                    '__gnu_cxx::__normal_iterator< std::pair< ns3::Ptr< ns3::Ipv4 >, unsigned int > const, std::vector< std::pair< ns3::Ptr< ns3::Ipv4 >, unsigned int > > >', 
3488c2768
<     ## ipv4-interface-container.h (module 'internet'): std::pair<ns3::Ptr<ns3::Ipv4>, unsigned int> ns3::Ipv4InterfaceContainer::Get(uint32_t i) const [member function]
---
>     ## ipv4-interface-container.h (module 'internet'): std::pair<ns3::Ptr<ns3::Ipv4>,unsigned int> ns3::Ipv4InterfaceContainer::Get(uint32_t i) const [member function]
3509a2790
>     cls.add_binary_comparison_operator('!=')
3512,3513c2793
<     cls.add_binary_comparison_operator('!=')
<     ## ipv4-address.h (module 'network'): ns3::Ipv4Mask::Ipv4Mask(ns3::Ipv4Mask const & arg0) [constructor]
---
>     ## ipv4-address.h (module 'network'): ns3::Ipv4Mask::Ipv4Mask(ns3::Ipv4Mask const & arg0) [copy constructor]
3555c2835
<                    is_const=True, deprecated=True)
---
>                    is_const=True)
3574d2853
<     cls.add_binary_comparison_operator('==')
3577c2856
<     ## ipv4-routing-table-entry.h (module 'internet'): ns3::Ipv4MulticastRoutingTableEntry::Ipv4MulticastRoutingTableEntry(ns3::Ipv4MulticastRoutingTableEntry const & route) [constructor]
---
>     ## ipv4-routing-table-entry.h (module 'internet'): ns3::Ipv4MulticastRoutingTableEntry::Ipv4MulticastRoutingTableEntry(ns3::Ipv4MulticastRoutingTableEntry const & route) [copy constructor]
3621c2900
<     ## ipv4-routing-helper.h (module 'internet'): ns3::Ipv4RoutingHelper::Ipv4RoutingHelper(ns3::Ipv4RoutingHelper const & arg0) [constructor]
---
>     ## ipv4-routing-helper.h (module 'internet'): ns3::Ipv4RoutingHelper::Ipv4RoutingHelper(ns3::Ipv4RoutingHelper const & arg0) [copy constructor]
3627c2906
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
3632c2911
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
3653c2932
<     ## ipv4-routing-helper.h (module 'internet'): static void ns3::Ipv4RoutingHelper::PrintRoutingTableAllAt(ns3::Time printTime, ns3::Ptr<ns3::OutputStreamWrapper> stream, ns3::Time::Unit unit=::ns3::Time::Unit::S) [member function]
---
>     ## ipv4-routing-helper.h (module 'internet'): static void ns3::Ipv4RoutingHelper::PrintRoutingTableAllAt(ns3::Time printTime, ns3::Ptr<ns3::OutputStreamWrapper> stream) [member function]
3656c2935
<                    [param('ns3::Time', 'printTime'), param('ns3::Ptr< ns3::OutputStreamWrapper >', 'stream'), param('ns3::Time::Unit', 'unit', default_value='::ns3::Time::Unit::S')], 
---
>                    [param('ns3::Time', 'printTime'), param('ns3::Ptr< ns3::OutputStreamWrapper >', 'stream')], 
3658c2937
<     ## ipv4-routing-helper.h (module 'internet'): static void ns3::Ipv4RoutingHelper::PrintRoutingTableAllEvery(ns3::Time printInterval, ns3::Ptr<ns3::OutputStreamWrapper> stream, ns3::Time::Unit unit=::ns3::Time::Unit::S) [member function]
---
>     ## ipv4-routing-helper.h (module 'internet'): static void ns3::Ipv4RoutingHelper::PrintRoutingTableAllEvery(ns3::Time printInterval, ns3::Ptr<ns3::OutputStreamWrapper> stream) [member function]
3661c2940
<                    [param('ns3::Time', 'printInterval'), param('ns3::Ptr< ns3::OutputStreamWrapper >', 'stream'), param('ns3::Time::Unit', 'unit', default_value='::ns3::Time::Unit::S')], 
---
>                    [param('ns3::Time', 'printInterval'), param('ns3::Ptr< ns3::OutputStreamWrapper >', 'stream')], 
3663c2942
<     ## ipv4-routing-helper.h (module 'internet'): static void ns3::Ipv4RoutingHelper::PrintRoutingTableAt(ns3::Time printTime, ns3::Ptr<ns3::Node> node, ns3::Ptr<ns3::OutputStreamWrapper> stream, ns3::Time::Unit unit=::ns3::Time::Unit::S) [member function]
---
>     ## ipv4-routing-helper.h (module 'internet'): static void ns3::Ipv4RoutingHelper::PrintRoutingTableAt(ns3::Time printTime, ns3::Ptr<ns3::Node> node, ns3::Ptr<ns3::OutputStreamWrapper> stream) [member function]
3666c2945
<                    [param('ns3::Time', 'printTime'), param('ns3::Ptr< ns3::Node >', 'node'), param('ns3::Ptr< ns3::OutputStreamWrapper >', 'stream'), param('ns3::Time::Unit', 'unit', default_value='::ns3::Time::Unit::S')], 
---
>                    [param('ns3::Time', 'printTime'), param('ns3::Ptr< ns3::Node >', 'node'), param('ns3::Ptr< ns3::OutputStreamWrapper >', 'stream')], 
3668c2947
<     ## ipv4-routing-helper.h (module 'internet'): static void ns3::Ipv4RoutingHelper::PrintRoutingTableEvery(ns3::Time printInterval, ns3::Ptr<ns3::Node> node, ns3::Ptr<ns3::OutputStreamWrapper> stream, ns3::Time::Unit unit=::ns3::Time::Unit::S) [member function]
---
>     ## ipv4-routing-helper.h (module 'internet'): static void ns3::Ipv4RoutingHelper::PrintRoutingTableEvery(ns3::Time printInterval, ns3::Ptr<ns3::Node> node, ns3::Ptr<ns3::OutputStreamWrapper> stream) [member function]
3671c2950
<                    [param('ns3::Time', 'printInterval'), param('ns3::Ptr< ns3::Node >', 'node'), param('ns3::Ptr< ns3::OutputStreamWrapper >', 'stream'), param('ns3::Time::Unit', 'unit', default_value='::ns3::Time::Unit::S')], 
---
>                    [param('ns3::Time', 'printInterval'), param('ns3::Ptr< ns3::Node >', 'node'), param('ns3::Ptr< ns3::OutputStreamWrapper >', 'stream')], 
3677d2955
<     cls.add_binary_comparison_operator('==')
3680c2958
<     ## ipv4-routing-table-entry.h (module 'internet'): ns3::Ipv4RoutingTableEntry::Ipv4RoutingTableEntry(ns3::Ipv4RoutingTableEntry const & route) [constructor]
---
>     ## ipv4-routing-table-entry.h (module 'internet'): ns3::Ipv4RoutingTableEntry::Ipv4RoutingTableEntry(ns3::Ipv4RoutingTableEntry const & route) [copy constructor]
3759c3037
<     ## ipv4-static-routing-helper.h (module 'internet'): ns3::Ipv4StaticRoutingHelper::Ipv4StaticRoutingHelper(ns3::Ipv4StaticRoutingHelper const & arg0) [constructor]
---
>     ## ipv4-static-routing-helper.h (module 'internet'): ns3::Ipv4StaticRoutingHelper::Ipv4StaticRoutingHelper(ns3::Ipv4StaticRoutingHelper const & arg0) [copy constructor]
3811,3812d3088
<     cls.add_output_stream_operator()
<     cls.add_binary_comparison_operator('==')
3814a3091,3092
>     cls.add_output_stream_operator()
>     cls.add_binary_comparison_operator('==')
3821c3099
<     ## ipv6-address.h (module 'network'): ns3::Ipv6Address::Ipv6Address(ns3::Ipv6Address const & addr) [constructor]
---
>     ## ipv6-address.h (module 'network'): ns3::Ipv6Address::Ipv6Address(ns3::Ipv6Address const & addr) [copy constructor]
3825c3103
<     ## ipv6-address.h (module 'network'): ns3::Ipv6Address ns3::Ipv6Address::CombinePrefix(ns3::Ipv6Prefix const & prefix) const [member function]
---
>     ## ipv6-address.h (module 'network'): ns3::Ipv6Address ns3::Ipv6Address::CombinePrefix(ns3::Ipv6Prefix const & prefix) [member function]
3828,3829c3106
<                    [param('ns3::Ipv6Prefix const &', 'prefix')], 
<                    is_const=True)
---
>                    [param('ns3::Ipv6Prefix const &', 'prefix')])
3885,3889d3161
<     ## ipv6-address.h (module 'network'): bool ns3::Ipv6Address::HasPrefix(ns3::Ipv6Prefix const & prefix) const [member function]
<     cls.add_method('HasPrefix', 
<                    'bool', 
<                    [param('ns3::Ipv6Prefix const &', 'prefix')], 
<                    is_const=True)
3894c3166
<                    is_const=True, deprecated=True)
---
>                    deprecated=True, is_const=True)
3919c3191
<                    is_const=True, deprecated=True)
---
>                    is_const=True)
3955,3959d3226
<     ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::MakeAutoconfiguredAddress(ns3::Address addr, ns3::Ipv6Address prefix) [member function]
<     cls.add_method('MakeAutoconfiguredAddress', 
<                    'ns3::Ipv6Address', 
<                    [param('ns3::Address', 'addr'), param('ns3::Ipv6Address', 'prefix')], 
<                    is_static=True)
3975,3984d3241
<     ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::MakeAutoconfiguredAddress(ns3::Mac8Address addr, ns3::Ipv6Address prefix) [member function]
<     cls.add_method('MakeAutoconfiguredAddress', 
<                    'ns3::Ipv6Address', 
<                    [param('ns3::Mac8Address', 'addr'), param('ns3::Ipv6Address', 'prefix')], 
<                    is_static=True)
<     ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::MakeAutoconfiguredLinkLocalAddress(ns3::Address mac) [member function]
<     cls.add_method('MakeAutoconfiguredLinkLocalAddress', 
<                    'ns3::Ipv6Address', 
<                    [param('ns3::Address', 'mac')], 
<                    is_static=True)
4000,4004d3256
<     ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::MakeAutoconfiguredLinkLocalAddress(ns3::Mac8Address mac) [member function]
<     cls.add_method('MakeAutoconfiguredLinkLocalAddress', 
<                    'ns3::Ipv6Address', 
<                    [param('ns3::Mac8Address', 'mac')], 
<                    is_static=True)
4038c3290
<     ## ipv6-address-generator.h (module 'internet'): ns3::Ipv6AddressGenerator::Ipv6AddressGenerator(ns3::Ipv6AddressGenerator const & arg0) [constructor]
---
>     ## ipv6-address-generator.h (module 'internet'): ns3::Ipv6AddressGenerator::Ipv6AddressGenerator(ns3::Ipv6AddressGenerator const & arg0) [copy constructor]
4065,4074d3316
<     ## ipv6-address-generator.h (module 'internet'): static bool ns3::Ipv6AddressGenerator::IsAddressAllocated(ns3::Ipv6Address const addr) [member function]
<     cls.add_method('IsAddressAllocated', 
<                    'bool', 
<                    [param('ns3::Ipv6Address const', 'addr')], 
<                    is_static=True)
<     ## ipv6-address-generator.h (module 'internet'): static bool ns3::Ipv6AddressGenerator::IsNetworkAllocated(ns3::Ipv6Address const addr, ns3::Ipv6Prefix const prefix) [member function]
<     cls.add_method('IsNetworkAllocated', 
<                    'bool', 
<                    [param('ns3::Ipv6Address const', 'addr'), param('ns3::Ipv6Prefix const', 'prefix')], 
<                    is_static=True)
4098c3340
<     ## ipv6-address-helper.h (module 'internet'): ns3::Ipv6AddressHelper::Ipv6AddressHelper(ns3::Ipv6AddressHelper const & arg0) [constructor]
---
>     ## ipv6-address-helper.h (module 'internet'): ns3::Ipv6AddressHelper::Ipv6AddressHelper(ns3::Ipv6AddressHelper const & arg0) [copy constructor]
4102,4103c3344,3345
<     ## ipv6-address-helper.h (module 'internet'): ns3::Ipv6AddressHelper::Ipv6AddressHelper(ns3::Ipv6Address network, ns3::Ipv6Prefix prefix, ns3::Ipv6Address base=ns3::Ipv6Address("::1")) [constructor]
<     cls.add_constructor([param('ns3::Ipv6Address', 'network'), param('ns3::Ipv6Prefix', 'prefix'), param('ns3::Ipv6Address', 'base', default_value='ns3::Ipv6Address("::1")')])
---
>     ## ipv6-address-helper.h (module 'internet'): ns3::Ipv6AddressHelper::Ipv6AddressHelper(ns3::Ipv6Address network, ns3::Ipv6Prefix prefix, ns3::Ipv6Address base=ns3::Ipv6Address(((const char*)"::1"))) [constructor]
>     cls.add_constructor([param('ns3::Ipv6Address', 'network'), param('ns3::Ipv6Prefix', 'prefix'), param('ns3::Ipv6Address', 'base', default_value='ns3::Ipv6Address(((const char*)"::1"))')])
4108c3350
<     ## ipv6-address-helper.h (module 'internet'): ns3::Ipv6InterfaceContainer ns3::Ipv6AddressHelper::Assign(ns3::NetDeviceContainer const & c, std::vector<bool, std::allocator<bool> > withConfiguration) [member function]
---
>     ## ipv6-address-helper.h (module 'internet'): ns3::Ipv6InterfaceContainer ns3::Ipv6AddressHelper::Assign(ns3::NetDeviceContainer const & c, std::vector<bool,std::allocator<bool> > withConfiguration) [member function]
4128c3370
<     ## ipv6-address-helper.h (module 'internet'): void ns3::Ipv6AddressHelper::SetBase(ns3::Ipv6Address network, ns3::Ipv6Prefix prefix, ns3::Ipv6Address base=ns3::Ipv6Address("::1")) [member function]
---
>     ## ipv6-address-helper.h (module 'internet'): void ns3::Ipv6AddressHelper::SetBase(ns3::Ipv6Address network, ns3::Ipv6Prefix prefix, ns3::Ipv6Address base=ns3::Ipv6Address(((const char*)"::1"))) [member function]
4131,4254c3373
<                    [param('ns3::Ipv6Address', 'network'), param('ns3::Ipv6Prefix', 'prefix'), param('ns3::Ipv6Address', 'base', default_value='ns3::Ipv6Address("::1")')])
<     return
< 
< def register_Ns3Ipv6EndPoint_methods(root_module, cls):
<     ## ipv6-end-point.h (module 'internet'): ns3::Ipv6EndPoint::Ipv6EndPoint(ns3::Ipv6EndPoint const & arg0) [constructor]
<     cls.add_constructor([param('ns3::Ipv6EndPoint const &', 'arg0')])
<     ## ipv6-end-point.h (module 'internet'): ns3::Ipv6EndPoint::Ipv6EndPoint(ns3::Ipv6Address addr, uint16_t port) [constructor]
<     cls.add_constructor([param('ns3::Ipv6Address', 'addr'), param('uint16_t', 'port')])
<     ## ipv6-end-point.h (module 'internet'): void ns3::Ipv6EndPoint::BindToNetDevice(ns3::Ptr<ns3::NetDevice> netdevice) [member function]
<     cls.add_method('BindToNetDevice', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::NetDevice >', 'netdevice')])
<     ## ipv6-end-point.h (module 'internet'): void ns3::Ipv6EndPoint::ForwardIcmp(ns3::Ipv6Address src, uint8_t ttl, uint8_t type, uint8_t code, uint32_t info) [member function]
<     cls.add_method('ForwardIcmp', 
<                    'void', 
<                    [param('ns3::Ipv6Address', 'src'), param('uint8_t', 'ttl'), param('uint8_t', 'type'), param('uint8_t', 'code'), param('uint32_t', 'info')])
<     ## ipv6-end-point.h (module 'internet'): void ns3::Ipv6EndPoint::ForwardUp(ns3::Ptr<ns3::Packet> p, ns3::Ipv6Header header, uint16_t port, ns3::Ptr<ns3::Ipv6Interface> incomingInterface) [member function]
<     cls.add_method('ForwardUp', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Packet >', 'p'), param('ns3::Ipv6Header', 'header'), param('uint16_t', 'port'), param('ns3::Ptr< ns3::Ipv6Interface >', 'incomingInterface')])
<     ## ipv6-end-point.h (module 'internet'): ns3::Ptr<ns3::NetDevice> ns3::Ipv6EndPoint::GetBoundNetDevice() [member function]
<     cls.add_method('GetBoundNetDevice', 
<                    'ns3::Ptr< ns3::NetDevice >', 
<                    [])
<     ## ipv6-end-point.h (module 'internet'): ns3::Ipv6Address ns3::Ipv6EndPoint::GetLocalAddress() [member function]
<     cls.add_method('GetLocalAddress', 
<                    'ns3::Ipv6Address', 
<                    [])
<     ## ipv6-end-point.h (module 'internet'): uint16_t ns3::Ipv6EndPoint::GetLocalPort() [member function]
<     cls.add_method('GetLocalPort', 
<                    'uint16_t', 
<                    [])
<     ## ipv6-end-point.h (module 'internet'): ns3::Ipv6Address ns3::Ipv6EndPoint::GetPeerAddress() [member function]
<     cls.add_method('GetPeerAddress', 
<                    'ns3::Ipv6Address', 
<                    [])
<     ## ipv6-end-point.h (module 'internet'): uint16_t ns3::Ipv6EndPoint::GetPeerPort() [member function]
<     cls.add_method('GetPeerPort', 
<                    'uint16_t', 
<                    [])
<     ## ipv6-end-point.h (module 'internet'): bool ns3::Ipv6EndPoint::IsRxEnabled() [member function]
<     cls.add_method('IsRxEnabled', 
<                    'bool', 
<                    [])
<     ## ipv6-end-point.h (module 'internet'): void ns3::Ipv6EndPoint::SetDestroyCallback(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> callback) [member function]
<     cls.add_method('SetDestroyCallback', 
<                    'void', 
<                    [param('ns3::Callback< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'callback')])
<     ## ipv6-end-point.h (module 'internet'): void ns3::Ipv6EndPoint::SetIcmpCallback(ns3::Callback<void, ns3::Ipv6Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty> callback) [member function]
<     cls.add_method('SetIcmpCallback', 
<                    'void', 
<                    [param('ns3::Callback< void, ns3::Ipv6Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'callback')])
<     ## ipv6-end-point.h (module 'internet'): void ns3::Ipv6EndPoint::SetLocalAddress(ns3::Ipv6Address addr) [member function]
<     cls.add_method('SetLocalAddress', 
<                    'void', 
<                    [param('ns3::Ipv6Address', 'addr')])
<     ## ipv6-end-point.h (module 'internet'): void ns3::Ipv6EndPoint::SetLocalPort(uint16_t port) [member function]
<     cls.add_method('SetLocalPort', 
<                    'void', 
<                    [param('uint16_t', 'port')])
<     ## ipv6-end-point.h (module 'internet'): void ns3::Ipv6EndPoint::SetPeer(ns3::Ipv6Address addr, uint16_t port) [member function]
<     cls.add_method('SetPeer', 
<                    'void', 
<                    [param('ns3::Ipv6Address', 'addr'), param('uint16_t', 'port')])
<     ## ipv6-end-point.h (module 'internet'): void ns3::Ipv6EndPoint::SetRxCallback(ns3::Callback<void, ns3::Ptr<ns3::Packet>, ns3::Ipv6Header, unsigned short, ns3::Ptr<ns3::Ipv6Interface>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> callback) [member function]
<     cls.add_method('SetRxCallback', 
<                    'void', 
<                    [param('ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Ipv6Header, unsigned short, ns3::Ptr< ns3::Ipv6Interface >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'callback')])
<     ## ipv6-end-point.h (module 'internet'): void ns3::Ipv6EndPoint::SetRxEnabled(bool enabled) [member function]
<     cls.add_method('SetRxEnabled', 
<                    'void', 
<                    [param('bool', 'enabled')])
<     return
< 
< def register_Ns3Ipv6EndPointDemux_methods(root_module, cls):
<     ## ipv6-end-point-demux.h (module 'internet'): ns3::Ipv6EndPointDemux::Ipv6EndPointDemux(ns3::Ipv6EndPointDemux const & arg0) [constructor]
<     cls.add_constructor([param('ns3::Ipv6EndPointDemux const &', 'arg0')])
<     ## ipv6-end-point-demux.h (module 'internet'): ns3::Ipv6EndPointDemux::Ipv6EndPointDemux() [constructor]
<     cls.add_constructor([])
<     ## ipv6-end-point-demux.h (module 'internet'): ns3::Ipv6EndPoint * ns3::Ipv6EndPointDemux::Allocate() [member function]
<     cls.add_method('Allocate', 
<                    'ns3::Ipv6EndPoint *', 
<                    [])
<     ## ipv6-end-point-demux.h (module 'internet'): ns3::Ipv6EndPoint * ns3::Ipv6EndPointDemux::Allocate(ns3::Ipv6Address address) [member function]
<     cls.add_method('Allocate', 
<                    'ns3::Ipv6EndPoint *', 
<                    [param('ns3::Ipv6Address', 'address')])
<     ## ipv6-end-point-demux.h (module 'internet'): ns3::Ipv6EndPoint * ns3::Ipv6EndPointDemux::Allocate(ns3::Ptr<ns3::NetDevice> boundNetDevice, uint16_t port) [member function]
<     cls.add_method('Allocate', 
<                    'ns3::Ipv6EndPoint *', 
<                    [param('ns3::Ptr< ns3::NetDevice >', 'boundNetDevice'), param('uint16_t', 'port')])
<     ## ipv6-end-point-demux.h (module 'internet'): ns3::Ipv6EndPoint * ns3::Ipv6EndPointDemux::Allocate(ns3::Ptr<ns3::NetDevice> boundNetDevice, ns3::Ipv6Address address, uint16_t port) [member function]
<     cls.add_method('Allocate', 
<                    'ns3::Ipv6EndPoint *', 
<                    [param('ns3::Ptr< ns3::NetDevice >', 'boundNetDevice'), param('ns3::Ipv6Address', 'address'), param('uint16_t', 'port')])
<     ## ipv6-end-point-demux.h (module 'internet'): ns3::Ipv6EndPoint * ns3::Ipv6EndPointDemux::Allocate(ns3::Ptr<ns3::NetDevice> boundNetDevice, ns3::Ipv6Address localAddress, uint16_t localPort, ns3::Ipv6Address peerAddress, uint16_t peerPort) [member function]
<     cls.add_method('Allocate', 
<                    'ns3::Ipv6EndPoint *', 
<                    [param('ns3::Ptr< ns3::NetDevice >', 'boundNetDevice'), param('ns3::Ipv6Address', 'localAddress'), param('uint16_t', 'localPort'), param('ns3::Ipv6Address', 'peerAddress'), param('uint16_t', 'peerPort')])
<     ## ipv6-end-point-demux.h (module 'internet'): void ns3::Ipv6EndPointDemux::DeAllocate(ns3::Ipv6EndPoint * endPoint) [member function]
<     cls.add_method('DeAllocate', 
<                    'void', 
<                    [param('ns3::Ipv6EndPoint *', 'endPoint')])
<     ## ipv6-end-point-demux.h (module 'internet'): ns3::Ipv6EndPointDemux::EndPoints ns3::Ipv6EndPointDemux::GetEndPoints() const [member function]
<     cls.add_method('GetEndPoints', 
<                    'ns3::Ipv6EndPointDemux::EndPoints', 
<                    [], 
<                    is_const=True)
<     ## ipv6-end-point-demux.h (module 'internet'): ns3::Ipv6EndPointDemux::EndPoints ns3::Ipv6EndPointDemux::Lookup(ns3::Ipv6Address dst, uint16_t dport, ns3::Ipv6Address src, uint16_t sport, ns3::Ptr<ns3::Ipv6Interface> incomingInterface) [member function]
<     cls.add_method('Lookup', 
<                    'ns3::Ipv6EndPointDemux::EndPoints', 
<                    [param('ns3::Ipv6Address', 'dst'), param('uint16_t', 'dport'), param('ns3::Ipv6Address', 'src'), param('uint16_t', 'sport'), param('ns3::Ptr< ns3::Ipv6Interface >', 'incomingInterface')])
<     ## ipv6-end-point-demux.h (module 'internet'): bool ns3::Ipv6EndPointDemux::LookupLocal(ns3::Ptr<ns3::NetDevice> boundNetDevice, ns3::Ipv6Address addr, uint16_t port) [member function]
<     cls.add_method('LookupLocal', 
<                    'bool', 
<                    [param('ns3::Ptr< ns3::NetDevice >', 'boundNetDevice'), param('ns3::Ipv6Address', 'addr'), param('uint16_t', 'port')])
<     ## ipv6-end-point-demux.h (module 'internet'): bool ns3::Ipv6EndPointDemux::LookupPortLocal(uint16_t port) [member function]
<     cls.add_method('LookupPortLocal', 
<                    'bool', 
<                    [param('uint16_t', 'port')])
<     ## ipv6-end-point-demux.h (module 'internet'): ns3::Ipv6EndPoint * ns3::Ipv6EndPointDemux::SimpleLookup(ns3::Ipv6Address dst, uint16_t dport, ns3::Ipv6Address src, uint16_t sport) [member function]
<     cls.add_method('SimpleLookup', 
<                    'ns3::Ipv6EndPoint *', 
<                    [param('ns3::Ipv6Address', 'dst'), param('uint16_t', 'dport'), param('ns3::Ipv6Address', 'src'), param('uint16_t', 'sport')])
---
>                    [param('ns3::Ipv6Address', 'network'), param('ns3::Ipv6Prefix', 'prefix'), param('ns3::Ipv6Address', 'base', default_value='ns3::Ipv6Address(((const char*)"::1"))')])
4257a3377
>     cls.add_binary_comparison_operator('!=')
4260d3379
<     cls.add_binary_comparison_operator('!=')
4267c3386
<     ## ipv6-interface-address.h (module 'internet'): ns3::Ipv6InterfaceAddress::Ipv6InterfaceAddress(ns3::Ipv6InterfaceAddress const & o) [constructor]
---
>     ## ipv6-interface-address.h (module 'internet'): ns3::Ipv6InterfaceAddress::Ipv6InterfaceAddress(ns3::Ipv6InterfaceAddress const & o) [copy constructor]
4318c3437
<     ## ipv6-interface-container.h (module 'internet'): ns3::Ipv6InterfaceContainer::Ipv6InterfaceContainer(ns3::Ipv6InterfaceContainer const & arg0) [constructor]
---
>     ## ipv6-interface-container.h (module 'internet'): ns3::Ipv6InterfaceContainer::Ipv6InterfaceContainer(ns3::Ipv6InterfaceContainer const & arg0) [copy constructor]
4334c3453
<     ## ipv6-interface-container.h (module 'internet'): ns3::Ipv6InterfaceContainer::Iterator ns3::Ipv6InterfaceContainer::Begin() const [member function]
---
>     ## ipv6-interface-container.h (module 'internet'): __gnu_cxx::__normal_iterator<const std::pair<ns3::Ptr<ns3::Ipv6>, unsigned int>*,std::vector<std::pair<ns3::Ptr<ns3::Ipv6>, unsigned int>, std::allocator<std::pair<ns3::Ptr<ns3::Ipv6>, unsigned int> > > > ns3::Ipv6InterfaceContainer::Begin() const [member function]
4336c3455
<                    'ns3::Ipv6InterfaceContainer::Iterator', 
---
>                    '__gnu_cxx::__normal_iterator< std::pair< ns3::Ptr< ns3::Ipv6 >, unsigned int > const, std::vector< std::pair< ns3::Ptr< ns3::Ipv6 >, unsigned int > > >', 
4339c3458
<     ## ipv6-interface-container.h (module 'internet'): ns3::Ipv6InterfaceContainer::Iterator ns3::Ipv6InterfaceContainer::End() const [member function]
---
>     ## ipv6-interface-container.h (module 'internet'): __gnu_cxx::__normal_iterator<const std::pair<ns3::Ptr<ns3::Ipv6>, unsigned int>*,std::vector<std::pair<ns3::Ptr<ns3::Ipv6>, unsigned int>, std::allocator<std::pair<ns3::Ptr<ns3::Ipv6>, unsigned int> > > > ns3::Ipv6InterfaceContainer::End() const [member function]
4341c3460
<                    'ns3::Ipv6InterfaceContainer::Iterator', 
---
>                    '__gnu_cxx::__normal_iterator< std::pair< ns3::Ptr< ns3::Ipv6 >, unsigned int > const, std::vector< std::pair< ns3::Ptr< ns3::Ipv6 >, unsigned int > > >', 
4393c3512
<     ## ipv6-routing-table-entry.h (module 'internet'): ns3::Ipv6MulticastRoutingTableEntry::Ipv6MulticastRoutingTableEntry(ns3::Ipv6MulticastRoutingTableEntry const & route) [constructor]
---
>     ## ipv6-routing-table-entry.h (module 'internet'): ns3::Ipv6MulticastRoutingTableEntry::Ipv6MulticastRoutingTableEntry(ns3::Ipv6MulticastRoutingTableEntry const & route) [copy constructor]
4434a3554
>     cls.add_binary_comparison_operator('!=')
4437d3556
<     cls.add_binary_comparison_operator('!=')
4444,4447d3562
<     ## ipv6-address.h (module 'network'): ns3::Ipv6Prefix::Ipv6Prefix(uint8_t * prefix, uint8_t prefixLength) [constructor]
<     cls.add_constructor([param('uint8_t *', 'prefix'), param('uint8_t', 'prefixLength')])
<     ## ipv6-address.h (module 'network'): ns3::Ipv6Prefix::Ipv6Prefix(char const * prefix, uint8_t prefixLength) [constructor]
<     cls.add_constructor([param('char const *', 'prefix'), param('uint8_t', 'prefixLength')])
4450c3565
<     ## ipv6-address.h (module 'network'): ns3::Ipv6Prefix::Ipv6Prefix(ns3::Ipv6Prefix const & prefix) [constructor]
---
>     ## ipv6-address.h (module 'network'): ns3::Ipv6Prefix::Ipv6Prefix(ns3::Ipv6Prefix const & prefix) [copy constructor]
4464,4468d3578
<     ## ipv6-address.h (module 'network'): uint8_t ns3::Ipv6Prefix::GetMinimumPrefixLength() const [member function]
<     cls.add_method('GetMinimumPrefixLength', 
<                    'uint8_t', 
<                    [], 
<                    is_const=True)
4488c3598
<                    is_const=True, deprecated=True)
---
>                    is_const=True)
4499,4502d3608
<     ## ipv6-address.h (module 'network'): void ns3::Ipv6Prefix::SetPrefixLength(uint8_t prefixLength) [member function]
<     cls.add_method('SetPrefixLength', 
<                    'void', 
<                    [param('uint8_t', 'prefixLength')])
4508c3614
<     ## ipv6-routing-helper.h (module 'internet'): ns3::Ipv6RoutingHelper::Ipv6RoutingHelper(ns3::Ipv6RoutingHelper const & arg0) [constructor]
---
>     ## ipv6-routing-helper.h (module 'internet'): ns3::Ipv6RoutingHelper::Ipv6RoutingHelper(ns3::Ipv6RoutingHelper const & arg0) [copy constructor]
4514c3620
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
4519c3625
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
4540c3646
<     ## ipv6-routing-helper.h (module 'internet'): static void ns3::Ipv6RoutingHelper::PrintRoutingTableAllAt(ns3::Time printTime, ns3::Ptr<ns3::OutputStreamWrapper> stream, ns3::Time::Unit unit=::ns3::Time::Unit::S) [member function]
---
>     ## ipv6-routing-helper.h (module 'internet'): static void ns3::Ipv6RoutingHelper::PrintRoutingTableAllAt(ns3::Time printTime, ns3::Ptr<ns3::OutputStreamWrapper> stream) [member function]
4543c3649
<                    [param('ns3::Time', 'printTime'), param('ns3::Ptr< ns3::OutputStreamWrapper >', 'stream'), param('ns3::Time::Unit', 'unit', default_value='::ns3::Time::Unit::S')], 
---
>                    [param('ns3::Time', 'printTime'), param('ns3::Ptr< ns3::OutputStreamWrapper >', 'stream')], 
4545c3651
<     ## ipv6-routing-helper.h (module 'internet'): static void ns3::Ipv6RoutingHelper::PrintRoutingTableAllEvery(ns3::Time printInterval, ns3::Ptr<ns3::OutputStreamWrapper> stream, ns3::Time::Unit unit=::ns3::Time::Unit::S) [member function]
---
>     ## ipv6-routing-helper.h (module 'internet'): static void ns3::Ipv6RoutingHelper::PrintRoutingTableAllEvery(ns3::Time printInterval, ns3::Ptr<ns3::OutputStreamWrapper> stream) [member function]
4548c3654
<                    [param('ns3::Time', 'printInterval'), param('ns3::Ptr< ns3::OutputStreamWrapper >', 'stream'), param('ns3::Time::Unit', 'unit', default_value='::ns3::Time::Unit::S')], 
---
>                    [param('ns3::Time', 'printInterval'), param('ns3::Ptr< ns3::OutputStreamWrapper >', 'stream')], 
4550c3656
<     ## ipv6-routing-helper.h (module 'internet'): static void ns3::Ipv6RoutingHelper::PrintRoutingTableAt(ns3::Time printTime, ns3::Ptr<ns3::Node> node, ns3::Ptr<ns3::OutputStreamWrapper> stream, ns3::Time::Unit unit=::ns3::Time::Unit::S) [member function]
---
>     ## ipv6-routing-helper.h (module 'internet'): static void ns3::Ipv6RoutingHelper::PrintRoutingTableAt(ns3::Time printTime, ns3::Ptr<ns3::Node> node, ns3::Ptr<ns3::OutputStreamWrapper> stream) [member function]
4553c3659
<                    [param('ns3::Time', 'printTime'), param('ns3::Ptr< ns3::Node >', 'node'), param('ns3::Ptr< ns3::OutputStreamWrapper >', 'stream'), param('ns3::Time::Unit', 'unit', default_value='::ns3::Time::Unit::S')], 
---
>                    [param('ns3::Time', 'printTime'), param('ns3::Ptr< ns3::Node >', 'node'), param('ns3::Ptr< ns3::OutputStreamWrapper >', 'stream')], 
4555c3661
<     ## ipv6-routing-helper.h (module 'internet'): static void ns3::Ipv6RoutingHelper::PrintRoutingTableEvery(ns3::Time printInterval, ns3::Ptr<ns3::Node> node, ns3::Ptr<ns3::OutputStreamWrapper> stream, ns3::Time::Unit unit=::ns3::Time::Unit::S) [member function]
---
>     ## ipv6-routing-helper.h (module 'internet'): static void ns3::Ipv6RoutingHelper::PrintRoutingTableEvery(ns3::Time printInterval, ns3::Ptr<ns3::Node> node, ns3::Ptr<ns3::OutputStreamWrapper> stream) [member function]
4558c3664
<                    [param('ns3::Time', 'printInterval'), param('ns3::Ptr< ns3::Node >', 'node'), param('ns3::Ptr< ns3::OutputStreamWrapper >', 'stream'), param('ns3::Time::Unit', 'unit', default_value='::ns3::Time::Unit::S')], 
---
>                    [param('ns3::Time', 'printInterval'), param('ns3::Ptr< ns3::Node >', 'node'), param('ns3::Ptr< ns3::OutputStreamWrapper >', 'stream')], 
4566c3672
<     ## ipv6-routing-table-entry.h (module 'internet'): ns3::Ipv6RoutingTableEntry::Ipv6RoutingTableEntry(ns3::Ipv6RoutingTableEntry const & route) [constructor]
---
>     ## ipv6-routing-table-entry.h (module 'internet'): ns3::Ipv6RoutingTableEntry::Ipv6RoutingTableEntry(ns3::Ipv6RoutingTableEntry const & route) [copy constructor]
4659c3765
<     ## ipv6-static-routing-helper.h (module 'internet'): ns3::Ipv6StaticRoutingHelper::Ipv6StaticRoutingHelper(ns3::Ipv6StaticRoutingHelper const & arg0) [constructor]
---
>     ## ipv6-static-routing-helper.h (module 'internet'): ns3::Ipv6StaticRoutingHelper::Ipv6StaticRoutingHelper(ns3::Ipv6StaticRoutingHelper const & arg0) [copy constructor]
4695d3800
<     cls.add_binary_comparison_operator('==')
4699c3804,3805
<     ## mac48-address.h (module 'network'): ns3::Mac48Address::Mac48Address(ns3::Mac48Address const & arg0) [constructor]
---
>     cls.add_binary_comparison_operator('==')
>     ## mac48-address.h (module 'network'): ns3::Mac48Address::Mac48Address(ns3::Mac48Address const & arg0) [copy constructor]
4766,4807d3871
< def register_Ns3Mac8Address_methods(root_module, cls):
<     cls.add_binary_comparison_operator('<')
<     cls.add_binary_comparison_operator('==')
<     cls.add_binary_comparison_operator('!=')
<     cls.add_output_stream_operator()
<     ## mac8-address.h (module 'network'): ns3::Mac8Address::Mac8Address(ns3::Mac8Address const & arg0) [constructor]
<     cls.add_constructor([param('ns3::Mac8Address const &', 'arg0')])
<     ## mac8-address.h (module 'network'): ns3::Mac8Address::Mac8Address() [constructor]
<     cls.add_constructor([])
<     ## mac8-address.h (module 'network'): ns3::Mac8Address::Mac8Address(uint8_t addr) [constructor]
<     cls.add_constructor([param('uint8_t', 'addr')])
<     ## mac8-address.h (module 'network'): static ns3::Mac8Address ns3::Mac8Address::Allocate() [member function]
<     cls.add_method('Allocate', 
<                    'ns3::Mac8Address', 
<                    [], 
<                    is_static=True)
<     ## mac8-address.h (module 'network'): static ns3::Mac8Address ns3::Mac8Address::ConvertFrom(ns3::Address const & address) [member function]
<     cls.add_method('ConvertFrom', 
<                    'ns3::Mac8Address', 
<                    [param('ns3::Address const &', 'address')], 
<                    is_static=True)
<     ## mac8-address.h (module 'network'): void ns3::Mac8Address::CopyFrom(uint8_t const * pBuffer) [member function]
<     cls.add_method('CopyFrom', 
<                    'void', 
<                    [param('uint8_t const *', 'pBuffer')])
<     ## mac8-address.h (module 'network'): void ns3::Mac8Address::CopyTo(uint8_t * pBuffer) const [member function]
<     cls.add_method('CopyTo', 
<                    'void', 
<                    [param('uint8_t *', 'pBuffer')], 
<                    is_const=True)
<     ## mac8-address.h (module 'network'): static ns3::Mac8Address ns3::Mac8Address::GetBroadcast() [member function]
<     cls.add_method('GetBroadcast', 
<                    'ns3::Mac8Address', 
<                    [], 
<                    is_static=True)
<     ## mac8-address.h (module 'network'): static bool ns3::Mac8Address::IsMatchingType(ns3::Address const & address) [member function]
<     cls.add_method('IsMatchingType', 
<                    'bool', 
<                    [param('ns3::Address const &', 'address')], 
<                    is_static=True)
<     return
< 
4809c3873
<     ## net-device-container.h (module 'network'): ns3::NetDeviceContainer::NetDeviceContainer(ns3::NetDeviceContainer const & arg0) [constructor]
---
>     ## net-device-container.h (module 'network'): ns3::NetDeviceContainer::NetDeviceContainer(ns3::NetDeviceContainer const & arg0) [copy constructor]
4831c3895
<     ## net-device-container.h (module 'network'): ns3::NetDeviceContainer::Iterator ns3::NetDeviceContainer::Begin() const [member function]
---
>     ## net-device-container.h (module 'network'): __gnu_cxx::__normal_iterator<const ns3::Ptr<ns3::NetDevice>*,std::vector<ns3::Ptr<ns3::NetDevice>, std::allocator<ns3::Ptr<ns3::NetDevice> > > > ns3::NetDeviceContainer::Begin() const [member function]
4833c3897
<                    'ns3::NetDeviceContainer::Iterator', 
---
>                    '__gnu_cxx::__normal_iterator< ns3::Ptr< ns3::NetDevice > const, std::vector< ns3::Ptr< ns3::NetDevice > > >', 
4836c3900
<     ## net-device-container.h (module 'network'): ns3::NetDeviceContainer::Iterator ns3::NetDeviceContainer::End() const [member function]
---
>     ## net-device-container.h (module 'network'): __gnu_cxx::__normal_iterator<const ns3::Ptr<ns3::NetDevice>*,std::vector<ns3::Ptr<ns3::NetDevice>, std::allocator<ns3::Ptr<ns3::NetDevice> > > > ns3::NetDeviceContainer::End() const [member function]
4838c3902
<                    'ns3::NetDeviceContainer::Iterator', 
---
>                    '__gnu_cxx::__normal_iterator< ns3::Ptr< ns3::NetDevice > const, std::vector< ns3::Ptr< ns3::NetDevice > > >', 
4854c3918
<     ## node-container.h (module 'network'): ns3::NodeContainer::NodeContainer(ns3::NodeContainer const & arg0) [constructor]
---
>     ## node-container.h (module 'network'): ns3::NodeContainer::NodeContainer(ns3::NodeContainer const & arg0) [copy constructor]
4882c3946
<     ## node-container.h (module 'network'): ns3::NodeContainer::Iterator ns3::NodeContainer::Begin() const [member function]
---
>     ## node-container.h (module 'network'): __gnu_cxx::__normal_iterator<const ns3::Ptr<ns3::Node>*,std::vector<ns3::Ptr<ns3::Node>, std::allocator<ns3::Ptr<ns3::Node> > > > ns3::NodeContainer::Begin() const [member function]
4884c3948
<                    'ns3::NodeContainer::Iterator', 
---
>                    '__gnu_cxx::__normal_iterator< ns3::Ptr< ns3::Node > const, std::vector< ns3::Ptr< ns3::Node > > >', 
4887,4891d3950
<     ## node-container.h (module 'network'): bool ns3::NodeContainer::Contains(uint32_t id) const [member function]
<     cls.add_method('Contains', 
<                    'bool', 
<                    [param('uint32_t', 'id')], 
<                    is_const=True)
4900c3959
<     ## node-container.h (module 'network'): ns3::NodeContainer::Iterator ns3::NodeContainer::End() const [member function]
---
>     ## node-container.h (module 'network'): __gnu_cxx::__normal_iterator<const ns3::Ptr<ns3::Node>*,std::vector<ns3::Ptr<ns3::Node>, std::allocator<ns3::Ptr<ns3::Node> > > > ns3::NodeContainer::End() const [member function]
4902c3961
<                    'ns3::NodeContainer::Iterator', 
---
>                    '__gnu_cxx::__normal_iterator< ns3::Ptr< ns3::Node > const, std::vector< ns3::Ptr< ns3::Node > > >', 
4925c3984
<     ## object-base.h (module 'core'): ns3::ObjectBase::ObjectBase(ns3::ObjectBase const & arg0) [constructor]
---
>     ## object-base.h (module 'core'): ns3::ObjectBase::ObjectBase(ns3::ObjectBase const & arg0) [copy constructor]
4941c4000
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
4980c4039
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
4986c4045
<     ## object.h (module 'core'): ns3::ObjectDeleter::ObjectDeleter(ns3::ObjectDeleter const & arg0) [constructor]
---
>     ## object.h (module 'core'): ns3::ObjectDeleter::ObjectDeleter(ns3::ObjectDeleter const & arg0) [copy constructor]
4997c4056
<     ## object-factory.h (module 'core'): ns3::ObjectFactory::ObjectFactory(ns3::ObjectFactory const & arg0) [constructor]
---
>     ## object-factory.h (module 'core'): ns3::ObjectFactory::ObjectFactory(ns3::ObjectFactory const & arg0) [copy constructor]
5013,5017d4071
<     ## object-factory.h (module 'core'): bool ns3::ObjectFactory::IsTypeIdSet() const [member function]
<     cls.add_method('IsTypeIdSet', 
<                    'bool', 
<                    [], 
<                    is_const=True)
5037c4091
<     ## ipv6-extension-header.h (module 'internet'): ns3::OptionField::OptionField(ns3::OptionField const & arg0) [constructor]
---
>     ## ipv6-extension-header.h (module 'internet'): ns3::OptionField::OptionField(ns3::OptionField const & arg0) [copy constructor]
5072c4126
<     ## packet-metadata.h (module 'network'): ns3::PacketMetadata::PacketMetadata(ns3::PacketMetadata const & o) [constructor]
---
>     ## packet-metadata.h (module 'network'): ns3::PacketMetadata::PacketMetadata(ns3::PacketMetadata const & o) [copy constructor]
5150c4204
<     ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item::Item(ns3::PacketMetadata::Item const & arg0) [constructor]
---
>     ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item::Item(ns3::PacketMetadata::Item const & arg0) [copy constructor]
5164,5165d4217
<     ## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item::type [variable]
<     cls.add_instance_attribute('type', 'ns3::PacketMetadata::Item::ItemType', is_const=False)
5169c4221
<     ## packet-metadata.h (module 'network'): ns3::PacketMetadata::ItemIterator::ItemIterator(ns3::PacketMetadata::ItemIterator const & arg0) [constructor]
---
>     ## packet-metadata.h (module 'network'): ns3::PacketMetadata::ItemIterator::ItemIterator(ns3::PacketMetadata::ItemIterator const & arg0) [copy constructor]
5185c4237
<     ## packet.h (module 'network'): ns3::PacketTagIterator::PacketTagIterator(ns3::PacketTagIterator const & arg0) [constructor]
---
>     ## packet.h (module 'network'): ns3::PacketTagIterator::PacketTagIterator(ns3::PacketTagIterator const & arg0) [copy constructor]
5199c4251
<     ## packet.h (module 'network'): ns3::PacketTagIterator::Item::Item(ns3::PacketTagIterator::Item const & arg0) [constructor]
---
>     ## packet.h (module 'network'): ns3::PacketTagIterator::Item::Item(ns3::PacketTagIterator::Item const & arg0) [copy constructor]
5216c4268
<     ## packet-tag-list.h (module 'network'): ns3::PacketTagList::PacketTagList(ns3::PacketTagList const & o) [constructor]
---
>     ## packet-tag-list.h (module 'network'): ns3::PacketTagList::PacketTagList(ns3::PacketTagList const & o) [copy constructor]
5250c4302
<     ## packet-tag-list.h (module 'network'): ns3::PacketTagList::TagData::TagData(ns3::PacketTagList::TagData const & arg0) [constructor]
---
>     ## packet-tag-list.h (module 'network'): ns3::PacketTagList::TagData::TagData(ns3::PacketTagList::TagData const & arg0) [copy constructor]
5255c4307
<     cls.add_instance_attribute('data', 'uint8_t [ 1 ]', is_const=False)
---
>     cls.add_instance_attribute('data', 'uint8_t [ 21 ]', is_const=False)
5258,5259d4309
<     ## packet-tag-list.h (module 'network'): ns3::PacketTagList::TagData::size [variable]
<     cls.add_instance_attribute('size', 'uint32_t', is_const=False)
5330c4380
<     ## pcap-file.h (module 'network'): void ns3::PcapFile::Open(std::string const & filename, std::ios_base::openmode mode) [member function]
---
>     ## pcap-file.h (module 'network'): void ns3::PcapFile::Open(std::string const & filename, std::_Ios_Openmode mode) [member function]
5333c4383
<                    [param('std::string const &', 'filename'), param('std::ios_base::openmode', 'mode')])
---
>                    [param('std::string const &', 'filename'), param('std::_Ios_Openmode', 'mode')])
5342c4392
<     ## pcap-file.h (module 'network'): void ns3::PcapFile::Write(uint32_t tsSec, uint32_t tsUsec, ns3::Ptr<const ns3::Packet> p) [member function]
---
>     ## pcap-file.h (module 'network'): void ns3::PcapFile::Write(uint32_t tsSec, uint32_t tsUsec, ns3::Ptr<ns3::Packet const> p) [member function]
5346c4396
<     ## pcap-file.h (module 'network'): void ns3::PcapFile::Write(uint32_t tsSec, uint32_t tsUsec, ns3::Header const & header, ns3::Ptr<const ns3::Packet> p) [member function]
---
>     ## pcap-file.h (module 'network'): void ns3::PcapFile::Write(uint32_t tsSec, uint32_t tsUsec, ns3::Header const & header, ns3::Ptr<ns3::Packet const> p) [member function]
5357c4407
<     ## trace-helper.h (module 'network'): ns3::PcapHelper::PcapHelper(ns3::PcapHelper const & arg0) [constructor]
---
>     ## trace-helper.h (module 'network'): ns3::PcapHelper::PcapHelper(ns3::PcapHelper const & arg0) [copy constructor]
5361c4411
<     ## trace-helper.h (module 'network'): ns3::Ptr<ns3::PcapFileWrapper> ns3::PcapHelper::CreateFile(std::string filename, std::ios_base::openmode filemode, ns3::PcapHelper::DataLinkType dataLinkType, uint32_t snapLen=std::numeric_limits<unsigned int>::max(), int32_t tzCorrection=0) [member function]
---
>     ## trace-helper.h (module 'network'): ns3::Ptr<ns3::PcapFileWrapper> ns3::PcapHelper::CreateFile(std::string filename, std::_Ios_Openmode filemode, ns3::PcapHelper::DataLinkType dataLinkType, uint32_t snapLen=std::numeric_limits<unsigned int>::max(), int32_t tzCorrection=0) [member function]
5364c4414
<                    [param('std::string', 'filename'), param('std::ios_base::openmode', 'filemode'), param('ns3::PcapHelper::DataLinkType', 'dataLinkType'), param('uint32_t', 'snapLen', default_value='std::numeric_limits<unsigned int>::max()'), param('int32_t', 'tzCorrection', default_value='0')])
---
>                    [param('std::string', 'filename'), param('std::_Ios_Openmode', 'filemode'), param('ns3::PcapHelper::DataLinkType', 'dataLinkType'), param('uint32_t', 'snapLen', default_value='std::numeric_limits<unsigned int>::max()'), param('int32_t', 'tzCorrection', default_value='0')])
5376c4426
<     ## trace-helper.h (module 'network'): ns3::PcapHelperForDevice::PcapHelperForDevice(ns3::PcapHelperForDevice const & arg0) [constructor]
---
>     ## trace-helper.h (module 'network'): ns3::PcapHelperForDevice::PcapHelperForDevice(ns3::PcapHelperForDevice const & arg0) [copy constructor]
5408c4458
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
5412c4462
<     ## internet-trace-helper.h (module 'internet'): ns3::PcapHelperForIpv4::PcapHelperForIpv4(ns3::PcapHelperForIpv4 const & arg0) [constructor]
---
>     ## internet-trace-helper.h (module 'internet'): ns3::PcapHelperForIpv4::PcapHelperForIpv4(ns3::PcapHelperForIpv4 const & arg0) [copy constructor]
5444c4494
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
5448c4498
<     ## internet-trace-helper.h (module 'internet'): ns3::PcapHelperForIpv6::PcapHelperForIpv6(ns3::PcapHelperForIpv6 const & arg0) [constructor]
---
>     ## internet-trace-helper.h (module 'internet'): ns3::PcapHelperForIpv6::PcapHelperForIpv6(ns3::PcapHelperForIpv6 const & arg0) [copy constructor]
5480c4530
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
5486,5487c4536,4537
<     ## rip-helper.h (module 'internet'): ns3::RipHelper::RipHelper(ns3::RipHelper const & o) [constructor]
<     cls.add_constructor([param('ns3::RipHelper const &', 'o')])
---
>     ## rip-helper.h (module 'internet'): ns3::RipHelper::RipHelper(ns3::RipHelper const & arg0) [copy constructor]
>     cls.add_constructor([param('ns3::RipHelper const &', 'arg0')])
5523,5524c4573,4574
<     ## ripng-helper.h (module 'internet'): ns3::RipNgHelper::RipNgHelper(ns3::RipNgHelper const & o) [constructor]
<     cls.add_constructor([param('ns3::RipNgHelper const &', 'o')])
---
>     ## ripng-helper.h (module 'internet'): ns3::RipNgHelper::RipNgHelper(ns3::RipNgHelper const & arg0) [copy constructor]
>     cls.add_constructor([param('ns3::RipNgHelper const &', 'arg0')])
5559c4609
<     ## ripng.h (module 'internet'): ns3::RipNgRoutingTableEntry::RipNgRoutingTableEntry(ns3::RipNgRoutingTableEntry const & arg0) [constructor]
---
>     ## ripng.h (module 'internet'): ns3::RipNgRoutingTableEntry::RipNgRoutingTableEntry(ns3::RipNgRoutingTableEntry const & arg0) [copy constructor]
5607c4657
<     ## rip.h (module 'internet'): ns3::RipRoutingTableEntry::RipRoutingTableEntry(ns3::RipRoutingTableEntry const & arg0) [constructor]
---
>     ## rip.h (module 'internet'): ns3::RipRoutingTableEntry::RipRoutingTableEntry(ns3::RipRoutingTableEntry const & arg0) [copy constructor]
5656c4706
<     ## tcp-socket-base.h (module 'internet'): ns3::RttHistory::RttHistory(ns3::RttHistory const & h) [constructor]
---
>     ## tcp-socket-base.h (module 'internet'): ns3::RttHistory::RttHistory(ns3::RttHistory const & h) [copy constructor]
5713c4763
<     ## global-route-manager-impl.h (module 'internet'): void ns3::SPFVertex::SetRootExitDirection(ns3::SPFVertex::NodeExit_t exit) [member function]
---
>     ## global-route-manager-impl.h (module 'internet'): void ns3::SPFVertex::SetRootExitDirection(std::pair<ns3::Ipv4Address,int> exit) [member function]
5717c4767
<     ## global-route-manager-impl.h (module 'internet'): ns3::SPFVertex::NodeExit_t ns3::SPFVertex::GetRootExitDirection(uint32_t i) const [member function]
---
>     ## global-route-manager-impl.h (module 'internet'): std::pair<ns3::Ipv4Address,int> ns3::SPFVertex::GetRootExitDirection(uint32_t i) const [member function]
5719c4769
<                    'ns3::SPFVertex::NodeExit_t', 
---
>                    'std::pair< ns3::Ipv4Address, int >', 
5722c4772
<     ## global-route-manager-impl.h (module 'internet'): ns3::SPFVertex::NodeExit_t ns3::SPFVertex::GetRootExitDirection() const [member function]
---
>     ## global-route-manager-impl.h (module 'internet'): std::pair<ns3::Ipv4Address,int> ns3::SPFVertex::GetRootExitDirection() const [member function]
5724c4774
<                    'ns3::SPFVertex::NodeExit_t', 
---
>                    'std::pair< ns3::Ipv4Address, int >', 
5784,5788c4834,4838
<     cls.add_binary_numeric_operator('+', root_module['ns3::SequenceNumber32'], root_module['ns3::SequenceNumber32'], param('ns3::SequenceNumber< unsigned int, int > const &', 'right'))
<     cls.add_binary_numeric_operator('+', root_module['ns3::SequenceNumber32'], root_module['ns3::SequenceNumber32'], param('int', 'right'))
<     cls.add_inplace_numeric_operator('+=', param('int', 'right'))
<     cls.add_binary_numeric_operator('-', root_module['ns3::SequenceNumber32'], root_module['ns3::SequenceNumber32'], param('int', 'right'))
<     cls.add_inplace_numeric_operator('-=', param('int', 'right'))
---
>     cls.add_binary_numeric_operator('+', root_module['ns3::SequenceNumber32'], root_module['ns3::SequenceNumber32'], param('ns3::SequenceNumber< unsigned int, int > const &', u'right'))
>     cls.add_binary_numeric_operator('+', root_module['ns3::SequenceNumber32'], root_module['ns3::SequenceNumber32'], param('int', u'right'))
>     cls.add_inplace_numeric_operator('+=', param('int', u'right'))
>     cls.add_binary_numeric_operator('-', root_module['ns3::SequenceNumber32'], root_module['ns3::SequenceNumber32'], param('int', u'right'))
>     cls.add_inplace_numeric_operator('-=', param('int', u'right'))
5798c4848
<     ## sequence-number.h (module 'network'): ns3::SequenceNumber<unsigned int, int>::SequenceNumber(ns3::SequenceNumber<unsigned int, int> const & value) [constructor]
---
>     ## sequence-number.h (module 'network'): ns3::SequenceNumber<unsigned int, int>::SequenceNumber(ns3::SequenceNumber<unsigned int, int> const & value) [copy constructor]
5810c4860
<     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Object, ns3::ObjectBase, ns3::ObjectDeleter>::SimpleRefCount(ns3::SimpleRefCount<ns3::Object, ns3::ObjectBase, ns3::ObjectDeleter> const & o) [constructor]
---
>     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Object, ns3::ObjectBase, ns3::ObjectDeleter>::SimpleRefCount(ns3::SimpleRefCount<ns3::Object, ns3::ObjectBase, ns3::ObjectDeleter> const & o) [copy constructor]
5811a4862,4866
>     ## simple-ref-count.h (module 'core'): static void ns3::SimpleRefCount<ns3::Object, ns3::ObjectBase, ns3::ObjectDeleter>::Cleanup() [member function]
>     cls.add_method('Cleanup', 
>                    'void', 
>                    [], 
>                    is_static=True)
5815c4870
<     ## simulator.h (module 'core'): ns3::Simulator::Simulator(ns3::Simulator const & arg0) [constructor]
---
>     ## simulator.h (module 'core'): ns3::Simulator::Simulator(ns3::Simulator const & arg0) [copy constructor]
5837,5841d4891
<     ## simulator.h (module 'core'): static uint64_t ns3::Simulator::GetEventCount() [member function]
<     cls.add_method('GetEventCount', 
<                    'uint64_t', 
<                    [], 
<                    is_static=True)
5902c4952
<     ## tag.h (module 'network'): ns3::Tag::Tag(ns3::Tag const & arg0) [constructor]
---
>     ## tag.h (module 'network'): ns3::Tag::Tag(ns3::Tag const & arg0) [copy constructor]
5908c4958
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
5913c4963
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
5923c4973
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
5928c4978
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
5932c4982
<     ## tag-buffer.h (module 'network'): ns3::TagBuffer::TagBuffer(ns3::TagBuffer const & arg0) [constructor]
---
>     ## tag-buffer.h (module 'network'): ns3::TagBuffer::TagBuffer(ns3::TagBuffer const & arg0) [copy constructor]
5976c5026
<     ## tag-buffer.h (module 'network'): void ns3::TagBuffer::WriteU16(uint16_t v) [member function]
---
>     ## tag-buffer.h (module 'network'): void ns3::TagBuffer::WriteU16(uint16_t data) [member function]
5979,5980c5029,5030
<                    [param('uint16_t', 'v')])
<     ## tag-buffer.h (module 'network'): void ns3::TagBuffer::WriteU32(uint32_t v) [member function]
---
>                    [param('uint16_t', 'data')])
>     ## tag-buffer.h (module 'network'): void ns3::TagBuffer::WriteU32(uint32_t data) [member function]
5983c5033
<                    [param('uint32_t', 'v')])
---
>                    [param('uint32_t', 'data')])
5994,6055d5043
< def register_Ns3TcpTxItem_methods(root_module, cls):
<     cls.add_output_stream_operator()
<     ## tcp-tx-item.h (module 'internet'): ns3::TcpTxItem::TcpTxItem() [constructor]
<     cls.add_constructor([])
<     ## tcp-tx-item.h (module 'internet'): ns3::TcpTxItem::TcpTxItem(ns3::TcpTxItem const & arg0) [constructor]
<     cls.add_constructor([param('ns3::TcpTxItem const &', 'arg0')])
<     ## tcp-tx-item.h (module 'internet'): ns3::Time const & ns3::TcpTxItem::GetLastSent() const [member function]
<     cls.add_method('GetLastSent', 
<                    'ns3::Time const &', 
<                    [], 
<                    is_const=True)
<     ## tcp-tx-item.h (module 'internet'): ns3::Ptr<const ns3::Packet> ns3::TcpTxItem::GetPacket() const [member function]
<     cls.add_method('GetPacket', 
<                    'ns3::Ptr< ns3::Packet const >', 
<                    [], 
<                    is_const=True)
<     ## tcp-tx-item.h (module 'internet'): ns3::Ptr<ns3::Packet> ns3::TcpTxItem::GetPacketCopy() const [member function]
<     cls.add_method('GetPacketCopy', 
<                    'ns3::Ptr< ns3::Packet >', 
<                    [], 
<                    is_const=True)
<     ## tcp-tx-item.h (module 'internet'): ns3::TcpTxItem::RateInformation & ns3::TcpTxItem::GetRateInformation() [member function]
<     cls.add_method('GetRateInformation', 
<                    'ns3::TcpTxItem::RateInformation &', 
<                    [])
<     ## tcp-tx-item.h (module 'internet'): uint32_t ns3::TcpTxItem::GetSeqSize() const [member function]
<     cls.add_method('GetSeqSize', 
<                    'uint32_t', 
<                    [], 
<                    is_const=True)
<     ## tcp-tx-item.h (module 'internet'): bool ns3::TcpTxItem::IsRetrans() const [member function]
<     cls.add_method('IsRetrans', 
<                    'bool', 
<                    [], 
<                    is_const=True)
<     ## tcp-tx-item.h (module 'internet'): bool ns3::TcpTxItem::IsSacked() const [member function]
<     cls.add_method('IsSacked', 
<                    'bool', 
<                    [], 
<                    is_const=True)
<     ## tcp-tx-item.h (module 'internet'): void ns3::TcpTxItem::Print(std::ostream & os) const [member function]
<     cls.add_method('Print', 
<                    'void', 
<                    [param('std::ostream &', 'os')], 
<                    is_const=True)
<     return
< 
< def register_Ns3TcpTxItemRateInformation_methods(root_module, cls):
<     ## tcp-tx-item.h (module 'internet'): ns3::TcpTxItem::RateInformation::RateInformation() [constructor]
<     cls.add_constructor([])
<     ## tcp-tx-item.h (module 'internet'): ns3::TcpTxItem::RateInformation::RateInformation(ns3::TcpTxItem::RateInformation const & arg0) [constructor]
<     cls.add_constructor([param('ns3::TcpTxItem::RateInformation const &', 'arg0')])
<     ## tcp-tx-item.h (module 'internet'): ns3::TcpTxItem::RateInformation::m_delivered [variable]
<     cls.add_instance_attribute('m_delivered', 'uint64_t', is_const=False)
<     ## tcp-tx-item.h (module 'internet'): ns3::TcpTxItem::RateInformation::m_deliveredTime [variable]
<     cls.add_instance_attribute('m_deliveredTime', 'ns3::Time', is_const=False)
<     ## tcp-tx-item.h (module 'internet'): ns3::TcpTxItem::RateInformation::m_firstSent [variable]
<     cls.add_instance_attribute('m_firstSent', 'ns3::Time', is_const=False)
<     ## tcp-tx-item.h (module 'internet'): ns3::TcpTxItem::RateInformation::m_isAppLimited [variable]
<     cls.add_instance_attribute('m_isAppLimited', 'bool', is_const=False)
<     return
< 
6058c5046
<     ## nstime.h (module 'core'): ns3::TimeWithUnit::TimeWithUnit(ns3::TimeWithUnit const & arg0) [constructor]
---
>     ## nstime.h (module 'core'): ns3::TimeWithUnit::TimeWithUnit(ns3::TimeWithUnit const & arg0) [copy constructor]
6065c5053
<     ## timer.h (module 'core'): ns3::Timer::Timer(ns3::Timer const & arg0) [constructor]
---
>     ## timer.h (module 'core'): ns3::Timer::Timer(ns3::Timer const & arg0) [copy constructor]
6134c5122
<     ## timer-impl.h (module 'core'): ns3::TimerImpl::TimerImpl(ns3::TimerImpl const & arg0) [constructor]
---
>     ## timer-impl.h (module 'core'): ns3::TimerImpl::TimerImpl(ns3::TimerImpl const & arg0) [copy constructor]
6140c5128
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
6145c5133
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
6151c5139
<     ## traced-value.h (module 'core'): ns3::TracedValue<double>::TracedValue(ns3::TracedValue<double> const & o) [constructor]
---
>     ## traced-value.h (module 'core'): ns3::TracedValue<double>::TracedValue(ns3::TracedValue<double> const & o) [copy constructor]
6155c5143
<     ## traced-value.h (module 'core'): void ns3::TracedValue<double>::Connect(ns3::CallbackBase const & cb, std::string path) [member function]
---
>     ## traced-value.h (module 'core'): void ns3::TracedValue<double>::Connect(ns3::CallbackBase const & cb, std::basic_string<char,std::char_traits<char>,std::allocator<char> > path) [member function]
6163c5151
<     ## traced-value.h (module 'core'): void ns3::TracedValue<double>::Disconnect(ns3::CallbackBase const & cb, std::string path) [member function]
---
>     ## traced-value.h (module 'core'): void ns3::TracedValue<double>::Disconnect(ns3::CallbackBase const & cb, std::basic_string<char,std::char_traits<char>,std::allocator<char> > path) [member function]
6185c5173
<     ## traced-value.h (module 'core'): ns3::TracedValue<ns3::SequenceNumber<unsigned int, int> >::TracedValue(ns3::TracedValue<ns3::SequenceNumber<unsigned int, int> > const & o) [constructor]
---
>     ## traced-value.h (module 'core'): ns3::TracedValue<ns3::SequenceNumber<unsigned int, int> >::TracedValue(ns3::TracedValue<ns3::SequenceNumber<unsigned int, int> > const & o) [copy constructor]
6189,6195c5177
<     ## traced-value.h (module 'core'): ns3::TracedValue<ns3::SequenceNumber<unsigned int, int> >::TracedValue(ns3::TracedValue<ns3::SequenceNumber<unsigned int, int> > const & other) [constructor]
<     cls.add_constructor([param('ns3::TracedValue< ns3::SequenceNumber< unsigned int, int > > const &', 'other')])
<     ## traced-value.h (module 'core'): ns3::TracedValue<ns3::SequenceNumber<unsigned int, int> >::TracedValue(ns3::TracedValue<ns3::SequenceNumber<unsigned int, int> > const & other) [constructor]
<     cls.add_constructor([param('ns3::TracedValue< ns3::SequenceNumber< unsigned int, int > > const &', 'other')])
<     ## traced-value.h (module 'core'): ns3::TracedValue<ns3::SequenceNumber<unsigned int, int> >::TracedValue(int const & other) [constructor]
<     cls.add_constructor([param('int const &', 'other')])
<     ## traced-value.h (module 'core'): void ns3::TracedValue<ns3::SequenceNumber<unsigned int, int> >::Connect(ns3::CallbackBase const & cb, std::string path) [member function]
---
>     ## traced-value.h (module 'core'): void ns3::TracedValue<ns3::SequenceNumber<unsigned int, int> >::Connect(ns3::CallbackBase const & cb, std::basic_string<char,std::char_traits<char>,std::allocator<char> > path) [member function]
6203c5185
<     ## traced-value.h (module 'core'): void ns3::TracedValue<ns3::SequenceNumber<unsigned int, int> >::Disconnect(ns3::CallbackBase const & cb, std::string path) [member function]
---
>     ## traced-value.h (module 'core'): void ns3::TracedValue<ns3::SequenceNumber<unsigned int, int> >::Disconnect(ns3::CallbackBase const & cb, std::basic_string<char,std::char_traits<char>,std::allocator<char> > path) [member function]
6225c5207
<     ## traced-value.h (module 'core'): ns3::TracedValue<ns3::TcpSocket::TcpStates_t>::TracedValue(ns3::TracedValue<ns3::TcpSocket::TcpStates_t> const & o) [constructor]
---
>     ## traced-value.h (module 'core'): ns3::TracedValue<ns3::TcpSocket::TcpStates_t>::TracedValue(ns3::TracedValue<ns3::TcpSocket::TcpStates_t> const & o) [copy constructor]
6229,6231c5211
<     ## traced-value.h (module 'core'): ns3::TracedValue<ns3::TcpSocket::TcpStates_t>::TracedValue(ns3::TcpSocket::TcpStates_t const & other) [constructor]
<     cls.add_constructor([param('ns3::TcpSocket::TcpStates_t const &', 'other')])
<     ## traced-value.h (module 'core'): void ns3::TracedValue<ns3::TcpSocket::TcpStates_t>::Connect(ns3::CallbackBase const & cb, std::string path) [member function]
---
>     ## traced-value.h (module 'core'): void ns3::TracedValue<ns3::TcpSocket::TcpStates_t>::Connect(ns3::CallbackBase const & cb, std::basic_string<char,std::char_traits<char>,std::allocator<char> > path) [member function]
6239c5219
<     ## traced-value.h (module 'core'): void ns3::TracedValue<ns3::TcpSocket::TcpStates_t>::Disconnect(ns3::CallbackBase const & cb, std::string path) [member function]
---
>     ## traced-value.h (module 'core'): void ns3::TracedValue<ns3::TcpSocket::TcpStates_t>::Disconnect(ns3::CallbackBase const & cb, std::basic_string<char,std::char_traits<char>,std::allocator<char> > path) [member function]
6258,6293d5237
< def register_Ns3TracedValue__Ns3TcpSocketStateEcnState_t_methods(root_module, cls):
<     ## traced-value.h (module 'core'): ns3::TracedValue<ns3::TcpSocketState::EcnState_t>::TracedValue() [constructor]
<     cls.add_constructor([])
<     ## traced-value.h (module 'core'): ns3::TracedValue<ns3::TcpSocketState::EcnState_t>::TracedValue(ns3::TracedValue<ns3::TcpSocketState::EcnState_t> const & o) [constructor]
<     cls.add_constructor([param('ns3::TracedValue< ns3::TcpSocketState::EcnState_t > const &', 'o')])
<     ## traced-value.h (module 'core'): ns3::TracedValue<ns3::TcpSocketState::EcnState_t>::TracedValue(ns3::TcpSocketState::EcnState_t const & v) [constructor]
<     cls.add_constructor([param('ns3::TcpSocketState::EcnState_t const &', 'v')])
<     ## traced-value.h (module 'core'): ns3::TracedValue<ns3::TcpSocketState::EcnState_t>::TracedValue(ns3::TcpSocketState::EcnState_t const & other) [constructor]
<     cls.add_constructor([param('ns3::TcpSocketState::EcnState_t const &', 'other')])
<     ## traced-value.h (module 'core'): void ns3::TracedValue<ns3::TcpSocketState::EcnState_t>::Connect(ns3::CallbackBase const & cb, std::string path) [member function]
<     cls.add_method('Connect', 
<                    'void', 
<                    [param('ns3::CallbackBase const &', 'cb'), param('std::string', 'path')])
<     ## traced-value.h (module 'core'): void ns3::TracedValue<ns3::TcpSocketState::EcnState_t>::ConnectWithoutContext(ns3::CallbackBase const & cb) [member function]
<     cls.add_method('ConnectWithoutContext', 
<                    'void', 
<                    [param('ns3::CallbackBase const &', 'cb')])
<     ## traced-value.h (module 'core'): void ns3::TracedValue<ns3::TcpSocketState::EcnState_t>::Disconnect(ns3::CallbackBase const & cb, std::string path) [member function]
<     cls.add_method('Disconnect', 
<                    'void', 
<                    [param('ns3::CallbackBase const &', 'cb'), param('std::string', 'path')])
<     ## traced-value.h (module 'core'): void ns3::TracedValue<ns3::TcpSocketState::EcnState_t>::DisconnectWithoutContext(ns3::CallbackBase const & cb) [member function]
<     cls.add_method('DisconnectWithoutContext', 
<                    'void', 
<                    [param('ns3::CallbackBase const &', 'cb')])
<     ## traced-value.h (module 'core'): ns3::TcpSocketState::EcnState_t ns3::TracedValue<ns3::TcpSocketState::EcnState_t>::Get() const [member function]
<     cls.add_method('Get', 
<                    'ns3::TcpSocketState::EcnState_t', 
<                    [], 
<                    is_const=True)
<     ## traced-value.h (module 'core'): void ns3::TracedValue<ns3::TcpSocketState::EcnState_t>::Set(ns3::TcpSocketState::EcnState_t const & v) [member function]
<     cls.add_method('Set', 
<                    'void', 
<                    [param('ns3::TcpSocketState::EcnState_t const &', 'v')])
<     return
< 
6297c5241
<     ## traced-value.h (module 'core'): ns3::TracedValue<ns3::TcpSocketState::TcpCongState_t>::TracedValue(ns3::TracedValue<ns3::TcpSocketState::TcpCongState_t> const & o) [constructor]
---
>     ## traced-value.h (module 'core'): ns3::TracedValue<ns3::TcpSocketState::TcpCongState_t>::TracedValue(ns3::TracedValue<ns3::TcpSocketState::TcpCongState_t> const & o) [copy constructor]
6301,6303c5245
<     ## traced-value.h (module 'core'): ns3::TracedValue<ns3::TcpSocketState::TcpCongState_t>::TracedValue(ns3::TcpSocketState::TcpCongState_t const & other) [constructor]
<     cls.add_constructor([param('ns3::TcpSocketState::TcpCongState_t const &', 'other')])
<     ## traced-value.h (module 'core'): void ns3::TracedValue<ns3::TcpSocketState::TcpCongState_t>::Connect(ns3::CallbackBase const & cb, std::string path) [member function]
---
>     ## traced-value.h (module 'core'): void ns3::TracedValue<ns3::TcpSocketState::TcpCongState_t>::Connect(ns3::CallbackBase const & cb, std::basic_string<char,std::char_traits<char>,std::allocator<char> > path) [member function]
6311c5253
<     ## traced-value.h (module 'core'): void ns3::TracedValue<ns3::TcpSocketState::TcpCongState_t>::Disconnect(ns3::CallbackBase const & cb, std::string path) [member function]
---
>     ## traced-value.h (module 'core'): void ns3::TracedValue<ns3::TcpSocketState::TcpCongState_t>::Disconnect(ns3::CallbackBase const & cb, std::basic_string<char,std::char_traits<char>,std::allocator<char> > path) [member function]
6331c5273
<     cls.add_binary_numeric_operator('/', root_module['ns3::TracedValue< unsigned int >'], root_module['ns3::TracedValue< unsigned int >'], param('unsigned int const &', 'right'))
---
>     cls.add_binary_numeric_operator('/', root_module['ns3::TracedValue< unsigned int >'], root_module['ns3::TracedValue< unsigned int >'], param('uint32_t const &', u'right'))
6334c5276
<     ## traced-value.h (module 'core'): ns3::TracedValue<unsigned int>::TracedValue(ns3::TracedValue<unsigned int> const & o) [constructor]
---
>     ## traced-value.h (module 'core'): ns3::TracedValue<unsigned int>::TracedValue(ns3::TracedValue<unsigned int> const & o) [copy constructor]
6338,6346c5280
<     ## traced-value.h (module 'core'): ns3::TracedValue<unsigned int>::TracedValue(ns3::TracedValue<unsigned int> const & other) [constructor]
<     cls.add_constructor([param('ns3::TracedValue< unsigned int > const &', 'other')])
<     ## traced-value.h (module 'core'): ns3::TracedValue<unsigned int>::TracedValue(int const & other) [constructor]
<     cls.add_constructor([param('int const &', 'other')])
<     ## traced-value.h (module 'core'): ns3::TracedValue<unsigned int>::TracedValue(unsigned int const & other) [constructor]
<     cls.add_constructor([param('unsigned int const &', 'other')])
<     ## traced-value.h (module 'core'): ns3::TracedValue<unsigned int>::TracedValue(ns3::TracedValue<unsigned int> const & other) [constructor]
<     cls.add_constructor([param('ns3::TracedValue< unsigned int > const &', 'other')])
<     ## traced-value.h (module 'core'): void ns3::TracedValue<unsigned int>::Connect(ns3::CallbackBase const & cb, std::string path) [member function]
---
>     ## traced-value.h (module 'core'): void ns3::TracedValue<unsigned int>::Connect(ns3::CallbackBase const & cb, std::basic_string<char,std::char_traits<char>,std::allocator<char> > path) [member function]
6354c5288
<     ## traced-value.h (module 'core'): void ns3::TracedValue<unsigned int>::Disconnect(ns3::CallbackBase const & cb, std::string path) [member function]
---
>     ## traced-value.h (module 'core'): void ns3::TracedValue<unsigned int>::Disconnect(ns3::CallbackBase const & cb, std::basic_string<char,std::char_traits<char>,std::allocator<char> > path) [member function]
6374d5307
<     cls.add_binary_comparison_operator('==')
6376d5308
<     cls.add_output_stream_operator()
6377a5310,5311
>     cls.add_output_stream_operator()
>     cls.add_binary_comparison_operator('==')
6382c5316
<     ## type-id.h (module 'core'): ns3::TypeId::TypeId(ns3::TypeId const & o) [constructor]
---
>     ## type-id.h (module 'core'): ns3::TypeId::TypeId(ns3::TypeId const & o) [copy constructor]
6384c5318
<     ## type-id.h (module 'core'): ns3::TypeId ns3::TypeId::AddAttribute(std::string name, std::string help, ns3::AttributeValue const & initialValue, ns3::Ptr<const ns3::AttributeAccessor> accessor, ns3::Ptr<const ns3::AttributeChecker> checker, ns3::TypeId::SupportLevel supportLevel=::ns3::TypeId::SupportLevel::SUPPORTED, std::string const & supportMsg="") [member function]
---
>     ## type-id.h (module 'core'): ns3::TypeId ns3::TypeId::AddAttribute(std::string name, std::string help, ns3::AttributeValue const & initialValue, ns3::Ptr<ns3::AttributeAccessor const> accessor, ns3::Ptr<ns3::AttributeChecker const> checker, ns3::TypeId::SupportLevel supportLevel=::ns3::TypeId::SUPPORTED, std::string const & supportMsg="") [member function]
6387,6388c5321,5322
<                    [param('std::string', 'name'), param('std::string', 'help'), param('ns3::AttributeValue const &', 'initialValue'), param('ns3::Ptr< ns3::AttributeAccessor const >', 'accessor'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker'), param('ns3::TypeId::SupportLevel', 'supportLevel', default_value='::ns3::TypeId::SupportLevel::SUPPORTED'), param('std::string const &', 'supportMsg', default_value='""')])
<     ## type-id.h (module 'core'): ns3::TypeId ns3::TypeId::AddAttribute(std::string name, std::string help, uint32_t flags, ns3::AttributeValue const & initialValue, ns3::Ptr<const ns3::AttributeAccessor> accessor, ns3::Ptr<const ns3::AttributeChecker> checker, ns3::TypeId::SupportLevel supportLevel=::ns3::TypeId::SupportLevel::SUPPORTED, std::string const & supportMsg="") [member function]
---
>                    [param('std::string', 'name'), param('std::string', 'help'), param('ns3::AttributeValue const &', 'initialValue'), param('ns3::Ptr< ns3::AttributeAccessor const >', 'accessor'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker'), param('ns3::TypeId::SupportLevel', 'supportLevel', default_value='::ns3::TypeId::SUPPORTED'), param('std::string const &', 'supportMsg', default_value='""')])
>     ## type-id.h (module 'core'): ns3::TypeId ns3::TypeId::AddAttribute(std::string name, std::string help, uint32_t flags, ns3::AttributeValue const & initialValue, ns3::Ptr<ns3::AttributeAccessor const> accessor, ns3::Ptr<ns3::AttributeChecker const> checker, ns3::TypeId::SupportLevel supportLevel=::ns3::TypeId::SUPPORTED, std::string const & supportMsg="") [member function]
6391,6392c5325,5326
<                    [param('std::string', 'name'), param('std::string', 'help'), param('uint32_t', 'flags'), param('ns3::AttributeValue const &', 'initialValue'), param('ns3::Ptr< ns3::AttributeAccessor const >', 'accessor'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker'), param('ns3::TypeId::SupportLevel', 'supportLevel', default_value='::ns3::TypeId::SupportLevel::SUPPORTED'), param('std::string const &', 'supportMsg', default_value='""')])
<     ## type-id.h (module 'core'): ns3::TypeId ns3::TypeId::AddTraceSource(std::string name, std::string help, ns3::Ptr<const ns3::TraceSourceAccessor> accessor) [member function]
---
>                    [param('std::string', 'name'), param('std::string', 'help'), param('uint32_t', 'flags'), param('ns3::AttributeValue const &', 'initialValue'), param('ns3::Ptr< ns3::AttributeAccessor const >', 'accessor'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker'), param('ns3::TypeId::SupportLevel', 'supportLevel', default_value='::ns3::TypeId::SUPPORTED'), param('std::string const &', 'supportMsg', default_value='""')])
>     ## type-id.h (module 'core'): ns3::TypeId ns3::TypeId::AddTraceSource(std::string name, std::string help, ns3::Ptr<ns3::TraceSourceAccessor const> accessor) [member function]
6397c5331
<     ## type-id.h (module 'core'): ns3::TypeId ns3::TypeId::AddTraceSource(std::string name, std::string help, ns3::Ptr<const ns3::TraceSourceAccessor> accessor, std::string callback, ns3::TypeId::SupportLevel supportLevel=::ns3::TypeId::SupportLevel::SUPPORTED, std::string const & supportMsg="") [member function]
---
>     ## type-id.h (module 'core'): ns3::TypeId ns3::TypeId::AddTraceSource(std::string name, std::string help, ns3::Ptr<ns3::TraceSourceAccessor const> accessor, std::string callback, ns3::TypeId::SupportLevel supportLevel=::ns3::TypeId::SUPPORTED, std::string const & supportMsg="") [member function]
6400,6401c5334,5335
<                    [param('std::string', 'name'), param('std::string', 'help'), param('ns3::Ptr< ns3::TraceSourceAccessor const >', 'accessor'), param('std::string', 'callback'), param('ns3::TypeId::SupportLevel', 'supportLevel', default_value='::ns3::TypeId::SupportLevel::SUPPORTED'), param('std::string const &', 'supportMsg', default_value='""')])
<     ## type-id.h (module 'core'): ns3::TypeId::AttributeInformation ns3::TypeId::GetAttribute(std::size_t i) const [member function]
---
>                    [param('std::string', 'name'), param('std::string', 'help'), param('ns3::Ptr< ns3::TraceSourceAccessor const >', 'accessor'), param('std::string', 'callback'), param('ns3::TypeId::SupportLevel', 'supportLevel', default_value='::ns3::TypeId::SUPPORTED'), param('std::string const &', 'supportMsg', default_value='""')])
>     ## type-id.h (module 'core'): ns3::TypeId::AttributeInformation ns3::TypeId::GetAttribute(uint32_t i) const [member function]
6404c5338
<                    [param('std::size_t', 'i')], 
---
>                    [param('uint32_t', 'i')], 
6406c5340
<     ## type-id.h (module 'core'): std::string ns3::TypeId::GetAttributeFullName(std::size_t i) const [member function]
---
>     ## type-id.h (module 'core'): std::string ns3::TypeId::GetAttributeFullName(uint32_t i) const [member function]
6409c5343
<                    [param('std::size_t', 'i')], 
---
>                    [param('uint32_t', 'i')], 
6411c5345
<     ## type-id.h (module 'core'): std::size_t ns3::TypeId::GetAttributeN() const [member function]
---
>     ## type-id.h (module 'core'): uint32_t ns3::TypeId::GetAttributeN() const [member function]
6413c5347
<                    'std::size_t', 
---
>                    'uint32_t', 
6416c5350
<     ## type-id.h (module 'core'): ns3::Callback<ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> ns3::TypeId::GetConstructor() const [member function]
---
>     ## type-id.h (module 'core'): ns3::Callback<ns3::ObjectBase*,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> ns3::TypeId::GetConstructor() const [member function]
6426c5360
<     ## type-id.h (module 'core'): ns3::TypeId::hash_t ns3::TypeId::GetHash() const [member function]
---
>     ## type-id.h (module 'core'): uint32_t ns3::TypeId::GetHash() const [member function]
6428c5362
<                    'ns3::TypeId::hash_t', 
---
>                    'uint32_t', 
6441c5375
<     ## type-id.h (module 'core'): static ns3::TypeId ns3::TypeId::GetRegistered(uint16_t i) [member function]
---
>     ## type-id.h (module 'core'): static ns3::TypeId ns3::TypeId::GetRegistered(uint32_t i) [member function]
6444c5378
<                    [param('uint16_t', 'i')], 
---
>                    [param('uint32_t', 'i')], 
6446c5380
<     ## type-id.h (module 'core'): static uint16_t ns3::TypeId::GetRegisteredN() [member function]
---
>     ## type-id.h (module 'core'): static uint32_t ns3::TypeId::GetRegisteredN() [member function]
6448c5382
<                    'uint16_t', 
---
>                    'uint32_t', 
6456c5390
<     ## type-id.h (module 'core'): ns3::TypeId::TraceSourceInformation ns3::TypeId::GetTraceSource(std::size_t i) const [member function]
---
>     ## type-id.h (module 'core'): ns3::TypeId::TraceSourceInformation ns3::TypeId::GetTraceSource(uint32_t i) const [member function]
6459c5393
<                    [param('std::size_t', 'i')], 
---
>                    [param('uint32_t', 'i')], 
6461c5395
<     ## type-id.h (module 'core'): std::size_t ns3::TypeId::GetTraceSourceN() const [member function]
---
>     ## type-id.h (module 'core'): uint32_t ns3::TypeId::GetTraceSourceN() const [member function]
6463c5397
<                    'std::size_t', 
---
>                    'uint32_t', 
6495c5429
<     ## type-id.h (module 'core'): static ns3::TypeId ns3::TypeId::LookupByHash(ns3::TypeId::hash_t hash) [member function]
---
>     ## type-id.h (module 'core'): static ns3::TypeId ns3::TypeId::LookupByHash(uint32_t hash) [member function]
6500c5434
<     ## type-id.h (module 'core'): static bool ns3::TypeId::LookupByHashFailSafe(ns3::TypeId::hash_t hash, ns3::TypeId * tid) [member function]
---
>     ## type-id.h (module 'core'): static bool ns3::TypeId::LookupByHashFailSafe(uint32_t hash, ns3::TypeId * tid) [member function]
6510c5444
<     ## type-id.h (module 'core'): ns3::Ptr<const ns3::TraceSourceAccessor> ns3::TypeId::LookupTraceSourceByName(std::string name) const [member function]
---
>     ## type-id.h (module 'core'): ns3::Ptr<ns3::TraceSourceAccessor const> ns3::TypeId::LookupTraceSourceByName(std::string name) const [member function]
6515c5449
<     ## type-id.h (module 'core'): ns3::Ptr<const ns3::TraceSourceAccessor> ns3::TypeId::LookupTraceSourceByName(std::string name, ns3::TypeId::TraceSourceInformation * info) const [member function]
---
>     ## type-id.h (module 'core'): ns3::Ptr<ns3::TraceSourceAccessor const> ns3::TypeId::LookupTraceSourceByName(std::string name, ns3::TypeId::TraceSourceInformation * info) const [member function]
6525c5459
<     ## type-id.h (module 'core'): bool ns3::TypeId::SetAttributeInitialValue(std::size_t i, ns3::Ptr<const ns3::AttributeValue> initialValue) [member function]
---
>     ## type-id.h (module 'core'): bool ns3::TypeId::SetAttributeInitialValue(uint32_t i, ns3::Ptr<ns3::AttributeValue const> initialValue) [member function]
6528c5462
<                    [param('std::size_t', 'i'), param('ns3::Ptr< ns3::AttributeValue const >', 'initialValue')])
---
>                    [param('uint32_t', 'i'), param('ns3::Ptr< ns3::AttributeValue const >', 'initialValue')])
6550c5484
<     ## type-id.h (module 'core'): ns3::TypeId::AttributeInformation::AttributeInformation(ns3::TypeId::AttributeInformation const & arg0) [constructor]
---
>     ## type-id.h (module 'core'): ns3::TypeId::AttributeInformation::AttributeInformation(ns3::TypeId::AttributeInformation const & arg0) [copy constructor]
6555a5490
>     ## type-id.h (module 'core'): ns3::TypeId::AttributeInformation::flags [variable]
6574c5509
<     ## type-id.h (module 'core'): ns3::TypeId::TraceSourceInformation::TraceSourceInformation(ns3::TypeId::TraceSourceInformation const & arg0) [constructor]
---
>     ## type-id.h (module 'core'): ns3::TypeId::TraceSourceInformation::TraceSourceInformation(ns3::TypeId::TraceSourceInformation const & arg0) [copy constructor]
6593c5528
<     ## empty.h (module 'core'): ns3::empty::empty(ns3::empty const & arg0) [constructor]
---
>     ## empty.h (module 'core'): ns3::empty::empty(ns3::empty const & arg0) [copy constructor]
6598,6603d5532
<     cls.add_binary_numeric_operator('*', root_module['ns3::Time'], root_module['ns3::int64x64_t'], param('ns3::Time const &', 'right'))
<     cls.add_binary_numeric_operator('+', root_module['ns3::int64x64_t'], root_module['ns3::int64x64_t'], param('ns3::int64x64_t const &', 'right'))
<     cls.add_binary_numeric_operator('-', root_module['ns3::int64x64_t'], root_module['ns3::int64x64_t'], param('ns3::int64x64_t const &', 'right'))
<     cls.add_binary_numeric_operator('*', root_module['ns3::int64x64_t'], root_module['ns3::int64x64_t'], param('ns3::int64x64_t const &', 'right'))
<     cls.add_binary_numeric_operator('/', root_module['ns3::int64x64_t'], root_module['ns3::int64x64_t'], param('ns3::int64x64_t const &', 'right'))
<     cls.add_binary_comparison_operator('!=')
6605,6607c5534,5540
<     cls.add_binary_comparison_operator('>=')
<     cls.add_output_stream_operator()
<     cls.add_binary_comparison_operator('==')
---
>     cls.add_binary_comparison_operator('!=')
>     cls.add_inplace_numeric_operator('+=', param('ns3::int64x64_t const &', u'right'))
>     cls.add_binary_numeric_operator('*', root_module['ns3::int64x64_t'], root_module['ns3::int64x64_t'], param('ns3::int64x64_t const &', u'right'))
>     cls.add_binary_numeric_operator('+', root_module['ns3::int64x64_t'], root_module['ns3::int64x64_t'], param('ns3::int64x64_t const &', u'right'))
>     cls.add_binary_numeric_operator('-', root_module['ns3::int64x64_t'], root_module['ns3::int64x64_t'], param('ns3::int64x64_t const &', u'right'))
>     cls.add_unary_numeric_operator('-')
>     cls.add_binary_numeric_operator('/', root_module['ns3::int64x64_t'], root_module['ns3::int64x64_t'], param('ns3::int64x64_t const &', u'right'))
6610,6615c5543,5549
<     cls.add_inplace_numeric_operator('+=', param('ns3::int64x64_t const &', 'right'))
<     cls.add_inplace_numeric_operator('-=', param('ns3::int64x64_t const &', 'right'))
<     cls.add_inplace_numeric_operator('*=', param('ns3::int64x64_t const &', 'right'))
<     cls.add_inplace_numeric_operator('/=', param('ns3::int64x64_t const &', 'right'))
<     cls.add_unary_numeric_operator('-')
<     ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t() [constructor]
---
>     cls.add_inplace_numeric_operator('*=', param('ns3::int64x64_t const &', u'right'))
>     cls.add_inplace_numeric_operator('-=', param('ns3::int64x64_t const &', u'right'))
>     cls.add_inplace_numeric_operator('/=', param('ns3::int64x64_t const &', u'right'))
>     cls.add_output_stream_operator()
>     cls.add_binary_comparison_operator('==')
>     cls.add_binary_comparison_operator('>=')
>     ## int64x64-double.h (module 'core'): ns3::int64x64_t::int64x64_t() [constructor]
6617,6635c5551,5569
<     ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t(double const value) [constructor]
<     cls.add_constructor([param('double const', 'value')])
<     ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t(long double const value) [constructor]
<     cls.add_constructor([param('long double const', 'value')])
<     ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t(int const v) [constructor]
<     cls.add_constructor([param('int const', 'v')])
<     ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t(long int const v) [constructor]
<     cls.add_constructor([param('long int const', 'v')])
<     ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t(long long int const v) [constructor]
<     cls.add_constructor([param('long long int const', 'v')])
<     ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t(unsigned int const v) [constructor]
<     cls.add_constructor([param('unsigned int const', 'v')])
<     ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t(long unsigned int const v) [constructor]
<     cls.add_constructor([param('long unsigned int const', 'v')])
<     ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t(long long unsigned int const v) [constructor]
<     cls.add_constructor([param('long long unsigned int const', 'v')])
<     ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t(int64_t const hi, uint64_t const lo) [constructor]
<     cls.add_constructor([param('int64_t const', 'hi'), param('uint64_t const', 'lo')])
<     ## int64x64-128.h (module 'core'): ns3::int64x64_t::int64x64_t(ns3::int64x64_t const & o) [constructor]
---
>     ## int64x64-double.h (module 'core'): ns3::int64x64_t::int64x64_t(double v) [constructor]
>     cls.add_constructor([param('double', 'v')])
>     ## int64x64-double.h (module 'core'): ns3::int64x64_t::int64x64_t(long double v) [constructor]
>     cls.add_constructor([param('long double', 'v')])
>     ## int64x64-double.h (module 'core'): ns3::int64x64_t::int64x64_t(int v) [constructor]
>     cls.add_constructor([param('int', 'v')])
>     ## int64x64-double.h (module 'core'): ns3::int64x64_t::int64x64_t(long int v) [constructor]
>     cls.add_constructor([param('long int', 'v')])
>     ## int64x64-double.h (module 'core'): ns3::int64x64_t::int64x64_t(long long int v) [constructor]
>     cls.add_constructor([param('long long int', 'v')])
>     ## int64x64-double.h (module 'core'): ns3::int64x64_t::int64x64_t(unsigned int v) [constructor]
>     cls.add_constructor([param('unsigned int', 'v')])
>     ## int64x64-double.h (module 'core'): ns3::int64x64_t::int64x64_t(long unsigned int v) [constructor]
>     cls.add_constructor([param('long unsigned int', 'v')])
>     ## int64x64-double.h (module 'core'): ns3::int64x64_t::int64x64_t(long long unsigned int v) [constructor]
>     cls.add_constructor([param('long long unsigned int', 'v')])
>     ## int64x64-double.h (module 'core'): ns3::int64x64_t::int64x64_t(int64_t hi, uint64_t lo) [constructor]
>     cls.add_constructor([param('int64_t', 'hi'), param('uint64_t', 'lo')])
>     ## int64x64-double.h (module 'core'): ns3::int64x64_t::int64x64_t(ns3::int64x64_t const & o) [copy constructor]
6637c5571
<     ## int64x64-128.h (module 'core'): double ns3::int64x64_t::GetDouble() const [member function]
---
>     ## int64x64-double.h (module 'core'): double ns3::int64x64_t::GetDouble() const [member function]
6642c5576
<     ## int64x64-128.h (module 'core'): int64_t ns3::int64x64_t::GetHigh() const [member function]
---
>     ## int64x64-double.h (module 'core'): int64_t ns3::int64x64_t::GetHigh() const [member function]
6647c5581
<     ## int64x64-128.h (module 'core'): uint64_t ns3::int64x64_t::GetLow() const [member function]
---
>     ## int64x64-double.h (module 'core'): uint64_t ns3::int64x64_t::GetLow() const [member function]
6652c5586
<     ## int64x64-128.h (module 'core'): static ns3::int64x64_t ns3::int64x64_t::Invert(uint64_t const v) [member function]
---
>     ## int64x64-double.h (module 'core'): static ns3::int64x64_t ns3::int64x64_t::Invert(uint64_t v) [member function]
6655c5589
<                    [param('uint64_t const', 'v')], 
---
>                    [param('uint64_t', 'v')], 
6657c5591
<     ## int64x64-128.h (module 'core'): void ns3::int64x64_t::MulByInvert(ns3::int64x64_t const & o) [member function]
---
>     ## int64x64-double.h (module 'core'): void ns3::int64x64_t::MulByInvert(ns3::int64x64_t const & o) [member function]
6661c5595
<     ## int64x64-128.h (module 'core'): ns3::int64x64_t::implementation [variable]
---
>     ## int64x64-double.h (module 'core'): ns3::int64x64_t::implementation [variable]
6668c5602
<     ## chunk.h (module 'network'): ns3::Chunk::Chunk(ns3::Chunk const & arg0) [constructor]
---
>     ## chunk.h (module 'network'): ns3::Chunk::Chunk(ns3::Chunk const & arg0) [copy constructor]
6674,6679c5608
<                    is_virtual=True, is_pure_virtual=True)
<     ## chunk.h (module 'network'): uint32_t ns3::Chunk::Deserialize(ns3::Buffer::Iterator start, ns3::Buffer::Iterator end) [member function]
<     cls.add_method('Deserialize', 
<                    'uint32_t', 
<                    [param('ns3::Buffer::Iterator', 'start'), param('ns3::Buffer::Iterator', 'end')], 
<                    is_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
6689c5618
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
6696c5625
<     ## header.h (module 'network'): ns3::Header::Header(ns3::Header const & arg0) [constructor]
---
>     ## header.h (module 'network'): ns3::Header::Header(ns3::Header const & arg0) [copy constructor]
6702c5631
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
6707c5636
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
6717c5646
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
6722c5651
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
6726c5655
<     ## icmpv4.h (module 'internet'): ns3::Icmpv4DestinationUnreachable::Icmpv4DestinationUnreachable(ns3::Icmpv4DestinationUnreachable const & arg0) [constructor]
---
>     ## icmpv4.h (module 'internet'): ns3::Icmpv4DestinationUnreachable::Icmpv4DestinationUnreachable(ns3::Icmpv4DestinationUnreachable const & arg0) [copy constructor]
6750c5679
<     ## icmpv4.h (module 'internet'): void ns3::Icmpv4DestinationUnreachable::SetData(ns3::Ptr<const ns3::Packet> data) [member function]
---
>     ## icmpv4.h (module 'internet'): void ns3::Icmpv4DestinationUnreachable::SetData(ns3::Ptr<ns3::Packet const> data) [member function]
6766c5695
<                    is_virtual=True, visibility='private')
---
>                    visibility='private', is_virtual=True)
6771c5700
<                    is_const=True, is_virtual=True, visibility='private')
---
>                    is_const=True, visibility='private', is_virtual=True)
6776c5705
<                    is_const=True, is_virtual=True, visibility='private')
---
>                    is_const=True, visibility='private', is_virtual=True)
6781c5710
<                    is_const=True, is_virtual=True, visibility='private')
---
>                    is_const=True, visibility='private', is_virtual=True)
6786c5715
<                    is_const=True, is_virtual=True, visibility='private')
---
>                    is_const=True, visibility='private', is_virtual=True)
6790c5719
<     ## icmpv4.h (module 'internet'): ns3::Icmpv4Echo::Icmpv4Echo(ns3::Icmpv4Echo const & arg0) [constructor]
---
>     ## icmpv4.h (module 'internet'): ns3::Icmpv4Echo::Icmpv4Echo(ns3::Icmpv4Echo const & arg0) [copy constructor]
6844c5773
<     ## icmpv4.h (module 'internet'): void ns3::Icmpv4Echo::SetData(ns3::Ptr<const ns3::Packet> data) [member function]
---
>     ## icmpv4.h (module 'internet'): void ns3::Icmpv4Echo::SetData(ns3::Ptr<ns3::Packet const> data) [member function]
6859c5788
<     ## icmpv4.h (module 'internet'): ns3::Icmpv4Header::Icmpv4Header(ns3::Icmpv4Header const & arg0) [constructor]
---
>     ## icmpv4.h (module 'internet'): ns3::Icmpv4Header::Icmpv4Header(ns3::Icmpv4Header const & arg0) [copy constructor]
6918c5847
<     ## icmpv4.h (module 'internet'): ns3::Icmpv4TimeExceeded::Icmpv4TimeExceeded(ns3::Icmpv4TimeExceeded const & arg0) [constructor]
---
>     ## icmpv4.h (module 'internet'): ns3::Icmpv4TimeExceeded::Icmpv4TimeExceeded(ns3::Icmpv4TimeExceeded const & arg0) [copy constructor]
6962c5891
<     ## icmpv4.h (module 'internet'): void ns3::Icmpv4TimeExceeded::SetData(ns3::Ptr<const ns3::Packet> data) [member function]
---
>     ## icmpv4.h (module 'internet'): void ns3::Icmpv4TimeExceeded::SetData(ns3::Ptr<ns3::Packet const> data) [member function]
6973c5902
<     ## icmpv6-header.h (module 'internet'): ns3::Icmpv6Header::Icmpv6Header(ns3::Icmpv6Header const & arg0) [constructor]
---
>     ## icmpv6-header.h (module 'internet'): ns3::Icmpv6Header::Icmpv6Header(ns3::Icmpv6Header const & arg0) [copy constructor]
7041c5970
<     ## icmpv6-header.h (module 'internet'): ns3::Icmpv6NA::Icmpv6NA(ns3::Icmpv6NA const & arg0) [constructor]
---
>     ## icmpv6-header.h (module 'internet'): ns3::Icmpv6NA::Icmpv6NA(ns3::Icmpv6NA const & arg0) [copy constructor]
7123c6052
<     ## icmpv6-header.h (module 'internet'): ns3::Icmpv6NS::Icmpv6NS(ns3::Icmpv6NS const & arg0) [constructor]
---
>     ## icmpv6-header.h (module 'internet'): ns3::Icmpv6NS::Icmpv6NS(ns3::Icmpv6NS const & arg0) [copy constructor]
7180c6109
<     ## icmpv6-header.h (module 'internet'): ns3::Icmpv6OptionHeader::Icmpv6OptionHeader(ns3::Icmpv6OptionHeader const & arg0) [constructor]
---
>     ## icmpv6-header.h (module 'internet'): ns3::Icmpv6OptionHeader::Icmpv6OptionHeader(ns3::Icmpv6OptionHeader const & arg0) [copy constructor]
7235c6164
<     ## icmpv6-header.h (module 'internet'): ns3::Icmpv6OptionLinkLayerAddress::Icmpv6OptionLinkLayerAddress(ns3::Icmpv6OptionLinkLayerAddress const & arg0) [constructor]
---
>     ## icmpv6-header.h (module 'internet'): ns3::Icmpv6OptionLinkLayerAddress::Icmpv6OptionLinkLayerAddress(ns3::Icmpv6OptionLinkLayerAddress const & arg0) [copy constructor]
7285c6214
<     ## icmpv6-header.h (module 'internet'): ns3::Icmpv6OptionMtu::Icmpv6OptionMtu(ns3::Icmpv6OptionMtu const & arg0) [constructor]
---
>     ## icmpv6-header.h (module 'internet'): ns3::Icmpv6OptionMtu::Icmpv6OptionMtu(ns3::Icmpv6OptionMtu const & arg0) [copy constructor]
7342c6271
<     ## icmpv6-header.h (module 'internet'): ns3::Icmpv6OptionPrefixInformation::Icmpv6OptionPrefixInformation(ns3::Icmpv6OptionPrefixInformation const & arg0) [constructor]
---
>     ## icmpv6-header.h (module 'internet'): ns3::Icmpv6OptionPrefixInformation::Icmpv6OptionPrefixInformation(ns3::Icmpv6OptionPrefixInformation const & arg0) [copy constructor]
7435c6364
<     ## icmpv6-header.h (module 'internet'): ns3::Icmpv6OptionRedirected::Icmpv6OptionRedirected(ns3::Icmpv6OptionRedirected const & arg0) [constructor]
---
>     ## icmpv6-header.h (module 'internet'): ns3::Icmpv6OptionRedirected::Icmpv6OptionRedirected(ns3::Icmpv6OptionRedirected const & arg0) [copy constructor]
7481c6410
<     ## icmpv6-header.h (module 'internet'): ns3::Icmpv6ParameterError::Icmpv6ParameterError(ns3::Icmpv6ParameterError const & arg0) [constructor]
---
>     ## icmpv6-header.h (module 'internet'): ns3::Icmpv6ParameterError::Icmpv6ParameterError(ns3::Icmpv6ParameterError const & arg0) [copy constructor]
7536c6465
<     ## icmpv6-header.h (module 'internet'): ns3::Icmpv6RA::Icmpv6RA(ns3::Icmpv6RA const & arg0) [constructor]
---
>     ## icmpv6-header.h (module 'internet'): ns3::Icmpv6RA::Icmpv6RA(ns3::Icmpv6RA const & arg0) [copy constructor]
7645c6574
<     ## icmpv6-header.h (module 'internet'): ns3::Icmpv6RS::Icmpv6RS(ns3::Icmpv6RS const & arg0) [constructor]
---
>     ## icmpv6-header.h (module 'internet'): ns3::Icmpv6RS::Icmpv6RS(ns3::Icmpv6RS const & arg0) [copy constructor]
7691c6620
<     ## icmpv6-header.h (module 'internet'): ns3::Icmpv6Redirection::Icmpv6Redirection(ns3::Icmpv6Redirection const & arg0) [constructor]
---
>     ## icmpv6-header.h (module 'internet'): ns3::Icmpv6Redirection::Icmpv6Redirection(ns3::Icmpv6Redirection const & arg0) [copy constructor]
7755c6684
<     ## icmpv6-header.h (module 'internet'): ns3::Icmpv6TimeExceeded::Icmpv6TimeExceeded(ns3::Icmpv6TimeExceeded const & arg0) [constructor]
---
>     ## icmpv6-header.h (module 'internet'): ns3::Icmpv6TimeExceeded::Icmpv6TimeExceeded(ns3::Icmpv6TimeExceeded const & arg0) [copy constructor]
7801c6730
<     ## icmpv6-header.h (module 'internet'): ns3::Icmpv6TooBig::Icmpv6TooBig(ns3::Icmpv6TooBig const & arg0) [constructor]
---
>     ## icmpv6-header.h (module 'internet'): ns3::Icmpv6TooBig::Icmpv6TooBig(ns3::Icmpv6TooBig const & arg0) [copy constructor]
7858,7859c6787,6788
<     ## internet-stack-helper.h (module 'internet'): ns3::InternetStackHelper::InternetStackHelper(ns3::InternetStackHelper const & o) [constructor]
<     cls.add_constructor([param('ns3::InternetStackHelper const &', 'o')])
---
>     ## internet-stack-helper.h (module 'internet'): ns3::InternetStackHelper::InternetStackHelper(ns3::InternetStackHelper const & arg0) [copy constructor]
>     cls.add_constructor([param('ns3::InternetStackHelper const &', 'arg0')])
7924c6853
<                    is_virtual=True, visibility='private')
---
>                    visibility='private', is_virtual=True)
7929c6858
<                    is_virtual=True, visibility='private')
---
>                    visibility='private', is_virtual=True)
7934c6863
<                    is_virtual=True, visibility='private')
---
>                    visibility='private', is_virtual=True)
7939c6868
<                    is_virtual=True, visibility='private')
---
>                    visibility='private', is_virtual=True)
7945c6874
<     ## ipv4-global-routing-helper.h (module 'internet'): ns3::Ipv4GlobalRoutingHelper::Ipv4GlobalRoutingHelper(ns3::Ipv4GlobalRoutingHelper const & arg0) [constructor]
---
>     ## ipv4-global-routing-helper.h (module 'internet'): ns3::Ipv4GlobalRoutingHelper::Ipv4GlobalRoutingHelper(ns3::Ipv4GlobalRoutingHelper const & arg0) [copy constructor]
7970c6899
<     ## ipv4-header.h (module 'internet'): ns3::Ipv4Header::Ipv4Header(ns3::Ipv4Header const & arg0) [constructor]
---
>     ## ipv4-header.h (module 'internet'): ns3::Ipv4Header::Ipv4Header(ns3::Ipv4Header const & arg0) [copy constructor]
8144c7073
<     ## ipv4-list-routing-helper.h (module 'internet'): ns3::Ipv4ListRoutingHelper::Ipv4ListRoutingHelper(ns3::Ipv4ListRoutingHelper const & arg0) [constructor]
---
>     ## ipv4-list-routing-helper.h (module 'internet'): ns3::Ipv4ListRoutingHelper::Ipv4ListRoutingHelper(ns3::Ipv4ListRoutingHelper const & arg0) [copy constructor]
8163c7092
<     ## ipv4-packet-info-tag.h (module 'internet'): ns3::Ipv4PacketInfoTag::Ipv4PacketInfoTag(ns3::Ipv4PacketInfoTag const & arg0) [constructor]
---
>     ## ipv4-packet-info-tag.h (module 'internet'): ns3::Ipv4PacketInfoTag::Ipv4PacketInfoTag(ns3::Ipv4PacketInfoTag const & arg0) [copy constructor]
8236c7165
<     ## ipv6-extension-header.h (module 'internet'): ns3::Ipv6ExtensionHeader::Ipv6ExtensionHeader(ns3::Ipv6ExtensionHeader const & arg0) [constructor]
---
>     ## ipv6-extension-header.h (module 'internet'): ns3::Ipv6ExtensionHeader::Ipv6ExtensionHeader(ns3::Ipv6ExtensionHeader const & arg0) [copy constructor]
8291c7220
<     ## ipv6-extension-header.h (module 'internet'): ns3::Ipv6ExtensionHopByHopHeader::Ipv6ExtensionHopByHopHeader(ns3::Ipv6ExtensionHopByHopHeader const & arg0) [constructor]
---
>     ## ipv6-extension-header.h (module 'internet'): ns3::Ipv6ExtensionHopByHopHeader::Ipv6ExtensionHopByHopHeader(ns3::Ipv6ExtensionHopByHopHeader const & arg0) [copy constructor]
8328c7257
<     ## ipv6-extension-header.h (module 'internet'): ns3::Ipv6ExtensionRoutingHeader::Ipv6ExtensionRoutingHeader(ns3::Ipv6ExtensionRoutingHeader const & arg0) [constructor]
---
>     ## ipv6-extension-header.h (module 'internet'): ns3::Ipv6ExtensionRoutingHeader::Ipv6ExtensionRoutingHeader(ns3::Ipv6ExtensionRoutingHeader const & arg0) [copy constructor]
8383c7312
<     ## ipv6-header.h (module 'internet'): ns3::Ipv6Header::Ipv6Header(ns3::Ipv6Header const & arg0) [constructor]
---
>     ## ipv6-header.h (module 'internet'): ns3::Ipv6Header::Ipv6Header(ns3::Ipv6Header const & arg0) [copy constructor]
8397,8401d7325
<     ## ipv6-header.h (module 'internet'): std::string ns3::Ipv6Header::EcnTypeToString(ns3::Ipv6Header::EcnType ecn) const [member function]
<     cls.add_method('EcnTypeToString', 
<                    'std::string', 
<                    [param('ns3::Ipv6Header::EcnType', 'ecn')], 
<                    is_const=True)
8412,8416d7335
<     ## ipv6-header.h (module 'internet'): ns3::Ipv6Header::EcnType ns3::Ipv6Header::GetEcn() const [member function]
<     cls.add_method('GetEcn', 
<                    'ns3::Ipv6Header::EcnType', 
<                    [], 
<                    is_const=True)
8480,8483d7398
<     ## ipv6-header.h (module 'internet'): void ns3::Ipv6Header::SetEcn(ns3::Ipv6Header::EcnType ecn) [member function]
<     cls.add_method('SetEcn', 
<                    'void', 
<                    [param('ns3::Ipv6Header::EcnType', 'ecn')])
8513c7428
<     ## ipv6-list-routing-helper.h (module 'internet'): ns3::Ipv6ListRoutingHelper::Ipv6ListRoutingHelper(ns3::Ipv6ListRoutingHelper const & arg0) [constructor]
---
>     ## ipv6-list-routing-helper.h (module 'internet'): ns3::Ipv6ListRoutingHelper::Ipv6ListRoutingHelper(ns3::Ipv6ListRoutingHelper const & arg0) [copy constructor]
8532c7447
<     ## ipv6-option-header.h (module 'internet'): ns3::Ipv6OptionHeader::Ipv6OptionHeader(ns3::Ipv6OptionHeader const & arg0) [constructor]
---
>     ## ipv6-option-header.h (module 'internet'): ns3::Ipv6OptionHeader::Ipv6OptionHeader(ns3::Ipv6OptionHeader const & arg0) [copy constructor]
8594c7509
<     ## ipv6-option-header.h (module 'internet'): ns3::Ipv6OptionHeader::Alignment::Alignment(ns3::Ipv6OptionHeader::Alignment const & arg0) [constructor]
---
>     ## ipv6-option-header.h (module 'internet'): ns3::Ipv6OptionHeader::Alignment::Alignment(ns3::Ipv6OptionHeader::Alignment const & arg0) [copy constructor]
8603c7518
<     ## ipv6-option-header.h (module 'internet'): ns3::Ipv6OptionJumbogramHeader::Ipv6OptionJumbogramHeader(ns3::Ipv6OptionJumbogramHeader const & arg0) [constructor]
---
>     ## ipv6-option-header.h (module 'internet'): ns3::Ipv6OptionJumbogramHeader::Ipv6OptionJumbogramHeader(ns3::Ipv6OptionJumbogramHeader const & arg0) [copy constructor]
8654c7569
<     ## ipv6-option-header.h (module 'internet'): ns3::Ipv6OptionPad1Header::Ipv6OptionPad1Header(ns3::Ipv6OptionPad1Header const & arg0) [constructor]
---
>     ## ipv6-option-header.h (module 'internet'): ns3::Ipv6OptionPad1Header::Ipv6OptionPad1Header(ns3::Ipv6OptionPad1Header const & arg0) [copy constructor]
8691c7606
<     ## ipv6-option-header.h (module 'internet'): ns3::Ipv6OptionPadnHeader::Ipv6OptionPadnHeader(ns3::Ipv6OptionPadnHeader const & arg0) [constructor]
---
>     ## ipv6-option-header.h (module 'internet'): ns3::Ipv6OptionPadnHeader::Ipv6OptionPadnHeader(ns3::Ipv6OptionPadnHeader const & arg0) [copy constructor]
8728c7643
<     ## ipv6-option-header.h (module 'internet'): ns3::Ipv6OptionRouterAlertHeader::Ipv6OptionRouterAlertHeader(ns3::Ipv6OptionRouterAlertHeader const & arg0) [constructor]
---
>     ## ipv6-option-header.h (module 'internet'): ns3::Ipv6OptionRouterAlertHeader::Ipv6OptionRouterAlertHeader(ns3::Ipv6OptionRouterAlertHeader const & arg0) [copy constructor]
8779c7694
<     ## ipv6-packet-info-tag.h (module 'internet'): ns3::Ipv6PacketInfoTag::Ipv6PacketInfoTag(ns3::Ipv6PacketInfoTag const & arg0) [constructor]
---
>     ## ipv6-packet-info-tag.h (module 'internet'): ns3::Ipv6PacketInfoTag::Ipv6PacketInfoTag(ns3::Ipv6PacketInfoTag const & arg0) [copy constructor]
8886c7801
<     ## object.h (module 'core'): ns3::Object::Object(ns3::Object const & o) [constructor]
---
>     ## object.h (module 'core'): ns3::Object::Object(ns3::Object const & o) [copy constructor]
8893c7808
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
8898c7813
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
8903c7818
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
8907c7822
<     ## object.h (module 'core'): ns3::Object::AggregateIterator::AggregateIterator(ns3::Object::AggregateIterator const & arg0) [constructor]
---
>     ## object.h (module 'core'): ns3::Object::AggregateIterator::AggregateIterator(ns3::Object::AggregateIterator const & arg0) [copy constructor]
8916c7831
<     ## object.h (module 'core'): ns3::Ptr<const ns3::Object> ns3::Object::AggregateIterator::Next() [member function]
---
>     ## object.h (module 'core'): ns3::Ptr<ns3::Object const> ns3::Object::AggregateIterator::Next() [member function]
8923c7838
<     ## packet-filter.h (module 'traffic-control'): ns3::PacketFilter::PacketFilter(ns3::PacketFilter const & arg0) [constructor]
---
>     ## packet-filter.h (module 'traffic-control'): ns3::PacketFilter::PacketFilter(ns3::PacketFilter const & arg0) [copy constructor]
8943c7858
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
8948c7863
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
8973c7888
<     ## pcap-file-wrapper.h (module 'network'): void ns3::PcapFileWrapper::Open(std::string const & filename, std::ios_base::openmode mode) [member function]
---
>     ## pcap-file-wrapper.h (module 'network'): void ns3::PcapFileWrapper::Open(std::string const & filename, std::_Ios_Openmode mode) [member function]
8976c7891
<                    [param('std::string const &', 'filename'), param('std::ios_base::openmode', 'mode')])
---
>                    [param('std::string const &', 'filename'), param('std::_Ios_Openmode', 'mode')])
8985c7900
<     ## pcap-file-wrapper.h (module 'network'): void ns3::PcapFileWrapper::Write(ns3::Time t, ns3::Ptr<const ns3::Packet> p) [member function]
---
>     ## pcap-file-wrapper.h (module 'network'): void ns3::PcapFileWrapper::Write(ns3::Time t, ns3::Ptr<ns3::Packet const> p) [member function]
8989c7904
<     ## pcap-file-wrapper.h (module 'network'): void ns3::PcapFileWrapper::Write(ns3::Time t, ns3::Header const & header, ns3::Ptr<const ns3::Packet> p) [member function]
---
>     ## pcap-file-wrapper.h (module 'network'): void ns3::PcapFileWrapper::Write(ns3::Time t, ns3::Header const & header, ns3::Ptr<ns3::Packet const> p) [member function]
9030a7946,8283
> def register_Ns3Queue_methods(root_module, cls):
>     ## queue.h (module 'network'): ns3::Queue::Queue(ns3::Queue const & arg0) [copy constructor]
>     cls.add_constructor([param('ns3::Queue const &', 'arg0')])
>     ## queue.h (module 'network'): ns3::Queue::Queue() [constructor]
>     cls.add_constructor([])
>     ## queue.h (module 'network'): ns3::Ptr<ns3::QueueItem> ns3::Queue::Dequeue() [member function]
>     cls.add_method('Dequeue', 
>                    'ns3::Ptr< ns3::QueueItem >', 
>                    [])
>     ## queue.h (module 'network'): void ns3::Queue::DequeueAll() [member function]
>     cls.add_method('DequeueAll', 
>                    'void', 
>                    [])
>     ## queue.h (module 'network'): bool ns3::Queue::Enqueue(ns3::Ptr<ns3::QueueItem> item) [member function]
>     cls.add_method('Enqueue', 
>                    'bool', 
>                    [param('ns3::Ptr< ns3::QueueItem >', 'item')])
>     ## queue.h (module 'network'): uint32_t ns3::Queue::GetMaxBytes() const [member function]
>     cls.add_method('GetMaxBytes', 
>                    'uint32_t', 
>                    [], 
>                    is_const=True)
>     ## queue.h (module 'network'): uint32_t ns3::Queue::GetMaxPackets() const [member function]
>     cls.add_method('GetMaxPackets', 
>                    'uint32_t', 
>                    [], 
>                    is_const=True)
>     ## queue.h (module 'network'): ns3::Queue::QueueMode ns3::Queue::GetMode() const [member function]
>     cls.add_method('GetMode', 
>                    'ns3::Queue::QueueMode', 
>                    [], 
>                    is_const=True)
>     ## queue.h (module 'network'): uint32_t ns3::Queue::GetNBytes() const [member function]
>     cls.add_method('GetNBytes', 
>                    'uint32_t', 
>                    [], 
>                    is_const=True)
>     ## queue.h (module 'network'): uint32_t ns3::Queue::GetNPackets() const [member function]
>     cls.add_method('GetNPackets', 
>                    'uint32_t', 
>                    [], 
>                    is_const=True)
>     ## queue.h (module 'network'): uint32_t ns3::Queue::GetTotalDroppedBytes() const [member function]
>     cls.add_method('GetTotalDroppedBytes', 
>                    'uint32_t', 
>                    [], 
>                    is_const=True)
>     ## queue.h (module 'network'): uint32_t ns3::Queue::GetTotalDroppedPackets() const [member function]
>     cls.add_method('GetTotalDroppedPackets', 
>                    'uint32_t', 
>                    [], 
>                    is_const=True)
>     ## queue.h (module 'network'): uint32_t ns3::Queue::GetTotalReceivedBytes() const [member function]
>     cls.add_method('GetTotalReceivedBytes', 
>                    'uint32_t', 
>                    [], 
>                    is_const=True)
>     ## queue.h (module 'network'): uint32_t ns3::Queue::GetTotalReceivedPackets() const [member function]
>     cls.add_method('GetTotalReceivedPackets', 
>                    'uint32_t', 
>                    [], 
>                    is_const=True)
>     ## queue.h (module 'network'): static ns3::TypeId ns3::Queue::GetTypeId() [member function]
>     cls.add_method('GetTypeId', 
>                    'ns3::TypeId', 
>                    [], 
>                    is_static=True)
>     ## queue.h (module 'network'): bool ns3::Queue::IsEmpty() const [member function]
>     cls.add_method('IsEmpty', 
>                    'bool', 
>                    [], 
>                    is_const=True)
>     ## queue.h (module 'network'): ns3::Ptr<const ns3::QueueItem> ns3::Queue::Peek() const [member function]
>     cls.add_method('Peek', 
>                    'ns3::Ptr< ns3::QueueItem const >', 
>                    [], 
>                    is_const=True)
>     ## queue.h (module 'network'): ns3::Ptr<ns3::QueueItem> ns3::Queue::Remove() [member function]
>     cls.add_method('Remove', 
>                    'ns3::Ptr< ns3::QueueItem >', 
>                    [])
>     ## queue.h (module 'network'): void ns3::Queue::ResetStatistics() [member function]
>     cls.add_method('ResetStatistics', 
>                    'void', 
>                    [])
>     ## queue.h (module 'network'): void ns3::Queue::SetDropCallback(ns3::Callback<void, ns3::Ptr<ns3::QueueItem>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> cb) [member function]
>     cls.add_method('SetDropCallback', 
>                    'void', 
>                    [param('ns3::Callback< void, ns3::Ptr< ns3::QueueItem >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'cb')], 
>                    is_virtual=True)
>     ## queue.h (module 'network'): void ns3::Queue::SetMaxBytes(uint32_t maxBytes) [member function]
>     cls.add_method('SetMaxBytes', 
>                    'void', 
>                    [param('uint32_t', 'maxBytes')])
>     ## queue.h (module 'network'): void ns3::Queue::SetMaxPackets(uint32_t maxPackets) [member function]
>     cls.add_method('SetMaxPackets', 
>                    'void', 
>                    [param('uint32_t', 'maxPackets')])
>     ## queue.h (module 'network'): void ns3::Queue::SetMode(ns3::Queue::QueueMode mode) [member function]
>     cls.add_method('SetMode', 
>                    'void', 
>                    [param('ns3::Queue::QueueMode', 'mode')])
>     ## queue.h (module 'network'): void ns3::Queue::Drop(ns3::Ptr<ns3::QueueItem> item) [member function]
>     cls.add_method('Drop', 
>                    'void', 
>                    [param('ns3::Ptr< ns3::QueueItem >', 'item')], 
>                    visibility='protected')
>     ## queue.h (module 'network'): ns3::Ptr<ns3::QueueItem> ns3::Queue::DoDequeue() [member function]
>     cls.add_method('DoDequeue', 
>                    'ns3::Ptr< ns3::QueueItem >', 
>                    [], 
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
>     ## queue.h (module 'network'): bool ns3::Queue::DoEnqueue(ns3::Ptr<ns3::QueueItem> item) [member function]
>     cls.add_method('DoEnqueue', 
>                    'bool', 
>                    [param('ns3::Ptr< ns3::QueueItem >', 'item')], 
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
>     ## queue.h (module 'network'): ns3::Ptr<const ns3::QueueItem> ns3::Queue::DoPeek() const [member function]
>     cls.add_method('DoPeek', 
>                    'ns3::Ptr< ns3::QueueItem const >', 
>                    [], 
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
>     ## queue.h (module 'network'): ns3::Ptr<ns3::QueueItem> ns3::Queue::DoRemove() [member function]
>     cls.add_method('DoRemove', 
>                    'ns3::Ptr< ns3::QueueItem >', 
>                    [], 
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
>     return
> 
> def register_Ns3QueueDisc_methods(root_module, cls):
>     ## queue-disc.h (module 'traffic-control'): ns3::QueueDisc::QueueDisc(ns3::QueueDisc const & arg0) [copy constructor]
>     cls.add_constructor([param('ns3::QueueDisc const &', 'arg0')])
>     ## queue-disc.h (module 'traffic-control'): ns3::QueueDisc::QueueDisc() [constructor]
>     cls.add_constructor([])
>     ## queue-disc.h (module 'traffic-control'): void ns3::QueueDisc::AddInternalQueue(ns3::Ptr<ns3::Queue> queue) [member function]
>     cls.add_method('AddInternalQueue', 
>                    'void', 
>                    [param('ns3::Ptr< ns3::Queue >', 'queue')])
>     ## queue-disc.h (module 'traffic-control'): void ns3::QueueDisc::AddPacketFilter(ns3::Ptr<ns3::PacketFilter> filter) [member function]
>     cls.add_method('AddPacketFilter', 
>                    'void', 
>                    [param('ns3::Ptr< ns3::PacketFilter >', 'filter')])
>     ## queue-disc.h (module 'traffic-control'): void ns3::QueueDisc::AddQueueDiscClass(ns3::Ptr<ns3::QueueDiscClass> qdClass) [member function]
>     cls.add_method('AddQueueDiscClass', 
>                    'void', 
>                    [param('ns3::Ptr< ns3::QueueDiscClass >', 'qdClass')])
>     ## queue-disc.h (module 'traffic-control'): int32_t ns3::QueueDisc::Classify(ns3::Ptr<ns3::QueueDiscItem> item) [member function]
>     cls.add_method('Classify', 
>                    'int32_t', 
>                    [param('ns3::Ptr< ns3::QueueDiscItem >', 'item')])
>     ## queue-disc.h (module 'traffic-control'): ns3::Ptr<ns3::QueueDiscItem> ns3::QueueDisc::Dequeue() [member function]
>     cls.add_method('Dequeue', 
>                    'ns3::Ptr< ns3::QueueDiscItem >', 
>                    [])
>     ## queue-disc.h (module 'traffic-control'): bool ns3::QueueDisc::Enqueue(ns3::Ptr<ns3::QueueDiscItem> item) [member function]
>     cls.add_method('Enqueue', 
>                    'bool', 
>                    [param('ns3::Ptr< ns3::QueueDiscItem >', 'item')])
>     ## queue-disc.h (module 'traffic-control'): ns3::Ptr<ns3::Queue> ns3::QueueDisc::GetInternalQueue(uint32_t i) const [member function]
>     cls.add_method('GetInternalQueue', 
>                    'ns3::Ptr< ns3::Queue >', 
>                    [param('uint32_t', 'i')], 
>                    is_const=True)
>     ## queue-disc.h (module 'traffic-control'): uint32_t ns3::QueueDisc::GetNBytes() const [member function]
>     cls.add_method('GetNBytes', 
>                    'uint32_t', 
>                    [], 
>                    is_const=True)
>     ## queue-disc.h (module 'traffic-control'): uint32_t ns3::QueueDisc::GetNInternalQueues() const [member function]
>     cls.add_method('GetNInternalQueues', 
>                    'uint32_t', 
>                    [], 
>                    is_const=True)
>     ## queue-disc.h (module 'traffic-control'): uint32_t ns3::QueueDisc::GetNPacketFilters() const [member function]
>     cls.add_method('GetNPacketFilters', 
>                    'uint32_t', 
>                    [], 
>                    is_const=True)
>     ## queue-disc.h (module 'traffic-control'): uint32_t ns3::QueueDisc::GetNPackets() const [member function]
>     cls.add_method('GetNPackets', 
>                    'uint32_t', 
>                    [], 
>                    is_const=True)
>     ## queue-disc.h (module 'traffic-control'): uint32_t ns3::QueueDisc::GetNQueueDiscClasses() const [member function]
>     cls.add_method('GetNQueueDiscClasses', 
>                    'uint32_t', 
>                    [], 
>                    is_const=True)
>     ## queue-disc.h (module 'traffic-control'): ns3::Ptr<ns3::NetDevice> ns3::QueueDisc::GetNetDevice() const [member function]
>     cls.add_method('GetNetDevice', 
>                    'ns3::Ptr< ns3::NetDevice >', 
>                    [], 
>                    is_const=True)
>     ## queue-disc.h (module 'traffic-control'): ns3::Ptr<ns3::PacketFilter> ns3::QueueDisc::GetPacketFilter(uint32_t i) const [member function]
>     cls.add_method('GetPacketFilter', 
>                    'ns3::Ptr< ns3::PacketFilter >', 
>                    [param('uint32_t', 'i')], 
>                    is_const=True)
>     ## queue-disc.h (module 'traffic-control'): ns3::Ptr<ns3::QueueDiscClass> ns3::QueueDisc::GetQueueDiscClass(uint32_t i) const [member function]
>     cls.add_method('GetQueueDiscClass', 
>                    'ns3::Ptr< ns3::QueueDiscClass >', 
>                    [param('uint32_t', 'i')], 
>                    is_const=True)
>     ## queue-disc.h (module 'traffic-control'): uint32_t ns3::QueueDisc::GetQuota() const [member function]
>     cls.add_method('GetQuota', 
>                    'uint32_t', 
>                    [], 
>                    is_const=True, is_virtual=True)
>     ## queue-disc.h (module 'traffic-control'): uint32_t ns3::QueueDisc::GetTotalDroppedBytes() const [member function]
>     cls.add_method('GetTotalDroppedBytes', 
>                    'uint32_t', 
>                    [], 
>                    is_const=True)
>     ## queue-disc.h (module 'traffic-control'): uint32_t ns3::QueueDisc::GetTotalDroppedPackets() const [member function]
>     cls.add_method('GetTotalDroppedPackets', 
>                    'uint32_t', 
>                    [], 
>                    is_const=True)
>     ## queue-disc.h (module 'traffic-control'): uint32_t ns3::QueueDisc::GetTotalReceivedBytes() const [member function]
>     cls.add_method('GetTotalReceivedBytes', 
>                    'uint32_t', 
>                    [], 
>                    is_const=True)
>     ## queue-disc.h (module 'traffic-control'): uint32_t ns3::QueueDisc::GetTotalReceivedPackets() const [member function]
>     cls.add_method('GetTotalReceivedPackets', 
>                    'uint32_t', 
>                    [], 
>                    is_const=True)
>     ## queue-disc.h (module 'traffic-control'): uint32_t ns3::QueueDisc::GetTotalRequeuedBytes() const [member function]
>     cls.add_method('GetTotalRequeuedBytes', 
>                    'uint32_t', 
>                    [], 
>                    is_const=True)
>     ## queue-disc.h (module 'traffic-control'): uint32_t ns3::QueueDisc::GetTotalRequeuedPackets() const [member function]
>     cls.add_method('GetTotalRequeuedPackets', 
>                    'uint32_t', 
>                    [], 
>                    is_const=True)
>     ## queue-disc.h (module 'traffic-control'): static ns3::TypeId ns3::QueueDisc::GetTypeId() [member function]
>     cls.add_method('GetTypeId', 
>                    'ns3::TypeId', 
>                    [], 
>                    is_static=True)
>     ## queue-disc.h (module 'traffic-control'): ns3::QueueDisc::WakeMode ns3::QueueDisc::GetWakeMode() [member function]
>     cls.add_method('GetWakeMode', 
>                    'ns3::QueueDisc::WakeMode', 
>                    [])
>     ## queue-disc.h (module 'traffic-control'): ns3::Ptr<const ns3::QueueDiscItem> ns3::QueueDisc::Peek() const [member function]
>     cls.add_method('Peek', 
>                    'ns3::Ptr< ns3::QueueDiscItem const >', 
>                    [], 
>                    is_const=True)
>     ## queue-disc.h (module 'traffic-control'): void ns3::QueueDisc::Run() [member function]
>     cls.add_method('Run', 
>                    'void', 
>                    [])
>     ## queue-disc.h (module 'traffic-control'): void ns3::QueueDisc::SetNetDevice(ns3::Ptr<ns3::NetDevice> device) [member function]
>     cls.add_method('SetNetDevice', 
>                    'void', 
>                    [param('ns3::Ptr< ns3::NetDevice >', 'device')])
>     ## queue-disc.h (module 'traffic-control'): void ns3::QueueDisc::SetParentDropCallback(ns3::Callback<void, ns3::Ptr<ns3::QueueItem>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> cb) [member function]
>     cls.add_method('SetParentDropCallback', 
>                    'void', 
>                    [param('ns3::Callback< void, ns3::Ptr< ns3::QueueItem >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'cb')], 
>                    is_virtual=True)
>     ## queue-disc.h (module 'traffic-control'): void ns3::QueueDisc::SetQuota(uint32_t const quota) [member function]
>     cls.add_method('SetQuota', 
>                    'void', 
>                    [param('uint32_t const', 'quota')], 
>                    is_virtual=True)
>     ## queue-disc.h (module 'traffic-control'): void ns3::QueueDisc::DoDispose() [member function]
>     cls.add_method('DoDispose', 
>                    'void', 
>                    [], 
>                    visibility='protected', is_virtual=True)
>     ## queue-disc.h (module 'traffic-control'): void ns3::QueueDisc::DoInitialize() [member function]
>     cls.add_method('DoInitialize', 
>                    'void', 
>                    [], 
>                    visibility='protected', is_virtual=True)
>     ## queue-disc.h (module 'traffic-control'): void ns3::QueueDisc::Drop(ns3::Ptr<ns3::QueueItem> item) [member function]
>     cls.add_method('Drop', 
>                    'void', 
>                    [param('ns3::Ptr< ns3::QueueItem >', 'item')], 
>                    visibility='protected')
>     ## queue-disc.h (module 'traffic-control'): bool ns3::QueueDisc::CheckConfig() [member function]
>     cls.add_method('CheckConfig', 
>                    'bool', 
>                    [], 
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
>     ## queue-disc.h (module 'traffic-control'): ns3::Ptr<ns3::QueueDiscItem> ns3::QueueDisc::DoDequeue() [member function]
>     cls.add_method('DoDequeue', 
>                    'ns3::Ptr< ns3::QueueDiscItem >', 
>                    [], 
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
>     ## queue-disc.h (module 'traffic-control'): bool ns3::QueueDisc::DoEnqueue(ns3::Ptr<ns3::QueueDiscItem> item) [member function]
>     cls.add_method('DoEnqueue', 
>                    'bool', 
>                    [param('ns3::Ptr< ns3::QueueDiscItem >', 'item')], 
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
>     ## queue-disc.h (module 'traffic-control'): ns3::Ptr<const ns3::QueueDiscItem> ns3::QueueDisc::DoPeek() const [member function]
>     cls.add_method('DoPeek', 
>                    'ns3::Ptr< ns3::QueueDiscItem const >', 
>                    [], 
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
>     ## queue-disc.h (module 'traffic-control'): void ns3::QueueDisc::InitializeParams() [member function]
>     cls.add_method('InitializeParams', 
>                    'void', 
>                    [], 
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
>     return
> 
> def register_Ns3QueueDiscClass_methods(root_module, cls):
>     ## queue-disc.h (module 'traffic-control'): ns3::QueueDiscClass::QueueDiscClass(ns3::QueueDiscClass const & arg0) [copy constructor]
>     cls.add_constructor([param('ns3::QueueDiscClass const &', 'arg0')])
>     ## queue-disc.h (module 'traffic-control'): ns3::QueueDiscClass::QueueDiscClass() [constructor]
>     cls.add_constructor([])
>     ## queue-disc.h (module 'traffic-control'): ns3::Ptr<ns3::QueueDisc> ns3::QueueDiscClass::GetQueueDisc() const [member function]
>     cls.add_method('GetQueueDisc', 
>                    'ns3::Ptr< ns3::QueueDisc >', 
>                    [], 
>                    is_const=True)
>     ## queue-disc.h (module 'traffic-control'): static ns3::TypeId ns3::QueueDiscClass::GetTypeId() [member function]
>     cls.add_method('GetTypeId', 
>                    'ns3::TypeId', 
>                    [], 
>                    is_static=True)
>     ## queue-disc.h (module 'traffic-control'): void ns3::QueueDiscClass::SetQueueDisc(ns3::Ptr<ns3::QueueDisc> qd) [member function]
>     cls.add_method('SetQueueDisc', 
>                    'void', 
>                    [param('ns3::Ptr< ns3::QueueDisc >', 'qd')])
>     ## queue-disc.h (module 'traffic-control'): void ns3::QueueDiscClass::DoDispose() [member function]
>     cls.add_method('DoDispose', 
>                    'void', 
>                    [], 
>                    visibility='protected', is_virtual=True)
>     return
> 
9061c8314
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
9066c8319
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
9076c8329
<     ## rip-header.h (module 'internet'): ns3::RipHeader::RipHeader(ns3::RipHeader const & arg0) [constructor]
---
>     ## rip-header.h (module 'internet'): ns3::RipHeader::RipHeader(ns3::RipHeader const & arg0) [copy constructor]
9141c8394
<     ## ripng-header.h (module 'internet'): ns3::RipNgHeader::RipNgHeader(ns3::RipNgHeader const & arg0) [constructor]
---
>     ## ripng-header.h (module 'internet'): ns3::RipNgHeader::RipNgHeader(ns3::RipNgHeader const & arg0) [copy constructor]
9206c8459
<     ## ripng-header.h (module 'internet'): ns3::RipNgRte::RipNgRte(ns3::RipNgRte const & arg0) [constructor]
---
>     ## ripng-header.h (module 'internet'): ns3::RipNgRte::RipNgRte(ns3::RipNgRte const & arg0) [copy constructor]
9280c8533
<     ## rip-header.h (module 'internet'): ns3::RipRte::RipRte(ns3::RipRte const & arg0) [constructor]
---
>     ## rip-header.h (module 'internet'): ns3::RipRte::RipRte(ns3::RipRte const & arg0) [copy constructor]
9364c8617
<     ## rtt-estimator.h (module 'internet'): ns3::RttEstimator::RttEstimator(ns3::RttEstimator const & r) [constructor]
---
>     ## rtt-estimator.h (module 'internet'): ns3::RttEstimator::RttEstimator(ns3::RttEstimator const & r) [copy constructor]
9370c8623
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
9400c8653
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
9411c8664
<     ## rtt-estimator.h (module 'internet'): ns3::RttMeanDeviation::RttMeanDeviation(ns3::RttMeanDeviation const & r) [constructor]
---
>     ## rtt-estimator.h (module 'internet'): ns3::RttMeanDeviation::RttMeanDeviation(ns3::RttMeanDeviation const & r) [copy constructor]
9483c8736
<     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::AttributeAccessor, ns3::empty, ns3::DefaultDeleter<ns3::AttributeAccessor> >::SimpleRefCount(ns3::SimpleRefCount<ns3::AttributeAccessor, ns3::empty, ns3::DefaultDeleter<ns3::AttributeAccessor> > const & o) [constructor]
---
>     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::AttributeAccessor, ns3::empty, ns3::DefaultDeleter<ns3::AttributeAccessor> >::SimpleRefCount(ns3::SimpleRefCount<ns3::AttributeAccessor, ns3::empty, ns3::DefaultDeleter<ns3::AttributeAccessor> > const & o) [copy constructor]
9484a8738,8742
>     ## simple-ref-count.h (module 'core'): static void ns3::SimpleRefCount<ns3::AttributeAccessor, ns3::empty, ns3::DefaultDeleter<ns3::AttributeAccessor> >::Cleanup() [member function]
>     cls.add_method('Cleanup', 
>                    'void', 
>                    [], 
>                    is_static=True)
9490c8748
<     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker> >::SimpleRefCount(ns3::SimpleRefCount<ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker> > const & o) [constructor]
---
>     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker> >::SimpleRefCount(ns3::SimpleRefCount<ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker> > const & o) [copy constructor]
9491a8750,8754
>     ## simple-ref-count.h (module 'core'): static void ns3::SimpleRefCount<ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker> >::Cleanup() [member function]
>     cls.add_method('Cleanup', 
>                    'void', 
>                    [], 
>                    is_static=True)
9497c8760
<     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue> >::SimpleRefCount(ns3::SimpleRefCount<ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue> > const & o) [constructor]
---
>     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue> >::SimpleRefCount(ns3::SimpleRefCount<ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue> > const & o) [copy constructor]
9498a8762,8766
>     ## simple-ref-count.h (module 'core'): static void ns3::SimpleRefCount<ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue> >::Cleanup() [member function]
>     cls.add_method('Cleanup', 
>                    'void', 
>                    [], 
>                    is_static=True)
9504c8772
<     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::CallbackImplBase, ns3::empty, ns3::DefaultDeleter<ns3::CallbackImplBase> >::SimpleRefCount(ns3::SimpleRefCount<ns3::CallbackImplBase, ns3::empty, ns3::DefaultDeleter<ns3::CallbackImplBase> > const & o) [constructor]
---
>     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::CallbackImplBase, ns3::empty, ns3::DefaultDeleter<ns3::CallbackImplBase> >::SimpleRefCount(ns3::SimpleRefCount<ns3::CallbackImplBase, ns3::empty, ns3::DefaultDeleter<ns3::CallbackImplBase> > const & o) [copy constructor]
9505a8774,8778
>     ## simple-ref-count.h (module 'core'): static void ns3::SimpleRefCount<ns3::CallbackImplBase, ns3::empty, ns3::DefaultDeleter<ns3::CallbackImplBase> >::Cleanup() [member function]
>     cls.add_method('Cleanup', 
>                    'void', 
>                    [], 
>                    is_static=True)
9511c8784
<     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::EventImpl, ns3::empty, ns3::DefaultDeleter<ns3::EventImpl> >::SimpleRefCount(ns3::SimpleRefCount<ns3::EventImpl, ns3::empty, ns3::DefaultDeleter<ns3::EventImpl> > const & o) [constructor]
---
>     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::EventImpl, ns3::empty, ns3::DefaultDeleter<ns3::EventImpl> >::SimpleRefCount(ns3::SimpleRefCount<ns3::EventImpl, ns3::empty, ns3::DefaultDeleter<ns3::EventImpl> > const & o) [copy constructor]
9512a8786,8790
>     ## simple-ref-count.h (module 'core'): static void ns3::SimpleRefCount<ns3::EventImpl, ns3::empty, ns3::DefaultDeleter<ns3::EventImpl> >::Cleanup() [member function]
>     cls.add_method('Cleanup', 
>                    'void', 
>                    [], 
>                    is_static=True)
9518c8796
<     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Hash::Implementation, ns3::empty, ns3::DefaultDeleter<ns3::Hash::Implementation> >::SimpleRefCount(ns3::SimpleRefCount<ns3::Hash::Implementation, ns3::empty, ns3::DefaultDeleter<ns3::Hash::Implementation> > const & o) [constructor]
---
>     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Hash::Implementation, ns3::empty, ns3::DefaultDeleter<ns3::Hash::Implementation> >::SimpleRefCount(ns3::SimpleRefCount<ns3::Hash::Implementation, ns3::empty, ns3::DefaultDeleter<ns3::Hash::Implementation> > const & o) [copy constructor]
9519a8798,8802
>     ## simple-ref-count.h (module 'core'): static void ns3::SimpleRefCount<ns3::Hash::Implementation, ns3::empty, ns3::DefaultDeleter<ns3::Hash::Implementation> >::Cleanup() [member function]
>     cls.add_method('Cleanup', 
>                    'void', 
>                    [], 
>                    is_static=True)
9525c8808
<     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Ipv4MulticastRoute, ns3::empty, ns3::DefaultDeleter<ns3::Ipv4MulticastRoute> >::SimpleRefCount(ns3::SimpleRefCount<ns3::Ipv4MulticastRoute, ns3::empty, ns3::DefaultDeleter<ns3::Ipv4MulticastRoute> > const & o) [constructor]
---
>     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Ipv4MulticastRoute, ns3::empty, ns3::DefaultDeleter<ns3::Ipv4MulticastRoute> >::SimpleRefCount(ns3::SimpleRefCount<ns3::Ipv4MulticastRoute, ns3::empty, ns3::DefaultDeleter<ns3::Ipv4MulticastRoute> > const & o) [copy constructor]
9526a8810,8814
>     ## simple-ref-count.h (module 'core'): static void ns3::SimpleRefCount<ns3::Ipv4MulticastRoute, ns3::empty, ns3::DefaultDeleter<ns3::Ipv4MulticastRoute> >::Cleanup() [member function]
>     cls.add_method('Cleanup', 
>                    'void', 
>                    [], 
>                    is_static=True)
9532c8820
<     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Ipv4Route, ns3::empty, ns3::DefaultDeleter<ns3::Ipv4Route> >::SimpleRefCount(ns3::SimpleRefCount<ns3::Ipv4Route, ns3::empty, ns3::DefaultDeleter<ns3::Ipv4Route> > const & o) [constructor]
---
>     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Ipv4Route, ns3::empty, ns3::DefaultDeleter<ns3::Ipv4Route> >::SimpleRefCount(ns3::SimpleRefCount<ns3::Ipv4Route, ns3::empty, ns3::DefaultDeleter<ns3::Ipv4Route> > const & o) [copy constructor]
9533a8822,8826
>     ## simple-ref-count.h (module 'core'): static void ns3::SimpleRefCount<ns3::Ipv4Route, ns3::empty, ns3::DefaultDeleter<ns3::Ipv4Route> >::Cleanup() [member function]
>     cls.add_method('Cleanup', 
>                    'void', 
>                    [], 
>                    is_static=True)
9539c8832
<     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Ipv6MulticastRoute, ns3::empty, ns3::DefaultDeleter<ns3::Ipv6MulticastRoute> >::SimpleRefCount(ns3::SimpleRefCount<ns3::Ipv6MulticastRoute, ns3::empty, ns3::DefaultDeleter<ns3::Ipv6MulticastRoute> > const & o) [constructor]
---
>     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Ipv6MulticastRoute, ns3::empty, ns3::DefaultDeleter<ns3::Ipv6MulticastRoute> >::SimpleRefCount(ns3::SimpleRefCount<ns3::Ipv6MulticastRoute, ns3::empty, ns3::DefaultDeleter<ns3::Ipv6MulticastRoute> > const & o) [copy constructor]
9540a8834,8838
>     ## simple-ref-count.h (module 'core'): static void ns3::SimpleRefCount<ns3::Ipv6MulticastRoute, ns3::empty, ns3::DefaultDeleter<ns3::Ipv6MulticastRoute> >::Cleanup() [member function]
>     cls.add_method('Cleanup', 
>                    'void', 
>                    [], 
>                    is_static=True)
9546c8844
<     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Ipv6Route, ns3::empty, ns3::DefaultDeleter<ns3::Ipv6Route> >::SimpleRefCount(ns3::SimpleRefCount<ns3::Ipv6Route, ns3::empty, ns3::DefaultDeleter<ns3::Ipv6Route> > const & o) [constructor]
---
>     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Ipv6Route, ns3::empty, ns3::DefaultDeleter<ns3::Ipv6Route> >::SimpleRefCount(ns3::SimpleRefCount<ns3::Ipv6Route, ns3::empty, ns3::DefaultDeleter<ns3::Ipv6Route> > const & o) [copy constructor]
9547a8846,8862
>     ## simple-ref-count.h (module 'core'): static void ns3::SimpleRefCount<ns3::Ipv6Route, ns3::empty, ns3::DefaultDeleter<ns3::Ipv6Route> >::Cleanup() [member function]
>     cls.add_method('Cleanup', 
>                    'void', 
>                    [], 
>                    is_static=True)
>     return
> 
> def register_Ns3SimpleRefCount__Ns3NetDeviceQueue_Ns3Empty_Ns3DefaultDeleter__lt__ns3NetDeviceQueue__gt___methods(root_module, cls):
>     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::NetDeviceQueue, ns3::empty, ns3::DefaultDeleter<ns3::NetDeviceQueue> >::SimpleRefCount() [constructor]
>     cls.add_constructor([])
>     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::NetDeviceQueue, ns3::empty, ns3::DefaultDeleter<ns3::NetDeviceQueue> >::SimpleRefCount(ns3::SimpleRefCount<ns3::NetDeviceQueue, ns3::empty, ns3::DefaultDeleter<ns3::NetDeviceQueue> > const & o) [copy constructor]
>     cls.add_constructor([param('ns3::SimpleRefCount< ns3::NetDeviceQueue, ns3::empty, ns3::DefaultDeleter< ns3::NetDeviceQueue > > const &', 'o')])
>     ## simple-ref-count.h (module 'core'): static void ns3::SimpleRefCount<ns3::NetDeviceQueue, ns3::empty, ns3::DefaultDeleter<ns3::NetDeviceQueue> >::Cleanup() [member function]
>     cls.add_method('Cleanup', 
>                    'void', 
>                    [], 
>                    is_static=True)
9553c8868
<     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::NixVector, ns3::empty, ns3::DefaultDeleter<ns3::NixVector> >::SimpleRefCount(ns3::SimpleRefCount<ns3::NixVector, ns3::empty, ns3::DefaultDeleter<ns3::NixVector> > const & o) [constructor]
---
>     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::NixVector, ns3::empty, ns3::DefaultDeleter<ns3::NixVector> >::SimpleRefCount(ns3::SimpleRefCount<ns3::NixVector, ns3::empty, ns3::DefaultDeleter<ns3::NixVector> > const & o) [copy constructor]
9554a8870,8874
>     ## simple-ref-count.h (module 'core'): static void ns3::SimpleRefCount<ns3::NixVector, ns3::empty, ns3::DefaultDeleter<ns3::NixVector> >::Cleanup() [member function]
>     cls.add_method('Cleanup', 
>                    'void', 
>                    [], 
>                    is_static=True)
9560c8880
<     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::OutputStreamWrapper, ns3::empty, ns3::DefaultDeleter<ns3::OutputStreamWrapper> >::SimpleRefCount(ns3::SimpleRefCount<ns3::OutputStreamWrapper, ns3::empty, ns3::DefaultDeleter<ns3::OutputStreamWrapper> > const & o) [constructor]
---
>     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::OutputStreamWrapper, ns3::empty, ns3::DefaultDeleter<ns3::OutputStreamWrapper> >::SimpleRefCount(ns3::SimpleRefCount<ns3::OutputStreamWrapper, ns3::empty, ns3::DefaultDeleter<ns3::OutputStreamWrapper> > const & o) [copy constructor]
9561a8882,8886
>     ## simple-ref-count.h (module 'core'): static void ns3::SimpleRefCount<ns3::OutputStreamWrapper, ns3::empty, ns3::DefaultDeleter<ns3::OutputStreamWrapper> >::Cleanup() [member function]
>     cls.add_method('Cleanup', 
>                    'void', 
>                    [], 
>                    is_static=True)
9567c8892
<     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Packet, ns3::empty, ns3::DefaultDeleter<ns3::Packet> >::SimpleRefCount(ns3::SimpleRefCount<ns3::Packet, ns3::empty, ns3::DefaultDeleter<ns3::Packet> > const & o) [constructor]
---
>     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::Packet, ns3::empty, ns3::DefaultDeleter<ns3::Packet> >::SimpleRefCount(ns3::SimpleRefCount<ns3::Packet, ns3::empty, ns3::DefaultDeleter<ns3::Packet> > const & o) [copy constructor]
9568a8894,8898
>     ## simple-ref-count.h (module 'core'): static void ns3::SimpleRefCount<ns3::Packet, ns3::empty, ns3::DefaultDeleter<ns3::Packet> >::Cleanup() [member function]
>     cls.add_method('Cleanup', 
>                    'void', 
>                    [], 
>                    is_static=True)
9574c8904
<     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::QueueItem, ns3::empty, ns3::DefaultDeleter<ns3::QueueItem> >::SimpleRefCount(ns3::SimpleRefCount<ns3::QueueItem, ns3::empty, ns3::DefaultDeleter<ns3::QueueItem> > const & o) [constructor]
---
>     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::QueueItem, ns3::empty, ns3::DefaultDeleter<ns3::QueueItem> >::SimpleRefCount(ns3::SimpleRefCount<ns3::QueueItem, ns3::empty, ns3::DefaultDeleter<ns3::QueueItem> > const & o) [copy constructor]
9575a8906,8910
>     ## simple-ref-count.h (module 'core'): static void ns3::SimpleRefCount<ns3::QueueItem, ns3::empty, ns3::DefaultDeleter<ns3::QueueItem> >::Cleanup() [member function]
>     cls.add_method('Cleanup', 
>                    'void', 
>                    [], 
>                    is_static=True)
9581c8916
<     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::TraceSourceAccessor, ns3::empty, ns3::DefaultDeleter<ns3::TraceSourceAccessor> >::SimpleRefCount(ns3::SimpleRefCount<ns3::TraceSourceAccessor, ns3::empty, ns3::DefaultDeleter<ns3::TraceSourceAccessor> > const & o) [constructor]
---
>     ## simple-ref-count.h (module 'core'): ns3::SimpleRefCount<ns3::TraceSourceAccessor, ns3::empty, ns3::DefaultDeleter<ns3::TraceSourceAccessor> >::SimpleRefCount(ns3::SimpleRefCount<ns3::TraceSourceAccessor, ns3::empty, ns3::DefaultDeleter<ns3::TraceSourceAccessor> > const & o) [copy constructor]
9582a8918,8922
>     ## simple-ref-count.h (module 'core'): static void ns3::SimpleRefCount<ns3::TraceSourceAccessor, ns3::empty, ns3::DefaultDeleter<ns3::TraceSourceAccessor> >::Cleanup() [member function]
>     cls.add_method('Cleanup', 
>                    'void', 
>                    [], 
>                    is_static=True)
9586c8926
<     ## socket.h (module 'network'): ns3::Socket::Socket(ns3::Socket const & arg0) [constructor]
---
>     ## socket.h (module 'network'): ns3::Socket::Socket(ns3::Socket const & arg0) [copy constructor]
9594c8934
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
9599c8939
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
9604c8944
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
9614c8954
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
9619c8959
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
9629c8969
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
9638c8978
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
9663c9003
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
9668c9008
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
9678c9018
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
9683c9023
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
9688c9028
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
9693c9033
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
9748c9088
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
9753c9093
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
9766c9106
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
9779c9119
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
9792c9132
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
9797c9137
<     ## socket.h (module 'network'): void ns3::Socket::SetAcceptCallback(ns3::Callback<bool, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> connectionRequest, ns3::Callback<void, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> newConnectionCreated) [member function]
---
>     ## socket.h (module 'network'): void ns3::Socket::SetAcceptCallback(ns3::Callback<bool, ns3::Ptr<ns3::Socket>, ns3::Address const&, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> connectionRequest, ns3::Callback<void, ns3::Ptr<ns3::Socket>, ns3::Address const&, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> newConnectionCreated) [member function]
9805c9145
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
9872c9212
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
9877c9217
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
9882c9222
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
9946c9286
<     ## socket-factory.h (module 'network'): ns3::SocketFactory::SocketFactory(ns3::SocketFactory const & arg0) [constructor]
---
>     ## socket-factory.h (module 'network'): ns3::SocketFactory::SocketFactory(ns3::SocketFactory const & arg0) [copy constructor]
9954c9294
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
9963c9303
<     ## socket.h (module 'network'): ns3::SocketIpTosTag::SocketIpTosTag(ns3::SocketIpTosTag const & arg0) [constructor]
---
>     ## socket.h (module 'network'): ns3::SocketIpTosTag::SocketIpTosTag(ns3::SocketIpTosTag const & arg0) [copy constructor]
10009c9349
<     ## socket.h (module 'network'): ns3::SocketIpTtlTag::SocketIpTtlTag(ns3::SocketIpTtlTag const & arg0) [constructor]
---
>     ## socket.h (module 'network'): ns3::SocketIpTtlTag::SocketIpTtlTag(ns3::SocketIpTtlTag const & arg0) [copy constructor]
10055c9395
<     ## socket.h (module 'network'): ns3::SocketIpv6HopLimitTag::SocketIpv6HopLimitTag(ns3::SocketIpv6HopLimitTag const & arg0) [constructor]
---
>     ## socket.h (module 'network'): ns3::SocketIpv6HopLimitTag::SocketIpv6HopLimitTag(ns3::SocketIpv6HopLimitTag const & arg0) [copy constructor]
10101c9441
<     ## socket.h (module 'network'): ns3::SocketIpv6TclassTag::SocketIpv6TclassTag(ns3::SocketIpv6TclassTag const & arg0) [constructor]
---
>     ## socket.h (module 'network'): ns3::SocketIpv6TclassTag::SocketIpv6TclassTag(ns3::SocketIpv6TclassTag const & arg0) [copy constructor]
10147c9487
<     ## socket.h (module 'network'): ns3::SocketPriorityTag::SocketPriorityTag(ns3::SocketPriorityTag const & arg0) [constructor]
---
>     ## socket.h (module 'network'): ns3::SocketPriorityTag::SocketPriorityTag(ns3::SocketPriorityTag const & arg0) [copy constructor]
10193c9533
<     ## socket.h (module 'network'): ns3::SocketSetDontFragmentTag::SocketSetDontFragmentTag(ns3::SocketSetDontFragmentTag const & arg0) [constructor]
---
>     ## socket.h (module 'network'): ns3::SocketSetDontFragmentTag::SocketSetDontFragmentTag(ns3::SocketSetDontFragmentTag const & arg0) [copy constructor]
10245c9585
<     ## tcp-congestion-ops.h (module 'internet'): ns3::TcpCongestionOps::TcpCongestionOps(ns3::TcpCongestionOps const & other) [constructor]
---
>     ## tcp-congestion-ops.h (module 'internet'): ns3::TcpCongestionOps::TcpCongestionOps(ns3::TcpCongestionOps const & other) [copy constructor]
10247,10251d9586
<     ## tcp-congestion-ops.h (module 'internet'): void ns3::TcpCongestionOps::CongControl(ns3::Ptr<ns3::TcpSocketState> tcb, ns3::TcpRateOps::TcpRateConnection const & rc, ns3::TcpRateOps::TcpRateSample const & rs) [member function]
<     cls.add_method('CongControl', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb'), param('ns3::TcpRateOps::TcpRateConnection const &', 'rc'), param('ns3::TcpRateOps::TcpRateSample const &', 'rs')], 
<                    is_virtual=True)
10257,10261d9591
<     ## tcp-congestion-ops.h (module 'internet'): void ns3::TcpCongestionOps::CwndEvent(ns3::Ptr<ns3::TcpSocketState> tcb, ns3::TcpSocketState::TcpCAEvent_t const event) [member function]
<     cls.add_method('CwndEvent', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb'), param('ns3::TcpSocketState::TcpCAEvent_t const', 'event')], 
<                    is_virtual=True)
10266c9596
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
10271c9601
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
10276c9606
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
10282,10286d9611
<     ## tcp-congestion-ops.h (module 'internet'): bool ns3::TcpCongestionOps::HasCongControl() const [member function]
<     cls.add_method('HasCongControl', 
<                    'bool', 
<                    [], 
<                    is_const=True, is_virtual=True)
10291,10296c9616
<                    is_virtual=True)
<     ## tcp-congestion-ops.h (module 'internet'): void ns3::TcpCongestionOps::Init(ns3::Ptr<ns3::TcpSocketState> tcb) [member function]
<     cls.add_method('Init', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb')], 
<                    is_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
10302,10306d9621
<     ## tcp-congestion-ops.h (module 'internet'): void ns3::TcpCongestionOps::ReduceCwnd(ns3::Ptr<ns3::TcpSocketState> tcb) [member function]
<     cls.add_method('ReduceCwnd', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb')], 
<                    is_virtual=True, is_pure_virtual=True)
10310d9624
<     cls.add_binary_comparison_operator('==')
10312c9626,9627
<     ## tcp-header.h (module 'internet'): ns3::TcpHeader::TcpHeader(ns3::TcpHeader const & arg0) [constructor]
---
>     cls.add_binary_comparison_operator('==')
>     ## tcp-header.h (module 'internet'): ns3::TcpHeader::TcpHeader(ns3::TcpHeader const & arg0) [copy constructor]
10316c9631
<     ## tcp-header.h (module 'internet'): bool ns3::TcpHeader::AppendOption(ns3::Ptr<const ns3::TcpOption> option) [member function]
---
>     ## tcp-header.h (module 'internet'): bool ns3::TcpHeader::AppendOption(ns3::Ptr<ns3::TcpOption> option) [member function]
10319c9634
<                    [param('ns3::Ptr< ns3::TcpOption const >', 'option')])
---
>                    [param('ns3::Ptr< ns3::TcpOption >', 'option')])
10364c9679
<     ## tcp-header.h (module 'internet'): ns3::Ptr<const ns3::TcpOption> ns3::TcpHeader::GetOption(uint8_t kind) const [member function]
---
>     ## tcp-header.h (module 'internet'): ns3::Ptr<ns3::TcpOption> ns3::TcpHeader::GetOption(uint8_t kind) const [member function]
10366c9681
<                    'ns3::Ptr< ns3::TcpOption const >', 
---
>                    'ns3::Ptr< ns3::TcpOption >', 
10374,10378d9688
<     ## tcp-header.h (module 'internet'): ns3::TcpHeader::TcpOptionList const & ns3::TcpHeader::GetOptionList() const [member function]
<     cls.add_method('GetOptionList', 
<                    'ns3::TcpHeader::TcpOptionList const &', 
<                    [], 
<                    is_const=True)
10444c9754
<                    [param('ns3::SequenceNumber< unsigned int, int >', 'ackNumber')])
---
>                    [param('ns3::SequenceNumber32', 'ackNumber')])
10456c9766
<                    [param('ns3::SequenceNumber< unsigned int, int >', 'sequenceNumber')])
---
>                    [param('ns3::SequenceNumber32', 'sequenceNumber')])
10474c9784
<     ## tcp-congestion-ops.h (module 'internet'): ns3::TcpNewReno::TcpNewReno(ns3::TcpNewReno const & sock) [constructor]
---
>     ## tcp-congestion-ops.h (module 'internet'): ns3::TcpNewReno::TcpNewReno(ns3::TcpNewReno const & sock) [copy constructor]
10501,10505d9810
<     ## tcp-congestion-ops.h (module 'internet'): void ns3::TcpNewReno::ReduceCwnd(ns3::Ptr<ns3::TcpSocketState> tcb) [member function]
<     cls.add_method('ReduceCwnd', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb')], 
<                    is_virtual=True)
10510c9815
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
10515c9820
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
10519c9824
<     ## tcp-option.h (module 'internet'): ns3::TcpOption::TcpOption(ns3::TcpOption const & arg0) [constructor]
---
>     ## tcp-option.h (module 'internet'): ns3::TcpOption::TcpOption(ns3::TcpOption const & arg0) [copy constructor]
10532c9837
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
10542c9847
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
10547c9852
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
10562c9867
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
10567,10875c9872
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3TcpOptionEnd_methods(root_module, cls):
<     ## tcp-option-rfc793.h (module 'internet'): ns3::TcpOptionEnd::TcpOptionEnd(ns3::TcpOptionEnd const & arg0) [constructor]
<     cls.add_constructor([param('ns3::TcpOptionEnd const &', 'arg0')])
<     ## tcp-option-rfc793.h (module 'internet'): ns3::TcpOptionEnd::TcpOptionEnd() [constructor]
<     cls.add_constructor([])
<     ## tcp-option-rfc793.h (module 'internet'): uint32_t ns3::TcpOptionEnd::Deserialize(ns3::Buffer::Iterator start) [member function]
<     cls.add_method('Deserialize', 
<                    'uint32_t', 
<                    [param('ns3::Buffer::Iterator', 'start')], 
<                    is_virtual=True)
<     ## tcp-option-rfc793.h (module 'internet'): ns3::TypeId ns3::TcpOptionEnd::GetInstanceTypeId() const [member function]
<     cls.add_method('GetInstanceTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## tcp-option-rfc793.h (module 'internet'): uint8_t ns3::TcpOptionEnd::GetKind() const [member function]
<     cls.add_method('GetKind', 
<                    'uint8_t', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## tcp-option-rfc793.h (module 'internet'): uint32_t ns3::TcpOptionEnd::GetSerializedSize() const [member function]
<     cls.add_method('GetSerializedSize', 
<                    'uint32_t', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## tcp-option-rfc793.h (module 'internet'): static ns3::TypeId ns3::TcpOptionEnd::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## tcp-option-rfc793.h (module 'internet'): void ns3::TcpOptionEnd::Print(std::ostream & os) const [member function]
<     cls.add_method('Print', 
<                    'void', 
<                    [param('std::ostream &', 'os')], 
<                    is_const=True, is_virtual=True)
<     ## tcp-option-rfc793.h (module 'internet'): void ns3::TcpOptionEnd::Serialize(ns3::Buffer::Iterator start) const [member function]
<     cls.add_method('Serialize', 
<                    'void', 
<                    [param('ns3::Buffer::Iterator', 'start')], 
<                    is_const=True, is_virtual=True)
<     return
< 
< def register_Ns3TcpOptionMSS_methods(root_module, cls):
<     ## tcp-option-rfc793.h (module 'internet'): ns3::TcpOptionMSS::TcpOptionMSS(ns3::TcpOptionMSS const & arg0) [constructor]
<     cls.add_constructor([param('ns3::TcpOptionMSS const &', 'arg0')])
<     ## tcp-option-rfc793.h (module 'internet'): ns3::TcpOptionMSS::TcpOptionMSS() [constructor]
<     cls.add_constructor([])
<     ## tcp-option-rfc793.h (module 'internet'): uint32_t ns3::TcpOptionMSS::Deserialize(ns3::Buffer::Iterator start) [member function]
<     cls.add_method('Deserialize', 
<                    'uint32_t', 
<                    [param('ns3::Buffer::Iterator', 'start')], 
<                    is_virtual=True)
<     ## tcp-option-rfc793.h (module 'internet'): ns3::TypeId ns3::TcpOptionMSS::GetInstanceTypeId() const [member function]
<     cls.add_method('GetInstanceTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## tcp-option-rfc793.h (module 'internet'): uint8_t ns3::TcpOptionMSS::GetKind() const [member function]
<     cls.add_method('GetKind', 
<                    'uint8_t', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## tcp-option-rfc793.h (module 'internet'): uint16_t ns3::TcpOptionMSS::GetMSS() const [member function]
<     cls.add_method('GetMSS', 
<                    'uint16_t', 
<                    [], 
<                    is_const=True)
<     ## tcp-option-rfc793.h (module 'internet'): uint32_t ns3::TcpOptionMSS::GetSerializedSize() const [member function]
<     cls.add_method('GetSerializedSize', 
<                    'uint32_t', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## tcp-option-rfc793.h (module 'internet'): static ns3::TypeId ns3::TcpOptionMSS::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## tcp-option-rfc793.h (module 'internet'): void ns3::TcpOptionMSS::Print(std::ostream & os) const [member function]
<     cls.add_method('Print', 
<                    'void', 
<                    [param('std::ostream &', 'os')], 
<                    is_const=True, is_virtual=True)
<     ## tcp-option-rfc793.h (module 'internet'): void ns3::TcpOptionMSS::Serialize(ns3::Buffer::Iterator start) const [member function]
<     cls.add_method('Serialize', 
<                    'void', 
<                    [param('ns3::Buffer::Iterator', 'start')], 
<                    is_const=True, is_virtual=True)
<     ## tcp-option-rfc793.h (module 'internet'): void ns3::TcpOptionMSS::SetMSS(uint16_t mss) [member function]
<     cls.add_method('SetMSS', 
<                    'void', 
<                    [param('uint16_t', 'mss')])
<     return
< 
< def register_Ns3TcpOptionNOP_methods(root_module, cls):
<     ## tcp-option-rfc793.h (module 'internet'): ns3::TcpOptionNOP::TcpOptionNOP(ns3::TcpOptionNOP const & arg0) [constructor]
<     cls.add_constructor([param('ns3::TcpOptionNOP const &', 'arg0')])
<     ## tcp-option-rfc793.h (module 'internet'): ns3::TcpOptionNOP::TcpOptionNOP() [constructor]
<     cls.add_constructor([])
<     ## tcp-option-rfc793.h (module 'internet'): uint32_t ns3::TcpOptionNOP::Deserialize(ns3::Buffer::Iterator start) [member function]
<     cls.add_method('Deserialize', 
<                    'uint32_t', 
<                    [param('ns3::Buffer::Iterator', 'start')], 
<                    is_virtual=True)
<     ## tcp-option-rfc793.h (module 'internet'): ns3::TypeId ns3::TcpOptionNOP::GetInstanceTypeId() const [member function]
<     cls.add_method('GetInstanceTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## tcp-option-rfc793.h (module 'internet'): uint8_t ns3::TcpOptionNOP::GetKind() const [member function]
<     cls.add_method('GetKind', 
<                    'uint8_t', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## tcp-option-rfc793.h (module 'internet'): uint32_t ns3::TcpOptionNOP::GetSerializedSize() const [member function]
<     cls.add_method('GetSerializedSize', 
<                    'uint32_t', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## tcp-option-rfc793.h (module 'internet'): static ns3::TypeId ns3::TcpOptionNOP::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## tcp-option-rfc793.h (module 'internet'): void ns3::TcpOptionNOP::Print(std::ostream & os) const [member function]
<     cls.add_method('Print', 
<                    'void', 
<                    [param('std::ostream &', 'os')], 
<                    is_const=True, is_virtual=True)
<     ## tcp-option-rfc793.h (module 'internet'): void ns3::TcpOptionNOP::Serialize(ns3::Buffer::Iterator start) const [member function]
<     cls.add_method('Serialize', 
<                    'void', 
<                    [param('ns3::Buffer::Iterator', 'start')], 
<                    is_const=True, is_virtual=True)
<     return
< 
< def register_Ns3TcpOptionSack_methods(root_module, cls):
<     cls.add_output_stream_operator()
<     ## tcp-option-sack.h (module 'internet'): ns3::TcpOptionSack::TcpOptionSack(ns3::TcpOptionSack const & arg0) [constructor]
<     cls.add_constructor([param('ns3::TcpOptionSack const &', 'arg0')])
<     ## tcp-option-sack.h (module 'internet'): ns3::TcpOptionSack::TcpOptionSack() [constructor]
<     cls.add_constructor([])
<     ## tcp-option-sack.h (module 'internet'): void ns3::TcpOptionSack::AddSackBlock(ns3::TcpOptionSack::SackBlock s) [member function]
<     cls.add_method('AddSackBlock', 
<                    'void', 
<                    [param('std::pair< ns3::SequenceNumber< unsigned int, int >, ns3::SequenceNumber< unsigned int, int > >', 's')])
<     ## tcp-option-sack.h (module 'internet'): void ns3::TcpOptionSack::ClearSackList() [member function]
<     cls.add_method('ClearSackList', 
<                    'void', 
<                    [])
<     ## tcp-option-sack.h (module 'internet'): uint32_t ns3::TcpOptionSack::Deserialize(ns3::Buffer::Iterator start) [member function]
<     cls.add_method('Deserialize', 
<                    'uint32_t', 
<                    [param('ns3::Buffer::Iterator', 'start')], 
<                    is_virtual=True)
<     ## tcp-option-sack.h (module 'internet'): ns3::TypeId ns3::TcpOptionSack::GetInstanceTypeId() const [member function]
<     cls.add_method('GetInstanceTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## tcp-option-sack.h (module 'internet'): uint8_t ns3::TcpOptionSack::GetKind() const [member function]
<     cls.add_method('GetKind', 
<                    'uint8_t', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## tcp-option-sack.h (module 'internet'): uint32_t ns3::TcpOptionSack::GetNumSackBlocks() const [member function]
<     cls.add_method('GetNumSackBlocks', 
<                    'uint32_t', 
<                    [], 
<                    is_const=True)
<     ## tcp-option-sack.h (module 'internet'): ns3::TcpOptionSack::SackList ns3::TcpOptionSack::GetSackList() const [member function]
<     cls.add_method('GetSackList', 
<                    'ns3::TcpOptionSack::SackList', 
<                    [], 
<                    is_const=True)
<     ## tcp-option-sack.h (module 'internet'): uint32_t ns3::TcpOptionSack::GetSerializedSize() const [member function]
<     cls.add_method('GetSerializedSize', 
<                    'uint32_t', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## tcp-option-sack.h (module 'internet'): static ns3::TypeId ns3::TcpOptionSack::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## tcp-option-sack.h (module 'internet'): void ns3::TcpOptionSack::Print(std::ostream & os) const [member function]
<     cls.add_method('Print', 
<                    'void', 
<                    [param('std::ostream &', 'os')], 
<                    is_const=True, is_virtual=True)
<     ## tcp-option-sack.h (module 'internet'): void ns3::TcpOptionSack::Serialize(ns3::Buffer::Iterator start) const [member function]
<     cls.add_method('Serialize', 
<                    'void', 
<                    [param('ns3::Buffer::Iterator', 'start')], 
<                    is_const=True, is_virtual=True)
<     return
< 
< def register_Ns3TcpOptionSackPermitted_methods(root_module, cls):
<     ## tcp-option-sack-permitted.h (module 'internet'): ns3::TcpOptionSackPermitted::TcpOptionSackPermitted(ns3::TcpOptionSackPermitted const & arg0) [constructor]
<     cls.add_constructor([param('ns3::TcpOptionSackPermitted const &', 'arg0')])
<     ## tcp-option-sack-permitted.h (module 'internet'): ns3::TcpOptionSackPermitted::TcpOptionSackPermitted() [constructor]
<     cls.add_constructor([])
<     ## tcp-option-sack-permitted.h (module 'internet'): uint32_t ns3::TcpOptionSackPermitted::Deserialize(ns3::Buffer::Iterator start) [member function]
<     cls.add_method('Deserialize', 
<                    'uint32_t', 
<                    [param('ns3::Buffer::Iterator', 'start')], 
<                    is_virtual=True)
<     ## tcp-option-sack-permitted.h (module 'internet'): ns3::TypeId ns3::TcpOptionSackPermitted::GetInstanceTypeId() const [member function]
<     cls.add_method('GetInstanceTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## tcp-option-sack-permitted.h (module 'internet'): uint8_t ns3::TcpOptionSackPermitted::GetKind() const [member function]
<     cls.add_method('GetKind', 
<                    'uint8_t', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## tcp-option-sack-permitted.h (module 'internet'): uint32_t ns3::TcpOptionSackPermitted::GetSerializedSize() const [member function]
<     cls.add_method('GetSerializedSize', 
<                    'uint32_t', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## tcp-option-sack-permitted.h (module 'internet'): static ns3::TypeId ns3::TcpOptionSackPermitted::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## tcp-option-sack-permitted.h (module 'internet'): void ns3::TcpOptionSackPermitted::Print(std::ostream & os) const [member function]
<     cls.add_method('Print', 
<                    'void', 
<                    [param('std::ostream &', 'os')], 
<                    is_const=True, is_virtual=True)
<     ## tcp-option-sack-permitted.h (module 'internet'): void ns3::TcpOptionSackPermitted::Serialize(ns3::Buffer::Iterator start) const [member function]
<     cls.add_method('Serialize', 
<                    'void', 
<                    [param('ns3::Buffer::Iterator', 'start')], 
<                    is_const=True, is_virtual=True)
<     return
< 
< def register_Ns3TcpOptionTS_methods(root_module, cls):
<     ## tcp-option-ts.h (module 'internet'): ns3::TcpOptionTS::TcpOptionTS(ns3::TcpOptionTS const & arg0) [constructor]
<     cls.add_constructor([param('ns3::TcpOptionTS const &', 'arg0')])
<     ## tcp-option-ts.h (module 'internet'): ns3::TcpOptionTS::TcpOptionTS() [constructor]
<     cls.add_constructor([])
<     ## tcp-option-ts.h (module 'internet'): uint32_t ns3::TcpOptionTS::Deserialize(ns3::Buffer::Iterator start) [member function]
<     cls.add_method('Deserialize', 
<                    'uint32_t', 
<                    [param('ns3::Buffer::Iterator', 'start')], 
<                    is_virtual=True)
<     ## tcp-option-ts.h (module 'internet'): static ns3::Time ns3::TcpOptionTS::ElapsedTimeFromTsValue(uint32_t echoTime) [member function]
<     cls.add_method('ElapsedTimeFromTsValue', 
<                    'ns3::Time', 
<                    [param('uint32_t', 'echoTime')], 
<                    is_static=True)
<     ## tcp-option-ts.h (module 'internet'): uint32_t ns3::TcpOptionTS::GetEcho() const [member function]
<     cls.add_method('GetEcho', 
<                    'uint32_t', 
<                    [], 
<                    is_const=True)
<     ## tcp-option-ts.h (module 'internet'): ns3::TypeId ns3::TcpOptionTS::GetInstanceTypeId() const [member function]
<     cls.add_method('GetInstanceTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## tcp-option-ts.h (module 'internet'): uint8_t ns3::TcpOptionTS::GetKind() const [member function]
<     cls.add_method('GetKind', 
<                    'uint8_t', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## tcp-option-ts.h (module 'internet'): uint32_t ns3::TcpOptionTS::GetSerializedSize() const [member function]
<     cls.add_method('GetSerializedSize', 
<                    'uint32_t', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## tcp-option-ts.h (module 'internet'): uint32_t ns3::TcpOptionTS::GetTimestamp() const [member function]
<     cls.add_method('GetTimestamp', 
<                    'uint32_t', 
<                    [], 
<                    is_const=True)
<     ## tcp-option-ts.h (module 'internet'): static ns3::TypeId ns3::TcpOptionTS::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## tcp-option-ts.h (module 'internet'): static uint32_t ns3::TcpOptionTS::NowToTsValue() [member function]
<     cls.add_method('NowToTsValue', 
<                    'uint32_t', 
<                    [], 
<                    is_static=True)
<     ## tcp-option-ts.h (module 'internet'): void ns3::TcpOptionTS::Print(std::ostream & os) const [member function]
<     cls.add_method('Print', 
<                    'void', 
<                    [param('std::ostream &', 'os')], 
<                    is_const=True, is_virtual=True)
<     ## tcp-option-ts.h (module 'internet'): void ns3::TcpOptionTS::Serialize(ns3::Buffer::Iterator start) const [member function]
<     cls.add_method('Serialize', 
<                    'void', 
<                    [param('ns3::Buffer::Iterator', 'start')], 
<                    is_const=True, is_virtual=True)
<     ## tcp-option-ts.h (module 'internet'): void ns3::TcpOptionTS::SetEcho(uint32_t ts) [member function]
<     cls.add_method('SetEcho', 
<                    'void', 
<                    [param('uint32_t', 'ts')])
<     ## tcp-option-ts.h (module 'internet'): void ns3::TcpOptionTS::SetTimestamp(uint32_t ts) [member function]
<     cls.add_method('SetTimestamp', 
<                    'void', 
<                    [param('uint32_t', 'ts')])
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
10879c9876
<     ## tcp-option.h (module 'internet'): ns3::TcpOptionUnknown::TcpOptionUnknown(ns3::TcpOptionUnknown const & arg0) [constructor]
---
>     ## tcp-option.h (module 'internet'): ns3::TcpOptionUnknown::TcpOptionUnknown(ns3::TcpOptionUnknown const & arg0) [copy constructor]
10920,11110d9916
< def register_Ns3TcpOptionWinScale_methods(root_module, cls):
<     ## tcp-option-winscale.h (module 'internet'): ns3::TcpOptionWinScale::TcpOptionWinScale(ns3::TcpOptionWinScale const & arg0) [constructor]
<     cls.add_constructor([param('ns3::TcpOptionWinScale const &', 'arg0')])
<     ## tcp-option-winscale.h (module 'internet'): ns3::TcpOptionWinScale::TcpOptionWinScale() [constructor]
<     cls.add_constructor([])
<     ## tcp-option-winscale.h (module 'internet'): uint32_t ns3::TcpOptionWinScale::Deserialize(ns3::Buffer::Iterator start) [member function]
<     cls.add_method('Deserialize', 
<                    'uint32_t', 
<                    [param('ns3::Buffer::Iterator', 'start')], 
<                    is_virtual=True)
<     ## tcp-option-winscale.h (module 'internet'): ns3::TypeId ns3::TcpOptionWinScale::GetInstanceTypeId() const [member function]
<     cls.add_method('GetInstanceTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## tcp-option-winscale.h (module 'internet'): uint8_t ns3::TcpOptionWinScale::GetKind() const [member function]
<     cls.add_method('GetKind', 
<                    'uint8_t', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## tcp-option-winscale.h (module 'internet'): uint8_t ns3::TcpOptionWinScale::GetScale() const [member function]
<     cls.add_method('GetScale', 
<                    'uint8_t', 
<                    [], 
<                    is_const=True)
<     ## tcp-option-winscale.h (module 'internet'): uint32_t ns3::TcpOptionWinScale::GetSerializedSize() const [member function]
<     cls.add_method('GetSerializedSize', 
<                    'uint32_t', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## tcp-option-winscale.h (module 'internet'): static ns3::TypeId ns3::TcpOptionWinScale::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## tcp-option-winscale.h (module 'internet'): void ns3::TcpOptionWinScale::Print(std::ostream & os) const [member function]
<     cls.add_method('Print', 
<                    'void', 
<                    [param('std::ostream &', 'os')], 
<                    is_const=True, is_virtual=True)
<     ## tcp-option-winscale.h (module 'internet'): void ns3::TcpOptionWinScale::Serialize(ns3::Buffer::Iterator start) const [member function]
<     cls.add_method('Serialize', 
<                    'void', 
<                    [param('ns3::Buffer::Iterator', 'start')], 
<                    is_const=True, is_virtual=True)
<     ## tcp-option-winscale.h (module 'internet'): void ns3::TcpOptionWinScale::SetScale(uint8_t scale) [member function]
<     cls.add_method('SetScale', 
<                    'void', 
<                    [param('uint8_t', 'scale')])
<     return
< 
< def register_Ns3TcpRateOps_methods(root_module, cls):
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateOps() [constructor]
<     cls.add_constructor([])
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateOps(ns3::TcpRateOps const & arg0) [constructor]
<     cls.add_constructor([param('ns3::TcpRateOps const &', 'arg0')])
<     ## tcp-rate-ops.h (module 'internet'): void ns3::TcpRateOps::CalculateAppLimited(uint32_t cWnd, uint32_t in_flight, uint32_t segmentSize, ns3::SequenceNumber32 const & tailSeq, ns3::SequenceNumber32 const & nextTx, uint32_t const lostOut, uint32_t const retransOut) [member function]
<     cls.add_method('CalculateAppLimited', 
<                    'void', 
<                    [param('uint32_t', 'cWnd'), param('uint32_t', 'in_flight'), param('uint32_t', 'segmentSize'), param('ns3::SequenceNumber32 const &', 'tailSeq'), param('ns3::SequenceNumber32 const &', 'nextTx'), param('uint32_t const', 'lostOut'), param('uint32_t const', 'retransOut')], 
<                    is_virtual=True, is_pure_virtual=True)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateSample const & ns3::TcpRateOps::GenerateSample(uint32_t delivered, uint32_t lost, bool is_sack_reneg, uint32_t priorInFlight, ns3::Time const & minRtt) [member function]
<     cls.add_method('GenerateSample', 
<                    'ns3::TcpRateOps::TcpRateSample const &', 
<                    [param('uint32_t', 'delivered'), param('uint32_t', 'lost'), param('bool', 'is_sack_reneg'), param('uint32_t', 'priorInFlight'), param('ns3::Time const &', 'minRtt')], 
<                    is_virtual=True, is_pure_virtual=True)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateConnection const & ns3::TcpRateOps::GetConnectionRate() [member function]
<     cls.add_method('GetConnectionRate', 
<                    'ns3::TcpRateOps::TcpRateConnection const &', 
<                    [], 
<                    is_virtual=True, is_pure_virtual=True)
<     ## tcp-rate-ops.h (module 'internet'): static ns3::TypeId ns3::TcpRateOps::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## tcp-rate-ops.h (module 'internet'): void ns3::TcpRateOps::SkbDelivered(ns3::TcpTxItem * skb) [member function]
<     cls.add_method('SkbDelivered', 
<                    'void', 
<                    [param('ns3::TcpTxItem *', 'skb')], 
<                    is_virtual=True, is_pure_virtual=True)
<     ## tcp-rate-ops.h (module 'internet'): void ns3::TcpRateOps::SkbSent(ns3::TcpTxItem * skb, bool isStartOfTransmission) [member function]
<     cls.add_method('SkbSent', 
<                    'void', 
<                    [param('ns3::TcpTxItem *', 'skb'), param('bool', 'isStartOfTransmission')], 
<                    is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3TcpRateOpsTcpRateConnection_methods(root_module, cls):
<     cls.add_output_stream_operator()
<     cls.add_binary_comparison_operator('==')
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateConnection::TcpRateConnection() [constructor]
<     cls.add_constructor([])
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateConnection::TcpRateConnection(ns3::TcpRateOps::TcpRateConnection const & arg0) [constructor]
<     cls.add_constructor([param('ns3::TcpRateOps::TcpRateConnection const &', 'arg0')])
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateConnection::m_appLimited [variable]
<     cls.add_instance_attribute('m_appLimited', 'uint32_t', is_const=False)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateConnection::m_delivered [variable]
<     cls.add_instance_attribute('m_delivered', 'uint64_t', is_const=False)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateConnection::m_deliveredTime [variable]
<     cls.add_instance_attribute('m_deliveredTime', 'ns3::Time', is_const=False)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateConnection::m_firstSentTime [variable]
<     cls.add_instance_attribute('m_firstSentTime', 'ns3::Time', is_const=False)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateConnection::m_rateAppLimited [variable]
<     cls.add_instance_attribute('m_rateAppLimited', 'bool', is_const=False)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateConnection::m_rateDelivered [variable]
<     cls.add_instance_attribute('m_rateDelivered', 'int32_t', is_const=False)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateConnection::m_rateInterval [variable]
<     cls.add_instance_attribute('m_rateInterval', 'ns3::Time', is_const=False)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateConnection::m_txItemDelivered [variable]
<     cls.add_instance_attribute('m_txItemDelivered', 'uint32_t', is_const=False)
<     return
< 
< def register_Ns3TcpRateOpsTcpRateSample_methods(root_module, cls):
<     cls.add_output_stream_operator()
<     cls.add_binary_comparison_operator('==')
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateSample::TcpRateSample() [constructor]
<     cls.add_constructor([])
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateSample::TcpRateSample(ns3::TcpRateOps::TcpRateSample const & arg0) [constructor]
<     cls.add_constructor([param('ns3::TcpRateOps::TcpRateSample const &', 'arg0')])
<     ## tcp-rate-ops.h (module 'internet'): bool ns3::TcpRateOps::TcpRateSample::IsValid() const [member function]
<     cls.add_method('IsValid', 
<                    'bool', 
<                    [], 
<                    is_const=True)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateSample::m_ackElapsed [variable]
<     cls.add_instance_attribute('m_ackElapsed', 'ns3::Time', is_const=False)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateSample::m_ackedSacked [variable]
<     cls.add_instance_attribute('m_ackedSacked', 'uint32_t', is_const=False)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateSample::m_bytesLoss [variable]
<     cls.add_instance_attribute('m_bytesLoss', 'uint32_t', is_const=False)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateSample::m_delivered [variable]
<     cls.add_instance_attribute('m_delivered', 'int32_t', is_const=False)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateSample::m_deliveryRate [variable]
<     cls.add_instance_attribute('m_deliveryRate', 'ns3::DataRate', is_const=False)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateSample::m_interval [variable]
<     cls.add_instance_attribute('m_interval', 'ns3::Time', is_const=False)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateSample::m_isAppLimited [variable]
<     cls.add_instance_attribute('m_isAppLimited', 'bool', is_const=False)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateSample::m_priorDelivered [variable]
<     cls.add_instance_attribute('m_priorDelivered', 'uint32_t', is_const=False)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateSample::m_priorInFlight [variable]
<     cls.add_instance_attribute('m_priorInFlight', 'uint32_t', is_const=False)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateSample::m_priorTime [variable]
<     cls.add_instance_attribute('m_priorTime', 'ns3::Time', is_const=False)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateSample::m_sendElapsed [variable]
<     cls.add_instance_attribute('m_sendElapsed', 'ns3::Time', is_const=False)
<     return
< 
< def register_Ns3TcpRecoveryOps_methods(root_module, cls):
<     ## tcp-recovery-ops.h (module 'internet'): ns3::TcpRecoveryOps::TcpRecoveryOps() [constructor]
<     cls.add_constructor([])
<     ## tcp-recovery-ops.h (module 'internet'): ns3::TcpRecoveryOps::TcpRecoveryOps(ns3::TcpRecoveryOps const & other) [constructor]
<     cls.add_constructor([param('ns3::TcpRecoveryOps const &', 'other')])
<     ## tcp-recovery-ops.h (module 'internet'): void ns3::TcpRecoveryOps::DoRecovery(ns3::Ptr<ns3::TcpSocketState> tcb, uint32_t deliveredBytes) [member function]
<     cls.add_method('DoRecovery', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb'), param('uint32_t', 'deliveredBytes')], 
<                    is_virtual=True, is_pure_virtual=True)
<     ## tcp-recovery-ops.h (module 'internet'): void ns3::TcpRecoveryOps::EnterRecovery(ns3::Ptr<ns3::TcpSocketState> tcb, uint32_t dupAckCount, uint32_t unAckDataCount, uint32_t deliveredBytes) [member function]
<     cls.add_method('EnterRecovery', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb'), param('uint32_t', 'dupAckCount'), param('uint32_t', 'unAckDataCount'), param('uint32_t', 'deliveredBytes')], 
<                    is_virtual=True, is_pure_virtual=True)
<     ## tcp-recovery-ops.h (module 'internet'): void ns3::TcpRecoveryOps::ExitRecovery(ns3::Ptr<ns3::TcpSocketState> tcb) [member function]
<     cls.add_method('ExitRecovery', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb')], 
<                    is_virtual=True, is_pure_virtual=True)
<     ## tcp-recovery-ops.h (module 'internet'): ns3::Ptr<ns3::TcpRecoveryOps> ns3::TcpRecoveryOps::Fork() [member function]
<     cls.add_method('Fork', 
<                    'ns3::Ptr< ns3::TcpRecoveryOps >', 
<                    [], 
<                    is_virtual=True, is_pure_virtual=True)
<     ## tcp-recovery-ops.h (module 'internet'): std::string ns3::TcpRecoveryOps::GetName() const [member function]
<     cls.add_method('GetName', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
<     ## tcp-recovery-ops.h (module 'internet'): static ns3::TypeId ns3::TcpRecoveryOps::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## tcp-recovery-ops.h (module 'internet'): void ns3::TcpRecoveryOps::UpdateBytesSent(uint32_t bytesSent) [member function]
<     cls.add_method('UpdateBytesSent', 
<                    'void', 
<                    [param('uint32_t', 'bytesSent')], 
<                    is_virtual=True)
<     return
< 
11112c9918
<     ## tcp-rx-buffer.h (module 'internet'): ns3::TcpRxBuffer::TcpRxBuffer(ns3::TcpRxBuffer const & arg0) [constructor]
---
>     ## tcp-rx-buffer.h (module 'internet'): ns3::TcpRxBuffer::TcpRxBuffer(ns3::TcpRxBuffer const & arg0) [copy constructor]
11133,11142d9938
<     ## tcp-rx-buffer.h (module 'internet'): ns3::TcpOptionSack::SackList ns3::TcpRxBuffer::GetSackList() const [member function]
<     cls.add_method('GetSackList', 
<                    'ns3::TcpOptionSack::SackList', 
<                    [], 
<                    is_const=True)
<     ## tcp-rx-buffer.h (module 'internet'): uint32_t ns3::TcpRxBuffer::GetSackListSize() const [member function]
<     cls.add_method('GetSackListSize', 
<                    'uint32_t', 
<                    [], 
<                    is_const=True)
11148,11152d9943
<     ## tcp-rx-buffer.h (module 'internet'): bool ns3::TcpRxBuffer::GotFin() const [member function]
<     cls.add_method('GotFin', 
<                    'bool', 
<                    [], 
<                    is_const=True)
11194c9985
<     ## tcp-scalable.h (module 'internet'): ns3::TcpScalable::TcpScalable(ns3::TcpScalable const & sock) [constructor]
---
>     ## tcp-scalable.h (module 'internet'): ns3::TcpScalable::TcpScalable(ns3::TcpScalable const & sock) [copy constructor]
11220c10011
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
11224c10015
<     ## tcp-socket.h (module 'internet'): ns3::TcpSocket::TcpSocket(ns3::TcpSocket const & arg0) [constructor]
---
>     ## tcp-socket.h (module 'internet'): ns3::TcpSocket::TcpSocket(ns3::TcpSocket const & arg0) [copy constructor]
11239c10030
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
11244c10035
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
11249c10040
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
11254c10045
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
11259c10050
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
11264c10055
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
11269c10060
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
11274c10065
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
11279c10070
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
11284c10075
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
11289c10080
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
11294c10085
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
11299c10090
<                    is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
11304c10095
<                    is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
11309c10100
<                    is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
11314c10105
<                    is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
11319c10110
<                    is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
11324c10115
<                    is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
11329c10120
<                    is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
11334c10125
<                    is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
11339c10130
<                    is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
11344c10135
<                    is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
11349c10140
<                    is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
11354c10145
<                    is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
11360c10151
<     ## tcp-socket-base.h (module 'internet'): ns3::TcpSocketBase::TcpSocketBase(ns3::TcpSocketBase const & sock) [constructor]
---
>     ## tcp-socket-base.h (module 'internet'): ns3::TcpSocketBase::TcpSocketBase(ns3::TcpSocketBase const & sock) [copy constructor]
11382,11406d10172
<     ## tcp-socket-base.h (module 'internet'): bool ns3::TcpSocketBase::CheckEcnCe(uint8_t tos) const [member function]
<     cls.add_method('CheckEcnCe', 
<                    'bool', 
<                    [param('uint8_t', 'tos')], 
<                    is_const=True)
<     ## tcp-socket-base.h (module 'internet'): bool ns3::TcpSocketBase::CheckEcnEct0(uint8_t tos) const [member function]
<     cls.add_method('CheckEcnEct0', 
<                    'bool', 
<                    [param('uint8_t', 'tos')], 
<                    is_const=True)
<     ## tcp-socket-base.h (module 'internet'): bool ns3::TcpSocketBase::CheckEcnEct1(uint8_t tos) const [member function]
<     cls.add_method('CheckEcnEct1', 
<                    'bool', 
<                    [param('uint8_t', 'tos')], 
<                    is_const=True)
<     ## tcp-socket-base.h (module 'internet'): bool ns3::TcpSocketBase::CheckNoEcn(uint8_t tos) const [member function]
<     cls.add_method('CheckNoEcn', 
<                    'bool', 
<                    [param('uint8_t', 'tos')], 
<                    is_const=True)
<     ## tcp-socket-base.h (module 'internet'): uint8_t ns3::TcpSocketBase::ClearEcnBits(uint8_t tos) const [member function]
<     cls.add_method('ClearEcnBits', 
<                    'uint8_t', 
<                    [param('uint8_t', 'tos')], 
<                    is_const=True)
11447,11451d10212
<     ## tcp-socket-base.h (module 'internet'): uint32_t ns3::TcpSocketBase::GetRetxThresh() const [member function]
<     cls.add_method('GetRetxThresh', 
<                    'uint32_t', 
<                    [], 
<                    is_const=True)
11492,11511d10252
<     ## tcp-socket-base.h (module 'internet'): uint8_t ns3::TcpSocketBase::MarkEcnCe(uint8_t tos) const [member function]
<     cls.add_method('MarkEcnCe', 
<                    'uint8_t', 
<                    [param('uint8_t', 'tos')], 
<                    is_const=True)
<     ## tcp-socket-base.h (module 'internet'): uint8_t ns3::TcpSocketBase::MarkEcnCodePoint(uint8_t const tos, ns3::TcpSocketState::EcnCodePoint_t const codePoint) const [member function]
<     cls.add_method('MarkEcnCodePoint', 
<                    'uint8_t', 
<                    [param('uint8_t const', 'tos'), param('ns3::TcpSocketState::EcnCodePoint_t const', 'codePoint')], 
<                    is_const=True)
<     ## tcp-socket-base.h (module 'internet'): uint8_t ns3::TcpSocketBase::MarkEcnEct0(uint8_t tos) const [member function]
<     cls.add_method('MarkEcnEct0', 
<                    'uint8_t', 
<                    [param('uint8_t', 'tos')], 
<                    is_const=True)
<     ## tcp-socket-base.h (module 'internet'): uint8_t ns3::TcpSocketBase::MarkEcnEct1(uint8_t tos) const [member function]
<     cls.add_method('MarkEcnEct1', 
<                    'uint8_t', 
<                    [param('uint8_t', 'tos')], 
<                    is_const=True)
11549,11556d10289
<     ## tcp-socket-base.h (module 'internet'): void ns3::TcpSocketBase::SetRecoveryAlgorithm(ns3::Ptr<ns3::TcpRecoveryOps> recovery) [member function]
<     cls.add_method('SetRecoveryAlgorithm', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::TcpRecoveryOps >', 'recovery')])
<     ## tcp-socket-base.h (module 'internet'): void ns3::TcpSocketBase::SetRetxThresh(uint32_t retxThresh) [member function]
<     cls.add_method('SetRetxThresh', 
<                    'void', 
<                    [param('uint32_t', 'retxThresh')])
11567,11570d10299
<     ## tcp-socket-base.h (module 'internet'): void ns3::TcpSocketBase::SetUseEcn(ns3::TcpSocketState::UseEcn_t useEcn) [member function]
<     cls.add_method('SetUseEcn', 
<                    'void', 
<                    [param('ns3::TcpSocketState::UseEcn_t', 'useEcn')])
11581,11584d10309
<     ## tcp-socket-base.h (module 'internet'): void ns3::TcpSocketBase::UpdateBytesInFlight(uint32_t oldValue, uint32_t newValue) [member function]
<     cls.add_method('UpdateBytesInFlight', 
<                    'void', 
<                    [param('uint32_t', 'oldValue'), param('uint32_t', 'newValue')])
11593,11600d10317
<     ## tcp-socket-base.h (module 'internet'): void ns3::TcpSocketBase::UpdateCwndInfl(uint32_t oldValue, uint32_t newValue) [member function]
<     cls.add_method('UpdateCwndInfl', 
<                    'void', 
<                    [param('uint32_t', 'oldValue'), param('uint32_t', 'newValue')])
<     ## tcp-socket-base.h (module 'internet'): void ns3::TcpSocketBase::UpdateEcnState(ns3::TcpSocketState::EcnState_t oldValue, ns3::TcpSocketState::EcnState_t newValue) [member function]
<     cls.add_method('UpdateEcnState', 
<                    'void', 
<                    [param('ns3::TcpSocketState::EcnState_t', 'oldValue'), param('ns3::TcpSocketState::EcnState_t', 'newValue')])
11604c10321
<                    [param('ns3::SequenceNumber< unsigned int, int >', 'oldValue'), param('ns3::SequenceNumber< unsigned int, int >', 'newValue')])
---
>                    [param('ns3::SequenceNumber32', 'oldValue'), param('ns3::SequenceNumber32', 'newValue')])
11608,11612c10325
<                    [param('ns3::SequenceNumber< unsigned int, int >', 'oldValue'), param('ns3::SequenceNumber< unsigned int, int >', 'newValue')])
<     ## tcp-socket-base.h (module 'internet'): void ns3::TcpSocketBase::UpdateRtt(ns3::Time oldValue, ns3::Time newValue) [member function]
<     cls.add_method('UpdateRtt', 
<                    'void', 
<                    [param('ns3::Time', 'oldValue'), param('ns3::Time', 'newValue')])
---
>                    [param('ns3::SequenceNumber32', 'oldValue'), param('ns3::SequenceNumber32', 'newValue')])
11617,11620d10329
<     ## tcp-socket-base.h (module 'internet'): ns3::TcpSocketBase::m_bytesInFlightTrace [variable]
<     cls.add_instance_attribute('m_bytesInFlightTrace', 'ns3::TracedCallback< unsigned int, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', is_const=False)
<     ## tcp-socket-base.h (module 'internet'): ns3::TcpSocketBase::m_cWndInflTrace [variable]
<     cls.add_instance_attribute('m_cWndInflTrace', 'ns3::TracedCallback< unsigned int, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', is_const=False)
11625,11626d10333
<     ## tcp-socket-base.h (module 'internet'): ns3::TcpSocketBase::m_ecnStateTrace [variable]
<     cls.add_instance_attribute('m_ecnStateTrace', 'ns3::TracedCallback< ns3::TcpSocketState::EcnState_t, ns3::TcpSocketState::EcnState_t, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', is_const=False)
11629,11630d10335
<     ## tcp-socket-base.h (module 'internet'): ns3::TcpSocketBase::m_lastRttTrace [variable]
<     cls.add_instance_attribute('m_lastRttTrace', 'ns3::TracedCallback< ns3::Time, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', is_const=False)
11635,11644d10339
<     ## tcp-socket-base.h (module 'internet'): void ns3::TcpSocketBase::AddOptionSack(ns3::TcpHeader & header) [member function]
<     cls.add_method('AddOptionSack', 
<                    'void', 
<                    [param('ns3::TcpHeader &', 'header')], 
<                    visibility='protected')
<     ## tcp-socket-base.h (module 'internet'): void ns3::TcpSocketBase::AddOptionSackPermitted(ns3::TcpHeader & header) [member function]
<     cls.add_method('AddOptionSackPermitted', 
<                    'void', 
<                    [param('ns3::TcpHeader &', 'header')], 
<                    visibility='protected')
11659,11664c10354
<                    visibility='protected')
<     ## tcp-socket-base.h (module 'internet'): void ns3::TcpSocketBase::AddSocketTags(ns3::Ptr<ns3::Packet> const & p) const [member function]
<     cls.add_method('AddSocketTags', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Packet > const &', 'p')], 
<                    is_const=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
11669c10359
<                    is_const=True, is_virtual=True, visibility='protected')
---
>                    is_const=True, visibility='protected', is_virtual=True)
11674,11675c10364,10365
<                    is_const=True, is_virtual=True, visibility='protected')
<     ## tcp-socket-base.h (module 'internet'): uint32_t ns3::TcpSocketBase::BytesInFlight() const [member function]
---
>                    is_const=True, visibility='protected', is_virtual=True)
>     ## tcp-socket-base.h (module 'internet'): uint32_t ns3::TcpSocketBase::BytesInFlight() [member function]
11679c10369
<                    is_const=True, is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
11699c10389
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
11714c10404
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
11739c10429
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
11749,11750c10439,10440
<                    visibility='protected')
<     ## tcp-socket-base.h (module 'internet'): void ns3::TcpSocketBase::DupAck(uint32_t currentDelivered) [member function]
---
>                    visibility='protected', is_virtual=True)
>     ## tcp-socket-base.h (module 'internet'): void ns3::TcpSocketBase::DupAck() [member function]
11753,11758c10443
<                    [param('uint32_t', 'currentDelivered')], 
<                    visibility='protected')
<     ## tcp-socket-base.h (module 'internet'): void ns3::TcpSocketBase::EnterRecovery(uint32_t currentDelivered) [member function]
<     cls.add_method('EnterRecovery', 
<                    'void', 
<                    [param('uint32_t', 'currentDelivered')], 
---
>                    [], 
11764c10449,10454
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
>     ## tcp-socket-base.h (module 'internet'): void ns3::TcpSocketBase::FastRetransmit() [member function]
>     cls.add_method('FastRetransmit', 
>                    'void', 
>                    [], 
>                    visibility='protected')
11769c10459
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
11794c10484
<                    is_const=True, is_virtual=True, visibility='protected')
---
>                    is_const=True, visibility='protected', is_virtual=True)
11799c10489
<                    is_const=True, is_virtual=True, visibility='protected')
---
>                    is_const=True, visibility='protected', is_virtual=True)
11804c10494
<                    is_const=True, is_virtual=True, visibility='protected')
---
>                    is_const=True, visibility='protected', is_virtual=True)
11809c10499
<                    is_const=True, is_virtual=True, visibility='protected')
---
>                    is_const=True, visibility='protected', is_virtual=True)
11814c10504
<                    is_const=True, is_virtual=True, visibility='protected')
---
>                    is_const=True, visibility='protected', is_virtual=True)
11819c10509
<                    is_const=True, is_virtual=True, visibility='protected')
---
>                    is_const=True, visibility='protected', is_virtual=True)
11824c10514
<                    is_const=True, is_virtual=True, visibility='protected')
---
>                    is_const=True, visibility='protected', is_virtual=True)
11829c10519
<                    is_const=True, is_virtual=True, visibility='protected')
---
>                    is_const=True, visibility='protected', is_virtual=True)
11834c10524
<                    is_const=True, is_virtual=True, visibility='protected')
---
>                    is_const=True, visibility='protected', is_virtual=True)
11839c10529
<                    is_const=True, is_virtual=True, visibility='protected')
---
>                    is_const=True, visibility='protected', is_virtual=True)
11844c10534
<                    is_const=True, is_virtual=True, visibility='protected')
---
>                    is_const=True, visibility='protected', is_virtual=True)
11849c10539
<                    is_const=True, is_virtual=True, visibility='protected')
---
>                    is_const=True, visibility='protected', is_virtual=True)
11854,11864c10544
<                    is_const=True, is_virtual=True, visibility='protected')
<     ## tcp-socket-base.h (module 'internet'): bool ns3::TcpSocketBase::IsTcpOptionEnabled(uint8_t kind) const [member function]
<     cls.add_method('IsTcpOptionEnabled', 
<                    'bool', 
<                    [param('uint8_t', 'kind')], 
<                    is_const=True, visibility='protected')
<     ## tcp-socket-base.h (module 'internet'): bool ns3::TcpSocketBase::IsValidTcpSegment(ns3::SequenceNumber32 const seq, uint32_t const tcpHeaderSize, uint32_t const tcpPayloadSize) [member function]
<     cls.add_method('IsValidTcpSegment', 
<                    'bool', 
<                    [param('ns3::SequenceNumber32 const', 'seq'), param('uint32_t const', 'tcpHeaderSize'), param('uint32_t const', 'tcpPayloadSize')], 
<                    visibility='protected')
---
>                    is_const=True, visibility='protected', is_virtual=True)
11869c10549,10554
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
>     ## tcp-socket-base.h (module 'internet'): void ns3::TcpSocketBase::LimitedTransmit() [member function]
>     cls.add_method('LimitedTransmit', 
>                    'void', 
>                    [], 
>                    visibility='protected')
11874,11879c10559
<                    is_virtual=True, visibility='protected')
<     ## tcp-socket-base.h (module 'internet'): void ns3::TcpSocketBase::NotifyPacingPerformed() [member function]
<     cls.add_method('NotifyPacingPerformed', 
<                    'void', 
<                    [], 
<                    visibility='protected')
---
>                    visibility='protected', is_virtual=True)
11883c10563
<                    [param('ns3::SequenceNumber< unsigned int, int >', 'head'), param('ns3::SequenceNumber< unsigned int, int >', 'tail')], 
---
>                    [param('ns3::SequenceNumber32', 'head'), param('ns3::SequenceNumber32', 'tail')], 
11894,11899c10574
<                    is_virtual=True, visibility='protected')
<     ## tcp-socket-base.h (module 'internet'): void ns3::TcpSocketBase::ProcessAck(ns3::SequenceNumber32 const & ackNumber, bool scoreboardUpdated, uint32_t currentDelivered, ns3::SequenceNumber32 const & oldHeadSequence) [member function]
<     cls.add_method('ProcessAck', 
<                    'void', 
<                    [param('ns3::SequenceNumber32 const &', 'ackNumber'), param('bool', 'scoreboardUpdated'), param('uint32_t', 'currentDelivered'), param('ns3::SequenceNumber32 const &', 'oldHeadSequence')], 
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
11920,11929d10594
<     ## tcp-socket-base.h (module 'internet'): uint32_t ns3::TcpSocketBase::ProcessOptionSack(ns3::Ptr<const ns3::TcpOption> const option) [member function]
<     cls.add_method('ProcessOptionSack', 
<                    'uint32_t', 
<                    [param('ns3::Ptr< ns3::TcpOption const > const', 'option')], 
<                    visibility='protected')
<     ## tcp-socket-base.h (module 'internet'): void ns3::TcpSocketBase::ProcessOptionSackPermitted(ns3::Ptr<const ns3::TcpOption> const option) [member function]
<     cls.add_method('ProcessOptionSackPermitted', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::TcpOption const > const', 'option')], 
<                    visibility='protected')
11959,11964c10624
<                    is_virtual=True, visibility='protected')
<     ## tcp-socket-base.h (module 'internet'): void ns3::TcpSocketBase::ReadOptions(ns3::TcpHeader const & tcpHeader, uint32_t * bytesSacked) [member function]
<     cls.add_method('ReadOptions', 
<                    'void', 
<                    [param('ns3::TcpHeader const &', 'tcpHeader'), param('uint32_t *', 'bytesSacked')], 
<                    visibility='protected')
---
>                    visibility='protected', is_virtual=True)
11969c10629
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
11974c10634,10639
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
>     ## tcp-socket-base.h (module 'internet'): void ns3::TcpSocketBase::Retransmit() [member function]
>     cls.add_method('Retransmit', 
>                    'void', 
>                    [], 
>                    visibility='protected', is_virtual=True)
11983,11984c10648,10649
<                    [param('ns3::SequenceNumber< unsigned int, int >', 'seq'), param('uint32_t', 'maxSize'), param('bool', 'withAck')], 
<                    is_virtual=True, visibility='protected')
---
>                    [param('ns3::SequenceNumber32', 'seq'), param('uint32_t', 'maxSize'), param('bool', 'withAck')], 
>                    visibility='protected')
11989,11990c10654,10655
<                    is_virtual=True, visibility='protected')
<     ## tcp-socket-base.h (module 'internet'): uint32_t ns3::TcpSocketBase::SendPendingData(bool withAck=false) [member function]
---
>                    visibility='protected', is_virtual=True)
>     ## tcp-socket-base.h (module 'internet'): bool ns3::TcpSocketBase::SendPendingData(bool withAck=false) [member function]
11992c10657
<                    'uint32_t', 
---
>                    'bool', 
12004c10669
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
12009c10674
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
12014c10679
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
12019c10684
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
12024c10689
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
12029c10694
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
12034c10699
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
12039c10704
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
12044c10709
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
12049c10714
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
12054c10719
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
12059c10724
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
12064c10729
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
12089c10754
<                    is_const=True, is_virtual=True, visibility='protected')
---
>                    is_const=True, visibility='protected', is_virtual=True)
12094c10759
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
12104c10769
<                    is_const=True, is_virtual=True, visibility='protected')
---
>                    is_const=True, visibility='protected', is_virtual=True)
12110c10775
<     ## tcp-socket-factory.h (module 'internet'): ns3::TcpSocketFactory::TcpSocketFactory(ns3::TcpSocketFactory const & arg0) [constructor]
---
>     ## tcp-socket-factory.h (module 'internet'): ns3::TcpSocketFactory::TcpSocketFactory(ns3::TcpSocketFactory const & arg0) [copy constructor]
12120c10785
<     ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::TcpSocketState() [constructor]
---
>     ## tcp-socket-base.h (module 'internet'): ns3::TcpSocketState::TcpSocketState() [constructor]
12122c10787
<     ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::TcpSocketState(ns3::TcpSocketState const & other) [constructor]
---
>     ## tcp-socket-base.h (module 'internet'): ns3::TcpSocketState::TcpSocketState(ns3::TcpSocketState const & other) [copy constructor]
12124c10789
<     ## tcp-socket-state.h (module 'internet'): uint32_t ns3::TcpSocketState::GetCwndInSegments() const [member function]
---
>     ## tcp-socket-base.h (module 'internet'): uint32_t ns3::TcpSocketState::GetCwndInSegments() const [member function]
12129c10794
<     ## tcp-socket-state.h (module 'internet'): uint32_t ns3::TcpSocketState::GetSsThreshInSegments() const [member function]
---
>     ## tcp-socket-base.h (module 'internet'): uint32_t ns3::TcpSocketState::GetSsThreshInSegments() const [member function]
12134c10799
<     ## tcp-socket-state.h (module 'internet'): static ns3::TypeId ns3::TcpSocketState::GetTypeId() [member function]
---
>     ## tcp-socket-base.h (module 'internet'): static ns3::TypeId ns3::TcpSocketState::GetTypeId() [member function]
12139,12141c10804
<     ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::EcnStateName [variable]
<     cls.add_static_attribute('EcnStateName', 'char const * [ 6 ] const', is_const=True)
<     ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::TcpCongStateName [variable]
---
>     ## tcp-socket-base.h (module 'internet'): ns3::TcpSocketState::TcpCongStateName [variable]
12143,12145c10806
<     ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::m_bytesInFlight [variable]
<     cls.add_instance_attribute('m_bytesInFlight', 'ns3::TracedValue< unsigned int >', is_const=False)
<     ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::m_cWnd [variable]
---
>     ## tcp-socket-base.h (module 'internet'): ns3::TcpSocketState::m_cWnd [variable]
12147,12149c10808
<     ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::m_cWndInfl [variable]
<     cls.add_instance_attribute('m_cWndInfl', 'ns3::TracedValue< unsigned int >', is_const=False)
<     ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::m_congState [variable]
---
>     ## tcp-socket-base.h (module 'internet'): ns3::TcpSocketState::m_congState [variable]
12151,12159c10810
<     ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::m_currentPacingRate [variable]
<     cls.add_instance_attribute('m_currentPacingRate', 'ns3::DataRate', is_const=False)
<     ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::m_ecnMode [variable]
<     cls.add_instance_attribute('m_ecnMode', 'ns3::TcpSocketState::EcnMode_t', is_const=False)
<     ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::m_ecnState [variable]
<     cls.add_instance_attribute('m_ecnState', 'ns3::TracedValue< ns3::TcpSocketState::EcnState_t >', is_const=False)
<     ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::m_ectCodePoint [variable]
<     cls.add_instance_attribute('m_ectCodePoint', 'ns3::TcpSocketState::EcnCodePoint_t', is_const=False)
<     ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::m_highTxMark [variable]
---
>     ## tcp-socket-base.h (module 'internet'): ns3::TcpSocketState::m_highTxMark [variable]
12161c10812
<     ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::m_initialCWnd [variable]
---
>     ## tcp-socket-base.h (module 'internet'): ns3::TcpSocketState::m_initialCWnd [variable]
12163c10814
<     ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::m_initialSsThresh [variable]
---
>     ## tcp-socket-base.h (module 'internet'): ns3::TcpSocketState::m_initialSsThresh [variable]
12165c10816
<     ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::m_lastAckedSeq [variable]
---
>     ## tcp-socket-base.h (module 'internet'): ns3::TcpSocketState::m_lastAckedSeq [variable]
12167,12173c10818
<     ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::m_lastRtt [variable]
<     cls.add_instance_attribute('m_lastRtt', 'ns3::TracedValue< ns3::Time >', is_const=False)
<     ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::m_maxPacingRate [variable]
<     cls.add_instance_attribute('m_maxPacingRate', 'ns3::DataRate', is_const=False)
<     ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::m_minRtt [variable]
<     cls.add_instance_attribute('m_minRtt', 'ns3::Time', is_const=False)
<     ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::m_nextTxSequence [variable]
---
>     ## tcp-socket-base.h (module 'internet'): ns3::TcpSocketState::m_nextTxSequence [variable]
12175,12183c10820
<     ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::m_pacing [variable]
<     cls.add_instance_attribute('m_pacing', 'bool', is_const=False)
<     ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::m_rcvTimestampEchoReply [variable]
<     cls.add_instance_attribute('m_rcvTimestampEchoReply', 'uint32_t', is_const=False)
<     ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::m_rcvTimestampValue [variable]
<     cls.add_instance_attribute('m_rcvTimestampValue', 'uint32_t', is_const=False)
<     ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::m_rxBuffer [variable]
<     cls.add_instance_attribute('m_rxBuffer', 'ns3::Ptr< ns3::TcpRxBuffer >', is_const=False)
<     ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::m_segmentSize [variable]
---
>     ## tcp-socket-base.h (module 'internet'): ns3::TcpSocketState::m_segmentSize [variable]
12185,12187c10822
<     ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::m_sendEmptyPacketCallback [variable]
<     cls.add_instance_attribute('m_sendEmptyPacketCallback', 'ns3::Callback< void, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', is_const=False)
<     ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::m_ssThresh [variable]
---
>     ## tcp-socket-base.h (module 'internet'): ns3::TcpSocketState::m_ssThresh [variable]
12189,12190d10823
<     ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::m_useEcn [variable]
<     cls.add_instance_attribute('m_useEcn', 'ns3::TcpSocketState::UseEcn_t', is_const=False)
12194,12195c10827
<     cls.add_output_stream_operator()
<     ## tcp-tx-buffer.h (module 'internet'): ns3::TcpTxBuffer::TcpTxBuffer(ns3::TcpTxBuffer const & arg0) [constructor]
---
>     ## tcp-tx-buffer.h (module 'internet'): ns3::TcpTxBuffer::TcpTxBuffer(ns3::TcpTxBuffer const & arg0) [copy constructor]
12203,12206d10834
<     ## tcp-tx-buffer.h (module 'internet'): void ns3::TcpTxBuffer::AddRenoSack() [member function]
<     cls.add_method('AddRenoSack', 
<                    'void', 
<                    [])
12212,12217c10840
<     ## tcp-tx-buffer.h (module 'internet'): uint32_t ns3::TcpTxBuffer::BytesInFlight() const [member function]
<     cls.add_method('BytesInFlight', 
<                    'uint32_t', 
<                    [], 
<                    is_const=True)
<     ## tcp-tx-buffer.h (module 'internet'): ns3::TcpTxItem * ns3::TcpTxBuffer::CopyFromSequence(uint32_t numBytes, ns3::SequenceNumber32 const & seq) [member function]
---
>     ## tcp-tx-buffer.h (module 'internet'): ns3::Ptr<ns3::Packet> ns3::TcpTxBuffer::CopyFromSequence(uint32_t numBytes, ns3::SequenceNumber32 const & seq) [member function]
12219c10842
<                    'ns3::TcpTxItem *', 
---
>                    'ns3::Ptr< ns3::Packet >', 
12221,12225c10844
<     ## tcp-tx-buffer.h (module 'internet'): void ns3::TcpTxBuffer::DeleteRetransmittedFlagFromHead() [member function]
<     cls.add_method('DeleteRetransmittedFlagFromHead', 
<                    'void', 
<                    [])
<     ## tcp-tx-buffer.h (module 'internet'): void ns3::TcpTxBuffer::DiscardUpTo(ns3::SequenceNumber32 const & seq, ns3::Callback<void, ns3::TcpTxItem *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & beforeDelCb=ns3::TcpTxBuffer::m_nullCb) [member function]
---
>     ## tcp-tx-buffer.h (module 'internet'): void ns3::TcpTxBuffer::DiscardUpTo(ns3::SequenceNumber32 const & seq) [member function]
12228,12243c10847
<                    [param('ns3::SequenceNumber32 const &', 'seq'), param('ns3::Callback< void, ns3::TcpTxItem *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'beforeDelCb', default_value='ns3::TcpTxBuffer::m_nullCb')])
<     ## tcp-tx-buffer.h (module 'internet'): uint32_t ns3::TcpTxBuffer::GetLost() const [member function]
<     cls.add_method('GetLost', 
<                    'uint32_t', 
<                    [], 
<                    is_const=True)
<     ## tcp-tx-buffer.h (module 'internet'): uint32_t ns3::TcpTxBuffer::GetRetransmitsCount() const [member function]
<     cls.add_method('GetRetransmitsCount', 
<                    'uint32_t', 
<                    [], 
<                    is_const=True)
<     ## tcp-tx-buffer.h (module 'internet'): uint32_t ns3::TcpTxBuffer::GetSacked() const [member function]
<     cls.add_method('GetSacked', 
<                    'uint32_t', 
<                    [], 
<                    is_const=True)
---
>                    [param('ns3::SequenceNumber32 const &', 'seq')])
12254,12267d10857
<     ## tcp-tx-buffer.h (module 'internet'): bool ns3::TcpTxBuffer::IsHeadRetransmitted() const [member function]
<     cls.add_method('IsHeadRetransmitted', 
<                    'bool', 
<                    [], 
<                    is_const=True)
<     ## tcp-tx-buffer.h (module 'internet'): bool ns3::TcpTxBuffer::IsLost(ns3::SequenceNumber32 const & seq) const [member function]
<     cls.add_method('IsLost', 
<                    'bool', 
<                    [param('ns3::SequenceNumber32 const &', 'seq')], 
<                    is_const=True)
<     ## tcp-tx-buffer.h (module 'internet'): void ns3::TcpTxBuffer::MarkHeadAsLost() [member function]
<     cls.add_method('MarkHeadAsLost', 
<                    'void', 
<                    [])
12273,12293d10862
<     ## tcp-tx-buffer.h (module 'internet'): bool ns3::TcpTxBuffer::NextSeg(ns3::SequenceNumber32 * seq, bool isRecovery) const [member function]
<     cls.add_method('NextSeg', 
<                    'bool', 
<                    [param('ns3::SequenceNumber32 *', 'seq'), param('bool', 'isRecovery')], 
<                    is_const=True)
<     ## tcp-tx-buffer.h (module 'internet'): void ns3::TcpTxBuffer::ResetLastSegmentSent() [member function]
<     cls.add_method('ResetLastSegmentSent', 
<                    'void', 
<                    [])
<     ## tcp-tx-buffer.h (module 'internet'): void ns3::TcpTxBuffer::ResetRenoSack() [member function]
<     cls.add_method('ResetRenoSack', 
<                    'void', 
<                    [])
<     ## tcp-tx-buffer.h (module 'internet'): void ns3::TcpTxBuffer::ResetSentList() [member function]
<     cls.add_method('ResetSentList', 
<                    'void', 
<                    [])
<     ## tcp-tx-buffer.h (module 'internet'): void ns3::TcpTxBuffer::SetDupAckThresh(uint32_t dupAckThresh) [member function]
<     cls.add_method('SetDupAckThresh', 
<                    'void', 
<                    [param('uint32_t', 'dupAckThresh')])
12302,12309d10870
<     ## tcp-tx-buffer.h (module 'internet'): void ns3::TcpTxBuffer::SetSegmentSize(uint32_t segmentSize) [member function]
<     cls.add_method('SetSegmentSize', 
<                    'void', 
<                    [param('uint32_t', 'segmentSize')])
<     ## tcp-tx-buffer.h (module 'internet'): void ns3::TcpTxBuffer::SetSentListLost(bool resetSack=false) [member function]
<     cls.add_method('SetSentListLost', 
<                    'void', 
<                    [param('bool', 'resetSack', default_value='false')])
12325,12328d10885
<     ## tcp-tx-buffer.h (module 'internet'): uint32_t ns3::TcpTxBuffer::Update(ns3::TcpOptionSack::SackList const & list, ns3::Callback<void, ns3::TcpTxItem *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & sackedCb=ns3::TcpTxBuffer::m_nullCb) [member function]
<     cls.add_method('Update', 
<                    'uint32_t', 
<                    [param('ns3::TcpOptionSack::SackList const &', 'list'), param('ns3::Callback< void, ns3::TcpTxItem *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'sackedCb', default_value='ns3::TcpTxBuffer::m_nullCb')])
12334c10891
<     ## tcp-vegas.h (module 'internet'): ns3::TcpVegas::TcpVegas(ns3::TcpVegas const & sock) [constructor]
---
>     ## tcp-vegas.h (module 'internet'): ns3::TcpVegas::TcpVegas(ns3::TcpVegas const & sock) [copy constructor]
12376c10933
<     ## tcp-veno.h (module 'internet'): ns3::TcpVeno::TcpVeno(ns3::TcpVeno const & sock) [constructor]
---
>     ## tcp-veno.h (module 'internet'): ns3::TcpVeno::TcpVeno(ns3::TcpVeno const & sock) [copy constructor]
12418c10975
<     ## tcp-westwood.h (module 'internet'): ns3::TcpWestwood::TcpWestwood(ns3::TcpWestwood const & sock) [constructor]
---
>     ## tcp-westwood.h (module 'internet'): ns3::TcpWestwood::TcpWestwood(ns3::TcpWestwood const & sock) [copy constructor]
12445c11002
<     ## tcp-yeah.h (module 'internet'): ns3::TcpYeah::TcpYeah(ns3::TcpYeah const & sock) [constructor]
---
>     ## tcp-yeah.h (module 'internet'): ns3::TcpYeah::TcpYeah(ns3::TcpYeah const & sock) [copy constructor]
12485,12486d11041
<     cls.add_binary_comparison_operator('==')
<     cls.add_binary_comparison_operator('!=')
12488c11043,11048
<     cls.add_binary_comparison_operator('>=')
---
>     cls.add_binary_comparison_operator('!=')
>     cls.add_inplace_numeric_operator('+=', param('ns3::Time const &', u'right'))
>     cls.add_binary_numeric_operator('*', root_module['ns3::Time'], root_module['ns3::Time'], param('int64_t const &', u'right'))
>     cls.add_binary_numeric_operator('+', root_module['ns3::Time'], root_module['ns3::Time'], param('ns3::Time const &', u'right'))
>     cls.add_binary_numeric_operator('-', root_module['ns3::Time'], root_module['ns3::Time'], param('ns3::Time const &', u'right'))
>     cls.add_binary_numeric_operator('/', root_module['ns3::Time'], root_module['ns3::Time'], param('int64_t const &', u'right'))
12491,12499c11051
<     cls.add_binary_numeric_operator('+', root_module['ns3::Time'], root_module['ns3::Time'], param('ns3::Time const &', 'right'))
<     cls.add_binary_numeric_operator('-', root_module['ns3::Time'], root_module['ns3::Time'], param('ns3::Time const &', 'right'))
<     cls.add_binary_numeric_operator('*', root_module['ns3::Time'], root_module['ns3::Time'], param('int64_t const &', 'right'))
<     cls.add_binary_numeric_operator('*', root_module['ns3::Time'], root_module['ns3::Time'], param('ns3::int64x64_t const &', 'right'))
<     cls.add_binary_numeric_operator('/', root_module['ns3::int64x64_t'], root_module['ns3::Time'], param('ns3::Time const &', 'right'))
<     cls.add_binary_numeric_operator('/', root_module['ns3::Time'], root_module['ns3::Time'], param('int64_t const &', 'right'))
<     cls.add_binary_numeric_operator('/', root_module['ns3::Time'], root_module['ns3::Time'], param('ns3::int64x64_t const &', 'right'))
<     cls.add_inplace_numeric_operator('+=', param('ns3::Time const &', 'right'))
<     cls.add_inplace_numeric_operator('-=', param('ns3::Time const &', 'right'))
---
>     cls.add_inplace_numeric_operator('-=', param('ns3::Time const &', u'right'))
12500a11053,11054
>     cls.add_binary_comparison_operator('==')
>     cls.add_binary_comparison_operator('>=')
12503c11057
<     ## nstime.h (module 'core'): ns3::Time::Time(ns3::Time const & o) [constructor]
---
>     ## nstime.h (module 'core'): ns3::Time::Time(ns3::Time const & o) [copy constructor]
12686c11240
<     ## trace-source-accessor.h (module 'core'): ns3::TraceSourceAccessor::TraceSourceAccessor(ns3::TraceSourceAccessor const & arg0) [constructor]
---
>     ## trace-source-accessor.h (module 'core'): ns3::TraceSourceAccessor::TraceSourceAccessor(ns3::TraceSourceAccessor const & arg0) [copy constructor]
12694c11248
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
12699c11253
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
12704c11258
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
12709c11263
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
12715c11269
<     ## traced-value.h (module 'core'): ns3::TracedValue<ns3::Time>::TracedValue(ns3::TracedValue<ns3::Time> const & o) [constructor]
---
>     ## traced-value.h (module 'core'): ns3::TracedValue<ns3::Time>::TracedValue(ns3::TracedValue<ns3::Time> const & o) [copy constructor]
12719,12721c11273
<     ## traced-value.h (module 'core'): ns3::TracedValue<ns3::Time>::TracedValue(ns3::Time const & other) [constructor]
<     cls.add_constructor([param('ns3::Time const &', 'other')])
<     ## traced-value.h (module 'core'): void ns3::TracedValue<ns3::Time>::Connect(ns3::CallbackBase const & cb, std::string path) [member function]
---
>     ## traced-value.h (module 'core'): void ns3::TracedValue<ns3::Time>::Connect(ns3::CallbackBase const & cb, std::basic_string<char,std::char_traits<char>,std::allocator<char> > path) [member function]
12729c11281
<     ## traced-value.h (module 'core'): void ns3::TracedValue<ns3::Time>::Disconnect(ns3::CallbackBase const & cb, std::string path) [member function]
---
>     ## traced-value.h (module 'core'): void ns3::TracedValue<ns3::Time>::Disconnect(ns3::CallbackBase const & cb, std::basic_string<char,std::char_traits<char>,std::allocator<char> > path) [member function]
12747a11300,11367
> def register_Ns3TrafficControlLayer_methods(root_module, cls):
>     ## traffic-control-layer.h (module 'traffic-control'): ns3::TrafficControlLayer::TrafficControlLayer() [constructor]
>     cls.add_constructor([])
>     ## traffic-control-layer.h (module 'traffic-control'): void ns3::TrafficControlLayer::DeleteRootQueueDiscOnDevice(ns3::Ptr<ns3::NetDevice> device) [member function]
>     cls.add_method('DeleteRootQueueDiscOnDevice', 
>                    'void', 
>                    [param('ns3::Ptr< ns3::NetDevice >', 'device')], 
>                    is_virtual=True)
>     ## traffic-control-layer.h (module 'traffic-control'): ns3::TypeId ns3::TrafficControlLayer::GetInstanceTypeId() const [member function]
>     cls.add_method('GetInstanceTypeId', 
>                    'ns3::TypeId', 
>                    [], 
>                    is_const=True, is_virtual=True)
>     ## traffic-control-layer.h (module 'traffic-control'): ns3::Ptr<ns3::QueueDisc> ns3::TrafficControlLayer::GetRootQueueDiscOnDevice(ns3::Ptr<ns3::NetDevice> device) const [member function]
>     cls.add_method('GetRootQueueDiscOnDevice', 
>                    'ns3::Ptr< ns3::QueueDisc >', 
>                    [param('ns3::Ptr< ns3::NetDevice >', 'device')], 
>                    is_const=True, is_virtual=True)
>     ## traffic-control-layer.h (module 'traffic-control'): static ns3::TypeId ns3::TrafficControlLayer::GetTypeId() [member function]
>     cls.add_method('GetTypeId', 
>                    'ns3::TypeId', 
>                    [], 
>                    is_static=True)
>     ## traffic-control-layer.h (module 'traffic-control'): void ns3::TrafficControlLayer::Receive(ns3::Ptr<ns3::NetDevice> device, ns3::Ptr<ns3::Packet const> p, uint16_t protocol, ns3::Address const & from, ns3::Address const & to, ns3::NetDevice::PacketType packetType) [member function]
>     cls.add_method('Receive', 
>                    'void', 
>                    [param('ns3::Ptr< ns3::NetDevice >', 'device'), param('ns3::Ptr< ns3::Packet const >', 'p'), param('uint16_t', 'protocol'), param('ns3::Address const &', 'from'), param('ns3::Address const &', 'to'), param('ns3::NetDevice::PacketType', 'packetType')], 
>                    is_virtual=True)
>     ## traffic-control-layer.h (module 'traffic-control'): void ns3::TrafficControlLayer::RegisterProtocolHandler(ns3::Callback<void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<ns3::Packet const>, unsigned short, ns3::Address const&, ns3::Address const&, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty> handler, uint16_t protocolType, ns3::Ptr<ns3::NetDevice> device) [member function]
>     cls.add_method('RegisterProtocolHandler', 
>                    'void', 
>                    [param('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >', 'handler'), param('uint16_t', 'protocolType'), param('ns3::Ptr< ns3::NetDevice >', 'device')])
>     ## traffic-control-layer.h (module 'traffic-control'): void ns3::TrafficControlLayer::Send(ns3::Ptr<ns3::NetDevice> device, ns3::Ptr<ns3::QueueDiscItem> item) [member function]
>     cls.add_method('Send', 
>                    'void', 
>                    [param('ns3::Ptr< ns3::NetDevice >', 'device'), param('ns3::Ptr< ns3::QueueDiscItem >', 'item')], 
>                    is_virtual=True)
>     ## traffic-control-layer.h (module 'traffic-control'): void ns3::TrafficControlLayer::SetNode(ns3::Ptr<ns3::Node> node) [member function]
>     cls.add_method('SetNode', 
>                    'void', 
>                    [param('ns3::Ptr< ns3::Node >', 'node')])
>     ## traffic-control-layer.h (module 'traffic-control'): void ns3::TrafficControlLayer::SetRootQueueDiscOnDevice(ns3::Ptr<ns3::NetDevice> device, ns3::Ptr<ns3::QueueDisc> qDisc) [member function]
>     cls.add_method('SetRootQueueDiscOnDevice', 
>                    'void', 
>                    [param('ns3::Ptr< ns3::NetDevice >', 'device'), param('ns3::Ptr< ns3::QueueDisc >', 'qDisc')], 
>                    is_virtual=True)
>     ## traffic-control-layer.h (module 'traffic-control'): void ns3::TrafficControlLayer::SetupDevice(ns3::Ptr<ns3::NetDevice> device) [member function]
>     cls.add_method('SetupDevice', 
>                    'void', 
>                    [param('ns3::Ptr< ns3::NetDevice >', 'device')], 
>                    is_virtual=True)
>     ## traffic-control-layer.h (module 'traffic-control'): void ns3::TrafficControlLayer::DoDispose() [member function]
>     cls.add_method('DoDispose', 
>                    'void', 
>                    [], 
>                    visibility='protected', is_virtual=True)
>     ## traffic-control-layer.h (module 'traffic-control'): void ns3::TrafficControlLayer::DoInitialize() [member function]
>     cls.add_method('DoInitialize', 
>                    'void', 
>                    [], 
>                    visibility='protected', is_virtual=True)
>     ## traffic-control-layer.h (module 'traffic-control'): void ns3::TrafficControlLayer::NotifyNewAggregate() [member function]
>     cls.add_method('NotifyNewAggregate', 
>                    'void', 
>                    [], 
>                    visibility='protected', is_virtual=True)
>     return
> 
12752c11372
<     ## trailer.h (module 'network'): ns3::Trailer::Trailer(ns3::Trailer const & arg0) [constructor]
---
>     ## trailer.h (module 'network'): ns3::Trailer::Trailer(ns3::Trailer const & arg0) [copy constructor]
12758,12763c11378
<                    is_virtual=True, is_pure_virtual=True)
<     ## trailer.h (module 'network'): uint32_t ns3::Trailer::Deserialize(ns3::Buffer::Iterator start, ns3::Buffer::Iterator end) [member function]
<     cls.add_method('Deserialize', 
<                    'uint32_t', 
<                    [param('ns3::Buffer::Iterator', 'start'), param('ns3::Buffer::Iterator', 'end')], 
<                    is_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
12768c11383
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
12778c11393
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
12783c11398
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
12830c11445
<     ## udp-header.h (module 'internet'): ns3::UdpHeader::UdpHeader(ns3::UdpHeader const & arg0) [constructor]
---
>     ## udp-header.h (module 'internet'): ns3::UdpHeader::UdpHeader(ns3::UdpHeader const & arg0) [copy constructor]
12918c11533
<     ## udp-socket.h (module 'internet'): ns3::UdpSocket::UdpSocket(ns3::UdpSocket const & arg0) [constructor]
---
>     ## udp-socket.h (module 'internet'): ns3::UdpSocket::UdpSocket(ns3::UdpSocket const & arg0) [copy constructor]
12931c11546
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
12936c11551
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
12941c11556
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
12946c11561
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
12951c11566
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
12956c11571
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
12961c11576
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
12966c11581
<                    is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
12971c11586
<                    is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
12976c11591
<                    is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
12981c11596
<                    is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
12986c11601
<                    is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
12992c11607
<     ## udp-socket-factory.h (module 'internet'): ns3::UdpSocketFactory::UdpSocketFactory(ns3::UdpSocketFactory const & arg0) [constructor]
---
>     ## udp-socket-factory.h (module 'internet'): ns3::UdpSocketFactory::UdpSocketFactory(ns3::UdpSocketFactory const & arg0) [copy constructor]
13198c11813
<     ## arp-cache.h (module 'internet'): std::list<ns3::ArpCache::Entry *, std::allocator<ns3::ArpCache::Entry *> > ns3::ArpCache::LookupInverse(ns3::Address destination) [member function]
---
>     ## arp-cache.h (module 'internet'): std::list<ns3::ArpCache::Entry*,std::allocator<ns3::ArpCache::Entry*> > ns3::ArpCache::LookupInverse(ns3::Address destination) [member function]
13214c11829
<     ## arp-cache.h (module 'internet'): void ns3::ArpCache::SetArpRequestCallback(ns3::Callback<void, ns3::Ptr<const ns3::ArpCache>, ns3::Ipv4Address, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> arpRequestCallback) [member function]
---
>     ## arp-cache.h (module 'internet'): void ns3::ArpCache::SetArpRequestCallback(ns3::Callback<void, ns3::Ptr<ns3::ArpCache const>, ns3::Ipv4Address, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> arpRequestCallback) [member function]
13238c11853
<                    is_virtual=True, visibility='private')
---
>                    visibility='private', is_virtual=True)
13242c11857
<     ## arp-cache.h (module 'internet'): ns3::ArpCache::Entry::Entry(ns3::ArpCache::Entry const & arg0) [constructor]
---
>     ## arp-cache.h (module 'internet'): ns3::ArpCache::Entry::Entry(ns3::ArpCache::Entry const & arg0) [copy constructor]
13254c11869
<     ## arp-cache.h (module 'internet'): ns3::ArpCache::Ipv4PayloadHeaderPair ns3::ArpCache::Entry::DequeuePending() [member function]
---
>     ## arp-cache.h (module 'internet'): std::pair<ns3::Ptr<ns3::Packet>,ns3::Ipv4Header> ns3::ArpCache::Entry::DequeuePending() [member function]
13256c11871
<                    'ns3::ArpCache::Ipv4PayloadHeaderPair', 
---
>                    'std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv4Header >', 
13310c11925
<     ## arp-cache.h (module 'internet'): void ns3::ArpCache::Entry::MarkWaitReply(ns3::ArpCache::Ipv4PayloadHeaderPair waiting) [member function]
---
>     ## arp-cache.h (module 'internet'): void ns3::ArpCache::Entry::MarkWaitReply(std::pair<ns3::Ptr<ns3::Packet>,ns3::Ipv4Header> waiting) [member function]
13318,13319c11933,11934
<     ## arp-cache.h (module 'internet'): void ns3::ArpCache::Entry::SetMacAddress(ns3::Address macAddress) [member function]
<     cls.add_method('SetMacAddress', 
---
>     ## arp-cache.h (module 'internet'): void ns3::ArpCache::Entry::SetMacAddresss(ns3::Address macAddress) [member function]
>     cls.add_method('SetMacAddresss', 
13326c11941
<     ## arp-cache.h (module 'internet'): bool ns3::ArpCache::Entry::UpdateWaitReply(ns3::ArpCache::Ipv4PayloadHeaderPair waiting) [member function]
---
>     ## arp-cache.h (module 'internet'): bool ns3::ArpCache::Entry::UpdateWaitReply(std::pair<ns3::Ptr<ns3::Packet>,ns3::Ipv4Header> waiting) [member function]
13335c11950
<     ## arp-header.h (module 'internet'): ns3::ArpHeader::ArpHeader(ns3::ArpHeader const & arg0) [constructor]
---
>     ## arp-header.h (module 'internet'): ns3::ArpHeader::ArpHeader(ns3::ArpHeader const & arg0) [copy constructor]
13342c11957
<     ## arp-header.h (module 'internet'): ns3::Address ns3::ArpHeader::GetDestinationHardwareAddress() const [member function]
---
>     ## arp-header.h (module 'internet'): ns3::Address ns3::ArpHeader::GetDestinationHardwareAddress() [member function]
13345,13347c11960,11961
<                    [], 
<                    is_const=True)
<     ## arp-header.h (module 'internet'): ns3::Ipv4Address ns3::ArpHeader::GetDestinationIpv4Address() const [member function]
---
>                    [])
>     ## arp-header.h (module 'internet'): ns3::Ipv4Address ns3::ArpHeader::GetDestinationIpv4Address() [member function]
13350,13351c11964
<                    [], 
<                    is_const=True)
---
>                    [])
13362c11975
<     ## arp-header.h (module 'internet'): ns3::Address ns3::ArpHeader::GetSourceHardwareAddress() const [member function]
---
>     ## arp-header.h (module 'internet'): ns3::Address ns3::ArpHeader::GetSourceHardwareAddress() [member function]
13365,13367c11978,11979
<                    [], 
<                    is_const=True)
<     ## arp-header.h (module 'internet'): ns3::Ipv4Address ns3::ArpHeader::GetSourceIpv4Address() const [member function]
---
>                    [])
>     ## arp-header.h (module 'internet'): ns3::Ipv4Address ns3::ArpHeader::GetSourceIpv4Address() [member function]
13370,13371c11982
<                    [], 
<                    is_const=True)
---
>                    [])
13417a12029,12030
>     ## arp-l3-protocol.h (module 'internet'): ns3::ArpL3Protocol::PROT_NUMBER [variable]
>     cls.add_static_attribute('PROT_NUMBER', 'uint16_t const', is_const=True)
13423,13424d12035
<     ## arp-l3-protocol.h (module 'internet'): ns3::ArpL3Protocol::PROT_NUMBER [variable]
<     cls.add_static_attribute('PROT_NUMBER', 'uint16_t const', is_const=True)
13431,13434d12041
<     ## arp-l3-protocol.h (module 'internet'): void ns3::ArpL3Protocol::SetTrafficControl(ns3::Ptr<ns3::TrafficControlLayer> tc) [member function]
<     cls.add_method('SetTrafficControl', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::TrafficControlLayer >', 'tc')])
13439c12046
<     ## arp-l3-protocol.h (module 'internet'): void ns3::ArpL3Protocol::Receive(ns3::Ptr<ns3::NetDevice> device, ns3::Ptr<const ns3::Packet> p, uint16_t protocol, ns3::Address const & from, ns3::Address const & to, ns3::NetDevice::PacketType packetType) [member function]
---
>     ## arp-l3-protocol.h (module 'internet'): void ns3::ArpL3Protocol::Receive(ns3::Ptr<ns3::NetDevice> device, ns3::Ptr<ns3::Packet const> p, uint16_t protocol, ns3::Address const & from, ns3::Address const & to, ns3::NetDevice::PacketType packetType) [member function]
13455c12062
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
13460c12067
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
13464c12071
<     ## attribute.h (module 'core'): ns3::AttributeAccessor::AttributeAccessor(ns3::AttributeAccessor const & arg0) [constructor]
---
>     ## attribute.h (module 'core'): ns3::AttributeAccessor::AttributeAccessor(ns3::AttributeAccessor const & arg0) [copy constructor]
13472c12079
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
13477c12084
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
13482c12089
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
13487c12094
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
13491c12098
<     ## attribute.h (module 'core'): ns3::AttributeChecker::AttributeChecker(ns3::AttributeChecker const & arg0) [constructor]
---
>     ## attribute.h (module 'core'): ns3::AttributeChecker::AttributeChecker(ns3::AttributeChecker const & arg0) [copy constructor]
13499c12106
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
13504c12111
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
13509c12116
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
13519c12126
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
13524c12131
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
13529c12136
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
13533c12140
<     ## attribute.h (module 'core'): ns3::AttributeValue::AttributeValue(ns3::AttributeValue const & arg0) [constructor]
---
>     ## attribute.h (module 'core'): ns3::AttributeValue::AttributeValue(ns3::AttributeValue const & arg0) [copy constructor]
13541,13542c12148,12149
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
<     ## attribute.h (module 'core'): bool ns3::AttributeValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
>     ## attribute.h (module 'core'): bool ns3::AttributeValue::DeserializeFromString(std::string value, ns3::Ptr<ns3::AttributeChecker const> checker) [member function]
13546,13547c12153,12154
<                    is_virtual=True, is_pure_virtual=True)
<     ## attribute.h (module 'core'): std::string ns3::AttributeValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
---
>                    is_pure_virtual=True, is_virtual=True)
>     ## attribute.h (module 'core'): std::string ns3::AttributeValue::SerializeToString(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
13551c12158
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
13557c12164
<     ## boolean.h (module 'core'): ns3::BooleanChecker::BooleanChecker(ns3::BooleanChecker const & arg0) [constructor]
---
>     ## boolean.h (module 'core'): ns3::BooleanChecker::BooleanChecker(ns3::BooleanChecker const & arg0) [copy constructor]
13563c12170
<     ## boolean.h (module 'core'): ns3::BooleanValue::BooleanValue(ns3::BooleanValue const & arg0) [constructor]
---
>     ## boolean.h (module 'core'): ns3::BooleanValue::BooleanValue(ns3::BooleanValue const & arg0) [copy constructor]
13574c12181
<     ## boolean.h (module 'core'): bool ns3::BooleanValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
---
>     ## boolean.h (module 'core'): bool ns3::BooleanValue::DeserializeFromString(std::string value, ns3::Ptr<ns3::AttributeChecker const> checker) [member function]
13584c12191
<     ## boolean.h (module 'core'): std::string ns3::BooleanValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
---
>     ## boolean.h (module 'core'): std::string ns3::BooleanValue::SerializeToString(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
13598c12205
<     ## callback.h (module 'core'): ns3::CallbackChecker::CallbackChecker(ns3::CallbackChecker const & arg0) [constructor]
---
>     ## callback.h (module 'core'): ns3::CallbackChecker::CallbackChecker(ns3::CallbackChecker const & arg0) [copy constructor]
13605c12212
<     ## callback.h (module 'core'): ns3::CallbackImplBase::CallbackImplBase(ns3::CallbackImplBase const & arg0) [constructor]
---
>     ## callback.h (module 'core'): ns3::CallbackImplBase::CallbackImplBase(ns3::CallbackImplBase const & arg0) [copy constructor]
13611,13612c12218,12219
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
<     ## callback.h (module 'core'): bool ns3::CallbackImplBase::IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other) const [member function]
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
>     ## callback.h (module 'core'): bool ns3::CallbackImplBase::IsEqual(ns3::Ptr<ns3::CallbackImplBase const> other) const [member function]
13616c12223
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
13622,13801d12228
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True, template_parameters=['ns3::ObjectBase*'], visibility='protected')
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True, template_parameters=['void'], visibility='protected')
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True, template_parameters=['ns3::SequenceNumber<unsigned int', ' int> '], visibility='protected')
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True, template_parameters=['unsigned int'], visibility='protected')
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True, template_parameters=['ns3::TcpSocketState::TcpCongState_t'], visibility='protected')
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True, template_parameters=['ns3::TcpSocketState::EcnState_t'], visibility='protected')
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True, template_parameters=['ns3::Time'], visibility='protected')
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True, template_parameters=['double'], visibility='protected')
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True, template_parameters=['ns3::TcpSocket::TcpStates_t'], visibility='protected')
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True, template_parameters=['ns3::Ptr<ns3::Packet const> '], visibility='protected')
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True, template_parameters=['ns3::Ptr<ns3::NetDevice> '], visibility='protected')
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True, template_parameters=['unsigned short'], visibility='protected')
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True, template_parameters=['ns3::Address const&'], visibility='protected')
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True, template_parameters=['ns3::NetDevice::PacketType'], visibility='protected')
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True, template_parameters=['ns3::Ptr<ns3::Packet> '], visibility='protected')
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True, template_parameters=['ns3::Ipv4Address'], visibility='protected')
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True, template_parameters=['unsigned char'], visibility='protected')
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True, template_parameters=['ns3::Ptr<ns3::Ipv4Route> '], visibility='protected')
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True, template_parameters=['ns3::Ipv6Address'], visibility='protected')
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True, template_parameters=['ns3::Ptr<ns3::Ipv6Route> '], visibility='protected')
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True, template_parameters=['ns3::Ptr<ns3::Socket> '], visibility='protected')
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True, template_parameters=['bool'], visibility='protected')
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True, template_parameters=['ns3::Ipv4Header const&'], visibility='protected')
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True, template_parameters=['ns3::Ptr<ns3::Ipv4> '], visibility='protected')
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True, template_parameters=['ns3::Ipv4L3Protocol::DropReason'], visibility='protected')
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True, template_parameters=['ns3::Ptr<ns3::Ipv6> '], visibility='protected')
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True, template_parameters=['ns3::Ipv6Header const&'], visibility='protected')
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True, template_parameters=['ns3::Ipv6L3Protocol::DropReason'], visibility='protected')
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True, template_parameters=['ns3::Ipv4Header'], visibility='protected')
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True, template_parameters=['ns3::Ptr<ns3::Ipv4Interface> '], visibility='protected')
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True, template_parameters=['ns3::Ipv6Header'], visibility='protected')
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True, template_parameters=['ns3::Ptr<ns3::Ipv6Interface> '], visibility='protected')
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True, template_parameters=['ns3::TcpRateOps::TcpRateConnection const&'], visibility='protected')
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True, template_parameters=['ns3::TcpRateOps::TcpRateSample const&'], visibility='protected')
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True, template_parameters=['ns3::TcpHeader const&'], visibility='protected')
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True, template_parameters=['ns3::Ptr<ns3::TcpSocketBase const> '], visibility='protected')
13805c12232
<     ## callback.h (module 'core'): ns3::CallbackValue::CallbackValue(ns3::CallbackValue const & arg0) [constructor]
---
>     ## callback.h (module 'core'): ns3::CallbackValue::CallbackValue(ns3::CallbackValue const & arg0) [copy constructor]
13816c12243
<     ## callback.h (module 'core'): bool ns3::CallbackValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
---
>     ## callback.h (module 'core'): bool ns3::CallbackValue::DeserializeFromString(std::string value, ns3::Ptr<ns3::AttributeChecker const> checker) [member function]
13821c12248
<     ## callback.h (module 'core'): std::string ns3::CallbackValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
---
>     ## callback.h (module 'core'): std::string ns3::CallbackValue::SerializeToString(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
13833c12260
<     ## channel.h (module 'network'): ns3::Channel::Channel(ns3::Channel const & arg0) [constructor]
---
>     ## channel.h (module 'network'): ns3::Channel::Channel(ns3::Channel const & arg0) [copy constructor]
13837c12264
<     ## channel.h (module 'network'): ns3::Ptr<ns3::NetDevice> ns3::Channel::GetDevice(std::size_t i) const [member function]
---
>     ## channel.h (module 'network'): ns3::Ptr<ns3::NetDevice> ns3::Channel::GetDevice(uint32_t i) const [member function]
13840,13841c12267,12268
<                    [param('std::size_t', 'i')], 
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    [param('uint32_t', 'i')], 
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
13847c12274
<     ## channel.h (module 'network'): std::size_t ns3::Channel::GetNDevices() const [member function]
---
>     ## channel.h (module 'network'): uint32_t ns3::Channel::GetNDevices() const [member function]
13849c12276
<                    'std::size_t', 
---
>                    'uint32_t', 
13851c12278
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
13893c12320
<     ## data-collection-object.h (module 'stats'): ns3::DataCollectionObject::DataCollectionObject(ns3::DataCollectionObject const & arg0) [constructor]
---
>     ## data-collection-object.h (module 'stats'): ns3::DataCollectionObject::DataCollectionObject(ns3::DataCollectionObject const & arg0) [copy constructor]
13926,13965d12352
< def register_Ns3DataRateChecker_methods(root_module, cls):
<     ## data-rate.h (module 'network'): ns3::DataRateChecker::DataRateChecker() [constructor]
<     cls.add_constructor([])
<     ## data-rate.h (module 'network'): ns3::DataRateChecker::DataRateChecker(ns3::DataRateChecker const & arg0) [constructor]
<     cls.add_constructor([param('ns3::DataRateChecker const &', 'arg0')])
<     return
< 
< def register_Ns3DataRateValue_methods(root_module, cls):
<     ## data-rate.h (module 'network'): ns3::DataRateValue::DataRateValue() [constructor]
<     cls.add_constructor([])
<     ## data-rate.h (module 'network'): ns3::DataRateValue::DataRateValue(ns3::DataRate const & value) [constructor]
<     cls.add_constructor([param('ns3::DataRate const &', 'value')])
<     ## data-rate.h (module 'network'): ns3::DataRateValue::DataRateValue(ns3::DataRateValue const & arg0) [constructor]
<     cls.add_constructor([param('ns3::DataRateValue const &', 'arg0')])
<     ## data-rate.h (module 'network'): ns3::Ptr<ns3::AttributeValue> ns3::DataRateValue::Copy() const [member function]
<     cls.add_method('Copy', 
<                    'ns3::Ptr< ns3::AttributeValue >', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## data-rate.h (module 'network'): bool ns3::DataRateValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
<     cls.add_method('DeserializeFromString', 
<                    'bool', 
<                    [param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
<                    is_virtual=True)
<     ## data-rate.h (module 'network'): ns3::DataRate ns3::DataRateValue::Get() const [member function]
<     cls.add_method('Get', 
<                    'ns3::DataRate', 
<                    [], 
<                    is_const=True)
<     ## data-rate.h (module 'network'): std::string ns3::DataRateValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
<     cls.add_method('SerializeToString', 
<                    'std::string', 
<                    [param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')], 
<                    is_const=True, is_virtual=True)
<     ## data-rate.h (module 'network'): void ns3::DataRateValue::Set(ns3::DataRate const & value) [member function]
<     cls.add_method('Set', 
<                    'void', 
<                    [param('ns3::DataRate const &', 'value')])
<     return
< 
13974c12361
<     ## random-variable-stream.h (module 'core'): void ns3::DeterministicRandomVariable::SetValueArray(double * values, std::size_t length) [member function]
---
>     ## random-variable-stream.h (module 'core'): void ns3::DeterministicRandomVariable::SetValueArray(double * values, uint64_t length) [member function]
13977c12364
<                    [param('double *', 'values'), param('std::size_t', 'length')])
---
>                    [param('double *', 'values'), param('uint64_t', 'length')])
13992a12380,12381
>     ## double.h (module 'core'): ns3::DoubleValue::DoubleValue(ns3::DoubleValue const & arg0) [copy constructor]
>     cls.add_constructor([param('ns3::DoubleValue const &', 'arg0')])
13995,13996d12383
<     ## double.h (module 'core'): ns3::DoubleValue::DoubleValue(ns3::DoubleValue const & arg0) [constructor]
<     cls.add_constructor([param('ns3::DoubleValue const &', 'arg0')])
14002c12389
<     ## double.h (module 'core'): bool ns3::DoubleValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
---
>     ## double.h (module 'core'): bool ns3::DoubleValue::DeserializeFromString(std::string value, ns3::Ptr<ns3::AttributeChecker const> checker) [member function]
14012c12399
<     ## double.h (module 'core'): std::string ns3::DoubleValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
---
>     ## double.h (module 'core'): std::string ns3::DoubleValue::SerializeToString(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
14049c12436
<                    is_virtual=True, visibility='private')
---
>                    visibility='private', is_virtual=True)
14054c12441
<                    is_virtual=True, visibility='private')
---
>                    visibility='private', is_virtual=True)
14058c12445
<     ## attribute.h (module 'core'): ns3::EmptyAttributeAccessor::EmptyAttributeAccessor(ns3::EmptyAttributeAccessor const & arg0) [constructor]
---
>     ## attribute.h (module 'core'): ns3::EmptyAttributeAccessor::EmptyAttributeAccessor(ns3::EmptyAttributeAccessor const & arg0) [copy constructor]
14085c12472
<     ## attribute.h (module 'core'): ns3::EmptyAttributeChecker::EmptyAttributeChecker(ns3::EmptyAttributeChecker const & arg0) [constructor]
---
>     ## attribute.h (module 'core'): ns3::EmptyAttributeChecker::EmptyAttributeChecker(ns3::EmptyAttributeChecker const & arg0) [copy constructor]
14122c12509
<     ## attribute.h (module 'core'): ns3::EmptyAttributeValue::EmptyAttributeValue(ns3::EmptyAttributeValue const & arg0) [constructor]
---
>     ## attribute.h (module 'core'): ns3::EmptyAttributeValue::EmptyAttributeValue(ns3::EmptyAttributeValue const & arg0) [copy constructor]
14130,14131c12517,12518
<                    is_const=True, is_virtual=True, visibility='private')
<     ## attribute.h (module 'core'): bool ns3::EmptyAttributeValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
---
>                    is_const=True, visibility='private', is_virtual=True)
>     ## attribute.h (module 'core'): bool ns3::EmptyAttributeValue::DeserializeFromString(std::string value, ns3::Ptr<ns3::AttributeChecker const> checker) [member function]
14135,14136c12522,12523
<                    is_virtual=True, visibility='private')
<     ## attribute.h (module 'core'): std::string ns3::EmptyAttributeValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
---
>                    visibility='private', is_virtual=True)
>     ## attribute.h (module 'core'): std::string ns3::EmptyAttributeValue::SerializeToString(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
14140c12527
<                    is_const=True, is_virtual=True, visibility='private')
---
>                    is_const=True, visibility='private', is_virtual=True)
14144c12531
<     ## enum.h (module 'core'): ns3::EnumChecker::EnumChecker(ns3::EnumChecker const & arg0) [constructor]
---
>     ## enum.h (module 'core'): ns3::EnumChecker::EnumChecker(ns3::EnumChecker const & arg0) [copy constructor]
14189c12576
<     ## enum.h (module 'core'): ns3::EnumValue::EnumValue(ns3::EnumValue const & arg0) [constructor]
---
>     ## enum.h (module 'core'): ns3::EnumValue::EnumValue(ns3::EnumValue const & arg0) [copy constructor]
14200c12587
<     ## enum.h (module 'core'): bool ns3::EnumValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
---
>     ## enum.h (module 'core'): bool ns3::EnumValue::DeserializeFromString(std::string value, ns3::Ptr<ns3::AttributeChecker const> checker) [member function]
14210c12597
<     ## enum.h (module 'core'): std::string ns3::EnumValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
---
>     ## enum.h (module 'core'): std::string ns3::EnumValue::SerializeToString(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
14260c12647
<     ## event-impl.h (module 'core'): ns3::EventImpl::EventImpl(ns3::EventImpl const & arg0) [constructor]
---
>     ## event-impl.h (module 'core'): ns3::EventImpl::EventImpl(ns3::EventImpl const & arg0) [copy constructor]
14280c12667
<                    is_virtual=True, is_pure_virtual=True, visibility='protected')
---
>                    is_pure_virtual=True, visibility='protected', is_virtual=True)
14418c12805
<                    is_virtual=True, visibility='private')
---
>                    visibility='private', is_virtual=True)
14422c12809
<     ## icmpv6-header.h (module 'internet'): ns3::Icmpv6DestinationUnreachable::Icmpv6DestinationUnreachable(ns3::Icmpv6DestinationUnreachable const & arg0) [constructor]
---
>     ## icmpv6-header.h (module 'internet'): ns3::Icmpv6DestinationUnreachable::Icmpv6DestinationUnreachable(ns3::Icmpv6DestinationUnreachable const & arg0) [copy constructor]
14468c12855
<     ## icmpv6-header.h (module 'internet'): ns3::Icmpv6Echo::Icmpv6Echo(ns3::Icmpv6Echo const & arg0) [constructor]
---
>     ## icmpv6-header.h (module 'internet'): ns3::Icmpv6Echo::Icmpv6Echo(ns3::Icmpv6Echo const & arg0) [copy constructor]
14526a12914,12915
>     ## integer.h (module 'core'): ns3::IntegerValue::IntegerValue(ns3::IntegerValue const & arg0) [copy constructor]
>     cls.add_constructor([param('ns3::IntegerValue const &', 'arg0')])
14529,14530d12917
<     ## integer.h (module 'core'): ns3::IntegerValue::IntegerValue(ns3::IntegerValue const & arg0) [constructor]
<     cls.add_constructor([param('ns3::IntegerValue const &', 'arg0')])
14536c12923
<     ## integer.h (module 'core'): bool ns3::IntegerValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
---
>     ## integer.h (module 'core'): bool ns3::IntegerValue::DeserializeFromString(std::string value, ns3::Ptr<ns3::AttributeChecker const> checker) [member function]
14546c12933
<     ## integer.h (module 'core'): std::string ns3::IntegerValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
---
>     ## integer.h (module 'core'): std::string ns3::IntegerValue::SerializeToString(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
14560c12947
<     ## ip-l4-protocol.h (module 'internet'): ns3::IpL4Protocol::IpL4Protocol(ns3::IpL4Protocol const & arg0) [constructor]
---
>     ## ip-l4-protocol.h (module 'internet'): ns3::IpL4Protocol::IpL4Protocol(ns3::IpL4Protocol const & arg0) [copy constructor]
14562c12949
<     ## ip-l4-protocol.h (module 'internet'): ns3::IpL4Protocol::DownTargetCallback ns3::IpL4Protocol::GetDownTarget() const [member function]
---
>     ## ip-l4-protocol.h (module 'internet'): ns3::Callback<void, ns3::Ptr<ns3::Packet>, ns3::Ipv4Address, ns3::Ipv4Address, unsigned char, ns3::Ptr<ns3::Ipv4Route>, ns3::empty, ns3::empty, ns3::empty, ns3::empty> ns3::IpL4Protocol::GetDownTarget() const [member function]
14564c12951
<                    'ns3::IpL4Protocol::DownTargetCallback', 
---
>                    'ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Ipv4Address, ns3::Ipv4Address, unsigned char, ns3::Ptr< ns3::Ipv4Route >, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 
14566,14567c12953,12954
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
<     ## ip-l4-protocol.h (module 'internet'): ns3::IpL4Protocol::DownTargetCallback6 ns3::IpL4Protocol::GetDownTarget6() const [member function]
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
>     ## ip-l4-protocol.h (module 'internet'): ns3::Callback<void, ns3::Ptr<ns3::Packet>, ns3::Ipv6Address, ns3::Ipv6Address, unsigned char, ns3::Ptr<ns3::Ipv6Route>, ns3::empty, ns3::empty, ns3::empty, ns3::empty> ns3::IpL4Protocol::GetDownTarget6() const [member function]
14569c12956
<                    'ns3::IpL4Protocol::DownTargetCallback6', 
---
>                    'ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Ipv6Address, ns3::Ipv6Address, unsigned char, ns3::Ptr< ns3::Ipv6Route >, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 
14571c12958
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
14576c12963
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
14586c12973
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14591c12978
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14602c12989
<     ## ip-l4-protocol.h (module 'internet'): void ns3::IpL4Protocol::SetDownTarget(ns3::IpL4Protocol::DownTargetCallback cb) [member function]
---
>     ## ip-l4-protocol.h (module 'internet'): void ns3::IpL4Protocol::SetDownTarget(ns3::Callback<void, ns3::Ptr<ns3::Packet>, ns3::Ipv4Address, ns3::Ipv4Address, unsigned char, ns3::Ptr<ns3::Ipv4Route>, ns3::empty, ns3::empty, ns3::empty, ns3::empty> cb) [member function]
14606,14607c12993,12994
<                    is_virtual=True, is_pure_virtual=True)
<     ## ip-l4-protocol.h (module 'internet'): void ns3::IpL4Protocol::SetDownTarget6(ns3::IpL4Protocol::DownTargetCallback6 cb) [member function]
---
>                    is_pure_virtual=True, is_virtual=True)
>     ## ip-l4-protocol.h (module 'internet'): void ns3::IpL4Protocol::SetDownTarget6(ns3::Callback<void, ns3::Ptr<ns3::Packet>, ns3::Ipv6Address, ns3::Ipv6Address, unsigned char, ns3::Ptr<ns3::Ipv6Route>, ns3::empty, ns3::empty, ns3::empty, ns3::empty> cb) [member function]
14611c12998
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14615c13002
<     ## ipv4.h (module 'internet'): ns3::Ipv4::Ipv4(ns3::Ipv4 const & arg0) [constructor]
---
>     ## ipv4.h (module 'internet'): ns3::Ipv4::Ipv4(ns3::Ipv4 const & arg0) [copy constructor]
14623c13010
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14628c13015
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14633c13020
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14638c13025
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14643c13030
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
14648c13035
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
14653c13040
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
14658c13045
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
14663c13050
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
14668c13055
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
14673c13060
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
14678c13065
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
14683c13070
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14688c13075
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
14693c13080
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
14698c13085
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
14708c13095
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14713c13100
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14718c13105
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
14723c13110
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
14728c13115
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
14733c13120
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14738c13125
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14743c13130
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14748c13135
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14753c13140
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14758c13145
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14763c13150
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14768c13155
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14773c13160
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14778c13165
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14783c13170
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14788c13175
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14793c13180
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14800c13187
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
14805c13192
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
14810c13197
<                    is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
14815c13202
<                    is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
14821c13208
<     ## ipv4-address.h (module 'network'): ns3::Ipv4AddressChecker::Ipv4AddressChecker(ns3::Ipv4AddressChecker const & arg0) [constructor]
---
>     ## ipv4-address.h (module 'network'): ns3::Ipv4AddressChecker::Ipv4AddressChecker(ns3::Ipv4AddressChecker const & arg0) [copy constructor]
14827a13215,13216
>     ## ipv4-address.h (module 'network'): ns3::Ipv4AddressValue::Ipv4AddressValue(ns3::Ipv4AddressValue const & arg0) [copy constructor]
>     cls.add_constructor([param('ns3::Ipv4AddressValue const &', 'arg0')])
14830,14831d13218
<     ## ipv4-address.h (module 'network'): ns3::Ipv4AddressValue::Ipv4AddressValue(ns3::Ipv4AddressValue const & arg0) [constructor]
<     cls.add_constructor([param('ns3::Ipv4AddressValue const &', 'arg0')])
14837c13224
<     ## ipv4-address.h (module 'network'): bool ns3::Ipv4AddressValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
---
>     ## ipv4-address.h (module 'network'): bool ns3::Ipv4AddressValue::DeserializeFromString(std::string value, ns3::Ptr<ns3::AttributeChecker const> checker) [member function]
14847c13234
<     ## ipv4-address.h (module 'network'): std::string ns3::Ipv4AddressValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
---
>     ## ipv4-address.h (module 'network'): std::string ns3::Ipv4AddressValue::SerializeToString(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
14859,14863c13246,13247
<     ## ipv4-interface.h (module 'internet'): static ns3::TypeId ns3::Ipv4Interface::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
---
>     ## ipv4-interface.h (module 'internet'): ns3::Ipv4Interface::Ipv4Interface(ns3::Ipv4Interface const & arg0) [copy constructor]
>     cls.add_constructor([param('ns3::Ipv4Interface const &', 'arg0')])
14866,14885c13250,13257
<     ## ipv4-interface.h (module 'internet'): void ns3::Ipv4Interface::SetNode(ns3::Ptr<ns3::Node> node) [member function]
<     cls.add_method('SetNode', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Node >', 'node')])
<     ## ipv4-interface.h (module 'internet'): void ns3::Ipv4Interface::SetDevice(ns3::Ptr<ns3::NetDevice> device) [member function]
<     cls.add_method('SetDevice', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::NetDevice >', 'device')])
<     ## ipv4-interface.h (module 'internet'): void ns3::Ipv4Interface::SetTrafficControl(ns3::Ptr<ns3::TrafficControlLayer> tc) [member function]
<     cls.add_method('SetTrafficControl', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::TrafficControlLayer >', 'tc')])
<     ## ipv4-interface.h (module 'internet'): void ns3::Ipv4Interface::SetArpCache(ns3::Ptr<ns3::ArpCache> arpCache) [member function]
<     cls.add_method('SetArpCache', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::ArpCache >', 'arpCache')])
<     ## ipv4-interface.h (module 'internet'): ns3::Ptr<ns3::NetDevice> ns3::Ipv4Interface::GetDevice() const [member function]
<     cls.add_method('GetDevice', 
<                    'ns3::Ptr< ns3::NetDevice >', 
<                    [], 
---
>     ## ipv4-interface.h (module 'internet'): bool ns3::Ipv4Interface::AddAddress(ns3::Ipv4InterfaceAddress address) [member function]
>     cls.add_method('AddAddress', 
>                    'bool', 
>                    [param('ns3::Ipv4InterfaceAddress', 'address')])
>     ## ipv4-interface.h (module 'internet'): ns3::Ipv4InterfaceAddress ns3::Ipv4Interface::GetAddress(uint32_t index) const [member function]
>     cls.add_method('GetAddress', 
>                    'ns3::Ipv4InterfaceAddress', 
>                    [param('uint32_t', 'index')], 
14892,14895c13264,13268
<     ## ipv4-interface.h (module 'internet'): void ns3::Ipv4Interface::SetMetric(uint16_t metric) [member function]
<     cls.add_method('SetMetric', 
<                    'void', 
<                    [param('uint16_t', 'metric')])
---
>     ## ipv4-interface.h (module 'internet'): ns3::Ptr<ns3::NetDevice> ns3::Ipv4Interface::GetDevice() const [member function]
>     cls.add_method('GetDevice', 
>                    'ns3::Ptr< ns3::NetDevice >', 
>                    [], 
>                    is_const=True)
14901,14903c13274,13276
<     ## ipv4-interface.h (module 'internet'): bool ns3::Ipv4Interface::IsUp() const [member function]
<     cls.add_method('IsUp', 
<                    'bool', 
---
>     ## ipv4-interface.h (module 'internet'): uint32_t ns3::Ipv4Interface::GetNAddresses() const [member function]
>     cls.add_method('GetNAddresses', 
>                    'uint32_t', 
14905a13279,13283
>     ## ipv4-interface.h (module 'internet'): static ns3::TypeId ns3::Ipv4Interface::GetTypeId() [member function]
>     cls.add_method('GetTypeId', 
>                    'ns3::TypeId', 
>                    [], 
>                    is_static=True)
14911,14918d13288
<     ## ipv4-interface.h (module 'internet'): void ns3::Ipv4Interface::SetUp() [member function]
<     cls.add_method('SetUp', 
<                    'void', 
<                    [])
<     ## ipv4-interface.h (module 'internet'): void ns3::Ipv4Interface::SetDown() [member function]
<     cls.add_method('SetDown', 
<                    'void', 
<                    [])
14924,14933c13294,13295
<     ## ipv4-interface.h (module 'internet'): void ns3::Ipv4Interface::SetForwarding(bool val) [member function]
<     cls.add_method('SetForwarding', 
<                    'void', 
<                    [param('bool', 'val')])
<     ## ipv4-interface.h (module 'internet'): void ns3::Ipv4Interface::Send(ns3::Ptr<ns3::Packet> p, ns3::Ipv4Header const & hdr, ns3::Ipv4Address dest) [member function]
<     cls.add_method('Send', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Packet >', 'p'), param('ns3::Ipv4Header const &', 'hdr'), param('ns3::Ipv4Address', 'dest')])
<     ## ipv4-interface.h (module 'internet'): bool ns3::Ipv4Interface::AddAddress(ns3::Ipv4InterfaceAddress address) [member function]
<     cls.add_method('AddAddress', 
---
>     ## ipv4-interface.h (module 'internet'): bool ns3::Ipv4Interface::IsUp() const [member function]
>     cls.add_method('IsUp', 
14935,14943d13296
<                    [param('ns3::Ipv4InterfaceAddress', 'address')])
<     ## ipv4-interface.h (module 'internet'): ns3::Ipv4InterfaceAddress ns3::Ipv4Interface::GetAddress(uint32_t index) const [member function]
<     cls.add_method('GetAddress', 
<                    'ns3::Ipv4InterfaceAddress', 
<                    [param('uint32_t', 'index')], 
<                    is_const=True)
<     ## ipv4-interface.h (module 'internet'): uint32_t ns3::Ipv4Interface::GetNAddresses() const [member function]
<     cls.add_method('GetNAddresses', 
<                    'uint32_t', 
14953a13307,13342
>     ## ipv4-interface.h (module 'internet'): void ns3::Ipv4Interface::Send(ns3::Ptr<ns3::Packet> p, ns3::Ipv4Header const & hdr, ns3::Ipv4Address dest) [member function]
>     cls.add_method('Send', 
>                    'void', 
>                    [param('ns3::Ptr< ns3::Packet >', 'p'), param('ns3::Ipv4Header const &', 'hdr'), param('ns3::Ipv4Address', 'dest')])
>     ## ipv4-interface.h (module 'internet'): void ns3::Ipv4Interface::SetArpCache(ns3::Ptr<ns3::ArpCache> arpCache) [member function]
>     cls.add_method('SetArpCache', 
>                    'void', 
>                    [param('ns3::Ptr< ns3::ArpCache >', 'arpCache')])
>     ## ipv4-interface.h (module 'internet'): void ns3::Ipv4Interface::SetDevice(ns3::Ptr<ns3::NetDevice> device) [member function]
>     cls.add_method('SetDevice', 
>                    'void', 
>                    [param('ns3::Ptr< ns3::NetDevice >', 'device')])
>     ## ipv4-interface.h (module 'internet'): void ns3::Ipv4Interface::SetDown() [member function]
>     cls.add_method('SetDown', 
>                    'void', 
>                    [])
>     ## ipv4-interface.h (module 'internet'): void ns3::Ipv4Interface::SetForwarding(bool val) [member function]
>     cls.add_method('SetForwarding', 
>                    'void', 
>                    [param('bool', 'val')])
>     ## ipv4-interface.h (module 'internet'): void ns3::Ipv4Interface::SetMetric(uint16_t metric) [member function]
>     cls.add_method('SetMetric', 
>                    'void', 
>                    [param('uint16_t', 'metric')])
>     ## ipv4-interface.h (module 'internet'): void ns3::Ipv4Interface::SetNode(ns3::Ptr<ns3::Node> node) [member function]
>     cls.add_method('SetNode', 
>                    'void', 
>                    [param('ns3::Ptr< ns3::Node >', 'node')])
>     ## ipv4-interface.h (module 'internet'): void ns3::Ipv4Interface::SetTrafficControl(ns3::Ptr<ns3::TrafficControlLayer> tc) [member function]
>     cls.add_method('SetTrafficControl', 
>                    'void', 
>                    [param('ns3::Ptr< ns3::TrafficControlLayer >', 'tc')])
>     ## ipv4-interface.h (module 'internet'): void ns3::Ipv4Interface::SetUp() [member function]
>     cls.add_method('SetUp', 
>                    'void', 
>                    [])
14958c13347
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
15084c13473
<     ## ipv4-l3-protocol.h (module 'internet'): void ns3::Ipv4L3Protocol::Receive(ns3::Ptr<ns3::NetDevice> device, ns3::Ptr<const ns3::Packet> p, uint16_t protocol, ns3::Address const & from, ns3::Address const & to, ns3::NetDevice::PacketType packetType) [member function]
---
>     ## ipv4-l3-protocol.h (module 'internet'): void ns3::Ipv4L3Protocol::Receive(ns3::Ptr<ns3::NetDevice> device, ns3::Ptr<ns3::Packet const> p, uint16_t protocol, ns3::Address const & from, ns3::Address const & to, ns3::NetDevice::PacketType packetType) [member function]
15167c13556
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
15172c13561
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
15177c13566
<                    is_const=True, is_virtual=True, visibility='private')
---
>                    is_const=True, visibility='private', is_virtual=True)
15182c13571
<                    is_const=True, is_virtual=True, visibility='private')
---
>                    is_const=True, visibility='private', is_virtual=True)
15187c13576
<                    is_virtual=True, visibility='private')
---
>                    visibility='private', is_virtual=True)
15192c13581
<                    is_virtual=True, visibility='private')
---
>                    visibility='private', is_virtual=True)
15198c13587
<     ## ipv4-address.h (module 'network'): ns3::Ipv4MaskChecker::Ipv4MaskChecker(ns3::Ipv4MaskChecker const & arg0) [constructor]
---
>     ## ipv4-address.h (module 'network'): ns3::Ipv4MaskChecker::Ipv4MaskChecker(ns3::Ipv4MaskChecker const & arg0) [copy constructor]
15204a13594,13595
>     ## ipv4-address.h (module 'network'): ns3::Ipv4MaskValue::Ipv4MaskValue(ns3::Ipv4MaskValue const & arg0) [copy constructor]
>     cls.add_constructor([param('ns3::Ipv4MaskValue const &', 'arg0')])
15207,15208d13597
<     ## ipv4-address.h (module 'network'): ns3::Ipv4MaskValue::Ipv4MaskValue(ns3::Ipv4MaskValue const & arg0) [constructor]
<     cls.add_constructor([param('ns3::Ipv4MaskValue const &', 'arg0')])
15214c13603
<     ## ipv4-address.h (module 'network'): bool ns3::Ipv4MaskValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
---
>     ## ipv4-address.h (module 'network'): bool ns3::Ipv4MaskValue::DeserializeFromString(std::string value, ns3::Ptr<ns3::AttributeChecker const> checker) [member function]
15224c13613
<     ## ipv4-address.h (module 'network'): std::string ns3::Ipv4MaskValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
---
>     ## ipv4-address.h (module 'network'): std::string ns3::Ipv4MaskValue::SerializeToString(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
15236c13625
<     ## ipv4-route.h (module 'internet'): ns3::Ipv4MulticastRoute::Ipv4MulticastRoute(ns3::Ipv4MulticastRoute const & arg0) [constructor]
---
>     ## ipv4-route.h (module 'internet'): ns3::Ipv4MulticastRoute::Ipv4MulticastRoute(ns3::Ipv4MulticastRoute const & arg0) [copy constructor]
15250c13639
<     ## ipv4-route.h (module 'internet'): std::map<unsigned int, unsigned int, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, unsigned int> > > ns3::Ipv4MulticastRoute::GetOutputTtlMap() const [member function]
---
>     ## ipv4-route.h (module 'internet'): std::map<unsigned int, unsigned int, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > ns3::Ipv4MulticastRoute::GetOutputTtlMap() const [member function]
15283c13672
<     ## ipv4-packet-filter.h (module 'internet'): ns3::Ipv4PacketFilter::Ipv4PacketFilter(ns3::Ipv4PacketFilter const & arg0) [constructor]
---
>     ## ipv4-packet-filter.h (module 'internet'): ns3::Ipv4PacketFilter::Ipv4PacketFilter(ns3::Ipv4PacketFilter const & arg0) [copy constructor]
15296c13685
<                    is_const=True, is_virtual=True, visibility='private')
---
>                    is_const=True, visibility='private', is_virtual=True)
15301c13690
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
15307c13696
<     ## ipv4-raw-socket-factory.h (module 'internet'): ns3::Ipv4RawSocketFactory::Ipv4RawSocketFactory(ns3::Ipv4RawSocketFactory const & arg0) [constructor]
---
>     ## ipv4-raw-socket-factory.h (module 'internet'): ns3::Ipv4RawSocketFactory::Ipv4RawSocketFactory(ns3::Ipv4RawSocketFactory const & arg0) [copy constructor]
15317c13706
<     ## ipv4-raw-socket-impl.h (module 'internet'): ns3::Ipv4RawSocketImpl::Ipv4RawSocketImpl(ns3::Ipv4RawSocketImpl const & arg0) [constructor]
---
>     ## ipv4-raw-socket-impl.h (module 'internet'): ns3::Ipv4RawSocketImpl::Ipv4RawSocketImpl(ns3::Ipv4RawSocketImpl const & arg0) [copy constructor]
15346c13735
<     ## ipv4-raw-socket-impl.h (module 'internet'): bool ns3::Ipv4RawSocketImpl::ForwardUp(ns3::Ptr<const ns3::Packet> p, ns3::Ipv4Header ipHeader, ns3::Ptr<ns3::Ipv4Interface> incomingInterface) [member function]
---
>     ## ipv4-raw-socket-impl.h (module 'internet'): bool ns3::Ipv4RawSocketImpl::ForwardUp(ns3::Ptr<ns3::Packet const> p, ns3::Ipv4Header ipHeader, ns3::Ptr<ns3::Ipv4Interface> incomingInterface) [member function]
15447c13836
<                    is_virtual=True, visibility='private')
---
>                    visibility='private', is_virtual=True)
15452c13841
<     ## ipv4-route.h (module 'internet'): ns3::Ipv4Route::Ipv4Route(ns3::Ipv4Route const & arg0) [constructor]
---
>     ## ipv4-route.h (module 'internet'): ns3::Ipv4Route::Ipv4Route(ns3::Ipv4Route const & arg0) [copy constructor]
15497c13886
<     ## ipv4-routing-protocol.h (module 'internet'): ns3::Ipv4RoutingProtocol::Ipv4RoutingProtocol(ns3::Ipv4RoutingProtocol const & arg0) [constructor]
---
>     ## ipv4-routing-protocol.h (module 'internet'): ns3::Ipv4RoutingProtocol::Ipv4RoutingProtocol(ns3::Ipv4RoutingProtocol const & arg0) [copy constructor]
15508c13897
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15513c13902
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15518c13907
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15523,15524c13912,13913
<                    is_virtual=True, is_pure_virtual=True)
<     ## ipv4-routing-protocol.h (module 'internet'): void ns3::Ipv4RoutingProtocol::PrintRoutingTable(ns3::Ptr<ns3::OutputStreamWrapper> stream, ns3::Time::Unit unit=::ns3::Time::Unit::S) const [member function]
---
>                    is_pure_virtual=True, is_virtual=True)
>     ## ipv4-routing-protocol.h (module 'internet'): void ns3::Ipv4RoutingProtocol::PrintRoutingTable(ns3::Ptr<ns3::OutputStreamWrapper> stream) const [member function]
15527,15529c13916,13918
<                    [param('ns3::Ptr< ns3::OutputStreamWrapper >', 'stream'), param('ns3::Time::Unit', 'unit', default_value='::ns3::Time::Unit::S')], 
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
<     ## ipv4-routing-protocol.h (module 'internet'): bool ns3::Ipv4RoutingProtocol::RouteInput(ns3::Ptr<const ns3::Packet> p, ns3::Ipv4Header const & header, ns3::Ptr<const ns3::NetDevice> idev, ns3::Ipv4RoutingProtocol::UnicastForwardCallback ucb, ns3::Ipv4RoutingProtocol::MulticastForwardCallback mcb, ns3::Ipv4RoutingProtocol::LocalDeliverCallback lcb, ns3::Ipv4RoutingProtocol::ErrorCallback ecb) [member function]
---
>                    [param('ns3::Ptr< ns3::OutputStreamWrapper >', 'stream')], 
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
>     ## ipv4-routing-protocol.h (module 'internet'): bool ns3::Ipv4RoutingProtocol::RouteInput(ns3::Ptr<ns3::Packet const> p, ns3::Ipv4Header const & header, ns3::Ptr<const ns3::NetDevice> idev, ns3::Callback<void,ns3::Ptr<ns3::Ipv4Route>,ns3::Ptr<const ns3::Packet>,const ns3::Ipv4Header&,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> ucb, ns3::Callback<void,ns3::Ptr<ns3::Ipv4MulticastRoute>,ns3::Ptr<const ns3::Packet>,const ns3::Ipv4Header&,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> mcb, ns3::Callback<void,ns3::Ptr<const ns3::Packet>,const ns3::Ipv4Header&,unsigned int,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> lcb, ns3::Callback<void,ns3::Ptr<const ns3::Packet>,const ns3::Ipv4Header&,ns3::Socket::SocketErrno,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> ecb) [member function]
15533c13922
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15538c13927
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15543c13932
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15547c13936
<     ## ipv4-static-routing.h (module 'internet'): ns3::Ipv4StaticRouting::Ipv4StaticRouting(ns3::Ipv4StaticRouting const & arg0) [constructor]
---
>     ## ipv4-static-routing.h (module 'internet'): ns3::Ipv4StaticRouting::Ipv4StaticRouting(ns3::Ipv4StaticRouting const & arg0) [copy constructor]
15625c14014
<     ## ipv4-static-routing.h (module 'internet'): void ns3::Ipv4StaticRouting::PrintRoutingTable(ns3::Ptr<ns3::OutputStreamWrapper> stream, ns3::Time::Unit unit=::ns3::Time::Unit::S) const [member function]
---
>     ## ipv4-static-routing.h (module 'internet'): void ns3::Ipv4StaticRouting::PrintRoutingTable(ns3::Ptr<ns3::OutputStreamWrapper> stream) const [member function]
15628c14017
<                    [param('ns3::Ptr< ns3::OutputStreamWrapper >', 'stream'), param('ns3::Time::Unit', 'unit', default_value='::ns3::Time::Unit::S')], 
---
>                    [param('ns3::Ptr< ns3::OutputStreamWrapper >', 'stream')], 
15642c14031
<     ## ipv4-static-routing.h (module 'internet'): bool ns3::Ipv4StaticRouting::RouteInput(ns3::Ptr<const ns3::Packet> p, ns3::Ipv4Header const & header, ns3::Ptr<const ns3::NetDevice> idev, ns3::Ipv4RoutingProtocol::UnicastForwardCallback ucb, ns3::Ipv4RoutingProtocol::MulticastForwardCallback mcb, ns3::Ipv4RoutingProtocol::LocalDeliverCallback lcb, ns3::Ipv4RoutingProtocol::ErrorCallback ecb) [member function]
---
>     ## ipv4-static-routing.h (module 'internet'): bool ns3::Ipv4StaticRouting::RouteInput(ns3::Ptr<ns3::Packet const> p, ns3::Ipv4Header const & header, ns3::Ptr<const ns3::NetDevice> idev, ns3::Callback<void,ns3::Ptr<ns3::Ipv4Route>,ns3::Ptr<const ns3::Packet>,const ns3::Ipv4Header&,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> ucb, ns3::Callback<void,ns3::Ptr<ns3::Ipv4MulticastRoute>,ns3::Ptr<const ns3::Packet>,const ns3::Ipv4Header&,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> mcb, ns3::Callback<void,ns3::Ptr<const ns3::Packet>,const ns3::Ipv4Header&,unsigned int,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> lcb, ns3::Callback<void,ns3::Ptr<const ns3::Packet>,const ns3::Ipv4Header&,ns3::Socket::SocketErrno,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> ecb) [member function]
15669c14058
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
15673c14062
<     ## ipv6.h (module 'internet'): ns3::Ipv6::Ipv6(ns3::Ipv6 const & arg0) [constructor]
---
>     ## ipv6.h (module 'internet'): ns3::Ipv6::Ipv6(ns3::Ipv6 const & arg0) [copy constructor]
15681c14070
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15686c14075
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15691c14080
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
15696c14085
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
15701c14090
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
15706c14095
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
15711c14100
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
15716c14105
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
15721c14110
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
15726c14115
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
15731c14120
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15736c14125
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
15741c14130
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
15746c14135
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
15756c14145
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15761c14150
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15766c14155
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
15771c14160
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
15776c14165
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15781c14170
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15786c14175
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15791c14180
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15796c14185
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15801c14190
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15806c14195
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15811c14200
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15816c14205
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15821c14210
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15826c14215
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15831c14220
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15836c14225
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15841c14230
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15848c14237
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
15853c14242
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
15858c14247
<                    is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
15863c14252
<                    is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
15869c14258
<     ## ipv6-address.h (module 'network'): ns3::Ipv6AddressChecker::Ipv6AddressChecker(ns3::Ipv6AddressChecker const & arg0) [constructor]
---
>     ## ipv6-address.h (module 'network'): ns3::Ipv6AddressChecker::Ipv6AddressChecker(ns3::Ipv6AddressChecker const & arg0) [copy constructor]
15875a14265,14266
>     ## ipv6-address.h (module 'network'): ns3::Ipv6AddressValue::Ipv6AddressValue(ns3::Ipv6AddressValue const & arg0) [copy constructor]
>     cls.add_constructor([param('ns3::Ipv6AddressValue const &', 'arg0')])
15878,15879d14268
<     ## ipv6-address.h (module 'network'): ns3::Ipv6AddressValue::Ipv6AddressValue(ns3::Ipv6AddressValue const & arg0) [constructor]
<     cls.add_constructor([param('ns3::Ipv6AddressValue const &', 'arg0')])
15885c14274
<     ## ipv6-address.h (module 'network'): bool ns3::Ipv6AddressValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
---
>     ## ipv6-address.h (module 'network'): bool ns3::Ipv6AddressValue::DeserializeFromString(std::string value, ns3::Ptr<ns3::AttributeChecker const> checker) [member function]
15895c14284
<     ## ipv6-address.h (module 'network'): std::string ns3::Ipv6AddressValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
---
>     ## ipv6-address.h (module 'network'): std::string ns3::Ipv6AddressValue::SerializeToString(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
15907c14296
<     ## ipv6-extension.h (module 'internet'): ns3::Ipv6Extension::Ipv6Extension(ns3::Ipv6Extension const & arg0) [constructor]
---
>     ## ipv6-extension.h (module 'internet'): ns3::Ipv6Extension::Ipv6Extension(ns3::Ipv6Extension const & arg0) [copy constructor]
15919c14308
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
15934c14323
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15947c14336
<     ## ipv6-extension.h (module 'internet'): ns3::Ipv6ExtensionAH::Ipv6ExtensionAH(ns3::Ipv6ExtensionAH const & arg0) [constructor]
---
>     ## ipv6-extension.h (module 'internet'): ns3::Ipv6ExtensionAH::Ipv6ExtensionAH(ns3::Ipv6ExtensionAH const & arg0) [copy constructor]
15971c14360
<     ## ipv6-extension-header.h (module 'internet'): ns3::Ipv6ExtensionAHHeader::Ipv6ExtensionAHHeader(ns3::Ipv6ExtensionAHHeader const & arg0) [constructor]
---
>     ## ipv6-extension-header.h (module 'internet'): ns3::Ipv6ExtensionAHHeader::Ipv6ExtensionAHHeader(ns3::Ipv6ExtensionAHHeader const & arg0) [copy constructor]
16008c14397
<     ## ipv6-extension-demux.h (module 'internet'): ns3::Ipv6ExtensionDemux::Ipv6ExtensionDemux(ns3::Ipv6ExtensionDemux const & arg0) [constructor]
---
>     ## ipv6-extension-demux.h (module 'internet'): ns3::Ipv6ExtensionDemux::Ipv6ExtensionDemux(ns3::Ipv6ExtensionDemux const & arg0) [copy constructor]
16037c14426
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
16041c14430
<     ## ipv6-extension.h (module 'internet'): ns3::Ipv6ExtensionDestination::Ipv6ExtensionDestination(ns3::Ipv6ExtensionDestination const & arg0) [constructor]
---
>     ## ipv6-extension.h (module 'internet'): ns3::Ipv6ExtensionDestination::Ipv6ExtensionDestination(ns3::Ipv6ExtensionDestination const & arg0) [copy constructor]
16065c14454
<     ## ipv6-extension-header.h (module 'internet'): ns3::Ipv6ExtensionDestinationHeader::Ipv6ExtensionDestinationHeader(ns3::Ipv6ExtensionDestinationHeader const & arg0) [constructor]
---
>     ## ipv6-extension-header.h (module 'internet'): ns3::Ipv6ExtensionDestinationHeader::Ipv6ExtensionDestinationHeader(ns3::Ipv6ExtensionDestinationHeader const & arg0) [copy constructor]
16102c14491
<     ## ipv6-extension.h (module 'internet'): ns3::Ipv6ExtensionESP::Ipv6ExtensionESP(ns3::Ipv6ExtensionESP const & arg0) [constructor]
---
>     ## ipv6-extension.h (module 'internet'): ns3::Ipv6ExtensionESP::Ipv6ExtensionESP(ns3::Ipv6ExtensionESP const & arg0) [copy constructor]
16126c14515
<     ## ipv6-extension-header.h (module 'internet'): ns3::Ipv6ExtensionESPHeader::Ipv6ExtensionESPHeader(ns3::Ipv6ExtensionESPHeader const & arg0) [constructor]
---
>     ## ipv6-extension-header.h (module 'internet'): ns3::Ipv6ExtensionESPHeader::Ipv6ExtensionESPHeader(ns3::Ipv6ExtensionESPHeader const & arg0) [copy constructor]
16163c14552
<     ## ipv6-extension.h (module 'internet'): ns3::Ipv6ExtensionFragment::Ipv6ExtensionFragment(ns3::Ipv6ExtensionFragment const & arg0) [constructor]
---
>     ## ipv6-extension.h (module 'internet'): ns3::Ipv6ExtensionFragment::Ipv6ExtensionFragment(ns3::Ipv6ExtensionFragment const & arg0) [copy constructor]
16192c14581
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
16196c14585
<     ## ipv6-extension-header.h (module 'internet'): ns3::Ipv6ExtensionFragmentHeader::Ipv6ExtensionFragmentHeader(ns3::Ipv6ExtensionFragmentHeader const & arg0) [constructor]
---
>     ## ipv6-extension-header.h (module 'internet'): ns3::Ipv6ExtensionFragmentHeader::Ipv6ExtensionFragmentHeader(ns3::Ipv6ExtensionFragmentHeader const & arg0) [copy constructor]
16260c14649
<     ## ipv6-extension.h (module 'internet'): ns3::Ipv6ExtensionHopByHop::Ipv6ExtensionHopByHop(ns3::Ipv6ExtensionHopByHop const & arg0) [constructor]
---
>     ## ipv6-extension.h (module 'internet'): ns3::Ipv6ExtensionHopByHop::Ipv6ExtensionHopByHop(ns3::Ipv6ExtensionHopByHop const & arg0) [copy constructor]
16284c14673
<     ## ipv6-extension-header.h (module 'internet'): ns3::Ipv6ExtensionLooseRoutingHeader::Ipv6ExtensionLooseRoutingHeader(ns3::Ipv6ExtensionLooseRoutingHeader const & arg0) [constructor]
---
>     ## ipv6-extension-header.h (module 'internet'): ns3::Ipv6ExtensionLooseRoutingHeader::Ipv6ExtensionLooseRoutingHeader(ns3::Ipv6ExtensionLooseRoutingHeader const & arg0) [copy constructor]
16343c14732
<     ## ipv6-extension.h (module 'internet'): ns3::Ipv6ExtensionRouting::Ipv6ExtensionRouting(ns3::Ipv6ExtensionRouting const & arg0) [constructor]
---
>     ## ipv6-extension.h (module 'internet'): ns3::Ipv6ExtensionRouting::Ipv6ExtensionRouting(ns3::Ipv6ExtensionRouting const & arg0) [copy constructor]
16372c14761
<     ## ipv6-extension.h (module 'internet'): ns3::Ipv6ExtensionRoutingDemux::Ipv6ExtensionRoutingDemux(ns3::Ipv6ExtensionRoutingDemux const & arg0) [constructor]
---
>     ## ipv6-extension.h (module 'internet'): ns3::Ipv6ExtensionRoutingDemux::Ipv6ExtensionRoutingDemux(ns3::Ipv6ExtensionRoutingDemux const & arg0) [copy constructor]
16401c14790
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
16405,16409c14794,14795
<     ## ipv6-interface.h (module 'internet'): static ns3::TypeId ns3::Ipv6Interface::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
---
>     ## ipv6-interface.h (module 'internet'): ns3::Ipv6Interface::Ipv6Interface(ns3::Ipv6Interface const & arg0) [copy constructor]
>     cls.add_constructor([param('ns3::Ipv6Interface const &', 'arg0')])
16412,16423c14798,14820
<     ## ipv6-interface.h (module 'internet'): void ns3::Ipv6Interface::SetNode(ns3::Ptr<ns3::Node> node) [member function]
<     cls.add_method('SetNode', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Node >', 'node')])
<     ## ipv6-interface.h (module 'internet'): void ns3::Ipv6Interface::SetDevice(ns3::Ptr<ns3::NetDevice> device) [member function]
<     cls.add_method('SetDevice', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::NetDevice >', 'device')])
<     ## ipv6-interface.h (module 'internet'): void ns3::Ipv6Interface::SetTrafficControl(ns3::Ptr<ns3::TrafficControlLayer> tc) [member function]
<     cls.add_method('SetTrafficControl', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::TrafficControlLayer >', 'tc')])
---
>     ## ipv6-interface.h (module 'internet'): bool ns3::Ipv6Interface::AddAddress(ns3::Ipv6InterfaceAddress iface) [member function]
>     cls.add_method('AddAddress', 
>                    'bool', 
>                    [param('ns3::Ipv6InterfaceAddress', 'iface')])
>     ## ipv6-interface.h (module 'internet'): ns3::Ipv6InterfaceAddress ns3::Ipv6Interface::GetAddress(uint32_t index) const [member function]
>     cls.add_method('GetAddress', 
>                    'ns3::Ipv6InterfaceAddress', 
>                    [param('uint32_t', 'index')], 
>                    is_const=True)
>     ## ipv6-interface.h (module 'internet'): ns3::Ipv6InterfaceAddress ns3::Ipv6Interface::GetAddressMatchingDestination(ns3::Ipv6Address dst) [member function]
>     cls.add_method('GetAddressMatchingDestination', 
>                    'ns3::Ipv6InterfaceAddress', 
>                    [param('ns3::Ipv6Address', 'dst')])
>     ## ipv6-interface.h (module 'internet'): uint16_t ns3::Ipv6Interface::GetBaseReachableTime() const [member function]
>     cls.add_method('GetBaseReachableTime', 
>                    'uint16_t', 
>                    [], 
>                    is_const=True)
>     ## ipv6-interface.h (module 'internet'): uint8_t ns3::Ipv6Interface::GetCurHopLimit() const [member function]
>     cls.add_method('GetCurHopLimit', 
>                    'uint8_t', 
>                    [], 
>                    is_const=True)
16429,16432c14826,14830
<     ## ipv6-interface.h (module 'internet'): void ns3::Ipv6Interface::SetMetric(uint16_t metric) [member function]
<     cls.add_method('SetMetric', 
<                    'void', 
<                    [param('uint16_t', 'metric')])
---
>     ## ipv6-interface.h (module 'internet'): ns3::Ipv6InterfaceAddress ns3::Ipv6Interface::GetLinkLocalAddress() const [member function]
>     cls.add_method('GetLinkLocalAddress', 
>                    'ns3::Ipv6InterfaceAddress', 
>                    [], 
>                    is_const=True)
16438,16471c14836,14838
<     ## ipv6-interface.h (module 'internet'): bool ns3::Ipv6Interface::IsUp() const [member function]
<     cls.add_method('IsUp', 
<                    'bool', 
<                    [], 
<                    is_const=True)
<     ## ipv6-interface.h (module 'internet'): bool ns3::Ipv6Interface::IsDown() const [member function]
<     cls.add_method('IsDown', 
<                    'bool', 
<                    [], 
<                    is_const=True)
<     ## ipv6-interface.h (module 'internet'): void ns3::Ipv6Interface::SetUp() [member function]
<     cls.add_method('SetUp', 
<                    'void', 
<                    [])
<     ## ipv6-interface.h (module 'internet'): void ns3::Ipv6Interface::SetDown() [member function]
<     cls.add_method('SetDown', 
<                    'void', 
<                    [])
<     ## ipv6-interface.h (module 'internet'): bool ns3::Ipv6Interface::IsForwarding() const [member function]
<     cls.add_method('IsForwarding', 
<                    'bool', 
<                    [], 
<                    is_const=True)
<     ## ipv6-interface.h (module 'internet'): void ns3::Ipv6Interface::SetForwarding(bool forward) [member function]
<     cls.add_method('SetForwarding', 
<                    'void', 
<                    [param('bool', 'forward')])
<     ## ipv6-interface.h (module 'internet'): void ns3::Ipv6Interface::SetCurHopLimit(uint8_t curHopLimit) [member function]
<     cls.add_method('SetCurHopLimit', 
<                    'void', 
<                    [param('uint8_t', 'curHopLimit')])
<     ## ipv6-interface.h (module 'internet'): uint8_t ns3::Ipv6Interface::GetCurHopLimit() const [member function]
<     cls.add_method('GetCurHopLimit', 
<                    'uint8_t', 
---
>     ## ipv6-interface.h (module 'internet'): uint32_t ns3::Ipv6Interface::GetNAddresses() const [member function]
>     cls.add_method('GetNAddresses', 
>                    'uint32_t', 
16474,16480c14841,14843
<     ## ipv6-interface.h (module 'internet'): void ns3::Ipv6Interface::SetBaseReachableTime(uint16_t baseReachableTime) [member function]
<     cls.add_method('SetBaseReachableTime', 
<                    'void', 
<                    [param('uint16_t', 'baseReachableTime')])
<     ## ipv6-interface.h (module 'internet'): uint16_t ns3::Ipv6Interface::GetBaseReachableTime() const [member function]
<     cls.add_method('GetBaseReachableTime', 
<                    'uint16_t', 
---
>     ## ipv6-interface.h (module 'internet'): ns3::Ptr<ns3::NdiscCache> ns3::Ipv6Interface::GetNdiscCache() const [member function]
>     cls.add_method('GetNdiscCache', 
>                    'ns3::Ptr< ns3::NdiscCache >', 
16483,16486d14845
<     ## ipv6-interface.h (module 'internet'): void ns3::Ipv6Interface::SetReachableTime(uint16_t reachableTime) [member function]
<     cls.add_method('SetReachableTime', 
<                    'void', 
<                    [param('uint16_t', 'reachableTime')])
16492,16495d14850
<     ## ipv6-interface.h (module 'internet'): void ns3::Ipv6Interface::SetRetransTimer(uint16_t retransTimer) [member function]
<     cls.add_method('SetRetransTimer', 
<                    'void', 
<                    [param('uint16_t', 'retransTimer')])
16501,16506c14856,14867
<     ## ipv6-interface.h (module 'internet'): void ns3::Ipv6Interface::Send(ns3::Ptr<ns3::Packet> p, ns3::Ipv6Header const & hdr, ns3::Ipv6Address dest) [member function]
<     cls.add_method('Send', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Packet >', 'p'), param('ns3::Ipv6Header const &', 'hdr'), param('ns3::Ipv6Address', 'dest')])
<     ## ipv6-interface.h (module 'internet'): bool ns3::Ipv6Interface::AddAddress(ns3::Ipv6InterfaceAddress iface) [member function]
<     cls.add_method('AddAddress', 
---
>     ## ipv6-interface.h (module 'internet'): static ns3::TypeId ns3::Ipv6Interface::GetTypeId() [member function]
>     cls.add_method('GetTypeId', 
>                    'ns3::TypeId', 
>                    [], 
>                    is_static=True)
>     ## ipv6-interface.h (module 'internet'): bool ns3::Ipv6Interface::IsDown() const [member function]
>     cls.add_method('IsDown', 
>                    'bool', 
>                    [], 
>                    is_const=True)
>     ## ipv6-interface.h (module 'internet'): bool ns3::Ipv6Interface::IsForwarding() const [member function]
>     cls.add_method('IsForwarding', 
16508,16511d14868
<                    [param('ns3::Ipv6InterfaceAddress', 'iface')])
<     ## ipv6-interface.h (module 'internet'): ns3::Ipv6InterfaceAddress ns3::Ipv6Interface::GetLinkLocalAddress() const [member function]
<     cls.add_method('GetLinkLocalAddress', 
<                    'ns3::Ipv6InterfaceAddress', 
16519,16530c14876,14878
<     ## ipv6-interface.h (module 'internet'): ns3::Ipv6InterfaceAddress ns3::Ipv6Interface::GetAddress(uint32_t index) const [member function]
<     cls.add_method('GetAddress', 
<                    'ns3::Ipv6InterfaceAddress', 
<                    [param('uint32_t', 'index')], 
<                    is_const=True)
<     ## ipv6-interface.h (module 'internet'): ns3::Ipv6InterfaceAddress ns3::Ipv6Interface::GetAddressMatchingDestination(ns3::Ipv6Address dst) [member function]
<     cls.add_method('GetAddressMatchingDestination', 
<                    'ns3::Ipv6InterfaceAddress', 
<                    [param('ns3::Ipv6Address', 'dst')])
<     ## ipv6-interface.h (module 'internet'): uint32_t ns3::Ipv6Interface::GetNAddresses() const [member function]
<     cls.add_method('GetNAddresses', 
<                    'uint32_t', 
---
>     ## ipv6-interface.h (module 'internet'): bool ns3::Ipv6Interface::IsUp() const [member function]
>     cls.add_method('IsUp', 
>                    'bool', 
16541,16542c14889,14890
<     ## ipv6-interface.h (module 'internet'): void ns3::Ipv6Interface::SetState(ns3::Ipv6Address address, ns3::Ipv6InterfaceAddress::State_e state) [member function]
<     cls.add_method('SetState', 
---
>     ## ipv6-interface.h (module 'internet'): void ns3::Ipv6Interface::Send(ns3::Ptr<ns3::Packet> p, ns3::Ipv6Header const & hdr, ns3::Ipv6Address dest) [member function]
>     cls.add_method('Send', 
16544c14892,14920
<                    [param('ns3::Ipv6Address', 'address'), param('ns3::Ipv6InterfaceAddress::State_e', 'state')])
---
>                    [param('ns3::Ptr< ns3::Packet >', 'p'), param('ns3::Ipv6Header const &', 'hdr'), param('ns3::Ipv6Address', 'dest')])
>     ## ipv6-interface.h (module 'internet'): void ns3::Ipv6Interface::SetBaseReachableTime(uint16_t baseReachableTime) [member function]
>     cls.add_method('SetBaseReachableTime', 
>                    'void', 
>                    [param('uint16_t', 'baseReachableTime')])
>     ## ipv6-interface.h (module 'internet'): void ns3::Ipv6Interface::SetCurHopLimit(uint8_t curHopLimit) [member function]
>     cls.add_method('SetCurHopLimit', 
>                    'void', 
>                    [param('uint8_t', 'curHopLimit')])
>     ## ipv6-interface.h (module 'internet'): void ns3::Ipv6Interface::SetDevice(ns3::Ptr<ns3::NetDevice> device) [member function]
>     cls.add_method('SetDevice', 
>                    'void', 
>                    [param('ns3::Ptr< ns3::NetDevice >', 'device')])
>     ## ipv6-interface.h (module 'internet'): void ns3::Ipv6Interface::SetDown() [member function]
>     cls.add_method('SetDown', 
>                    'void', 
>                    [])
>     ## ipv6-interface.h (module 'internet'): void ns3::Ipv6Interface::SetForwarding(bool forward) [member function]
>     cls.add_method('SetForwarding', 
>                    'void', 
>                    [param('bool', 'forward')])
>     ## ipv6-interface.h (module 'internet'): void ns3::Ipv6Interface::SetMetric(uint16_t metric) [member function]
>     cls.add_method('SetMetric', 
>                    'void', 
>                    [param('uint16_t', 'metric')])
>     ## ipv6-interface.h (module 'internet'): void ns3::Ipv6Interface::SetNode(ns3::Ptr<ns3::Node> node) [member function]
>     cls.add_method('SetNode', 
>                    'void', 
>                    [param('ns3::Ptr< ns3::Node >', 'node')])
16549,16553c14925,14944
<     ## ipv6-interface.h (module 'internet'): ns3::Ptr<ns3::NdiscCache> ns3::Ipv6Interface::GetNdiscCache() const [member function]
<     cls.add_method('GetNdiscCache', 
<                    'ns3::Ptr< ns3::NdiscCache >', 
<                    [], 
<                    is_const=True)
---
>     ## ipv6-interface.h (module 'internet'): void ns3::Ipv6Interface::SetReachableTime(uint16_t reachableTime) [member function]
>     cls.add_method('SetReachableTime', 
>                    'void', 
>                    [param('uint16_t', 'reachableTime')])
>     ## ipv6-interface.h (module 'internet'): void ns3::Ipv6Interface::SetRetransTimer(uint16_t retransTimer) [member function]
>     cls.add_method('SetRetransTimer', 
>                    'void', 
>                    [param('uint16_t', 'retransTimer')])
>     ## ipv6-interface.h (module 'internet'): void ns3::Ipv6Interface::SetState(ns3::Ipv6Address address, ns3::Ipv6InterfaceAddress::State_e state) [member function]
>     cls.add_method('SetState', 
>                    'void', 
>                    [param('ns3::Ipv6Address', 'address'), param('ns3::Ipv6InterfaceAddress::State_e', 'state')])
>     ## ipv6-interface.h (module 'internet'): void ns3::Ipv6Interface::SetTrafficControl(ns3::Ptr<ns3::TrafficControlLayer> tc) [member function]
>     cls.add_method('SetTrafficControl', 
>                    'void', 
>                    [param('ns3::Ptr< ns3::TrafficControlLayer >', 'tc')])
>     ## ipv6-interface.h (module 'internet'): void ns3::Ipv6Interface::SetUp() [member function]
>     cls.add_method('SetUp', 
>                    'void', 
>                    [])
16558c14949
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
16561a14953,14954
>     ## ipv6-l3-protocol.h (module 'internet'): ns3::Ipv6L3Protocol::PROT_NUMBER [variable]
>     cls.add_static_attribute('PROT_NUMBER', 'uint16_t const', is_const=True)
16567,16568d14959
<     ## ipv6-l3-protocol.h (module 'internet'): ns3::Ipv6L3Protocol::PROT_NUMBER [variable]
<     cls.add_static_attribute('PROT_NUMBER', 'uint16_t const', is_const=True)
16621c15012
<     ## ipv6-l3-protocol.h (module 'internet'): void ns3::Ipv6L3Protocol::Receive(ns3::Ptr<ns3::NetDevice> device, ns3::Ptr<const ns3::Packet> p, uint16_t protocol, ns3::Address const & from, ns3::Address const & to, ns3::NetDevice::PacketType packetType) [member function]
---
>     ## ipv6-l3-protocol.h (module 'internet'): void ns3::Ipv6L3Protocol::Receive(ns3::Ptr<ns3::NetDevice> device, ns3::Ptr<ns3::Packet const> p, uint16_t protocol, ns3::Address const & from, ns3::Address const & to, ns3::NetDevice::PacketType packetType) [member function]
16755c15146
<     ## ipv6-l3-protocol.h (module 'internet'): void ns3::Ipv6L3Protocol::AddAutoconfiguredAddress(uint32_t interface, ns3::Ipv6Address network, ns3::Ipv6Prefix mask, uint8_t flags, uint32_t validTime, uint32_t preferredTime, ns3::Ipv6Address defaultRouter=ns3::Ipv6Address::GetZero()) [member function]
---
>     ## ipv6-l3-protocol.h (module 'internet'): void ns3::Ipv6L3Protocol::AddAutoconfiguredAddress(uint32_t interface, ns3::Ipv6Address network, ns3::Ipv6Prefix mask, uint8_t flags, uint32_t validTime, uint32_t preferredTime, ns3::Ipv6Address defaultRouter=ns3::Ipv6Address::GetZero( )) [member function]
16758c15149
<                    [param('uint32_t', 'interface'), param('ns3::Ipv6Address', 'network'), param('ns3::Ipv6Prefix', 'mask'), param('uint8_t', 'flags'), param('uint32_t', 'validTime'), param('uint32_t', 'preferredTime'), param('ns3::Ipv6Address', 'defaultRouter', default_value='ns3::Ipv6Address::GetZero()')])
---
>                    [param('uint32_t', 'interface'), param('ns3::Ipv6Address', 'network'), param('ns3::Ipv6Prefix', 'mask'), param('uint8_t', 'flags'), param('uint32_t', 'validTime'), param('uint32_t', 'preferredTime'), param('ns3::Ipv6Address', 'defaultRouter', default_value='ns3::Ipv6Address::GetZero( )')])
16808c15199
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
16813c15204
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
16818c15209
<                    is_virtual=True, visibility='private')
---
>                    visibility='private', is_virtual=True)
16823c15214
<                    is_const=True, is_virtual=True, visibility='private')
---
>                    is_const=True, visibility='private', is_virtual=True)
16828c15219
<                    is_virtual=True, visibility='private')
---
>                    visibility='private', is_virtual=True)
16833c15224
<                    is_const=True, is_virtual=True, visibility='private')
---
>                    is_const=True, visibility='private', is_virtual=True)
16838c15229
<                    is_virtual=True, visibility='private')
---
>                    visibility='private', is_virtual=True)
16843c15234
<                    is_const=True, is_virtual=True, visibility='private')
---
>                    is_const=True, visibility='private', is_virtual=True)
16848c15239
<     ## ipv6-route.h (module 'internet'): ns3::Ipv6MulticastRoute::Ipv6MulticastRoute(ns3::Ipv6MulticastRoute const & arg0) [constructor]
---
>     ## ipv6-route.h (module 'internet'): ns3::Ipv6MulticastRoute::Ipv6MulticastRoute(ns3::Ipv6MulticastRoute const & arg0) [copy constructor]
16862c15253
<     ## ipv6-route.h (module 'internet'): std::map<unsigned int, unsigned int, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, unsigned int> > > ns3::Ipv6MulticastRoute::GetOutputTtlMap() const [member function]
---
>     ## ipv6-route.h (module 'internet'): std::map<unsigned int, unsigned int, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > ns3::Ipv6MulticastRoute::GetOutputTtlMap() const [member function]
16894,17015d15284
< def register_Ns3Ipv6Option_methods(root_module, cls):
<     ## ipv6-option.h (module 'internet'): ns3::Ipv6Option::Ipv6Option() [constructor]
<     cls.add_constructor([])
<     ## ipv6-option.h (module 'internet'): ns3::Ipv6Option::Ipv6Option(ns3::Ipv6Option const & arg0) [constructor]
<     cls.add_constructor([param('ns3::Ipv6Option const &', 'arg0')])
<     ## ipv6-option.h (module 'internet'): uint8_t ns3::Ipv6Option::GetOptionNumber() const [member function]
<     cls.add_method('GetOptionNumber', 
<                    'uint8_t', 
<                    [], 
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
<     ## ipv6-option.h (module 'internet'): static ns3::TypeId ns3::Ipv6Option::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## ipv6-option.h (module 'internet'): uint8_t ns3::Ipv6Option::Process(ns3::Ptr<ns3::Packet> packet, uint8_t offset, ns3::Ipv6Header const & ipv6Header, bool & isDropped) [member function]
<     cls.add_method('Process', 
<                    'uint8_t', 
<                    [param('ns3::Ptr< ns3::Packet >', 'packet'), param('uint8_t', 'offset'), param('ns3::Ipv6Header const &', 'ipv6Header'), param('bool &', 'isDropped')], 
<                    is_virtual=True, is_pure_virtual=True)
<     ## ipv6-option.h (module 'internet'): void ns3::Ipv6Option::SetNode(ns3::Ptr<ns3::Node> node) [member function]
<     cls.add_method('SetNode', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Node >', 'node')])
<     return
< 
< def register_Ns3Ipv6OptionJumbogram_methods(root_module, cls):
<     ## ipv6-option.h (module 'internet'): ns3::Ipv6OptionJumbogram::Ipv6OptionJumbogram(ns3::Ipv6OptionJumbogram const & arg0) [constructor]
<     cls.add_constructor([param('ns3::Ipv6OptionJumbogram const &', 'arg0')])
<     ## ipv6-option.h (module 'internet'): ns3::Ipv6OptionJumbogram::Ipv6OptionJumbogram() [constructor]
<     cls.add_constructor([])
<     ## ipv6-option.h (module 'internet'): uint8_t ns3::Ipv6OptionJumbogram::GetOptionNumber() const [member function]
<     cls.add_method('GetOptionNumber', 
<                    'uint8_t', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## ipv6-option.h (module 'internet'): static ns3::TypeId ns3::Ipv6OptionJumbogram::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## ipv6-option.h (module 'internet'): uint8_t ns3::Ipv6OptionJumbogram::Process(ns3::Ptr<ns3::Packet> packet, uint8_t offset, ns3::Ipv6Header const & ipv6Header, bool & isDropped) [member function]
<     cls.add_method('Process', 
<                    'uint8_t', 
<                    [param('ns3::Ptr< ns3::Packet >', 'packet'), param('uint8_t', 'offset'), param('ns3::Ipv6Header const &', 'ipv6Header'), param('bool &', 'isDropped')], 
<                    is_virtual=True)
<     ## ipv6-option.h (module 'internet'): ns3::Ipv6OptionJumbogram::OPT_NUMBER [variable]
<     cls.add_static_attribute('OPT_NUMBER', 'uint8_t const', is_const=True)
<     return
< 
< def register_Ns3Ipv6OptionPad1_methods(root_module, cls):
<     ## ipv6-option.h (module 'internet'): ns3::Ipv6OptionPad1::Ipv6OptionPad1(ns3::Ipv6OptionPad1 const & arg0) [constructor]
<     cls.add_constructor([param('ns3::Ipv6OptionPad1 const &', 'arg0')])
<     ## ipv6-option.h (module 'internet'): ns3::Ipv6OptionPad1::Ipv6OptionPad1() [constructor]
<     cls.add_constructor([])
<     ## ipv6-option.h (module 'internet'): uint8_t ns3::Ipv6OptionPad1::GetOptionNumber() const [member function]
<     cls.add_method('GetOptionNumber', 
<                    'uint8_t', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## ipv6-option.h (module 'internet'): static ns3::TypeId ns3::Ipv6OptionPad1::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## ipv6-option.h (module 'internet'): uint8_t ns3::Ipv6OptionPad1::Process(ns3::Ptr<ns3::Packet> packet, uint8_t offset, ns3::Ipv6Header const & ipv6Header, bool & isDropped) [member function]
<     cls.add_method('Process', 
<                    'uint8_t', 
<                    [param('ns3::Ptr< ns3::Packet >', 'packet'), param('uint8_t', 'offset'), param('ns3::Ipv6Header const &', 'ipv6Header'), param('bool &', 'isDropped')], 
<                    is_virtual=True)
<     ## ipv6-option.h (module 'internet'): ns3::Ipv6OptionPad1::OPT_NUMBER [variable]
<     cls.add_static_attribute('OPT_NUMBER', 'uint8_t const', is_const=True)
<     return
< 
< def register_Ns3Ipv6OptionPadn_methods(root_module, cls):
<     ## ipv6-option.h (module 'internet'): ns3::Ipv6OptionPadn::Ipv6OptionPadn(ns3::Ipv6OptionPadn const & arg0) [constructor]
<     cls.add_constructor([param('ns3::Ipv6OptionPadn const &', 'arg0')])
<     ## ipv6-option.h (module 'internet'): ns3::Ipv6OptionPadn::Ipv6OptionPadn() [constructor]
<     cls.add_constructor([])
<     ## ipv6-option.h (module 'internet'): uint8_t ns3::Ipv6OptionPadn::GetOptionNumber() const [member function]
<     cls.add_method('GetOptionNumber', 
<                    'uint8_t', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## ipv6-option.h (module 'internet'): static ns3::TypeId ns3::Ipv6OptionPadn::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## ipv6-option.h (module 'internet'): uint8_t ns3::Ipv6OptionPadn::Process(ns3::Ptr<ns3::Packet> packet, uint8_t offset, ns3::Ipv6Header const & ipv6Header, bool & isDropped) [member function]
<     cls.add_method('Process', 
<                    'uint8_t', 
<                    [param('ns3::Ptr< ns3::Packet >', 'packet'), param('uint8_t', 'offset'), param('ns3::Ipv6Header const &', 'ipv6Header'), param('bool &', 'isDropped')], 
<                    is_virtual=True)
<     ## ipv6-option.h (module 'internet'): ns3::Ipv6OptionPadn::OPT_NUMBER [variable]
<     cls.add_static_attribute('OPT_NUMBER', 'uint8_t const', is_const=True)
<     return
< 
< def register_Ns3Ipv6OptionRouterAlert_methods(root_module, cls):
<     ## ipv6-option.h (module 'internet'): ns3::Ipv6OptionRouterAlert::Ipv6OptionRouterAlert(ns3::Ipv6OptionRouterAlert const & arg0) [constructor]
<     cls.add_constructor([param('ns3::Ipv6OptionRouterAlert const &', 'arg0')])
<     ## ipv6-option.h (module 'internet'): ns3::Ipv6OptionRouterAlert::Ipv6OptionRouterAlert() [constructor]
<     cls.add_constructor([])
<     ## ipv6-option.h (module 'internet'): uint8_t ns3::Ipv6OptionRouterAlert::GetOptionNumber() const [member function]
<     cls.add_method('GetOptionNumber', 
<                    'uint8_t', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## ipv6-option.h (module 'internet'): static ns3::TypeId ns3::Ipv6OptionRouterAlert::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## ipv6-option.h (module 'internet'): uint8_t ns3::Ipv6OptionRouterAlert::Process(ns3::Ptr<ns3::Packet> packet, uint8_t offset, ns3::Ipv6Header const & ipv6Header, bool & isDropped) [member function]
<     cls.add_method('Process', 
<                    'uint8_t', 
<                    [param('ns3::Ptr< ns3::Packet >', 'packet'), param('uint8_t', 'offset'), param('ns3::Ipv6Header const &', 'ipv6Header'), param('bool &', 'isDropped')], 
<                    is_virtual=True)
<     ## ipv6-option.h (module 'internet'): ns3::Ipv6OptionRouterAlert::OPT_NUMBER [variable]
<     cls.add_static_attribute('OPT_NUMBER', 'uint8_t const', is_const=True)
<     return
< 
17017c15286
<     ## ipv6-packet-filter.h (module 'internet'): ns3::Ipv6PacketFilter::Ipv6PacketFilter(ns3::Ipv6PacketFilter const & arg0) [constructor]
---
>     ## ipv6-packet-filter.h (module 'internet'): ns3::Ipv6PacketFilter::Ipv6PacketFilter(ns3::Ipv6PacketFilter const & arg0) [copy constructor]
17030c15299
<                    is_const=True, is_virtual=True, visibility='private')
---
>                    is_const=True, visibility='private', is_virtual=True)
17035c15304
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
17039c15308
<     ## ipv6-pmtu-cache.h (module 'internet'): ns3::Ipv6PmtuCache::Ipv6PmtuCache(ns3::Ipv6PmtuCache const & arg0) [constructor]
---
>     ## ipv6-pmtu-cache.h (module 'internet'): ns3::Ipv6PmtuCache::Ipv6PmtuCache(ns3::Ipv6PmtuCache const & arg0) [copy constructor]
17075c15344
<     ## ipv6-address.h (module 'network'): ns3::Ipv6PrefixChecker::Ipv6PrefixChecker(ns3::Ipv6PrefixChecker const & arg0) [constructor]
---
>     ## ipv6-address.h (module 'network'): ns3::Ipv6PrefixChecker::Ipv6PrefixChecker(ns3::Ipv6PrefixChecker const & arg0) [copy constructor]
17081a15351,15352
>     ## ipv6-address.h (module 'network'): ns3::Ipv6PrefixValue::Ipv6PrefixValue(ns3::Ipv6PrefixValue const & arg0) [copy constructor]
>     cls.add_constructor([param('ns3::Ipv6PrefixValue const &', 'arg0')])
17084,17085d15354
<     ## ipv6-address.h (module 'network'): ns3::Ipv6PrefixValue::Ipv6PrefixValue(ns3::Ipv6PrefixValue const & arg0) [constructor]
<     cls.add_constructor([param('ns3::Ipv6PrefixValue const &', 'arg0')])
17091c15360
<     ## ipv6-address.h (module 'network'): bool ns3::Ipv6PrefixValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
---
>     ## ipv6-address.h (module 'network'): bool ns3::Ipv6PrefixValue::DeserializeFromString(std::string value, ns3::Ptr<ns3::AttributeChecker const> checker) [member function]
17101c15370
<     ## ipv6-address.h (module 'network'): std::string ns3::Ipv6PrefixValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
---
>     ## ipv6-address.h (module 'network'): std::string ns3::Ipv6PrefixValue::SerializeToString(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
17115c15384
<     ## ipv6-raw-socket-factory.h (module 'internet'): ns3::Ipv6RawSocketFactory::Ipv6RawSocketFactory(ns3::Ipv6RawSocketFactory const & arg0) [constructor]
---
>     ## ipv6-raw-socket-factory.h (module 'internet'): ns3::Ipv6RawSocketFactory::Ipv6RawSocketFactory(ns3::Ipv6RawSocketFactory const & arg0) [copy constructor]
17126c15395
<     ## ipv6-route.h (module 'internet'): ns3::Ipv6Route::Ipv6Route(ns3::Ipv6Route const & arg0) [constructor]
---
>     ## ipv6-route.h (module 'internet'): ns3::Ipv6Route::Ipv6Route(ns3::Ipv6Route const & arg0) [copy constructor]
17171c15440
<     ## ipv6-routing-protocol.h (module 'internet'): ns3::Ipv6RoutingProtocol::Ipv6RoutingProtocol(ns3::Ipv6RoutingProtocol const & arg0) [constructor]
---
>     ## ipv6-routing-protocol.h (module 'internet'): ns3::Ipv6RoutingProtocol::Ipv6RoutingProtocol(ns3::Ipv6RoutingProtocol const & arg0) [copy constructor]
17182,17183c15451,15452
<                    is_virtual=True, is_pure_virtual=True)
<     ## ipv6-routing-protocol.h (module 'internet'): void ns3::Ipv6RoutingProtocol::NotifyAddRoute(ns3::Ipv6Address dst, ns3::Ipv6Prefix mask, ns3::Ipv6Address nextHop, uint32_t interface, ns3::Ipv6Address prefixToUse=ns3::Ipv6Address::GetZero()) [member function]
---
>                    is_pure_virtual=True, is_virtual=True)
>     ## ipv6-routing-protocol.h (module 'internet'): void ns3::Ipv6RoutingProtocol::NotifyAddRoute(ns3::Ipv6Address dst, ns3::Ipv6Prefix mask, ns3::Ipv6Address nextHop, uint32_t interface, ns3::Ipv6Address prefixToUse=ns3::Ipv6Address::GetZero( )) [member function]
17186,17187c15455,15456
<                    [param('ns3::Ipv6Address', 'dst'), param('ns3::Ipv6Prefix', 'mask'), param('ns3::Ipv6Address', 'nextHop'), param('uint32_t', 'interface'), param('ns3::Ipv6Address', 'prefixToUse', default_value='ns3::Ipv6Address::GetZero()')], 
<                    is_virtual=True, is_pure_virtual=True)
---
>                    [param('ns3::Ipv6Address', 'dst'), param('ns3::Ipv6Prefix', 'mask'), param('ns3::Ipv6Address', 'nextHop'), param('uint32_t', 'interface'), param('ns3::Ipv6Address', 'prefixToUse', default_value='ns3::Ipv6Address::GetZero( )')], 
>                    is_pure_virtual=True, is_virtual=True)
17192c15461
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
17197c15466
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
17202,17203c15471,15472
<                    is_virtual=True, is_pure_virtual=True)
<     ## ipv6-routing-protocol.h (module 'internet'): void ns3::Ipv6RoutingProtocol::NotifyRemoveRoute(ns3::Ipv6Address dst, ns3::Ipv6Prefix mask, ns3::Ipv6Address nextHop, uint32_t interface, ns3::Ipv6Address prefixToUse=ns3::Ipv6Address::GetZero()) [member function]
---
>                    is_pure_virtual=True, is_virtual=True)
>     ## ipv6-routing-protocol.h (module 'internet'): void ns3::Ipv6RoutingProtocol::NotifyRemoveRoute(ns3::Ipv6Address dst, ns3::Ipv6Prefix mask, ns3::Ipv6Address nextHop, uint32_t interface, ns3::Ipv6Address prefixToUse=ns3::Ipv6Address::GetZero( )) [member function]
17206,17208c15475,15477
<                    [param('ns3::Ipv6Address', 'dst'), param('ns3::Ipv6Prefix', 'mask'), param('ns3::Ipv6Address', 'nextHop'), param('uint32_t', 'interface'), param('ns3::Ipv6Address', 'prefixToUse', default_value='ns3::Ipv6Address::GetZero()')], 
<                    is_virtual=True, is_pure_virtual=True)
<     ## ipv6-routing-protocol.h (module 'internet'): void ns3::Ipv6RoutingProtocol::PrintRoutingTable(ns3::Ptr<ns3::OutputStreamWrapper> stream, ns3::Time::Unit unit=::ns3::Time::Unit::S) const [member function]
---
>                    [param('ns3::Ipv6Address', 'dst'), param('ns3::Ipv6Prefix', 'mask'), param('ns3::Ipv6Address', 'nextHop'), param('uint32_t', 'interface'), param('ns3::Ipv6Address', 'prefixToUse', default_value='ns3::Ipv6Address::GetZero( )')], 
>                    is_pure_virtual=True, is_virtual=True)
>     ## ipv6-routing-protocol.h (module 'internet'): void ns3::Ipv6RoutingProtocol::PrintRoutingTable(ns3::Ptr<ns3::OutputStreamWrapper> stream) const [member function]
17211,17213c15480,15482
<                    [param('ns3::Ptr< ns3::OutputStreamWrapper >', 'stream'), param('ns3::Time::Unit', 'unit', default_value='::ns3::Time::Unit::S')], 
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
<     ## ipv6-routing-protocol.h (module 'internet'): bool ns3::Ipv6RoutingProtocol::RouteInput(ns3::Ptr<const ns3::Packet> p, ns3::Ipv6Header const & header, ns3::Ptr<const ns3::NetDevice> idev, ns3::Ipv6RoutingProtocol::UnicastForwardCallback ucb, ns3::Ipv6RoutingProtocol::MulticastForwardCallback mcb, ns3::Ipv6RoutingProtocol::LocalDeliverCallback lcb, ns3::Ipv6RoutingProtocol::ErrorCallback ecb) [member function]
---
>                    [param('ns3::Ptr< ns3::OutputStreamWrapper >', 'stream')], 
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
>     ## ipv6-routing-protocol.h (module 'internet'): bool ns3::Ipv6RoutingProtocol::RouteInput(ns3::Ptr<ns3::Packet const> p, ns3::Ipv6Header const & header, ns3::Ptr<const ns3::NetDevice> idev, ns3::Callback<void,ns3::Ptr<const ns3::NetDevice>,ns3::Ptr<ns3::Ipv6Route>,ns3::Ptr<const ns3::Packet>,const ns3::Ipv6Header&,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> ucb, ns3::Callback<void,ns3::Ptr<const ns3::NetDevice>,ns3::Ptr<ns3::Ipv6MulticastRoute>,ns3::Ptr<const ns3::Packet>,const ns3::Ipv6Header&,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> mcb, ns3::Callback<void,ns3::Ptr<const ns3::Packet>,const ns3::Ipv6Header&,unsigned int,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> lcb, ns3::Callback<void,ns3::Ptr<const ns3::Packet>,const ns3::Ipv6Header&,ns3::Socket::SocketErrno,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> ecb) [member function]
17217c15486
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
17222c15491
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
17227c15496
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
17231c15500
<     ## ipv6-static-routing.h (module 'internet'): ns3::Ipv6StaticRouting::Ipv6StaticRouting(ns3::Ipv6StaticRouting const & arg0) [constructor]
---
>     ## ipv6-static-routing.h (module 'internet'): ns3::Ipv6StaticRouting::Ipv6StaticRouting(ns3::Ipv6StaticRouting const & arg0) [copy constructor]
17235c15504
<     ## ipv6-static-routing.h (module 'internet'): void ns3::Ipv6StaticRouting::AddHostRouteTo(ns3::Ipv6Address dest, ns3::Ipv6Address nextHop, uint32_t interface, ns3::Ipv6Address prefixToUse=ns3::Ipv6Address("::"), uint32_t metric=0) [member function]
---
>     ## ipv6-static-routing.h (module 'internet'): void ns3::Ipv6StaticRouting::AddHostRouteTo(ns3::Ipv6Address dest, ns3::Ipv6Address nextHop, uint32_t interface, ns3::Ipv6Address prefixToUse=ns3::Ipv6Address(((const char*)"::")), uint32_t metric=0) [member function]
17238c15507
<                    [param('ns3::Ipv6Address', 'dest'), param('ns3::Ipv6Address', 'nextHop'), param('uint32_t', 'interface'), param('ns3::Ipv6Address', 'prefixToUse', default_value='ns3::Ipv6Address("::")'), param('uint32_t', 'metric', default_value='0')])
---
>                    [param('ns3::Ipv6Address', 'dest'), param('ns3::Ipv6Address', 'nextHop'), param('uint32_t', 'interface'), param('ns3::Ipv6Address', 'prefixToUse', default_value='ns3::Ipv6Address(((const char*)"::"))'), param('uint32_t', 'metric', default_value='0')])
17302c15571
<     ## ipv6-static-routing.h (module 'internet'): void ns3::Ipv6StaticRouting::NotifyAddRoute(ns3::Ipv6Address dst, ns3::Ipv6Prefix mask, ns3::Ipv6Address nextHop, uint32_t interface, ns3::Ipv6Address prefixToUse=ns3::Ipv6Address::GetZero()) [member function]
---
>     ## ipv6-static-routing.h (module 'internet'): void ns3::Ipv6StaticRouting::NotifyAddRoute(ns3::Ipv6Address dst, ns3::Ipv6Prefix mask, ns3::Ipv6Address nextHop, uint32_t interface, ns3::Ipv6Address prefixToUse=ns3::Ipv6Address::GetZero( )) [member function]
17305c15574
<                    [param('ns3::Ipv6Address', 'dst'), param('ns3::Ipv6Prefix', 'mask'), param('ns3::Ipv6Address', 'nextHop'), param('uint32_t', 'interface'), param('ns3::Ipv6Address', 'prefixToUse', default_value='ns3::Ipv6Address::GetZero()')], 
---
>                    [param('ns3::Ipv6Address', 'dst'), param('ns3::Ipv6Prefix', 'mask'), param('ns3::Ipv6Address', 'nextHop'), param('uint32_t', 'interface'), param('ns3::Ipv6Address', 'prefixToUse', default_value='ns3::Ipv6Address::GetZero( )')], 
17322c15591
<     ## ipv6-static-routing.h (module 'internet'): void ns3::Ipv6StaticRouting::NotifyRemoveRoute(ns3::Ipv6Address dst, ns3::Ipv6Prefix mask, ns3::Ipv6Address nextHop, uint32_t interface, ns3::Ipv6Address prefixToUse=ns3::Ipv6Address::GetZero()) [member function]
---
>     ## ipv6-static-routing.h (module 'internet'): void ns3::Ipv6StaticRouting::NotifyRemoveRoute(ns3::Ipv6Address dst, ns3::Ipv6Prefix mask, ns3::Ipv6Address nextHop, uint32_t interface, ns3::Ipv6Address prefixToUse=ns3::Ipv6Address::GetZero( )) [member function]
17325c15594
<                    [param('ns3::Ipv6Address', 'dst'), param('ns3::Ipv6Prefix', 'mask'), param('ns3::Ipv6Address', 'nextHop'), param('uint32_t', 'interface'), param('ns3::Ipv6Address', 'prefixToUse', default_value='ns3::Ipv6Address::GetZero()')], 
---
>                    [param('ns3::Ipv6Address', 'dst'), param('ns3::Ipv6Prefix', 'mask'), param('ns3::Ipv6Address', 'nextHop'), param('uint32_t', 'interface'), param('ns3::Ipv6Address', 'prefixToUse', default_value='ns3::Ipv6Address::GetZero( )')], 
17327c15596
<     ## ipv6-static-routing.h (module 'internet'): void ns3::Ipv6StaticRouting::PrintRoutingTable(ns3::Ptr<ns3::OutputStreamWrapper> stream, ns3::Time::Unit unit=::ns3::Time::Unit::S) const [member function]
---
>     ## ipv6-static-routing.h (module 'internet'): void ns3::Ipv6StaticRouting::PrintRoutingTable(ns3::Ptr<ns3::OutputStreamWrapper> stream) const [member function]
17330c15599
<                    [param('ns3::Ptr< ns3::OutputStreamWrapper >', 'stream'), param('ns3::Time::Unit', 'unit', default_value='::ns3::Time::Unit::S')], 
---
>                    [param('ns3::Ptr< ns3::OutputStreamWrapper >', 'stream')], 
17348c15617
<     ## ipv6-static-routing.h (module 'internet'): bool ns3::Ipv6StaticRouting::RouteInput(ns3::Ptr<const ns3::Packet> p, ns3::Ipv6Header const & header, ns3::Ptr<const ns3::NetDevice> idev, ns3::Ipv6RoutingProtocol::UnicastForwardCallback ucb, ns3::Ipv6RoutingProtocol::MulticastForwardCallback mcb, ns3::Ipv6RoutingProtocol::LocalDeliverCallback lcb, ns3::Ipv6RoutingProtocol::ErrorCallback ecb) [member function]
---
>     ## ipv6-static-routing.h (module 'internet'): bool ns3::Ipv6StaticRouting::RouteInput(ns3::Ptr<ns3::Packet const> p, ns3::Ipv6Header const & header, ns3::Ptr<const ns3::NetDevice> idev, ns3::Callback<void,ns3::Ptr<const ns3::NetDevice>,ns3::Ptr<ns3::Ipv6Route>,ns3::Ptr<const ns3::Packet>,const ns3::Ipv6Header&,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> ucb, ns3::Callback<void,ns3::Ptr<const ns3::NetDevice>,ns3::Ptr<ns3::Ipv6MulticastRoute>,ns3::Ptr<const ns3::Packet>,const ns3::Ipv6Header&,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> mcb, ns3::Callback<void,ns3::Ptr<const ns3::Packet>,const ns3::Ipv6Header&,unsigned int,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> lcb, ns3::Callback<void,ns3::Ptr<const ns3::Packet>,const ns3::Ipv6Header&,ns3::Socket::SocketErrno,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> ecb) [member function]
17362c15631
<     ## ipv6-static-routing.h (module 'internet'): void ns3::Ipv6StaticRouting::SetDefaultRoute(ns3::Ipv6Address nextHop, uint32_t interface, ns3::Ipv6Address prefixToUse=ns3::Ipv6Address("::"), uint32_t metric=0) [member function]
---
>     ## ipv6-static-routing.h (module 'internet'): void ns3::Ipv6StaticRouting::SetDefaultRoute(ns3::Ipv6Address nextHop, uint32_t interface, ns3::Ipv6Address prefixToUse=ns3::Ipv6Address(((const char*)"::")), uint32_t metric=0) [member function]
17365c15634
<                    [param('ns3::Ipv6Address', 'nextHop'), param('uint32_t', 'interface'), param('ns3::Ipv6Address', 'prefixToUse', default_value='ns3::Ipv6Address("::")'), param('uint32_t', 'metric', default_value='0')])
---
>                    [param('ns3::Ipv6Address', 'nextHop'), param('uint32_t', 'interface'), param('ns3::Ipv6Address', 'prefixToUse', default_value='ns3::Ipv6Address(((const char*)"::"))'), param('uint32_t', 'metric', default_value='0')])
17375c15644
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
17419c15688
<     ## mac48-address.h (module 'network'): ns3::Mac48AddressChecker::Mac48AddressChecker(ns3::Mac48AddressChecker const & arg0) [constructor]
---
>     ## mac48-address.h (module 'network'): ns3::Mac48AddressChecker::Mac48AddressChecker(ns3::Mac48AddressChecker const & arg0) [copy constructor]
17425a15695,15696
>     ## mac48-address.h (module 'network'): ns3::Mac48AddressValue::Mac48AddressValue(ns3::Mac48AddressValue const & arg0) [copy constructor]
>     cls.add_constructor([param('ns3::Mac48AddressValue const &', 'arg0')])
17428,17429d15698
<     ## mac48-address.h (module 'network'): ns3::Mac48AddressValue::Mac48AddressValue(ns3::Mac48AddressValue const & arg0) [constructor]
<     cls.add_constructor([param('ns3::Mac48AddressValue const &', 'arg0')])
17435c15704
<     ## mac48-address.h (module 'network'): bool ns3::Mac48AddressValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
---
>     ## mac48-address.h (module 'network'): bool ns3::Mac48AddressValue::DeserializeFromString(std::string value, ns3::Ptr<ns3::AttributeChecker const> checker) [member function]
17445c15714
<     ## mac48-address.h (module 'network'): std::string ns3::Mac48AddressValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
---
>     ## mac48-address.h (module 'network'): std::string ns3::Mac48AddressValue::SerializeToString(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
17490c15759
<     ## ndisc-cache.h (module 'internet'): std::list<ns3::NdiscCache::Entry *, std::allocator<ns3::NdiscCache::Entry *> > ns3::NdiscCache::LookupInverse(ns3::Address dst) [member function]
---
>     ## ndisc-cache.h (module 'internet'): std::list<ns3::NdiscCache::Entry*,std::allocator<ns3::NdiscCache::Entry*> > ns3::NdiscCache::LookupInverse(ns3::Address dst) [member function]
17502c15771
<     ## ndisc-cache.h (module 'internet'): void ns3::NdiscCache::SetDevice(ns3::Ptr<ns3::NetDevice> device, ns3::Ptr<ns3::Ipv6Interface> interface, ns3::Ptr<ns3::Icmpv6L4Protocol> icmpv6) [member function]
---
>     ## ndisc-cache.h (module 'internet'): void ns3::NdiscCache::SetDevice(ns3::Ptr<ns3::NetDevice> device, ns3::Ptr<ns3::Ipv6Interface> interface) [member function]
17505c15774
<                    [param('ns3::Ptr< ns3::NetDevice >', 'device'), param('ns3::Ptr< ns3::Ipv6Interface >', 'interface'), param('ns3::Ptr< ns3::Icmpv6L4Protocol >', 'icmpv6')])
---
>                    [param('ns3::Ptr< ns3::NetDevice >', 'device'), param('ns3::Ptr< ns3::Ipv6Interface >', 'interface')])
17516c15785
<                    is_virtual=True, visibility='private')
---
>                    visibility='private', is_virtual=True)
17520c15789
<     ## ndisc-cache.h (module 'internet'): ns3::NdiscCache::Entry::Entry(ns3::NdiscCache::Entry const & arg0) [constructor]
---
>     ## ndisc-cache.h (module 'internet'): ns3::NdiscCache::Entry::Entry(ns3::NdiscCache::Entry const & arg0) [copy constructor]
17524c15793
<     ## ndisc-cache.h (module 'internet'): void ns3::NdiscCache::Entry::AddWaitingPacket(ns3::NdiscCache::Ipv6PayloadHeaderPair p) [member function]
---
>     ## ndisc-cache.h (module 'internet'): void ns3::NdiscCache::Entry::AddWaitingPacket(std::pair<ns3::Ptr<ns3::Packet>,ns3::Ipv6Header> p) [member function]
17597c15866
<     ## ndisc-cache.h (module 'internet'): void ns3::NdiscCache::Entry::MarkIncomplete(ns3::NdiscCache::Ipv6PayloadHeaderPair p) [member function]
---
>     ## ndisc-cache.h (module 'internet'): void ns3::NdiscCache::Entry::MarkIncomplete(std::pair<ns3::Ptr<ns3::Packet>,ns3::Ipv6Header> p) [member function]
17666c15935
<     ## net-device.h (module 'network'): ns3::NetDevice::NetDevice(ns3::NetDevice const & arg0) [constructor]
---
>     ## net-device.h (module 'network'): ns3::NetDevice::NetDevice(ns3::NetDevice const & arg0) [copy constructor]
17672c15941
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
17677c15946
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
17682c15951
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
17687c15956
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
17692c15961
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
17697c15966
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
17702c15971
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
17707c15976
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
17712c15981
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
17722c15991
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
17727c15996
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
17732c16001
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
17737c16006
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
17742c16011
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
17747c16016
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
17752c16021
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
17757c16026
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
17762c16031
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
17767c16036
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
17772c16041
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
17777,17778c16046,16047
<                    is_virtual=True, is_pure_virtual=True)
<     ## net-device.h (module 'network'): void ns3::NetDevice::SetPromiscReceiveCallback(ns3::NetDevice::PromiscReceiveCallback cb) [member function]
---
>                    is_pure_virtual=True, is_virtual=True)
>     ## net-device.h (module 'network'): void ns3::NetDevice::SetPromiscReceiveCallback(ns3::Callback<bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<ns3::Packet const>, unsigned short, ns3::Address const&, ns3::Address const&, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty> cb) [member function]
17782,17783c16051,16052
<                    is_virtual=True, is_pure_virtual=True)
<     ## net-device.h (module 'network'): void ns3::NetDevice::SetReceiveCallback(ns3::NetDevice::ReceiveCallback cb) [member function]
---
>                    is_pure_virtual=True, is_virtual=True)
>     ## net-device.h (module 'network'): void ns3::NetDevice::SetReceiveCallback(ns3::Callback<bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<ns3::Packet const>, unsigned short, ns3::Address const&, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> cb) [member function]
17787c16056
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
17792c16061,16157
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
>     return
> 
> def register_Ns3NetDeviceQueue_methods(root_module, cls):
>     ## net-device.h (module 'network'): ns3::NetDeviceQueue::NetDeviceQueue(ns3::NetDeviceQueue const & arg0) [copy constructor]
>     cls.add_constructor([param('ns3::NetDeviceQueue const &', 'arg0')])
>     ## net-device.h (module 'network'): ns3::NetDeviceQueue::NetDeviceQueue() [constructor]
>     cls.add_constructor([])
>     ## net-device.h (module 'network'): ns3::Ptr<ns3::QueueLimits> ns3::NetDeviceQueue::GetQueueLimits() [member function]
>     cls.add_method('GetQueueLimits', 
>                    'ns3::Ptr< ns3::QueueLimits >', 
>                    [])
>     ## net-device.h (module 'network'): bool ns3::NetDeviceQueue::IsStopped() const [member function]
>     cls.add_method('IsStopped', 
>                    'bool', 
>                    [], 
>                    is_const=True)
>     ## net-device.h (module 'network'): void ns3::NetDeviceQueue::NotifyQueuedBytes(uint32_t bytes) [member function]
>     cls.add_method('NotifyQueuedBytes', 
>                    'void', 
>                    [param('uint32_t', 'bytes')])
>     ## net-device.h (module 'network'): void ns3::NetDeviceQueue::NotifyTransmittedBytes(uint32_t bytes) [member function]
>     cls.add_method('NotifyTransmittedBytes', 
>                    'void', 
>                    [param('uint32_t', 'bytes')])
>     ## net-device.h (module 'network'): void ns3::NetDeviceQueue::ResetQueueLimits() [member function]
>     cls.add_method('ResetQueueLimits', 
>                    'void', 
>                    [])
>     ## net-device.h (module 'network'): void ns3::NetDeviceQueue::SetQueueLimits(ns3::Ptr<ns3::QueueLimits> ql) [member function]
>     cls.add_method('SetQueueLimits', 
>                    'void', 
>                    [param('ns3::Ptr< ns3::QueueLimits >', 'ql')])
>     ## net-device.h (module 'network'): void ns3::NetDeviceQueue::SetWakeCallback(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> cb) [member function]
>     cls.add_method('SetWakeCallback', 
>                    'void', 
>                    [param('ns3::Callback< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'cb')], 
>                    is_virtual=True)
>     ## net-device.h (module 'network'): void ns3::NetDeviceQueue::Start() [member function]
>     cls.add_method('Start', 
>                    'void', 
>                    [], 
>                    is_virtual=True)
>     ## net-device.h (module 'network'): void ns3::NetDeviceQueue::Stop() [member function]
>     cls.add_method('Stop', 
>                    'void', 
>                    [], 
>                    is_virtual=True)
>     ## net-device.h (module 'network'): void ns3::NetDeviceQueue::Wake() [member function]
>     cls.add_method('Wake', 
>                    'void', 
>                    [], 
>                    is_virtual=True)
>     return
> 
> def register_Ns3NetDeviceQueueInterface_methods(root_module, cls):
>     ## net-device.h (module 'network'): ns3::NetDeviceQueueInterface::NetDeviceQueueInterface(ns3::NetDeviceQueueInterface const & arg0) [copy constructor]
>     cls.add_constructor([param('ns3::NetDeviceQueueInterface const &', 'arg0')])
>     ## net-device.h (module 'network'): ns3::NetDeviceQueueInterface::NetDeviceQueueInterface() [constructor]
>     cls.add_constructor([])
>     ## net-device.h (module 'network'): void ns3::NetDeviceQueueInterface::CreateTxQueues() [member function]
>     cls.add_method('CreateTxQueues', 
>                    'void', 
>                    [])
>     ## net-device.h (module 'network'): uint8_t ns3::NetDeviceQueueInterface::GetNTxQueues() const [member function]
>     cls.add_method('GetNTxQueues', 
>                    'uint8_t', 
>                    [], 
>                    is_const=True)
>     ## net-device.h (module 'network'): ns3::Callback<unsigned char, ns3::Ptr<ns3::QueueItem>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> ns3::NetDeviceQueueInterface::GetSelectQueueCallback() const [member function]
>     cls.add_method('GetSelectQueueCallback', 
>                    'ns3::Callback< unsigned char, ns3::Ptr< ns3::QueueItem >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 
>                    [], 
>                    is_const=True)
>     ## net-device.h (module 'network'): ns3::Ptr<ns3::NetDeviceQueue> ns3::NetDeviceQueueInterface::GetTxQueue(uint8_t i) const [member function]
>     cls.add_method('GetTxQueue', 
>                    'ns3::Ptr< ns3::NetDeviceQueue >', 
>                    [param('uint8_t', 'i')], 
>                    is_const=True)
>     ## net-device.h (module 'network'): static ns3::TypeId ns3::NetDeviceQueueInterface::GetTypeId() [member function]
>     cls.add_method('GetTypeId', 
>                    'ns3::TypeId', 
>                    [], 
>                    is_static=True)
>     ## net-device.h (module 'network'): void ns3::NetDeviceQueueInterface::SetSelectQueueCallback(ns3::Callback<unsigned char, ns3::Ptr<ns3::QueueItem>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> cb) [member function]
>     cls.add_method('SetSelectQueueCallback', 
>                    'void', 
>                    [param('ns3::Callback< unsigned char, ns3::Ptr< ns3::QueueItem >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'cb')])
>     ## net-device.h (module 'network'): void ns3::NetDeviceQueueInterface::SetTxQueuesN(uint8_t numTxQueues) [member function]
>     cls.add_method('SetTxQueuesN', 
>                    'void', 
>                    [param('uint8_t', 'numTxQueues')])
>     ## net-device.h (module 'network'): void ns3::NetDeviceQueueInterface::DoDispose() [member function]
>     cls.add_method('DoDispose', 
>                    'void', 
>                    [], 
>                    visibility='protected', is_virtual=True)
17799c16164
<     ## nix-vector.h (module 'network'): ns3::NixVector::NixVector(ns3::NixVector const & o) [constructor]
---
>     ## nix-vector.h (module 'network'): ns3::NixVector::NixVector(ns3::NixVector const & o) [copy constructor]
17840c16205
<     ## node.h (module 'network'): ns3::Node::Node(ns3::Node const & arg0) [constructor]
---
>     ## node.h (module 'network'): ns3::Node::Node(ns3::Node const & arg0) [copy constructor]
17899c16264
<     ## node.h (module 'network'): void ns3::Node::RegisterDeviceAdditionListener(ns3::Node::DeviceAdditionListener listener) [member function]
---
>     ## node.h (module 'network'): void ns3::Node::RegisterDeviceAdditionListener(ns3::Callback<void,ns3::Ptr<ns3::NetDevice>,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> listener) [member function]
17903c16268
<     ## node.h (module 'network'): void ns3::Node::RegisterProtocolHandler(ns3::Node::ProtocolHandler handler, uint16_t protocolType, ns3::Ptr<ns3::NetDevice> device, bool promiscuous=false) [member function]
---
>     ## node.h (module 'network'): void ns3::Node::RegisterProtocolHandler(ns3::Callback<void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<ns3::Packet const>, unsigned short, ns3::Address const&, ns3::Address const&, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty> handler, uint16_t protocolType, ns3::Ptr<ns3::NetDevice> device, bool promiscuous=false) [member function]
17907c16272
<     ## node.h (module 'network'): void ns3::Node::UnregisterDeviceAdditionListener(ns3::Node::DeviceAdditionListener listener) [member function]
---
>     ## node.h (module 'network'): void ns3::Node::UnregisterDeviceAdditionListener(ns3::Callback<void,ns3::Ptr<ns3::NetDevice>,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> listener) [member function]
17911c16276
<     ## node.h (module 'network'): void ns3::Node::UnregisterProtocolHandler(ns3::Node::ProtocolHandler handler) [member function]
---
>     ## node.h (module 'network'): void ns3::Node::UnregisterProtocolHandler(ns3::Callback<void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<ns3::Packet const>, unsigned short, ns3::Address const&, ns3::Address const&, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty> handler) [member function]
17919c16284
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
17924c16289
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
17975c16340
<     ## object-factory.h (module 'core'): ns3::ObjectFactoryChecker::ObjectFactoryChecker(ns3::ObjectFactoryChecker const & arg0) [constructor]
---
>     ## object-factory.h (module 'core'): ns3::ObjectFactoryChecker::ObjectFactoryChecker(ns3::ObjectFactoryChecker const & arg0) [copy constructor]
17981a16347,16348
>     ## object-factory.h (module 'core'): ns3::ObjectFactoryValue::ObjectFactoryValue(ns3::ObjectFactoryValue const & arg0) [copy constructor]
>     cls.add_constructor([param('ns3::ObjectFactoryValue const &', 'arg0')])
17984,17985d16350
<     ## object-factory.h (module 'core'): ns3::ObjectFactoryValue::ObjectFactoryValue(ns3::ObjectFactoryValue const & arg0) [constructor]
<     cls.add_constructor([param('ns3::ObjectFactoryValue const &', 'arg0')])
17991c16356
<     ## object-factory.h (module 'core'): bool ns3::ObjectFactoryValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
---
>     ## object-factory.h (module 'core'): bool ns3::ObjectFactoryValue::DeserializeFromString(std::string value, ns3::Ptr<ns3::AttributeChecker const> checker) [member function]
18001c16366
<     ## object-factory.h (module 'core'): std::string ns3::ObjectFactoryValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
---
>     ## object-factory.h (module 'core'): std::string ns3::ObjectFactoryValue::SerializeToString(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
18013c16378
<     ## output-stream-wrapper.h (module 'network'): ns3::OutputStreamWrapper::OutputStreamWrapper(ns3::OutputStreamWrapper const & arg0) [constructor]
---
>     ## output-stream-wrapper.h (module 'network'): ns3::OutputStreamWrapper::OutputStreamWrapper(ns3::OutputStreamWrapper const & arg0) [copy constructor]
18015,18016c16380,16381
<     ## output-stream-wrapper.h (module 'network'): ns3::OutputStreamWrapper::OutputStreamWrapper(std::string filename, std::ios_base::openmode filemode) [constructor]
<     cls.add_constructor([param('std::string', 'filename'), param('std::ios_base::openmode', 'filemode')])
---
>     ## output-stream-wrapper.h (module 'network'): ns3::OutputStreamWrapper::OutputStreamWrapper(std::string filename, std::_Ios_Openmode filemode) [constructor]
>     cls.add_constructor([param('std::string', 'filename'), param('std::_Ios_Openmode', 'filemode')])
18029c16394
<     ## packet.h (module 'network'): ns3::Packet::Packet(ns3::Packet const & o) [constructor]
---
>     ## packet.h (module 'network'): ns3::Packet::Packet(ns3::Packet const & o) [copy constructor]
18037c16402
<     ## packet.h (module 'network'): void ns3::Packet::AddAtEnd(ns3::Ptr<const ns3::Packet> packet) [member function]
---
>     ## packet.h (module 'network'): void ns3::Packet::AddAtEnd(ns3::Ptr<ns3::Packet const> packet) [member function]
18046,18050d16410
<     ## packet.h (module 'network'): void ns3::Packet::AddByteTag(ns3::Tag const & tag, uint32_t start, uint32_t end) const [member function]
<     cls.add_method('AddByteTag', 
<                    'void', 
<                    [param('ns3::Tag const &', 'tag'), param('uint32_t', 'start'), param('uint32_t', 'end')], 
<                    is_const=True)
18143,18147d16502
<     ## packet.h (module 'network'): uint32_t ns3::Packet::PeekHeader(ns3::Header & header, uint32_t size) const [member function]
<     cls.add_method('PeekHeader', 
<                    'uint32_t', 
<                    [param('ns3::Header &', 'header'), param('uint32_t', 'size')], 
<                    is_const=True)
18192,18195d16546
<     ## packet.h (module 'network'): uint32_t ns3::Packet::RemoveHeader(ns3::Header & header, uint32_t size) [member function]
<     cls.add_method('RemoveHeader', 
<                    'uint32_t', 
<                    [param('ns3::Header &', 'header'), param('uint32_t', 'size')])
18236,18240d16586
<                    is_const=True, deprecated=True)
<     ## random-variable-stream.h (module 'core'): double ns3::ParetoRandomVariable::GetScale() const [member function]
<     cls.add_method('GetScale', 
<                    'double', 
<                    [], 
18252c16598
<     ## random-variable-stream.h (module 'core'): double ns3::ParetoRandomVariable::GetValue(double scale, double shape, double bound) [member function]
---
>     ## random-variable-stream.h (module 'core'): double ns3::ParetoRandomVariable::GetValue(double mean, double shape, double bound) [member function]
18255,18256c16601,16602
<                    [param('double', 'scale'), param('double', 'shape'), param('double', 'bound')])
<     ## random-variable-stream.h (module 'core'): uint32_t ns3::ParetoRandomVariable::GetInteger(uint32_t scale, uint32_t shape, uint32_t bound) [member function]
---
>                    [param('double', 'mean'), param('double', 'shape'), param('double', 'bound')])
>     ## random-variable-stream.h (module 'core'): uint32_t ns3::ParetoRandomVariable::GetInteger(uint32_t mean, uint32_t shape, uint32_t bound) [member function]
18259c16605
<                    [param('uint32_t', 'scale'), param('uint32_t', 'shape'), param('uint32_t', 'bound')])
---
>                    [param('uint32_t', 'mean'), param('uint32_t', 'shape'), param('uint32_t', 'bound')])
18273c16619
<     ## probe.h (module 'stats'): ns3::Probe::Probe(ns3::Probe const & arg0) [constructor]
---
>     ## probe.h (module 'stats'): ns3::Probe::Probe(ns3::Probe const & arg0) [copy constructor]
18281c16627
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
18286c16632
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
18301c16647
<     ## queue-item.h (module 'network'): ns3::QueueItem::QueueItem(ns3::Ptr<ns3::Packet> p) [constructor]
---
>     ## net-device.h (module 'network'): ns3::QueueItem::QueueItem(ns3::Ptr<ns3::Packet> p) [constructor]
18303c16649
<     ## queue-item.h (module 'network'): ns3::Ptr<ns3::Packet> ns3::QueueItem::GetPacket() const [member function]
---
>     ## net-device.h (module 'network'): ns3::Ptr<ns3::Packet> ns3::QueueItem::GetPacket() const [member function]
18308,18309c16654,16655
<     ## queue-item.h (module 'network'): uint32_t ns3::QueueItem::GetSize() const [member function]
<     cls.add_method('GetSize', 
---
>     ## net-device.h (module 'network'): uint32_t ns3::QueueItem::GetPacketSize() const [member function]
>     cls.add_method('GetPacketSize', 
18313c16659
<     ## queue-item.h (module 'network'): bool ns3::QueueItem::GetUint8Value(ns3::QueueItem::Uint8Values field, uint8_t & value) const [member function]
---
>     ## net-device.h (module 'network'): bool ns3::QueueItem::GetUint8Value(ns3::QueueItem::Uint8Values field, uint8_t & value) const [member function]
18318c16664
<     ## queue-item.h (module 'network'): void ns3::QueueItem::Print(std::ostream & os) const [member function]
---
>     ## net-device.h (module 'network'): void ns3::QueueItem::Print(std::ostream & os) const [member function]
18326c16672
<     ## rip.h (module 'internet'): ns3::Rip::Rip(ns3::Rip const & arg0) [constructor]
---
>     ## rip.h (module 'internet'): ns3::Rip::Rip(ns3::Rip const & arg0) [copy constructor]
18373c16719
<     ## rip.h (module 'internet'): void ns3::Rip::PrintRoutingTable(ns3::Ptr<ns3::OutputStreamWrapper> stream, ns3::Time::Unit unit=::ns3::Time::Unit::S) const [member function]
---
>     ## rip.h (module 'internet'): void ns3::Rip::PrintRoutingTable(ns3::Ptr<ns3::OutputStreamWrapper> stream) const [member function]
18376c16722
<                    [param('ns3::Ptr< ns3::OutputStreamWrapper >', 'stream'), param('ns3::Time::Unit', 'unit', default_value='::ns3::Time::Unit::S')], 
---
>                    [param('ns3::Ptr< ns3::OutputStreamWrapper >', 'stream')], 
18378c16724
<     ## rip.h (module 'internet'): bool ns3::Rip::RouteInput(ns3::Ptr<const ns3::Packet> p, ns3::Ipv4Header const & header, ns3::Ptr<const ns3::NetDevice> idev, ns3::Ipv4RoutingProtocol::UnicastForwardCallback ucb, ns3::Ipv4RoutingProtocol::MulticastForwardCallback mcb, ns3::Ipv4RoutingProtocol::LocalDeliverCallback lcb, ns3::Ipv4RoutingProtocol::ErrorCallback ecb) [member function]
---
>     ## rip.h (module 'internet'): bool ns3::Rip::RouteInput(ns3::Ptr<ns3::Packet const> p, ns3::Ipv4Header const & header, ns3::Ptr<const ns3::NetDevice> idev, ns3::Callback<void,ns3::Ptr<ns3::Ipv4Route>,ns3::Ptr<const ns3::Packet>,const ns3::Ipv4Header&,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> ucb, ns3::Callback<void,ns3::Ptr<ns3::Ipv4MulticastRoute>,ns3::Ptr<const ns3::Packet>,const ns3::Ipv4Header&,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> mcb, ns3::Callback<void,ns3::Ptr<const ns3::Packet>,const ns3::Ipv4Header&,unsigned int,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> lcb, ns3::Callback<void,ns3::Ptr<const ns3::Packet>,const ns3::Ipv4Header&,ns3::Socket::SocketErrno,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> ecb) [member function]
18405c16751
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
18410c16756
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
18414c16760
<     ## ripng.h (module 'internet'): ns3::RipNg::RipNg(ns3::RipNg const & arg0) [constructor]
---
>     ## ripng.h (module 'internet'): ns3::RipNg::RipNg(ns3::RipNg const & arg0) [copy constructor]
18446c16792
<     ## ripng.h (module 'internet'): void ns3::RipNg::NotifyAddRoute(ns3::Ipv6Address dst, ns3::Ipv6Prefix mask, ns3::Ipv6Address nextHop, uint32_t interface, ns3::Ipv6Address prefixToUse=ns3::Ipv6Address::GetZero()) [member function]
---
>     ## ripng.h (module 'internet'): void ns3::RipNg::NotifyAddRoute(ns3::Ipv6Address dst, ns3::Ipv6Prefix mask, ns3::Ipv6Address nextHop, uint32_t interface, ns3::Ipv6Address prefixToUse=ns3::Ipv6Address::GetZero( )) [member function]
18449c16795
<                    [param('ns3::Ipv6Address', 'dst'), param('ns3::Ipv6Prefix', 'mask'), param('ns3::Ipv6Address', 'nextHop'), param('uint32_t', 'interface'), param('ns3::Ipv6Address', 'prefixToUse', default_value='ns3::Ipv6Address::GetZero()')], 
---
>                    [param('ns3::Ipv6Address', 'dst'), param('ns3::Ipv6Prefix', 'mask'), param('ns3::Ipv6Address', 'nextHop'), param('uint32_t', 'interface'), param('ns3::Ipv6Address', 'prefixToUse', default_value='ns3::Ipv6Address::GetZero( )')], 
18466c16812
<     ## ripng.h (module 'internet'): void ns3::RipNg::NotifyRemoveRoute(ns3::Ipv6Address dst, ns3::Ipv6Prefix mask, ns3::Ipv6Address nextHop, uint32_t interface, ns3::Ipv6Address prefixToUse=ns3::Ipv6Address::GetZero()) [member function]
---
>     ## ripng.h (module 'internet'): void ns3::RipNg::NotifyRemoveRoute(ns3::Ipv6Address dst, ns3::Ipv6Prefix mask, ns3::Ipv6Address nextHop, uint32_t interface, ns3::Ipv6Address prefixToUse=ns3::Ipv6Address::GetZero( )) [member function]
18469c16815
<                    [param('ns3::Ipv6Address', 'dst'), param('ns3::Ipv6Prefix', 'mask'), param('ns3::Ipv6Address', 'nextHop'), param('uint32_t', 'interface'), param('ns3::Ipv6Address', 'prefixToUse', default_value='ns3::Ipv6Address::GetZero()')], 
---
>                    [param('ns3::Ipv6Address', 'dst'), param('ns3::Ipv6Prefix', 'mask'), param('ns3::Ipv6Address', 'nextHop'), param('uint32_t', 'interface'), param('ns3::Ipv6Address', 'prefixToUse', default_value='ns3::Ipv6Address::GetZero( )')], 
18471c16817
<     ## ripng.h (module 'internet'): void ns3::RipNg::PrintRoutingTable(ns3::Ptr<ns3::OutputStreamWrapper> stream, ns3::Time::Unit unit=::ns3::Time::Unit::S) const [member function]
---
>     ## ripng.h (module 'internet'): void ns3::RipNg::PrintRoutingTable(ns3::Ptr<ns3::OutputStreamWrapper> stream) const [member function]
18474c16820
<                    [param('ns3::Ptr< ns3::OutputStreamWrapper >', 'stream'), param('ns3::Time::Unit', 'unit', default_value='::ns3::Time::Unit::S')], 
---
>                    [param('ns3::Ptr< ns3::OutputStreamWrapper >', 'stream')], 
18476c16822
<     ## ripng.h (module 'internet'): bool ns3::RipNg::RouteInput(ns3::Ptr<const ns3::Packet> p, ns3::Ipv6Header const & header, ns3::Ptr<const ns3::NetDevice> idev, ns3::Ipv6RoutingProtocol::UnicastForwardCallback ucb, ns3::Ipv6RoutingProtocol::MulticastForwardCallback mcb, ns3::Ipv6RoutingProtocol::LocalDeliverCallback lcb, ns3::Ipv6RoutingProtocol::ErrorCallback ecb) [member function]
---
>     ## ripng.h (module 'internet'): bool ns3::RipNg::RouteInput(ns3::Ptr<ns3::Packet const> p, ns3::Ipv6Header const & header, ns3::Ptr<const ns3::NetDevice> idev, ns3::Callback<void,ns3::Ptr<const ns3::NetDevice>,ns3::Ptr<ns3::Ipv6Route>,ns3::Ptr<const ns3::Packet>,const ns3::Ipv6Header&,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> ucb, ns3::Callback<void,ns3::Ptr<const ns3::NetDevice>,ns3::Ptr<ns3::Ipv6MulticastRoute>,ns3::Ptr<const ns3::Packet>,const ns3::Ipv6Header&,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> mcb, ns3::Callback<void,ns3::Ptr<const ns3::Packet>,const ns3::Ipv6Header&,unsigned int,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> lcb, ns3::Callback<void,ns3::Ptr<const ns3::Packet>,const ns3::Ipv6Header&,ns3::Socket::SocketErrno,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> ecb) [member function]
18503c16849
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
18508c16854
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
18514c16860
<     ## tcp-bic.h (module 'internet'): ns3::TcpBic::TcpBic(ns3::TcpBic const & sock) [constructor]
---
>     ## tcp-bic.h (module 'internet'): ns3::TcpBic::TcpBic(ns3::TcpBic const & sock) [copy constructor]
18541,18545d16886
<     ## tcp-bic.h (module 'internet'): void ns3::TcpBic::ReduceCwnd(ns3::Ptr<ns3::TcpSocketState> tcb) [member function]
<     cls.add_method('ReduceCwnd', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb')], 
<                    is_virtual=True)
18550,18629c16891
<                    is_virtual=True, visibility='protected')
<     return
< 
< def register_Ns3TcpClassicRecovery_methods(root_module, cls):
<     ## tcp-recovery-ops.h (module 'internet'): ns3::TcpClassicRecovery::TcpClassicRecovery() [constructor]
<     cls.add_constructor([])
<     ## tcp-recovery-ops.h (module 'internet'): ns3::TcpClassicRecovery::TcpClassicRecovery(ns3::TcpClassicRecovery const & recovery) [constructor]
<     cls.add_constructor([param('ns3::TcpClassicRecovery const &', 'recovery')])
<     ## tcp-recovery-ops.h (module 'internet'): void ns3::TcpClassicRecovery::DoRecovery(ns3::Ptr<ns3::TcpSocketState> tcb, uint32_t deliveredBytes) [member function]
<     cls.add_method('DoRecovery', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb'), param('uint32_t', 'deliveredBytes')], 
<                    is_virtual=True)
<     ## tcp-recovery-ops.h (module 'internet'): void ns3::TcpClassicRecovery::EnterRecovery(ns3::Ptr<ns3::TcpSocketState> tcb, uint32_t dupAckCount, uint32_t unAckDataCount, uint32_t deliveredBytes) [member function]
<     cls.add_method('EnterRecovery', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb'), param('uint32_t', 'dupAckCount'), param('uint32_t', 'unAckDataCount'), param('uint32_t', 'deliveredBytes')], 
<                    is_virtual=True)
<     ## tcp-recovery-ops.h (module 'internet'): void ns3::TcpClassicRecovery::ExitRecovery(ns3::Ptr<ns3::TcpSocketState> tcb) [member function]
<     cls.add_method('ExitRecovery', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb')], 
<                    is_virtual=True)
<     ## tcp-recovery-ops.h (module 'internet'): ns3::Ptr<ns3::TcpRecoveryOps> ns3::TcpClassicRecovery::Fork() [member function]
<     cls.add_method('Fork', 
<                    'ns3::Ptr< ns3::TcpRecoveryOps >', 
<                    [], 
<                    is_virtual=True)
<     ## tcp-recovery-ops.h (module 'internet'): std::string ns3::TcpClassicRecovery::GetName() const [member function]
<     cls.add_method('GetName', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## tcp-recovery-ops.h (module 'internet'): static ns3::TypeId ns3::TcpClassicRecovery::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     return
< 
< def register_Ns3TcpDctcp_methods(root_module, cls):
<     ## tcp-dctcp.h (module 'internet'): ns3::TcpDctcp::TcpDctcp() [constructor]
<     cls.add_constructor([])
<     ## tcp-dctcp.h (module 'internet'): ns3::TcpDctcp::TcpDctcp(ns3::TcpDctcp const & sock) [constructor]
<     cls.add_constructor([param('ns3::TcpDctcp const &', 'sock')])
<     ## tcp-dctcp.h (module 'internet'): void ns3::TcpDctcp::CwndEvent(ns3::Ptr<ns3::TcpSocketState> tcb, ns3::TcpSocketState::TcpCAEvent_t const event) [member function]
<     cls.add_method('CwndEvent', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb'), param('ns3::TcpSocketState::TcpCAEvent_t const', 'event')], 
<                    is_virtual=True)
<     ## tcp-dctcp.h (module 'internet'): ns3::Ptr<ns3::TcpCongestionOps> ns3::TcpDctcp::Fork() [member function]
<     cls.add_method('Fork', 
<                    'ns3::Ptr< ns3::TcpCongestionOps >', 
<                    [], 
<                    is_virtual=True)
<     ## tcp-dctcp.h (module 'internet'): std::string ns3::TcpDctcp::GetName() const [member function]
<     cls.add_method('GetName', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## tcp-dctcp.h (module 'internet'): static ns3::TypeId ns3::TcpDctcp::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## tcp-dctcp.h (module 'internet'): void ns3::TcpDctcp::Init(ns3::Ptr<ns3::TcpSocketState> tcb) [member function]
<     cls.add_method('Init', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb')], 
<                    is_virtual=True)
<     ## tcp-dctcp.h (module 'internet'): void ns3::TcpDctcp::PktsAcked(ns3::Ptr<ns3::TcpSocketState> tcb, uint32_t segmentsAcked, ns3::Time const & rtt) [member function]
<     cls.add_method('PktsAcked', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb'), param('uint32_t', 'segmentsAcked'), param('ns3::Time const &', 'rtt')], 
<                    is_virtual=True)
<     ## tcp-dctcp.h (module 'internet'): void ns3::TcpDctcp::ReduceCwnd(ns3::Ptr<ns3::TcpSocketState> tcb) [member function]
<     cls.add_method('ReduceCwnd', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb')], 
<                    is_virtual=True)
---
>                    visibility='protected', is_virtual=True)
18635c16897
<     ## tcp-highspeed.h (module 'internet'): ns3::TcpHighSpeed::TcpHighSpeed(ns3::TcpHighSpeed const & sock) [constructor]
---
>     ## tcp-highspeed.h (module 'internet'): ns3::TcpHighSpeed::TcpHighSpeed(ns3::TcpHighSpeed const & sock) [copy constructor]
18671c16933
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
18677c16939
<     ## tcp-htcp.h (module 'internet'): ns3::TcpHtcp::TcpHtcp(ns3::TcpHtcp const & sock) [constructor]
---
>     ## tcp-htcp.h (module 'internet'): ns3::TcpHtcp::TcpHtcp(ns3::TcpHtcp const & sock) [copy constructor]
18708c16970
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
18714c16976
<     ## tcp-hybla.h (module 'internet'): ns3::TcpHybla::TcpHybla(ns3::TcpHybla const & sock) [constructor]
---
>     ## tcp-hybla.h (module 'internet'): ns3::TcpHybla::TcpHybla(ns3::TcpHybla const & sock) [copy constructor]
18740c17002
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
18745c17007
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
18751c17013
<     ## tcp-illinois.h (module 'internet'): ns3::TcpIllinois::TcpIllinois(ns3::TcpIllinois const & sock) [constructor]
---
>     ## tcp-illinois.h (module 'internet'): ns3::TcpIllinois::TcpIllinois(ns3::TcpIllinois const & sock) [copy constructor]
18790a17053,17054
>     ## tcp-l4-protocol.h (module 'internet'): ns3::TcpL4Protocol::PROT_NUMBER [variable]
>     cls.add_static_attribute('PROT_NUMBER', 'uint8_t const', is_const=True)
18796,18797d17059
<     ## tcp-l4-protocol.h (module 'internet'): ns3::TcpL4Protocol::PROT_NUMBER [variable]
<     cls.add_static_attribute('PROT_NUMBER', 'uint8_t const', is_const=True)
18808,18811d17069
<     ## tcp-l4-protocol.h (module 'internet'): ns3::Ptr<ns3::Socket> ns3::TcpL4Protocol::CreateSocket(ns3::TypeId congestionTypeId, ns3::TypeId recoveryTypeId) [member function]
<     cls.add_method('CreateSocket', 
<                    'ns3::Ptr< ns3::Socket >', 
<                    [param('ns3::TypeId', 'congestionTypeId'), param('ns3::TypeId', 'recoveryTypeId')])
18824c17082
<     ## tcp-l4-protocol.h (module 'internet'): ns3::Ipv4EndPoint * ns3::TcpL4Protocol::Allocate(ns3::Ptr<ns3::NetDevice> boundNetDevice, uint16_t port) [member function]
---
>     ## tcp-l4-protocol.h (module 'internet'): ns3::Ipv4EndPoint * ns3::TcpL4Protocol::Allocate(uint16_t port) [member function]
18827,18828c17085,17086
<                    [param('ns3::Ptr< ns3::NetDevice >', 'boundNetDevice'), param('uint16_t', 'port')])
<     ## tcp-l4-protocol.h (module 'internet'): ns3::Ipv4EndPoint * ns3::TcpL4Protocol::Allocate(ns3::Ptr<ns3::NetDevice> boundNetDevice, ns3::Ipv4Address address, uint16_t port) [member function]
---
>                    [param('uint16_t', 'port')])
>     ## tcp-l4-protocol.h (module 'internet'): ns3::Ipv4EndPoint * ns3::TcpL4Protocol::Allocate(ns3::Ipv4Address address, uint16_t port) [member function]
18831,18832c17089,17090
<                    [param('ns3::Ptr< ns3::NetDevice >', 'boundNetDevice'), param('ns3::Ipv4Address', 'address'), param('uint16_t', 'port')])
<     ## tcp-l4-protocol.h (module 'internet'): ns3::Ipv4EndPoint * ns3::TcpL4Protocol::Allocate(ns3::Ptr<ns3::NetDevice> boundNetDevice, ns3::Ipv4Address localAddress, uint16_t localPort, ns3::Ipv4Address peerAddress, uint16_t peerPort) [member function]
---
>                    [param('ns3::Ipv4Address', 'address'), param('uint16_t', 'port')])
>     ## tcp-l4-protocol.h (module 'internet'): ns3::Ipv4EndPoint * ns3::TcpL4Protocol::Allocate(ns3::Ipv4Address localAddress, uint16_t localPort, ns3::Ipv4Address peerAddress, uint16_t peerPort) [member function]
18835c17093
<                    [param('ns3::Ptr< ns3::NetDevice >', 'boundNetDevice'), param('ns3::Ipv4Address', 'localAddress'), param('uint16_t', 'localPort'), param('ns3::Ipv4Address', 'peerAddress'), param('uint16_t', 'peerPort')])
---
>                    [param('ns3::Ipv4Address', 'localAddress'), param('uint16_t', 'localPort'), param('ns3::Ipv4Address', 'peerAddress'), param('uint16_t', 'peerPort')])
18844c17102
<     ## tcp-l4-protocol.h (module 'internet'): ns3::Ipv6EndPoint * ns3::TcpL4Protocol::Allocate6(ns3::Ptr<ns3::NetDevice> boundNetDevice, uint16_t port) [member function]
---
>     ## tcp-l4-protocol.h (module 'internet'): ns3::Ipv6EndPoint * ns3::TcpL4Protocol::Allocate6(uint16_t port) [member function]
18847,18848c17105,17106
<                    [param('ns3::Ptr< ns3::NetDevice >', 'boundNetDevice'), param('uint16_t', 'port')])
<     ## tcp-l4-protocol.h (module 'internet'): ns3::Ipv6EndPoint * ns3::TcpL4Protocol::Allocate6(ns3::Ptr<ns3::NetDevice> boundNetDevice, ns3::Ipv6Address address, uint16_t port) [member function]
---
>                    [param('uint16_t', 'port')])
>     ## tcp-l4-protocol.h (module 'internet'): ns3::Ipv6EndPoint * ns3::TcpL4Protocol::Allocate6(ns3::Ipv6Address address, uint16_t port) [member function]
18851,18852c17109,17110
<                    [param('ns3::Ptr< ns3::NetDevice >', 'boundNetDevice'), param('ns3::Ipv6Address', 'address'), param('uint16_t', 'port')])
<     ## tcp-l4-protocol.h (module 'internet'): ns3::Ipv6EndPoint * ns3::TcpL4Protocol::Allocate6(ns3::Ptr<ns3::NetDevice> boundNetDevice, ns3::Ipv6Address localAddress, uint16_t localPort, ns3::Ipv6Address peerAddress, uint16_t peerPort) [member function]
---
>                    [param('ns3::Ipv6Address', 'address'), param('uint16_t', 'port')])
>     ## tcp-l4-protocol.h (module 'internet'): ns3::Ipv6EndPoint * ns3::TcpL4Protocol::Allocate6(ns3::Ipv6Address localAddress, uint16_t localPort, ns3::Ipv6Address peerAddress, uint16_t peerPort) [member function]
18855c17113
<                    [param('ns3::Ptr< ns3::NetDevice >', 'boundNetDevice'), param('ns3::Ipv6Address', 'localAddress'), param('uint16_t', 'localPort'), param('ns3::Ipv6Address', 'peerAddress'), param('uint16_t', 'peerPort')])
---
>                    [param('ns3::Ipv6Address', 'localAddress'), param('uint16_t', 'localPort'), param('ns3::Ipv6Address', 'peerAddress'), param('uint16_t', 'peerPort')])
18897c17155
<     ## tcp-l4-protocol.h (module 'internet'): void ns3::TcpL4Protocol::SetDownTarget(ns3::IpL4Protocol::DownTargetCallback cb) [member function]
---
>     ## tcp-l4-protocol.h (module 'internet'): void ns3::TcpL4Protocol::SetDownTarget(ns3::Callback<void, ns3::Ptr<ns3::Packet>, ns3::Ipv4Address, ns3::Ipv4Address, unsigned char, ns3::Ptr<ns3::Ipv4Route>, ns3::empty, ns3::empty, ns3::empty, ns3::empty> cb) [member function]
18902c17160
<     ## tcp-l4-protocol.h (module 'internet'): void ns3::TcpL4Protocol::SetDownTarget6(ns3::IpL4Protocol::DownTargetCallback6 cb) [member function]
---
>     ## tcp-l4-protocol.h (module 'internet'): void ns3::TcpL4Protocol::SetDownTarget6(ns3::Callback<void, ns3::Ptr<ns3::Packet>, ns3::Ipv6Address, ns3::Ipv6Address, unsigned char, ns3::Ptr<ns3::Ipv6Route>, ns3::empty, ns3::empty, ns3::empty, ns3::empty> cb) [member function]
18912c17170
<     ## tcp-l4-protocol.h (module 'internet'): ns3::IpL4Protocol::DownTargetCallback ns3::TcpL4Protocol::GetDownTarget() const [member function]
---
>     ## tcp-l4-protocol.h (module 'internet'): ns3::Callback<void, ns3::Ptr<ns3::Packet>, ns3::Ipv4Address, ns3::Ipv4Address, unsigned char, ns3::Ptr<ns3::Ipv4Route>, ns3::empty, ns3::empty, ns3::empty, ns3::empty> ns3::TcpL4Protocol::GetDownTarget() const [member function]
18914c17172
<                    'ns3::IpL4Protocol::DownTargetCallback', 
---
>                    'ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Ipv4Address, ns3::Ipv4Address, unsigned char, ns3::Ptr< ns3::Ipv4Route >, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 
18917c17175
<     ## tcp-l4-protocol.h (module 'internet'): ns3::IpL4Protocol::DownTargetCallback6 ns3::TcpL4Protocol::GetDownTarget6() const [member function]
---
>     ## tcp-l4-protocol.h (module 'internet'): ns3::Callback<void, ns3::Ptr<ns3::Packet>, ns3::Ipv6Address, ns3::Ipv6Address, unsigned char, ns3::Ptr<ns3::Ipv6Route>, ns3::empty, ns3::empty, ns3::empty, ns3::empty> ns3::TcpL4Protocol::GetDownTarget6() const [member function]
18919c17177
<                    'ns3::IpL4Protocol::DownTargetCallback6', 
---
>                    'ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Ipv6Address, ns3::Ipv6Address, unsigned char, ns3::Ptr< ns3::Ipv6Route >, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 
18926c17184
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
18931c17189
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
18944,19095d17201
< def register_Ns3TcpLedbat_methods(root_module, cls):
<     ## tcp-ledbat.h (module 'internet'): ns3::TcpLedbat::TcpLedbat() [constructor]
<     cls.add_constructor([])
<     ## tcp-ledbat.h (module 'internet'): ns3::TcpLedbat::TcpLedbat(ns3::TcpLedbat const & sock) [constructor]
<     cls.add_constructor([param('ns3::TcpLedbat const &', 'sock')])
<     ## tcp-ledbat.h (module 'internet'): ns3::Ptr<ns3::TcpCongestionOps> ns3::TcpLedbat::Fork() [member function]
<     cls.add_method('Fork', 
<                    'ns3::Ptr< ns3::TcpCongestionOps >', 
<                    [], 
<                    is_virtual=True)
<     ## tcp-ledbat.h (module 'internet'): std::string ns3::TcpLedbat::GetName() const [member function]
<     cls.add_method('GetName', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## tcp-ledbat.h (module 'internet'): static ns3::TypeId ns3::TcpLedbat::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## tcp-ledbat.h (module 'internet'): void ns3::TcpLedbat::IncreaseWindow(ns3::Ptr<ns3::TcpSocketState> tcb, uint32_t segmentsAcked) [member function]
<     cls.add_method('IncreaseWindow', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb'), param('uint32_t', 'segmentsAcked')], 
<                    is_virtual=True)
<     ## tcp-ledbat.h (module 'internet'): void ns3::TcpLedbat::PktsAcked(ns3::Ptr<ns3::TcpSocketState> tcb, uint32_t segmentsAcked, ns3::Time const & rtt) [member function]
<     cls.add_method('PktsAcked', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb'), param('uint32_t', 'segmentsAcked'), param('ns3::Time const &', 'rtt')], 
<                    is_virtual=True)
<     ## tcp-ledbat.h (module 'internet'): void ns3::TcpLedbat::SetDoSs(ns3::TcpLedbat::SlowStartType doSS) [member function]
<     cls.add_method('SetDoSs', 
<                    'void', 
<                    [param('ns3::TcpLedbat::SlowStartType', 'doSS')])
<     ## tcp-ledbat.h (module 'internet'): void ns3::TcpLedbat::CongestionAvoidance(ns3::Ptr<ns3::TcpSocketState> tcb, uint32_t segmentsAcked) [member function]
<     cls.add_method('CongestionAvoidance', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb'), param('uint32_t', 'segmentsAcked')], 
<                    is_virtual=True, visibility='protected')
<     return
< 
< def register_Ns3TcpLp_methods(root_module, cls):
<     ## tcp-lp.h (module 'internet'): ns3::TcpLp::TcpLp() [constructor]
<     cls.add_constructor([])
<     ## tcp-lp.h (module 'internet'): ns3::TcpLp::TcpLp(ns3::TcpLp const & sock) [constructor]
<     cls.add_constructor([param('ns3::TcpLp const &', 'sock')])
<     ## tcp-lp.h (module 'internet'): ns3::Ptr<ns3::TcpCongestionOps> ns3::TcpLp::Fork() [member function]
<     cls.add_method('Fork', 
<                    'ns3::Ptr< ns3::TcpCongestionOps >', 
<                    [], 
<                    is_virtual=True)
<     ## tcp-lp.h (module 'internet'): std::string ns3::TcpLp::GetName() const [member function]
<     cls.add_method('GetName', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## tcp-lp.h (module 'internet'): static ns3::TypeId ns3::TcpLp::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## tcp-lp.h (module 'internet'): void ns3::TcpLp::PktsAcked(ns3::Ptr<ns3::TcpSocketState> tcb, uint32_t segmentsAcked, ns3::Time const & rtt) [member function]
<     cls.add_method('PktsAcked', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb'), param('uint32_t', 'segmentsAcked'), param('ns3::Time const &', 'rtt')], 
<                    is_virtual=True)
<     ## tcp-lp.h (module 'internet'): void ns3::TcpLp::CongestionAvoidance(ns3::Ptr<ns3::TcpSocketState> tcb, uint32_t segmentsAcked) [member function]
<     cls.add_method('CongestionAvoidance', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb'), param('uint32_t', 'segmentsAcked')], 
<                    is_virtual=True, visibility='protected')
<     return
< 
< def register_Ns3TcpPrrRecovery_methods(root_module, cls):
<     ## tcp-prr-recovery.h (module 'internet'): ns3::TcpPrrRecovery::TcpPrrRecovery() [constructor]
<     cls.add_constructor([])
<     ## tcp-prr-recovery.h (module 'internet'): ns3::TcpPrrRecovery::TcpPrrRecovery(ns3::TcpPrrRecovery const & sock) [constructor]
<     cls.add_constructor([param('ns3::TcpPrrRecovery const &', 'sock')])
<     ## tcp-prr-recovery.h (module 'internet'): void ns3::TcpPrrRecovery::DoRecovery(ns3::Ptr<ns3::TcpSocketState> tcb, uint32_t deliveredBytes) [member function]
<     cls.add_method('DoRecovery', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb'), param('uint32_t', 'deliveredBytes')], 
<                    is_virtual=True)
<     ## tcp-prr-recovery.h (module 'internet'): void ns3::TcpPrrRecovery::EnterRecovery(ns3::Ptr<ns3::TcpSocketState> tcb, uint32_t dupAckCount, uint32_t unAckDataCount, uint32_t deliveredBytes) [member function]
<     cls.add_method('EnterRecovery', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb'), param('uint32_t', 'dupAckCount'), param('uint32_t', 'unAckDataCount'), param('uint32_t', 'deliveredBytes')], 
<                    is_virtual=True)
<     ## tcp-prr-recovery.h (module 'internet'): void ns3::TcpPrrRecovery::ExitRecovery(ns3::Ptr<ns3::TcpSocketState> tcb) [member function]
<     cls.add_method('ExitRecovery', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb')], 
<                    is_virtual=True)
<     ## tcp-prr-recovery.h (module 'internet'): ns3::Ptr<ns3::TcpRecoveryOps> ns3::TcpPrrRecovery::Fork() [member function]
<     cls.add_method('Fork', 
<                    'ns3::Ptr< ns3::TcpRecoveryOps >', 
<                    [], 
<                    is_virtual=True)
<     ## tcp-prr-recovery.h (module 'internet'): std::string ns3::TcpPrrRecovery::GetName() const [member function]
<     cls.add_method('GetName', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## tcp-prr-recovery.h (module 'internet'): static ns3::TypeId ns3::TcpPrrRecovery::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## tcp-prr-recovery.h (module 'internet'): void ns3::TcpPrrRecovery::UpdateBytesSent(uint32_t bytesSent) [member function]
<     cls.add_method('UpdateBytesSent', 
<                    'void', 
<                    [param('uint32_t', 'bytesSent')], 
<                    is_virtual=True)
<     return
< 
< def register_Ns3TcpRateLinux_methods(root_module, cls):
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateLinux::TcpRateLinux() [constructor]
<     cls.add_constructor([])
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateLinux::TcpRateLinux(ns3::TcpRateLinux const & arg0) [constructor]
<     cls.add_constructor([param('ns3::TcpRateLinux const &', 'arg0')])
<     ## tcp-rate-ops.h (module 'internet'): void ns3::TcpRateLinux::CalculateAppLimited(uint32_t cWnd, uint32_t in_flight, uint32_t segmentSize, ns3::SequenceNumber32 const & tailSeq, ns3::SequenceNumber32 const & nextTx, uint32_t const lostOut, uint32_t const retransOut) [member function]
<     cls.add_method('CalculateAppLimited', 
<                    'void', 
<                    [param('uint32_t', 'cWnd'), param('uint32_t', 'in_flight'), param('uint32_t', 'segmentSize'), param('ns3::SequenceNumber32 const &', 'tailSeq'), param('ns3::SequenceNumber32 const &', 'nextTx'), param('uint32_t const', 'lostOut'), param('uint32_t const', 'retransOut')], 
<                    is_virtual=True)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateSample const & ns3::TcpRateLinux::GenerateSample(uint32_t delivered, uint32_t lost, bool is_sack_reneg, uint32_t priorInFlight, ns3::Time const & minRtt) [member function]
<     cls.add_method('GenerateSample', 
<                    'ns3::TcpRateOps::TcpRateSample const &', 
<                    [param('uint32_t', 'delivered'), param('uint32_t', 'lost'), param('bool', 'is_sack_reneg'), param('uint32_t', 'priorInFlight'), param('ns3::Time const &', 'minRtt')], 
<                    is_virtual=True)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateConnection const & ns3::TcpRateLinux::GetConnectionRate() [member function]
<     cls.add_method('GetConnectionRate', 
<                    'ns3::TcpRateOps::TcpRateConnection const &', 
<                    [], 
<                    is_virtual=True)
<     ## tcp-rate-ops.h (module 'internet'): static ns3::TypeId ns3::TcpRateLinux::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## tcp-rate-ops.h (module 'internet'): void ns3::TcpRateLinux::SkbDelivered(ns3::TcpTxItem * skb) [member function]
<     cls.add_method('SkbDelivered', 
<                    'void', 
<                    [param('ns3::TcpTxItem *', 'skb')], 
<                    is_virtual=True)
<     ## tcp-rate-ops.h (module 'internet'): void ns3::TcpRateLinux::SkbSent(ns3::TcpTxItem * skb, bool isStartOfTransmission) [member function]
<     cls.add_method('SkbSent', 
<                    'void', 
<                    [param('ns3::TcpTxItem *', 'skb'), param('bool', 'isStartOfTransmission')], 
<                    is_virtual=True)
<     return
< 
19098a17205,17206
>     ## nstime.h (module 'core'): ns3::TimeValue::TimeValue(ns3::TimeValue const & arg0) [copy constructor]
>     cls.add_constructor([param('ns3::TimeValue const &', 'arg0')])
19101,19102d17208
<     ## nstime.h (module 'core'): ns3::TimeValue::TimeValue(ns3::TimeValue const & arg0) [constructor]
<     cls.add_constructor([param('ns3::TimeValue const &', 'arg0')])
19108c17214
<     ## nstime.h (module 'core'): bool ns3::TimeValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
---
>     ## nstime.h (module 'core'): bool ns3::TimeValue::DeserializeFromString(std::string value, ns3::Ptr<ns3::AttributeChecker const> checker) [member function]
19118c17224
<     ## nstime.h (module 'core'): std::string ns3::TimeValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
---
>     ## nstime.h (module 'core'): std::string ns3::TimeValue::SerializeToString(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
19132c17238
<     ## type-id.h (module 'core'): ns3::TypeIdChecker::TypeIdChecker(ns3::TypeIdChecker const & arg0) [constructor]
---
>     ## type-id.h (module 'core'): ns3::TypeIdChecker::TypeIdChecker(ns3::TypeIdChecker const & arg0) [copy constructor]
19138a17245,17246
>     ## type-id.h (module 'core'): ns3::TypeIdValue::TypeIdValue(ns3::TypeIdValue const & arg0) [copy constructor]
>     cls.add_constructor([param('ns3::TypeIdValue const &', 'arg0')])
19141,19142d17248
<     ## type-id.h (module 'core'): ns3::TypeIdValue::TypeIdValue(ns3::TypeIdValue const & arg0) [constructor]
<     cls.add_constructor([param('ns3::TypeIdValue const &', 'arg0')])
19148c17254
<     ## type-id.h (module 'core'): bool ns3::TypeIdValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
---
>     ## type-id.h (module 'core'): bool ns3::TypeIdValue::DeserializeFromString(std::string value, ns3::Ptr<ns3::AttributeChecker const> checker) [member function]
19158c17264
<     ## type-id.h (module 'core'): std::string ns3::TypeIdValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
---
>     ## type-id.h (module 'core'): std::string ns3::TypeIdValue::SerializeToString(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
19169a17276,17277
>     ## udp-l4-protocol.h (module 'internet'): ns3::UdpL4Protocol::PROT_NUMBER [variable]
>     cls.add_static_attribute('PROT_NUMBER', 'uint8_t const', is_const=True)
19175,19176d17282
<     ## udp-l4-protocol.h (module 'internet'): ns3::UdpL4Protocol::PROT_NUMBER [variable]
<     cls.add_static_attribute('PROT_NUMBER', 'uint8_t const', is_const=True)
19200c17306
<     ## udp-l4-protocol.h (module 'internet'): ns3::Ipv4EndPoint * ns3::UdpL4Protocol::Allocate(ns3::Ptr<ns3::NetDevice> boundNetDevice, uint16_t port) [member function]
---
>     ## udp-l4-protocol.h (module 'internet'): ns3::Ipv4EndPoint * ns3::UdpL4Protocol::Allocate(uint16_t port) [member function]
19203,19204c17309,17310
<                    [param('ns3::Ptr< ns3::NetDevice >', 'boundNetDevice'), param('uint16_t', 'port')])
<     ## udp-l4-protocol.h (module 'internet'): ns3::Ipv4EndPoint * ns3::UdpL4Protocol::Allocate(ns3::Ptr<ns3::NetDevice> boundNetDevice, ns3::Ipv4Address address, uint16_t port) [member function]
---
>                    [param('uint16_t', 'port')])
>     ## udp-l4-protocol.h (module 'internet'): ns3::Ipv4EndPoint * ns3::UdpL4Protocol::Allocate(ns3::Ipv4Address address, uint16_t port) [member function]
19207,19208c17313,17314
<                    [param('ns3::Ptr< ns3::NetDevice >', 'boundNetDevice'), param('ns3::Ipv4Address', 'address'), param('uint16_t', 'port')])
<     ## udp-l4-protocol.h (module 'internet'): ns3::Ipv4EndPoint * ns3::UdpL4Protocol::Allocate(ns3::Ptr<ns3::NetDevice> boundNetDevice, ns3::Ipv4Address localAddress, uint16_t localPort, ns3::Ipv4Address peerAddress, uint16_t peerPort) [member function]
---
>                    [param('ns3::Ipv4Address', 'address'), param('uint16_t', 'port')])
>     ## udp-l4-protocol.h (module 'internet'): ns3::Ipv4EndPoint * ns3::UdpL4Protocol::Allocate(ns3::Ipv4Address localAddress, uint16_t localPort, ns3::Ipv4Address peerAddress, uint16_t peerPort) [member function]
19211c17317
<                    [param('ns3::Ptr< ns3::NetDevice >', 'boundNetDevice'), param('ns3::Ipv4Address', 'localAddress'), param('uint16_t', 'localPort'), param('ns3::Ipv4Address', 'peerAddress'), param('uint16_t', 'peerPort')])
---
>                    [param('ns3::Ipv4Address', 'localAddress'), param('uint16_t', 'localPort'), param('ns3::Ipv4Address', 'peerAddress'), param('uint16_t', 'peerPort')])
19220c17326
<     ## udp-l4-protocol.h (module 'internet'): ns3::Ipv6EndPoint * ns3::UdpL4Protocol::Allocate6(ns3::Ptr<ns3::NetDevice> boundNetDevice, uint16_t port) [member function]
---
>     ## udp-l4-protocol.h (module 'internet'): ns3::Ipv6EndPoint * ns3::UdpL4Protocol::Allocate6(uint16_t port) [member function]
19223,19224c17329,17330
<                    [param('ns3::Ptr< ns3::NetDevice >', 'boundNetDevice'), param('uint16_t', 'port')])
<     ## udp-l4-protocol.h (module 'internet'): ns3::Ipv6EndPoint * ns3::UdpL4Protocol::Allocate6(ns3::Ptr<ns3::NetDevice> boundNetDevice, ns3::Ipv6Address address, uint16_t port) [member function]
---
>                    [param('uint16_t', 'port')])
>     ## udp-l4-protocol.h (module 'internet'): ns3::Ipv6EndPoint * ns3::UdpL4Protocol::Allocate6(ns3::Ipv6Address address, uint16_t port) [member function]
19227,19228c17333,17334
<                    [param('ns3::Ptr< ns3::NetDevice >', 'boundNetDevice'), param('ns3::Ipv6Address', 'address'), param('uint16_t', 'port')])
<     ## udp-l4-protocol.h (module 'internet'): ns3::Ipv6EndPoint * ns3::UdpL4Protocol::Allocate6(ns3::Ptr<ns3::NetDevice> boundNetDevice, ns3::Ipv6Address localAddress, uint16_t localPort, ns3::Ipv6Address peerAddress, uint16_t peerPort) [member function]
---
>                    [param('ns3::Ipv6Address', 'address'), param('uint16_t', 'port')])
>     ## udp-l4-protocol.h (module 'internet'): ns3::Ipv6EndPoint * ns3::UdpL4Protocol::Allocate6(ns3::Ipv6Address localAddress, uint16_t localPort, ns3::Ipv6Address peerAddress, uint16_t peerPort) [member function]
19231c17337
<                    [param('ns3::Ptr< ns3::NetDevice >', 'boundNetDevice'), param('ns3::Ipv6Address', 'localAddress'), param('uint16_t', 'localPort'), param('ns3::Ipv6Address', 'peerAddress'), param('uint16_t', 'peerPort')])
---
>                    [param('ns3::Ipv6Address', 'localAddress'), param('uint16_t', 'localPort'), param('ns3::Ipv6Address', 'peerAddress'), param('uint16_t', 'peerPort')])
19276c17382
<     ## udp-l4-protocol.h (module 'internet'): void ns3::UdpL4Protocol::SetDownTarget(ns3::IpL4Protocol::DownTargetCallback cb) [member function]
---
>     ## udp-l4-protocol.h (module 'internet'): void ns3::UdpL4Protocol::SetDownTarget(ns3::Callback<void, ns3::Ptr<ns3::Packet>, ns3::Ipv4Address, ns3::Ipv4Address, unsigned char, ns3::Ptr<ns3::Ipv4Route>, ns3::empty, ns3::empty, ns3::empty, ns3::empty> cb) [member function]
19281c17387
<     ## udp-l4-protocol.h (module 'internet'): void ns3::UdpL4Protocol::SetDownTarget6(ns3::IpL4Protocol::DownTargetCallback6 cb) [member function]
---
>     ## udp-l4-protocol.h (module 'internet'): void ns3::UdpL4Protocol::SetDownTarget6(ns3::Callback<void, ns3::Ptr<ns3::Packet>, ns3::Ipv6Address, ns3::Ipv6Address, unsigned char, ns3::Ptr<ns3::Ipv6Route>, ns3::empty, ns3::empty, ns3::empty, ns3::empty> cb) [member function]
19286c17392
<     ## udp-l4-protocol.h (module 'internet'): ns3::IpL4Protocol::DownTargetCallback ns3::UdpL4Protocol::GetDownTarget() const [member function]
---
>     ## udp-l4-protocol.h (module 'internet'): ns3::Callback<void, ns3::Ptr<ns3::Packet>, ns3::Ipv4Address, ns3::Ipv4Address, unsigned char, ns3::Ptr<ns3::Ipv4Route>, ns3::empty, ns3::empty, ns3::empty, ns3::empty> ns3::UdpL4Protocol::GetDownTarget() const [member function]
19288c17394
<                    'ns3::IpL4Protocol::DownTargetCallback', 
---
>                    'ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Ipv4Address, ns3::Ipv4Address, unsigned char, ns3::Ptr< ns3::Ipv4Route >, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 
19291c17397
<     ## udp-l4-protocol.h (module 'internet'): ns3::IpL4Protocol::DownTargetCallback6 ns3::UdpL4Protocol::GetDownTarget6() const [member function]
---
>     ## udp-l4-protocol.h (module 'internet'): ns3::Callback<void, ns3::Ptr<ns3::Packet>, ns3::Ipv6Address, ns3::Ipv6Address, unsigned char, ns3::Ptr<ns3::Ipv6Route>, ns3::empty, ns3::empty, ns3::empty, ns3::empty> ns3::UdpL4Protocol::GetDownTarget6() const [member function]
19293c17399
<                    'ns3::IpL4Protocol::DownTargetCallback6', 
---
>                    'ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Ipv6Address, ns3::Ipv6Address, unsigned char, ns3::Ptr< ns3::Ipv6Route >, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 
19300c17406
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
19305c17411
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
19310a17417,17418
>     ## uinteger.h (module 'core'): ns3::UintegerValue::UintegerValue(ns3::UintegerValue const & arg0) [copy constructor]
>     cls.add_constructor([param('ns3::UintegerValue const &', 'arg0')])
19313,19314d17420
<     ## uinteger.h (module 'core'): ns3::UintegerValue::UintegerValue(ns3::UintegerValue const & arg0) [constructor]
<     cls.add_constructor([param('ns3::UintegerValue const &', 'arg0')])
19320c17426
<     ## uinteger.h (module 'core'): bool ns3::UintegerValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
---
>     ## uinteger.h (module 'core'): bool ns3::UintegerValue::DeserializeFromString(std::string value, ns3::Ptr<ns3::AttributeChecker const> checker) [member function]
19330c17436
<     ## uinteger.h (module 'core'): std::string ns3::UintegerValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
---
>     ## uinteger.h (module 'core'): std::string ns3::UintegerValue::SerializeToString(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
19344c17450
<     ## address.h (module 'network'): ns3::AddressChecker::AddressChecker(ns3::AddressChecker const & arg0) [constructor]
---
>     ## address.h (module 'network'): ns3::AddressChecker::AddressChecker(ns3::AddressChecker const & arg0) [copy constructor]
19350a17457,17458
>     ## address.h (module 'network'): ns3::AddressValue::AddressValue(ns3::AddressValue const & arg0) [copy constructor]
>     cls.add_constructor([param('ns3::AddressValue const &', 'arg0')])
19353,19354d17460
<     ## address.h (module 'network'): ns3::AddressValue::AddressValue(ns3::AddressValue const & arg0) [constructor]
<     cls.add_constructor([param('ns3::AddressValue const &', 'arg0')])
19360c17466
<     ## address.h (module 'network'): bool ns3::AddressValue::DeserializeFromString(std::string value, ns3::Ptr<const ns3::AttributeChecker> checker) [member function]
---
>     ## address.h (module 'network'): bool ns3::AddressValue::DeserializeFromString(std::string value, ns3::Ptr<ns3::AttributeChecker const> checker) [member function]
19370c17476
<     ## address.h (module 'network'): std::string ns3::AddressValue::SerializeToString(ns3::Ptr<const ns3::AttributeChecker> checker) const [member function]
---
>     ## address.h (module 'network'): std::string ns3::AddressValue::SerializeToString(ns3::Ptr<ns3::AttributeChecker const> checker) const [member function]
19393c17499
<     ## bridge-channel.h (module 'bridge'): std::size_t ns3::BridgeChannel::GetNDevices() const [member function]
---
>     ## bridge-channel.h (module 'bridge'): uint32_t ns3::BridgeChannel::GetNDevices() const [member function]
19395c17501
<                    'std::size_t', 
---
>                    'uint32_t', 
19398c17504
<     ## bridge-channel.h (module 'bridge'): ns3::Ptr<ns3::NetDevice> ns3::BridgeChannel::GetDevice(std::size_t i) const [member function]
---
>     ## bridge-channel.h (module 'bridge'): ns3::Ptr<ns3::NetDevice> ns3::BridgeChannel::GetDevice(uint32_t i) const [member function]
19401c17507
<                    [param('std::size_t', 'i')], 
---
>                    [param('uint32_t', 'i')], 
19532c17638
<     ## bridge-net-device.h (module 'bridge'): void ns3::BridgeNetDevice::SetPromiscReceiveCallback(ns3::NetDevice::PromiscReceiveCallback cb) [member function]
---
>     ## bridge-net-device.h (module 'bridge'): void ns3::BridgeNetDevice::SetPromiscReceiveCallback(ns3::Callback<bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<ns3::Packet const>, unsigned short, ns3::Address const&, ns3::Address const&, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty> cb) [member function]
19537c17643
<     ## bridge-net-device.h (module 'bridge'): void ns3::BridgeNetDevice::SetReceiveCallback(ns3::NetDevice::ReceiveCallback cb) [member function]
---
>     ## bridge-net-device.h (module 'bridge'): void ns3::BridgeNetDevice::SetReceiveCallback(ns3::Callback<bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<ns3::Packet const>, unsigned short, ns3::Address const&, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> cb) [member function]
19551,19552c17657,17658
<                    is_virtual=True, visibility='protected')
<     ## bridge-net-device.h (module 'bridge'): void ns3::BridgeNetDevice::ForwardBroadcast(ns3::Ptr<ns3::NetDevice> incomingPort, ns3::Ptr<const ns3::Packet> packet, uint16_t protocol, ns3::Mac48Address src, ns3::Mac48Address dst) [member function]
---
>                    visibility='protected', is_virtual=True)
>     ## bridge-net-device.h (module 'bridge'): void ns3::BridgeNetDevice::ForwardBroadcast(ns3::Ptr<ns3::NetDevice> incomingPort, ns3::Ptr<ns3::Packet const> packet, uint16_t protocol, ns3::Mac48Address src, ns3::Mac48Address dst) [member function]
19557c17663
<     ## bridge-net-device.h (module 'bridge'): void ns3::BridgeNetDevice::ForwardUnicast(ns3::Ptr<ns3::NetDevice> incomingPort, ns3::Ptr<const ns3::Packet> packet, uint16_t protocol, ns3::Mac48Address src, ns3::Mac48Address dst) [member function]
---
>     ## bridge-net-device.h (module 'bridge'): void ns3::BridgeNetDevice::ForwardUnicast(ns3::Ptr<ns3::NetDevice> incomingPort, ns3::Ptr<ns3::Packet const> packet, uint16_t protocol, ns3::Mac48Address src, ns3::Mac48Address dst) [member function]
19572c17678
<     ## bridge-net-device.h (module 'bridge'): void ns3::BridgeNetDevice::ReceiveFromDevice(ns3::Ptr<ns3::NetDevice> device, ns3::Ptr<const ns3::Packet> packet, uint16_t protocol, ns3::Address const & source, ns3::Address const & destination, ns3::NetDevice::PacketType packetType) [member function]
---
>     ## bridge-net-device.h (module 'bridge'): void ns3::BridgeNetDevice::ReceiveFromDevice(ns3::Ptr<ns3::NetDevice> device, ns3::Ptr<ns3::Packet const> packet, uint16_t protocol, ns3::Address const & source, ns3::Address const & destination, ns3::NetDevice::PacketType packetType) [member function]
19579,20262c17685,17688
< def register_Ns3CallbackImpl__Bool_Ns3Ptr__lt__ns3NetDevice__gt___Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Const_ns3Address___amp___Const_ns3Address___amp___Ns3NetDevicePacketType_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
<     cls.add_constructor([])
<     ## callback.h (module 'core'): ns3::CallbackImpl<bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True)
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): bool ns3::CallbackImpl<bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<ns3::NetDevice> arg0, ns3::Ptr<const ns3::Packet> arg1, short unsigned int arg2, ns3::Address const & arg3, ns3::Address const & arg4, ns3::NetDevice::PacketType arg5) [member operator]
<     cls.add_method('operator()', 
<                    'bool', 
<                    [param('ns3::Ptr< ns3::NetDevice >', 'arg0'), param('ns3::Ptr< ns3::Packet const >', 'arg1'), param('short unsigned int', 'arg2'), param('ns3::Address const &', 'arg3'), param('ns3::Address const &', 'arg4'), param('ns3::NetDevice::PacketType', 'arg5')], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3CallbackImpl__Bool_Ns3Ptr__lt__ns3NetDevice__gt___Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Const_ns3Address___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
<     cls.add_constructor([])
<     ## callback.h (module 'core'): ns3::CallbackImpl<bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True)
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): bool ns3::CallbackImpl<bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<ns3::NetDevice> arg0, ns3::Ptr<const ns3::Packet> arg1, short unsigned int arg2, ns3::Address const & arg3) [member operator]
<     cls.add_method('operator()', 
<                    'bool', 
<                    [param('ns3::Ptr< ns3::NetDevice >', 'arg0'), param('ns3::Ptr< ns3::Packet const >', 'arg1'), param('short unsigned int', 'arg2'), param('ns3::Address const &', 'arg3')], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3CallbackImpl__Bool_Ns3Ptr__lt__ns3Socket__gt___Const_ns3Address___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<bool, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
<     cls.add_constructor([])
<     ## callback.h (module 'core'): ns3::CallbackImpl<bool, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<bool, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< bool, ns3::Ptr< ns3::Socket >, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<bool, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True)
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<bool, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): bool ns3::CallbackImpl<bool, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<ns3::Socket> arg0, ns3::Address const & arg1) [member operator]
<     cls.add_method('operator()', 
<                    'bool', 
<                    [param('ns3::Ptr< ns3::Socket >', 'arg0'), param('ns3::Address const &', 'arg1')], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3CallbackImpl__Ns3ObjectBase___star___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
<     cls.add_constructor([])
<     ## callback.h (module 'core'): ns3::CallbackImpl<ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True)
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): ns3::ObjectBase * ns3::CallbackImpl<ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()() [member operator]
<     cls.add_method('operator()', 
<                    'ns3::ObjectBase *', 
<                    [], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3CallbackImpl__Void_Const_ns3Ipv4Header___amp___Ns3Ptr__lt__const_ns3Packet__gt___Ns3Ipv4L3ProtocolDropReason_Ns3Ptr__lt__ns3Ipv4__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::Ipv4Header &, ns3::Ptr<const ns3::Packet>, ns3::Ipv4L3Protocol::DropReason, ns3::Ptr<ns3::Ipv4>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
<     cls.add_constructor([])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::Ipv4Header &, ns3::Ptr<const ns3::Packet>, ns3::Ipv4L3Protocol::DropReason, ns3::Ptr<ns3::Ipv4>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, const ns3::Ipv4Header &, ns3::Ptr<const ns3::Packet>, ns3::Ipv4L3Protocol::DropReason, ns3::Ptr<ns3::Ipv4>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ipv4Header const &, ns3::Ptr< ns3::Packet const >, ns3::Ipv4L3Protocol::DropReason, ns3::Ptr< ns3::Ipv4 >, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, const ns3::Ipv4Header &, ns3::Ptr<const ns3::Packet>, ns3::Ipv4L3Protocol::DropReason, ns3::Ptr<ns3::Ipv4>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True)
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, const ns3::Ipv4Header &, ns3::Ptr<const ns3::Packet>, ns3::Ipv4L3Protocol::DropReason, ns3::Ptr<ns3::Ipv4>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): void ns3::CallbackImpl<void, const ns3::Ipv4Header &, ns3::Ptr<const ns3::Packet>, ns3::Ipv4L3Protocol::DropReason, ns3::Ptr<ns3::Ipv4>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ipv4Header const & arg0, ns3::Ptr<const ns3::Packet> arg1, ns3::Ipv4L3Protocol::DropReason arg2, ns3::Ptr<ns3::Ipv4> arg3, unsigned int arg4) [member operator]
<     cls.add_method('operator()', 
<                    'void', 
<                    [param('ns3::Ipv4Header const &', 'arg0'), param('ns3::Ptr< ns3::Packet const >', 'arg1'), param('ns3::Ipv4L3Protocol::DropReason', 'arg2'), param('ns3::Ptr< ns3::Ipv4 >', 'arg3'), param('unsigned int', 'arg4')], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3CallbackImpl__Void_Const_ns3Ipv4Header___amp___Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::Ipv4Header &, ns3::Ptr<const ns3::Packet>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
<     cls.add_constructor([])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::Ipv4Header &, ns3::Ptr<const ns3::Packet>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, const ns3::Ipv4Header &, ns3::Ptr<const ns3::Packet>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ipv4Header const &, ns3::Ptr< ns3::Packet const >, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, const ns3::Ipv4Header &, ns3::Ptr<const ns3::Packet>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True)
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, const ns3::Ipv4Header &, ns3::Ptr<const ns3::Packet>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): void ns3::CallbackImpl<void, const ns3::Ipv4Header &, ns3::Ptr<const ns3::Packet>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ipv4Header const & arg0, ns3::Ptr<const ns3::Packet> arg1, unsigned int arg2) [member operator]
<     cls.add_method('operator()', 
<                    'void', 
<                    [param('ns3::Ipv4Header const &', 'arg0'), param('ns3::Ptr< ns3::Packet const >', 'arg1'), param('unsigned int', 'arg2')], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3CallbackImpl__Void_Const_ns3Ipv6Header___amp___Ns3Ptr__lt__const_ns3Packet__gt___Ns3Ipv6L3ProtocolDropReason_Ns3Ptr__lt__ns3Ipv6__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::Ipv6Header &, ns3::Ptr<const ns3::Packet>, ns3::Ipv6L3Protocol::DropReason, ns3::Ptr<ns3::Ipv6>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
<     cls.add_constructor([])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::Ipv6Header &, ns3::Ptr<const ns3::Packet>, ns3::Ipv6L3Protocol::DropReason, ns3::Ptr<ns3::Ipv6>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, const ns3::Ipv6Header &, ns3::Ptr<const ns3::Packet>, ns3::Ipv6L3Protocol::DropReason, ns3::Ptr<ns3::Ipv6>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ipv6Header const &, ns3::Ptr< ns3::Packet const >, ns3::Ipv6L3Protocol::DropReason, ns3::Ptr< ns3::Ipv6 >, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, const ns3::Ipv6Header &, ns3::Ptr<const ns3::Packet>, ns3::Ipv6L3Protocol::DropReason, ns3::Ptr<ns3::Ipv6>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True)
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, const ns3::Ipv6Header &, ns3::Ptr<const ns3::Packet>, ns3::Ipv6L3Protocol::DropReason, ns3::Ptr<ns3::Ipv6>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): void ns3::CallbackImpl<void, const ns3::Ipv6Header &, ns3::Ptr<const ns3::Packet>, ns3::Ipv6L3Protocol::DropReason, ns3::Ptr<ns3::Ipv6>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ipv6Header const & arg0, ns3::Ptr<const ns3::Packet> arg1, ns3::Ipv6L3Protocol::DropReason arg2, ns3::Ptr<ns3::Ipv6> arg3, unsigned int arg4) [member operator]
<     cls.add_method('operator()', 
<                    'void', 
<                    [param('ns3::Ipv6Header const &', 'arg0'), param('ns3::Ptr< ns3::Packet const >', 'arg1'), param('ns3::Ipv6L3Protocol::DropReason', 'arg2'), param('ns3::Ptr< ns3::Ipv6 >', 'arg3'), param('unsigned int', 'arg4')], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3CallbackImpl__Void_Const_ns3Ipv6Header___amp___Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::Ipv6Header &, ns3::Ptr<const ns3::Packet>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
<     cls.add_constructor([])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::Ipv6Header &, ns3::Ptr<const ns3::Packet>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, const ns3::Ipv6Header &, ns3::Ptr<const ns3::Packet>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ipv6Header const &, ns3::Ptr< ns3::Packet const >, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, const ns3::Ipv6Header &, ns3::Ptr<const ns3::Packet>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True)
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, const ns3::Ipv6Header &, ns3::Ptr<const ns3::Packet>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): void ns3::CallbackImpl<void, const ns3::Ipv6Header &, ns3::Ptr<const ns3::Packet>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ipv6Header const & arg0, ns3::Ptr<const ns3::Packet> arg1, unsigned int arg2) [member operator]
<     cls.add_method('operator()', 
<                    'void', 
<                    [param('ns3::Ipv6Header const &', 'arg0'), param('ns3::Ptr< ns3::Packet const >', 'arg1'), param('unsigned int', 'arg2')], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3CallbackImpl__Void_Const_ns3TcpRateOpsTcpRateConnection___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::TcpRateOps::TcpRateConnection &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
<     cls.add_constructor([])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::TcpRateOps::TcpRateConnection &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, const ns3::TcpRateOps::TcpRateConnection &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< void, ns3::TcpRateOps::TcpRateConnection const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, const ns3::TcpRateOps::TcpRateConnection &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True)
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, const ns3::TcpRateOps::TcpRateConnection &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): void ns3::CallbackImpl<void, const ns3::TcpRateOps::TcpRateConnection &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::TcpRateOps::TcpRateConnection const & arg0) [member operator]
<     cls.add_method('operator()', 
<                    'void', 
<                    [param('ns3::TcpRateOps::TcpRateConnection const &', 'arg0')], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3CallbackImpl__Void_Const_ns3TcpRateOpsTcpRateSample___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::TcpRateOps::TcpRateSample &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
<     cls.add_constructor([])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::TcpRateOps::TcpRateSample &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, const ns3::TcpRateOps::TcpRateSample &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< void, ns3::TcpRateOps::TcpRateSample const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, const ns3::TcpRateOps::TcpRateSample &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True)
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, const ns3::TcpRateOps::TcpRateSample &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): void ns3::CallbackImpl<void, const ns3::TcpRateOps::TcpRateSample &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::TcpRateOps::TcpRateSample const & arg0) [member operator]
<     cls.add_method('operator()', 
<                    'void', 
<                    [param('ns3::TcpRateOps::TcpRateSample const &', 'arg0')], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3CallbackImpl__Void_Double_Double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, double, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
<     cls.add_constructor([])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, double, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, double, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< void, double, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, double, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True)
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, double, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): void ns3::CallbackImpl<void, double, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(double arg0, double arg1) [member operator]
<     cls.add_method('operator()', 
<                    'void', 
<                    [param('double', 'arg0'), param('double', 'arg1')], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3CallbackImpl__Void_Ns3Ipv4Address_Unsigned_char_Unsigned_char_Unsigned_char_Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ipv4Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
<     cls.add_constructor([])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ipv4Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ipv4Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ipv4Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ipv4Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True)
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ipv4Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ipv4Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ipv4Address arg0, unsigned char arg1, unsigned char arg2, unsigned char arg3, unsigned int arg4) [member operator]
<     cls.add_method('operator()', 
<                    'void', 
<                    [param('ns3::Ipv4Address', 'arg0'), param('unsigned char', 'arg1'), param('unsigned char', 'arg2'), param('unsigned char', 'arg3'), param('unsigned int', 'arg4')], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3CallbackImpl__Void_Ns3Ipv6Address_Unsigned_char_Unsigned_char_Unsigned_char_Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ipv6Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
<     cls.add_constructor([])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ipv6Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ipv6Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ipv6Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ipv6Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True)
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ipv6Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ipv6Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ipv6Address arg0, unsigned char arg1, unsigned char arg2, unsigned char arg3, unsigned int arg4) [member operator]
<     cls.add_method('operator()', 
<                    'void', 
<                    [param('ns3::Ipv6Address', 'arg0'), param('unsigned char', 'arg1'), param('unsigned char', 'arg2'), param('unsigned char', 'arg3'), param('unsigned int', 'arg4')], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Const_ns3TcpHeader___amp___Ns3Ptr__lt__const_ns3TcpSocketBase__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, const ns3::TcpHeader &, ns3::Ptr<const ns3::TcpSocketBase>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
<     cls.add_constructor([])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, const ns3::TcpHeader &, ns3::Ptr<const ns3::TcpSocketBase>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, const ns3::TcpHeader &, ns3::Ptr<const ns3::TcpSocketBase>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::Packet const >, ns3::TcpHeader const &, ns3::Ptr< ns3::TcpSocketBase const >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, const ns3::TcpHeader &, ns3::Ptr<const ns3::TcpSocketBase>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True)
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, const ns3::TcpHeader &, ns3::Ptr<const ns3::TcpSocketBase>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, const ns3::TcpHeader &, ns3::Ptr<const ns3::TcpSocketBase>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<const ns3::Packet> arg0, ns3::TcpHeader const & arg1, ns3::Ptr<const ns3::TcpSocketBase> arg2) [member operator]
<     cls.add_method('operator()', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Packet const >', 'arg0'), param('ns3::TcpHeader const &', 'arg1'), param('ns3::Ptr< ns3::TcpSocketBase const >', 'arg2')], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3Ptr__lt__ns3Ipv4__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::Ptr<ns3::Ipv4>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
<     cls.add_constructor([])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::Ptr<ns3::Ipv4>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::Ptr<ns3::Ipv4>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::Packet const >, ns3::Ptr< ns3::Ipv4 >, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::Ptr<ns3::Ipv4>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True)
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::Ptr<ns3::Ipv4>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::Ptr<ns3::Ipv4>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<const ns3::Packet> arg0, ns3::Ptr<ns3::Ipv4> arg1, unsigned int arg2) [member operator]
<     cls.add_method('operator()', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Packet const >', 'arg0'), param('ns3::Ptr< ns3::Ipv4 >', 'arg1'), param('unsigned int', 'arg2')], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3Ptr__lt__ns3Ipv6__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::Ptr<ns3::Ipv6>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
<     cls.add_constructor([])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::Ptr<ns3::Ipv6>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::Ptr<ns3::Ipv6>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::Packet const >, ns3::Ptr< ns3::Ipv6 >, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::Ptr<ns3::Ipv6>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True)
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::Ptr<ns3::Ipv6>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::Ptr<ns3::Ipv6>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<const ns3::Packet> arg0, ns3::Ptr<ns3::Ipv6> arg1, unsigned int arg2) [member operator]
<     cls.add_method('operator()', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Packet const >', 'arg0'), param('ns3::Ptr< ns3::Ipv6 >', 'arg1'), param('unsigned int', 'arg2')], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
<     cls.add_constructor([])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::Packet const >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True)
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<const ns3::Packet> arg0) [member operator]
<     cls.add_method('operator()', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Packet const >', 'arg0')], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3NetDevice__gt___Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Const_ns3Address___amp___Const_ns3Address___amp___Ns3NetDevicePacketType_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
<     cls.add_constructor([])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True)
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<ns3::NetDevice> arg0, ns3::Ptr<const ns3::Packet> arg1, short unsigned int arg2, ns3::Address const & arg3, ns3::Address const & arg4, ns3::NetDevice::PacketType arg5) [member operator]
<     cls.add_method('operator()', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::NetDevice >', 'arg0'), param('ns3::Ptr< ns3::Packet const >', 'arg1'), param('short unsigned int', 'arg2'), param('ns3::Address const &', 'arg3'), param('ns3::Address const &', 'arg4'), param('ns3::NetDevice::PacketType', 'arg5')], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3NetDevice__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
<     cls.add_constructor([])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::NetDevice >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True)
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<ns3::NetDevice> arg0) [member operator]
<     cls.add_method('operator()', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::NetDevice >', 'arg0')], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Ns3Ipv4Address_Ns3Ipv4Address_Unsigned_char_Ns3Ptr__lt__ns3Ipv4Route__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv4Address, ns3::Ipv4Address, unsigned char, ns3::Ptr<ns3::Ipv4Route>, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
<     cls.add_constructor([])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv4Address, ns3::Ipv4Address, unsigned char, ns3::Ptr<ns3::Ipv4Route>, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv4Address, ns3::Ipv4Address, unsigned char, ns3::Ptr<ns3::Ipv4Route>, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::Packet >, ns3::Ipv4Address, ns3::Ipv4Address, unsigned char, ns3::Ptr< ns3::Ipv4Route >, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv4Address, ns3::Ipv4Address, unsigned char, ns3::Ptr<ns3::Ipv4Route>, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True)
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv4Address, ns3::Ipv4Address, unsigned char, ns3::Ptr<ns3::Ipv4Route>, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv4Address, ns3::Ipv4Address, unsigned char, ns3::Ptr<ns3::Ipv4Route>, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<ns3::Packet> arg0, ns3::Ipv4Address arg1, ns3::Ipv4Address arg2, unsigned char arg3, ns3::Ptr<ns3::Ipv4Route> arg4) [member operator]
<     cls.add_method('operator()', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Packet >', 'arg0'), param('ns3::Ipv4Address', 'arg1'), param('ns3::Ipv4Address', 'arg2'), param('unsigned char', 'arg3'), param('ns3::Ptr< ns3::Ipv4Route >', 'arg4')], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Ns3Ipv4Header_Unsigned_short_Ns3Ptr__lt__ns3Ipv4Interface__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv4Header, unsigned short, ns3::Ptr<ns3::Ipv4Interface>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
<     cls.add_constructor([])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv4Header, unsigned short, ns3::Ptr<ns3::Ipv4Interface>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv4Header, unsigned short, ns3::Ptr<ns3::Ipv4Interface>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::Packet >, ns3::Ipv4Header, unsigned short, ns3::Ptr< ns3::Ipv4Interface >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv4Header, unsigned short, ns3::Ptr<ns3::Ipv4Interface>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True)
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv4Header, unsigned short, ns3::Ptr<ns3::Ipv4Interface>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv4Header, unsigned short, ns3::Ptr<ns3::Ipv4Interface>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<ns3::Packet> arg0, ns3::Ipv4Header arg1, short unsigned int arg2, ns3::Ptr<ns3::Ipv4Interface> arg3) [member operator]
<     cls.add_method('operator()', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Packet >', 'arg0'), param('ns3::Ipv4Header', 'arg1'), param('short unsigned int', 'arg2'), param('ns3::Ptr< ns3::Ipv4Interface >', 'arg3')], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Ns3Ipv6Address_Ns3Ipv6Address_Unsigned_char_Ns3Ptr__lt__ns3Ipv6Route__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv6Address, ns3::Ipv6Address, unsigned char, ns3::Ptr<ns3::Ipv6Route>, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
<     cls.add_constructor([])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv6Address, ns3::Ipv6Address, unsigned char, ns3::Ptr<ns3::Ipv6Route>, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv6Address, ns3::Ipv6Address, unsigned char, ns3::Ptr<ns3::Ipv6Route>, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::Packet >, ns3::Ipv6Address, ns3::Ipv6Address, unsigned char, ns3::Ptr< ns3::Ipv6Route >, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv6Address, ns3::Ipv6Address, unsigned char, ns3::Ptr<ns3::Ipv6Route>, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True)
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv6Address, ns3::Ipv6Address, unsigned char, ns3::Ptr<ns3::Ipv6Route>, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv6Address, ns3::Ipv6Address, unsigned char, ns3::Ptr<ns3::Ipv6Route>, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<ns3::Packet> arg0, ns3::Ipv6Address arg1, ns3::Ipv6Address arg2, unsigned char arg3, ns3::Ptr<ns3::Ipv6Route> arg4) [member operator]
<     cls.add_method('operator()', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Packet >', 'arg0'), param('ns3::Ipv6Address', 'arg1'), param('ns3::Ipv6Address', 'arg2'), param('unsigned char', 'arg3'), param('ns3::Ptr< ns3::Ipv6Route >', 'arg4')], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Ns3Ipv6Header_Unsigned_short_Ns3Ptr__lt__ns3Ipv6Interface__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv6Header, unsigned short, ns3::Ptr<ns3::Ipv6Interface>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
<     cls.add_constructor([])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv6Header, unsigned short, ns3::Ptr<ns3::Ipv6Interface>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv6Header, unsigned short, ns3::Ptr<ns3::Ipv6Interface>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::Packet >, ns3::Ipv6Header, unsigned short, ns3::Ptr< ns3::Ipv6Interface >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv6Header, unsigned short, ns3::Ptr<ns3::Ipv6Interface>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True)
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv6Header, unsigned short, ns3::Ptr<ns3::Ipv6Interface>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv6Header, unsigned short, ns3::Ptr<ns3::Ipv6Interface>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<ns3::Packet> arg0, ns3::Ipv6Header arg1, short unsigned int arg2, ns3::Ptr<ns3::Ipv6Interface> arg3) [member operator]
<     cls.add_method('operator()', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Packet >', 'arg0'), param('ns3::Ipv6Header', 'arg1'), param('short unsigned int', 'arg2'), param('ns3::Ptr< ns3::Ipv6Interface >', 'arg3')], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3Socket__gt___Const_ns3Address___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
<     cls.add_constructor([])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::Socket >, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True)
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<ns3::Socket> arg0, ns3::Address const & arg1) [member operator]
<     cls.add_method('operator()', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Socket >', 'arg0'), param('ns3::Address const &', 'arg1')], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3Socket__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
<     cls.add_constructor([])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::Socket >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True)
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<ns3::Socket> arg0) [member operator]
<     cls.add_method('operator()', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Socket >', 'arg0')], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3Socket__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
<     cls.add_constructor([])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::Socket >, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True)
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<ns3::Socket> arg0, unsigned int arg1) [member operator]
<     cls.add_method('operator()', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Socket >', 'arg0'), param('unsigned int', 'arg1')], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3CallbackImpl__Void_Ns3SequenceNumber__lt__unsigned_int__int__gt___Ns3SequenceNumber__lt__unsigned_int__int__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::SequenceNumber<unsigned int, int>, ns3::SequenceNumber<unsigned int, int>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
<     cls.add_constructor([])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::SequenceNumber<unsigned int, int>, ns3::SequenceNumber<unsigned int, int>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::SequenceNumber<unsigned int, int>, ns3::SequenceNumber<unsigned int, int>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< void, ns3::SequenceNumber< unsigned int, int >, ns3::SequenceNumber< unsigned int, int >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::SequenceNumber<unsigned int, int>, ns3::SequenceNumber<unsigned int, int>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True)
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::SequenceNumber<unsigned int, int>, ns3::SequenceNumber<unsigned int, int>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::SequenceNumber<unsigned int, int>, ns3::SequenceNumber<unsigned int, int>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::SequenceNumber<unsigned int, int> arg0, ns3::SequenceNumber<unsigned int, int> arg1) [member operator]
<     cls.add_method('operator()', 
<                    'void', 
<                    [param('ns3::SequenceNumber< unsigned int, int >', 'arg0'), param('ns3::SequenceNumber< unsigned int, int >', 'arg1')], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3CallbackImpl__Void_Ns3TcpSocketTcpStates_t_Ns3TcpSocketTcpStates_t_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::TcpSocket::TcpStates_t, ns3::TcpSocket::TcpStates_t, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
<     cls.add_constructor([])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::TcpSocket::TcpStates_t, ns3::TcpSocket::TcpStates_t, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::TcpSocket::TcpStates_t, ns3::TcpSocket::TcpStates_t, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< void, ns3::TcpSocket::TcpStates_t, ns3::TcpSocket::TcpStates_t, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::TcpSocket::TcpStates_t, ns3::TcpSocket::TcpStates_t, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True)
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::TcpSocket::TcpStates_t, ns3::TcpSocket::TcpStates_t, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::TcpSocket::TcpStates_t, ns3::TcpSocket::TcpStates_t, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::TcpSocket::TcpStates_t arg0, ns3::TcpSocket::TcpStates_t arg1) [member operator]
<     cls.add_method('operator()', 
<                    'void', 
<                    [param('ns3::TcpSocket::TcpStates_t', 'arg0'), param('ns3::TcpSocket::TcpStates_t', 'arg1')], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3CallbackImpl__Void_Ns3TcpSocketStateEcnState_t_Ns3TcpSocketStateEcnState_t_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::TcpSocketState::EcnState_t, ns3::TcpSocketState::EcnState_t, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
<     cls.add_constructor([])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::TcpSocketState::EcnState_t, ns3::TcpSocketState::EcnState_t, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::TcpSocketState::EcnState_t, ns3::TcpSocketState::EcnState_t, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< void, ns3::TcpSocketState::EcnState_t, ns3::TcpSocketState::EcnState_t, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::TcpSocketState::EcnState_t, ns3::TcpSocketState::EcnState_t, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True)
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::TcpSocketState::EcnState_t, ns3::TcpSocketState::EcnState_t, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::TcpSocketState::EcnState_t, ns3::TcpSocketState::EcnState_t, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::TcpSocketState::EcnState_t arg0, ns3::TcpSocketState::EcnState_t arg1) [member operator]
<     cls.add_method('operator()', 
<                    'void', 
<                    [param('ns3::TcpSocketState::EcnState_t', 'arg0'), param('ns3::TcpSocketState::EcnState_t', 'arg1')], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3CallbackImpl__Void_Ns3TcpSocketStateTcpCongState_t_Ns3TcpSocketStateTcpCongState_t_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::TcpSocketState::TcpCongState_t, ns3::TcpSocketState::TcpCongState_t, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
<     cls.add_constructor([])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::TcpSocketState::TcpCongState_t, ns3::TcpSocketState::TcpCongState_t, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::TcpSocketState::TcpCongState_t, ns3::TcpSocketState::TcpCongState_t, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< void, ns3::TcpSocketState::TcpCongState_t, ns3::TcpSocketState::TcpCongState_t, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::TcpSocketState::TcpCongState_t, ns3::TcpSocketState::TcpCongState_t, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True)
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::TcpSocketState::TcpCongState_t, ns3::TcpSocketState::TcpCongState_t, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::TcpSocketState::TcpCongState_t, ns3::TcpSocketState::TcpCongState_t, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::TcpSocketState::TcpCongState_t arg0, ns3::TcpSocketState::TcpCongState_t arg1) [member operator]
<     cls.add_method('operator()', 
<                    'void', 
<                    [param('ns3::TcpSocketState::TcpCongState_t', 'arg0'), param('ns3::TcpSocketState::TcpCongState_t', 'arg1')], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3CallbackImpl__Void_Ns3Time_Ns3Time_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Time, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
<     cls.add_constructor([])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Time, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Time, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Time, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Time, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True)
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Time, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Time, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Time arg0, ns3::Time arg1) [member operator]
<     cls.add_method('operator()', 
<                    'void', 
<                    [param('ns3::Time', 'arg0'), param('ns3::Time', 'arg1')], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3CallbackImpl__Void_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
---
> def register_Ns3FqCoDelIpv4PacketFilter_methods(root_module, cls):
>     ## ipv4-packet-filter.h (module 'internet'): ns3::FqCoDelIpv4PacketFilter::FqCoDelIpv4PacketFilter(ns3::FqCoDelIpv4PacketFilter const & arg0) [copy constructor]
>     cls.add_constructor([param('ns3::FqCoDelIpv4PacketFilter const &', 'arg0')])
>     ## ipv4-packet-filter.h (module 'internet'): ns3::FqCoDelIpv4PacketFilter::FqCoDelIpv4PacketFilter() [constructor]
20264,20268c17690,17692
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
---
>     ## ipv4-packet-filter.h (module 'internet'): static ns3::TypeId ns3::FqCoDelIpv4PacketFilter::GetTypeId() [member function]
>     cls.add_method('GetTypeId', 
>                    'ns3::TypeId', 
20271,20280c17695,17699
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()() [member operator]
<     cls.add_method('operator()', 
<                    'void', 
<                    [], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
---
>     ## ipv4-packet-filter.h (module 'internet'): int32_t ns3::FqCoDelIpv4PacketFilter::DoClassify(ns3::Ptr<ns3::QueueDiscItem> item) const [member function]
>     cls.add_method('DoClassify', 
>                    'int32_t', 
>                    [param('ns3::Ptr< ns3::QueueDiscItem >', 'item')], 
>                    is_const=True, visibility='private', is_virtual=True)
20283,20284c17702,17705
< def register_Ns3CallbackImpl__Void_Unsigned_int_Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned int, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
---
> def register_Ns3FqCoDelIpv6PacketFilter_methods(root_module, cls):
>     ## ipv6-packet-filter.h (module 'internet'): ns3::FqCoDelIpv6PacketFilter::FqCoDelIpv6PacketFilter(ns3::FqCoDelIpv6PacketFilter const & arg0) [copy constructor]
>     cls.add_constructor([param('ns3::FqCoDelIpv6PacketFilter const &', 'arg0')])
>     ## ipv6-packet-filter.h (module 'internet'): ns3::FqCoDelIpv6PacketFilter::FqCoDelIpv6PacketFilter() [constructor]
20286,20290c17707,17709
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, unsigned int, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, unsigned int, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< void, unsigned int, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, unsigned int, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
---
>     ## ipv6-packet-filter.h (module 'internet'): static ns3::TypeId ns3::FqCoDelIpv6PacketFilter::GetTypeId() [member function]
>     cls.add_method('GetTypeId', 
>                    'ns3::TypeId', 
20293,20302c17712,17716
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, unsigned int, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): void ns3::CallbackImpl<void, unsigned int, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(unsigned int arg0, unsigned int arg1) [member operator]
<     cls.add_method('operator()', 
<                    'void', 
<                    [param('unsigned int', 'arg0'), param('unsigned int', 'arg1')], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
---
>     ## ipv6-packet-filter.h (module 'internet'): int32_t ns3::FqCoDelIpv6PacketFilter::DoClassify(ns3::Ptr<ns3::QueueDiscItem> item) const [member function]
>     cls.add_method('DoClassify', 
>                    'int32_t', 
>                    [param('ns3::Ptr< ns3::QueueDiscItem >', 'item')], 
>                    is_const=True, visibility='private', is_virtual=True)
20306c17720
<     ## icmpv4-l4-protocol.h (module 'internet'): ns3::Icmpv4L4Protocol::Icmpv4L4Protocol(ns3::Icmpv4L4Protocol const & arg0) [constructor]
---
>     ## icmpv4-l4-protocol.h (module 'internet'): ns3::Icmpv4L4Protocol::Icmpv4L4Protocol(ns3::Icmpv4L4Protocol const & arg0) [copy constructor]
20310c17724
<     ## icmpv4-l4-protocol.h (module 'internet'): ns3::IpL4Protocol::DownTargetCallback ns3::Icmpv4L4Protocol::GetDownTarget() const [member function]
---
>     ## icmpv4-l4-protocol.h (module 'internet'): ns3::Callback<void, ns3::Ptr<ns3::Packet>, ns3::Ipv4Address, ns3::Ipv4Address, unsigned char, ns3::Ptr<ns3::Ipv4Route>, ns3::empty, ns3::empty, ns3::empty, ns3::empty> ns3::Icmpv4L4Protocol::GetDownTarget() const [member function]
20312c17726
<                    'ns3::IpL4Protocol::DownTargetCallback', 
---
>                    'ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Ipv4Address, ns3::Ipv4Address, unsigned char, ns3::Ptr< ns3::Ipv4Route >, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 
20315c17729
<     ## icmpv4-l4-protocol.h (module 'internet'): ns3::IpL4Protocol::DownTargetCallback6 ns3::Icmpv4L4Protocol::GetDownTarget6() const [member function]
---
>     ## icmpv4-l4-protocol.h (module 'internet'): ns3::Callback<void, ns3::Ptr<ns3::Packet>, ns3::Ipv6Address, ns3::Ipv6Address, unsigned char, ns3::Ptr<ns3::Ipv6Route>, ns3::empty, ns3::empty, ns3::empty, ns3::empty> ns3::Icmpv4L4Protocol::GetDownTarget6() const [member function]
20317c17731
<                    'ns3::IpL4Protocol::DownTargetCallback6', 
---
>                    'ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Ipv6Address, ns3::Ipv6Address, unsigned char, ns3::Ptr< ns3::Ipv6Route >, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 
20345c17759
<     ## icmpv4-l4-protocol.h (module 'internet'): void ns3::Icmpv4L4Protocol::SendDestUnreachFragNeeded(ns3::Ipv4Header header, ns3::Ptr<const ns3::Packet> orgData, uint16_t nextHopMtu) [member function]
---
>     ## icmpv4-l4-protocol.h (module 'internet'): void ns3::Icmpv4L4Protocol::SendDestUnreachFragNeeded(ns3::Ipv4Header header, ns3::Ptr<ns3::Packet const> orgData, uint16_t nextHopMtu) [member function]
20349c17763
<     ## icmpv4-l4-protocol.h (module 'internet'): void ns3::Icmpv4L4Protocol::SendDestUnreachPort(ns3::Ipv4Header header, ns3::Ptr<const ns3::Packet> orgData) [member function]
---
>     ## icmpv4-l4-protocol.h (module 'internet'): void ns3::Icmpv4L4Protocol::SendDestUnreachPort(ns3::Ipv4Header header, ns3::Ptr<ns3::Packet const> orgData) [member function]
20353c17767
<     ## icmpv4-l4-protocol.h (module 'internet'): void ns3::Icmpv4L4Protocol::SendTimeExceededTtl(ns3::Ipv4Header header, ns3::Ptr<const ns3::Packet> orgData, bool isFragment) [member function]
---
>     ## icmpv4-l4-protocol.h (module 'internet'): void ns3::Icmpv4L4Protocol::SendTimeExceededTtl(ns3::Ipv4Header header, ns3::Ptr<ns3::Packet const> orgData) [member function]
20356,20357c17770,17771
<                    [param('ns3::Ipv4Header', 'header'), param('ns3::Ptr< ns3::Packet const >', 'orgData'), param('bool', 'isFragment')])
<     ## icmpv4-l4-protocol.h (module 'internet'): void ns3::Icmpv4L4Protocol::SetDownTarget(ns3::IpL4Protocol::DownTargetCallback cb) [member function]
---
>                    [param('ns3::Ipv4Header', 'header'), param('ns3::Ptr< ns3::Packet const >', 'orgData')])
>     ## icmpv4-l4-protocol.h (module 'internet'): void ns3::Icmpv4L4Protocol::SetDownTarget(ns3::Callback<void, ns3::Ptr<ns3::Packet>, ns3::Ipv4Address, ns3::Ipv4Address, unsigned char, ns3::Ptr<ns3::Ipv4Route>, ns3::empty, ns3::empty, ns3::empty, ns3::empty> cb) [member function]
20362c17776
<     ## icmpv4-l4-protocol.h (module 'internet'): void ns3::Icmpv4L4Protocol::SetDownTarget6(ns3::IpL4Protocol::DownTargetCallback6 cb) [member function]
---
>     ## icmpv4-l4-protocol.h (module 'internet'): void ns3::Icmpv4L4Protocol::SetDownTarget6(ns3::Callback<void, ns3::Ptr<ns3::Packet>, ns3::Ipv6Address, ns3::Ipv6Address, unsigned char, ns3::Ptr<ns3::Ipv6Route>, ns3::empty, ns3::empty, ns3::empty, ns3::empty> cb) [member function]
20377c17791
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
20382c17796
<                    is_virtual=True, visibility='private')
---
>                    visibility='private', is_virtual=True)
20386c17800
<     ## icmpv6-l4-protocol.h (module 'internet'): ns3::Icmpv6L4Protocol::Icmpv6L4Protocol(ns3::Icmpv6L4Protocol const & arg0) [constructor]
---
>     ## icmpv6-l4-protocol.h (module 'internet'): ns3::Icmpv6L4Protocol::Icmpv6L4Protocol(ns3::Icmpv6L4Protocol const & arg0) [copy constructor]
20397,20398c17811
<                    [param('ns3::Ptr< ns3::NetDevice >', 'device'), param('ns3::Ptr< ns3::Ipv6Interface >', 'interface')], 
<                    is_virtual=True)
---
>                    [param('ns3::Ptr< ns3::NetDevice >', 'device'), param('ns3::Ptr< ns3::Ipv6Interface >', 'interface')])
20407c17820
<     ## icmpv6-l4-protocol.h (module 'internet'): ns3::NdiscCache::Ipv6PayloadHeaderPair ns3::Icmpv6L4Protocol::ForgeEchoRequest(ns3::Ipv6Address src, ns3::Ipv6Address dst, uint16_t id, uint16_t seq, ns3::Ptr<ns3::Packet> data) [member function]
---
>     ## icmpv6-l4-protocol.h (module 'internet'): std::pair<ns3::Ptr<ns3::Packet>,ns3::Ipv6Header> ns3::Icmpv6L4Protocol::ForgeEchoRequest(ns3::Ipv6Address src, ns3::Ipv6Address dst, uint16_t id, uint16_t seq, ns3::Ptr<ns3::Packet> data) [member function]
20409c17822
<                    'ns3::NdiscCache::Ipv6PayloadHeaderPair', 
---
>                    'std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv6Header >', 
20411c17824
<     ## icmpv6-l4-protocol.h (module 'internet'): ns3::NdiscCache::Ipv6PayloadHeaderPair ns3::Icmpv6L4Protocol::ForgeNA(ns3::Ipv6Address src, ns3::Ipv6Address dst, ns3::Address * hardwareAddress, uint8_t flags) [member function]
---
>     ## icmpv6-l4-protocol.h (module 'internet'): std::pair<ns3::Ptr<ns3::Packet>,ns3::Ipv6Header> ns3::Icmpv6L4Protocol::ForgeNA(ns3::Ipv6Address src, ns3::Ipv6Address dst, ns3::Address * hardwareAddress, uint8_t flags) [member function]
20413c17826
<                    'ns3::NdiscCache::Ipv6PayloadHeaderPair', 
---
>                    'std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv6Header >', 
20415c17828
<     ## icmpv6-l4-protocol.h (module 'internet'): ns3::NdiscCache::Ipv6PayloadHeaderPair ns3::Icmpv6L4Protocol::ForgeNS(ns3::Ipv6Address src, ns3::Ipv6Address dst, ns3::Ipv6Address target, ns3::Address hardwareAddress) [member function]
---
>     ## icmpv6-l4-protocol.h (module 'internet'): std::pair<ns3::Ptr<ns3::Packet>,ns3::Ipv6Header> ns3::Icmpv6L4Protocol::ForgeNS(ns3::Ipv6Address src, ns3::Ipv6Address dst, ns3::Ipv6Address target, ns3::Address hardwareAddress) [member function]
20417c17830
<                    'ns3::NdiscCache::Ipv6PayloadHeaderPair', 
---
>                    'std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv6Header >', 
20419c17832
<     ## icmpv6-l4-protocol.h (module 'internet'): ns3::NdiscCache::Ipv6PayloadHeaderPair ns3::Icmpv6L4Protocol::ForgeRS(ns3::Ipv6Address src, ns3::Ipv6Address dst, ns3::Address hardwareAddress) [member function]
---
>     ## icmpv6-l4-protocol.h (module 'internet'): std::pair<ns3::Ptr<ns3::Packet>,ns3::Ipv6Header> ns3::Icmpv6L4Protocol::ForgeRS(ns3::Ipv6Address src, ns3::Ipv6Address dst, ns3::Address hardwareAddress) [member function]
20421c17834
<                    'ns3::NdiscCache::Ipv6PayloadHeaderPair', 
---
>                    'std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv6Header >', 
20428,20451d17840
<     ## icmpv6-l4-protocol.h (module 'internet'): ns3::Time ns3::Icmpv6L4Protocol::GetDelayFirstProbe() const [member function]
<     cls.add_method('GetDelayFirstProbe', 
<                    'ns3::Time', 
<                    [], 
<                    is_const=True)
<     ## icmpv6-l4-protocol.h (module 'internet'): ns3::TypeId ns3::Icmpv6L4Protocol::GetInstanceTypeId() const [member function]
<     cls.add_method('GetInstanceTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## icmpv6-l4-protocol.h (module 'internet'): uint8_t ns3::Icmpv6L4Protocol::GetMaxMulticastSolicit() const [member function]
<     cls.add_method('GetMaxMulticastSolicit', 
<                    'uint8_t', 
<                    [], 
<                    is_const=True)
<     ## icmpv6-l4-protocol.h (module 'internet'): uint8_t ns3::Icmpv6L4Protocol::GetMaxUnicastSolicit() const [member function]
<     cls.add_method('GetMaxUnicastSolicit', 
<                    'uint8_t', 
<                    [], 
<                    is_const=True)
<     ## icmpv6-l4-protocol.h (module 'internet'): ns3::Ptr<ns3::Node> ns3::Icmpv6L4Protocol::GetNode() [member function]
<     cls.add_method('GetNode', 
<                    'ns3::Ptr< ns3::Node >', 
<                    [])
20457,20466d17845
<     ## icmpv6-l4-protocol.h (module 'internet'): ns3::Time ns3::Icmpv6L4Protocol::GetReachableTime() const [member function]
<     cls.add_method('GetReachableTime', 
<                    'ns3::Time', 
<                    [], 
<                    is_const=True)
<     ## icmpv6-l4-protocol.h (module 'internet'): ns3::Time ns3::Icmpv6L4Protocol::GetRetransmissionTime() const [member function]
<     cls.add_method('GetRetransmissionTime', 
<                    'ns3::Time', 
<                    [], 
<                    is_const=True)
20545,20546c17924
<                    [param('ns3::Ipv6Address', 'src'), param('ns3::Ipv6Address', 'dst'), param('ns3::Ipv6Address', 'target'), param('ns3::Address', 'hardwareAddress')], 
<                    is_virtual=True)
---
>                    [param('ns3::Ipv6Address', 'src'), param('ns3::Ipv6Address', 'dst'), param('ns3::Ipv6Address', 'target'), param('ns3::Address', 'hardwareAddress')])
20558a17937,17964
>     ## icmpv6-l4-protocol.h (module 'internet'): ns3::Icmpv6L4Protocol::DELAY_FIRST_PROBE_TIME [variable]
>     cls.add_static_attribute('DELAY_FIRST_PROBE_TIME', 'uint8_t const', is_const=True)
>     ## icmpv6-l4-protocol.h (module 'internet'): ns3::Icmpv6L4Protocol::MAX_ANYCAST_DELAY_TIME [variable]
>     cls.add_static_attribute('MAX_ANYCAST_DELAY_TIME', 'uint8_t const', is_const=True)
>     ## icmpv6-l4-protocol.h (module 'internet'): ns3::Icmpv6L4Protocol::MAX_FINAL_RTR_ADVERTISEMENTS [variable]
>     cls.add_static_attribute('MAX_FINAL_RTR_ADVERTISEMENTS', 'uint8_t const', is_const=True)
>     ## icmpv6-l4-protocol.h (module 'internet'): ns3::Icmpv6L4Protocol::MAX_INITIAL_RTR_ADVERTISEMENTS [variable]
>     cls.add_static_attribute('MAX_INITIAL_RTR_ADVERTISEMENTS', 'uint8_t const', is_const=True)
>     ## icmpv6-l4-protocol.h (module 'internet'): ns3::Icmpv6L4Protocol::MAX_INITIAL_RTR_ADVERT_INTERVAL [variable]
>     cls.add_static_attribute('MAX_INITIAL_RTR_ADVERT_INTERVAL', 'uint8_t const', is_const=True)
>     ## icmpv6-l4-protocol.h (module 'internet'): ns3::Icmpv6L4Protocol::MAX_MULTICAST_SOLICIT [variable]
>     cls.add_static_attribute('MAX_MULTICAST_SOLICIT', 'uint8_t const', is_const=True)
>     ## icmpv6-l4-protocol.h (module 'internet'): ns3::Icmpv6L4Protocol::MAX_NEIGHBOR_ADVERTISEMENT [variable]
>     cls.add_static_attribute('MAX_NEIGHBOR_ADVERTISEMENT', 'uint8_t const', is_const=True)
>     ## icmpv6-l4-protocol.h (module 'internet'): ns3::Icmpv6L4Protocol::MAX_RANDOM_FACTOR [variable]
>     cls.add_static_attribute('MAX_RANDOM_FACTOR', 'double const', is_const=True)
>     ## icmpv6-l4-protocol.h (module 'internet'): ns3::Icmpv6L4Protocol::MAX_RA_DELAY_TIME [variable]
>     cls.add_static_attribute('MAX_RA_DELAY_TIME', 'uint32_t const', is_const=True)
>     ## icmpv6-l4-protocol.h (module 'internet'): ns3::Icmpv6L4Protocol::MAX_RTR_SOLICITATIONS [variable]
>     cls.add_static_attribute('MAX_RTR_SOLICITATIONS', 'uint8_t const', is_const=True)
>     ## icmpv6-l4-protocol.h (module 'internet'): ns3::Icmpv6L4Protocol::MAX_RTR_SOLICITATION_DELAY [variable]
>     cls.add_static_attribute('MAX_RTR_SOLICITATION_DELAY', 'uint8_t const', is_const=True)
>     ## icmpv6-l4-protocol.h (module 'internet'): ns3::Icmpv6L4Protocol::MAX_UNICAST_SOLICIT [variable]
>     cls.add_static_attribute('MAX_UNICAST_SOLICIT', 'uint8_t const', is_const=True)
>     ## icmpv6-l4-protocol.h (module 'internet'): ns3::Icmpv6L4Protocol::MIN_DELAY_BETWEEN_RAS [variable]
>     cls.add_static_attribute('MIN_DELAY_BETWEEN_RAS', 'uint8_t const', is_const=True)
>     ## icmpv6-l4-protocol.h (module 'internet'): ns3::Icmpv6L4Protocol::MIN_RANDOM_FACTOR [variable]
>     cls.add_static_attribute('MIN_RANDOM_FACTOR', 'double const', is_const=True)
20560a17967,17972
>     ## icmpv6-l4-protocol.h (module 'internet'): ns3::Icmpv6L4Protocol::REACHABLE_TIME [variable]
>     cls.add_static_attribute('REACHABLE_TIME', 'uint32_t const', is_const=True)
>     ## icmpv6-l4-protocol.h (module 'internet'): ns3::Icmpv6L4Protocol::RETRANS_TIMER [variable]
>     cls.add_static_attribute('RETRANS_TIMER', 'uint32_t const', is_const=True)
>     ## icmpv6-l4-protocol.h (module 'internet'): ns3::Icmpv6L4Protocol::RTR_SOLICITATION_INTERVAL [variable]
>     cls.add_static_attribute('RTR_SOLICITATION_INTERVAL', 'uint8_t const', is_const=True)
20565,20576c17977,17978
<                    is_virtual=True, visibility='protected')
<     ## icmpv6-l4-protocol.h (module 'internet'): ns3::Ptr<ns3::NdiscCache> ns3::Icmpv6L4Protocol::FindCache(ns3::Ptr<ns3::NetDevice> device) [member function]
<     cls.add_method('FindCache', 
<                    'ns3::Ptr< ns3::NdiscCache >', 
<                    [param('ns3::Ptr< ns3::NetDevice >', 'device')], 
<                    visibility='protected')
<     ## icmpv6-l4-protocol.h (module 'internet'): void ns3::Icmpv6L4Protocol::Forward(ns3::Ipv6Address source, ns3::Icmpv6Header icmp, uint32_t info, ns3::Ipv6Header ipHeader, uint8_t const * payload) [member function]
<     cls.add_method('Forward', 
<                    'void', 
<                    [param('ns3::Ipv6Address', 'source'), param('ns3::Icmpv6Header', 'icmp'), param('uint32_t', 'info'), param('ns3::Ipv6Header', 'ipHeader'), param('uint8_t const *', 'payload')], 
<                    visibility='protected')
<     ## icmpv6-l4-protocol.h (module 'internet'): ns3::IpL4Protocol::DownTargetCallback ns3::Icmpv6L4Protocol::GetDownTarget() const [member function]
---
>                    visibility='protected', is_virtual=True)
>     ## icmpv6-l4-protocol.h (module 'internet'): ns3::Callback<void, ns3::Ptr<ns3::Packet>, ns3::Ipv4Address, ns3::Ipv4Address, unsigned char, ns3::Ptr<ns3::Ipv4Route>, ns3::empty, ns3::empty, ns3::empty, ns3::empty> ns3::Icmpv6L4Protocol::GetDownTarget() const [member function]
20578c17980
<                    'ns3::IpL4Protocol::DownTargetCallback', 
---
>                    'ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Ipv4Address, ns3::Ipv4Address, unsigned char, ns3::Ptr< ns3::Ipv4Route >, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 
20580,20581c17982,17983
<                    is_const=True, is_virtual=True, visibility='protected')
<     ## icmpv6-l4-protocol.h (module 'internet'): ns3::IpL4Protocol::DownTargetCallback6 ns3::Icmpv6L4Protocol::GetDownTarget6() const [member function]
---
>                    is_const=True, visibility='private', is_virtual=True)
>     ## icmpv6-l4-protocol.h (module 'internet'): ns3::Callback<void, ns3::Ptr<ns3::Packet>, ns3::Ipv6Address, ns3::Ipv6Address, unsigned char, ns3::Ptr<ns3::Ipv6Route>, ns3::empty, ns3::empty, ns3::empty, ns3::empty> ns3::Icmpv6L4Protocol::GetDownTarget6() const [member function]
20583c17985
<                    'ns3::IpL4Protocol::DownTargetCallback6', 
---
>                    'ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Ipv6Address, ns3::Ipv6Address, unsigned char, ns3::Ptr< ns3::Ipv6Route >, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 
20585,20641c17987,17988
<                    is_const=True, is_virtual=True, visibility='protected')
<     ## icmpv6-l4-protocol.h (module 'internet'): void ns3::Icmpv6L4Protocol::HandleDestinationUnreachable(ns3::Ptr<ns3::Packet> p, ns3::Ipv6Address const & src, ns3::Ipv6Address const & dst, ns3::Ptr<ns3::Ipv6Interface> interface) [member function]
<     cls.add_method('HandleDestinationUnreachable', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Packet >', 'p'), param('ns3::Ipv6Address const &', 'src'), param('ns3::Ipv6Address const &', 'dst'), param('ns3::Ptr< ns3::Ipv6Interface >', 'interface')], 
<                    visibility='protected')
<     ## icmpv6-l4-protocol.h (module 'internet'): void ns3::Icmpv6L4Protocol::HandleEchoRequest(ns3::Ptr<ns3::Packet> p, ns3::Ipv6Address const & src, ns3::Ipv6Address const & dst, ns3::Ptr<ns3::Ipv6Interface> interface) [member function]
<     cls.add_method('HandleEchoRequest', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Packet >', 'p'), param('ns3::Ipv6Address const &', 'src'), param('ns3::Ipv6Address const &', 'dst'), param('ns3::Ptr< ns3::Ipv6Interface >', 'interface')], 
<                    visibility='protected')
<     ## icmpv6-l4-protocol.h (module 'internet'): void ns3::Icmpv6L4Protocol::HandleNA(ns3::Ptr<ns3::Packet> p, ns3::Ipv6Address const & src, ns3::Ipv6Address const & dst, ns3::Ptr<ns3::Ipv6Interface> interface) [member function]
<     cls.add_method('HandleNA', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Packet >', 'p'), param('ns3::Ipv6Address const &', 'src'), param('ns3::Ipv6Address const &', 'dst'), param('ns3::Ptr< ns3::Ipv6Interface >', 'interface')], 
<                    visibility='protected')
<     ## icmpv6-l4-protocol.h (module 'internet'): void ns3::Icmpv6L4Protocol::HandleNS(ns3::Ptr<ns3::Packet> p, ns3::Ipv6Address const & src, ns3::Ipv6Address const & dst, ns3::Ptr<ns3::Ipv6Interface> interface) [member function]
<     cls.add_method('HandleNS', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Packet >', 'p'), param('ns3::Ipv6Address const &', 'src'), param('ns3::Ipv6Address const &', 'dst'), param('ns3::Ptr< ns3::Ipv6Interface >', 'interface')], 
<                    visibility='protected')
<     ## icmpv6-l4-protocol.h (module 'internet'): void ns3::Icmpv6L4Protocol::HandlePacketTooBig(ns3::Ptr<ns3::Packet> p, ns3::Ipv6Address const & src, ns3::Ipv6Address const & dst, ns3::Ptr<ns3::Ipv6Interface> interface) [member function]
<     cls.add_method('HandlePacketTooBig', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Packet >', 'p'), param('ns3::Ipv6Address const &', 'src'), param('ns3::Ipv6Address const &', 'dst'), param('ns3::Ptr< ns3::Ipv6Interface >', 'interface')], 
<                    visibility='protected')
<     ## icmpv6-l4-protocol.h (module 'internet'): void ns3::Icmpv6L4Protocol::HandleParameterError(ns3::Ptr<ns3::Packet> p, ns3::Ipv6Address const & src, ns3::Ipv6Address const & dst, ns3::Ptr<ns3::Ipv6Interface> interface) [member function]
<     cls.add_method('HandleParameterError', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Packet >', 'p'), param('ns3::Ipv6Address const &', 'src'), param('ns3::Ipv6Address const &', 'dst'), param('ns3::Ptr< ns3::Ipv6Interface >', 'interface')], 
<                    visibility='protected')
<     ## icmpv6-l4-protocol.h (module 'internet'): void ns3::Icmpv6L4Protocol::HandleRA(ns3::Ptr<ns3::Packet> p, ns3::Ipv6Address const & src, ns3::Ipv6Address const & dst, ns3::Ptr<ns3::Ipv6Interface> interface) [member function]
<     cls.add_method('HandleRA', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Packet >', 'p'), param('ns3::Ipv6Address const &', 'src'), param('ns3::Ipv6Address const &', 'dst'), param('ns3::Ptr< ns3::Ipv6Interface >', 'interface')], 
<                    visibility='protected')
<     ## icmpv6-l4-protocol.h (module 'internet'): void ns3::Icmpv6L4Protocol::HandleRS(ns3::Ptr<ns3::Packet> p, ns3::Ipv6Address const & src, ns3::Ipv6Address const & dst, ns3::Ptr<ns3::Ipv6Interface> interface) [member function]
<     cls.add_method('HandleRS', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Packet >', 'p'), param('ns3::Ipv6Address const &', 'src'), param('ns3::Ipv6Address const &', 'dst'), param('ns3::Ptr< ns3::Ipv6Interface >', 'interface')], 
<                    visibility='protected')
<     ## icmpv6-l4-protocol.h (module 'internet'): void ns3::Icmpv6L4Protocol::HandleRedirection(ns3::Ptr<ns3::Packet> p, ns3::Ipv6Address const & src, ns3::Ipv6Address const & dst, ns3::Ptr<ns3::Ipv6Interface> interface) [member function]
<     cls.add_method('HandleRedirection', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Packet >', 'p'), param('ns3::Ipv6Address const &', 'src'), param('ns3::Ipv6Address const &', 'dst'), param('ns3::Ptr< ns3::Ipv6Interface >', 'interface')], 
<                    visibility='protected')
<     ## icmpv6-l4-protocol.h (module 'internet'): void ns3::Icmpv6L4Protocol::HandleTimeExceeded(ns3::Ptr<ns3::Packet> p, ns3::Ipv6Address const & src, ns3::Ipv6Address const & dst, ns3::Ptr<ns3::Ipv6Interface> interface) [member function]
<     cls.add_method('HandleTimeExceeded', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Packet >', 'p'), param('ns3::Ipv6Address const &', 'src'), param('ns3::Ipv6Address const &', 'dst'), param('ns3::Ptr< ns3::Ipv6Interface >', 'interface')], 
<                    visibility='protected')
<     ## icmpv6-l4-protocol.h (module 'internet'): void ns3::Icmpv6L4Protocol::ReceiveLLA(ns3::Icmpv6OptionLinkLayerAddress lla, ns3::Ipv6Address const & src, ns3::Ipv6Address const & dst, ns3::Ptr<ns3::Ipv6Interface> interface) [member function]
<     cls.add_method('ReceiveLLA', 
<                    'void', 
<                    [param('ns3::Icmpv6OptionLinkLayerAddress', 'lla'), param('ns3::Ipv6Address const &', 'src'), param('ns3::Ipv6Address const &', 'dst'), param('ns3::Ptr< ns3::Ipv6Interface >', 'interface')], 
<                    visibility='protected')
<     ## icmpv6-l4-protocol.h (module 'internet'): void ns3::Icmpv6L4Protocol::SetDownTarget(ns3::IpL4Protocol::DownTargetCallback cb) [member function]
---
>                    is_const=True, visibility='private', is_virtual=True)
>     ## icmpv6-l4-protocol.h (module 'internet'): void ns3::Icmpv6L4Protocol::SetDownTarget(ns3::Callback<void, ns3::Ptr<ns3::Packet>, ns3::Ipv4Address, ns3::Ipv4Address, unsigned char, ns3::Ptr<ns3::Ipv4Route>, ns3::empty, ns3::empty, ns3::empty, ns3::empty> cb) [member function]
20645,20646c17992,17993
<                    is_virtual=True, visibility='protected')
<     ## icmpv6-l4-protocol.h (module 'internet'): void ns3::Icmpv6L4Protocol::SetDownTarget6(ns3::IpL4Protocol::DownTargetCallback6 cb) [member function]
---
>                    visibility='private', is_virtual=True)
>     ## icmpv6-l4-protocol.h (module 'internet'): void ns3::Icmpv6L4Protocol::SetDownTarget6(ns3::Callback<void, ns3::Ptr<ns3::Packet>, ns3::Ipv6Address, ns3::Ipv6Address, unsigned char, ns3::Ptr<ns3::Ipv6Route>, ns3::empty, ns3::empty, ns3::empty, ns3::empty> cb) [member function]
20650c17997
<                    is_virtual=True, visibility='protected')
---
>                    visibility='private', is_virtual=True)
20654c18001
<     ## ipv4-global-routing.h (module 'internet'): ns3::Ipv4GlobalRouting::Ipv4GlobalRouting(ns3::Ipv4GlobalRouting const & arg0) [constructor]
---
>     ## ipv4-global-routing.h (module 'internet'): ns3::Ipv4GlobalRouting::Ipv4GlobalRouting(ns3::Ipv4GlobalRouting const & arg0) [copy constructor]
20717c18064
<     ## ipv4-global-routing.h (module 'internet'): void ns3::Ipv4GlobalRouting::PrintRoutingTable(ns3::Ptr<ns3::OutputStreamWrapper> stream, ns3::Time::Unit unit=::ns3::Time::Unit::S) const [member function]
---
>     ## ipv4-global-routing.h (module 'internet'): void ns3::Ipv4GlobalRouting::PrintRoutingTable(ns3::Ptr<ns3::OutputStreamWrapper> stream) const [member function]
20720c18067
<                    [param('ns3::Ptr< ns3::OutputStreamWrapper >', 'stream'), param('ns3::Time::Unit', 'unit', default_value='::ns3::Time::Unit::S')], 
---
>                    [param('ns3::Ptr< ns3::OutputStreamWrapper >', 'stream')], 
20726c18073
<     ## ipv4-global-routing.h (module 'internet'): bool ns3::Ipv4GlobalRouting::RouteInput(ns3::Ptr<const ns3::Packet> p, ns3::Ipv4Header const & header, ns3::Ptr<const ns3::NetDevice> idev, ns3::Ipv4RoutingProtocol::UnicastForwardCallback ucb, ns3::Ipv4RoutingProtocol::MulticastForwardCallback mcb, ns3::Ipv4RoutingProtocol::LocalDeliverCallback lcb, ns3::Ipv4RoutingProtocol::ErrorCallback ecb) [member function]
---
>     ## ipv4-global-routing.h (module 'internet'): bool ns3::Ipv4GlobalRouting::RouteInput(ns3::Ptr<ns3::Packet const> p, ns3::Ipv4Header const & header, ns3::Ptr<const ns3::NetDevice> idev, ns3::Callback<void,ns3::Ptr<ns3::Ipv4Route>,ns3::Ptr<const ns3::Packet>,const ns3::Ipv4Header&,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> ucb, ns3::Callback<void,ns3::Ptr<ns3::Ipv4MulticastRoute>,ns3::Ptr<const ns3::Packet>,const ns3::Ipv4Header&,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> mcb, ns3::Callback<void,ns3::Ptr<const ns3::Packet>,const ns3::Ipv4Header&,unsigned int,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> lcb, ns3::Callback<void,ns3::Ptr<const ns3::Packet>,const ns3::Ipv4Header&,ns3::Socket::SocketErrno,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> ecb) [member function]
20745c18092
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
20749c18096
<     ## ipv4-list-routing.h (module 'internet'): ns3::Ipv4ListRouting::Ipv4ListRouting(ns3::Ipv4ListRouting const & arg0) [constructor]
---
>     ## ipv4-list-routing.h (module 'internet'): ns3::Ipv4ListRouting::Ipv4ListRouting(ns3::Ipv4ListRouting const & arg0) [copy constructor]
20793c18140
<     ## ipv4-list-routing.h (module 'internet'): void ns3::Ipv4ListRouting::PrintRoutingTable(ns3::Ptr<ns3::OutputStreamWrapper> stream, ns3::Time::Unit unit=::ns3::Time::Unit::S) const [member function]
---
>     ## ipv4-list-routing.h (module 'internet'): void ns3::Ipv4ListRouting::PrintRoutingTable(ns3::Ptr<ns3::OutputStreamWrapper> stream) const [member function]
20796c18143
<                    [param('ns3::Ptr< ns3::OutputStreamWrapper >', 'stream'), param('ns3::Time::Unit', 'unit', default_value='::ns3::Time::Unit::S')], 
---
>                    [param('ns3::Ptr< ns3::OutputStreamWrapper >', 'stream')], 
20798c18145
<     ## ipv4-list-routing.h (module 'internet'): bool ns3::Ipv4ListRouting::RouteInput(ns3::Ptr<const ns3::Packet> p, ns3::Ipv4Header const & header, ns3::Ptr<const ns3::NetDevice> idev, ns3::Ipv4RoutingProtocol::UnicastForwardCallback ucb, ns3::Ipv4RoutingProtocol::MulticastForwardCallback mcb, ns3::Ipv4RoutingProtocol::LocalDeliverCallback lcb, ns3::Ipv4RoutingProtocol::ErrorCallback ecb) [member function]
---
>     ## ipv4-list-routing.h (module 'internet'): bool ns3::Ipv4ListRouting::RouteInput(ns3::Ptr<ns3::Packet const> p, ns3::Ipv4Header const & header, ns3::Ptr<const ns3::NetDevice> idev, ns3::Callback<void,ns3::Ptr<ns3::Ipv4Route>,ns3::Ptr<const ns3::Packet>,const ns3::Ipv4Header&,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> ucb, ns3::Callback<void,ns3::Ptr<ns3::Ipv4MulticastRoute>,ns3::Ptr<const ns3::Packet>,const ns3::Ipv4Header&,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> mcb, ns3::Callback<void,ns3::Ptr<const ns3::Packet>,const ns3::Ipv4Header&,unsigned int,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> lcb, ns3::Callback<void,ns3::Ptr<const ns3::Packet>,const ns3::Ipv4Header&,ns3::Socket::SocketErrno,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> ecb) [member function]
20817c18164
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
20822c18169
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
20826c18173
<     ## ipv4-packet-probe.h (module 'internet'): ns3::Ipv4PacketProbe::Ipv4PacketProbe(ns3::Ipv4PacketProbe const & arg0) [constructor]
---
>     ## ipv4-packet-probe.h (module 'internet'): ns3::Ipv4PacketProbe::Ipv4PacketProbe(ns3::Ipv4PacketProbe const & arg0) [copy constructor]
20845c18192
<     ## ipv4-packet-probe.h (module 'internet'): void ns3::Ipv4PacketProbe::SetValue(ns3::Ptr<const ns3::Packet> packet, ns3::Ptr<ns3::Ipv4> ipv4, uint32_t interface) [member function]
---
>     ## ipv4-packet-probe.h (module 'internet'): void ns3::Ipv4PacketProbe::SetValue(ns3::Ptr<ns3::Packet const> packet, ns3::Ptr<ns3::Ipv4> ipv4, uint32_t interface) [member function]
20849c18196
<     ## ipv4-packet-probe.h (module 'internet'): static void ns3::Ipv4PacketProbe::SetValueByPath(std::string path, ns3::Ptr<const ns3::Packet> packet, ns3::Ptr<ns3::Ipv4> ipv4, uint32_t interface) [member function]
---
>     ## ipv4-packet-probe.h (module 'internet'): static void ns3::Ipv4PacketProbe::SetValueByPath(std::string path, ns3::Ptr<ns3::Packet const> packet, ns3::Ptr<ns3::Ipv4> ipv4, uint32_t interface) [member function]
20857c18204
<     ## ipv6-extension.h (module 'internet'): ns3::Ipv6ExtensionLooseRouting::Ipv6ExtensionLooseRouting(ns3::Ipv6ExtensionLooseRouting const & arg0) [constructor]
---
>     ## ipv6-extension.h (module 'internet'): ns3::Ipv6ExtensionLooseRouting::Ipv6ExtensionLooseRouting(ns3::Ipv6ExtensionLooseRouting const & arg0) [copy constructor]
20881c18228
<     ## ipv6-list-routing.h (module 'internet'): ns3::Ipv6ListRouting::Ipv6ListRouting(ns3::Ipv6ListRouting const & arg0) [constructor]
---
>     ## ipv6-list-routing.h (module 'internet'): ns3::Ipv6ListRouting::Ipv6ListRouting(ns3::Ipv6ListRouting const & arg0) [copy constructor]
20910c18257
<     ## ipv6-list-routing.h (module 'internet'): void ns3::Ipv6ListRouting::NotifyAddRoute(ns3::Ipv6Address dst, ns3::Ipv6Prefix mask, ns3::Ipv6Address nextHop, uint32_t interface, ns3::Ipv6Address prefixToUse=ns3::Ipv6Address::GetZero()) [member function]
---
>     ## ipv6-list-routing.h (module 'internet'): void ns3::Ipv6ListRouting::NotifyAddRoute(ns3::Ipv6Address dst, ns3::Ipv6Prefix mask, ns3::Ipv6Address nextHop, uint32_t interface, ns3::Ipv6Address prefixToUse=ns3::Ipv6Address::GetZero( )) [member function]
20913c18260
<                    [param('ns3::Ipv6Address', 'dst'), param('ns3::Ipv6Prefix', 'mask'), param('ns3::Ipv6Address', 'nextHop'), param('uint32_t', 'interface'), param('ns3::Ipv6Address', 'prefixToUse', default_value='ns3::Ipv6Address::GetZero()')], 
---
>                    [param('ns3::Ipv6Address', 'dst'), param('ns3::Ipv6Prefix', 'mask'), param('ns3::Ipv6Address', 'nextHop'), param('uint32_t', 'interface'), param('ns3::Ipv6Address', 'prefixToUse', default_value='ns3::Ipv6Address::GetZero( )')], 
20930c18277
<     ## ipv6-list-routing.h (module 'internet'): void ns3::Ipv6ListRouting::NotifyRemoveRoute(ns3::Ipv6Address dst, ns3::Ipv6Prefix mask, ns3::Ipv6Address nextHop, uint32_t interface, ns3::Ipv6Address prefixToUse=ns3::Ipv6Address::GetZero()) [member function]
---
>     ## ipv6-list-routing.h (module 'internet'): void ns3::Ipv6ListRouting::NotifyRemoveRoute(ns3::Ipv6Address dst, ns3::Ipv6Prefix mask, ns3::Ipv6Address nextHop, uint32_t interface, ns3::Ipv6Address prefixToUse=ns3::Ipv6Address::GetZero( )) [member function]
20933c18280
<                    [param('ns3::Ipv6Address', 'dst'), param('ns3::Ipv6Prefix', 'mask'), param('ns3::Ipv6Address', 'nextHop'), param('uint32_t', 'interface'), param('ns3::Ipv6Address', 'prefixToUse', default_value='ns3::Ipv6Address::GetZero()')], 
---
>                    [param('ns3::Ipv6Address', 'dst'), param('ns3::Ipv6Prefix', 'mask'), param('ns3::Ipv6Address', 'nextHop'), param('uint32_t', 'interface'), param('ns3::Ipv6Address', 'prefixToUse', default_value='ns3::Ipv6Address::GetZero( )')], 
20935c18282
<     ## ipv6-list-routing.h (module 'internet'): void ns3::Ipv6ListRouting::PrintRoutingTable(ns3::Ptr<ns3::OutputStreamWrapper> stream, ns3::Time::Unit unit=::ns3::Time::Unit::S) const [member function]
---
>     ## ipv6-list-routing.h (module 'internet'): void ns3::Ipv6ListRouting::PrintRoutingTable(ns3::Ptr<ns3::OutputStreamWrapper> stream) const [member function]
20938c18285
<                    [param('ns3::Ptr< ns3::OutputStreamWrapper >', 'stream'), param('ns3::Time::Unit', 'unit', default_value='::ns3::Time::Unit::S')], 
---
>                    [param('ns3::Ptr< ns3::OutputStreamWrapper >', 'stream')], 
20940c18287
<     ## ipv6-list-routing.h (module 'internet'): bool ns3::Ipv6ListRouting::RouteInput(ns3::Ptr<const ns3::Packet> p, ns3::Ipv6Header const & header, ns3::Ptr<const ns3::NetDevice> idev, ns3::Ipv6RoutingProtocol::UnicastForwardCallback ucb, ns3::Ipv6RoutingProtocol::MulticastForwardCallback mcb, ns3::Ipv6RoutingProtocol::LocalDeliverCallback lcb, ns3::Ipv6RoutingProtocol::ErrorCallback ecb) [member function]
---
>     ## ipv6-list-routing.h (module 'internet'): bool ns3::Ipv6ListRouting::RouteInput(ns3::Ptr<ns3::Packet const> p, ns3::Ipv6Header const & header, ns3::Ptr<const ns3::NetDevice> idev, ns3::Callback<void,ns3::Ptr<const ns3::NetDevice>,ns3::Ptr<ns3::Ipv6Route>,ns3::Ptr<const ns3::Packet>,const ns3::Ipv6Header&,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> ucb, ns3::Callback<void,ns3::Ptr<const ns3::NetDevice>,ns3::Ptr<ns3::Ipv6MulticastRoute>,ns3::Ptr<const ns3::Packet>,const ns3::Ipv6Header&,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> mcb, ns3::Callback<void,ns3::Ptr<const ns3::Packet>,const ns3::Ipv6Header&,unsigned int,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> lcb, ns3::Callback<void,ns3::Ptr<const ns3::Packet>,const ns3::Ipv6Header&,ns3::Socket::SocketErrno,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty,ns3::empty> ecb) [member function]
20959c18306
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
20963c18310
<     ## ipv6-packet-probe.h (module 'internet'): ns3::Ipv6PacketProbe::Ipv6PacketProbe(ns3::Ipv6PacketProbe const & arg0) [constructor]
---
>     ## ipv6-packet-probe.h (module 'internet'): ns3::Ipv6PacketProbe::Ipv6PacketProbe(ns3::Ipv6PacketProbe const & arg0) [copy constructor]
20982c18329
<     ## ipv6-packet-probe.h (module 'internet'): void ns3::Ipv6PacketProbe::SetValue(ns3::Ptr<const ns3::Packet> packet, ns3::Ptr<ns3::Ipv6> ipv6, uint32_t interface) [member function]
---
>     ## ipv6-packet-probe.h (module 'internet'): void ns3::Ipv6PacketProbe::SetValue(ns3::Ptr<ns3::Packet const> packet, ns3::Ptr<ns3::Ipv6> ipv6, uint32_t interface) [member function]
20986c18333
<     ## ipv6-packet-probe.h (module 'internet'): static void ns3::Ipv6PacketProbe::SetValueByPath(std::string path, ns3::Ptr<const ns3::Packet> packet, ns3::Ptr<ns3::Ipv6> ipv6, uint32_t interface) [member function]
---
>     ## ipv6-packet-probe.h (module 'internet'): static void ns3::Ipv6PacketProbe::SetValueByPath(std::string path, ns3::Ptr<ns3::Packet const> packet, ns3::Ptr<ns3::Ipv6> ipv6, uint32_t interface) [member function]
20994c18341
<     ## loopback-net-device.h (module 'internet'): ns3::LoopbackNetDevice::LoopbackNetDevice(ns3::LoopbackNetDevice const & arg0) [constructor]
---
>     ## loopback-net-device.h (module 'internet'): ns3::LoopbackNetDevice::LoopbackNetDevice(ns3::LoopbackNetDevice const & arg0) [copy constructor]
21108c18455
<     ## loopback-net-device.h (module 'internet'): void ns3::LoopbackNetDevice::SetPromiscReceiveCallback(ns3::NetDevice::PromiscReceiveCallback cb) [member function]
---
>     ## loopback-net-device.h (module 'internet'): void ns3::LoopbackNetDevice::SetPromiscReceiveCallback(ns3::Callback<bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<ns3::Packet const>, unsigned short, ns3::Address const&, ns3::Address const&, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty> cb) [member function]
21113c18460
<     ## loopback-net-device.h (module 'internet'): void ns3::LoopbackNetDevice::SetReceiveCallback(ns3::NetDevice::ReceiveCallback cb) [member function]
---
>     ## loopback-net-device.h (module 'internet'): void ns3::LoopbackNetDevice::SetReceiveCallback(ns3::Callback<bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<ns3::Packet const>, unsigned short, ns3::Address const&, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> cb) [member function]
21127c18474
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
21131c18478
<     ## queue-item.h (module 'network'): ns3::QueueDiscItem::QueueDiscItem(ns3::Ptr<ns3::Packet> p, ns3::Address const & addr, uint16_t protocol) [constructor]
---
>     ## queue-disc.h (module 'traffic-control'): ns3::QueueDiscItem::QueueDiscItem(ns3::Ptr<ns3::Packet> p, ns3::Address const & addr, uint16_t protocol) [constructor]
21133c18480
<     ## queue-item.h (module 'network'): ns3::Address ns3::QueueDiscItem::GetAddress() const [member function]
---
>     ## queue-disc.h (module 'traffic-control'): ns3::Address ns3::QueueDiscItem::GetAddress() const [member function]
21138c18485
<     ## queue-item.h (module 'network'): uint16_t ns3::QueueDiscItem::GetProtocol() const [member function]
---
>     ## queue-disc.h (module 'traffic-control'): uint16_t ns3::QueueDiscItem::GetProtocol() const [member function]
21143c18490
<     ## queue-item.h (module 'network'): uint8_t ns3::QueueDiscItem::GetTxQueueIndex() const [member function]
---
>     ## queue-disc.h (module 'traffic-control'): uint8_t ns3::QueueDiscItem::GetTxQueueIndex() const [member function]
21148c18495
<     ## queue-item.h (module 'network'): void ns3::QueueDiscItem::SetTxQueueIndex(uint8_t txq) [member function]
---
>     ## queue-disc.h (module 'traffic-control'): void ns3::QueueDiscItem::SetTxQueueIndex(uint8_t txq) [member function]
21152,21161c18499
<     ## queue-item.h (module 'network'): ns3::Time ns3::QueueDiscItem::GetTimeStamp() const [member function]
<     cls.add_method('GetTimeStamp', 
<                    'ns3::Time', 
<                    [], 
<                    is_const=True)
<     ## queue-item.h (module 'network'): void ns3::QueueDiscItem::SetTimeStamp(ns3::Time t) [member function]
<     cls.add_method('SetTimeStamp', 
<                    'void', 
<                    [param('ns3::Time', 't')])
<     ## queue-item.h (module 'network'): void ns3::QueueDiscItem::AddHeader() [member function]
---
>     ## queue-disc.h (module 'traffic-control'): void ns3::QueueDiscItem::AddHeader() [member function]
21165,21166c18503,18504
<                    is_virtual=True, is_pure_virtual=True)
<     ## queue-item.h (module 'network'): void ns3::QueueDiscItem::Print(std::ostream & os) const [member function]
---
>                    is_pure_virtual=True, is_virtual=True)
>     ## queue-disc.h (module 'traffic-control'): void ns3::QueueDiscItem::Print(std::ostream & os) const [member function]
21171,21215d18508
<     ## queue-item.h (module 'network'): bool ns3::QueueDiscItem::Mark() [member function]
<     cls.add_method('Mark', 
<                    'bool', 
<                    [], 
<                    is_virtual=True, is_pure_virtual=True)
<     ## queue-item.h (module 'network'): uint32_t ns3::QueueDiscItem::Hash(uint32_t perturbation=0) const [member function]
<     cls.add_method('Hash', 
<                    'uint32_t', 
<                    [param('uint32_t', 'perturbation', default_value='0')], 
<                    is_const=True, is_virtual=True)
<     return
< 
< def register_Ns3ArpQueueDiscItem_methods(root_module, cls):
<     ## arp-queue-disc-item.h (module 'internet'): ns3::ArpQueueDiscItem::ArpQueueDiscItem(ns3::Ptr<ns3::Packet> p, ns3::Address const & addr, uint16_t protocol, ns3::ArpHeader const & header) [constructor]
<     cls.add_constructor([param('ns3::Ptr< ns3::Packet >', 'p'), param('ns3::Address const &', 'addr'), param('uint16_t', 'protocol'), param('ns3::ArpHeader const &', 'header')])
<     ## arp-queue-disc-item.h (module 'internet'): uint32_t ns3::ArpQueueDiscItem::GetSize() const [member function]
<     cls.add_method('GetSize', 
<                    'uint32_t', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## arp-queue-disc-item.h (module 'internet'): ns3::ArpHeader const & ns3::ArpQueueDiscItem::GetHeader() const [member function]
<     cls.add_method('GetHeader', 
<                    'ns3::ArpHeader const &', 
<                    [], 
<                    is_const=True)
<     ## arp-queue-disc-item.h (module 'internet'): void ns3::ArpQueueDiscItem::AddHeader() [member function]
<     cls.add_method('AddHeader', 
<                    'void', 
<                    [], 
<                    is_virtual=True)
<     ## arp-queue-disc-item.h (module 'internet'): void ns3::ArpQueueDiscItem::Print(std::ostream & os) const [member function]
<     cls.add_method('Print', 
<                    'void', 
<                    [param('std::ostream &', 'os')], 
<                    is_const=True, is_virtual=True)
<     ## arp-queue-disc-item.h (module 'internet'): bool ns3::ArpQueueDiscItem::Mark() [member function]
<     cls.add_method('Mark', 
<                    'bool', 
<                    [], 
<                    is_virtual=True)
<     ## arp-queue-disc-item.h (module 'internet'): uint32_t ns3::ArpQueueDiscItem::Hash(uint32_t perturbation) const [member function]
<     cls.add_method('Hash', 
<                    'uint32_t', 
<                    [param('uint32_t', 'perturbation')], 
<                    is_const=True, is_virtual=True)
21221,21222c18514,18515
<     ## ipv4-queue-disc-item.h (module 'internet'): uint32_t ns3::Ipv4QueueDiscItem::GetSize() const [member function]
<     cls.add_method('GetSize', 
---
>     ## ipv4-queue-disc-item.h (module 'internet'): uint32_t ns3::Ipv4QueueDiscItem::GetPacketSize() const [member function]
>     cls.add_method('GetPacketSize', 
21246,21255d18538
<     ## ipv4-queue-disc-item.h (module 'internet'): bool ns3::Ipv4QueueDiscItem::Mark() [member function]
<     cls.add_method('Mark', 
<                    'bool', 
<                    [], 
<                    is_virtual=True)
<     ## ipv4-queue-disc-item.h (module 'internet'): uint32_t ns3::Ipv4QueueDiscItem::Hash(uint32_t perturbation) const [member function]
<     cls.add_method('Hash', 
<                    'uint32_t', 
<                    [param('uint32_t', 'perturbation')], 
<                    is_const=True, is_virtual=True)
21261,21262c18544,18545
<     ## ipv6-queue-disc-item.h (module 'internet'): uint32_t ns3::Ipv6QueueDiscItem::GetSize() const [member function]
<     cls.add_method('GetSize', 
---
>     ## ipv6-queue-disc-item.h (module 'internet'): uint32_t ns3::Ipv6QueueDiscItem::GetPacketSize() const [member function]
>     cls.add_method('GetPacketSize', 
21286,21295d18568
<     ## ipv6-queue-disc-item.h (module 'internet'): bool ns3::Ipv6QueueDiscItem::Mark() [member function]
<     cls.add_method('Mark', 
<                    'bool', 
<                    [], 
<                    is_virtual=True)
<     ## ipv6-queue-disc-item.h (module 'internet'): uint32_t ns3::Ipv6QueueDiscItem::Hash(uint32_t perturbation) const [member function]
<     cls.add_method('Hash', 
<                    'uint32_t', 
<                    [param('uint32_t', 'perturbation')], 
<                    is_const=True, is_virtual=True)
21299c18572
<     ## hash-function.h (module 'core'): ns3::Hash::Implementation::Implementation(ns3::Hash::Implementation const & arg0) [constructor]
---
>     ## hash-function.h (module 'core'): ns3::Hash::Implementation::Implementation(ns3::Hash::Implementation const & arg0) [copy constructor]
21303c18576
<     ## hash-function.h (module 'core'): uint32_t ns3::Hash::Implementation::GetHash32(char const * buffer, std::size_t const size) [member function]
---
>     ## hash-function.h (module 'core'): uint32_t ns3::Hash::Implementation::GetHash32(char const * buffer, size_t const size) [member function]
21306,21308c18579,18581
<                    [param('char const *', 'buffer'), param('std::size_t const', 'size')], 
<                    is_virtual=True, is_pure_virtual=True)
<     ## hash-function.h (module 'core'): uint64_t ns3::Hash::Implementation::GetHash64(char const * buffer, std::size_t const size) [member function]
---
>                    [param('char const *', 'buffer'), param('size_t const', 'size')], 
>                    is_pure_virtual=True, is_virtual=True)
>     ## hash-function.h (module 'core'): uint64_t ns3::Hash::Implementation::GetHash64(char const * buffer, size_t const size) [member function]
21311c18584
<                    [param('char const *', 'buffer'), param('std::size_t const', 'size')], 
---
>                    [param('char const *', 'buffer'), param('size_t const', 'size')], 
21317c18590
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
21321c18594
<     ## hash-fnv.h (module 'core'): ns3::Hash::Function::Fnv1a::Fnv1a(ns3::Hash::Function::Fnv1a const & arg0) [constructor]
---
>     ## hash-fnv.h (module 'core'): ns3::Hash::Function::Fnv1a::Fnv1a(ns3::Hash::Function::Fnv1a const & arg0) [copy constructor]
21343c18616
<     ## hash-function.h (module 'core'): ns3::Hash::Function::Hash32::Hash32(ns3::Hash::Function::Hash32 const & arg0) [constructor]
---
>     ## hash-function.h (module 'core'): ns3::Hash::Function::Hash32::Hash32(ns3::Hash::Function::Hash32 const & arg0) [copy constructor]
21347c18620
<     ## hash-function.h (module 'core'): uint32_t ns3::Hash::Function::Hash32::GetHash32(char const * buffer, std::size_t const size) [member function]
---
>     ## hash-function.h (module 'core'): uint32_t ns3::Hash::Function::Hash32::GetHash32(char const * buffer, size_t const size) [member function]
21350c18623
<                    [param('char const *', 'buffer'), param('std::size_t const', 'size')], 
---
>                    [param('char const *', 'buffer'), param('size_t const', 'size')], 
21360c18633
<     ## hash-function.h (module 'core'): ns3::Hash::Function::Hash64::Hash64(ns3::Hash::Function::Hash64 const & arg0) [constructor]
---
>     ## hash-function.h (module 'core'): ns3::Hash::Function::Hash64::Hash64(ns3::Hash::Function::Hash64 const & arg0) [copy constructor]
21364c18637
<     ## hash-function.h (module 'core'): uint32_t ns3::Hash::Function::Hash64::GetHash32(char const * buffer, std::size_t const size) [member function]
---
>     ## hash-function.h (module 'core'): uint32_t ns3::Hash::Function::Hash64::GetHash32(char const * buffer, size_t const size) [member function]
21367c18640
<                    [param('char const *', 'buffer'), param('std::size_t const', 'size')], 
---
>                    [param('char const *', 'buffer'), param('size_t const', 'size')], 
21369c18642
<     ## hash-function.h (module 'core'): uint64_t ns3::Hash::Function::Hash64::GetHash64(char const * buffer, std::size_t const size) [member function]
---
>     ## hash-function.h (module 'core'): uint64_t ns3::Hash::Function::Hash64::GetHash64(char const * buffer, size_t const size) [member function]
21372c18645
<                    [param('char const *', 'buffer'), param('std::size_t const', 'size')], 
---
>                    [param('char const *', 'buffer'), param('size_t const', 'size')], 
21382c18655
<     ## hash-murmur3.h (module 'core'): ns3::Hash::Function::Murmur3::Murmur3(ns3::Hash::Function::Murmur3 const & arg0) [constructor]
---
>     ## hash-murmur3.h (module 'core'): ns3::Hash::Function::Murmur3::Murmur3(ns3::Hash::Function::Murmur3 const & arg0) [copy constructor]
21386c18659
<     ## hash-murmur3.h (module 'core'): uint32_t ns3::Hash::Function::Murmur3::GetHash32(char const * buffer, std::size_t const size) [member function]
---
>     ## hash-murmur3.h (module 'core'): uint32_t ns3::Hash::Function::Murmur3::GetHash32(char const * buffer, size_t const size) [member function]
21389c18662
<                    [param('char const *', 'buffer'), param('std::size_t const', 'size')], 
---
>                    [param('char const *', 'buffer'), param('size_t const', 'size')], 
21391c18664
<     ## hash-murmur3.h (module 'core'): uint64_t ns3::Hash::Function::Murmur3::GetHash64(char const * buffer, std::size_t const size) [member function]
---
>     ## hash-murmur3.h (module 'core'): uint64_t ns3::Hash::Function::Murmur3::GetHash64(char const * buffer, size_t const size) [member function]
21394c18667
<                    [param('char const *', 'buffer'), param('std::size_t const', 'size')], 
---
>                    [param('char const *', 'buffer'), param('size_t const', 'size')], 
21405,21408c18678,18681
<     register_functions_ns3_FatalImpl(module.add_cpp_namespace('FatalImpl'), root_module)
<     register_functions_ns3_Hash(module.add_cpp_namespace('Hash'), root_module)
<     register_functions_ns3_TracedValueCallback(module.add_cpp_namespace('TracedValueCallback'), root_module)
<     register_functions_ns3_internal(module.add_cpp_namespace('internal'), root_module)
---
>     register_functions_ns3_FatalImpl(module.get_submodule('FatalImpl'), root_module)
>     register_functions_ns3_Hash(module.get_submodule('Hash'), root_module)
>     register_functions_ns3_TracedValueCallback(module.get_submodule('TracedValueCallback'), root_module)
>     register_functions_ns3_internal(module.get_submodule('internal'), root_module)
21415c18688
<     register_functions_ns3_Hash_Function(module.add_cpp_namespace('Function'), root_module)
---
>     register_functions_ns3_Hash_Function(module.get_submodule('Function'), root_module)
