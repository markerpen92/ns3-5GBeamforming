diff ../../NS3-WiGig/src/point-to-point/examples/main-attribute-value.cc ../../ns-3-dev/src/point-to-point/examples/main-attribute-value.cc
41,42c41,42
< // set and get a value in the underlying system; namely, the maximum
< // size of the FIFO queue in the PointToPointNetDevice
---
> // set and get a value in the underlying system; namely, an unsigned
> // integer of the maximum number of packets in a queue
50,62c50,51
<   // Queues in ns-3 are objects that hold items (other objects) in 
<   // a queue structure.  The C++ implementation uses templates to
<   // allow queues to hold various types of items, but the most
<   // common is a pointer to a packet (Ptr<Packet>).
<   //
<   // The maximum queue size can either be enforced in bytes ('b') or
<   // packets ('p').  A special type called the ns3::QueueSize can
<   // hold queue size values in either unit (bytes or packets).  The
<   // DropTailQueue<Packet> class has a MaxSize attribute that can
<   // be set to a QueueSize.
< 
<   // By default, the MaxSize attribute has a value of 100 packets ('100p')
<   // (this default can be observed in the function DropTail<Item>::GetTypeId)
---
>   // By default, the MaxPackets attribute has a value of 100 packets
>   // (this default can be observed in the function DropTailQueue::GetTypeId)
65,66c54,55
<   // a string-based value or a QueueSizeValue value
<   Config::SetDefault ("ns3::DropTailQueue<Packet>::MaxSize", StringValue ("80p"));
---
>   // a string-based value or a UintegerValue value
>   Config::SetDefault ("ns3::DropTailQueue::MaxPackets", StringValue ("80"));
68c57
<   Config::SetDefault ("ns3::DropTailQueue<Packet>::MaxSize", QueueSizeValue (QueueSize (QueueSizeUnit::PACKETS, 80)));
---
>   Config::SetDefault ("ns3::DropTailQueue::MaxPackets", UintegerValue (80));
72,73c61,62
<   // For example, via "--ns3::DropTailQueue<Packet>::MaxSize=80p"
<   CommandLine cmd (__FILE__);
---
>   // For example, via "--ns3::DropTailQueue::MaxPackets=80"
>   CommandLine cmd;
75c64
<   cmd.AddValue ("maxSize", "ns3::DropTailQueue<Packet>::MaxSize");
---
>   cmd.AddValue ("maxPackets", "ns3::DropTailQueue::MaxPackets");
84c73
<   Ptr<Queue<Packet> > q = CreateObject<DropTailQueue<Packet> > ();
---
>   Ptr<Queue> q = CreateObject<DropTailQueue> ();
91c80
<   // Now, we can manipulate the MaxSize value of the already 
---
>   // Now, we can manipulate the MaxPackets value of the already 
107c96
<   Ptr<Queue<Packet> > txQueue = ptr.Get<Queue<Packet> > ();
---
>   Ptr<Queue> txQueue = ptr.Get<Queue> ();
110,111c99,100
<   // to a DropTailQueue
<   Ptr<DropTailQueue<Packet> > dtq = txQueue->GetObject <DropTailQueue<Packet> > ();
---
>   // to a DropTailQueue, where MaxPackets is a member
>   Ptr<DropTailQueue> dtq = txQueue->GetObject <DropTailQueue> ();
118,122c107,111
<   // Here, the attribute value is assigned to a QueueSizeValue, and
<   // the Get() method on this value produces the (unwrapped) QueueSize.
<   QueueSizeValue limit;
<   dtq->GetAttribute ("MaxSize", limit);
<   NS_LOG_INFO ("1.  dtq limit: " << limit.Get ());
---
>   // Here, the attribute value is assigned to a Uinteger, and
>   // the Get() method on this value produces the (unwrapped) uint32_t.
>   UintegerValue limit;
>   dtq->GetAttribute ("MaxPackets", limit);
>   NS_LOG_INFO ("1.  dtq limit: " << limit.Get () << " packets");
127,128c116,117
<   txQueue->GetAttribute ("MaxSize", limit);
<   NS_LOG_INFO ("2.  txQueue limit: " << limit.Get ());
---
>   txQueue->GetAttribute ("MaxPackets", limit);
>   NS_LOG_INFO ("2.  txQueue limit: " << limit.Get () << " packets");
130,136c119,122
<   // Now, let's set it to another value (60 packets).  Let's also make
<   // use of the StringValue shorthand notation to set the size by
<   // passing in a string (the string must be a positive integer suffixed
<   // by either the 'p' or 'b' character).
<   txQueue->SetAttribute ("MaxSize", StringValue ("60p"));
<   txQueue->GetAttribute ("MaxSize", limit);
<   NS_LOG_INFO ("3.  txQueue limit changed: " << limit.Get ());
---
>   // Now, let's set it to another value (60 packets)
>   txQueue->SetAttribute ("MaxPackets", UintegerValue (60));
>   txQueue->GetAttribute ("MaxPackets", limit);
>   NS_LOG_INFO ("3.  txQueue limit changed: " << limit.Get () << " packets");
145,146c131,132
<   Config::Set ("/NodeList/0/DeviceList/0/TxQueue/MaxSize", StringValue ("25p"));
<   txQueue->GetAttribute ("MaxSize", limit); 
---
>   Config::Set ("/NodeList/0/DeviceList/0/TxQueue/MaxPackets", UintegerValue (25));
>   txQueue->GetAttribute ("MaxPackets", limit); 
148c134
<                limit.Get ());
---
>                limit.Get () << " packets");
153,154c139,140
<   Config::Set ("/NodeList/*/DeviceList/*/TxQueue/MaxSize", StringValue ("15p"));
<   txQueue->GetAttribute ("MaxSize", limit); 
---
>   Config::Set ("/NodeList/*/DeviceList/*/TxQueue/MaxPackets", UintegerValue (15));
>   txQueue->GetAttribute ("MaxPackets", limit); 
156c142
<                limit.Get ());
---
>                limit.Get () << " packets");
