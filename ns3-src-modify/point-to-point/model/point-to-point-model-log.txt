diff ../../NS3-WiGig/src/point-to-point/model/point-to-point-channel.cc ../../ns-3-dev/src/point-to-point/model/point-to-point-channel.cc
88c88
<   Ptr<const Packet> p,
---
>   Ptr<Packet> p,
102c102
<                                   m_link[wire].m_dst, p->Copy ());
---
>                                   m_link[wire].m_dst, p);
109c109
< std::size_t
---
> uint32_t 
117c117
< PointToPointChannel::GetPointToPointDevice (std::size_t i) const
---
> PointToPointChannel::GetPointToPointDevice (uint32_t i) const
125c125
< PointToPointChannel::GetDevice (std::size_t i) const
---
> PointToPointChannel::GetDevice (uint32_t i) const
diff ../../NS3-WiGig/src/point-to-point/model/point-to-point-channel.h ../../ns-3-dev/src/point-to-point/model/point-to-point-channel.h
81c81
<   virtual bool TransmitStart (Ptr<const Packet> p, Ptr<PointToPointNetDevice> src, Time txTime);
---
>   virtual bool TransmitStart (Ptr<Packet> p, Ptr<PointToPointNetDevice> src, Time txTime);
87c87
<   virtual std::size_t GetNDevices (void) const;
---
>   virtual uint32_t GetNDevices (void) const;
94c94
<   Ptr<PointToPointNetDevice> GetPointToPointDevice (std::size_t i) const;
---
>   Ptr<PointToPointNetDevice> GetPointToPointDevice (uint32_t i) const;
101c101
<   virtual Ptr<NetDevice> GetDevice (std::size_t i) const;
---
>   virtual Ptr<NetDevice> GetDevice (uint32_t i) const;
150c150
<   static const std::size_t N_DEVICES = 2;
---
>   static const int N_DEVICES = 2;
153c153
<   std::size_t        m_nDevices; //!< Devices of this channel
---
>   int32_t       m_nDevices; //!< Devices of this channel
diff ../../NS3-WiGig/src/point-to-point/model/point-to-point-net-device.cc ../../ns-3-dev/src/point-to-point/model/point-to-point-net-device.cc
1d0
< 
29,39d27
< #include "ns3/srnc.h"
< #include "ns3/srnc-header.h"
< #include "ns3/srnc-tag.h"
< #include "ns3/tcp-option-ts.h"
< #include "ns3/ipv4-header.h"
< #include "ns3/packet.h"
< #include "../Header/parameter.h"
< // #include "/home/wise/MengHua/0414Auto/NC/parameter.h"
< 
< 
< 
43,50d30
< #include <algorithm>
< #include <iostream>
< #include <fstream>
< 
< // #define UserNum 6
< 
< using namespace ns3;
< using namespace std;
99c79
<                    MakePointerChecker<Queue<Packet> > ())
---
>                    MakePointerChecker<Queue> ())
138c118
<     // Trace sources at the "bottom" of the net device, where packets transition
---
>     // Trace souces at the "bottom" of the net device, where packets transition
229a210,226
> PointToPointNetDevice::NotifyNewAggregate (void)
> {
>   NS_LOG_FUNCTION (this);
>   if (m_queueInterface == 0)
>     {
>       Ptr<NetDeviceQueueInterface> ndqi = this->GetObject<NetDeviceQueueInterface> ();
>       //verify that it's a valid netdevice queue interface and that
>       //the netdevice queue interface was not set before
>       if (ndqi != 0)
>         {
>           m_queueInterface = ndqi;
>         }
>     }
>   NetDevice::NotifyNewAggregate ();
> }
> 
> void
237a235
>   m_queueInterface = 0;
304,305c302,309
<   Ptr<Packet> p = m_queue->Dequeue ();
<   if (p == 0)
---
>   Ptr<NetDeviceQueue> txq;
>   if (m_queueInterface)
>   {
>     txq = m_queueInterface->GetTxQueue (0);
>   }
> 
>   Ptr<QueueItem> item = m_queue->Dequeue ();
>   if (item == 0)
307a312,317
>       if (txq)
>       {
>         NS_LOG_DEBUG ("The device queue is being woken up (" << m_queue->GetNPackets () <<
>                       " packets and " << m_queue->GetNBytes () << " bytes inside)");
>         txq->Wake ();
>       }
312a323,326
>   // If the queue was stopped, start it again if there is room for another packet.
>   // Note that we cannot wake the upper layers because otherwise a packet is sent
>   // to the device while the machine state is busy, thus causing the assert in
>   // TransmitStart to fail.
313a328,340
>   if (txq && txq->IsStopped ())
>     {
>       if ((m_queue->GetMode () == Queue::QUEUE_MODE_PACKETS &&
>            m_queue->GetNPackets () < m_queue->GetMaxPackets ()) ||
>           (m_queue->GetMode () == Queue::QUEUE_MODE_BYTES &&
>            m_queue->GetNBytes () + m_mtu <= m_queue->GetMaxBytes ()))
>         {
>           NS_LOG_DEBUG ("The device queue is being started (" << m_queue->GetNPackets () <<
>                         " packets and " << m_queue->GetNBytes () << " bytes inside)");
>           txq->Start ();
>         }
>     }
>   Ptr<Packet> p = item->GetPacket ();
316a344,348
>   if (txq)
>     {
>       // Inform BQL
>       txq->NotifyTransmittedBytes (m_currentPkt->GetSize ());
>     }
338c370
< PointToPointNetDevice::SetQueue (Ptr<Queue<Packet> > q)
---
> PointToPointNetDevice::SetQueue (Ptr<Queue> q)
351,359d382
< SrncProcessor m_srncdec[10];
< std::vector<Ptr<Packet>> m_RecoveredBuffer[10];
< std::list<int> DecodeSuccesslist[10];
< std::list<int> DecodeFaillist[10];
< bool NC_enable = true;
< int de_list = 0;
< 
< uint32_t i;
< 
365,436d387
<   int LabelNumber = 0;
<   Ptr<Node> RxNowNode = GetNode();
<   int RxNowNodeID = RxNowNode->GetId();
<   int pktSize = packet->GetSize();
<   int userNode = 5+2*UserNum;
< 
<   
<   PppHeader ppHD;
<   Ipv4Header iHD;
<   TcpHeader tHD;
<   if ((RxNowNodeID >= userNode) && pktSize == 1474 && NC_enable)
<   {
<     // de_list = RxNowNodeID == 9 ? 0:1;
<     // std::cout << "RxNowNodeID = " << RxNowNodeID << "\n";
<       de_list = RxNowNodeID-userNode;
<       // std::cout << "de_list = " << de_list << "\n";
<       Ptr<Packet> temp = packet -> Copy();
<       Ptr<Packet> temp2 = packet -> Copy();
<       temp->RemoveHeader(ppHD);
<       temp->PeekHeader (iHD);
<       uint32_t m_RecvIncomingLabel = iHD.GetEncodedLabel();
<       // std::cout << "[Rx] IncomingLabel = " << m_RecvIncomingLabel << "," << iHD.GetPri() <<"\n";
<       temp->AddHeader(ppHD);
<       // decode成功的
<       if ( (std::find(DecodeSuccesslist[de_list].begin(), DecodeSuccesslist[de_list].end(), m_RecvIncomingLabel) != DecodeSuccesslist[de_list].end()) )
<       {
<         // std::cout << m_RecvIncomingLabel << " had decoded success, so discard\n";  
<         // m_srncdec[de_list].DiscardAllPacketWithLabel(m_RecvIncomingLabel);
<       }
<       //decode失敗的
<       // else if ( (std::find(DecodeFaillist[de_list].begin(), DecodeFaillist[de_list].end(), m_RecvIncomingLabel) != DecodeFaillist[de_list].end()) )
<       // {
<         // uint32_t maxValue = *max_element(DecodeSuccesslist[de_list].begin(), DecodeSuccesslist[de_list].end());
<         // std::cout << "maxValue = " << maxValue << "\n";
<         // if (m_RecvIncomingLabel  >  maxValue - Labelthreshold) // 太久以前的label 不要decode
<         // {
<           // m_srncdec[de_list].Enqueue(temp2);
<           // std::cout << m_RecvIncomingLabel << " had decoded fail \n";
<           // m_RecoveredBuffer[de_list] = m_srncdec[de_list].DecodeAllWithLabel(m_RecvIncomingLabel);
<           // m_srncdec[de_list].DiscardAllPacketWithLabel(m_RecvIncomingLabel);
<       //   }
<       // }
<       //沒decode過的
<       else
<       {
<         // std::cout << "de_list = " << de_list << "\n"; 
<         m_srncdec[de_list].Enqueue(temp2); 
<         uint32_t m_smallestUnprocessedLabel = m_srncdec[de_list].FindSmallestLabelInBuffer();  //find the smallest label
<         LabelNumber = m_srncdec[de_list].FindPacketNumberWithLabel(m_smallestUnprocessedLabel); // how many packet with the smallest label
<         // std::cout << "NC queue = " <<  m_srncdec[de_list].GetEnqueueBufferSize() << ", "<<de_list<< ", "<<Simulator::Now ().GetSeconds () << "\n";
<         // std::cout << "[Rx] LabelNumber = " << LabelNumber << ", minlabel = "  << m_smallestUnprocessedLabel << ", now label = "<<m_RecvIncomingLabel<<"\n";
<         int m_smallestLabelEncodeNum = m_srncdec[de_list].FindPacketEncodedNumberWithLabel(m_smallestUnprocessedLabel);   // the enccode number with the smallest label
<         if (LabelNumber >= m_smallestLabelEncodeNum )  
<         {
<           // std::cout <<" De_List =" << de_list << "\n";
<           m_RecoveredBuffer[de_list] = m_srncdec[de_list].DecodeAllWithLabel(m_smallestUnprocessedLabel);
<           m_srncdec[de_list].DiscardAllPacketWithLabel(m_smallestUnprocessedLabel);
<           DecodeSuccesslist[de_list].push_back(m_smallestUnprocessedLabel);
<           // if (de_list==0 && Simulator::Now ().GetSeconds ()  >2.95)
<           // {
<           //   std::cout << Simulator::Now ().GetSeconds ()  << ", " << m_smallestUnprocessedLabel << "\n";
<           // }
< 
<           // if (m_smallestUnprocessedLabel != 0 ){
<           //   ofstream fout;
<           //   fout.open( "0_decodeLabel.txt" ,ios::app);
<           //   fout << Simulator::Now ().GetSeconds ()  <<  " "  << m_smallestUnprocessedLabel << "\n";
<           //   fout.close();
<           // }
<         }
<       }//else
< 
437a389,406
>   if (m_receiveErrorModel && m_receiveErrorModel->IsCorrupt (packet) ) 
>     {
>       // 
>       // If we have an error model and it indicates that it is time to lose a
>       // corrupted packet, don't forward this packet up, let it go.
>       //
>       m_phyRxDropTrace (packet);
>     }
>   else 
>     {
>       // 
>       // Hit the trace hooks.  All of these hooks are in the same place in this 
>       // device because it is so simple, but this is not usually the case in
>       // more complicated devices.
>       //
>       m_snifferTrace (packet);
>       m_promiscSnifferTrace (packet);
>       m_phyRxEndTrace (packet);
439,495c408,412
< // Decode Rule
<       // uint32_t m_smallestUnprocessedLabel = m_srncdec[de_list].FindSmallestLabelInBuffer();
<       // LabelNumber = m_srncdec[de_list].FindPacketNumberWithLabel(m_smallestUnprocessedLabel);
<       // // std::cout << "[Rx] LabelNumber = " << LabelNumber << " minlabel = "  << m_smallestUnprocessedLabel << "now label = "<<m_RecvIncomingLabel<<"\n";
<       // int m_smallestLabelEncodeNum = m_srncdec[de_list].FindPacketEncodedNumberWithLabel(m_smallestUnprocessedLabel);
<       // // std::cout << "m_smallestLabelEncodeNum = " << m_smallestLabelEncodeNum << "\n";
<       // if (LabelNumber >= m_smallestLabelEncodeNum)  
<       // {
<       //   // std::cout <<" De_List =" << de_list << "\n";
<       //   m_RecoveredBuffer[de_list] = m_srncdec[de_list].DecodeAllWithLabel(m_smallestUnprocessedLabel);
<       //   m_srncdec[de_list].DiscardAllPacketWithLabel(m_smallestUnprocessedLabel);
<       //   DecodeSuccesslist[de_list].push_back(m_smallestUnprocessedLabel);
<       // }
<       // else if (m_RecvIncomingLabel  > m_smallestUnprocessedLabel + Labelthreshold)  // 最小Label未滿3個且收到超過Labelthreshold的封包了,因此提前decode
<       // {
<       //   std::cout<< Simulator::Now().GetSeconds() <<" Got Labelthreshold, Decode Immediately! Label= " << m_smallestUnprocessedLabel << "\n";
<       //   m_RecoveredBuffer[de_list] = m_srncdec[de_list].DecodeAllWithLabel(m_smallestUnprocessedLabel);
<       //   m_srncdec[de_list].DiscardAllPacketWithLabel(m_smallestUnprocessedLabel);
<       //   DecodeFaillist[de_list].push_back(m_smallestUnprocessedLabel);
<       // }
<       if (m_RecoveredBuffer[de_list].size() != 0 )
<       {
<         for ( i = 0; i < m_RecoveredBuffer[de_list].size(); i++)
<         {
<           Ptr<Packet> packet = m_RecoveredBuffer[de_list].at(i);
<           if (m_receiveErrorModel && m_receiveErrorModel->IsCorrupt (packet) ) 
<           {
<             // 
<             // If we have an error model and it indicates that it is time to lose a
<             // corrupted packet, don't forward this packet up, let it go.
<             //
<             m_phyRxDropTrace (packet);
<           }
<           else 
<           {
<             // 
<             // Hit the trace hooks.  All of these hooks are in the same place in this 
<             // device because it is so simple, but this is not usually the case in
<             // more complicated devices.
<             //
<             m_snifferTrace (packet);
<             m_promiscSnifferTrace (packet);
<             m_phyRxEndTrace (packet);
< 
<             //
<             // Trace sinks will expect complete packets, not packets without some of the
<             // headers.
<             //
<             Ptr<Packet> originalPacket = packet->Copy ();
< 
<             //
<             // Strip off the point-to-point protocol header and forward this packet
<             // up the protocol stack.  Since this is a simple point-to-point link,
<             // there is no difference in what the promisc callback sees and what the
<             // normal receive callback sees.
<             //
<             ProcessHeader (packet, protocol);
---
>       //
>       // Trace sinks will expect complete packets, not packets without some of the
>       // headers.
>       //
>       Ptr<Packet> originalPacket = packet->Copy ();
497,501c414,420
<             if (!m_promiscCallback.IsNull ())
<             {
<               m_macPromiscRxTrace (originalPacket);
<               m_promiscCallback (this, packet, protocol, GetRemote (), GetAddress (), NetDevice::PACKET_HOST);
<             }
---
>       //
>       // Strip off the point-to-point protocol header and forward this packet
>       // up the protocol stack.  Since this is a simple point-to-point link,
>       // there is no difference in what the promisc callback sees and what the
>       // normal receive callback sees.
>       //
>       ProcessHeader (packet, protocol);
503,505c422,425
<             m_macRxTrace (originalPacket);
<             m_rxCallback (this, packet, protocol, GetRemote ());
<           }
---
>       if (!m_promiscCallback.IsNull ())
>         {
>           m_macPromiscRxTrace (originalPacket);
>           m_promiscCallback (this, packet, protocol, GetRemote (), GetAddress (), NetDevice::PACKET_HOST);
507,508d426
<         m_RecoveredBuffer[de_list].clear();
<       }
510,555c428,430
<   }// nodeID
<   else 
<   {
<     if (m_receiveErrorModel && m_receiveErrorModel->IsCorrupt (packet) ) 
<       {
<         // 
<         // If we have an error model and it indicates that it is time to lose a
<         // corrupted packet, don't forward this packet up, let it go.
<         //
<         m_phyRxDropTrace (packet);
<       }
<     else 
<       {
<         // 
<         // Hit the trace hooks.  All of these hooks are in the same place in this 
<         // device because it is so simple, but this is not usually the case in
<         // more complicated devices.
<         //
<         m_snifferTrace (packet);
<         m_promiscSnifferTrace (packet);
<         m_phyRxEndTrace (packet);
< 
<         //
<         // Trace sinks will expect complete packets, not packets without some of the
<         // headers.
<         //
<         Ptr<Packet> originalPacket = packet->Copy ();
< 
<         //
<         // Strip off the point-to-point protocol header and forward this packet
<         // up the protocol stack.  Since this is a simple point-to-point link,
<         // there is no difference in what the promisc callback sees and what the
<         // normal receive callback sees.
<         //
<         ProcessHeader (packet, protocol);
< 
<         if (!m_promiscCallback.IsNull ())
<           {
<             m_macPromiscRxTrace (originalPacket);
<             m_promiscCallback (this, packet, protocol, GetRemote (), GetAddress (), NetDevice::PACKET_HOST);
<           }
< 
<         m_macRxTrace (originalPacket);
<         m_rxCallback (this, packet, protocol, GetRemote ());
<       }
<   }
---
>       m_macRxTrace (originalPacket);
>       m_rxCallback (this, packet, protocol, GetRemote ());
>     }
558c433
< Ptr<Queue<Packet> >
---
> Ptr<Queue>
683,739d557
< // 
< SrncProcessor m_srncprocessor[10];
< std::list<Ptr<Packet>> coded_buffer[10];
< std::list<Ptr<Packet>> redud_buffer[10];
< double encodetime = 1.401; // time to encode
< int m_LabelK[10] = {0};
< uint16_t m_TimeVal=100; //us
< bool b[10] = {0};
< // uint32_t EncodeMaxNum = 1;  // 1 is PD
< // bool NC_enable = false;
< // bool NC_enable = false;
< Ipv4Address address_list1[10];
< std::vector <uint32_t> RecvTcpSeqVector[10];
< std::vector <uint32_t> CodingTcpSeqVector[10]; //sequence number
< std::vector <uint32_t> RecvTcpTsVector[10];
< std::vector <uint32_t> CodingTcpTsVector[10];//time stamp
< std::vector <uint32_t> RecvTcpEhVector[10];
< std::vector <uint32_t> CodingTcpEhVector[10];//time stamp echo
< 
< 
< void
< PointToPointNetDevice::NCpreprocess(Ptr<Packet> packet, int list)
< {
<     NS_LOG_FUNCTION (this);
<     Ptr<Packet> temp = packet -> Copy();
<     Ptr<Packet> p = packet -> Copy();
< 
<     m_srncprocessor[list].Enqueue(temp);
<     // std::cout << "list = " << list << " is Encode" << "\n";
< 
<   // 如果準備encode的數量超過預設值則直接encode,預防一次encode大量封包
<     if (m_srncprocessor[list].GetEnqueueBufferSize() >= EncodeMaxNum)
<     {
<       Simulator::ScheduleNow (&PointToPointNetDevice::UpdateTimeInterval, this, list);
<     }
<   // 由時間區間觸發的encode(正常都應該走這)
<     if(coded_buffer[list].size() == 0 && b[list] == false)  //第一次會進來
<     {
<       Simulator::Schedule (MicroSeconds (m_TimeVal),&PointToPointNetDevice::StartTimeInterval, this, list);
<       b[list] = true;
<     }
<     //----------------------------------------------------------------------
<     //Get TCP sequence number. (skip the TCP control message)
<     PppHeader ppHD;
<     Ipv4Header ipv4header;
<     TcpHeader tcpheader;
<     p->RemoveHeader (ppHD);
<     p->RemoveHeader (ipv4header);
<     p->PeekHeader (tcpheader);
<     SequenceNumber32 sequencenumber32;
<     sequencenumber32 = tcpheader.GetSequenceNumber();
<     RecvTcpSeqVector[list].push_back((uint32_t)sequencenumber32.GetValue ());
<     p->AddHeader (ipv4header);
<     p->AddHeader (ppHD);
< }
< 
< 
745a564,571
>   Ptr<NetDeviceQueue> txq;
>   if (m_queueInterface)
>   {
>     txq = m_queueInterface->GetTxQueue (0);
>   }
> 
>   NS_ASSERT_MSG (!txq || !txq->IsStopped (), "Send should not be called when the device is stopped");
> 
764,885c590
<     AddHeader (packet, protocolNumber);
<     m_macTxTrace (packet);
<   //
<   // when packets go into the Gatway node(Node ID = 1),start Encode.
<   //
<   
<   Ptr<Node> NowNode = GetNode();
<   Ptr<Packet> NCpacket;
<   int NowNodeID = NowNode->GetId();
<   // std::cout << "NowNodeID = " << NowNodeID << "\n";
<   double time =  Simulator::Now().GetSeconds();
< 
<   // if (NowNodeID == 5 && packet -> GetSize() > 1454 && NC_enable){
<   //     ofstream fout;
<   //     fout.open( "STA1.txt" ,ios::app);
<   //     fout << Simulator::Now ().GetSeconds ()  <<  "    1\n";
<   //     fout.close();
< 
<   // }
<   // else if (NowNodeID == 6 && packet -> GetSize() > 1454 && NC_enable){
<   //     ofstream fout;
<   //     fout.open( "STA2.txt" ,ios::app);
<   //     fout << Simulator::Now ().GetSeconds ()  <<  "    2\n";
<   //     fout.close();
<   // }
< 
< 
<   if (time > encodetime && NowNodeID == 1 && packet -> GetSize() == 1454 && NC_enable) //需要encode的封包(會用其他Function傳出去),
<   {                                                                         //NowNodeID == 0的原因是從0到1的途中encode
<     Ptr<Packet> temp = packet -> Copy();
<     Ptr<Packet> p = packet -> Copy();
<     PppHeader ppHD;
<     Ipv4Header ipv4header;
<     TcpHeader tcpheader;
<     p->RemoveHeader (ppHD);
<     p->PeekHeader (ipv4header);
<     p->AddHeader (ppHD);
<     // std::cout << ipv4header.GetDestination();
< 
<       // std::cout << address_list1;
<     for (int list = 0; list < 10; list++)
<     {
<       if (address_list1[list] == ipv4header.GetDestination())
<       {
<         // std::cout << "the same" << ipv4header.GetDestination() << "\n";
<         // std::cout << "Choose = " << list << "\n";
<         NCpreprocess(packet,list);
<         break;
<       }
<       else if (address_list1[list] != ipv4header.GetDestination() && address_list1[list] == "102.102.102.102")  
<       {
<         address_list1[list] = ipv4header.GetDestination();
<         NCpreprocess(packet,list);
<         break;
<       }
<     }
< 
< 
< 
< 
< 
< 
<   //   m_srncprocessor.Enqueue(temp);
<   //   // std::cout << "NowNodeID = " << NowNodeID << "\n";
< 
<   // // 如果準備encode的數量超過預設值則直接encode,預防一次encode大量封包
<   //   if (m_srncprocessor.GetEnqueueBufferSize() >= EncodeMaxNum)
<   //   {
<   //     Simulator::ScheduleNow (&PointToPointNetDevice::UpdateTimeInterval, this);
<   //   }
<   // // 由時間區間觸發的encode(正常都應該走這)
<   //   if(coded_buffer.size() == 0 && b == false)  //第一次會進來
<   //   {
<   //     Simulator::Schedule (MicroSeconds (m_TimeVal),&PointToPointNetDevice::StartTimeInterval, this);
<   //     b = true;
<   //   }
< 
<     
<     //----------------------------------------------------------------------
<     //Get TCP sequence number. (skip the TCP control message)
<     // PppHeader ppHD;
<     // Ipv4Header ipv4header;
<     // TcpHeader tcpheader;
<     // p->RemoveHeader (ppHD);
<     // p->RemoveHeader (ipv4header);
<     // p->PeekHeader (tcpheader);
<     // SequenceNumber32 sequencenumber32;
<     // sequencenumber32 = tcpheader.GetSequenceNumber();
<     // RecvTcpSeqVector.push_back((uint32_t)sequencenumber32.GetValue ());
<     // p->AddHeader (ipv4header);
<     // p->AddHeader (ppHD);
<     //----------------------------------------------------------------------
<     return true;
<   }
<   else  // 不需要Encode的封包
<   {
<     //
<     // We should enqueue and dequeue the packet to hit the tracing hooks.
<     //
<     if (m_queue->Enqueue (packet))
<       {
<         //
<         // If the channel is ready for transition we send the packet right now
<         // 
<         if (m_txMachineState == READY)
<           {
<             packet = m_queue->Dequeue ();
<             m_snifferTrace (packet);
<             m_promiscSnifferTrace (packet);
<             bool ret = TransmitStart (packet);
<             return ret;
<           }
<         return true;
<       }
<   }
<  
< 
<   // Enqueue may fail (overflow)
< 
<   m_macTxDropTrace (packet);
<   return false;
< }
---
>   AddHeader (packet, protocolNumber);
887,928c592
< void
< PointToPointNetDevice::UpdateTimeInterval(int list)
< {
<   // std::cout << "update time = " << Simulator::Now().GetSeconds() << "\n" ;
<   NS_LOG_FUNCTION (this);
<   Ptr<Packet> NCpacket;
<   Ptr<Packet> NCpacket2;
<   UpdateLabelK(list);//labelk++
<   m_srncprocessor[list].SetStoreLabel(m_LabelK[list]);//encoded label
< 
<   coded_buffer[list].clear();
<   redud_buffer[list].clear();
< 
<   CodingTcpSeqVector[list].clear();
<   CodingTcpTsVector[list].clear();
<   CodingTcpEhVector[list].clear();
<   CodingTcpSeqVector[list] = RecvTcpSeqVector[list];
<   CodingTcpTsVector[list] = RecvTcpTsVector[list];
<   CodingTcpEhVector[list] = RecvTcpEhVector[list];
<   RecvTcpSeqVector[list].clear();
<   RecvTcpTsVector[list].clear();
<   RecvTcpEhVector[list].clear();
< 
<   //NC process
<   coded_buffer[list] = m_srncprocessor[list].NetworkCoding(list);
<   uint32_t HighPrioCount = coded_buffer[list].size();
<   // std::cout << "Now label = " << m_LabelK << "\n";
<   redud_buffer[list] = m_srncprocessor[list].NetworkCodingRedundancy(HighPrioCount,list);//低優先權封包要盡量利用可用頻寬傳送
<   // redud_buffer[list] = m_srncprocessor[list].NetworkCodingRedundancy(0);
<   while (coded_buffer[list].size() > 0)
<   {
<       NCpacket = coded_buffer[list].front();
<       DoTransmitNcPacket(NCpacket,list);
<       coded_buffer[list].pop_front();
<   }
< 
<   while (redud_buffer[list].size() > 0)
<   {
<       NCpacket2 = redud_buffer[list].front();
<       DoTransmitNcPacket(NCpacket2,list);
<       redud_buffer[list].pop_front();
<   }
---
>   m_macTxTrace (packet);
930,999c594,597
<   m_srncprocessor[list].ClearEnqueueBuffer();
< 
<   // Simulator::Schedule (MicroSeconds (m_TimeVal), &PointToPointNetDevice::UpdateTimeInterval, this);
< }
< 
< void
< PointToPointNetDevice::StartTimeInterval(int list)
< {
<   NS_LOG_FUNCTION (this);
<   // 定時呼叫自己,並執行encode動作
<   Simulator::ScheduleNow (&PointToPointNetDevice::UpdateTimeInterval,this, list);
<   Simulator::Schedule (MicroSeconds (m_TimeVal),&PointToPointNetDevice::StartTimeInterval,this, list);
< }
< 
< void
< PointToPointNetDevice::SetTimeInterval(uint16_t TimeVal)
< {
<   NS_LOG_FUNCTION (this);
<   m_TimeVal = TimeVal;
< }
< 
< uint16_t
< PointToPointNetDevice::GetTimeInterval(void) const
< {
<   NS_LOG_FUNCTION (this);
<   return m_TimeVal;
< }
< void
< PointToPointNetDevice::UpdateLabelK(int list)
< {
<   m_LabelK[list]++;
<   // std::cout << "time = " << Simulator::Now().GetSeconds() << "Label = " << m_LabelK << "\n";
< }
< 
< void
< PointToPointNetDevice::SetLabelK(uint32_t labelk,int list)
< {
<   NS_LOG_FUNCTION (this);
<   m_LabelK[list] = labelk;
< }
< 
< uint32_t
< PointToPointNetDevice::GetLabelK(int list) const
< {
<   //NS_LOG_FUNCTION (this);
<   return m_LabelK[list];
< }
< 
< 
< void 
< PointToPointNetDevice::DoTransmitNcPacket(Ptr<Packet> NcPacket,int list)
< {
<   //Add tag success
<   SrncTag srncTag;
<   // SrncHeader srncHeader;
<   PppHeader ppHD;
<   Ipv4Header iHD;
<   NcPacket -> RemoveHeader(ppHD);
<   NcPacket->PeekHeader(iHD);
<   uint8_t EncodedNumberTmp = iHD.GetEncodedPacketNumber();
<   srncTag.SetUseUdp(0);
<   srncTag.SetEncodedPacketNumber(EncodedNumberTmp);
<   srncTag.SetTcpSeqVector(CodingTcpSeqVector[list]);
<   // srncTag.SetTcpTsVector(CodingTcpTsVector);
<   // srncTag.SetTcpEhVector(CodingTcpEhVector);
<   NcPacket -> AddHeader(ppHD);
<   NcPacket -> AddByteTag(srncTag); 
< 
<   //傳送封包
<   if (m_queue->Enqueue (NcPacket))
---
>   //
>   // We should enqueue and dequeue the packet to hit the tracing hooks.
>   //
>   if (m_queue->Enqueue (Create<QueueItem> (packet)))
1000a599,603
>       // Inform BQL
>       if (txq)
>         {
>           txq->NotifyQueuedBytes (packet->GetSize ());
>         }
1006,1009c609,647
<           NcPacket = m_queue->Dequeue ();
<           m_snifferTrace (NcPacket);
<           m_promiscSnifferTrace (NcPacket);
<           TransmitStart (NcPacket);
---
>           packet = m_queue->Dequeue ()->GetPacket ();
>           // We have enqueued a packet and dequeued a (possibly different) packet. We
>           // need to check if there is still room for another packet only if the queue
>           // is in byte mode (the enqueued packet might be larger than the dequeued
>           // packet, thus leaving no room for another packet)
>           if (txq)
>             {
>               if (m_queue->GetMode () == Queue::QUEUE_MODE_BYTES &&
>                   m_queue->GetNBytes () + m_mtu > m_queue->GetMaxBytes ())
>                 {
>                   NS_LOG_DEBUG ("The device queue is being stopped (" << m_queue->GetNPackets () <<
>                                 " packets and " << m_queue->GetNBytes () << " bytes inside)");
>                   txq->Stop ();
>                 }
>             }
>           m_snifferTrace (packet);
>           m_promiscSnifferTrace (packet);
>           bool ret = TransmitStart (packet);
>           if (txq)
>             {
>               // Inform BQL
>               txq->NotifyTransmittedBytes (m_currentPkt->GetSize ());
>             }
>           return ret;
>         }
>       // We have enqueued a packet but we have not dequeued any packet. Thus, we
>       // need to check whether the queue is able to store another packet. If not,
>       // we stop the queue
>       if (txq)
>         {
>           if ((m_queue->GetMode () == Queue::QUEUE_MODE_PACKETS &&
>                m_queue->GetNPackets () >= m_queue->GetMaxPackets ()) ||
>               (m_queue->GetMode () == Queue::QUEUE_MODE_BYTES &&
>                m_queue->GetNBytes () + m_mtu > m_queue->GetMaxBytes ()))
>             {
>               NS_LOG_DEBUG ("The device queue is being stopped (" << m_queue->GetNPackets () <<
>                             " packets and " << m_queue->GetNBytes () << " bytes inside)");
>               txq->Stop ();
>             }
1010a649
>       return true;
1012d650
<       // Enqueue may fail (overflow)
1014c652,662
<   m_macTxDropTrace (NcPacket);
---
>   // Enqueue may fail (overflow). This should not happen if the traffic control
>   // module has been installed. Anyway, stop the tx queue, so that the upper layers
>   // do not send packets until there is room in the queue again.
>   m_macTxDropTrace (packet);
>   if (txq)
>   {
>     NS_LOG_ERROR ("BUG! Device queue full when the queue is not stopped! (" << m_queue->GetNPackets () <<
>                   " packets and " << m_queue->GetNBytes () << " bytes inside)");
>     txq->Stop ();
>   }
>   return false;
1017,1020d664
< 
< 
< 
< 
1082c726
<   for (std::size_t i = 0; i < m_channel->GetNDevices (); ++i)
---
>   for (uint32_t i = 0; i < m_channel->GetNDevices (); ++i)
diff ../../NS3-WiGig/src/point-to-point/model/point-to-point-net-device.h ../../ns-3-dev/src/point-to-point/model/point-to-point-net-device.h
23,25d22
< #include <fstream>
< #include <iostream>
< 
39c36
< template <typename Item> class Queue;
---
> class Queue;
41c38
< class ErrorModel; 
---
> class ErrorModel;
112c109
<    * \return true if the operation was successful (always true actually)
---
>    * \return true if the operation was successfull (always true actually)
124c121
<   void SetQueue (Ptr<Queue<Packet> > queue);
---
>   void SetQueue (Ptr<Queue> queue);
131c128
<   Ptr<Queue<Packet> > GetQueue (void) const;
---
>   Ptr<Queue> GetQueue (void) const;
203a201,202
>   virtual void NotifyNewAggregate (void);
> 
291,341d289
< 
< 
<   void StartTimeInterval(int list);
<   /**
<    * Update TimeInterval
<    */
< 
<   void UpdateTimeInterval(int list);
< 
<   /**
<    * Set TimeInterval
<    */
< 
<   void SetTimeInterval(uint16_t TimeVal);
< 
<   void NCpreprocess(Ptr<Packet> packet, int list);
< 
<   /**
<    * Get TimeInterval
<    */
< 
<   uint16_t GetTimeInterval(void) const;
< 
<   /**
<    * Update LabelK
<    */
<   void UpdateLabelK(int list);
< 
<   /**
<    * Set LabelK
<    */
< 
<   void SetLabelK(uint32_t labelk,int list);
< 
<   /**
<    * Get LabelK
<    */
< 
<   uint32_t GetLabelK(int list) const;
< 
<   /**
<    * Trigger Clock
<    */
< 
<   /**
<    * Transmit NC Packet 
<    */
< 
<   void DoTransmitNcPacket(Ptr<Packet> NcPacket,int list);
< 
< 
376c324
<   Ptr<Queue<Packet> > m_queue;
---
>   Ptr<Queue> m_queue;
491a440
>   Ptr<NetDeviceQueueInterface> m_queueInterface;   //!< NetDevice queue interface
527,539d475
< 
<   //std::vector <uint32_t> RecvTcpSeqVector;
< 
<   //std::vector <uint32_t> CodingTcpSeqVector; //sequence number
< 
<   //std::vector <uint32_t> RecvTcpTsVector;
< 
<   //std::vector <uint32_t> CodingTcpTsVector;//time stamp
< 
<   //std::vector <uint32_t> RecvTcpEhVector;
< 
<   //std::vector <uint32_t> CodingTcpEhVector;//time stamp echo
< 
diff ../../NS3-WiGig/src/point-to-point/model/point-to-point-remote-channel.cc ../../ns-3-dev/src/point-to-point/model/point-to-point-remote-channel.cc
58c58
<   Ptr<const Packet> p,
---
>   Ptr<Packet> p,
73c73
<   MpiInterface::SendPacket (p->Copy (), rxTime, dst->GetNode ()->GetId (), dst->GetIfIndex ());
---
>   MpiInterface::SendPacket (p, rxTime, dst->GetNode ()->GetId (), dst->GetIfIndex ());
diff ../../NS3-WiGig/src/point-to-point/model/point-to-point-remote-channel.h ../../ns-3-dev/src/point-to-point/model/point-to-point-remote-channel.h
69c69
<   virtual bool TransmitStart (Ptr<const Packet> p, Ptr<PointToPointNetDevice> src,
---
>   virtual bool TransmitStart (Ptr<Packet> p, Ptr<PointToPointNetDevice> src,
