diff ../../NS3-WiGig/src/wifi/test/80211b.c ../../ns-3-dev/src/wifi/test/80211b.c
23c23
<  * G. Pei and Tom Henderson, "Validation of ns-3 802.11b PHY model",
---
>  * G. Pei and Tom Henderson, "Validation of ns-3 802.11b PHY model", 
25c25
<  *
---
>  * 
27c27
<  * the GNU Scientific Library (gsl).  To compile:
---
>  * the GNU Scientific Library (gsl).  To compile:  
31c31
<  *   ./80211b > 80211b.txt
---
>  *   ./80211b > 80211b.txt 
36a37,39
> #include "math.h"
> #include "stdlib.h"
> #include "stdio.h"
41d43
< 
47,58d48
< /**
<  * \ingroup wifi
<  * \defgroup wifi-test wifi module tests
<  */
< 
< 
< /**
<  * \ingroup wifi-test
<  * \ingroup tests
<  *
<  * \brief fn_parameter_t structure
<  */
61,62c51,52
<   double beta; ///< beta
<   double n; ///< n
---
>   double beta;
>   double n;
214,216c204,206
< //double noise = 1.552058;  // (dB) this noise figure value corresponds to
<   // -99 dBm noise floor reported in CMU paper
<   double noise = 7;  // (dB) this noise figure value corresponds to the
---
> //double noise = 1.552058;  // (dB) this noise figure value corresponds to 
>                             // -99 dBm noise floor reported in CMU paper
>   double noise = 7;  // (dB) this noise figure value corresponds to the 
Only in ../../ns-3-dev/src/wifi/test: 80211b.plt
diff ../../NS3-WiGig/src/wifi/test/block-ack-test-suite.cc ../../ns-3-dev/src/wifi/test/block-ack-test-suite.cc
22c22
< #include "ns3/string.h"
---
> #include "ns3/log.h"
25,35c25
< #include "ns3/packet.h"
< #include "ns3/wifi-net-device.h"
< #include "ns3/ap-wifi-mac.h"
< #include "ns3/wifi-mac-header.h"
< #include "ns3/mobility-helper.h"
< #include "ns3/yans-wifi-helper.h"
< #include "ns3/packet-socket-server.h"
< #include "ns3/packet-socket-client.h"
< #include "ns3/packet-socket-helper.h"
< #include "ns3/config.h"
< #include "ns3/pointer.h"
---
> #include <list>
38a29,30
> NS_LOG_COMPONENT_DEFINE ("BlockAckTest");
> 
40,44d31
<  * \ingroup wifi-test
<  * \ingroup tests
<  *
<  * \brief Packet Buffering Case A
<  *
83c70
<   std::list<uint16_t> m_expectedBuffer; ///< expected test buffer
---
>   std::list<uint16_t> m_expectedBuffer;
144,150c131
< /**
<  * \ingroup wifi-test
<  * \ingroup tests
<  *
<  * \brief Packet Buffering Case B
<  *
<  * ----- = old packets
---
> /* ----- = old packets
180c161
<   std::list<uint16_t> m_expectedBuffer; ///< expected test buffer
---
>   std::list<uint16_t> m_expectedBuffer;
254,547d234
< /**
<  * \ingroup wifi-test
<  * \ingroup tests
<  *
<  * \brief Test for the originator block ack window
<  */
< class OriginatorBlockAckWindowTest : public TestCase
< {
< public:
<   OriginatorBlockAckWindowTest ();
< private:
<   virtual void DoRun ();
< };
< 
< OriginatorBlockAckWindowTest::OriginatorBlockAckWindowTest ()
<   : TestCase ("Check the correctness of the originator block ack window")
< {
< }
< 
< void
< OriginatorBlockAckWindowTest::DoRun (void)
< {
<   uint16_t winSize = 16;
<   uint16_t startingSeq = 4090;
< 
<   OriginatorBlockAckAgreement agreement (Mac48Address ("00:00:00:00:00:01"), 0);
<   agreement.SetBufferSize (winSize);
<   agreement.SetStartingSequence (startingSeq);
<   agreement.InitTxWindow ();
< 
<   NS_TEST_EXPECT_MSG_EQ (agreement.m_txWindow.GetWinSize (), winSize, "Incorrect window size");
<   NS_TEST_EXPECT_MSG_EQ (agreement.m_txWindow.GetWinStart (), startingSeq, "Incorrect winStart");
<   // check that all the elements in the window are cleared
<   for (uint16_t i = 0; i < winSize; i++)
<     {
<       NS_TEST_EXPECT_MSG_EQ (agreement.m_txWindow.At (i), false, "Not all flags are cleared after initialization");
<     }
< 
<   // Notify the acknowledgment of 5 packets
<   WifiMacHeader hdr;
<   hdr.SetType (WIFI_MAC_QOSDATA);
<   Ptr<WifiMacQueueItem> mpdu = Create<WifiMacQueueItem> (Create<Packet> (), hdr);
<   uint16_t seqNumber = startingSeq;
<   mpdu->GetHeader ().SetSequenceNumber (seqNumber);
<   agreement.NotifyAckedMpdu (mpdu);
< 
<   mpdu->GetHeader ().SetSequenceNumber (++seqNumber %= SEQNO_SPACE_SIZE);
<   agreement.NotifyAckedMpdu (mpdu);
< 
<   mpdu->GetHeader ().SetSequenceNumber (++seqNumber %= SEQNO_SPACE_SIZE);
<   agreement.NotifyAckedMpdu (mpdu);
< 
<   mpdu->GetHeader ().SetSequenceNumber (++seqNumber %= SEQNO_SPACE_SIZE);
<   agreement.NotifyAckedMpdu (mpdu);
< 
<   mpdu->GetHeader ().SetSequenceNumber (++seqNumber %= SEQNO_SPACE_SIZE);
<   agreement.NotifyAckedMpdu (mpdu);
< 
<   // the current window must look like this:
<   //
<   // |0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|
<   //            ^
<   //            |
<   //           HEAD
< 
<   startingSeq = (seqNumber + 1) % SEQNO_SPACE_SIZE;
<   NS_TEST_EXPECT_MSG_EQ (agreement.GetStartingSequence (), startingSeq, "Incorrect starting sequence after 5 acknowledgments");
<   for (uint16_t i = 0; i < winSize; i++)
<     {
<       NS_TEST_EXPECT_MSG_EQ (agreement.m_txWindow.At (i), false, "Not all flags are cleared after 5 acknowledgments");
<     }
< 
<   // the next MPDU is not acknowledged, hence the window is blocked while the
<   // subsequent 4 MPDUs are acknowledged
<   ++seqNumber %= SEQNO_SPACE_SIZE;
<   mpdu->GetHeader ().SetSequenceNumber (++seqNumber %= SEQNO_SPACE_SIZE);
<   agreement.NotifyAckedMpdu (mpdu);
< 
<   mpdu->GetHeader ().SetSequenceNumber (++seqNumber %= SEQNO_SPACE_SIZE);
<   agreement.NotifyAckedMpdu (mpdu);
< 
<   mpdu->GetHeader ().SetSequenceNumber (++seqNumber %= SEQNO_SPACE_SIZE);
<   agreement.NotifyAckedMpdu (mpdu);
< 
<   mpdu->GetHeader ().SetSequenceNumber (++seqNumber %= SEQNO_SPACE_SIZE);
<   agreement.NotifyAckedMpdu (mpdu);
< 
<   // the current window must look like this:
<   //
<   // |0|0|0|0|0|0|1|1|1|1|0|0|0|0|0|0|
<   //            ^
<   //            |
<   //           HEAD
< 
<   NS_TEST_EXPECT_MSG_EQ (agreement.GetStartingSequence (), startingSeq, "Incorrect starting sequence after 1 unacknowledged MPDU");
<   NS_TEST_EXPECT_MSG_EQ (agreement.m_txWindow.At (0), false, "Incorrect flag after 1 unacknowledged MPDU");
<   NS_TEST_EXPECT_MSG_EQ (agreement.m_txWindow.At (1), true, "Incorrect flag after 1 unacknowledged MPDU");
<   NS_TEST_EXPECT_MSG_EQ (agreement.m_txWindow.At (2), true, "Incorrect flag after 1 unacknowledged MPDU");
<   NS_TEST_EXPECT_MSG_EQ (agreement.m_txWindow.At (3), true, "Incorrect flag after 1 unacknowledged MPDU");
<   NS_TEST_EXPECT_MSG_EQ (agreement.m_txWindow.At (4), true, "Incorrect flag after 1 unacknowledged MPDU");
<   for (uint16_t i = 5; i < winSize; i++)
<     {
<       NS_TEST_EXPECT_MSG_EQ (agreement.m_txWindow.At (i), false, "Incorrect flag after 1 unacknowledged MPDU");
<     }
< 
<   // the missing MPDU is now acknowledged; the window moves forward and the starting
<   // sequence number is the one of the first unacknowledged MPDU
<   mpdu->GetHeader ().SetSequenceNumber (startingSeq);
<   agreement.NotifyAckedMpdu (mpdu);
< 
<   // the current window must look like this:
<   //
<   // |0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|
<   //                      ^
<   //                      |
<   //                     HEAD
< 
<   startingSeq = (seqNumber + 1) % SEQNO_SPACE_SIZE;
<   NS_TEST_EXPECT_MSG_EQ (agreement.GetStartingSequence (), startingSeq, "Incorrect starting sequence after acknowledgment of missing MPDU");
<   for (uint16_t i = 0; i < winSize; i++)
<     {
<       NS_TEST_EXPECT_MSG_EQ (agreement.m_txWindow.At (i), false, "Not all flags are cleared after acknowledgment of missing MPDU");
<     }
< 
<   // Now, create a hole of 3 MPDUs before 4 acknowledged MPDUs, another hole of 2 MPDUs before 3 acknowledged MPDUs
<   seqNumber = (seqNumber + 4) % SEQNO_SPACE_SIZE;
<   mpdu->GetHeader ().SetSequenceNumber (seqNumber);
<   agreement.NotifyAckedMpdu (mpdu);
< 
<   mpdu->GetHeader ().SetSequenceNumber (++seqNumber %= SEQNO_SPACE_SIZE);
<   agreement.NotifyAckedMpdu (mpdu);
< 
<   mpdu->GetHeader ().SetSequenceNumber (++seqNumber %= SEQNO_SPACE_SIZE);
<   agreement.NotifyAckedMpdu (mpdu);
< 
<   mpdu->GetHeader ().SetSequenceNumber (++seqNumber %= SEQNO_SPACE_SIZE);
<   agreement.NotifyAckedMpdu (mpdu);
< 
<   seqNumber = (seqNumber + 3) % SEQNO_SPACE_SIZE;
<   mpdu->GetHeader ().SetSequenceNumber (seqNumber);
<   agreement.NotifyAckedMpdu (mpdu);
< 
<   mpdu->GetHeader ().SetSequenceNumber (++seqNumber %= SEQNO_SPACE_SIZE);
<   agreement.NotifyAckedMpdu (mpdu);
< 
<   mpdu->GetHeader ().SetSequenceNumber (++seqNumber %= SEQNO_SPACE_SIZE);
<   agreement.NotifyAckedMpdu (mpdu);
< 
<   // the current window must look like this:
<   //
<   // |1|0|0|1|1|1|0|0|0|0|0|0|0|1|1|1|
<   //                      ^
<   //                      |
<   //                     HEAD
< 
<   NS_TEST_EXPECT_MSG_EQ (agreement.GetStartingSequence (), startingSeq, "Incorrect starting sequence after 3 unacknowledged MPDUs");
<   NS_TEST_EXPECT_MSG_EQ (agreement.m_txWindow.At (0), false, "Incorrect flag after 3 unacknowledged MPDUs");
<   NS_TEST_EXPECT_MSG_EQ (agreement.m_txWindow.At (1), false, "Incorrect flag after 3 unacknowledged MPDUs");
<   NS_TEST_EXPECT_MSG_EQ (agreement.m_txWindow.At (2), false, "Incorrect flag after 3 unacknowledged MPDUs");
<   NS_TEST_EXPECT_MSG_EQ (agreement.m_txWindow.At (3), true, "Incorrect flag after 3 unacknowledged MPDUs");
<   NS_TEST_EXPECT_MSG_EQ (agreement.m_txWindow.At (4), true, "Incorrect flag after 3 unacknowledged MPDUs");
<   NS_TEST_EXPECT_MSG_EQ (agreement.m_txWindow.At (5), true, "Incorrect flag after 3 unacknowledged MPDUs");
<   NS_TEST_EXPECT_MSG_EQ (agreement.m_txWindow.At (6), true, "Incorrect flag after 3 unacknowledged MPDUs");
<   NS_TEST_EXPECT_MSG_EQ (agreement.m_txWindow.At (7), false, "Incorrect flag after 3 unacknowledged MPDUs");
<   NS_TEST_EXPECT_MSG_EQ (agreement.m_txWindow.At (8), false, "Incorrect flag after 3 unacknowledged MPDUs");
<   NS_TEST_EXPECT_MSG_EQ (agreement.m_txWindow.At (9), true, "Incorrect flag after 3 unacknowledged MPDUs");
<   NS_TEST_EXPECT_MSG_EQ (agreement.m_txWindow.At (10), true, "Incorrect flag after 3 unacknowledged MPDUs");
<   NS_TEST_EXPECT_MSG_EQ (agreement.m_txWindow.At (11), true, "Incorrect flag after 3 unacknowledged MPDUs");
<   for (uint16_t i = 12; i < winSize; i++)
<     {
<       NS_TEST_EXPECT_MSG_EQ (agreement.m_txWindow.At (i), false, "Incorrect flag after 3 unacknowledged MPDUs");
<     }
< 
<   // the transmission of an MPDU beyond the current window (by 2 positions) is
<   // notified, hence the window moves forward 2 positions
<   seqNumber = (agreement.m_txWindow.GetWinEnd () + 2) % SEQNO_SPACE_SIZE;
<   mpdu->GetHeader ().SetSequenceNumber (seqNumber);
<   agreement.NotifyTransmittedMpdu (mpdu);
< 
<   // the current window must look like this:
<   //
<   // |1|0|0|1|1|1|0|0|0|0|0|0|0|1|1|1|
<   //                          ^
<   //                          |
<   //                         HEAD
< 
<   startingSeq = (startingSeq + 2) % SEQNO_SPACE_SIZE;
<   NS_TEST_EXPECT_MSG_EQ (agreement.GetStartingSequence (), startingSeq,
<                          "Incorrect starting sequence after transmitting an MPDU beyond the current window");
<   NS_TEST_EXPECT_MSG_EQ (agreement.m_txWindow.At (0), false, "Incorrect flag after transmitting an MPDU beyond the current window");
<   NS_TEST_EXPECT_MSG_EQ (agreement.m_txWindow.At (1), true, "Incorrect flag after transmitting an MPDU beyond the current window");
<   NS_TEST_EXPECT_MSG_EQ (agreement.m_txWindow.At (2), true, "Incorrect flag after transmitting an MPDU beyond the current window");
<   NS_TEST_EXPECT_MSG_EQ (agreement.m_txWindow.At (3), true, "Incorrect flag after transmitting an MPDU beyond the current window");
<   NS_TEST_EXPECT_MSG_EQ (agreement.m_txWindow.At (4), true, "Incorrect flag after transmitting an MPDU beyond the current window");
<   NS_TEST_EXPECT_MSG_EQ (agreement.m_txWindow.At (5), false, "Incorrect flag after transmitting an MPDU beyond the current window");
<   NS_TEST_EXPECT_MSG_EQ (agreement.m_txWindow.At (6), false, "Incorrect flag after transmitting an MPDU beyond the current window");
<   NS_TEST_EXPECT_MSG_EQ (agreement.m_txWindow.At (7), true, "Incorrect flag after transmitting an MPDU beyond the current window");
<   NS_TEST_EXPECT_MSG_EQ (agreement.m_txWindow.At (8), true, "Incorrect flag after transmitting an MPDU beyond the current window");
<   NS_TEST_EXPECT_MSG_EQ (agreement.m_txWindow.At (9), true, "Incorrect flag after transmitting an MPDU beyond the current window");
<   for (uint16_t i = 10; i < winSize; i++)
<     {
<       NS_TEST_EXPECT_MSG_EQ (agreement.m_txWindow.At (i), false, "Incorrect flag after transmitting an MPDU beyond the current window");
<     }
< 
<   // another MPDU is transmitted beyond the current window. Now, the window advances
<   // until the first unacknowledged MPDU
<   seqNumber = (agreement.m_txWindow.GetWinEnd () + 1) % SEQNO_SPACE_SIZE;
<   mpdu->GetHeader ().SetSequenceNumber (seqNumber);
<   agreement.NotifyTransmittedMpdu (mpdu);
< 
<   // the current window must look like this:
<   //
<   // |0|0|0|1|1|1|0|0|0|0|0|0|0|0|0|0|
<   //    ^
<   //    |
<   //   HEAD
< 
<   startingSeq = (startingSeq + 5) % SEQNO_SPACE_SIZE;
<   NS_TEST_EXPECT_MSG_EQ (agreement.GetStartingSequence (), startingSeq,
<                          "Incorrect starting sequence after transmitting another MPDU beyond the current window");
<   NS_TEST_EXPECT_MSG_EQ (agreement.m_txWindow.At (0), false, "Incorrect flag after transmitting another MPDU beyond the current window");
<   NS_TEST_EXPECT_MSG_EQ (agreement.m_txWindow.At (1), false, "Incorrect flag after transmitting another MPDU beyond the current window");
<   NS_TEST_EXPECT_MSG_EQ (agreement.m_txWindow.At (2), true, "Incorrect flag after transmitting another MPDU beyond the current window");
<   NS_TEST_EXPECT_MSG_EQ (agreement.m_txWindow.At (3), true, "Incorrect flag after transmitting another MPDU beyond the current window");
<   NS_TEST_EXPECT_MSG_EQ (agreement.m_txWindow.At (4), true, "Incorrect flag after transmitting another MPDU beyond the current window");
<   for (uint16_t i = 5; i < winSize; i++)
<     {
<       NS_TEST_EXPECT_MSG_EQ (agreement.m_txWindow.At (i), false, "Incorrect flag after transmitting another MPDU beyond the current window");
<     }
< 
<   // the MPDU next to winStart is discarded, hence the window advances to make it an old packet.
<   // Since the subsequent MPDUs have been acknowledged, the window advances further.
<   seqNumber = (startingSeq + 1) % SEQNO_SPACE_SIZE;
<   mpdu->GetHeader ().SetSequenceNumber (seqNumber);
<   agreement.NotifyDiscardedMpdu (mpdu);
< 
<   // the current window must look like this:
<   //
<   // |0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|
<   //              ^
<   //              |
<   //             HEAD
< 
<   startingSeq = (startingSeq + 5) % SEQNO_SPACE_SIZE;
<   NS_TEST_EXPECT_MSG_EQ (agreement.GetStartingSequence (), startingSeq,
<                          "Incorrect starting sequence after discarding an MPDU");
<   for (uint16_t i = 0; i < winSize; i++)
<     {
<       NS_TEST_EXPECT_MSG_EQ (agreement.m_txWindow.At (i), false, "Incorrect flag after discarding an MPDU");
<     }
< 
<   // Finally, check that the window correctly advances when the MPDU with the starting sequence number
<   // is acknowledged after being the only unacknowledged MPDU
<   for (uint16_t i = 1; i < winSize; i++)
<     {
<       mpdu->GetHeader ().SetSequenceNumber ((startingSeq + i) % SEQNO_SPACE_SIZE);
<       agreement.NotifyAckedMpdu (mpdu);
<     }
< 
<   // the current window must look like this:
<   //
<   // |1|1|1|1|1|1|0|1|1|1|1|1|1|1|1|1|
<   //              ^
<   //              |
<   //             HEAD
< 
<   NS_TEST_EXPECT_MSG_EQ (agreement.GetStartingSequence (), startingSeq,
<                          "Incorrect starting sequence after acknowledging all but the first MPDU");
<   NS_TEST_EXPECT_MSG_EQ (agreement.m_txWindow.At (0), false, "Incorrect flag after acknowledging all but the first MPDU");
<   for (uint16_t i = 1; i < winSize; i++)
<     {
<       NS_TEST_EXPECT_MSG_EQ (agreement.m_txWindow.At (i), true, "Incorrect flag after acknowledging all but the first MPDU");
<     }
< 
<   // acknowledge the first MPDU
<   mpdu->GetHeader ().SetSequenceNumber (startingSeq % SEQNO_SPACE_SIZE);
<   agreement.NotifyAckedMpdu (mpdu);
< 
<   // the current window must look like this:
<   //
<   // |0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|
<   //              ^
<   //              |
<   //             HEAD
< 
<   startingSeq = (startingSeq + winSize) % SEQNO_SPACE_SIZE;
<   NS_TEST_EXPECT_MSG_EQ (agreement.GetStartingSequence (), startingSeq,
<                          "Incorrect starting sequence after acknowledging the first MPDU");
<   for (uint16_t i = 0; i < winSize; i++)
<     {
<       NS_TEST_EXPECT_MSG_EQ (agreement.m_txWindow.At (i), false, "Incorrect flag after acknowledging the first MPDU");
<     }
< }
< 
549,554c236
< /**
<  * \ingroup wifi-test
<  * \ingroup tests
<  *
<  * \brief Test for block ack header
<  */
---
> //Test for block ack header
561c243
<   CtrlBAckResponseHeader m_blockAckHdr; ///< block ack header
---
>   CtrlBAckResponseHeader m_blockAckHdr;
577c259
<   for (uint16_t i = 179; i < 220; i++)
---
>   for (uint32_t i = 179; i < 220; i++)
581c263
<   for (uint16_t i = 225; i <= 242; i++)
---
>   for (uint32_t i = 225; i <= 242; i++)
597c279
<   for (uint16_t i = 4090; i != 10; i = (i + 1) % 4096)
---
>   for (uint32_t i = 4090; i != 10; i = (i + 1) % 4096)
601c283
<   for (uint16_t i = 22; i < 25; i++)
---
>   for (uint32_t i = 22; i < 25; i++)
616,940d297
< /**
<  * \ingroup wifi-test
<  * \ingroup tests
<  *
<  * \brief Test for Block Ack Policy with aggregation disabled
<  *
<  * This test aims to check the Block Ack policy when A-MPDU aggregation is disabled.
<  * In this case, a QoS station can transmit multiple QoS data frames before requesting
<  * a Block Ack through a Block Ack Request frame. If the AC is granted a non-null TXOP
<  * limit, MPDUs can be separated by a SIFS.
<  *
<  * In this test, an HT STA sends 14 packets to an HT AP. The ack policy selector is
<  * configured so that a Block Ack is requested once 8 (= 0.125 * 64) MPDUs are sent
<  * in addition to the MPDU having the starting sequence number. The block ack threshold
<  * is set to 2, hence a block ack agreement is established when there are at least two
<  * packets in the EDCA queue.
<  *
<  * When the TXOP limit is null:
<  * - the first packet is sent with Normal Ack policy because the BA agreement has not
<  *   been established yet (there are no queued packets when the first one arrives);
<  * - packets from the 2nd to the 10th are sent with Block Ack policy (and hence
<  *   are not immediately acknowledged);
<  * - after the 10th packet, a Block Ack Request is sent, followed by a Block Ack;
<  * - the remaining 4 packets are sent with Block Ack policy (and hence
<  *   are not immediately acknowledged);
<  * - the last packet is followed by a Block Ack Request because there are no more
<  *   packets in the EDCA queue and hence a response is needed independently of
<  *   the number of outstanding MPDUs.
<  *
<  * When the TXOP is not null (and long enough to include the transmission of all packets):
<  * - the first packet is sent with Normal Ack policy because the BA agreement has not
<  *   been established yet (there are no queued packets when the first one arrives);
<  * - the second packet is sent with Normal Ack Policy because the first packet sent in
<  *   a TXOP shall request an immediate response and no previous MPDUs have to be
<  *   acknowledged;
<  * - packets from the 3rd to the 11th are sent with Block Ack policy (and hence
<  *   are not immediately acknowledged);
<  * - after the 11th packet, a Block Ack Request is sent, followed by a Block Ack;
<  * - the remaining 3 packets are sent with Block Ack policy (and hence
<  *   are not immediately acknowledged);
<  * - the last packet is followed by a Block Ack Request because there are no more
<  *   packets in the EDCA queue and hence a response is needed independently of
<  *   the number of outstanding MPDUs.
<  */
< class BlockAckAggregationDisabledTest : public TestCase
< {
<   /**
<   * Keeps the maximum duration among all TXOPs
<   */
<   struct TxopDurationTracer
<   {
<     /**
<      * Callback for the TxopTrace trace
<      * \param startTime TXOP start time
<      * \param duration TXOP duration
<      */
<     void Trace (Time startTime, Time duration);
<     Time m_max {Seconds (0)};  ///< max TXOP duration
<   };
< 
< public:
<   /**
<    * \brief Constructor
<    * \param txop true for non-null TXOP limit
<    */
<   BlockAckAggregationDisabledTest (bool txop);
<   virtual ~BlockAckAggregationDisabledTest ();
< 
<   virtual void DoRun (void);
< 
< 
< private:
<   bool m_txop; ///< true for non-null TXOP limit
<   uint32_t m_received; ///< received packets
<   uint16_t m_txTotal; ///< transmitted data packets
<   uint16_t m_txSinceBar; ///< packets transmitted since the agreement was established
<                          ///< or the last block ack was received
<   uint16_t m_nBar; ///< transmitted BlockAckReq frames
<   uint16_t m_nBa; ///< received BlockAck frames
< 
<   /**
<    * Function to trace packets received by the server application
<    * \param context the context
<    * \param p the packet
<    * \param adr the address
<    */
<   void L7Receive (std::string context, Ptr<const Packet> p, const Address &adr);
<   /**
<    * Callback invoked when PHY transmits a packet
<    * \param context the context
<    * \param p the packet
<    * \param power the tx power
<    */
<   void Transmit (std::string context, Ptr<const Packet> p, double power);
<   /**
<    * Callback invoked when PHY receives a packet
<    * \param context the context
<    * \param p the packet
<    */
<   void Receive (std::string context, Ptr<const Packet> p);
< };
< 
< void
< BlockAckAggregationDisabledTest::TxopDurationTracer::Trace (Time startTime, Time duration)
< {
<   if (duration > m_max)
<     {
<       m_max = duration;
<     }
< }
< 
< BlockAckAggregationDisabledTest::BlockAckAggregationDisabledTest (bool txop)
<   : TestCase ("Test case for Block Ack Policy with aggregation disabled"),
<     m_txop (txop),
<     m_received (0),
<     m_txTotal (0),
<     m_txSinceBar (0),
<     m_nBar (0),
<     m_nBa (0)
< {
< }
< 
< BlockAckAggregationDisabledTest::~BlockAckAggregationDisabledTest ()
< {
< }
< 
< void
< BlockAckAggregationDisabledTest::L7Receive (std::string context, Ptr<const Packet> p, const Address &adr)
< {
<   if (p->GetSize () == 1400)
<     {
<       m_received++;
<     }
< }
< 
< void
< BlockAckAggregationDisabledTest::Transmit (std::string context, Ptr<const Packet> p, double power)
< {
<   WifiMacHeader hdr;
<   p->PeekHeader (hdr);
< 
<   if (m_txSinceBar == 9 || m_txTotal == 14)
<     {
<       NS_TEST_ASSERT_MSG_EQ (hdr.IsBlockAckReq (), true, "Didn't get a BlockAckReq when expected");
<     }
<   else
<     {
<       NS_TEST_ASSERT_MSG_EQ (hdr.IsBlockAckReq (), false, "Got a BlockAckReq when not expected");
<     }
< 
<   if (hdr.IsQosData ())
<     {
<       m_txTotal++;
<       if (hdr.IsQosBlockAck ())
<         {
<           m_txSinceBar++;
<         }
< 
<       if (!m_txop)
<         {
<           NS_TEST_EXPECT_MSG_EQ ((m_txTotal == 1 || hdr.IsQosBlockAck ()), true, "Unexpected QoS ack policy");
<         }
<       else
<         {
<           NS_TEST_EXPECT_MSG_EQ ((m_txTotal <= 2 || hdr.IsQosBlockAck ()), true, "Unexpected QoS ack policy");
<         }
<     }
<   else if (hdr.IsBlockAckReq ())
<     {
<       m_txSinceBar = 0;
<       m_nBar++;
<     }
< }
< 
< void
< BlockAckAggregationDisabledTest::Receive (std::string context, Ptr<const Packet> p)
< {
<   WifiMacHeader hdr;
<   p->PeekHeader (hdr);
< 
<   if (hdr.IsBlockAck ())
<     {
<       m_nBa++;
<     }
< }
< 
< void
< BlockAckAggregationDisabledTest::DoRun (void)
< {
<   NodeContainer wifiStaNode;
<   wifiStaNode.Create (1);
< 
<   NodeContainer wifiApNode;
<   wifiApNode.Create (1);
< 
<   YansWifiChannelHelper channel = YansWifiChannelHelper::Default ();
<   YansWifiPhyHelper phy = YansWifiPhyHelper::Default ();
<   phy.SetChannel (channel.Create ());
< 
<   WifiHelper wifi;
<   wifi.SetStandard (WIFI_PHY_STANDARD_80211a);
<   wifi.SetAckPolicySelectorForAc (AC_BE, "ns3::ConstantWifiAckPolicySelector",
<                                   "BaThreshold", DoubleValue (0.125));
<   wifi.SetRemoteStationManager ("ns3::IdealWifiManager");
< 
<   WifiMacHelper mac;
<   Ssid ssid = Ssid ("ns-3-ssid");
<   mac.SetType ("ns3::StaWifiMac",
<                "QosSupported", BooleanValue (true),
<                "Ssid", SsidValue (ssid),
<                /* setting blockack threshold for sta's BE queue */
<                "BE_BlockAckThreshold", UintegerValue (2),
<                "ActiveProbing", BooleanValue (false));
< 
<   NetDeviceContainer staDevices;
<   staDevices = wifi.Install (phy, mac, wifiStaNode);
< 
<   mac.SetType ("ns3::ApWifiMac",
<                "QosSupported", BooleanValue (true),
<                "Ssid", SsidValue (ssid),
<                "BeaconGeneration", BooleanValue (true));
< 
<   NetDeviceContainer apDevices;
<   apDevices = wifi.Install (phy, mac, wifiApNode);
< 
<   MobilityHelper mobility;
<   Ptr<ListPositionAllocator> positionAlloc = CreateObject<ListPositionAllocator> ();
< 
<   positionAlloc->Add (Vector (0.0, 0.0, 0.0));
<   positionAlloc->Add (Vector (1.0, 0.0, 0.0));
<   mobility.SetPositionAllocator (positionAlloc);
< 
<   mobility.SetMobilityModel ("ns3::ConstantPositionMobilityModel");
<   mobility.Install (wifiApNode);
<   mobility.Install (wifiStaNode);
< 
<   Ptr<WifiNetDevice> ap_device = DynamicCast<WifiNetDevice> (apDevices.Get (0));
<   Ptr<WifiNetDevice> sta_device = DynamicCast<WifiNetDevice> (staDevices.Get (0));
< 
<   // Disable A-MPDU aggregation
<   sta_device->GetMac ()->SetAttribute ("BE_MaxAmpduSize", UintegerValue (0));
<   TxopDurationTracer txopTracer;
< 
<   if (m_txop)
<     {
<       PointerValue ptr;
<       sta_device->GetMac ()->GetAttribute ("BE_Txop", ptr);
<       ptr.Get<QosTxop> ()->TraceConnectWithoutContext ("TxopTrace", MakeCallback (&TxopDurationTracer::Trace, &txopTracer));
< 
<       // set the TXOP limit on BE AC
<       Ptr<RegularWifiMac> ap_mac = DynamicCast<RegularWifiMac> (ap_device->GetMac ());
<       NS_ASSERT (ap_mac);
<       ap_mac->GetAttribute ("BE_Txop", ptr);
<       ptr.Get<QosTxop> ()->SetTxopLimit (MicroSeconds (4800));
<     }
< 
<   PacketSocketAddress socket;
<   socket.SetSingleDevice (sta_device->GetIfIndex ());
<   socket.SetPhysicalAddress (ap_device->GetAddress ());
<   socket.SetProtocol (1);
< 
<   // give packet socket powers to nodes.
<   PacketSocketHelper packetSocket;
<   packetSocket.Install (wifiStaNode);
<   packetSocket.Install (wifiApNode);
< 
<   // the first client application generates a single packet, which is sent
<   // with the normal ack policy because there are no other packets queued
<   Ptr<PacketSocketClient> client1 = CreateObject<PacketSocketClient> ();
<   client1->SetAttribute ("PacketSize", UintegerValue (1400));
<   client1->SetAttribute ("MaxPackets", UintegerValue (1));
<   client1->SetAttribute ("Interval", TimeValue (MicroSeconds (0)));
<   client1->SetRemote (socket);
<   wifiStaNode.Get (0)->AddApplication (client1);
<   client1->SetStartTime (Seconds (1));
<   client1->SetStopTime (Seconds (3.0));
< 
<   // the second client application generates 13 packets. Even if when the first
<   // packet is queued the queue is empty, the first packet is not transmitted
<   // immediately, but the EDCAF waits for the next slot boundary. At that time,
<   // other packets have been queued, hence a BA agreement is established first.
<   Ptr<PacketSocketClient> client2 = CreateObject<PacketSocketClient> ();
<   client2->SetAttribute ("PacketSize", UintegerValue (1400));
<   client2->SetAttribute ("MaxPackets", UintegerValue (13));
<   client2->SetAttribute ("Interval", TimeValue (MicroSeconds (0)));
<   client2->SetRemote (socket);
<   wifiStaNode.Get (0)->AddApplication (client2);
<   client2->SetStartTime (Seconds (1.5));
<   client2->SetStopTime (Seconds (3.0));
< 
<   Ptr<PacketSocketServer> server = CreateObject<PacketSocketServer> ();
<   server->SetLocal (socket);
<   wifiApNode.Get (0)->AddApplication (server);
<   server->SetStartTime (Seconds (0.0));
<   server->SetStopTime (Seconds (4.0));
< 
<   Config::Connect ("/NodeList/*/ApplicationList/0/$ns3::PacketSocketServer/Rx", MakeCallback (&BlockAckAggregationDisabledTest::L7Receive, this));
<   Config::Connect ("/NodeList/0/DeviceList/0/Phy/PhyTxBegin", MakeCallback (&BlockAckAggregationDisabledTest::Transmit, this));
<   Config::Connect ("/NodeList/0/DeviceList/0/Phy/PhyRxBegin", MakeCallback (&BlockAckAggregationDisabledTest::Receive, this));
< 
<   Simulator::Stop (Seconds (5));
<   Simulator::Run ();
< 
<   Simulator::Destroy ();
< 
<   // The client applications generate 14 packets, so we expect that the wifi PHY
<   // layer transmits 14 MPDUs, the server application receives 14 packets, and
<   // two BARs are transmitted.
<   NS_TEST_EXPECT_MSG_EQ (m_txTotal, 14, "Unexpected number of transmitted packets");
<   NS_TEST_EXPECT_MSG_EQ (m_received, 14, "Unexpected number of received packets");
<   NS_TEST_EXPECT_MSG_EQ (m_nBar, 2, "Unexpected number of Block Ack Requests");
<   NS_TEST_EXPECT_MSG_EQ (m_nBa, 2, "Unexpected number of Block Ack Responses");
<   if (m_txop)
<     {
<       NS_TEST_EXPECT_MSG_LT (txopTracer.m_max, MicroSeconds (4800), "TXOP duration exceeded!");
<       NS_TEST_EXPECT_MSG_GT (txopTracer.m_max, MicroSeconds (3008), "The maximum TXOP duration is too short!");
<     }
< }
< 
< /**
<  * \ingroup wifi-test
<  * \ingroup tests
<  *
<  * \brief Block Ack Test Suite
<  */
952d308
<   AddTestCase (new OriginatorBlockAckWindowTest, TestCase::QUICK);
954,955d309
<   AddTestCase (new BlockAckAggregationDisabledTest (false), TestCase::QUICK);
<   AddTestCase (new BlockAckAggregationDisabledTest (true), TestCase::QUICK);
958c312
< static BlockAckTestSuite g_blockAckTestSuite; ///< the test suite
---
> static BlockAckTestSuite g_blockAckTestSuite;
Only in ../../NS3-WiGig/src/wifi/test: channel-access-manager-test.cc
Only in ../../ns-3-dev/src/wifi/test: dcf-manager-test.cc
diff ../../NS3-WiGig/src/wifi/test/examples-to-run.py ../../ns-3-dev/src/wifi/test/examples-to-run.py
1c1
< #! /usr/bin/env python3
---
> #! /usr/bin/env python
10,315c10
< cpp_examples = [
<     ("wifi-phy-configuration --testCase=0", "True", "True"),
<     ("wifi-phy-configuration --testCase=1", "True", "False"),
<     ("wifi-phy-configuration --testCase=2", "True", "False"),
<     ("wifi-phy-configuration --testCase=3", "True", "False"),
<     ("wifi-phy-configuration --testCase=4", "True", "False"),
<     ("wifi-phy-configuration --testCase=5", "True", "False"),
<     ("wifi-phy-configuration --testCase=6", "True", "False"),
<     ("wifi-phy-configuration --testCase=7", "True", "False"),
<     ("wifi-phy-configuration --testCase=8", "True", "False"),
<     ("wifi-phy-configuration --testCase=9", "True", "False"),
<     ("wifi-phy-configuration --testCase=10", "True", "False"),
<     ("wifi-phy-configuration --testCase=11", "True", "False"),
<     ("wifi-phy-configuration --testCase=12", "True", "False"),
<     ("wifi-phy-configuration --testCase=13", "True", "False"),
<     ("wifi-phy-configuration --testCase=14", "True", "False"),
<     ("wifi-phy-configuration --testCase=15", "True", "False"),
<     ("wifi-phy-configuration --testCase=16", "True", "False"),
<     ("wifi-phy-configuration --testCase=17", "True", "False"),
<     ("wifi-phy-configuration --testCase=18", "True", "False"),
<     ("wifi-manager-example --wifiManager=Aarf --standard=802.11a --stepTime=0.1", "True", "True"),
<     ("wifi-manager-example --wifiManager=Aarf --standard=802.11a --rtsThreshold=0 --stepTime=0.1", "True", "True"),
<     ("wifi-manager-example --wifiManager=Aarf --standard=802.11a --maxSlrc=1 --stepTime=0.1", "True", "True"),
<     ("wifi-manager-example --wifiManager=Aarf --standard=802.11b --serverChannelWidth=22 --clientChannelWidth=22 --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=Aarf --standard=802.11g --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=Aarf --standard=802.11-holland --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=Aarf --standard=802.11-10MHz --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=Aarf --standard=802.11-5MHz --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=Aarfcd --standard=802.11a --stepTime=0.1", "True", "True"),
<     ("wifi-manager-example --wifiManager=Aarfcd --standard=802.11a --rtsThreshold=0 --stepTime=0.1", "True", "True"),
<     ("wifi-manager-example --wifiManager=Aarfcd --standard=802.11a --maxSlrc=1 --stepTime=0.1", "True", "True"),
<     ("wifi-manager-example --wifiManager=Aarfcd --standard=802.11b --serverChannelWidth=22 --clientChannelWidth=22 --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=Aarfcd --standard=802.11g --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=Aarfcd --standard=802.11-holland --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=Aarfcd --standard=802.11-10MHz --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=Aarfcd --standard=802.11-5MHz --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=Amrr --standard=802.11a --stepTime=0.1", "True", "True"),
<     ("wifi-manager-example --wifiManager=Amrr --standard=802.11a --rtsThreshold=0 --stepTime=0.1", "True", "True"),
<     ("wifi-manager-example --wifiManager=Amrr --standard=802.11a --maxSlrc=1 --stepTime=0.1", "True", "True"),
<     ("wifi-manager-example --wifiManager=Amrr --standard=802.11b --serverChannelWidth=22 --clientChannelWidth=22 --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=Amrr --standard=802.11g --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=Amrr --standard=802.11-holland --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=Amrr --standard=802.11-10MHz --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=Amrr --standard=802.11-5MHz --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=Arf --standard=802.11a --stepTime=0.1", "True", "True"),
<     ("wifi-manager-example --wifiManager=Arf --standard=802.11a --rtsThreshold=0 --stepTime=0.1", "True", "True"),
<     ("wifi-manager-example --wifiManager=Arf --standard=802.11a --maxSlrc=1 --stepTime=0.1", "True", "True"),
<     ("wifi-manager-example --wifiManager=Arf --standard=802.11b --serverChannelWidth=22 --clientChannelWidth=22 --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=Arf --standard=802.11g --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=Arf --standard=802.11-holland --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=Arf --standard=802.11-10MHz --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=Arf --standard=802.11-5MHz --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=Cara --standard=802.11a --stepTime=0.1", "True", "True"),
<     ("wifi-manager-example --wifiManager=Cara --standard=802.11a --rtsThreshold=0 --stepTime=0.1", "True", "True"),
<     ("wifi-manager-example --wifiManager=Cara --standard=802.11a --maxSlrc=1 --stepTime=0.1", "True", "True"),
<     ("wifi-manager-example --wifiManager=Cara --standard=802.11b --serverChannelWidth=22 --clientChannelWidth=22 --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=Cara --standard=802.11g --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=Cara --standard=802.11-holland --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=Cara --standard=802.11-10MHz --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=Cara --standard=802.11-5MHz --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=Onoe --standard=802.11a --stepTime=0.1", "True", "True"),
<     ("wifi-manager-example --wifiManager=Onoe --standard=802.11a --rtsThreshold=0 --stepTime=0.1", "True", "True"),
<     ("wifi-manager-example --wifiManager=Onoe --standard=802.11a --maxSlrc=1 --stepTime=0.1", "True", "True"),
<     ("wifi-manager-example --wifiManager=Onoe --standard=802.11b --serverChannelWidth=22 --clientChannelWidth=22 --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=Onoe --standard=802.11g --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=Onoe --standard=802.11-holland --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=Onoe --standard=802.11-10MHz --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=Onoe --standard=802.11-5MHz --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=Rraa --standard=802.11a --stepTime=0.1", "True", "True"),
<     ("wifi-manager-example --wifiManager=Rraa --standard=802.11a --rtsThreshold=0 --stepTime=0.1", "True", "True"),
<     ("wifi-manager-example --wifiManager=Rraa --standard=802.11a --maxSlrc=1 --stepTime=0.1", "True", "True"),
<     ("wifi-manager-example --wifiManager=Rraa --standard=802.11b --serverChannelWidth=22 --clientChannelWidth=22 --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=Rraa --standard=802.11g --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=Rraa --standard=802.11-holland --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=Rraa --standard=802.11-10MHz --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=Rraa --standard=802.11-5MHz --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=Minstrel --standard=802.11a --stepTime=0.1", "True", "True"),
<     ("wifi-manager-example --wifiManager=Minstrel --standard=802.11a --rtsThreshold=0 --stepTime=0.1", "True", "True"),
<     ("wifi-manager-example --wifiManager=Minstrel --standard=802.11a --maxSlrc=1 --stepTime=0.1", "True", "True"),
<     ("wifi-manager-example --wifiManager=Minstrel --standard=802.11b --serverChannelWidth=22 --clientChannelWidth=22 --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=Minstrel --standard=802.11g --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=Minstrel --standard=802.11-holland --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=Minstrel --standard=802.11-10MHz --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=Minstrel --standard=802.11-5MHz --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=MinstrelHt --standard=802.11a --stepTime=0.1", "True", "True"),
<     ("wifi-manager-example --wifiManager=MinstrelHt --standard=802.11b --serverChannelWidth=22 --clientChannelWidth=22 --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=MinstrelHt --standard=802.11g --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=MinstrelHt --standard=802.11-holland --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=MinstrelHt --standard=802.11-10MHz --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=MinstrelHt --standard=802.11-5MHz --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=MinstrelHt --standard=802.11n-5GHz --serverChannelWidth=20 --clientChannelWidth=20 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=1 --clientNss=1 --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=MinstrelHt --standard=802.11n-5GHz --serverChannelWidth=20 --clientChannelWidth=20 --serverShortGuardInterval=400 --clientShortGuardInterval=400 --serverNss=1 --clientNss=1 --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=MinstrelHt --standard=802.11n-5GHz --serverChannelWidth=40 --clientChannelWidth=40 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=1 --clientNss=1 --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=MinstrelHt --standard=802.11n-5GHz --serverChannelWidth=40 --clientChannelWidth=40 --serverShortGuardInterval=400 --clientShortGuardInterval=400 --serverNss=1 --clientNss=1 --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=MinstrelHt --standard=802.11n-5GHz --serverChannelWidth=20 --clientChannelWidth=20 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=2 --clientNss=2 --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=MinstrelHt --standard=802.11n-5GHz --serverChannelWidth=20 --clientChannelWidth=20 --serverShortGuardInterval=400 --clientShortGuardInterval=400 --serverNss=2 --clientNss=2 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=MinstrelHt --standard=802.11n-5GHz --serverChannelWidth=40 --clientChannelWidth=40 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=2 --clientNss=2 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=MinstrelHt --standard=802.11n-5GHz --serverChannelWidth=40 --clientChannelWidth=40 --serverShortGuardInterval=400 --clientShortGuardInterval=400 --serverNss=2 --clientNss=2 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=MinstrelHt --standard=802.11n-5GHz --serverChannelWidth=20 --clientChannelWidth=20 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=3 --clientNss=3 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=MinstrelHt --standard=802.11n-5GHz --serverChannelWidth=20 --clientChannelWidth=20 --serverShortGuardInterval=400 --clientShortGuardInterval=400 --serverNss=3 --clientNss=3 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=MinstrelHt --standard=802.11n-5GHz --serverChannelWidth=40 --clientChannelWidth=40 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=3 --clientNss=3 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=MinstrelHt --standard=802.11n-5GHz --serverChannelWidth=40 --clientChannelWidth=40 --serverShortGuardInterval=400 --clientShortGuardInterval=400 --serverNss=3 --clientNss=3 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=MinstrelHt --standard=802.11n-5GHz --serverChannelWidth=20 --clientChannelWidth=20 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=4 --clientNss=4 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=MinstrelHt --standard=802.11n-5GHz --serverChannelWidth=20 --clientChannelWidth=20 --serverShortGuardInterval=400 --clientShortGuardInterval=400 --serverNss=4 --clientNss=4 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=MinstrelHt --standard=802.11n-5GHz --serverChannelWidth=40 --clientChannelWidth=40 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=4 --clientNss=4 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=MinstrelHt --standard=802.11n-5GHz --serverChannelWidth=40 --clientChannelWidth=40 --serverShortGuardInterval=400 --clientShortGuardInterval=400 --serverNss=4 --clientNss=4 --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=MinstrelHt --standard=802.11n-2.4GHz --serverChannelWidth=20 --clientChannelWidth=20 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=1 --clientNss=1 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=MinstrelHt --standard=802.11n-2.4GHz --serverChannelWidth=20 --clientChannelWidth=20 --serverShortGuardInterval=400 --clientShortGuardInterval=400 --serverNss=1 --clientNss=1 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=MinstrelHt --standard=802.11n-2.4GHz --serverChannelWidth=40 --clientChannelWidth=40 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=1 --clientNss=1 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=MinstrelHt --standard=802.11n-2.4GHz --serverChannelWidth=40 --clientChannelWidth=40 --serverShortGuardInterval=400 --clientShortGuardInterval=400 --serverNss=1 --clientNss=1 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=MinstrelHt --standard=802.11n-2.4GHz --serverChannelWidth=20 --clientChannelWidth=20 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=2 --clientNss=2 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=MinstrelHt --standard=802.11n-2.4GHz --serverChannelWidth=20 --clientChannelWidth=20 --serverShortGuardInterval=400 --clientShortGuardInterval=400 --serverNss=2 --clientNss=2 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=MinstrelHt --standard=802.11n-2.4GHz --serverChannelWidth=40 --clientChannelWidth=40 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=2 --clientNss=2 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=MinstrelHt --standard=802.11n-2.4GHz --serverChannelWidth=40 --clientChannelWidth=40 --serverShortGuardInterval=400 --clientShortGuardInterval=400 --serverNss=2 --clientNss=2 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=MinstrelHt --standard=802.11n-2.4GHz --serverChannelWidth=20 --clientChannelWidth=20 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=3 --clientNss=3 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=MinstrelHt --standard=802.11n-2.4GHz --serverChannelWidth=20 --clientChannelWidth=20 --serverShortGuardInterval=400 --clientShortGuardInterval=400 --serverNss=3 --clientNss=3 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=MinstrelHt --standard=802.11n-2.4GHz --serverChannelWidth=40 --clientChannelWidth=40 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=3 --clientNss=3 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=MinstrelHt --standard=802.11n-2.4GHz --serverChannelWidth=40 --clientChannelWidth=40 --serverShortGuardInterval=400 --clientShortGuardInterval=400 --serverNss=3 --clientNss=3 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=MinstrelHt --standard=802.11n-2.4GHz --serverChannelWidth=20 --clientChannelWidth=20 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=4 --clientNss=4 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=MinstrelHt --standard=802.11n-2.4GHz --serverChannelWidth=20 --clientChannelWidth=20 --serverShortGuardInterval=400 --clientShortGuardInterval=400 --serverNss=4 --clientNss=4 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=MinstrelHt --standard=802.11n-2.4GHz --serverChannelWidth=40 --clientChannelWidth=40 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=4 --clientNss=4 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=MinstrelHt --standard=802.11n-2.4GHz --serverChannelWidth=40 --clientChannelWidth=40 --serverShortGuardInterval=400 --clientShortGuardInterval=400 --serverNss=4 --clientNss=4 --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=MinstrelHt --standard=802.11ac --serverChannelWidth=20 --clientChannelWidth=20 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=1 --clientNss=1 --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=MinstrelHt --standard=802.11ac --serverChannelWidth=20 --clientChannelWidth=20 --serverShortGuardInterval=400 --clientShortGuardInterval=400 --serverNss=1 --clientNss=1 --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=MinstrelHt --standard=802.11ac --serverChannelWidth=40 --clientChannelWidth=40 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=1 --clientNss=1 --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=MinstrelHt --standard=802.11ac --serverChannelWidth=40 --clientChannelWidth=40 --serverShortGuardInterval=400 --clientShortGuardInterval=400 --serverNss=1 --clientNss=1 --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=MinstrelHt --standard=802.11ac --serverChannelWidth=80 --clientChannelWidth=80 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=1 --clientNss=1 --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=MinstrelHt --standard=802.11ac --serverChannelWidth=80 --clientChannelWidth=80 --serverShortGuardInterval=400 --clientShortGuardInterval=400 --serverNss=1 --clientNss=1 --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=MinstrelHt --standard=802.11ac --serverChannelWidth=160 --clientChannelWidth=160 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=1 --clientNss=1 --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=MinstrelHt --standard=802.11ac --serverChannelWidth=160 --clientChannelWidth=160 --serverShortGuardInterval=400 --clientShortGuardInterval=400 --serverNss=1 --clientNss=1 --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=MinstrelHt --standard=802.11ac --serverChannelWidth=20 --clientChannelWidth=20 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=2 --clientNss=2 --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=MinstrelHt --standard=802.11ac --serverChannelWidth=20 --clientChannelWidth=20 --serverShortGuardInterval=400 --clientShortGuardInterval=400 --serverNss=2 --clientNss=2 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=MinstrelHt --standard=802.11ac --serverChannelWidth=40 --clientChannelWidth=40 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=2 --clientNss=2 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=MinstrelHt --standard=802.11ac --serverChannelWidth=40 --clientChannelWidth=40 --serverShortGuardInterval=400 --clientShortGuardInterval=400 --serverNss=2 --clientNss=2 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=MinstrelHt --standard=802.11ac --serverChannelWidth=80 --clientChannelWidth=80 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=2 --clientNss=2 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=MinstrelHt --standard=802.11ac --serverChannelWidth=80 --clientChannelWidth=80 --serverShortGuardInterval=400 --clientShortGuardInterval=400 --serverNss=2 --clientNss=2 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=MinstrelHt --standard=802.11ac --serverChannelWidth=160 --clientChannelWidth=160 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=2 --clientNss=2 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=MinstrelHt --standard=802.11ac --serverChannelWidth=160 --clientChannelWidth=160 --serverShortGuardInterval=400 --clientShortGuardInterval=400 --serverNss=2 --clientNss=2 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=MinstrelHt --standard=802.11ac --serverChannelWidth=20 --clientChannelWidth=20 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=3 --clientNss=3 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=MinstrelHt --standard=802.11ac --serverChannelWidth=20 --clientChannelWidth=20 --serverShortGuardInterval=400 --clientShortGuardInterval=400 --serverNss=3 --clientNss=3 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=MinstrelHt --standard=802.11ac --serverChannelWidth=40 --clientChannelWidth=40 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=3 --clientNss=3 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=MinstrelHt --standard=802.11ac --serverChannelWidth=40 --clientChannelWidth=40 --serverShortGuardInterval=400 --clientShortGuardInterval=400 --serverNss=3 --clientNss=3 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=MinstrelHt --standard=802.11ac --serverChannelWidth=80 --clientChannelWidth=80 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=3 --clientNss=3 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=MinstrelHt --standard=802.11ac --serverChannelWidth=80 --clientChannelWidth=80 --serverShortGuardInterval=400 --clientShortGuardInterval=400 --serverNss=3 --clientNss=3 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=MinstrelHt --standard=802.11ac --serverChannelWidth=160 --clientChannelWidth=160 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=3 --clientNss=3 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=MinstrelHt --standard=802.11ac --serverChannelWidth=160 --clientChannelWidth=160 --serverShortGuardInterval=400 --clientShortGuardInterval=400 --serverNss=3 --clientNss=3 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=MinstrelHt --standard=802.11ac --serverChannelWidth=20 --clientChannelWidth=20 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=4 --clientNss=4 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=MinstrelHt --standard=802.11ac --serverChannelWidth=20 --clientChannelWidth=20 --serverShortGuardInterval=400 --clientShortGuardInterval=400 --serverNss=4 --clientNss=4 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=MinstrelHt --standard=802.11ac --serverChannelWidth=40 --clientChannelWidth=40 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=4 --clientNss=4 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=MinstrelHt --standard=802.11ac --serverChannelWidth=40 --clientChannelWidth=40 --serverShortGuardInterval=400 --clientShortGuardInterval=400 --serverNss=4 --clientNss=4 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=MinstrelHt --standard=802.11ac --serverChannelWidth=80 --clientChannelWidth=80 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=4 --clientNss=4 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=MinstrelHt --standard=802.11ac --serverChannelWidth=80 --clientChannelWidth=80 --serverShortGuardInterval=400 --clientShortGuardInterval=400 --serverNss=4 --clientNss=4 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=MinstrelHt --standard=802.11ac --serverChannelWidth=160 --clientChannelWidth=160 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=4 --clientNss=4 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=MinstrelHt --standard=802.11ac --serverChannelWidth=160 --clientChannelWidth=160 --serverShortGuardInterval=400 --clientShortGuardInterval=400 --serverNss=4 --clientNss=4 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11a --stepTime=0.1", "True", "True"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11b --serverChannelWidth=22 --clientChannelWidth=22 --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11g --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11-holland --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11-10MHz --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11-5MHz --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11n-5GHz --serverChannelWidth=20 --clientChannelWidth=20 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=1 --clientNss=1 --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11n-5GHz --serverChannelWidth=20 --clientChannelWidth=20 --serverShortGuardInterval=400 --clientShortGuardInterval=400 --serverNss=1 --clientNss=1 --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11n-5GHz --serverChannelWidth=40 --clientChannelWidth=40 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=1 --clientNss=1 --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11n-5GHz --serverChannelWidth=40 --clientChannelWidth=40 --serverShortGuardInterval=400 --clientShortGuardInterval=400 --serverNss=1 --clientNss=1 --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11n-5GHz --serverChannelWidth=20 --clientChannelWidth=20 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=2 --clientNss=2 --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11n-5GHz --serverChannelWidth=20 --clientChannelWidth=20 --serverShortGuardInterval=400 --clientShortGuardInterval=400 --serverNss=2 --clientNss=2 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11n-5GHz --serverChannelWidth=40 --clientChannelWidth=40 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=2 --clientNss=2 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11n-5GHz --serverChannelWidth=40 --clientChannelWidth=40 --serverShortGuardInterval=400 --clientShortGuardInterval=400 --serverNss=2 --clientNss=2 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11n-5GHz --serverChannelWidth=20 --clientChannelWidth=20 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=3 --clientNss=3 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11n-5GHz --serverChannelWidth=20 --clientChannelWidth=20 --serverShortGuardInterval=400 --clientShortGuardInterval=400 --serverNss=3 --clientNss=3 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11n-5GHz --serverChannelWidth=40 --clientChannelWidth=40 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=3 --clientNss=3 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11n-5GHz --serverChannelWidth=40 --clientChannelWidth=40 --serverShortGuardInterval=400 --clientShortGuardInterval=400 --serverNss=3 --clientNss=3 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11n-5GHz --serverChannelWidth=20 --clientChannelWidth=20 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=4 --clientNss=4 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11n-5GHz --serverChannelWidth=20 --clientChannelWidth=20 --serverShortGuardInterval=400 --clientShortGuardInterval=400 --serverNss=4 --clientNss=4 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11n-5GHz --serverChannelWidth=40 --clientChannelWidth=40 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=4 --clientNss=4 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11n-5GHz --serverChannelWidth=40 --clientChannelWidth=40 --serverShortGuardInterval=400 --clientShortGuardInterval=400 --serverNss=4 --clientNss=4 --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11n-2.4GHz --serverChannelWidth=20 --clientChannelWidth=20 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=1 --clientNss=1 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11n-2.4GHz --serverChannelWidth=20 --clientChannelWidth=20 --serverShortGuardInterval=400 --clientShortGuardInterval=400 --serverNss=1 --clientNss=1 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11n-2.4GHz --serverChannelWidth=40 --clientChannelWidth=40 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=1 --clientNss=1 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11n-2.4GHz --serverChannelWidth=40 --clientChannelWidth=40 --serverShortGuardInterval=400 --clientShortGuardInterval=400 --serverNss=1 --clientNss=1 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11n-2.4GHz --serverChannelWidth=20 --clientChannelWidth=20 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=2 --clientNss=2 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11n-2.4GHz --serverChannelWidth=20 --clientChannelWidth=20 --serverShortGuardInterval=400 --clientShortGuardInterval=400 --serverNss=2 --clientNss=2 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11n-2.4GHz --serverChannelWidth=40 --clientChannelWidth=40 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=2 --clientNss=2 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11n-2.4GHz --serverChannelWidth=40 --clientChannelWidth=40 --serverShortGuardInterval=400 --clientShortGuardInterval=400 --serverNss=2 --clientNss=2 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11n-2.4GHz --serverChannelWidth=20 --clientChannelWidth=20 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=3 --clientNss=3 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11n-2.4GHz --serverChannelWidth=20 --clientChannelWidth=20 --serverShortGuardInterval=400 --clientShortGuardInterval=400 --serverNss=3 --clientNss=3 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11n-2.4GHz --serverChannelWidth=40 --clientChannelWidth=40 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=3 --clientNss=3 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11n-2.4GHz --serverChannelWidth=40 --clientChannelWidth=40 --serverShortGuardInterval=400 --clientShortGuardInterval=400 --serverNss=3 --clientNss=3 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11n-2.4GHz --serverChannelWidth=20 --clientChannelWidth=20 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=4 --clientNss=4 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11n-2.4GHz --serverChannelWidth=20 --clientChannelWidth=20 --serverShortGuardInterval=400 --clientShortGuardInterval=400 --serverNss=4 --clientNss=4 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11n-2.4GHz --serverChannelWidth=40 --clientChannelWidth=40 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=4 --clientNss=4 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11n-2.4GHz --serverChannelWidth=40 --clientChannelWidth=40 --serverShortGuardInterval=400 --clientShortGuardInterval=400 --serverNss=4 --clientNss=4 --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ac --serverChannelWidth=20 --clientChannelWidth=20 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=1 --clientNss=1 --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ac --serverChannelWidth=20 --clientChannelWidth=20 --serverShortGuardInterval=400 --clientShortGuardInterval=400 --serverNss=1 --clientNss=1 --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ac --serverChannelWidth=40 --clientChannelWidth=40 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=1 --clientNss=1 --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ac --serverChannelWidth=40 --clientChannelWidth=40 --serverShortGuardInterval=400 --clientShortGuardInterval=400 --serverNss=1 --clientNss=1 --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ac --serverChannelWidth=80 --clientChannelWidth=80 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=1 --clientNss=1 --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ac --serverChannelWidth=80 --clientChannelWidth=80 --serverShortGuardInterval=400 --clientShortGuardInterval=400 --serverNss=1 --clientNss=1 --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ac --serverChannelWidth=160 --clientChannelWidth=160 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=1 --clientNss=1 --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ac --serverChannelWidth=160 --clientChannelWidth=160 --serverShortGuardInterval=400 --clientShortGuardInterval=400 --serverNss=1 --clientNss=1 --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ac --serverChannelWidth=20 --clientChannelWidth=20 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=2 --clientNss=2 --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ac --serverChannelWidth=20 --clientChannelWidth=20 --serverShortGuardInterval=400 --clientShortGuardInterval=400 --serverNss=2 --clientNss=2 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ac --serverChannelWidth=40 --clientChannelWidth=40 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=2 --clientNss=2 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ac --serverChannelWidth=40 --clientChannelWidth=40 --serverShortGuardInterval=400 --clientShortGuardInterval=400 --serverNss=2 --clientNss=2 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ac --serverChannelWidth=80 --clientChannelWidth=80 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=2 --clientNss=2 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ac --serverChannelWidth=80 --clientChannelWidth=80 --serverShortGuardInterval=400 --clientShortGuardInterval=400 --serverNss=2 --clientNss=2 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ac --serverChannelWidth=160 --clientChannelWidth=160 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=2 --clientNss=2 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ac --serverChannelWidth=160 --clientChannelWidth=160 --serverShortGuardInterval=400 --clientShortGuardInterval=400 --serverNss=2 --clientNss=2 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ac --serverChannelWidth=20 --clientChannelWidth=20 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=3 --clientNss=3 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ac --serverChannelWidth=20 --clientChannelWidth=20 --serverShortGuardInterval=400 --clientShortGuardInterval=400 --serverNss=3 --clientNss=3 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ac --serverChannelWidth=40 --clientChannelWidth=40 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=3 --clientNss=3 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ac --serverChannelWidth=40 --clientChannelWidth=40 --serverShortGuardInterval=400 --clientShortGuardInterval=400 --serverNss=3 --clientNss=3 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ac --serverChannelWidth=80 --clientChannelWidth=80 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=3 --clientNss=3 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ac --serverChannelWidth=80 --clientChannelWidth=80 --serverShortGuardInterval=400 --clientShortGuardInterval=400 --serverNss=3 --clientNss=3 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ac --serverChannelWidth=160 --clientChannelWidth=160 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=3 --clientNss=3 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ac --serverChannelWidth=160 --clientChannelWidth=160 --serverShortGuardInterval=400 --clientShortGuardInterval=400 --serverNss=3 --clientNss=3 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ac --serverChannelWidth=20 --clientChannelWidth=20 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=4 --clientNss=4 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ac --serverChannelWidth=20 --clientChannelWidth=20 --serverShortGuardInterval=400 --clientShortGuardInterval=400 --serverNss=4 --clientNss=4 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ac --serverChannelWidth=40 --clientChannelWidth=40 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=4 --clientNss=4 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ac --serverChannelWidth=40 --clientChannelWidth=40 --serverShortGuardInterval=400 --clientShortGuardInterval=400 --serverNss=4 --clientNss=4 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ac --serverChannelWidth=80 --clientChannelWidth=80 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=4 --clientNss=4 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ac --serverChannelWidth=80 --clientChannelWidth=80 --serverShortGuardInterval=400 --clientShortGuardInterval=400 --serverNss=4 --clientNss=4 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ac --serverChannelWidth=160 --clientChannelWidth=160 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=4 --clientNss=4 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ac --serverChannelWidth=160 --clientChannelWidth=160 --serverShortGuardInterval=400 --clientShortGuardInterval=400 --serverNss=4 --clientNss=4 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ax-5GHz --serverChannelWidth=20 --clientChannelWidth=20 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=1 --clientNss=1 --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ax-5GHz --serverChannelWidth=20 --clientChannelWidth=20 --serverShortGuardInterval=1600 --clientShortGuardInterval=1600 --serverNss=1 --clientNss=1 --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ax-5GHz --serverChannelWidth=20 --clientChannelWidth=20 --serverShortGuardInterval=3200 --clientShortGuardInterval=3200 --serverNss=1 --clientNss=1 --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ax-5GHz --serverChannelWidth=40 --clientChannelWidth=40 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=1 --clientNss=1 --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ax-5GHz --serverChannelWidth=40 --clientChannelWidth=40 --serverShortGuardInterval=1600 --clientShortGuardInterval=1600 --serverNss=1 --clientNss=1 --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ax-5GHz --serverChannelWidth=40 --clientChannelWidth=40 --serverShortGuardInterval=3200 --clientShortGuardInterval=3200 --serverNss=1 --clientNss=1 --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ax-5GHz --serverChannelWidth=80 --clientChannelWidth=80 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=1 --clientNss=1 --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ax-5GHz --serverChannelWidth=80 --clientChannelWidth=80 --serverShortGuardInterval=1600 --clientShortGuardInterval=1600 --serverNss=1 --clientNss=1 --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ax-5GHz --serverChannelWidth=80 --clientChannelWidth=80 --serverShortGuardInterval=3200 --clientShortGuardInterval=3200 --serverNss=1 --clientNss=1 --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ax-5GHz --serverChannelWidth=160 --clientChannelWidth=160 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=1 --clientNss=1 --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ax-5GHz --serverChannelWidth=160 --clientChannelWidth=160 --serverShortGuardInterval=1600 --clientShortGuardInterval=1600 --serverNss=1 --clientNss=1 --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ax-5GHz --serverChannelWidth=160 --clientChannelWidth=160 --serverShortGuardInterval=3200 --clientShortGuardInterval=3200 --serverNss=1 --clientNss=1 --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ax-5GHz --serverChannelWidth=20 --clientChannelWidth=20 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=2 --clientNss=2 --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ax-5GHz --serverChannelWidth=20 --clientChannelWidth=20 --serverShortGuardInterval=1600 --clientShortGuardInterval=1600 --serverNss=2 --clientNss=2 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ax-5GHz --serverChannelWidth=20 --clientChannelWidth=20 --serverShortGuardInterval=3200 --clientShortGuardInterval=3200 --serverNss=2 --clientNss=2 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ax-5GHz --serverChannelWidth=40 --clientChannelWidth=40 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=2 --clientNss=2 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ax-5GHz --serverChannelWidth=40 --clientChannelWidth=40 --serverShortGuardInterval=1600 --clientShortGuardInterval=1600 --serverNss=2 --clientNss=2 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ax-5GHz --serverChannelWidth=40 --clientChannelWidth=40 --serverShortGuardInterval=3200 --clientShortGuardInterval=3200 --serverNss=2 --clientNss=2 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ax-5GHz --serverChannelWidth=80 --clientChannelWidth=80 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=2 --clientNss=2 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ax-5GHz --serverChannelWidth=80 --clientChannelWidth=80 --serverShortGuardInterval=1600 --clientShortGuardInterval=1600 --serverNss=2 --clientNss=2 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ax-5GHz --serverChannelWidth=80 --clientChannelWidth=80 --serverShortGuardInterval=3200 --clientShortGuardInterval=3200 --serverNss=2 --clientNss=2 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ax-5GHz --serverChannelWidth=160 --clientChannelWidth=160 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=2 --clientNss=2 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ax-5GHz --serverChannelWidth=160 --clientChannelWidth=160 --serverShortGuardInterval=1600 --clientShortGuardInterval=1600 --serverNss=2 --clientNss=2 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ax-5GHz --serverChannelWidth=160 --clientChannelWidth=160 --serverShortGuardInterval=3200 --clientShortGuardInterval=3200 --serverNss=2 --clientNss=2 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ax-5GHz --serverChannelWidth=20 --clientChannelWidth=20 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=3 --clientNss=3 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ax-5GHz --serverChannelWidth=20 --clientChannelWidth=20 --serverShortGuardInterval=1600 --clientShortGuardInterval=1600 --serverNss=3 --clientNss=3 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ax-5GHz --serverChannelWidth=20 --clientChannelWidth=20 --serverShortGuardInterval=3200 --clientShortGuardInterval=3200 --serverNss=3 --clientNss=3 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ax-5GHz --serverChannelWidth=40 --clientChannelWidth=40 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=3 --clientNss=3 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ax-5GHz --serverChannelWidth=40 --clientChannelWidth=40 --serverShortGuardInterval=1600 --clientShortGuardInterval=1600 --serverNss=3 --clientNss=3 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ax-5GHz --serverChannelWidth=40 --clientChannelWidth=40 --serverShortGuardInterval=3200 --clientShortGuardInterval=3200 --serverNss=3 --clientNss=3 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ax-5GHz --serverChannelWidth=80 --clientChannelWidth=80 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=3 --clientNss=3 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ax-5GHz --serverChannelWidth=80 --clientChannelWidth=80 --serverShortGuardInterval=1600 --clientShortGuardInterval=1600 --serverNss=3 --clientNss=3 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ax-5GHz --serverChannelWidth=80 --clientChannelWidth=80 --serverShortGuardInterval=3200 --clientShortGuardInterval=3200 --serverNss=3 --clientNss=3 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ax-5GHz --serverChannelWidth=160 --clientChannelWidth=160 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=3 --clientNss=3 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ax-5GHz --serverChannelWidth=160 --clientChannelWidth=160 --serverShortGuardInterval=1600 --clientShortGuardInterval=1600 --serverNss=3 --clientNss=3 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ax-5GHz --serverChannelWidth=160 --clientChannelWidth=160 --serverShortGuardInterval=3200 --clientShortGuardInterval=3200 --serverNss=3 --clientNss=3 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ax-5GHz --serverChannelWidth=20 --clientChannelWidth=20 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=4 --clientNss=4 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ax-5GHz --serverChannelWidth=20 --clientChannelWidth=20 --serverShortGuardInterval=1600 --clientShortGuardInterval=1600 --serverNss=4 --clientNss=4 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ax-5GHz --serverChannelWidth=20 --clientChannelWidth=20 --serverShortGuardInterval=3200 --clientShortGuardInterval=3200 --serverNss=4 --clientNss=4 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ax-5GHz --serverChannelWidth=40 --clientChannelWidth=40 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=4 --clientNss=4 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ax-5GHz --serverChannelWidth=40 --clientChannelWidth=40 --serverShortGuardInterval=1600 --clientShortGuardInterval=1600 --serverNss=4 --clientNss=4 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ax-5GHz --serverChannelWidth=40 --clientChannelWidth=40 --serverShortGuardInterval=3200 --clientShortGuardInterval=3200 --serverNss=4 --clientNss=4 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ax-5GHz --serverChannelWidth=80 --clientChannelWidth=80 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=4 --clientNss=4 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ax-5GHz --serverChannelWidth=80 --clientChannelWidth=80 --serverShortGuardInterval=1600 --clientShortGuardInterval=1600 --serverNss=4 --clientNss=4 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ax-5GHz --serverChannelWidth=80 --clientChannelWidth=80 --serverShortGuardInterval=3200 --clientShortGuardInterval=3200 --serverNss=4 --clientNss=4 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ax-5GHz --serverChannelWidth=160 --clientChannelWidth=160 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=4 --clientNss=4 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ax-5GHz --serverChannelWidth=160 --clientChannelWidth=160 --serverShortGuardInterval=1600 --clientShortGuardInterval=1600 --serverNss=4 --clientNss=4 --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ax-5GHz --serverChannelWidth=160 --clientChannelWidth=160 --serverShortGuardInterval=3200 --clientShortGuardInterval=3200 --serverNss=4 --clientNss=4 --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ax-2.4GHz --serverChannelWidth=20 --clientChannelWidth=20 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=1 --clientNss=1 --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ax-2.4GHz --serverChannelWidth=20 --clientChannelWidth=20 --serverShortGuardInterval=1600 --clientShortGuardInterval=1600 --serverNss=1 --clientNss=1 --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ax-2.4GHz --serverChannelWidth=20 --clientChannelWidth=20 --serverShortGuardInterval=3200 --clientShortGuardInterval=3200 --serverNss=1 --clientNss=1 --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ax-2.4GHz --serverChannelWidth=40 --clientChannelWidth=40 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=1 --clientNss=1 --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ax-2.4GHz --serverChannelWidth=40 --clientChannelWidth=40 --serverShortGuardInterval=1600 --clientShortGuardInterval=1600 --serverNss=1 --clientNss=1 --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ax-2.4GHz --serverChannelWidth=40 --clientChannelWidth=40 --serverShortGuardInterval=3200 --clientShortGuardInterval=3200 --serverNss=1 --clientNss=1 --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ax-2.4GHz --serverChannelWidth=20 --clientChannelWidth=20 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=2 --clientNss=2 --stepTime=0.1", "True", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ax-2.4GHz --serverChannelWidth=20 --clientChannelWidth=20 --serverShortGuardInterval=1600 --clientShortGuardInterval=1600 --serverNss=2 --clientNss=2 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ax-2.4GHz --serverChannelWidth=20 --clientChannelWidth=20 --serverShortGuardInterval=3200 --clientShortGuardInterval=3200 --serverNss=2 --clientNss=2 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ax-2.4GHz --serverChannelWidth=40 --clientChannelWidth=40 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=2 --clientNss=2 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ax-2.4GHz --serverChannelWidth=40 --clientChannelWidth=40 --serverShortGuardInterval=1600 --clientShortGuardInterval=1600 --serverNss=2 --clientNss=2 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ax-2.4GHz --serverChannelWidth=40 --clientChannelWidth=40 --serverShortGuardInterval=3200 --clientShortGuardInterval=3200 --serverNss=2 --clientNss=2 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ax-2.4GHz --serverChannelWidth=20 --clientChannelWidth=20 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=3 --clientNss=3 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ax-2.4GHz --serverChannelWidth=20 --clientChannelWidth=20 --serverShortGuardInterval=1600 --clientShortGuardInterval=1600 --serverNss=3 --clientNss=3 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ax-2.4GHz --serverChannelWidth=20 --clientChannelWidth=20 --serverShortGuardInterval=3200 --clientShortGuardInterval=3200 --serverNss=3 --clientNss=3 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ax-2.4GHz --serverChannelWidth=40 --clientChannelWidth=40 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=3 --clientNss=3 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ax-2.4GHz --serverChannelWidth=40 --clientChannelWidth=40 --serverShortGuardInterval=1600 --clientShortGuardInterval=1600 --serverNss=3 --clientNss=3 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ax-2.4GHz --serverChannelWidth=40 --clientChannelWidth=40 --serverShortGuardInterval=3200 --clientShortGuardInterval=3200 --serverNss=3 --clientNss=3 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ax-2.4GHz --serverChannelWidth=20 --clientChannelWidth=20 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=4 --clientNss=4 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ax-2.4GHz --serverChannelWidth=20 --clientChannelWidth=20 --serverShortGuardInterval=1600 --clientShortGuardInterval=1600 --serverNss=4 --clientNss=4 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ax-2.4GHz --serverChannelWidth=20 --clientChannelWidth=20 --serverShortGuardInterval=3200 --clientShortGuardInterval=3200 --serverNss=4 --clientNss=4 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ax-2.4GHz --serverChannelWidth=40 --clientChannelWidth=40 --serverShortGuardInterval=800 --clientShortGuardInterval=800 --serverNss=4 --clientNss=4 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ax-2.4GHz --serverChannelWidth=40 --clientChannelWidth=40 --serverShortGuardInterval=1600 --clientShortGuardInterval=1600 --serverNss=4 --clientNss=4 --stepTime=0.1", "False", "False"),
<     ("wifi-manager-example --wifiManager=Ideal --standard=802.11ax-2.4GHz --serverChannelWidth=40 --clientChannelWidth=40 --serverShortGuardInterval=3200 --clientShortGuardInterval=3200 --serverNss=4 --clientNss=4 --stepTime=0.1", "False", "False"),
<     ("wifi-test-interference-helper --enableCapture=0 --txPowerA=5 --txPowerB=15 --delay=10 --txModeA=OfdmRate6Mbps --txModeB=OfdmRate6Mbps --checkResults=1 --expectRxASuccessfull=0 --expectRxBSuccessfull=0", "True", "True"),
<     ("wifi-test-interference-helper --enableCapture=0 --txPowerA=5 --txPowerB=15  --delay=17 --standard=WIFI_PHY_STANDARD_80211ac --preamble=WIFI_PREAMBLE_VHT_SU --txModeA=VhtMcs0 --txModeB=VhtMcs0 --checkResults=1 --expectRxASuccessfull=0 --expectRxBSuccessfull=0", "True", "True"),
<     ("wifi-test-interference-helper --enableCapture=0 --txPowerA=5 --txPowerB=15  --delay=20 --standard=WIFI_PHY_STANDARD_80211ac --preamble=WIFI_PREAMBLE_VHT_SU --txModeA=VhtMcs0 --txModeB=VhtMcs0 --checkResults=1 --expectRxASuccessfull=0 --expectRxBSuccessfull=0", "True", "True"),
<     ("wifi-test-interference-helper --enableCapture=0 --txPowerA=5 --txPowerB=15  --delay=30 --standard=WIFI_PHY_STANDARD_80211ac --preamble=WIFI_PREAMBLE_VHT_SU --txModeA=VhtMcs0 --txModeB=VhtMcs0 --checkResults=1 --expectRxASuccessfull=0 --expectRxBSuccessfull=0", "True", "True"),
<     ("wifi-test-interference-helper --enableCapture=1 --txPowerA=5 --txPowerB=15 --delay=10 --txModeA=OfdmRate6Mbps --txModeB=OfdmRate6Mbps --checkResults=1 --expectRxASuccessfull=0 --expectRxBSuccessfull=1", "True", "False"),
<     ("wifi-bianchi --validate --phyRate=54 --nMinStas=5 --nMaxStas=10 --duration=5", "False", "False"), # TODO: run from N=5 to N=50 for 100s (TAKES_FOREVER) when issue #170 is fixed
<     ("wifi-bianchi --validate --phyRate=6 --nMinStas=5 --nMaxStas=10 --duration=15", "True", "False"), # TODO: run from N=5 to N=50 for 400s (TAKES_FOREVER) when issue #170 is fixed
<     ("wifi-bianchi --validate --phyRate=54 --nMinStas=5 --nMaxStas=10 --duration=5 --infra", "False", "False"), # TODO: run from N=5 to N=50 for 100s (TAKES_FOREVER) when issue #170 is fixed
<     ("wifi-bianchi --validate --phyRate=6 --nMinStas=5 --nMaxStas=10 --duration=20 --infra", "False", "False"), # TODO: run from N=5 to N=50 for 600s (TAKES_FOREVER) when issue #170 is fixed
< ]
---
> cpp_examples = []
Only in ../../NS3-WiGig/src/wifi/test: inter-bss-test-suite.cc
diff ../../NS3-WiGig/src/wifi/test/power-rate-adaptation-test.cc ../../ns-3-dev/src/wifi/test/power-rate-adaptation-test.cc
21d20
< #include "ns3/node.h"
24d22
< #include "ns3/yans-wifi-phy.h"
25a24,29
> #include "ns3/yans-wifi-phy.h"
> #include "ns3/parf-wifi-manager.h"
> #include "ns3/propagation-delay-model.h"
> #include "ns3/propagation-loss-model.h"
> #include "ns3/error-rate-model.h"
> #include "ns3/yans-error-rate-model.h"
26a31
> #include "ns3/node.h"
28a34,41
> #include "ns3/object-factory.h"
> #include "ns3/dca-txop.h"
> #include "ns3/mac-rx-middle.h"
> #include "ns3/pointer.h"
> #include "ns3/rng-seed-manager.h"
> #include "ns3/edca-txop-n.h"
> #include "ns3/config.h"
> #include "ns3/boolean.h"
32,37d44
< /**
<  * \ingroup wifi-test
<  * \ingroup tests
<  *
<  * \brief Power Rate Adaptation Test
<  */
45d51
<   /// Test parf function
47d52
<   /// Test aparf function
49,54d53
<   /// Test rrpaa function
<   void TestRrpaa ();
<   /**
<    * Configure nde function
<    * \returns the node
<    */
57c56
<   ObjectFactory m_manager; ///< manager
---
>   ObjectFactory m_manager;
76d74
<   Ptr<WifiNetDevice> dev = CreateObject<WifiNetDevice> ();
78d75
<   mac->SetDevice (dev);
88a86
>   Ptr<WifiNetDevice> dev = CreateObject<WifiNetDevice> ();
139,140c137
<   packetHeader.SetAddr1 (remoteAddress);
<   packetHeader.SetType (WIFI_MAC_DATA);
---
>   packetHeader.SetTypeData ();
156c153
<   WifiTxVector txVector = manager->GetDataTxVector (packetHeader);
---
>   WifiTxVector txVector = manager->GetDataTxVector (remoteAddress, &packetHeader, packet);
160c157
<   NS_TEST_ASSERT_MSG_EQ (mode.GetDataRate (txVector.GetChannelWidth ()), 54000000, "PARF: Initial data rate wrong");
---
>   NS_TEST_ASSERT_MSG_EQ (mode.GetDataRate (txVector.GetChannelWidth (), txVector.IsShortGuardInterval (), 1), 54000000, "PARF: Initial data rate wrong");
171c168
<       manager->ReportDataOk (remoteAddress, &packetHeader, 0, ackMode, 0, txVector, packet->GetSize ());
---
>       manager->ReportDataOk (remoteAddress, &packetHeader, 0, ackMode, 0);
174c171
<   txVector = manager->GetDataTxVector (packetHeader);
---
>   txVector = manager->GetDataTxVector (remoteAddress, &packetHeader, packet);
178c175
<   NS_TEST_ASSERT_MSG_EQ (mode.GetDataRate (txVector.GetChannelWidth ()), 54000000, "PARF: Incorrect vale of data rate");
---
>   NS_TEST_ASSERT_MSG_EQ (mode.GetDataRate (txVector.GetChannelWidth (), txVector.IsShortGuardInterval (), 1), 54000000, "PARF: Incorrect vale of data rate");
187c184
<   manager->ReportDataFailed (remoteAddress, &packetHeader, packet->GetSize ());
---
>   manager->ReportDataFailed (remoteAddress, &packetHeader);
189c186
<   txVector = manager->GetDataTxVector (packetHeader);
---
>   txVector = manager->GetDataTxVector (remoteAddress, &packetHeader, packet);
193c190
<   NS_TEST_ASSERT_MSG_EQ (mode.GetDataRate (txVector.GetChannelWidth ()), 54000000, "PARF: Incorrect vale of data rate");
---
>   NS_TEST_ASSERT_MSG_EQ (mode.GetDataRate (txVector.GetChannelWidth (), txVector.IsShortGuardInterval (), 1), 54000000, "PARF: Incorrect vale of data rate");
204,205c201,202
<       manager->ReportDataOk (remoteAddress, &packetHeader, 0, ackMode, 0, txVector, packet->GetSize ());
<       manager->ReportDataFailed (remoteAddress, &packetHeader, packet->GetSize ());
---
>       manager->ReportDataOk (remoteAddress, &packetHeader, 0, ackMode, 0);
>       manager->ReportDataFailed (remoteAddress, &packetHeader);
207c204
<   manager->ReportDataOk (remoteAddress, &packetHeader, 0, ackMode, 0, txVector, packet->GetSize ());
---
>   manager->ReportDataOk (remoteAddress, &packetHeader, 0, ackMode, 0);
209c206
<   txVector = manager->GetDataTxVector (packetHeader);
---
>   txVector = manager->GetDataTxVector (remoteAddress, &packetHeader, packet);
213c210
<   NS_TEST_ASSERT_MSG_EQ (mode.GetDataRate (txVector.GetChannelWidth ()), 54000000, "PARF: Incorrect vale of data rate");
---
>   NS_TEST_ASSERT_MSG_EQ (mode.GetDataRate (txVector.GetChannelWidth (), txVector.IsShortGuardInterval (), 1), 54000000, "PARF: Incorrect vale of data rate");
222c219
<   manager->ReportDataFailed (remoteAddress, &packetHeader, packet->GetSize ());
---
>   manager->ReportDataFailed (remoteAddress, &packetHeader);
224c221
<   txVector = manager->GetDataTxVector (packetHeader);
---
>   txVector = manager->GetDataTxVector (remoteAddress, &packetHeader, packet);
228c225
<   NS_TEST_ASSERT_MSG_EQ (mode.GetDataRate (txVector.GetChannelWidth ()), 54000000, "PARF: Incorrect vale of data rate");
---
>   NS_TEST_ASSERT_MSG_EQ (mode.GetDataRate (txVector.GetChannelWidth (), txVector.IsShortGuardInterval (), 1), 54000000, "PARF: Incorrect vale of data rate");
237,238c234,235
<   manager->ReportDataFailed (remoteAddress, &packetHeader, packet->GetSize ());
<   manager->ReportDataFailed (remoteAddress, &packetHeader, packet->GetSize ());
---
>   manager->ReportDataFailed (remoteAddress, &packetHeader);
>   manager->ReportDataFailed (remoteAddress, &packetHeader);
240c237
<   txVector = manager->GetDataTxVector (packetHeader);
---
>   txVector = manager->GetDataTxVector (remoteAddress, &packetHeader, packet);
244c241
<   NS_TEST_ASSERT_MSG_EQ (mode.GetDataRate (txVector.GetChannelWidth ()), 48000000, "PARF: Incorrect vale of data rate");
---
>   NS_TEST_ASSERT_MSG_EQ (mode.GetDataRate (txVector.GetChannelWidth (), txVector.IsShortGuardInterval (), 1), 48000000, "PARF: Incorrect vale of data rate");
255c252
<       manager->ReportDataOk (remoteAddress, &packetHeader, 0, ackMode, 0, txVector, packet->GetSize ());
---
>       manager->ReportDataOk (remoteAddress, &packetHeader, 0, ackMode, 0);
258c255
<   txVector = manager->GetDataTxVector (packetHeader);
---
>   txVector = manager->GetDataTxVector (remoteAddress, &packetHeader, packet);
262c259
<   NS_TEST_ASSERT_MSG_EQ (mode.GetDataRate (txVector.GetChannelWidth ()), 54000000, "PARF: Incorrect vale of data rate");
---
>   NS_TEST_ASSERT_MSG_EQ (mode.GetDataRate (txVector.GetChannelWidth (), txVector.IsShortGuardInterval (), 1), 54000000, "PARF: Incorrect vale of data rate");
271c268
<   manager->ReportDataFailed (remoteAddress, &packetHeader, packet->GetSize ());
---
>   manager->ReportDataFailed (remoteAddress, &packetHeader);
273c270
<   txVector = manager->GetDataTxVector (packetHeader);
---
>   txVector = manager->GetDataTxVector (remoteAddress, &packetHeader, packet);
277c274
<   NS_TEST_ASSERT_MSG_EQ (mode.GetDataRate (txVector.GetChannelWidth ()), 48000000, "PARF: Incorrect vale of data rate");
---
>   NS_TEST_ASSERT_MSG_EQ (mode.GetDataRate (txVector.GetChannelWidth (), txVector.IsShortGuardInterval (), 1), 48000000, "PARF: Incorrect vale of data rate");
288c285
<       manager->ReportDataOk (remoteAddress, &packetHeader, 0, ackMode, 0, txVector, packet->GetSize ());
---
>       manager->ReportDataOk (remoteAddress, &packetHeader, 0, ackMode, 0);
291c288
<   txVector = manager->GetDataTxVector (packetHeader);
---
>   txVector = manager->GetDataTxVector (remoteAddress, &packetHeader, packet);
295c292
<   NS_TEST_ASSERT_MSG_EQ (mode.GetDataRate (txVector.GetChannelWidth ()), 54000000, "PARF: Incorrect vale of data rate");
---
>   NS_TEST_ASSERT_MSG_EQ (mode.GetDataRate (txVector.GetChannelWidth (), txVector.IsShortGuardInterval (), 1), 54000000, "PARF: Incorrect vale of data rate");
306c303
<       manager->ReportDataOk (remoteAddress, &packetHeader, 0, ackMode, 0, txVector, packet->GetSize ());
---
>       manager->ReportDataOk (remoteAddress, &packetHeader, 0, ackMode, 0);
309c306
<   txVector = manager->GetDataTxVector (packetHeader);
---
>   txVector = manager->GetDataTxVector (remoteAddress, &packetHeader, packet);
313c310
<   NS_TEST_ASSERT_MSG_EQ (mode.GetDataRate (txVector.GetChannelWidth ()), 54000000, "PARF: Incorrect vale of data rate");
---
>   NS_TEST_ASSERT_MSG_EQ (mode.GetDataRate (txVector.GetChannelWidth (), txVector.IsShortGuardInterval (), 1), 54000000, "PARF: Incorrect vale of data rate");
322c319
<   manager->ReportDataOk (remoteAddress, &packetHeader, 0, ackMode, 0, txVector, packet->GetSize ());
---
>   manager->ReportDataOk (remoteAddress, &packetHeader, 0, ackMode, 0);
326c323
<       manager->ReportDataFailed (remoteAddress,&packetHeader, packet->GetSize ());
---
>       manager->ReportDataFailed (remoteAddress,&packetHeader);
329c326
<   txVector = manager->GetDataTxVector (packetHeader);
---
>   txVector = manager->GetDataTxVector (remoteAddress, &packetHeader, packet);
333c330
<   NS_TEST_ASSERT_MSG_EQ (mode.GetDataRate (txVector.GetChannelWidth ()), 54000000, "PARF: Incorrect vale of data rate");
---
>   NS_TEST_ASSERT_MSG_EQ (mode.GetDataRate (txVector.GetChannelWidth (), txVector.IsShortGuardInterval (), 1), 54000000, "PARF: Incorrect vale of data rate");
360,361c357
<   packetHeader.SetAddr1 (remoteAddress);
<   packetHeader.SetType (WIFI_MAC_DATA);
---
>   packetHeader.SetTypeData ();
377c373
<   WifiTxVector txVector = manager->GetDataTxVector (packetHeader);
---
>   WifiTxVector txVector = manager->GetDataTxVector (remoteAddress, &packetHeader, packet);
381c377
<   NS_TEST_ASSERT_MSG_EQ (mode.GetDataRate (txVector.GetChannelWidth ()), 54000000, "APARF: Initial data rate wrong");
---
>   NS_TEST_ASSERT_MSG_EQ (mode.GetDataRate (txVector.GetChannelWidth (), txVector.IsShortGuardInterval (), 1), 54000000, "APARF: Initial data rate wrong");
393c389
<       manager->ReportDataOk (remoteAddress, &packetHeader, 0, ackMode, 0, txVector, packet->GetSize ());
---
>       manager->ReportDataOk (remoteAddress, &packetHeader, 0, ackMode, 0);
396c392
<   txVector = manager->GetDataTxVector (packetHeader);
---
>   txVector = manager->GetDataTxVector (remoteAddress, &packetHeader, packet);
400c396
<   NS_TEST_ASSERT_MSG_EQ (mode.GetDataRate (txVector.GetChannelWidth ()), 54000000, "APARF: Incorrect vale of data rate");
---
>   NS_TEST_ASSERT_MSG_EQ (mode.GetDataRate (txVector.GetChannelWidth (), txVector.IsShortGuardInterval (), 1), 54000000, "APARF: Incorrect vale of data rate");
409c405
<   manager->ReportDataFailed (remoteAddress, &packetHeader, packet->GetSize ());
---
>   manager->ReportDataFailed (remoteAddress, &packetHeader);
411c407
<   txVector = manager->GetDataTxVector (packetHeader);
---
>   txVector = manager->GetDataTxVector (remoteAddress, &packetHeader, packet);
415c411
<   NS_TEST_ASSERT_MSG_EQ (mode.GetDataRate (txVector.GetChannelWidth ()), 54000000, "APARF: Incorrect vale of data rate");
---
>   NS_TEST_ASSERT_MSG_EQ (mode.GetDataRate (txVector.GetChannelWidth (), txVector.IsShortGuardInterval (), 1), 54000000, "APARF: Incorrect vale of data rate");
427c423
<       manager->ReportDataOk (remoteAddress, &packetHeader, 0, ackMode, 0, txVector, packet->GetSize ());
---
>       manager->ReportDataOk (remoteAddress, &packetHeader, 0, ackMode, 0);
430c426
<   txVector = manager->GetDataTxVector (packetHeader);
---
>   txVector = manager->GetDataTxVector (remoteAddress, &packetHeader, packet);
434c430
<   NS_TEST_ASSERT_MSG_EQ (mode.GetDataRate (txVector.GetChannelWidth ()), 54000000, "APARF: Incorrect vale of data rate");
---
>   NS_TEST_ASSERT_MSG_EQ (mode.GetDataRate (txVector.GetChannelWidth (), txVector.IsShortGuardInterval (), 1), 54000000, "APARF: Incorrect vale of data rate");
446c442
<       manager->ReportDataOk (remoteAddress, &packetHeader, 0, ackMode, 0, txVector, packet->GetSize ());
---
>       manager->ReportDataOk (remoteAddress, &packetHeader, 0, ackMode, 0);
449c445
<   txVector = manager->GetDataTxVector (packetHeader);
---
>   txVector = manager->GetDataTxVector (remoteAddress, &packetHeader, packet);
453c449
<   NS_TEST_ASSERT_MSG_EQ (mode.GetDataRate (txVector.GetChannelWidth ()), 54000000, "APARF: Incorrect vale of data rate");
---
>   NS_TEST_ASSERT_MSG_EQ (mode.GetDataRate (txVector.GetChannelWidth (), txVector.IsShortGuardInterval (), 1), 54000000, "APARF: Incorrect vale of data rate");
464c460
<       manager->ReportDataOk (remoteAddress, &packetHeader, 0, ackMode, 0, txVector, packet->GetSize ());
---
>       manager->ReportDataOk (remoteAddress, &packetHeader, 0, ackMode, 0);
467c463
<   txVector = manager->GetDataTxVector (packetHeader);
---
>   txVector = manager->GetDataTxVector (remoteAddress, &packetHeader, packet);
471c467
<   NS_TEST_ASSERT_MSG_EQ (mode.GetDataRate (txVector.GetChannelWidth ()), 54000000, "APARF: Incorrect vale of data rate");
---
>   NS_TEST_ASSERT_MSG_EQ (mode.GetDataRate (txVector.GetChannelWidth (), txVector.IsShortGuardInterval (), 1), 54000000, "APARF: Incorrect vale of data rate");
480c476
<   manager->ReportDataFailed (remoteAddress,&packetHeader, packet->GetSize ());
---
>   manager->ReportDataFailed (remoteAddress,&packetHeader);
482c478
<   txVector = manager->GetDataTxVector (packetHeader);
---
>   txVector = manager->GetDataTxVector (remoteAddress, &packetHeader, packet);
486c482
<   NS_TEST_ASSERT_MSG_EQ (mode.GetDataRate (txVector.GetChannelWidth ()), 54000000, "Incorrect vale of data rate");
---
>   NS_TEST_ASSERT_MSG_EQ (mode.GetDataRate (txVector.GetChannelWidth (), txVector.IsShortGuardInterval (), 1), 54000000, "Incorrect vale of data rate");
497c493
<       manager->ReportDataFailed (remoteAddress,&packetHeader, packet->GetSize ());
---
>       manager->ReportDataFailed (remoteAddress,&packetHeader);
500c496
<   txVector = manager->GetDataTxVector (packetHeader);
---
>   txVector = manager->GetDataTxVector (remoteAddress, &packetHeader, packet);
504c500
<   NS_TEST_ASSERT_MSG_EQ (mode.GetDataRate (txVector.GetChannelWidth ()), 54000000, "APARF: Incorrect vale of data rate");
---
>   NS_TEST_ASSERT_MSG_EQ (mode.GetDataRate (txVector.GetChannelWidth (), txVector.IsShortGuardInterval (), 1), 54000000, "APARF: Incorrect vale of data rate");
514c510
<   manager->ReportDataFailed (remoteAddress,&packetHeader, packet->GetSize ());
---
>   manager->ReportDataFailed (remoteAddress,&packetHeader);
516c512
<   txVector = manager->GetDataTxVector (packetHeader);
---
>   txVector = manager->GetDataTxVector (remoteAddress, &packetHeader, packet);
520c516
<   NS_TEST_ASSERT_MSG_EQ (mode.GetDataRate (txVector.GetChannelWidth ()), 48000000, "Incorrect vale of data rate");
---
>   NS_TEST_ASSERT_MSG_EQ (mode.GetDataRate (txVector.GetChannelWidth (), txVector.IsShortGuardInterval (), 1), 48000000, "Incorrect vale of data rate");
531c527
<       manager->ReportDataOk (remoteAddress, &packetHeader, 0, ackMode, 0, txVector, packet->GetSize ());
---
>       manager->ReportDataOk (remoteAddress, &packetHeader, 0, ackMode, 0);
534c530
<   txVector = manager->GetDataTxVector (packetHeader);
---
>   txVector = manager->GetDataTxVector (remoteAddress, &packetHeader, packet);
538c534
<   NS_TEST_ASSERT_MSG_EQ (mode.GetDataRate (txVector.GetChannelWidth ()), 48000000, "APARF: Incorrect vale of data rate");
---
>   NS_TEST_ASSERT_MSG_EQ (mode.GetDataRate (txVector.GetChannelWidth (), txVector.IsShortGuardInterval (), 1), 48000000, "APARF: Incorrect vale of data rate");
545c541
<    * After 10 power changes critical rate is reset.
---
>    * After 10 power changes critical rate is reseted.
551c547
<       manager->ReportDataOk (remoteAddress, &packetHeader, 0, ackMode, 0, txVector, packet->GetSize ());
---
>       manager->ReportDataOk (remoteAddress, &packetHeader, 0, ackMode, 0);
554c550
<   txVector = manager->GetDataTxVector (packetHeader);
---
>   txVector = manager->GetDataTxVector (remoteAddress, &packetHeader, packet);
558c554
<   NS_TEST_ASSERT_MSG_EQ (mode.GetDataRate (txVector.GetChannelWidth ()), 48000000, "APARF: Incorrect vale of data rate");
---
>   NS_TEST_ASSERT_MSG_EQ (mode.GetDataRate (txVector.GetChannelWidth (), txVector.IsShortGuardInterval (), 1), 48000000, "APARF: Incorrect vale of data rate");
563c559
<       manager->ReportDataOk (remoteAddress, &packetHeader, 0, ackMode, 0, txVector, packet->GetSize ());
---
>       manager->ReportDataOk (remoteAddress, &packetHeader, 0, ackMode, 0);
566c562
<   txVector = manager->GetDataTxVector (packetHeader);
---
>   txVector = manager->GetDataTxVector (remoteAddress, &packetHeader, packet);
570c566
<   NS_TEST_ASSERT_MSG_EQ (mode.GetDataRate (txVector.GetChannelWidth ()), 54000000, "APARF: Incorrect vale of data rate");
---
>   NS_TEST_ASSERT_MSG_EQ (mode.GetDataRate (txVector.GetChannelWidth (), txVector.IsShortGuardInterval (), 1), 54000000, "APARF: Incorrect vale of data rate");
577,1011d572
< PowerRateAdaptationTest::TestRrpaa ()
< {
<   m_manager.SetTypeId ("ns3::RrpaaWifiManager");
<   Ptr<Node> node = ConfigureNode ();
<   Ptr<WifiNetDevice> dev = DynamicCast<WifiNetDevice> (node->GetDevice (0));
<   Ptr<WifiRemoteStationManager> manager = dev->GetRemoteStationManager ();
< 
<   /*
<    * Configure constants for rate and power control.
<    */
<   manager->SetAttribute ("Basic", BooleanValue (true));
<   manager->SetAttribute ("Alpha", DoubleValue (1.25));
<   manager->SetAttribute ("Beta", DoubleValue (2));
<   manager->SetAttribute ("Tau", DoubleValue (0.015));
<   /*
<    * Constants for the Probabilistic Decision Table.
<    * We set both to 1 to avoid random behaviour in tests.
<    */
<   manager->SetAttribute ("Gamma", DoubleValue (1));
<   manager->SetAttribute ("Delta", DoubleValue (1));
< 
<   /*
<    * Create a dummy packet to simulate transmission.
<    */
<   Mac48Address remoteAddress = Mac48Address::Allocate ();
<   WifiMacHeader packetHeader;
<   packetHeader.SetAddr1 (remoteAddress);
<   packetHeader.SetType (WIFI_MAC_DATA);
<   packetHeader.SetQosTid (0);
<   Ptr<Packet> packet = Create<Packet> (10);
<   WifiMode ackMode;
< 
<   /*
<    * To initialize the manager we need to generate a transmission.
<    */
<   Ptr<Packet> p = Create<Packet> ();
<   dev->Send (p, remoteAddress, 1);
< 
<   /**
<    * This will be the thresholds table.
<    * The parameters of the table are:
<    * - Estimation Window Size (EWND)
<    * - Maximum Tolerable Loss Probability Threshold (MTL)
<    * - Opportunistic Rate Increase (and Power Decrease) Probability Threshold (ORI)
<    *
<    * We also calculate the needed success and failures to generate
<    * a rate or power change:
<    * Rate Increase or Power Decrease limits (RI-PD)
<    * Rate Decrease or Power Increase limits (RD-PI)
<    * Power Decrease limits (PD)
<    *
<    * Mode	           EWND  MTL       ORI        RI-PD  RD-PI  PD
<    *                                            succ   fails  succ fails
<    * OfdmRate6Mbps   8     1         0.19861    7      8      2
<    * OfdmRate9Mbps   11    0.397219  0.14556    10     5      7    2
<    * OfdmRate12Mbps  15    0.291121  0.189753   13     5      11   3
<    * OfdmRate18Mbps  21    0.379507  0.13624    19     8      14   3
<    * OfdmRate24Mbps  27    0.27248   0.174216   23     8      20   5
<    * OfdmRate36Mbps  37    0.348432  0.120773   33     13     25   5
<    * OfdmRate48Mbps  45    0.241546  0.0523952  43     11     35   3
<    * OfdmRate54Mbps  50    0.10479   0          50     6      45   5
<    *
<    */
< 
<   //-----------------------------------------------------------------------------------------------------
< 
<   /*
<    * RRPAA initiates with minimal rate and maximal power.
<    */
<   WifiTxVector txVector = manager->GetDataTxVector (packetHeader);
<   WifiMode mode = txVector.GetMode ();
<   int power = (int) txVector.GetTxPowerLevel ();
< 
<   NS_TEST_ASSERT_MSG_EQ (mode.GetDataRate (txVector.GetChannelWidth (), txVector.GetGuardInterval (), 1), 6000000, "RRPAA: Initial data rate wrong"); //802.11a minimal rate is 6Mbps
<   NS_TEST_ASSERT_MSG_EQ (power, 17, "RRPAA: Initial power level wrong");
< 
<   //-----------------------------------------------------------------------------------------------------
< 
<   /*
<    * As RRPAA starts with the 6Mbps rate, 7 successful transmissions are needed for RRPAA to increase rate.
<    * 1/8 = 0.125
<    */
< 
<   /**
<    * Test that 6 is not enough.
<    */
<   for (int i = 0; i < 6; i++)
<     {
<       manager->ReportDataOk (remoteAddress, &packetHeader, 0, ackMode, 0, txVector, packet->GetSize ());
<     }
< 
<   txVector = manager->GetDataTxVector (packetHeader);
<   mode = txVector.GetMode ();
<   power = (int) txVector.GetTxPowerLevel ();
< 
<   NS_TEST_ASSERT_MSG_EQ (mode.GetDataRate (txVector.GetChannelWidth (), txVector.GetGuardInterval (), 1), 6000000, "RRPAA: Incorrect vale of data rate");
<   NS_TEST_ASSERT_MSG_EQ (power, 17, "RRPAA: Incorrect value of power level");
< 
<   /**
<    * Test that 7 is enough.
<    */
<   manager->ReportDataOk (remoteAddress, &packetHeader, 0, ackMode, 0, txVector, packet->GetSize ());
< 
<   txVector = manager->GetDataTxVector (packetHeader);
<   mode = txVector.GetMode ();
<   power = (int) txVector.GetTxPowerLevel ();
< 
<   NS_TEST_ASSERT_MSG_EQ (mode.GetDataRate (txVector.GetChannelWidth (), txVector.GetGuardInterval (), 1), 9000000, "RRPAA: Incorrect vale of data rate");
<   NS_TEST_ASSERT_MSG_EQ (power, 17, "RRPAA: Incorrect value of power level");
< 
<   //-----------------------------------------------------------------------------------------------------
< 
<   /*
<    * 5 failures are needed to make the rate decrease again.
<    * 5/11 = 0.45
<    */
<   for (int i = 0; i < 4; i++)
<     {
<       manager->ReportDataFailed (remoteAddress,&packetHeader, packet->GetSize ());
<     }
< 
<   txVector = manager->GetDataTxVector (packetHeader);
<   mode = txVector.GetMode ();
<   power = (int) txVector.GetTxPowerLevel ();
< 
<   NS_TEST_ASSERT_MSG_EQ (mode.GetDataRate (txVector.GetChannelWidth (), txVector.GetGuardInterval (), 1), 9000000, "RRPAA: Incorrect vale of data rate");
<   NS_TEST_ASSERT_MSG_EQ (power, 17, "RRPAA: Incorrect value of power level");
< 
<   manager->ReportDataFailed (remoteAddress,&packetHeader, packet->GetSize ());
< 
<   txVector = manager->GetDataTxVector (packetHeader);
<   mode = txVector.GetMode ();
<   power = (int) txVector.GetTxPowerLevel ();
< 
<   NS_TEST_ASSERT_MSG_EQ (mode.GetDataRate (txVector.GetChannelWidth (), txVector.GetGuardInterval (), 1), 6000000, "RRPAA: Incorrect vale of data rate");
<   NS_TEST_ASSERT_MSG_EQ (power, 17, "RRPAA: Incorrect value of power level");
< 
<   //-----------------------------------------------------------------------------------------------------
< 
<   /**
<    * Increase rate until maximal rate.
<    */
< 
<   for (int i = 0; i < 7; i++)
<     {
<       manager->ReportDataOk (remoteAddress, &packetHeader, 0, ackMode, 0, txVector, packet->GetSize ());
<     }
< 
<   txVector = manager->GetDataTxVector (packetHeader);
<   mode = txVector.GetMode ();
<   power = (int) txVector.GetTxPowerLevel ();
< 
<   NS_TEST_ASSERT_MSG_EQ (mode.GetDataRate (txVector.GetChannelWidth (), txVector.GetGuardInterval (), 1), 9000000, "RRPAA: Incorrect vale of data rate");
<   NS_TEST_ASSERT_MSG_EQ (power, 17, "RRPAA: Incorrect value of power level");
< 
<   for (int i = 0; i < 10; i++)
<     {
<       manager->ReportDataOk (remoteAddress, &packetHeader, 0, ackMode, 0, txVector, packet->GetSize ());
<     }
< 
<   txVector = manager->GetDataTxVector (packetHeader);
<   mode = txVector.GetMode ();
<   power = (int) txVector.GetTxPowerLevel ();
< 
<   NS_TEST_ASSERT_MSG_EQ (mode.GetDataRate (txVector.GetChannelWidth (), txVector.GetGuardInterval (), 1), 12000000, "RRPAA: Incorrect vale of data rate");
<   NS_TEST_ASSERT_MSG_EQ (power, 17, "RRPAA: Incorrect value of power level");
< 
<   for (int i = 0; i < 13; i++)
<     {
<       manager->ReportDataOk (remoteAddress, &packetHeader, 0, ackMode, 0, txVector, packet->GetSize ());
<     }
< 
<   txVector = manager->GetDataTxVector (packetHeader);
<   mode = txVector.GetMode ();
<   power = (int) txVector.GetTxPowerLevel ();
< 
<   NS_TEST_ASSERT_MSG_EQ (mode.GetDataRate (txVector.GetChannelWidth (), txVector.GetGuardInterval (), 1), 18000000, "RRPAA: Incorrect vale of data rate");
<   NS_TEST_ASSERT_MSG_EQ (power, 17, "RRPAA: Incorrect value of power level");
< 
<   for (int i = 0; i < 19; i++)
<     {
<       manager->ReportDataOk (remoteAddress, &packetHeader, 0, ackMode, 0, txVector, packet->GetSize ());
<     }
< 
<   txVector = manager->GetDataTxVector (packetHeader);
<   mode = txVector.GetMode ();
<   power = (int) txVector.GetTxPowerLevel ();
< 
<   NS_TEST_ASSERT_MSG_EQ (mode.GetDataRate (txVector.GetChannelWidth (), txVector.GetGuardInterval (), 1), 24000000, "RRPAA: Incorrect vale of data rate");
<   NS_TEST_ASSERT_MSG_EQ (power, 17, "RRPAA: Incorrect value of power level");
< 
<   for (int i = 0; i < 23; i++)
<     {
<       manager->ReportDataOk (remoteAddress, &packetHeader, 0, ackMode, 0, txVector, packet->GetSize ());
<     }
< 
<   txVector = manager->GetDataTxVector (packetHeader);
<   mode = txVector.GetMode ();
<   power = (int) txVector.GetTxPowerLevel ();
< 
<   NS_TEST_ASSERT_MSG_EQ (mode.GetDataRate (txVector.GetChannelWidth (), txVector.GetGuardInterval (), 1), 36000000, "RRPAA: Incorrect vale of data rate");
<   NS_TEST_ASSERT_MSG_EQ (power, 17, "RRPAA: Incorrect value of power level");
< 
<   for (int i = 0; i < 33; i++)
<     {
<       manager->ReportDataOk (remoteAddress, &packetHeader, 0, ackMode, 0, txVector, packet->GetSize ());
<     }
< 
<   txVector = manager->GetDataTxVector (packetHeader);
<   mode = txVector.GetMode ();
<   power = (int) txVector.GetTxPowerLevel ();
< 
<   NS_TEST_ASSERT_MSG_EQ (mode.GetDataRate (txVector.GetChannelWidth (), txVector.GetGuardInterval (), 1), 48000000, "RRPAA: Incorrect vale of data rate");
<   NS_TEST_ASSERT_MSG_EQ (power, 17, "RRPAA: Incorrect value of power level");
< 
<   for (int i = 0; i < 43; i++)
<     {
<       manager->ReportDataOk (remoteAddress, &packetHeader, 0, ackMode, 0, txVector, packet->GetSize ());
<     }
< 
<   txVector = manager->GetDataTxVector (packetHeader);
<   mode = txVector.GetMode ();
<   power = (int) txVector.GetTxPowerLevel ();
< 
<   NS_TEST_ASSERT_MSG_EQ (mode.GetDataRate (txVector.GetChannelWidth (), txVector.GetGuardInterval (), 1), 54000000, "RRPAA: Incorrect vale of data rate");
<   NS_TEST_ASSERT_MSG_EQ (power, 17, "RRPAA: Incorrect value of power level");
< 
<   //-----------------------------------------------------------------------------------------------------
< 
<   /**
<    * Now we need more successful transmissions to make power decrease.
<    * As we are at maximal rate, the power is decreased when it is sure that the failures
<    * will not generate a rate decrease.
<    */
< 
<   for (int i = 0; i < 49; i++)
<     {
<       manager->ReportDataOk (remoteAddress, &packetHeader, 0, ackMode, 0, txVector, packet->GetSize ());
<     }
< 
<   txVector = manager->GetDataTxVector (packetHeader);
<   mode = txVector.GetMode ();
<   power = (int) txVector.GetTxPowerLevel ();
< 
<   NS_TEST_ASSERT_MSG_EQ (mode.GetDataRate (txVector.GetChannelWidth (), txVector.GetGuardInterval (), 1), 54000000, "RRPAA: Incorrect vale of data rate");
<   NS_TEST_ASSERT_MSG_EQ (power, 17, "RRPAA: Incorrect value of power level");
< 
<   manager->ReportDataOk (remoteAddress, &packetHeader, 0, ackMode, 0, txVector, packet->GetSize ());
< 
<   txVector = manager->GetDataTxVector (packetHeader);
<   mode = txVector.GetMode ();
<   power = (int) txVector.GetTxPowerLevel ();
< 
<   NS_TEST_ASSERT_MSG_EQ (mode.GetDataRate (txVector.GetChannelWidth (), txVector.GetGuardInterval (), 1), 54000000, "RRPAA: Incorrect vale of data rate");
<   NS_TEST_ASSERT_MSG_EQ (power, 16, "RRPAA: Incorrect value of power level");
< 
<   //-----------------------------------------------------------------------------------------------------
< 
<   /**
<    * As rate hasn't change the same amount of success are needed.
<    * After 16*45 successful transmissions power is decreased to zero.
<    */
< 
<   for (int i = 0; i < 16 * 50; i++)
<     {
<       manager->ReportDataOk (remoteAddress, &packetHeader, 0, ackMode, 0, txVector, packet->GetSize ());
<     }
< 
<   txVector = manager->GetDataTxVector (packetHeader);
<   mode = txVector.GetMode ();
<   power = (int) txVector.GetTxPowerLevel ();
< 
<   NS_TEST_ASSERT_MSG_EQ (mode.GetDataRate (txVector.GetChannelWidth (), txVector.GetGuardInterval (), 1), 54000000, "RRPAA: Incorrect vale of data rate");
<   NS_TEST_ASSERT_MSG_EQ (power, 0, "RRPAA: Incorrect value of power level");
< 
<   //-----------------------------------------------------------------------------------------------------
< 
<   /**
<    * After 6 failures the power should be increased.
<    */
< 
<   for (int i = 0; i < 6; i++)
<     {
<       manager->ReportDataFailed (remoteAddress,&packetHeader, packet->GetSize ());
<     }
< 
<   txVector = manager->GetDataTxVector (packetHeader);
<   mode = txVector.GetMode ();
<   power = (int) txVector.GetTxPowerLevel ();
< 
<   NS_TEST_ASSERT_MSG_EQ (mode.GetDataRate (txVector.GetChannelWidth (), txVector.GetGuardInterval (), 1), 54000000, "RRPAA: Incorrect vale of data rate");
<   NS_TEST_ASSERT_MSG_EQ (power, 1, "RRPAA: Incorrect value of power level");
< 
<   //-----------------------------------------------------------------------------------------------------
< 
<   /*
<    * After 16*6 failed transmissions power is increase to 17.
<    */
< 
<   for (int i = 0; i < 16 * 6; i++)
<     {
<       manager->ReportDataFailed (remoteAddress,&packetHeader, packet->GetSize ());
<     }
< 
<   txVector = manager->GetDataTxVector (packetHeader);
<   mode = txVector.GetMode ();
<   power = (int) txVector.GetTxPowerLevel ();
< 
<   NS_TEST_ASSERT_MSG_EQ (mode.GetDataRate (txVector.GetChannelWidth (), txVector.GetGuardInterval (), 1), 54000000, "RRPAA: Incorrect vale of data rate");
<   NS_TEST_ASSERT_MSG_EQ (power, 17, "RRPAA: Incorrect value of power level");
< 
<   //-----------------------------------------------------------------------------------------------------
< 
<   /*
<    * After 6 more failures the rate should be decreased.
<    */
< 
<   for (int i = 0; i < 6; i++)
<     {
<       manager->ReportDataFailed (remoteAddress,&packetHeader, packet->GetSize ());
<     }
< 
<   txVector = manager->GetDataTxVector (packetHeader);
<   mode = txVector.GetMode ();
<   power = (int) txVector.GetTxPowerLevel ();
< 
<   NS_TEST_ASSERT_MSG_EQ (mode.GetDataRate (txVector.GetChannelWidth (), txVector.GetGuardInterval (), 1), 48000000, "RRPAA: Incorrect vale of data rate");
<   NS_TEST_ASSERT_MSG_EQ (power, 17, "RRPAA: Incorrect value of power level");
< 
<   /*
<    * Now 11 failures are needed to decrease rate again.
<    */
< 
<   for (int i = 0; i < 11; i++)
<     {
<       manager->ReportDataFailed (remoteAddress,&packetHeader, packet->GetSize ());
<     }
< 
<   txVector = manager->GetDataTxVector (packetHeader);
<   mode = txVector.GetMode ();
<   power = (int) txVector.GetTxPowerLevel ();
< 
<   NS_TEST_ASSERT_MSG_EQ (mode.GetDataRate (txVector.GetChannelWidth (), txVector.GetGuardInterval (), 1), 36000000, "RRPAA: Incorrect vale of data rate");
<   NS_TEST_ASSERT_MSG_EQ (power, 17, "RRPAA: Incorrect value of power level");
< 
<   //-----------------------------------------------------------------------------------------------------
< 
<   /*
<    * Test power decrement when loss probability is between MTL and ORI.
<    * As we are at rate 36 Mbps we need at least 25 successful transmissions
<    * and 5 failures.
<    */
< 
<   for (int i = 0; i < 25; i++)
<     {
<       manager->ReportDataOk (remoteAddress, &packetHeader, 0, ackMode, 0, txVector, packet->GetSize ());
<     }
< 
<   txVector = manager->GetDataTxVector (packetHeader);
<   mode = txVector.GetMode ();
<   power = (int) txVector.GetTxPowerLevel ();
< 
<   NS_TEST_ASSERT_MSG_EQ (mode.GetDataRate (txVector.GetChannelWidth (), txVector.GetGuardInterval (), 1), 36000000, "RRPAA: Incorrect vale of data rate");
<   NS_TEST_ASSERT_MSG_EQ (power, 17, "RRPAA: Incorrect value of power level");
< 
<   for (int i = 0; i < 5; i++)
<     {
<       manager->ReportDataFailed (remoteAddress,&packetHeader, packet->GetSize ());
<     }
< 
<   txVector = manager->GetDataTxVector (packetHeader);
<   mode = txVector.GetMode ();
<   power = (int) txVector.GetTxPowerLevel ();
< 
<   NS_TEST_ASSERT_MSG_EQ (mode.GetDataRate (txVector.GetChannelWidth (), txVector.GetGuardInterval (), 1), 36000000, "RRPAA: Incorrect vale of data rate");
<   NS_TEST_ASSERT_MSG_EQ (power, 16, "RRPAA: Incorrect value of power level");
< 
<   for (int i = 0; i < 5; i++)
<     {
<       manager->ReportDataFailed (remoteAddress,&packetHeader, packet->GetSize ());
<     }
< 
<   txVector = manager->GetDataTxVector (packetHeader);
<   mode = txVector.GetMode ();
<   power = (int) txVector.GetTxPowerLevel ();
< 
<   NS_TEST_ASSERT_MSG_EQ (mode.GetDataRate (txVector.GetChannelWidth (), txVector.GetGuardInterval (), 1), 36000000, "RRPAA: Incorrect vale of data rate");
<   NS_TEST_ASSERT_MSG_EQ (power, 16, "RRPAA: Incorrect value of power level");
< 
<   for (int i = 0; i < 25; i++)
<     {
<       manager->ReportDataOk (remoteAddress, &packetHeader, 0, ackMode, 0, txVector, packet->GetSize ());
<     }
< 
<   txVector = manager->GetDataTxVector (packetHeader);
<   mode = txVector.GetMode ();
<   power = (int) txVector.GetTxPowerLevel ();
< 
<   NS_TEST_ASSERT_MSG_EQ (mode.GetDataRate (txVector.GetChannelWidth (), txVector.GetGuardInterval (), 1), 36000000, "RRPAA: Incorrect vale of data rate");
<   NS_TEST_ASSERT_MSG_EQ (power, 15, "RRPAA: Incorrect value of power level");
< 
<   //-----------------------------------------------------------------------------------------------------
< 
<   /*
<    * Repeat the previous test until power 0 is reached.
<    */
< 
<   for (int i = 0; i < 16; i++)
<     {
<       for (int j = 0; j < 25; j++)
<         {
<           manager->ReportDataOk (remoteAddress, &packetHeader, 0, ackMode, 0, txVector, packet->GetSize ());
<         }
< 
<       for (int j = 0; j < 5; j++)
<         {
<           manager->ReportDataFailed (remoteAddress,&packetHeader, packet->GetSize ());
<         }
<     }
< 
<   txVector = manager->GetDataTxVector (packetHeader);
<   mode = txVector.GetMode ();
<   power = (int) txVector.GetTxPowerLevel ();
< 
<   NS_TEST_ASSERT_MSG_EQ (mode.GetDataRate (txVector.GetChannelWidth (), txVector.GetGuardInterval (), 1), 36000000, "RRPAA: Incorrect vale of data rate");
<   NS_TEST_ASSERT_MSG_EQ (power, 0, "RRPAA: Incorrect value of power level");
< 
<   Simulator::Stop (Seconds (10.0));
< 
<   Simulator::Run ();
<   Simulator::Destroy ();
< 
< }
< 
< void
1017d577
<   TestRrpaa ();
1020,1025c580
< /**
<  * \ingroup wifi-test
<  * \ingroup tests
<  *
<  * \brief Power Rate Adaptation Test Suite
<  */
---
> //-----------------------------------------------------------------------------
1033c588
<   : TestSuite ("wifi-power-rate-adaptation", UNIT)
---
>   : TestSuite ("power-rate-adaptation-wifi", UNIT)
1038c593
< static PowerRateAdaptationTestSuite g_powerRateAdaptationTestSuite; ///< the test suite
---
> static PowerRateAdaptationTestSuite g_powerRateAdaptationTestSuite;
diff ../../NS3-WiGig/src/wifi/test/spectrum-wifi-phy-test.cc ../../ns-3-dev/src/wifi/test/spectrum-wifi-phy-test.cc
19d18
< #include "ns3/spectrum-phy.h"
20a20,22
> #include "ns3/packet.h"
> #include "ns3/tag.h"
> #include "ns3/packet-burst.h"
23a26
> #include "ns3/interference-helper.h"
25a29,31
> #include "ns3/wifi-mac-trailer.h"
> #include "ns3/wifi-phy-tag.h"
> #include "ns3/wifi-phy-standard.h"
27,30d32
< #include "ns3/wifi-phy-listener.h"
< #include "ns3/log.h"
< #include "ns3/wifi-psdu.h"
< #include "ns3/wifi-ppdu.h"
34,36c36
< NS_LOG_COMPONENT_DEFINE ("SpectrumWifiPhyBasicTest");
< 
< static const uint8_t CHANNEL_NUMBER = 36;
---
> static const uint16_t CHANNEL_NUMBER = 36;
38,39c38
< static const uint16_t CHANNEL_WIDTH = 20; // MHz
< static const uint16_t GUARD_WIDTH = CHANNEL_WIDTH; // MHz (expanded to channel width to model spectrum mask)
---
> static const uint32_t CHANNEL_WIDTH = 20; // MHz
41,46d39
< /**
<  * \ingroup wifi-test
<  * \ingroup tests
<  *
<  * \brief Spectrum Wifi Phy Basic Test
<  */
51,55d43
<   /**
<    * Constructor
<    *
<    * \param name reference name
<    */
58d45
< 
61,66c48
<   Ptr<SpectrumWifiPhy> m_phy; ///< Phy
<   /**
<    * Make signal function
<    * \param txPowerWatts the transmit power in watts
<    * \returns Ptr<SpectrumSignalParameters>
<    */
---
>   Ptr<SpectrumWifiPhy> m_phy;
68,71d49
<   /**
<    * Send signal function
<    * \param txPowerWatts the transmit power in watts
<    */
73,87c51,52
<   /**
<    * Spectrum wifi receive success function
<    * \param psdu the PSDU
<    * \param snr the SNR
<    * \param txVector the transmit vector
<    * \param statusPerMpdu reception status per MPDU
<    */
<   void SpectrumWifiPhyRxSuccess (Ptr<WifiPsdu> psdu, double snr, WifiTxVector txVector, std::vector<bool> statusPerMpdu);
<   /**
<    * Spectrum wifi receive failure function
<    * \param psdu the PSDU
< -   */
<   void SpectrumWifiPhyRxFailure (Ptr<WifiPsdu> psdu);
<   uint32_t m_count; ///< count
< 
---
>   void SpectrumWifiPhyReceiver (bool rxSucceeded);
>   uint32_t m_count;
105c70
< Ptr<SpectrumSignalParameters>
---
> Ptr<SpectrumSignalParameters> 
108c73,77
<   WifiTxVector txVector = WifiTxVector (WifiPhy::GetOfdmRate6Mbps (), 0, WIFI_PREAMBLE_LONG, 800, 1, 1, 0, 20, false, false);
---
>   WifiPreamble preamble;
>   preamble = WIFI_PREAMBLE_LONG;
>   WifiMode mode = WifiPhy::GetOfdmRate6Mbps ();
>   WifiTxVector txVector = WifiTxVector (mode, 0, 0, false, 1, 0, 20000000, false, false);
>   enum mpduType mpdutype = NORMAL_MPDU;
111a81
>   WifiMacTrailer trailer;
115,121c85,93
< 
<   Ptr<WifiPsdu> psdu = Create<WifiPsdu> (pkt, hdr);
<   Time txDuration = m_phy->CalculateTxDuration (psdu->GetSize (), txVector, m_phy->GetFrequency ());
< 
<   Ptr<WifiPpdu> ppdu = Create<WifiPpdu> (psdu, txVector, txDuration, FREQUENCY);
< 
<   Ptr<SpectrumValue> txPowerSpectrum = WifiSpectrumValueHelper::CreateOfdmTxPowerSpectralDensity (FREQUENCY, CHANNEL_WIDTH, txPowerWatts, GUARD_WIDTH);
---
>   uint32_t size = pkt->GetSize () + hdr.GetSize () + trailer.GetSerializedSize ();
>   Time txDuration = m_phy->CalculateTxDuration (size, txVector, preamble, m_phy->GetFrequency(), mpdutype, 0);
>   hdr.SetDuration (txDuration);
> 
>   pkt->AddHeader (hdr);
>   pkt->AddTrailer (trailer);
>   WifiPhyTag tag (txVector, preamble, mpdutype);
>   pkt->AddPacketTag (tag);
>   Ptr<SpectrumValue> txPowerSpectrum = WifiSpectrumValueHelper::CreateOfdmTxPowerSpectralDensity (FREQUENCY, CHANNEL_WIDTH, txPowerWatts);
126,127c98
<   txParams->ppdu = ppdu;
< 
---
>   txParams->packet = pkt;
139c110
< SpectrumWifiPhyBasicTest::SpectrumWifiPhyRxSuccess (Ptr<WifiPsdu> psdu, double snr, WifiTxVector txVector, std::vector<bool> statusPerMpdu)
---
> SpectrumWifiPhyBasicTest::SpectrumWifiPhyReceiver (bool rxSucceeded)
141,148d111
<   NS_LOG_FUNCTION (this << *psdu << snr << txVector);
<   m_count++;
< }
< 
< void
< SpectrumWifiPhyBasicTest::SpectrumWifiPhyRxFailure (Ptr<WifiPsdu> psdu)
< {
<   NS_LOG_FUNCTION (this << *psdu);
167,168c130,132
<   m_phy->SetReceiveOkCallback (MakeCallback (&SpectrumWifiPhyBasicTest::SpectrumWifiPhyRxSuccess, this));
<   m_phy->SetReceiveErrorCallback (MakeCallback (&SpectrumWifiPhyBasicTest::SpectrumWifiPhyRxFailure, this));
---
>   m_phy->SetPacketReceivedCallback (MakeCallback (&SpectrumWifiPhyBasicTest::SpectrumWifiPhyReceiver, this));
>   //Bug 2460: CcaMode1Threshold default should be set to -62 dBm when using Spectrum
>   m_phy->SetCcaMode1Threshold (-62.0);
177,182c141,146
<   Simulator::Schedule (Seconds (1), &SpectrumWifiPhyBasicTest::SendSignal, this, txPowerWatts);
<   Simulator::Schedule (Seconds (2), &SpectrumWifiPhyBasicTest::SendSignal, this, txPowerWatts);
<   Simulator::Schedule (Seconds (3), &SpectrumWifiPhyBasicTest::SendSignal, this, txPowerWatts);
<   // Send packets spaced 1 microsecond second apart; none should be received (PHY header reception failure)
<   Simulator::Schedule (MicroSeconds (4000000), &SpectrumWifiPhyBasicTest::SendSignal, this, txPowerWatts);
<   Simulator::Schedule (MicroSeconds (4000001), &SpectrumWifiPhyBasicTest::SendSignal, this, txPowerWatts);
---
>   Simulator::Schedule (Seconds (1), &SpectrumWifiPhyBasicTest::SendSignal, this, txPowerWatts); 
>   Simulator::Schedule (Seconds (2), &SpectrumWifiPhyBasicTest::SendSignal, this, txPowerWatts); 
>   Simulator::Schedule (Seconds (3), &SpectrumWifiPhyBasicTest::SendSignal, this, txPowerWatts); 
>   // Send packets spaced 1 microsecond second apart; only one should be received
>   Simulator::Schedule (MicroSeconds (4000000), &SpectrumWifiPhyBasicTest::SendSignal, this, txPowerWatts); 
>   Simulator::Schedule (MicroSeconds (4000001), &SpectrumWifiPhyBasicTest::SendSignal, this, txPowerWatts); 
186c150
<   NS_TEST_ASSERT_MSG_EQ (m_count, 3, "Didn't receive right number of packets");
---
>   NS_TEST_ASSERT_MSG_EQ (m_count, 4, "Didn't receive right number of packets");
189,194d152
< /**
<  * \ingroup wifi-test
<  * \ingroup tests
<  *
<  * \brief Test Phy Listener
<  */
202,206c160,164
<   TestPhyListener (void)
<     : m_notifyRxStart (0),
<       m_notifyRxEndOk (0),
<       m_notifyRxEndError (0),
<       m_notifyMaybeCcaBusyStart (0)
---
>   TestPhyListener (void) :
>     m_notifyRxStart (0),
>     m_notifyRxEndOk (0),
>     m_notifyRxEndError (0),
>     m_notifyMaybeCcaBusyStart (0)
214d171
<     NS_LOG_FUNCTION (this << duration);
219d175
<     NS_LOG_FUNCTION (this);
224d179
<     NS_LOG_FUNCTION (this);
229d183
<     NS_LOG_FUNCTION (this << duration << txPowerDbm);
233d186
<     NS_LOG_FUNCTION (this);
242,244d194
<   virtual void NotifyOff (void)
<   {
<   }
248,254c198,201
<   virtual void NotifyOn (void)
<   {
<   }
<   uint32_t m_notifyRxStart; ///< notify receive start
<   uint32_t m_notifyRxEndOk; ///< notify receive end OK
<   uint32_t m_notifyRxEndError; ///< notify receive end error
<   uint32_t m_notifyMaybeCcaBusyStart; ///< notify maybe CCA busy start
---
>   uint32_t m_notifyRxStart;
>   uint32_t m_notifyRxEndOk;
>   uint32_t m_notifyRxEndError;
>   uint32_t m_notifyMaybeCcaBusyStart;
258,263c205
< /**
<  * \ingroup wifi-test
<  * \ingroup tests
<  *
<  * \brief Spectrum Wifi Phy Listener Test
<  */
---
> 
272c214
<   TestPhyListener* m_listener; ///< listener
---
>   TestPhyListener* m_listener;
296c238
<   Simulator::Schedule (Seconds (1), &SpectrumWifiPhyListenerTest::SendSignal, this, txPowerWatts);
---
>   Simulator::Schedule (Seconds (1), &SpectrumWifiPhyListenerTest::SendSignal, this, txPowerWatts); 
300d241
<   NS_TEST_ASSERT_MSG_EQ (m_listener->m_notifyMaybeCcaBusyStart, 2, "Didn't receive NotifyMaybeCcaBusyStart (preamble deteted + L-SIG received)");
302a244
>   NS_TEST_ASSERT_MSG_EQ (m_listener->m_notifyMaybeCcaBusyStart, 0, "Received NotifyMaybeCcaBusyStart unexpectedly");
308,313d249
< /**
<  * \ingroup wifi-test
<  * \ingroup tests
<  *
<  * \brief Spectrum Wifi Phy Test Suite
<  */
321c257
<   : TestSuite ("wifi-spectrum-wifi-phy", UNIT)
---
>   : TestSuite ("spectrum-wifi-phy", UNIT)
327c263
< static SpectrumWifiPhyTestSuite spectrumWifiPhyTestSuite; ///< the test suite
---
> static SpectrumWifiPhyTestSuite spectrumWifiPhyTestSuite;
diff ../../NS3-WiGig/src/wifi/test/tx-duration-test.cc ../../ns-3-dev/src/wifi/test/tx-duration-test.cc
22,23c22,26
< #include "ns3/log.h"
< #include "ns3/test.h"
---
> #include <ns3/object.h>
> #include <ns3/log.h>
> #include <ns3/test.h>
> #include <iostream>
> #include "ns3/interference-helper.h"
30,31c33,34
< static const uint16_t CHANNEL_1_MHZ  = 2412; // a 2.4 GHz center frequency (MHz)
< static const uint16_t CHANNEL_36_MHZ = 5180; // a 5 GHz center frequency (MHz)
---
> static const double CHANNEL_1_MHZ  = 2412.0; // a 2.4 GHz center frequency (MHz)
> static const double CHANNEL_36_MHZ = 5180.0; // a 5 GHz center frequency (MHz)
33,38d35
< /**
<  * \ingroup wifi-test
<  * \ingroup tests
<  *
<  * \brief Tx Duration Test
<  */
52,57c49,53
<    * @param size size of payload in octets (includes everything after the PHY header)
<    * @param payloadMode the WifiMode used for the transmission
<    * @param channelWidth the channel width used for the transmission (in MHz)
<    * @param guardInterval the guard interval duration used for the transmission (in nanoseconds)
<    * @param preamble the WifiPreamble used for the transmission
<    * @param knownDuration the known duration value of the transmission
---
>    * @param size size of payload in octets (includes everything after the PLCP header)
>    * @param payloadMode the WifiMode used
>    * @param channelWidth the channel width used (in MHz)
>    * @param isShortGuardInterval whether short guard interval is used
>    * @param knownDurationMicroSeconds the known duration value of the transmission in microseconds
61c57
<   bool CheckPayloadDuration (uint32_t size, WifiMode payloadMode, uint16_t channelWidth, uint16_t guardInterval, WifiPreamble preamble, Time knownDuration);
---
>   bool CheckPayloadDuration (uint32_t size, WifiMode payloadMode, uint32_t channelWidth, bool isShortGuardInterval, WifiPreamble preamble, uint32_t knownDurationMicroSeconds);
67,72c63,68
<    * @param size size of payload in octets (includes everything after the PHY header)
<    * @param payloadMode the WifiMode used for the transmission
<    * @param channelWidth the channel width used for the transmission (in MHz)
<    * @param guardInterval the guard interval duration used for the transmission (in nanoseconds)
<    * @param preamble the WifiPreamble used for the transmission
<    * @param knownDuration the known duration value of the transmission
---
>    * @param size size of payload in octets (includes everything after the PLCP header)
>    * @param payloadMode the WifiMode used
>    * @param channelWidth the channel width used (in MHz)
>    * @param isShortGuardInterval whether short guard interval is used
>    * @param preamble the WifiPreamble used
>    * @param knownDurationMicroSeconds the known duration value of the transmission in microseconds
76c72
<   bool CheckTxDuration (uint32_t size, WifiMode payloadMode, uint16_t channelWidth, uint16_t guardInterval, WifiPreamble preamble, Time knownDuration);
---
>   bool CheckTxDuration (uint32_t size, WifiMode payloadMode, uint32_t channelWidth, bool isShortGuardInterval, WifiPreamble preamble, double knownDurationMicroSeconds);
90c86
< TxDurationTest::CheckPayloadDuration (uint32_t size, WifiMode payloadMode, uint16_t channelWidth, uint16_t guardInterval, WifiPreamble preamble, Time knownDuration)
---
> TxDurationTest::CheckPayloadDuration (uint32_t size, WifiMode payloadMode, uint32_t channelWidth, bool isShortGuardInterval, WifiPreamble preamble, uint32_t knownDurationMicroSeconds)
94d89
<   txVector.SetPreambleType (preamble);
96c91
<   txVector.SetGuardInterval (guardInterval);
---
>   txVector.SetShortGuardInterval (isShortGuardInterval);
100c95
<   uint16_t testedFrequency = CHANNEL_1_MHZ;
---
>   double testedFrequency = CHANNEL_1_MHZ;
104,105c99
<       || payloadMode.GetModulationClass () == WIFI_MOD_CLASS_VHT
<       || payloadMode.GetModulationClass () == WIFI_MOD_CLASS_HE)
---
>       || payloadMode.GetModulationClass () == WIFI_MOD_CLASS_VHT)
109,110c103,104
<   Time calculatedDuration = phy->GetPayloadDuration (size, txVector, testedFrequency);
<   if (calculatedDuration != knownDuration)
---
>   double calculatedDurationMicroSeconds = (double)phy->GetPayloadDuration (size, txVector, preamble, testedFrequency).GetMicroSeconds  ();
>   if (calculatedDurationMicroSeconds != knownDurationMicroSeconds)
112c106
<       std::cerr << "size=" << size
---
>       std::cerr << " size=" << size
114,118c108,110
<                 << " channelWidth=" << channelWidth
<                 << " guardInterval=" << guardInterval
<                 << " datarate=" << payloadMode.GetDataRate (channelWidth, guardInterval, 1)
<                 << " known=" << knownDuration
<                 << " calculated=" << calculatedDuration
---
>                 << " datarate=" << payloadMode.GetDataRate (channelWidth, isShortGuardInterval, 1)
>                 << " known=" << knownDurationMicroSeconds
>                 << " calculated=" << calculatedDurationMicroSeconds
122c114
<   if (payloadMode.GetModulationClass () == WIFI_MOD_CLASS_HT || payloadMode.GetModulationClass () == WIFI_MOD_CLASS_HE)
---
>   if (payloadMode.GetModulationClass () == WIFI_MOD_CLASS_HT)
126,128c118,119
<       calculatedDuration = phy->GetPayloadDuration (size, txVector, testedFrequency);
<       knownDuration += MicroSeconds (6);
<       if (calculatedDuration != knownDuration)
---
>       calculatedDurationMicroSeconds = (double)phy->GetPayloadDuration (size, txVector, preamble, testedFrequency).GetMicroSeconds ();
>       if (calculatedDurationMicroSeconds != knownDurationMicroSeconds + 6)
130c121
<           std::cerr << "size=" << size
---
>           std::cerr << " size=" << size
132,136c123,125
<                     << " channelWidth=" << channelWidth
<                     << " guardInterval=" << guardInterval
<                     << " datarate=" << payloadMode.GetDataRate (channelWidth, guardInterval, 1)
<                     << " known=" << knownDuration
<                     << " calculated=" << calculatedDuration
---
>                     << " datarate=" << payloadMode.GetDataRate (channelWidth, isShortGuardInterval, 1)
>                     << " known=" << knownDurationMicroSeconds
>                     << " calculated=" << calculatedDurationMicroSeconds
145c134
< TxDurationTest::CheckTxDuration (uint32_t size, WifiMode payloadMode, uint16_t channelWidth, uint16_t guardInterval, WifiPreamble preamble, Time knownDuration)
---
> TxDurationTest::CheckTxDuration (uint32_t size, WifiMode payloadMode, uint32_t channelWidth, bool isShortGuardInterval, WifiPreamble preamble, double knownDurationMicroSeconds)
149d137
<   txVector.SetPreambleType (preamble);
151c139
<   txVector.SetGuardInterval (guardInterval);
---
>   txVector.SetShortGuardInterval (isShortGuardInterval);
155c143
<   uint16_t testedFrequency = CHANNEL_1_MHZ;
---
>   double testedFrequency = CHANNEL_1_MHZ;
159,160c147
<       || payloadMode.GetModulationClass () == WIFI_MOD_CLASS_VHT
<       || payloadMode.GetModulationClass () == WIFI_MOD_CLASS_HE)
---
>       || payloadMode.GetModulationClass () == WIFI_MOD_CLASS_VHT)
164,165c151,152
<   Time calculatedDuration = phy->CalculateTxDuration (size, txVector, testedFrequency);
<   if (calculatedDuration != knownDuration)
---
>   double calculatedDurationMicroSeconds = ((double)phy->CalculateTxDuration (size, txVector, preamble, testedFrequency).GetNanoSeconds ()) / 1000;
>   if (calculatedDurationMicroSeconds != knownDurationMicroSeconds)
167c154
<       std::cerr << "size=" << size
---
>       std::cerr << " size=" << size
169,171c156
<                 << " channelWidth=" << +channelWidth
<                 << " guardInterval=" << guardInterval
<                 << " datarate=" << payloadMode.GetDataRate (channelWidth, guardInterval, 1)
---
>                 << " datarate=" << payloadMode.GetDataRate (channelWidth, isShortGuardInterval, 1)
173,174c158,159
<                 << " known=" << knownDuration
<                 << " calculated=" << calculatedDuration
---
>                 << " known=" << knownDurationMicroSeconds
>                 << " calculated=" << calculatedDurationMicroSeconds
178c163
<   if (payloadMode.GetModulationClass () == WIFI_MOD_CLASS_HT || payloadMode.GetModulationClass () == WIFI_MOD_CLASS_HE)
---
>   if (payloadMode.GetModulationClass () == WIFI_MOD_CLASS_HT)
182,184c167,168
<       calculatedDuration = phy->CalculateTxDuration (size, txVector, testedFrequency);
<       knownDuration += MicroSeconds (6);
<       if (calculatedDuration != knownDuration)
---
>       calculatedDurationMicroSeconds = ((double)phy->CalculateTxDuration (size, txVector, preamble, testedFrequency).GetNanoSeconds ()) / 1000;
>       if (calculatedDurationMicroSeconds != knownDurationMicroSeconds + 6)
186c170
<           std::cerr << "size=" << size
---
>           std::cerr << " size=" << size
188,190c172
<                     << " channelWidth=" << channelWidth
<                     << " guardInterval=" << guardInterval
<                     << " datarate=" << payloadMode.GetDataRate (channelWidth, guardInterval, 1)
---
>                     << " datarate=" << payloadMode.GetDataRate (channelWidth, isShortGuardInterval, 1)
192,193c174,175
<                     << " known=" << knownDuration
<                     << " calculated=" << calculatedDuration
---
>                     << " known=" << knownDurationMicroSeconds
>                     << " calculated=" << calculatedDurationMicroSeconds
208,211c190,193
<     && CheckPayloadDuration (1023, WifiPhy::GetDsssRate11Mbps (), 22, 800, WIFI_PREAMBLE_LONG, MicroSeconds (744))
<     && CheckPayloadDuration (1024, WifiPhy::GetDsssRate11Mbps (), 22, 800, WIFI_PREAMBLE_LONG, MicroSeconds (745))
<     && CheckPayloadDuration (1025, WifiPhy::GetDsssRate11Mbps (), 22, 800, WIFI_PREAMBLE_LONG, MicroSeconds (746))
<     && CheckPayloadDuration (1026, WifiPhy::GetDsssRate11Mbps (), 22, 800, WIFI_PREAMBLE_LONG, MicroSeconds (747));
---
>     && CheckPayloadDuration (1023, WifiPhy::GetDsssRate11Mbps (), 22, false, WIFI_PREAMBLE_LONG, 744)
>     && CheckPayloadDuration (1024, WifiPhy::GetDsssRate11Mbps (), 22, false, WIFI_PREAMBLE_LONG, 745)
>     && CheckPayloadDuration (1025, WifiPhy::GetDsssRate11Mbps (), 22, false, WIFI_PREAMBLE_LONG, 746)
>     && CheckPayloadDuration (1026, WifiPhy::GetDsssRate11Mbps (), 22, false, WIFI_PREAMBLE_LONG, 747);
215c197
<   //Similar, but we add PHY preamble and header durations
---
>   //Similar, but we add PLCP preamble and header durations
220,251c202,234
<     && CheckTxDuration (1023, WifiPhy::GetDsssRate11Mbps (), 22, 800, WIFI_PREAMBLE_SHORT, MicroSeconds (744 + 96))
<     && CheckTxDuration (1024, WifiPhy::GetDsssRate11Mbps (), 22, 800, WIFI_PREAMBLE_SHORT, MicroSeconds (745 + 96))
<     && CheckTxDuration (1025, WifiPhy::GetDsssRate11Mbps (), 22, 800, WIFI_PREAMBLE_SHORT, MicroSeconds (746 + 96))
<     && CheckTxDuration (1026, WifiPhy::GetDsssRate11Mbps (), 22, 800, WIFI_PREAMBLE_SHORT, MicroSeconds (747 + 96))
<     && CheckTxDuration (1023, WifiPhy::GetDsssRate11Mbps (), 22, 800, WIFI_PREAMBLE_LONG, MicroSeconds (744 + 192))
<     && CheckTxDuration (1024, WifiPhy::GetDsssRate11Mbps (), 22, 800, WIFI_PREAMBLE_LONG, MicroSeconds (745 + 192))
<     && CheckTxDuration (1025, WifiPhy::GetDsssRate11Mbps (), 22, 800, WIFI_PREAMBLE_LONG, MicroSeconds (746 + 192))
<     && CheckTxDuration (1026, WifiPhy::GetDsssRate11Mbps (), 22, 800, WIFI_PREAMBLE_LONG, MicroSeconds (747 + 192))
<     && CheckTxDuration (1023, WifiPhy::GetDsssRate5_5Mbps (), 22, 800, WIFI_PREAMBLE_SHORT, MicroSeconds (1488 + 96))
<     && CheckTxDuration (1024, WifiPhy::GetDsssRate5_5Mbps (), 22, 800, WIFI_PREAMBLE_SHORT, MicroSeconds (1490 + 96))
<     && CheckTxDuration (1025, WifiPhy::GetDsssRate5_5Mbps (), 22, 800, WIFI_PREAMBLE_SHORT, MicroSeconds (1491 + 96))
<     && CheckTxDuration (1026, WifiPhy::GetDsssRate5_5Mbps (), 22, 800, WIFI_PREAMBLE_SHORT, MicroSeconds (1493 + 96))
<     && CheckTxDuration (1023, WifiPhy::GetDsssRate5_5Mbps (), 22, 800, WIFI_PREAMBLE_LONG, MicroSeconds (1488 + 192))
<     && CheckTxDuration (1024, WifiPhy::GetDsssRate5_5Mbps (), 22, 800, WIFI_PREAMBLE_LONG, MicroSeconds (1490 + 192))
<     && CheckTxDuration (1025, WifiPhy::GetDsssRate5_5Mbps (), 22, 800, WIFI_PREAMBLE_LONG, MicroSeconds (1491 + 192))
<     && CheckTxDuration (1026, WifiPhy::GetDsssRate5_5Mbps (), 22, 800, WIFI_PREAMBLE_LONG, MicroSeconds (1493 + 192))
<     && CheckTxDuration (1023, WifiPhy::GetDsssRate2Mbps (), 22, 800, WIFI_PREAMBLE_SHORT, MicroSeconds (4092 + 96))
<     && CheckTxDuration (1024, WifiPhy::GetDsssRate2Mbps (), 22, 800, WIFI_PREAMBLE_SHORT, MicroSeconds (4096 + 96))
<     && CheckTxDuration (1025, WifiPhy::GetDsssRate2Mbps (), 22, 800, WIFI_PREAMBLE_SHORT, MicroSeconds (4100 + 96))
<     && CheckTxDuration (1026, WifiPhy::GetDsssRate2Mbps (), 22, 800, WIFI_PREAMBLE_SHORT, MicroSeconds (4104 + 96))
<     && CheckTxDuration (1023, WifiPhy::GetDsssRate2Mbps (), 22, 800, WIFI_PREAMBLE_LONG, MicroSeconds (4092 + 192))
<     && CheckTxDuration (1024, WifiPhy::GetDsssRate2Mbps (), 22, 800, WIFI_PREAMBLE_LONG, MicroSeconds (4096 + 192))
<     && CheckTxDuration (1025, WifiPhy::GetDsssRate2Mbps (), 22, 800, WIFI_PREAMBLE_LONG, MicroSeconds (4100 + 192))
<     && CheckTxDuration (1026, WifiPhy::GetDsssRate2Mbps (), 22, 800, WIFI_PREAMBLE_LONG, MicroSeconds (4104 + 192))
<     && CheckTxDuration (1023, WifiPhy::GetDsssRate1Mbps (), 22, 800, WIFI_PREAMBLE_SHORT, MicroSeconds (8184 + 192))
<     && CheckTxDuration (1024, WifiPhy::GetDsssRate1Mbps (), 22, 800, WIFI_PREAMBLE_SHORT, MicroSeconds (8192 + 192))
<     && CheckTxDuration (1025, WifiPhy::GetDsssRate1Mbps (), 22, 800, WIFI_PREAMBLE_SHORT, MicroSeconds (8200 + 192))
<     && CheckTxDuration (1026, WifiPhy::GetDsssRate1Mbps (), 22, 800, WIFI_PREAMBLE_SHORT, MicroSeconds (8208 + 192))
<     && CheckTxDuration (1023, WifiPhy::GetDsssRate1Mbps (), 22, 800, WIFI_PREAMBLE_LONG, MicroSeconds (8184 + 192))
<     && CheckTxDuration (1024, WifiPhy::GetDsssRate1Mbps (), 22, 800, WIFI_PREAMBLE_LONG, MicroSeconds (8192 + 192))
<     && CheckTxDuration (1025, WifiPhy::GetDsssRate1Mbps (), 22, 800, WIFI_PREAMBLE_LONG, MicroSeconds (8200 + 192))
<     && CheckTxDuration (1026, WifiPhy::GetDsssRate1Mbps (), 22, 800, WIFI_PREAMBLE_LONG, MicroSeconds (8208 + 192));
---
>     && CheckTxDuration (1023, WifiPhy::GetDsssRate11Mbps (), 22, false, WIFI_PREAMBLE_SHORT, 744 + 96)
>     && CheckTxDuration (1024, WifiPhy::GetDsssRate11Mbps (), 22, false, WIFI_PREAMBLE_SHORT, 745 + 96)
>     && CheckTxDuration (1025, WifiPhy::GetDsssRate11Mbps (), 22, false, WIFI_PREAMBLE_SHORT, 746 + 96)
>     && CheckTxDuration (1026, WifiPhy::GetDsssRate11Mbps (), 22, false, WIFI_PREAMBLE_SHORT, 747 + 96)
>     && CheckTxDuration (1023, WifiPhy::GetDsssRate11Mbps (), 22, false, WIFI_PREAMBLE_LONG, 744 + 192)
>     && CheckTxDuration (1024, WifiPhy::GetDsssRate11Mbps (), 22, false, WIFI_PREAMBLE_LONG, 745 + 192)
>     && CheckTxDuration (1025, WifiPhy::GetDsssRate11Mbps (), 22, false, WIFI_PREAMBLE_LONG, 746 + 192)
>     && CheckTxDuration (1026, WifiPhy::GetDsssRate11Mbps (), 22, false, WIFI_PREAMBLE_LONG, 747 + 192)
>     && CheckTxDuration (1023, WifiPhy::GetDsssRate5_5Mbps (), 22, false, WIFI_PREAMBLE_SHORT, 1488 + 96)
>     && CheckTxDuration (1024, WifiPhy::GetDsssRate5_5Mbps (), 22, false, WIFI_PREAMBLE_SHORT, 1490 + 96)
>     && CheckTxDuration (1025, WifiPhy::GetDsssRate5_5Mbps (), 22, false, WIFI_PREAMBLE_SHORT, 1491 + 96)
>     && CheckTxDuration (1026, WifiPhy::GetDsssRate5_5Mbps (), 22, false, WIFI_PREAMBLE_SHORT, 1493 + 96)
>     && CheckTxDuration (1023, WifiPhy::GetDsssRate5_5Mbps (), 22, false, WIFI_PREAMBLE_LONG, 1488 + 192)
>     && CheckTxDuration (1024, WifiPhy::GetDsssRate5_5Mbps (), 22, false, WIFI_PREAMBLE_LONG, 1490 + 192)
>     && CheckTxDuration (1025, WifiPhy::GetDsssRate5_5Mbps (), 22, false, WIFI_PREAMBLE_LONG, 1491 + 192)
>     && CheckTxDuration (1026, WifiPhy::GetDsssRate5_5Mbps (), 22, false, WIFI_PREAMBLE_LONG, 1493 + 192)
>     && CheckTxDuration (1023, WifiPhy::GetDsssRate2Mbps (), 22, false, WIFI_PREAMBLE_SHORT, 4092 + 96)
>     && CheckTxDuration (1024, WifiPhy::GetDsssRate2Mbps (), 22, false, WIFI_PREAMBLE_SHORT, 4096 + 96)
>     && CheckTxDuration (1025, WifiPhy::GetDsssRate2Mbps (), 22, false, WIFI_PREAMBLE_SHORT, 4100 + 96)
>     && CheckTxDuration (1026, WifiPhy::GetDsssRate2Mbps (), 22, false, WIFI_PREAMBLE_SHORT, 4104 + 96)
>     && CheckTxDuration (1023, WifiPhy::GetDsssRate2Mbps (), 22, false, WIFI_PREAMBLE_LONG, 4092 + 192)
>     && CheckTxDuration (1024, WifiPhy::GetDsssRate2Mbps (), 22, false, WIFI_PREAMBLE_LONG, 4096 + 192)
>     && CheckTxDuration (1025, WifiPhy::GetDsssRate2Mbps (), 22, false, WIFI_PREAMBLE_LONG, 4100 + 192)
>     && CheckTxDuration (1026, WifiPhy::GetDsssRate2Mbps (), 22, false, WIFI_PREAMBLE_LONG, 4104 + 192)
>     && CheckTxDuration (1023, WifiPhy::GetDsssRate1Mbps (), 22, false, WIFI_PREAMBLE_SHORT, 8184 + 192)
>     && CheckTxDuration (1024, WifiPhy::GetDsssRate1Mbps (), 22, false, WIFI_PREAMBLE_SHORT, 8192 + 192)
>     && CheckTxDuration (1025, WifiPhy::GetDsssRate1Mbps (), 22, false, WIFI_PREAMBLE_SHORT, 8200 + 192)
>     && CheckTxDuration (1026, WifiPhy::GetDsssRate1Mbps (), 22, false, WIFI_PREAMBLE_SHORT, 8208 + 192)
>     && CheckTxDuration (1023, WifiPhy::GetDsssRate1Mbps (), 22, false, WIFI_PREAMBLE_LONG, 8184 + 192)
>     && CheckTxDuration (1024, WifiPhy::GetDsssRate1Mbps (), 22, false, WIFI_PREAMBLE_LONG, 8192 + 192)
>     && CheckTxDuration (1025, WifiPhy::GetDsssRate1Mbps (), 22, false, WIFI_PREAMBLE_LONG, 8200 + 192)
>     && CheckTxDuration (1026, WifiPhy::GetDsssRate1Mbps (), 22, false, WIFI_PREAMBLE_LONG, 8208 + 192);
> 
254c237
<   retval = retval && CheckTxDuration (14, WifiPhy::GetDsssRate1Mbps (), 22, 800, WIFI_PREAMBLE_LONG, MicroSeconds (304));
---
>   retval = retval && CheckTxDuration (14, WifiPhy::GetDsssRate1Mbps (), 22, false, WIFI_PREAMBLE_LONG, 304);
258,260c241,243
<     && CheckTxDuration (1536, WifiPhy::GetDsssRate11Mbps (), 22, 800, WIFI_PREAMBLE_LONG, MicroSeconds (1310))
<     && CheckTxDuration (76, WifiPhy::GetDsssRate11Mbps (), 22, 800, WIFI_PREAMBLE_LONG, MicroSeconds (248))
<     && CheckTxDuration (14, WifiPhy::GetDsssRate11Mbps (), 22, 800, WIFI_PREAMBLE_LONG, MicroSeconds (203));
---
>     && CheckTxDuration (1536, WifiPhy::GetDsssRate11Mbps (), 22, false, WIFI_PREAMBLE_LONG, 1310)
>     && CheckTxDuration (76, WifiPhy::GetDsssRate11Mbps (), 22, false, WIFI_PREAMBLE_LONG, 248)
>     && CheckTxDuration (14, WifiPhy::GetDsssRate11Mbps (), 22, false, WIFI_PREAMBLE_LONG, 203);
267,269c250,252
<     && CheckTxDuration (1536, WifiPhy::GetOfdmRate54Mbps (), 20, 800, WIFI_PREAMBLE_LONG, MicroSeconds (248))
<     && CheckTxDuration (76, WifiPhy::GetOfdmRate54Mbps (), 20, 800, WIFI_PREAMBLE_LONG, MicroSeconds (32))
<     && CheckTxDuration (14, WifiPhy::GetOfdmRate54Mbps (), 20, 800, WIFI_PREAMBLE_LONG, MicroSeconds (24));
---
>     && CheckTxDuration (1536, WifiPhy::GetOfdmRate54Mbps (), 20, false, WIFI_PREAMBLE_LONG, 248)
>     && CheckTxDuration (76, WifiPhy::GetOfdmRate54Mbps (), 20, false, WIFI_PREAMBLE_LONG, 32)
>     && CheckTxDuration (14, WifiPhy::GetOfdmRate54Mbps (), 20, false, WIFI_PREAMBLE_LONG, 24);
275,277c258,260
<     && CheckTxDuration (1536, WifiPhy::GetErpOfdmRate54Mbps (), 20, 800, WIFI_PREAMBLE_LONG, MicroSeconds (254))
<     && CheckTxDuration (76, WifiPhy::GetErpOfdmRate54Mbps (), 20, 800, WIFI_PREAMBLE_LONG, MicroSeconds (38))
<     && CheckTxDuration (14, WifiPhy::GetErpOfdmRate54Mbps (), 20, 800, WIFI_PREAMBLE_LONG, MicroSeconds (30));
---
>     && CheckTxDuration (1536, WifiPhy::GetErpOfdmRate54Mbps (), 20, false, WIFI_PREAMBLE_LONG, 254)
>     && CheckTxDuration (76, WifiPhy::GetErpOfdmRate54Mbps (), 20, false, WIFI_PREAMBLE_LONG, 38)
>     && CheckTxDuration (14, WifiPhy::GetErpOfdmRate54Mbps (), 20, false, WIFI_PREAMBLE_LONG, 30);
283,312c266,295
<     && CheckTxDuration (1536, WifiPhy::GetHtMcs7 (), 20, 800, WIFI_PREAMBLE_HT_MF, MicroSeconds (228))
<     && CheckTxDuration (76, WifiPhy::GetHtMcs7 (), 20, 800, WIFI_PREAMBLE_HT_MF, MicroSeconds (48))
<     && CheckTxDuration (14, WifiPhy::GetHtMcs7 (), 20, 800, WIFI_PREAMBLE_HT_MF, MicroSeconds (40))
<     && CheckTxDuration (1536, WifiPhy::GetHtMcs7 (), 20, 800, WIFI_PREAMBLE_HT_GF, MicroSeconds (220))
<     && CheckTxDuration (76, WifiPhy::GetHtMcs7 (), 20, 800, WIFI_PREAMBLE_HT_GF, MicroSeconds (40))
<     && CheckTxDuration (14, WifiPhy::GetHtMcs7 (), 20, 800, WIFI_PREAMBLE_HT_GF, MicroSeconds (32))
<     && CheckTxDuration (1536, WifiPhy::GetHtMcs0 (), 20, 400, WIFI_PREAMBLE_HT_MF, NanoSeconds (1742400))
<     && CheckTxDuration (76, WifiPhy::GetHtMcs0 (), 20, 400, WIFI_PREAMBLE_HT_MF, MicroSeconds (126))
<     && CheckTxDuration (14, WifiPhy::GetHtMcs0 (), 20, 400, WIFI_PREAMBLE_HT_MF, NanoSeconds (57600))
<     && CheckTxDuration (1536,WifiPhy::GetHtMcs0 (), 20, 400, WIFI_PREAMBLE_HT_GF, NanoSeconds (1734400))
<     && CheckTxDuration (76, WifiPhy::GetHtMcs0 (), 20, 400, WIFI_PREAMBLE_HT_GF, MicroSeconds (118))
<     && CheckTxDuration (14, WifiPhy::GetHtMcs0 (), 20, 400, WIFI_PREAMBLE_HT_GF, NanoSeconds (49600))
<     && CheckTxDuration (1536, WifiPhy::GetHtMcs6 (), 20, 400, WIFI_PREAMBLE_HT_MF, NanoSeconds (226800))
<     && CheckTxDuration (76, WifiPhy::GetHtMcs6 (), 20, 400, WIFI_PREAMBLE_HT_MF, NanoSeconds (46800))
<     && CheckTxDuration (14, WifiPhy::GetHtMcs6 (), 20, 400, WIFI_PREAMBLE_HT_MF, NanoSeconds (39600))
<     && CheckTxDuration (1536, WifiPhy::GetHtMcs6 (), 20, 400, WIFI_PREAMBLE_HT_GF, NanoSeconds (218800))
<     && CheckTxDuration (76, WifiPhy::GetHtMcs6 (), 20, 400, WIFI_PREAMBLE_HT_GF, NanoSeconds (38800))
<     && CheckTxDuration (14, WifiPhy::GetHtMcs6 (), 20, 400, WIFI_PREAMBLE_HT_GF, NanoSeconds (31600))
<     && CheckTxDuration (1536, WifiPhy::GetHtMcs7 (), 40, 800, WIFI_PREAMBLE_HT_MF, MicroSeconds (128))
<     && CheckTxDuration (76, WifiPhy::GetHtMcs7 (), 40, 800, WIFI_PREAMBLE_HT_MF, MicroSeconds (44))
<     && CheckTxDuration (14, WifiPhy::GetHtMcs7 (), 40, 800, WIFI_PREAMBLE_HT_MF, MicroSeconds (40))
<     && CheckTxDuration (1536, WifiPhy::GetHtMcs7 (), 40, 800, WIFI_PREAMBLE_HT_GF, MicroSeconds (120))
<     && CheckTxDuration (76, WifiPhy::GetHtMcs7 (), 40, 800, WIFI_PREAMBLE_HT_GF, MicroSeconds (36))
<     && CheckTxDuration (14, WifiPhy::GetHtMcs7 (), 40, 800, WIFI_PREAMBLE_HT_GF, MicroSeconds (32))
<     && CheckTxDuration (1536, WifiPhy::GetHtMcs7 (), 40, 400, WIFI_PREAMBLE_HT_MF, NanoSeconds (118800))
<     && CheckTxDuration (76, WifiPhy::GetHtMcs7 (), 40, 400, WIFI_PREAMBLE_HT_MF, NanoSeconds (43200))
<     && CheckTxDuration (14, WifiPhy::GetHtMcs7 (), 40, 400, WIFI_PREAMBLE_HT_MF, NanoSeconds (39600))
<     && CheckTxDuration (1536, WifiPhy::GetHtMcs7 (), 40, 400, WIFI_PREAMBLE_HT_GF, NanoSeconds (110800))
<     && CheckTxDuration (76, WifiPhy::GetHtMcs7 (), 40, 400, WIFI_PREAMBLE_HT_GF, NanoSeconds (35200))
<     && CheckTxDuration (14, WifiPhy::GetHtMcs7 (), 40, 400, WIFI_PREAMBLE_HT_GF, NanoSeconds (31600));
---
>     && CheckTxDuration (1536, WifiPhy::GetHtMcs7 (), 20, false, WIFI_PREAMBLE_HT_MF, 228)
>     && CheckTxDuration (76, WifiPhy::GetHtMcs7 (), 20, false, WIFI_PREAMBLE_HT_MF, 48)
>     && CheckTxDuration (14, WifiPhy::GetHtMcs7 (), 20, false, WIFI_PREAMBLE_HT_MF, 40)
>     && CheckTxDuration (1536, WifiPhy::GetHtMcs7 (), 20, false, WIFI_PREAMBLE_HT_GF, 220)
>     && CheckTxDuration (76, WifiPhy::GetHtMcs7 (), 20, false, WIFI_PREAMBLE_HT_GF, 40)
>     && CheckTxDuration (14, WifiPhy::GetHtMcs7 (), 20, false, WIFI_PREAMBLE_HT_GF, 32)
>     && CheckTxDuration (1536, WifiPhy::GetHtMcs0 (), 20, true, WIFI_PREAMBLE_HT_MF, 1742.4)
>     && CheckTxDuration (76, WifiPhy::GetHtMcs0 (), 20, true, WIFI_PREAMBLE_HT_MF, 126)
>     && CheckTxDuration (14, WifiPhy::GetHtMcs0 (), 20, true, WIFI_PREAMBLE_HT_MF, 57.6)
>     && CheckTxDuration (1536,WifiPhy::GetHtMcs0 (), 20, true, WIFI_PREAMBLE_HT_GF, 1734.4)
>     && CheckTxDuration (76, WifiPhy::GetHtMcs0 (), 20, true, WIFI_PREAMBLE_HT_GF, 118)
>     && CheckTxDuration (14, WifiPhy::GetHtMcs0 (), 20, true, WIFI_PREAMBLE_HT_GF, 49.6)
>     && CheckTxDuration (1536, WifiPhy::GetHtMcs6 (), 20, true, WIFI_PREAMBLE_HT_MF, 226.8)
>     && CheckTxDuration (76, WifiPhy::GetHtMcs6 (), 20, true, WIFI_PREAMBLE_HT_MF, 46.8)
>     && CheckTxDuration (14, WifiPhy::GetHtMcs6 (), 20, true, WIFI_PREAMBLE_HT_MF, 39.6)
>     && CheckTxDuration (1536, WifiPhy::GetHtMcs6 (), 20, true, WIFI_PREAMBLE_HT_GF, 218.8)
>     && CheckTxDuration (76, WifiPhy::GetHtMcs6 (), 20, true, WIFI_PREAMBLE_HT_GF, 38.8)
>     && CheckTxDuration (14, WifiPhy::GetHtMcs6 (), 20, true, WIFI_PREAMBLE_HT_GF, 31.6)
>     && CheckTxDuration (1536, WifiPhy::GetHtMcs7 (), 40, false, WIFI_PREAMBLE_HT_MF, 128)
>     && CheckTxDuration (76, WifiPhy::GetHtMcs7 (), 40, false, WIFI_PREAMBLE_HT_MF, 44)
>     && CheckTxDuration (14, WifiPhy::GetHtMcs7 (), 40, false, WIFI_PREAMBLE_HT_MF, 40)
>     && CheckTxDuration (1536, WifiPhy::GetHtMcs7 (), 40, false, WIFI_PREAMBLE_HT_GF, 120)
>     && CheckTxDuration (76, WifiPhy::GetHtMcs7 (), 40, false, WIFI_PREAMBLE_HT_GF, 36)
>     && CheckTxDuration (14, WifiPhy::GetHtMcs7 (), 40, false, WIFI_PREAMBLE_HT_GF, 32)
>     && CheckTxDuration (1536, WifiPhy::GetHtMcs7 (), 40, true, WIFI_PREAMBLE_HT_MF, 118.8)
>     && CheckTxDuration (76, WifiPhy::GetHtMcs7 (), 40, true, WIFI_PREAMBLE_HT_MF, 43.2)
>     && CheckTxDuration (14, WifiPhy::GetHtMcs7 (), 40, true, WIFI_PREAMBLE_HT_MF, 39.6)
>     && CheckTxDuration (1536, WifiPhy::GetHtMcs7 (), 40, true, WIFI_PREAMBLE_HT_GF, 110.8)
>     && CheckTxDuration (76, WifiPhy::GetHtMcs7 (), 40, true, WIFI_PREAMBLE_HT_GF, 35.2)
>     && CheckTxDuration (14, WifiPhy::GetHtMcs7 (), 40, true, WIFI_PREAMBLE_HT_GF, 31.6);
318,347c301,330
<     && CheckTxDuration (1536, WifiPhy::GetVhtMcs8 (), 20, 800, WIFI_PREAMBLE_VHT_SU, MicroSeconds (196))
<     && CheckTxDuration (76, WifiPhy::GetVhtMcs8 (), 20, 800, WIFI_PREAMBLE_VHT_SU, MicroSeconds (48))
<     && CheckTxDuration (14, WifiPhy::GetVhtMcs8 (), 20, 800, WIFI_PREAMBLE_VHT_SU, MicroSeconds (40))
<     && CheckTxDuration (1536, WifiPhy::GetVhtMcs8 (), 20, 400, WIFI_PREAMBLE_VHT_SU, MicroSeconds (180))
<     && CheckTxDuration (76, WifiPhy::GetVhtMcs8 (), 20, 400, WIFI_PREAMBLE_VHT_SU, NanoSeconds (46800))
<     && CheckTxDuration (14, WifiPhy::GetVhtMcs8 (), 20, 400, WIFI_PREAMBLE_VHT_SU, NanoSeconds (39600))
<     && CheckTxDuration (1536, WifiPhy::GetVhtMcs9 (), 40, 800, WIFI_PREAMBLE_VHT_SU, MicroSeconds (108))
<     && CheckTxDuration (76, WifiPhy::GetVhtMcs9 (), 40, 800, WIFI_PREAMBLE_VHT_SU, MicroSeconds (40))
<     && CheckTxDuration (14, WifiPhy::GetVhtMcs9 (), 40, 800, WIFI_PREAMBLE_VHT_SU, MicroSeconds (40))
<     && CheckTxDuration (1536, WifiPhy::GetVhtMcs9 (), 40, 400, WIFI_PREAMBLE_VHT_SU, NanoSeconds (100800))
<     && CheckTxDuration (76, WifiPhy::GetVhtMcs9 (), 40, 400, WIFI_PREAMBLE_VHT_SU, NanoSeconds (39600))
<     && CheckTxDuration (14, WifiPhy::GetVhtMcs9 (), 40, 400, WIFI_PREAMBLE_VHT_SU, NanoSeconds (39600))
<     && CheckTxDuration (1536, WifiPhy::GetVhtMcs0 (), 80, 800, WIFI_PREAMBLE_VHT_SU, MicroSeconds (460))
<     && CheckTxDuration (76, WifiPhy::GetVhtMcs0 (), 80, 800, WIFI_PREAMBLE_VHT_SU, MicroSeconds (60))
<     && CheckTxDuration (14, WifiPhy::GetVhtMcs0 (), 80, 800, WIFI_PREAMBLE_VHT_SU, MicroSeconds (44))
<     && CheckTxDuration (1536, WifiPhy::GetVhtMcs0 (), 80, 400, WIFI_PREAMBLE_VHT_SU, NanoSeconds (417600))
<     && CheckTxDuration (76, WifiPhy::GetVhtMcs0 (), 80, 400, WIFI_PREAMBLE_VHT_SU, NanoSeconds (57600))
<     && CheckTxDuration (14, WifiPhy::GetVhtMcs0 (), 80, 400, WIFI_PREAMBLE_VHT_SU, NanoSeconds (43200))
<     && CheckTxDuration (1536, WifiPhy::GetVhtMcs9 (), 80, 800, WIFI_PREAMBLE_VHT_SU, MicroSeconds (68))
<     && CheckTxDuration (76, WifiPhy::GetVhtMcs9 (), 80, 800, WIFI_PREAMBLE_VHT_SU, MicroSeconds (40))
<     && CheckTxDuration (14, WifiPhy::GetVhtMcs9 (), 80, 800, WIFI_PREAMBLE_VHT_SU, MicroSeconds (40))
<     && CheckTxDuration (1536, WifiPhy::GetVhtMcs9 (), 80, 400, WIFI_PREAMBLE_VHT_SU, NanoSeconds (64800))
<     && CheckTxDuration (76, WifiPhy::GetVhtMcs9 (), 80, 400, WIFI_PREAMBLE_VHT_SU, NanoSeconds (39600))
<     && CheckTxDuration (14, WifiPhy::GetVhtMcs9 (), 80, 400, WIFI_PREAMBLE_VHT_SU, NanoSeconds (39600))
<     && CheckTxDuration (1536, WifiPhy::GetVhtMcs8 (), 160, 800, WIFI_PREAMBLE_VHT_SU, MicroSeconds (56))
<     && CheckTxDuration (76, WifiPhy::GetVhtMcs8 (), 160, 800, WIFI_PREAMBLE_VHT_SU, MicroSeconds (40))
<     && CheckTxDuration (14, WifiPhy::GetVhtMcs8 (), 160, 800, WIFI_PREAMBLE_VHT_SU, MicroSeconds (40))
<     && CheckTxDuration (1536, WifiPhy::GetVhtMcs8 (), 160, 400, WIFI_PREAMBLE_VHT_SU, MicroSeconds (54))
<     && CheckTxDuration (76, WifiPhy::GetVhtMcs8 (), 160, 400, WIFI_PREAMBLE_VHT_SU, NanoSeconds (39600))
<     && CheckTxDuration (14, WifiPhy::GetVhtMcs8 (), 160, 400, WIFI_PREAMBLE_VHT_SU, NanoSeconds (39600));
---
>     && CheckTxDuration (1536, WifiPhy::GetVhtMcs8 (), 20, false, WIFI_PREAMBLE_VHT, 200)
>     && CheckTxDuration (76, WifiPhy::GetVhtMcs8 (), 20, false, WIFI_PREAMBLE_VHT, 52)
>     && CheckTxDuration (14, WifiPhy::GetVhtMcs8 (), 20, false, WIFI_PREAMBLE_VHT, 44)
>     && CheckTxDuration (1536, WifiPhy::GetVhtMcs8 (), 20, true, WIFI_PREAMBLE_VHT, 184)
>     && CheckTxDuration (76, WifiPhy::GetVhtMcs8 (), 20, true, WIFI_PREAMBLE_VHT, 50.8)
>     && CheckTxDuration (14, WifiPhy::GetVhtMcs8 (), 20, true, WIFI_PREAMBLE_VHT, 43.6)
>     && CheckTxDuration (1536, WifiPhy::GetVhtMcs9 (), 40, false, WIFI_PREAMBLE_VHT, 112)
>     && CheckTxDuration (76, WifiPhy::GetVhtMcs9 (), 40, false, WIFI_PREAMBLE_VHT, 44)
>     && CheckTxDuration (14, WifiPhy::GetVhtMcs9 (), 40, false, WIFI_PREAMBLE_VHT, 44)
>     && CheckTxDuration (1536, WifiPhy::GetVhtMcs9 (), 40, true, WIFI_PREAMBLE_VHT, 104.8)
>     && CheckTxDuration (76, WifiPhy::GetVhtMcs9 (), 40, true, WIFI_PREAMBLE_VHT, 43.6)
>     && CheckTxDuration (14, WifiPhy::GetVhtMcs9 (), 40, true, WIFI_PREAMBLE_VHT, 43.6)
>     && CheckTxDuration (1536, WifiPhy::GetVhtMcs0 (), 80, false, WIFI_PREAMBLE_VHT, 464)
>     && CheckTxDuration (76, WifiPhy::GetVhtMcs0 (), 80, false, WIFI_PREAMBLE_VHT, 64)
>     && CheckTxDuration (14, WifiPhy::GetVhtMcs0 (), 80, false, WIFI_PREAMBLE_VHT, 48)
>     && CheckTxDuration (1536, WifiPhy::GetVhtMcs0 (), 80, true, WIFI_PREAMBLE_VHT, 421.6)
>     && CheckTxDuration (76, WifiPhy::GetVhtMcs0 (), 80, true, WIFI_PREAMBLE_VHT, 61.6)
>     && CheckTxDuration (14, WifiPhy::GetVhtMcs0 (), 80, true, WIFI_PREAMBLE_VHT, 47.2)
>     && CheckTxDuration (1536, WifiPhy::GetVhtMcs9 (), 80, false, WIFI_PREAMBLE_VHT, 72)
>     && CheckTxDuration (76, WifiPhy::GetVhtMcs9 (), 80, false, WIFI_PREAMBLE_VHT, 44)
>     && CheckTxDuration (14, WifiPhy::GetVhtMcs9 (), 80, false, WIFI_PREAMBLE_VHT, 44)
>     && CheckTxDuration (1536, WifiPhy::GetVhtMcs9 (), 80, true, WIFI_PREAMBLE_VHT, 68.8)
>     && CheckTxDuration (76, WifiPhy::GetVhtMcs9 (), 80, true, WIFI_PREAMBLE_VHT, 43.6)
>     && CheckTxDuration (14, WifiPhy::GetVhtMcs9 (), 80, true, WIFI_PREAMBLE_VHT, 43.6)
>     && CheckTxDuration (1536, WifiPhy::GetVhtMcs8 (), 160, false, WIFI_PREAMBLE_VHT, 60)
>     && CheckTxDuration (76, WifiPhy::GetVhtMcs8 (), 160, false, WIFI_PREAMBLE_VHT, 44)
>     && CheckTxDuration (14, WifiPhy::GetVhtMcs8 (), 160, false, WIFI_PREAMBLE_VHT, 44)
>     && CheckTxDuration (1536, WifiPhy::GetVhtMcs8 (), 160, true, WIFI_PREAMBLE_VHT, 58)
>     && CheckTxDuration (76, WifiPhy::GetVhtMcs8 (), 160, true, WIFI_PREAMBLE_VHT, 43.6)
>     && CheckTxDuration (14, WifiPhy::GetVhtMcs8 (), 160, true, WIFI_PREAMBLE_VHT, 43.6);
350,426d332
< 
<   //802.11ax durations
<   retval = retval
<     && CheckTxDuration (1536, WifiPhy::GetHeMcs0 (), 20, 800, WIFI_PREAMBLE_HE_SU, NanoSeconds (1485600))
<     && CheckTxDuration (76, WifiPhy::GetHeMcs0 (), 20, 800, WIFI_PREAMBLE_HE_SU, NanoSeconds (125600))
<     && CheckTxDuration (14, WifiPhy::GetHeMcs0 (), 20, 800, WIFI_PREAMBLE_HE_SU, NanoSeconds (71200))
<     && CheckTxDuration (1536, WifiPhy::GetHeMcs0 (), 40, 800, WIFI_PREAMBLE_HE_SU, NanoSeconds (764800))
<     && CheckTxDuration (76, WifiPhy::GetHeMcs0 (), 40, 800, WIFI_PREAMBLE_HE_SU, NanoSeconds (84800))
<     && CheckTxDuration (14, WifiPhy::GetHeMcs0 (), 40, 800, WIFI_PREAMBLE_HE_SU, NanoSeconds (57600))
<     && CheckTxDuration (1536, WifiPhy::GetHeMcs0 (), 80, 800, WIFI_PREAMBLE_HE_SU, NanoSeconds (397600))
<     && CheckTxDuration (76, WifiPhy::GetHeMcs0 (), 80, 800, WIFI_PREAMBLE_HE_SU, NanoSeconds (71200))
<     && CheckTxDuration (14, WifiPhy::GetHeMcs0 (), 80, 800, WIFI_PREAMBLE_HE_SU, NanoSeconds (57600))
<     && CheckTxDuration (1536, WifiPhy::GetHeMcs0 (), 160, 800, WIFI_PREAMBLE_HE_SU, NanoSeconds (220800))
<     && CheckTxDuration (76, WifiPhy::GetHeMcs0 (), 160, 800, WIFI_PREAMBLE_HE_SU, NanoSeconds (57600))
<     && CheckTxDuration (14, WifiPhy::GetHeMcs0 (), 160, 800, WIFI_PREAMBLE_HE_SU, NanoSeconds (57600))
<     && CheckTxDuration (1536, WifiPhy::GetHeMcs0 (), 20, 1600, WIFI_PREAMBLE_HE_SU, NanoSeconds (1570400))
<     && CheckTxDuration (76, WifiPhy::GetHeMcs0 (), 20, 1600, WIFI_PREAMBLE_HE_SU, NanoSeconds (130400))
<     && CheckTxDuration (14, WifiPhy::GetHeMcs0 (), 20, 1600, WIFI_PREAMBLE_HE_SU, NanoSeconds (72800))
<     && CheckTxDuration (1536, WifiPhy::GetHeMcs0 (), 40, 1600, WIFI_PREAMBLE_HE_SU, NanoSeconds (807200))
<     && CheckTxDuration (76, WifiPhy::GetHeMcs0 (), 40, 1600, WIFI_PREAMBLE_HE_SU, NanoSeconds (87200))
<     && CheckTxDuration (14, WifiPhy::GetHeMcs0 (), 40, 1600, WIFI_PREAMBLE_HE_SU, NanoSeconds (58400))
<     && CheckTxDuration (1536, WifiPhy::GetHeMcs0 (), 80, 1600, WIFI_PREAMBLE_HE_SU, NanoSeconds (418400))
<     && CheckTxDuration (76, WifiPhy::GetHeMcs0 (), 80, 1600, WIFI_PREAMBLE_HE_SU, NanoSeconds (72800))
<     && CheckTxDuration (14, WifiPhy::GetHeMcs0 (), 80, 1600, WIFI_PREAMBLE_HE_SU, NanoSeconds (58400))
<     && CheckTxDuration (1536, WifiPhy::GetHeMcs0 (), 160, 1600, WIFI_PREAMBLE_HE_SU, NanoSeconds (231200))
<     && CheckTxDuration (76, WifiPhy::GetHeMcs0 (), 160, 1600, WIFI_PREAMBLE_HE_SU, NanoSeconds (58400))
<     && CheckTxDuration (14, WifiPhy::GetHeMcs0 (), 160, 1600, WIFI_PREAMBLE_HE_SU, NanoSeconds (58400))
<     && CheckTxDuration (1536, WifiPhy::GetHeMcs0 (), 20, 3200, WIFI_PREAMBLE_HE_SU, MicroSeconds (1740))
<     && CheckTxDuration (76, WifiPhy::GetHeMcs0 (), 20, 3200, WIFI_PREAMBLE_HE_SU, MicroSeconds (140))
<     && CheckTxDuration (14, WifiPhy::GetHeMcs0 (), 20, 3200, WIFI_PREAMBLE_HE_SU, MicroSeconds (76))
<     && CheckTxDuration (1536, WifiPhy::GetHeMcs0 (), 40, 3200, WIFI_PREAMBLE_HE_SU, MicroSeconds (892))
<     && CheckTxDuration (76, WifiPhy::GetHeMcs0 (), 40, 3200, WIFI_PREAMBLE_HE_SU, MicroSeconds (92))
<     && CheckTxDuration (14, WifiPhy::GetHeMcs0 (), 40, 3200, WIFI_PREAMBLE_HE_SU, MicroSeconds (60))
<     && CheckTxDuration (1536, WifiPhy::GetHeMcs0 (), 80, 3200, WIFI_PREAMBLE_HE_SU, MicroSeconds (460))
<     && CheckTxDuration (76, WifiPhy::GetHeMcs0 (), 80, 3200, WIFI_PREAMBLE_HE_SU, MicroSeconds (76))
<     && CheckTxDuration (14, WifiPhy::GetHeMcs0 (), 80, 3200, WIFI_PREAMBLE_HE_SU, MicroSeconds (60))
<     && CheckTxDuration (1536, WifiPhy::GetHeMcs0 (), 160, 3200, WIFI_PREAMBLE_HE_SU, MicroSeconds (252))
<     && CheckTxDuration (76, WifiPhy::GetHeMcs0 (), 160, 3200, WIFI_PREAMBLE_HE_SU, MicroSeconds (60))
<     && CheckTxDuration (14, WifiPhy::GetHeMcs0 (), 160, 3200, WIFI_PREAMBLE_HE_SU, MicroSeconds (60))
<     && CheckTxDuration (1536, WifiPhy::GetHeMcs11 (), 20, 800, WIFI_PREAMBLE_HE_SU, NanoSeconds (139200))
<     && CheckTxDuration (76, WifiPhy::GetHeMcs11 (), 20, 800, WIFI_PREAMBLE_HE_SU, NanoSeconds (57600))
<     && CheckTxDuration (14, WifiPhy::GetHeMcs11 (), 20, 800, WIFI_PREAMBLE_HE_SU, NanoSeconds (57600))
<     && CheckTxDuration (1536, WifiPhy::GetHeMcs11 (), 40, 800, WIFI_PREAMBLE_HE_SU, NanoSeconds (98400))
<     && CheckTxDuration (76, WifiPhy::GetHeMcs11 (), 40, 800, WIFI_PREAMBLE_HE_SU, NanoSeconds (57600))
<     && CheckTxDuration (14, WifiPhy::GetHeMcs11 (), 40, 800, WIFI_PREAMBLE_HE_SU, NanoSeconds (57600))
<     && CheckTxDuration (1536, WifiPhy::GetHeMcs11 (), 80, 800, WIFI_PREAMBLE_HE_SU, NanoSeconds (71200))
<     && CheckTxDuration (76, WifiPhy::GetHeMcs11 (), 80, 800, WIFI_PREAMBLE_HE_SU, NanoSeconds (57600))
<     && CheckTxDuration (14, WifiPhy::GetHeMcs11 (), 80, 800, WIFI_PREAMBLE_HE_SU, NanoSeconds (57600))
<     && CheckTxDuration (1536, WifiPhy::GetHeMcs11 (), 160, 800, WIFI_PREAMBLE_HE_SU, NanoSeconds (57600))
<     && CheckTxDuration (76, WifiPhy::GetHeMcs11 (), 160, 800, WIFI_PREAMBLE_HE_SU, NanoSeconds (57600))
<     && CheckTxDuration (14, WifiPhy::GetHeMcs11 (), 160, 800, WIFI_PREAMBLE_HE_SU, NanoSeconds (57600))
<     && CheckTxDuration (1536, WifiPhy::GetHeMcs11 (), 20, 1600, WIFI_PREAMBLE_HE_SU, NanoSeconds (144800))
<     && CheckTxDuration (76, WifiPhy::GetHeMcs11 (), 20, 1600, WIFI_PREAMBLE_HE_SU, NanoSeconds (58400))
<     && CheckTxDuration (14, WifiPhy::GetHeMcs11 (), 20, 1600, WIFI_PREAMBLE_HE_SU, NanoSeconds (58400))
<     && CheckTxDuration (1536, WifiPhy::GetHeMcs11 (), 40, 1600, WIFI_PREAMBLE_HE_SU, NanoSeconds (101600))
<     && CheckTxDuration (76, WifiPhy::GetHeMcs11 (), 40, 1600, WIFI_PREAMBLE_HE_SU, NanoSeconds (58400))
<     && CheckTxDuration (14, WifiPhy::GetHeMcs11 (), 40, 1600, WIFI_PREAMBLE_HE_SU, NanoSeconds (58400))
<     && CheckTxDuration (1536, WifiPhy::GetHeMcs11 (), 80, 1600, WIFI_PREAMBLE_HE_SU, NanoSeconds (72800))
<     && CheckTxDuration (76, WifiPhy::GetHeMcs11 (), 80, 1600, WIFI_PREAMBLE_HE_SU, NanoSeconds (58400))
<     && CheckTxDuration (14, WifiPhy::GetHeMcs11 (), 80, 1600, WIFI_PREAMBLE_HE_SU, NanoSeconds (58400))
<     && CheckTxDuration (1536, WifiPhy::GetHeMcs11 (), 160, 1600, WIFI_PREAMBLE_HE_SU, NanoSeconds (58400))
<     && CheckTxDuration (76, WifiPhy::GetHeMcs11 (), 160, 1600, WIFI_PREAMBLE_HE_SU, NanoSeconds (58400))
<     && CheckTxDuration (14, WifiPhy::GetHeMcs11 (), 160, 1600, WIFI_PREAMBLE_HE_SU, NanoSeconds (58400))
<     && CheckTxDuration (1536, WifiPhy::GetHeMcs11 (), 20, 3200, WIFI_PREAMBLE_HE_SU, MicroSeconds (156))
<     && CheckTxDuration (76, WifiPhy::GetHeMcs11 (), 20, 3200, WIFI_PREAMBLE_HE_SU, MicroSeconds (60))
<     && CheckTxDuration (14, WifiPhy::GetHeMcs11 (), 20, 3200, WIFI_PREAMBLE_HE_SU, MicroSeconds (60))
<     && CheckTxDuration (1536, WifiPhy::GetHeMcs11 (), 40, 3200, WIFI_PREAMBLE_HE_SU, MicroSeconds (108))
<     && CheckTxDuration (76, WifiPhy::GetHeMcs11 (), 40, 3200, WIFI_PREAMBLE_HE_SU, MicroSeconds (60))
<     && CheckTxDuration (14, WifiPhy::GetHeMcs11 (), 40, 3200, WIFI_PREAMBLE_HE_SU, MicroSeconds (60))
<     && CheckTxDuration (1536, WifiPhy::GetHeMcs11 (), 80, 3200, WIFI_PREAMBLE_HE_SU, MicroSeconds (76))
<     && CheckTxDuration (76, WifiPhy::GetHeMcs11 (), 80, 3200, WIFI_PREAMBLE_HE_SU, MicroSeconds (60))
<     && CheckTxDuration (14, WifiPhy::GetHeMcs11 (), 80, 3200, WIFI_PREAMBLE_HE_SU, MicroSeconds (60))
<     && CheckTxDuration (1536, WifiPhy::GetHeMcs11 (), 160, 3200, WIFI_PREAMBLE_HE_SU, MicroSeconds (60))
<     && CheckTxDuration (76, WifiPhy::GetHeMcs11 (), 160, 3200, WIFI_PREAMBLE_HE_SU, MicroSeconds (60))
<     && CheckTxDuration (14, WifiPhy::GetHeMcs11 (), 160, 3200, WIFI_PREAMBLE_HE_SU, MicroSeconds (60));
< 
<   NS_TEST_EXPECT_MSG_EQ (retval, true, "an 802.11ax duration failed");
429,434c335
< /**
<  * \ingroup wifi-test
<  * \ingroup tests
<  *
<  * \brief Tx Duration Test Suite
<  */
---
> 
442c343
<   : TestSuite ("wifi-devices-tx-duration", UNIT)
---
>   : TestSuite ("devices-wifi-tx-duration", UNIT)
447c348
< static TxDurationTestSuite g_txDurationTestSuite; ///< the test suite
---
> static TxDurationTestSuite g_txDurationTestSuite;
diff ../../NS3-WiGig/src/wifi/test/wifi-aggregation-test.cc ../../ns-3-dev/src/wifi/test/wifi-aggregation-test.cc
22a23
> #include "ns3/object-factory.h"
25,26c26,27
< #include "ns3/wifi-psdu.h"
< #include "ns3/sta-wifi-mac.h"
---
> #include "ns3/mac-low.h"
> #include "ns3/edca-txop-n.h"
29,43c30,35
< #include "ns3/mac-low.h"
< #include "ns3/msdu-aggregator.h"
< #include "ns3/mpdu-aggregator.h"
< #include "ns3/wifi-net-device.h"
< #include "ns3/ht-configuration.h"
< #include "ns3/vht-configuration.h"
< #include "ns3/he-configuration.h"
< #include "ns3/node-container.h"
< #include "ns3/yans-wifi-helper.h"
< #include "ns3/mobility-helper.h"
< #include "ns3/pointer.h"
< #include "ns3/packet-socket-server.h"
< #include "ns3/packet-socket-client.h"
< #include "ns3/packet-socket-helper.h"
< #include <iterator>
---
> #include "ns3/dcf-manager.h"
> #include "ns3/ampdu-tag.h"
> #include "ns3/wifi-mac-trailer.h"
> #include "ns3/msdu-standard-aggregator.h"
> #include "ns3/mpdu-standard-aggregator.h"
> #include "ns3/log.h"
47,52d38
< /**
<  * \ingroup wifi-test
<  * \ingroup tests
<  *
<  * \brief Ampdu Aggregation Test
<  */
60,64c46,53
<   Ptr<WifiNetDevice> m_device; ///<WifiNetDevice
<   Ptr<StaWifiMac> m_mac; ///< Mac
<   Ptr<YansWifiPhy> m_phy; ///< Phy
<   Ptr<WifiRemoteStationManager> m_manager; ///< remote station manager
<   ObjectFactory m_factory; ///< factory
---
>   Ptr<MacLow> m_low;
>   Ptr<YansWifiPhy> m_phy;
>   Ptr<EdcaTxopN> m_edca;
>   MacTxMiddle *m_txMiddle;
>   Ptr<WifiRemoteStationManager> m_manager;
>   ObjectFactory m_factory;
>   Ptr<MpduAggregator> m_mpduAggregator;
>   DcfManager *m_dcfManager;
76,82d64
<    * Create device and attach HT configuration.
<    */
<   m_device = CreateObject<WifiNetDevice> ();
<   Ptr<HtConfiguration> htConfiguration = CreateObject<HtConfiguration> ();
<   m_device->SetHtConfiguration (htConfiguration);
< 
<   /*
86d67
<   m_phy->SetDevice (m_device);
88d68
<   m_device->SetPhy (m_phy);
98c78
<   m_device->SetRemoteStationManager (m_manager);
---
>   m_manager->SetHtSupported (true);
103,109c83,101
<   m_mac = CreateObject<StaWifiMac> ();
<   m_mac->SetDevice (m_device);
<   m_mac->SetWifiPhy (m_phy);
<   m_mac->SetWifiRemoteStationManager (m_manager);
<   m_mac->SetAddress (Mac48Address ("00:00:00:00:00:01"));
<   m_mac->ConfigureStandard (WIFI_PHY_STANDARD_80211n_5GHZ);
<   m_device->SetMac (m_mac);
---
>   m_low = CreateObject<MacLow> ();
>   m_low->SetPhy (m_phy);
>   m_low->SetWifiRemoteStationManager (m_manager);
>   m_low->SetAddress (Mac48Address ("00:00:00:00:00:01"));
> 
>   m_dcfManager = new DcfManager ();
>   m_dcfManager->SetupLowListener (m_low);
>   m_dcfManager->SetupPhyListener (m_phy);
>   m_dcfManager->SetSlot (MicroSeconds (9));
> 
>   m_edca = CreateObject<EdcaTxopN> ();
>   m_edca->SetLow (m_low);
>   m_edca->SetAccessCategory (AC_BE);
>   m_edca->SetWifiRemoteStationManager (m_manager);
>   m_edca->SetManager (m_dcfManager);
>   
>   m_txMiddle = new MacTxMiddle ();
>   m_edca->SetTxMiddle (m_txMiddle);
>   m_edca->CompleteConfig ();
114,118c106,110
<   m_mac->SetAttribute ("BE_MaxAmpduSize", UintegerValue (65535));
<   Ptr<HtCapabilities> htCapabilities = Create<HtCapabilities> ();
<   htCapabilities->SetMaxAmpduLength (65535);
<   m_manager->AddStationHtCapabilities (Mac48Address ("00:00:00:00:00:02"), htCapabilities);
<   m_manager->AddStationHtCapabilities (Mac48Address ("00:00:00:00:00:03"), htCapabilities);
---
>   m_factory = ObjectFactory ();
>   m_factory.SetTypeId ("ns3::MpduStandardAggregator");
>   m_factory.Set ("MaxAmpduSize", UintegerValue (65535));
>   m_mpduAggregator = m_factory.Create<MpduAggregator> ();
>   m_edca->SetMpduAggregator (m_mpduAggregator);
130c122
<   uint16_t sequence = m_mac->m_txMiddle->GetNextSequenceNumberFor (&hdr);
---
>   uint16_t sequence = m_txMiddle->GetNextSequenceNumberfor (&hdr);
142c134
<   reqHdr.SetBufferSize (64);
---
>   reqHdr.SetBufferSize (0);
145,146c137
<   m_mac->GetBEQueue ()->m_baManager->CreateAgreement (&reqHdr, hdr.GetAddr1 ());
<   m_mac->GetBEQueue ()->m_baManager->NotifyAgreementEstablished (hdr.GetAddr1 (), 0, 0);
---
>   m_edca->m_baManager->CreateAgreement (&reqHdr, hdr.GetAddr1 ());
153,157c144,150
<   WifiTxVector txVector = m_mac->GetBEQueue ()->GetLow ()->GetDataTxVector (Create<const WifiMacQueueItem> (pkt, hdr));
< 
<   auto mpduList = m_mac->GetBEQueue ()->GetLow ()->GetMpduAggregator ()->GetNextAmpdu (Create<WifiMacQueueItem> (pkt, hdr),
<                                                                                        txVector);
<   NS_TEST_EXPECT_MSG_EQ (mpduList.empty (), true, "a single packet should not result in an A-MPDU");
---
>   m_low->m_currentHdr = hdr;
>   m_low->m_currentPacket = pkt->Copy();
>   m_low->m_currentTxVector = m_low->GetDataTxVector (m_low->m_currentPacket, &m_low->m_currentHdr);
> 
>   bool isAmpdu = m_low->IsAmpdu (pkt, hdr);
>   NS_TEST_EXPECT_MSG_EQ (isAmpdu, false, "a single packet should not result in an A-MPDU");
>   NS_TEST_EXPECT_MSG_EQ (m_low->m_aggregateQueue->GetSize (), 0, "aggregation queue is not flushed");
178,179c171,172
<   m_mac->GetBEQueue ()->GetWifiMacQueue ()->Enqueue (Create<WifiMacQueueItem> (pkt1, hdr1));
<   m_mac->GetBEQueue ()->GetWifiMacQueue ()->Enqueue (Create<WifiMacQueueItem> (pkt2, hdr2));
---
>   m_edca->GetEdcaQueue ()->Enqueue (pkt1, hdr1);
>   m_edca->GetEdcaQueue ()->Enqueue (pkt2, hdr2);
181,188c174,179
<   mpduList = m_mac->GetBEQueue ()->GetLow ()->GetMpduAggregator ()->GetNextAmpdu (Create<WifiMacQueueItem> (pkt, hdr),
<                                                                                   txVector);
<   Ptr<WifiPsdu> psdu = Create<WifiPsdu> (mpduList);
< 
<   NS_TEST_EXPECT_MSG_EQ (mpduList.empty (), false, "MPDU aggregation failed");
<   NS_TEST_EXPECT_MSG_EQ (psdu->GetSize (), 4606, "A-MPDU size is not correct");
<   NS_TEST_EXPECT_MSG_EQ (mpduList.size (), 3, "A-MPDU should contain 3 MPDUs");
<   NS_TEST_EXPECT_MSG_EQ (m_mac->GetBEQueue ()->GetWifiMacQueue ()->GetNPackets (), 0, "queue should be empty");
---
>   isAmpdu = m_low->IsAmpdu (pkt, hdr);
>   uint32_t aggregationQueueSize = m_low->m_aggregateQueue->GetSize ();
>   NS_TEST_EXPECT_MSG_EQ (isAmpdu, true, "MPDU aggregation failed");
>   NS_TEST_EXPECT_MSG_EQ (m_low->m_currentPacket->GetSize (), 4606, "A-MPDU size is not correct");
>   NS_TEST_EXPECT_MSG_EQ (aggregationQueueSize, 3, "aggregation queue should not be empty");
>   NS_TEST_EXPECT_MSG_EQ (m_edca->GetEdcaQueue ()->GetSize (), 0, "queue should be empty");
190c181
<   Ptr <WifiMacQueueItem> dequeuedItem;
---
>   Ptr <const Packet> dequeuedPacket;
192,196c183,190
<   for (uint32_t i = 0; i < psdu->GetNMpdus (); i++)
<     {
<       NS_TEST_EXPECT_MSG_EQ (psdu->GetHeader (i).GetSequenceNumber (), i, "wrong sequence number");
<     }
< 
---
>   uint32_t i = 0;
>   for (; aggregationQueueSize > 0; aggregationQueueSize--, i++)
>   {
>     dequeuedPacket = m_low->m_aggregateQueue->Dequeue (&dequeuedHdr);
>     NS_TEST_EXPECT_MSG_EQ (dequeuedHdr.GetSequenceNumber (), i, "wrong sequence number");
>   }
>   NS_TEST_EXPECT_MSG_EQ (aggregationQueueSize, 0, "aggregation queue should be empty");
>   
213c207
<   hdr2.SetType (WIFI_MAC_QOSDATA);
---
>   hdr2.SetType (WIFI_MAC_DATA);
221c215
<   hdr3.SetType (WIFI_MAC_QOSDATA);
---
>   hdr3.SetType (WIFI_MAC_DATA);
224,240c218,234
<   m_mac->GetBEQueue ()->GetWifiMacQueue ()->Enqueue (Create<WifiMacQueueItem> (pkt3, hdr3));
< 
<   mpduList = m_mac->GetBEQueue ()->GetLow ()->GetMpduAggregator ()->GetNextAmpdu (Create<WifiMacQueueItem> (pkt1, hdr1),
<                                                                                   txVector);
<   NS_TEST_EXPECT_MSG_EQ (mpduList.empty (), true, "a single packet for this destination should not result in an A-MPDU");
< 
<   mpduList = m_mac->GetBEQueue ()->GetLow ()->GetMpduAggregator ()->GetNextAmpdu (Create<WifiMacQueueItem> (pkt2, hdr2),
<                                                                                   txVector);
<   NS_TEST_EXPECT_MSG_EQ (mpduList.empty (), true, "no MPDU aggregation should be performed if there is no agreement");
< 
<   m_manager->SetMaxSsrc (0); //set to 0 in order to fake that the maximum number of retries has been reached
<   m_mac->GetBEQueue ()->m_currentHdr = hdr2;
<   m_mac->GetBEQueue ()->m_currentPacket = pkt2->Copy ();
<   m_mac->GetBEQueue ()->MissedAck ();
< 
<   NS_TEST_EXPECT_MSG_EQ (m_mac->GetBEQueue ()->m_currentPacket, 0, "packet should be discarded");
<   m_mac->GetBEQueue ()->GetWifiMacQueue ()->Remove (pkt3);
---
>   m_edca->GetEdcaQueue ()->Enqueue (pkt3, hdr3);
>   
>   isAmpdu = m_low->IsAmpdu (pkt1, hdr1);
>   NS_TEST_EXPECT_MSG_EQ (isAmpdu, false, "a single packet for this destination should not result in an A-MPDU");
>   NS_TEST_EXPECT_MSG_EQ (m_low->m_aggregateQueue->GetSize (), 0, "aggregation queue is not flushed");
>   
>   m_edca->m_currentHdr = hdr2;
>   m_edca->m_currentPacket = pkt2->Copy ();
>   isAmpdu = m_low->IsAmpdu (pkt2, hdr2);
>   NS_TEST_EXPECT_MSG_EQ (isAmpdu, false, "no MPDU aggregation should be performed if there is no agreement");
>   NS_TEST_EXPECT_MSG_EQ (m_low->m_aggregateQueue->GetSize (), 0, "aggregation queue is not flushed");
>   
>   m_manager->SetMaxSlrc (0); //set to 0 in order to fake that the maximum number of retries has been reached
>   m_edca->MissedAck();
>   
>   NS_TEST_EXPECT_MSG_EQ (m_edca->m_currentPacket, 0, "packet should be discarded");
>   m_edca->GetEdcaQueue ()->Remove (pkt3);
243,250c237,238
< 
<   m_manager->Dispose ();
<   m_manager = 0;
< 
<   m_device->Dispose ();
<   m_device = 0;
< 
<   htConfiguration = 0;
---
>   delete m_txMiddle;
>   delete m_dcfManager;
253,258c241
< /**
<  * \ingroup wifi-test
<  * \ingroup tests
<  *
<  * \brief Two Level Aggregation Test
<  */
---
> 
266,270c249,255
<   Ptr<WifiNetDevice> m_device; ///<WifiNetDevice
<   Ptr<StaWifiMac> m_mac; ///< Mac
<   Ptr<YansWifiPhy> m_phy; ///< Phy
<   Ptr<WifiRemoteStationManager> m_manager; ///< remote station manager
<   ObjectFactory m_factory; ///< factory
---
>   Ptr<MacLow> m_low;
>   Ptr<YansWifiPhy> m_phy;
>   Ptr<EdcaTxopN> m_edca;
>   Ptr<WifiRemoteStationManager> m_manager;
>   ObjectFactory m_factory;
>   Ptr<MsduAggregator> m_msduAggregator;
>   Ptr<MpduAggregator> m_mpduAggregator;
282,288d266
<    * Create device and attach HT configuration.
<    */
<   m_device = CreateObject<WifiNetDevice> ();
<   Ptr<HtConfiguration> htConfiguration = CreateObject<HtConfiguration> ();
<   m_device->SetHtConfiguration (htConfiguration);
< 
<   /*
292d269
<   m_phy->SetDevice (m_device);
294d270
<   m_device->SetPhy (m_phy);
304d279
<   m_device->SetRemoteStationManager (m_manager);
307c282
<    * Create and configure mac layer.
---
>    * Create and configure maclayer.
309,315c284,292
<   m_mac = CreateObject<StaWifiMac> ();
<   m_mac->SetDevice (m_device);
<   m_mac->SetWifiPhy (m_phy);
<   m_mac->SetWifiRemoteStationManager (m_manager);
<   m_mac->SetAddress (Mac48Address ("00:00:00:00:00:01"));
<   m_mac->ConfigureStandard (WIFI_PHY_STANDARD_80211n_5GHZ);
<   m_device->SetMac (m_mac);
---
>   m_low = CreateObject<MacLow> ();
>   m_low->SetPhy (m_phy);
>   m_low->SetWifiRemoteStationManager (m_manager);
> 
>   m_edca = CreateObject<EdcaTxopN> ();
>   m_edca->SetLow (m_low);
>   m_edca->SetAccessCategory (AC_BE);
>   m_edca->SetWifiRemoteStationManager (m_manager);
>   m_edca->CompleteConfig ();
320,325c297,304
<   m_mac->SetAttribute ("BE_MaxAmsduSize", UintegerValue (4095));
<   m_mac->SetAttribute ("BE_MaxAmpduSize", UintegerValue (65535));
<   Ptr<HtCapabilities> htCapabilities = Create<HtCapabilities> ();
<   htCapabilities->SetMaxAmsduLength (7935);
<   htCapabilities->SetMaxAmpduLength (65535);
<   m_manager->AddStationHtCapabilities (Mac48Address ("00:00:00:00:00:02"), htCapabilities);
---
>   m_msduAggregator = CreateObject<MsduStandardAggregator> ();
>   m_mpduAggregator = CreateObject<MpduStandardAggregator> ();
>   
>   m_msduAggregator->SetMaxAmsduSize (4095);
>   m_mpduAggregator->SetMaxAmpduSize (65535);
> 
>   m_edca->SetMsduAggregator (m_msduAggregator);
>   m_edca->SetMpduAggregator (m_mpduAggregator);
332,334c311,313
<   WifiMacHeader hdr;
<   hdr.SetAddr1 (Mac48Address ("00:00:00:00:00:02"));
<   hdr.SetAddr2 (Mac48Address ("00:00:00:00:00:01"));
---
>   WifiMacHeader hdr, peekedHdr;
>   hdr.SetAddr1 (Mac48Address ("00:00:00:00:00:01"));
>   hdr.SetAddr2 (Mac48Address ("00:00:00:00:00:02"));
336a316
>   Time tstamp;
341c321
<    * Test MSDU aggregation of two packets using MsduAggregator::GetNextAmsdu.
---
>    * Test MSDU aggregation of two packets using MacLow::PerformMsduAggregation.
347,348c327,336
<   m_mac->GetBEQueue ()->GetWifiMacQueue ()->Enqueue (Create<WifiMacQueueItem> (pkt, hdr));
<   m_mac->GetBEQueue ()->GetWifiMacQueue ()->Enqueue (Create<WifiMacQueueItem> (pkt, hdr));
---
>   m_edca->GetEdcaQueue ()->Enqueue (pkt, hdr);
>   m_edca->GetEdcaQueue ()->Enqueue (pkt, hdr);
> 
>   Ptr<const Packet> peekedPacket = m_edca->GetEdcaQueue ()->PeekByTidAndAddress (&peekedHdr, 0,
>                                                                                  WifiMacHeader::ADDR1,
>                                                                                  hdr.GetAddr1 (),
>                                                                                  &tstamp);
>   m_low->m_currentPacket = peekedPacket->Copy ();
>   m_low->m_currentHdr = peekedHdr;
>   m_low->m_currentTxVector = m_low->GetDataTxVector (m_low->m_currentPacket, &m_low->m_currentHdr);
350c338
<   WifiTxVector txVector = m_mac->GetBEQueue ()->GetLow ()->GetDataTxVector (Create<const WifiMacQueueItem> (pkt, hdr));
---
>   Ptr<Packet> packet = m_low->PerformMsduAggregation (peekedPacket, &peekedHdr, &tstamp, currentAggregatedPacket, 0);
352,355c340
<   Ptr<WifiMacQueueItem> item;
<   item = m_mac->GetBEQueue ()->GetLow ()->GetMsduAggregator ()->GetNextAmsdu (hdr.GetAddr1 (), 0, txVector,
<                                                                               currentAggregatedPacket->GetSize ());
<   bool result = (item != 0);
---
>   bool result = (packet != 0);
357,358c342,343
<   NS_TEST_EXPECT_MSG_EQ (item->GetPacket ()->GetSize (), 3030, "wrong packet size");
<   NS_TEST_EXPECT_MSG_EQ (m_mac->GetBEQueue ()->GetWifiMacQueue ()->GetNPackets (), 0, "aggregated packets not removed from the queue");
---
>   NS_TEST_EXPECT_MSG_EQ (packet->GetSize (), 3030, "wrong packet size");
>   NS_TEST_EXPECT_MSG_EQ (m_edca->GetEdcaQueue ()->GetSize (), 0, "aggregated packets not removed from the queue");
365,366c350
<    * This test is needed to ensure that no packets are removed from the queue in
<    * MsduAggregator::GetNextAmsdu, since aggregation will no occur in MacLow::AggregateToAmpdu.
---
>    * This test is needed to ensure that no packets are removed from the queue in MacLow::PerformMsduAggregation, since aggregation will no occur in MacLow::AggregateToAmpdu.
368c352,356
<   m_mac->SetAttribute ("BE_MaxAmpduSize", UintegerValue (65535));
---
>   m_factory = ObjectFactory ();
>   m_factory.SetTypeId ("ns3::MpduStandardAggregator");
>   m_factory.Set ("MaxAmpduSize", UintegerValue (0));
>   m_mpduAggregator = m_factory.Create<MpduAggregator> ();
>   m_edca->SetMpduAggregator (m_mpduAggregator);
370c358,359
<   m_mac->GetBEQueue ()->GetWifiMacQueue ()->Enqueue (Create<WifiMacQueueItem> (pkt, hdr));
---
>   m_edca->GetEdcaQueue ()->Enqueue (pkt, hdr);
>   packet = m_low->PerformMsduAggregation (peekedPacket, &peekedHdr, &tstamp, currentAggregatedPacket, 0);
372,374c361
<   item = m_mac->GetBEQueue ()->GetLow ()->GetMsduAggregator ()->GetNextAmsdu (hdr.GetAddr1 (), 0, txVector,
<                                                                               currentAggregatedPacket->GetSize ());
<   result = (item != 0);
---
>   result = (packet != 0);
380c367
<    * Aggregation does not occur when there is no more packets in the queue.
---
>    * Aggregation does not occur zhen there is no more packets in the queue.
384,387c371
<   m_mac->SetAttribute ("BE_MaxAmpduSize", UintegerValue (4095));
< 
<   m_mac->GetBEQueue ()->GetWifiMacQueue ()->Remove (pkt);
<   m_mac->GetBEQueue ()->GetWifiMacQueue ()->Remove (pkt);
---
>   m_mpduAggregator->SetMaxAmpduSize (4095);
389,390c373,375
<   item = m_mac->GetBEQueue ()->GetLow ()->GetMsduAggregator ()->GetNextAmsdu (hdr.GetAddr1 (), 0, txVector,
<                                                                               currentAggregatedPacket->GetSize ());
---
>   m_edca->GetEdcaQueue ()->Remove (pkt);
>   m_edca->GetEdcaQueue ()->Remove (pkt);
>   packet = m_low->PerformMsduAggregation (peekedPacket, &peekedHdr, &tstamp, currentAggregatedPacket, 0);
392c377
<   result = (item != 0);
---
>   result = (packet != 0);
394,456d378
< 
<   //-----------------------------------------------------------------------------------------------------
< 
<   /*
<    * Aggregation of MPDUs is stopped to prevent that the PPDU duration exceeds the TXOP limit.
<    * In this test, the VI AC is used, which has a default TXOP limit of 3008 microseconds.
<    */
< 
<   // Establish agreement.
<   uint8_t tid = 5;
<   MgtAddBaRequestHeader reqHdr;
<   reqHdr.SetImmediateBlockAck ();
<   reqHdr.SetTid (tid);
<   reqHdr.SetBufferSize (64);
<   reqHdr.SetTimeout (0);
<   reqHdr.SetStartingSequence (0);
<   m_mac->GetVIQueue ()->m_baManager->CreateAgreement (&reqHdr, hdr.GetAddr1 ());
<   m_mac->GetVIQueue ()->m_baManager->NotifyAgreementEstablished (hdr.GetAddr1 (), tid, 0);
< 
<   m_mac->SetAttribute ("VI_MaxAmsduSize", UintegerValue (3050));  // max 2 MSDUs per A-MSDU
<   m_mac->SetAttribute ("VI_MaxAmpduSize", UintegerValue (65535));
<   m_manager->SetAttribute ("DataMode", StringValue ("HtMcs2"));  // 19.5Mbps
< 
<   pkt = Create<Packet> (1400);
<   hdr.SetQosTid (tid);
< 
<   // Add 10 MSDUs to the EDCA queue
<   for (uint8_t i = 0; i < 10; i++)
<     {
<       m_mac->GetVIQueue ()->GetWifiMacQueue ()->Enqueue (Create<WifiMacQueueItem> (pkt, hdr));
<     }
< 
<   txVector = m_mac->GetVIQueue ()->GetLow ()->GetDataTxVector (Create<const WifiMacQueueItem> (pkt, hdr));
<   Time txopLimit = m_mac->GetVIQueue ()->GetTxopLimit ();   // 3.008 ms
< 
<   // Compute the first MPDU to be aggregated in an A-MPDU. It must contain an A-MSDU
<   // aggregating two MSDUs
<   Ptr<WifiMacQueueItem> mpdu = m_mac->GetVIQueue ()->GetLow ()->GetMsduAggregator ()->GetNextAmsdu (hdr.GetAddr1 (), tid,
<                                                                                                     txVector, 0, txopLimit);
<   NS_TEST_EXPECT_MSG_EQ (m_mac->GetVIQueue ()->GetWifiMacQueue ()->GetNPackets (), 8, "There must be 8 MSDUs left in EDCA queue");
< 
<   auto mpduList = m_mac->GetVIQueue ()->GetLow ()->GetMpduAggregator ()->GetNextAmpdu (mpdu, txVector, txopLimit);
< 
<   // The maximum number of bytes that can be transmitted in a TXOP is (approximately, as we
<   // do not consider that the preamble is transmitted at a different rate):
<   // 19.5 Mbps * 3.008 ms = 7332 bytes
<   // Given that the max A-MSDU size is set to 3050, an A-MSDU will contain two MSDUs and have
<   // a size of 2 * 1400 (MSDU size) + 2 * 14 (A-MSDU subframe header size) + 2 (one padding field) = 2830 bytes
<   // Hence, we expect that the A-MPDU will consist of:
<   // - 2 MPDUs containing each an A-MSDU. The size of each MPDU is 2830 (A-MSDU) + 30 (header+trailer) = 2860
<   // - 1 MPDU containing a single MSDU. The size of such MPDU is 1400 (MSDU) + 30 (header+trailer) = 1430
<   // The size of the A-MPDU is 4 + 2860 + 4 + 2860 + 4 + 1430 = 7162
<   NS_TEST_EXPECT_MSG_EQ (mpduList.empty (), false, "aggregation failed");
<   NS_TEST_EXPECT_MSG_EQ (mpduList.size (), 3, "Unexpected number of MPDUs in the A-MPDU");
<   NS_TEST_EXPECT_MSG_EQ (mpduList.at (0)->GetSize (), 2860, "Unexpected size of the first MPDU");
<   NS_TEST_EXPECT_MSG_EQ (mpduList.at (1)->GetSize (), 2860, "Unexpected size of the second MPDU");
<   NS_TEST_EXPECT_MSG_EQ (mpduList.at (2)->GetSize (), 1430, "Unexpected size of the first MPDU");
<   NS_TEST_EXPECT_MSG_EQ (m_mac->GetVIQueue ()->GetWifiMacQueue ()->GetNPackets (), 5,
<                          "Unexpected number of MSDUs left in the EDCA queue");
< 
<   Ptr<WifiPsdu> psdu = Create<WifiPsdu> (mpduList);
<   NS_TEST_EXPECT_MSG_EQ (psdu->GetSize (), 7162, "Unexpected size of the A-MPDU");
< 
458,461d379
< 
<   m_device->Dispose ();
<   m_device = 0;
<   htConfiguration = 0;
464,816d381
< /**
<  * \ingroup wifi-test
<  * \ingroup tests
<  *
<  * \brief 802.11ax aggregation test which permits 64 or 256 MPDUs in A-MPDU according to the negociated buffer size.
<  */
< class HeAggregationTest : public TestCase
< {
< public:
<   HeAggregationTest ();
< 
< private:
<   void DoRun (void);
<   /**
<    * Run test for a given buffer size
<    *
<    * \param bufferSize the buffer size
<    */
<   void DoRunSubTest (uint16_t bufferSize);
<   Ptr<WifiNetDevice> m_device; ///<WifiNetDevice
<   Ptr<StaWifiMac> m_mac; ///< Mac
<   Ptr<YansWifiPhy> m_phy; ///< Phy
<   Ptr<WifiRemoteStationManager> m_manager; ///< remote station manager
<   ObjectFactory m_factory; ///< factory
< };
< 
< HeAggregationTest::HeAggregationTest ()
<   : TestCase ("Check the correctness of 802.11ax aggregation operations")
< {
< }
< 
< void
< HeAggregationTest::DoRunSubTest (uint16_t bufferSize)
< {
<   /*
<    * Create device and attach configurations.
<    */
<   m_device = CreateObject<WifiNetDevice> ();
<   Ptr<HtConfiguration> htConfiguration = CreateObject<HtConfiguration> ();
<   m_device->SetHtConfiguration (htConfiguration);
<   Ptr<VhtConfiguration> vhtConfiguration = CreateObject<VhtConfiguration> ();
<   m_device->SetVhtConfiguration (vhtConfiguration);
<   Ptr<HeConfiguration> heConfiguration = CreateObject<HeConfiguration> ();
<   m_device->SetHeConfiguration (heConfiguration);
< 
<   /*
<    * Create and configure phy layer.
<    */
<   m_phy = CreateObject<YansWifiPhy> ();
<   m_phy->SetDevice (m_device);
<   m_phy->ConfigureStandard (WIFI_PHY_STANDARD_80211ax_5GHZ);
<   m_device->SetPhy (m_phy);
< 
<   /*
<    * Create and configure manager.
<    */
<   m_factory = ObjectFactory ();
<   m_factory.SetTypeId ("ns3::ConstantRateWifiManager");
<   m_factory.Set ("DataMode", StringValue ("HeMcs11"));
<   m_manager = m_factory.Create<WifiRemoteStationManager> ();
<   m_manager->SetupPhy (m_phy);
<   m_device->SetRemoteStationManager (m_manager);
< 
<   /*
<    * Create and configure mac layer.
<    */
<   m_mac = CreateObject<StaWifiMac> ();
<   m_mac->SetDevice (m_device);
<   m_mac->SetWifiPhy (m_phy);
<   m_mac->SetWifiRemoteStationManager (m_manager);
<   m_mac->SetAddress (Mac48Address ("00:00:00:00:00:01"));
<   m_mac->ConfigureStandard (WIFI_PHY_STANDARD_80211ax_5GHZ);
<   m_device->SetMac (m_mac);
< 
<   /*
<    * Configure aggregation.
<    */
<   Ptr<HeCapabilities> heCapabilities = Create<HeCapabilities> ();
<   m_manager->AddStationHeCapabilities (Mac48Address ("00:00:00:00:00:02"), heCapabilities);
< 
<   /*
<    * Create a dummy packet of 100 bytes and fill mac header fields.
<    */
<   Ptr<const Packet> pkt = Create<Packet> (100);
<   Ptr<Packet> currentAggregatedPacket = Create<Packet> ();
<   WifiMacHeader hdr;
<   hdr.SetAddr1 (Mac48Address ("00:00:00:00:00:02"));
<   hdr.SetAddr2 (Mac48Address ("00:00:00:00:00:01"));
<   hdr.SetType (WIFI_MAC_QOSDATA);
<   hdr.SetQosTid (0);
<   uint16_t sequence = m_mac->m_txMiddle->GetNextSequenceNumberFor (&hdr);
<   hdr.SetSequenceNumber (sequence);
<   hdr.SetFragmentNumber (0);
<   hdr.SetNoMoreFragments ();
<   hdr.SetNoRetry ();
< 
<   /*
<    * Establish agreement.
<    */
<   MgtAddBaRequestHeader reqHdr;
<   reqHdr.SetImmediateBlockAck ();
<   reqHdr.SetTid (0);
<   reqHdr.SetBufferSize (bufferSize);
<   reqHdr.SetTimeout (0);
<   reqHdr.SetStartingSequence (0);
<   m_mac->GetBEQueue ()->m_baManager->CreateAgreement (&reqHdr, hdr.GetAddr1 ());
<   m_mac->GetBEQueue ()->m_baManager->NotifyAgreementEstablished (hdr.GetAddr1 (), 0, 0);
< 
<   /*
<    * Test behavior when 300 packets are ready for transmission but negociated buffer size is 64
<    */
<   for (uint16_t i = 0; i < 300; i++)
<     {
<       Ptr<const Packet> pkt = Create<Packet> (100);
<       WifiMacHeader hdr;
< 
<       hdr.SetAddr1 (Mac48Address ("00:00:00:00:00:02"));
<       hdr.SetAddr2 (Mac48Address ("00:00:00:00:00:01"));
<       hdr.SetType (WIFI_MAC_QOSDATA);
<       hdr.SetQosTid (0);
< 
<       m_mac->GetBEQueue ()->GetWifiMacQueue ()->Enqueue (Create<WifiMacQueueItem> (pkt, hdr));
<   }
< 
<   WifiTxVector txVector = m_mac->GetBEQueue ()->GetLow ()->GetDataTxVector (Create<const WifiMacQueueItem> (pkt, hdr));
< 
<   auto mpduList = m_mac->GetBEQueue ()->GetLow ()->GetMpduAggregator ()-> GetNextAmpdu (Create<WifiMacQueueItem> (pkt, hdr),
<                                                                                         txVector);
<   NS_TEST_EXPECT_MSG_EQ (mpduList.empty (), false, "MPDU aggregation failed");
<   NS_TEST_EXPECT_MSG_EQ (mpduList.size (), bufferSize, "A-MPDU should countain " << bufferSize << " MPDUs");
<   uint16_t expectedRemainingPacketsInQueue = 300 - bufferSize + 1;
<   NS_TEST_EXPECT_MSG_EQ (m_mac->GetBEQueue ()->GetWifiMacQueue ()->GetNPackets (), expectedRemainingPacketsInQueue, "queue should contain 300 - "<< bufferSize - 1 << " = "<< expectedRemainingPacketsInQueue << " packets");
< 
<   Simulator::Destroy ();
< 
<   m_manager->Dispose ();
<   m_manager = 0;
< 
<   m_device->Dispose ();
<   m_device = 0;
< 
<   htConfiguration = 0;
<   vhtConfiguration = 0;
<   heConfiguration = 0;
< }
< 
< void
< HeAggregationTest::DoRun ()
< {
<   DoRunSubTest (64);
<   DoRunSubTest (256);
< }
< 
< /**
<  * \ingroup wifi-test
<  * \ingroup tests
<  *
<  * \brief Test for A-MSDU and A-MPDU aggregation
<  *
<  * This test aims to check that the packets passed to the MAC layer (on the sender
<  * side) are forwarded up to the upper layer (on the receiver side) when A-MSDU and
<  * A-MPDU aggregation are used. This test checks that no packet copies are performed,
<  * hence packets can be tracked by means of a pointer.
<  *
<  * In this test, an HT STA sends 8 packets (each of 1000 bytes) to an HT AP.
<  * The block ack threshold is set to 2, hence the first packet is sent as an MPDU
<  * containing a single MSDU because the establishment of a Block Ack agreement is
<  * not triggered yet. The maximum A-MSDU size is set to 4500 bytes and the
<  * maximum A-MPDU size is set to 7500 bytes, hence the remaining packets are sent
<  * in an A-MPDU containing two MPDUs, the first one including 4 MSDUs and the second
<  * one including 3 MPDUs.
<  */
< class PreservePacketsInAmpdus : public TestCase
< {
< public:
<   PreservePacketsInAmpdus ();
<   virtual ~PreservePacketsInAmpdus ();
< 
<   virtual void DoRun (void);
< 
< 
< private:
<   std::list<Ptr<const Packet>> m_packetList; ///< List of packets passed to the MAC
<   std::vector<std::size_t> m_nMpdus;         ///< Number of MPDUs in PSDUs passed to the PHY
<   std::vector<std::size_t> m_nMsdus;         ///< Number of MSDUs in MPDUs passed to the PHY
< 
<   /**
<    * Callback invoked when an MSDU is passed to the MAC
<    * \param packet the MSDU to transmit
<    */
<   void NotifyMacTransmit (Ptr<const Packet> packet);
<   /**
<    * Callback invoked when the sender MAC passes a PSDU(s) to the PHY
<    * \param psdu the PSDU
<    * \param txVector the TX vector
<    * \param txPowerW the transmit power in Watts
<    */
<   void NotifyPsduForwardedDown (Ptr<const WifiPsdu> psdu, WifiTxVector txVector, double txPowerW);
<   /**
<    * Callback invoked when the receiver MAC forwards a packet up to the upper layer
<    * \param p the packet
<    */
<   void NotifyMacForwardUp (Ptr<const Packet> p);
< };
< 
< PreservePacketsInAmpdus::PreservePacketsInAmpdus ()
<   : TestCase ("Test case to check that the Wifi Mac forwards up the same packets received at sender side.")
< {
< }
< 
< PreservePacketsInAmpdus::~PreservePacketsInAmpdus ()
< {
< }
< 
< void
< PreservePacketsInAmpdus::NotifyMacTransmit (Ptr<const Packet> packet)
< {
<   m_packetList.push_back (packet);
< }
< 
< void
< PreservePacketsInAmpdus::NotifyPsduForwardedDown (Ptr<const WifiPsdu> psdu, WifiTxVector txVector, double txPowerW)
< {
<   if (!psdu->GetHeader (0).IsQosData ())
<     {
<       return;
<     }
< 
<   m_nMpdus.push_back (psdu->GetNMpdus ());
< 
<   for (auto& mpdu : *PeekPointer (psdu))
<     {
<       std::size_t dist = std::distance (mpdu->begin (), mpdu->end ());
<       // the list of aggregated MSDUs is empty if the MPDU includes a non-aggregated MSDU
<       m_nMsdus.push_back (dist > 0 ? dist : 1);
<     }
< }
< 
< void
< PreservePacketsInAmpdus::NotifyMacForwardUp (Ptr<const Packet> p)
< {
<   auto it = std::find (m_packetList.begin (), m_packetList.end (), p);
<   NS_TEST_EXPECT_MSG_EQ ((it != m_packetList.end ()), true, "Packet being forwarded up not found");
<   m_packetList.erase (it);
< }
< 
< void
< PreservePacketsInAmpdus::DoRun (void)
< {
<   NodeContainer wifiStaNode;
<   wifiStaNode.Create (1);
< 
<   NodeContainer wifiApNode;
<   wifiApNode.Create (1);
< 
<   YansWifiChannelHelper channel = YansWifiChannelHelper::Default ();
<   YansWifiPhyHelper phy = YansWifiPhyHelper::Default ();
<   phy.SetChannel (channel.Create ());
< 
<   WifiHelper wifi;
<   wifi.SetStandard (WIFI_PHY_STANDARD_80211n_5GHZ);
<   wifi.SetRemoteStationManager ("ns3::IdealWifiManager");
< 
<   WifiMacHelper mac;
<   Ssid ssid = Ssid ("ns-3-ssid");
<   mac.SetType ("ns3::StaWifiMac",
<                "BE_MaxAmsduSize", UintegerValue (4500),
<                "BE_MaxAmpduSize", UintegerValue (7500),
<                "Ssid", SsidValue (ssid),
<                /* setting blockack threshold for sta's BE queue */
<                "BE_BlockAckThreshold", UintegerValue (2),
<                "ActiveProbing", BooleanValue (false));
< 
<   NetDeviceContainer staDevices;
<   staDevices = wifi.Install (phy, mac, wifiStaNode);
< 
<   mac.SetType ("ns3::ApWifiMac",
<                "Ssid", SsidValue (ssid),
<                "BeaconGeneration", BooleanValue (true));
< 
<   NetDeviceContainer apDevices;
<   apDevices = wifi.Install (phy, mac, wifiApNode);
< 
<   MobilityHelper mobility;
<   Ptr<ListPositionAllocator> positionAlloc = CreateObject<ListPositionAllocator> ();
< 
<   positionAlloc->Add (Vector (0.0, 0.0, 0.0));
<   positionAlloc->Add (Vector (1.0, 0.0, 0.0));
<   mobility.SetPositionAllocator (positionAlloc);
< 
<   mobility.SetMobilityModel ("ns3::ConstantPositionMobilityModel");
<   mobility.Install (wifiApNode);
<   mobility.Install (wifiStaNode);
< 
<   Ptr<WifiNetDevice> ap_device = DynamicCast<WifiNetDevice> (apDevices.Get (0));
<   Ptr<WifiNetDevice> sta_device = DynamicCast<WifiNetDevice> (staDevices.Get (0));
< 
<   PacketSocketAddress socket;
<   socket.SetSingleDevice (sta_device->GetIfIndex ());
<   socket.SetPhysicalAddress (ap_device->GetAddress ());
<   socket.SetProtocol (1);
< 
<   // install packet sockets on nodes.
<   PacketSocketHelper packetSocket;
<   packetSocket.Install (wifiStaNode);
<   packetSocket.Install (wifiApNode);
< 
<   Ptr<PacketSocketClient> client = CreateObject<PacketSocketClient> ();
<   client->SetAttribute ("PacketSize", UintegerValue (1000));
<   client->SetAttribute ("MaxPackets", UintegerValue (8));
<   client->SetAttribute ("Interval", TimeValue (Seconds (1)));
<   client->SetRemote (socket);
<   wifiStaNode.Get (0)->AddApplication (client);
<   client->SetStartTime (Seconds (1));
<   client->SetStopTime (Seconds (3.0));
<   Simulator::Schedule (Seconds (1.5), &PacketSocketClient::SetAttribute, client,
<                        "Interval", TimeValue (MicroSeconds (0)));
< 
<   Ptr<PacketSocketServer> server = CreateObject<PacketSocketServer> ();
<   server->SetLocal (socket);
<   wifiApNode.Get (0)->AddApplication (server);
<   server->SetStartTime (Seconds (0.0));
<   server->SetStopTime (Seconds (4.0));
< 
<   PointerValue ptr;
<   sta_device->GetMac ()->GetAttribute ("BE_Txop", ptr);
<   Ptr<QosTxop> qosTxop = ptr.Get<QosTxop> ();
< 
<   sta_device->GetMac ()->TraceConnectWithoutContext ("MacTx",
<     MakeCallback (&PreservePacketsInAmpdus::NotifyMacTransmit, this));
<   qosTxop->GetLow ()->GetPhy ()->TraceConnectWithoutContext ("PhyTxPsduBegin",
<     MakeCallback (&PreservePacketsInAmpdus::NotifyPsduForwardedDown, this));
<   ap_device->GetMac ()->TraceConnectWithoutContext ("MacRx",
<     MakeCallback (&PreservePacketsInAmpdus::NotifyMacForwardUp, this));
< 
<   Simulator::Stop (Seconds (5));
<   Simulator::Run ();
< 
<   Simulator::Destroy ();
< 
<   // Two packets are transmitted. The first one is an MPDU containing a single MSDU.
<   // The second one is an A-MPDU containing two MPDUs: the first MPDU contains 4 MSDUs
<   // and the second MPDU contains 3 MSDUs
<   NS_TEST_EXPECT_MSG_EQ (m_nMpdus.size (), 2, "Unexpected number of transmitted packets");
<   NS_TEST_EXPECT_MSG_EQ (m_nMsdus.size (), 3, "Unexpected number of transmitted MPDUs");
<   NS_TEST_EXPECT_MSG_EQ (m_nMpdus[0], 1, "Unexpected number of MPDUs in the first A-MPDU");
<   NS_TEST_EXPECT_MSG_EQ (m_nMsdus[0], 1, "Unexpected number of MSDUs in the first MPDU");
<   NS_TEST_EXPECT_MSG_EQ (m_nMpdus[1], 2, "Unexpected number of MPDUs in the second A-MPDU");
<   NS_TEST_EXPECT_MSG_EQ (m_nMsdus[1], 4, "Unexpected number of MSDUs in the second MPDU");
<   NS_TEST_EXPECT_MSG_EQ (m_nMsdus[2], 3, "Unexpected number of MSDUs in the third MPDU");
<   // All the packets must have been forwarded up at the receiver
<   NS_TEST_EXPECT_MSG_EQ (m_packetList.empty (), true, "Some packets have not been forwarded up");
< }
818,823c383
< /**
<  * \ingroup wifi-test
<  * \ingroup tests
<  *
<  * \brief Wifi Aggregation Test Suite
<  */
---
> //-----------------------------------------------------------------------------
831c391
<   : TestSuite ("wifi-aggregation", UNIT)
---
>   : TestSuite ("aggregation-wifi", UNIT)
835,836d394
<   AddTestCase (new HeAggregationTest, TestCase::QUICK);
<   AddTestCase (new PreservePacketsInAmpdus, TestCase::QUICK);
839c397
< static WifiAggregationTestSuite g_wifiAggregationTestSuite; ///< the test suite
---
> static WifiAggregationTestSuite g_wifiAggregationTestSuite;
diff ../../NS3-WiGig/src/wifi/test/wifi-error-rate-models-test.cc ../../ns-3-dev/src/wifi/test/wifi-error-rate-models-test.cc
20a21
> #include <cmath>
22d22
< #include "ns3/nist-error-rate-model.h"
24,25c24,25
< #include "ns3/wifi-phy.h"
< #include "ns3/wifi-utils.h"
---
> #include "ns3/yans-error-rate-model.h"
> #include "ns3/nist-error-rate-model.h"
41,46d40
< /**
<  * \ingroup wifi-test
<  * \ingroup tests
<  *
<  * \brief Wifi Error Rate Models Test Case Dsss
<  */
71c65
<   uint64_t size = (1024 + 40 + 14) * 8;
---
>   uint32_t size = (1024 + 40 + 14) * 8;
151,156d144
< /**
<  * \ingroup wifi-test
<  * \ingroup tests
<  *
<  * \brief Wifi Error Rate Models Test Case Nist
<  */
294,458d281
< class TestInterferenceHelper : public InterferenceHelper
< {
< public:
<   using InterferenceHelper::InterferenceHelper;
<   using InterferenceHelper::CalculateChunkSuccessRate;
<   using InterferenceHelper::CalculateSnr;
< };
< 
< /**
<  * \ingroup wifi-test
<  * \ingroup tests
<  *
<  * \brief Wifi Error Rate Models Test Case MIMO
<  */
< class WifiErrorRateModelsTestCaseMimo : public TestCase
< {
< public:
<   WifiErrorRateModelsTestCaseMimo ();
<   virtual ~WifiErrorRateModelsTestCaseMimo ();
< 
< private:
<   virtual void DoRun (void);
< };
< 
< WifiErrorRateModelsTestCaseMimo::WifiErrorRateModelsTestCaseMimo ()
<   : TestCase ("WifiErrorRateModel test case MIMO")
< {
< }
< 
< WifiErrorRateModelsTestCaseMimo::~WifiErrorRateModelsTestCaseMimo ()
< {
< }
< 
< void
< WifiErrorRateModelsTestCaseMimo::DoRun (void)
< {
<   TestInterferenceHelper interference;
<   interference.SetNoiseFigure (0);
<   WifiMode mode = WifiPhy::GetHtMcs0 ();
<   WifiTxVector txVector;
< 
<   txVector.SetMode (mode);
<   txVector.SetTxPowerLevel (0);
<   txVector.SetChannelWidth (20);
<   txVector.SetNss (1);
<   txVector.SetNTx (1);
< 
<   interference.SetNumberOfReceiveAntennas (1);
<   Ptr<NistErrorRateModel> nist = CreateObject<NistErrorRateModel> ();
<   interference.SetErrorRateModel (nist);
< 
<   // SISO: initial SNR set to 4dB
<   double initialSnr = 4.0;
<   double snr = interference.CalculateSnr (0.001, 0.001 / DbToRatio (initialSnr), txVector);
<   NS_TEST_ASSERT_MSG_EQ_TOL (RatioToDb (snr), initialSnr, 0.1, "Attempt to set initial SNR to known value failed");
<   Time duration = MilliSeconds (2);
<   double chunkSuccess = interference.CalculateChunkSuccessRate (snr, duration, mode, txVector);
<   NS_TEST_ASSERT_MSG_EQ_TOL (chunkSuccess, 0.905685, 0.000001, "CSR not within tolerance for SISO");
<   double sisoChunkSuccess = chunkSuccess;
< 
<   // MIMO 2x1:2: expect no SNR gain in AWGN channel
<   txVector.SetNss (2);
<   txVector.SetNTx (2);
<   snr = interference.CalculateSnr (0.001, 0.001 / DbToRatio (initialSnr), txVector);
<   NS_TEST_ASSERT_MSG_EQ_TOL (RatioToDb (snr), initialSnr, 0.1, "SNR not within tolerance for 2x1:2 MIMO");
<   chunkSuccess = interference.CalculateChunkSuccessRate (snr, duration, mode, txVector);
<   NS_TEST_ASSERT_MSG_EQ_TOL (chunkSuccess, 0.905685, 0.000001, "CSR not within tolerance for SISO");
< 
<   // MIMO 1x2:1: expect that SNR is increased by a factor of 3 dB (10 log 2/1) compared to SISO thanks to RX diversity
<   txVector.SetNss (1);
<   txVector.SetNTx (1);
<   interference.SetNumberOfReceiveAntennas (2);
<   snr = interference.CalculateSnr (0.001, 0.001 / DbToRatio (initialSnr), txVector);
<   NS_TEST_ASSERT_MSG_EQ_TOL (RatioToDb (snr), initialSnr + 3, 0.1, "SNR not within tolerance for 1x2:1 MIMO");
<   chunkSuccess = interference.CalculateChunkSuccessRate (snr, duration, mode, txVector);
<   NS_TEST_ASSERT_MSG_GT (chunkSuccess, sisoChunkSuccess, "CSR not within tolerance for 1x2:1 MIMO");
< 
<   // MIMO 2x2:1: expect that SNR is increased by a factor of 3 dB (10 log 2/1) compared to SISO thanks to RX diversity
<   txVector.SetNss (1);
<   txVector.SetNTx (2);
<   interference.SetNumberOfReceiveAntennas (2);
<   snr = interference.CalculateSnr (0.001, 0.001 / DbToRatio (initialSnr), txVector);
<   NS_TEST_ASSERT_MSG_EQ_TOL (RatioToDb (snr), initialSnr + 3, 0.1, "SNR not equal within tolerance for 2x2:1 MIMO");
<   chunkSuccess = interference.CalculateChunkSuccessRate (snr, duration, mode, txVector);
<   NS_TEST_ASSERT_MSG_GT (chunkSuccess, sisoChunkSuccess, "CSR not within tolerance for 2x2:1 MIMO");
< 
<  // MIMO 2x2:2: expect no SNR gain in AWGN channel
<   txVector.SetNss (2);
<   txVector.SetNTx (2);
<   interference.SetNumberOfReceiveAntennas (2);
<   snr = interference.CalculateSnr (0.001, 0.001 / DbToRatio (initialSnr), txVector);
<   NS_TEST_ASSERT_MSG_EQ_TOL (RatioToDb (snr), initialSnr, 0.1, "SNR not equal within tolerance for 2x2:2 MIMO");
<   chunkSuccess = interference.CalculateChunkSuccessRate (snr, duration, mode, txVector);
<   NS_TEST_ASSERT_MSG_EQ_TOL (chunkSuccess, sisoChunkSuccess, 0.000001, "CSR not within tolerance for 2x2:2 MIMO");
< 
<   // MIMO 3x3:1: expect that SNR is increased by a factor of 4.8 dB (10 log 3/1) compared to SISO thanks to RX diversity
<   txVector.SetNss (1);
<   txVector.SetNTx (3);
<   interference.SetNumberOfReceiveAntennas (3);
<   snr = interference.CalculateSnr (0.001, 0.001 / DbToRatio (initialSnr), txVector);
<   NS_TEST_ASSERT_MSG_EQ_TOL (RatioToDb (snr), initialSnr + 4.8, 0.1, "SNR not within tolerance for 3x3:1 MIMO");
<   chunkSuccess = interference.CalculateChunkSuccessRate (snr, duration, mode, txVector);
<   NS_TEST_ASSERT_MSG_GT (chunkSuccess, sisoChunkSuccess, "CSR not within tolerance for 3x3:1 MIMO");
< 
<   // MIMO 3x3:2: expect that SNR is increased by a factor of 1.8 dB (10 log 3/2) compared to SISO thanks to RX diversity
<   txVector.SetNss (2);
<   txVector.SetNTx (3);
<   interference.SetNumberOfReceiveAntennas (3);
<   snr = interference.CalculateSnr (0.001, 0.001 / DbToRatio (initialSnr), txVector);
<   NS_TEST_ASSERT_MSG_EQ_TOL (RatioToDb (snr), initialSnr + 1.8, 0.1, "SNR not within tolerance for 3x3:2 MIMO");
<   chunkSuccess = interference.CalculateChunkSuccessRate (snr, duration, mode, txVector);
<   NS_TEST_ASSERT_MSG_GT (chunkSuccess, sisoChunkSuccess, "CSR not within tolerance for 3x3:2 MIMO");
< 
<   // MIMO 3x3:3: expect no SNR gain in AWGN channel
<   txVector.SetNss (3);
<   txVector.SetNTx (3);
<   interference.SetNumberOfReceiveAntennas (3);
<   snr = interference.CalculateSnr (0.001, 0.001 / DbToRatio (initialSnr), txVector);
<   NS_TEST_ASSERT_MSG_EQ_TOL (RatioToDb (snr), initialSnr, 0.1, "SNR not within tolerance for 3x3:3 MIMO");
<   chunkSuccess = interference.CalculateChunkSuccessRate (snr, duration, mode, txVector);
<   NS_TEST_ASSERT_MSG_EQ_TOL (chunkSuccess, sisoChunkSuccess, 0.000001, "CSR not equal within tolerance for 3x3:3 MIMO");
< 
<   // MIMO 4x4:1: expect that SNR is increased by a factor of 6 dB (10 log 4/1) compared to SISO thanks to RX diversity
<   txVector.SetNss (1);
<   txVector.SetNTx (4);
<   interference.SetNumberOfReceiveAntennas (4);
<   snr = interference.CalculateSnr (0.001, 0.001 / DbToRatio (initialSnr), txVector);
<   NS_TEST_ASSERT_MSG_EQ_TOL (RatioToDb (snr), initialSnr + 6, 0.1, "SNR not within tolerance for 4x4:1 MIMO");
<   chunkSuccess = interference.CalculateChunkSuccessRate (snr, duration, mode, txVector);
<   NS_TEST_ASSERT_MSG_GT (chunkSuccess, sisoChunkSuccess, "CSR not within tolerance for 4x4:1 MIMO");
< 
<   // MIMO 4x4:2: expect that SNR is increased by a factor of 3 dB (10 log 4/2) compared to SISO thanks to RX diversity
<   txVector.SetNss (2);
<   txVector.SetNTx (4);
<   interference.SetNumberOfReceiveAntennas (4);
<   snr = interference.CalculateSnr (0.001, 0.001 / DbToRatio (initialSnr), txVector);
<   NS_TEST_ASSERT_MSG_EQ_TOL (RatioToDb (snr), initialSnr + 3, 0.1, "SNR not within tolerance for 4x4:2 MIMO");
<   chunkSuccess = interference.CalculateChunkSuccessRate (snr, duration, mode, txVector);
<   NS_TEST_ASSERT_MSG_GT (chunkSuccess, sisoChunkSuccess, "CSR not within tolerance for 4x4:2 MIMO");
< 
<   // MIMO 4x4:3: expect that SNR is increased by a factor of 1.2 dB (10 log 4/3) compared to SISO thanks to RX diversity
<   txVector.SetNss (3);
<   txVector.SetNTx (4);
<   interference.SetNumberOfReceiveAntennas (4);
<   snr = interference.CalculateSnr (0.001, 0.001 / DbToRatio (initialSnr), txVector);
<   NS_TEST_ASSERT_MSG_EQ_TOL (RatioToDb (snr), initialSnr + 1.2, 0.1, "SNR not within tolerance for 4x4:3 MIMO");
<   chunkSuccess = interference.CalculateChunkSuccessRate (snr, duration, mode, txVector);
<   NS_TEST_ASSERT_MSG_GT (chunkSuccess, sisoChunkSuccess, "CSR not within tolerance for 4x4:1 MIMO");
< 
<   // MIMO 4x4:4: expect no SNR gain in AWGN channel
<   txVector.SetNss (4);
<   txVector.SetNTx (4);
<   interference.SetNumberOfReceiveAntennas (4);
<   snr = interference.CalculateSnr (0.001, 0.001 / DbToRatio (initialSnr), txVector);
<   NS_TEST_ASSERT_MSG_EQ_TOL (RatioToDb (snr), initialSnr, 0.1, "SNR not within tolerance for 4x4:4 MIMO");
<   chunkSuccess = interference.CalculateChunkSuccessRate (snr, duration, mode, txVector);
<   NS_TEST_ASSERT_MSG_EQ_TOL (chunkSuccess, sisoChunkSuccess, 0.000001, "CSR not within tolerance for 4x4:4 MIMO");
< }
< 
< /**
<  * \ingroup wifi-test
<  * \ingroup tests
<  *
<  * \brief Wifi Error Rate Models Test Suite
<  */
470d292
<   AddTestCase (new WifiErrorRateModelsTestCaseMimo, TestCase::QUICK);
473c295
< static WifiErrorRateModelsTestSuite wifiErrorRateModelsTestSuite; ///< the test suite
---
> static WifiErrorRateModelsTestSuite wifiErrorRateModelsTestSuite;
Only in ../../NS3-WiGig/src/wifi/test: wifi-phy-reception-test.cc
Only in ../../NS3-WiGig/src/wifi/test: wifi-phy-thresholds-test.cc
diff ../../NS3-WiGig/src/wifi/test/wifi-test.cc ../../ns-3-dev/src/wifi/test/wifi-test.cc
24d23
< #include "ns3/string.h"
29c28
< #include "ns3/ap-wifi-mac.h"
---
> #include "ns3/propagation-delay-model.h"
37,38c36,38
< #include "ns3/error-model.h"
< #include "ns3/socket.h"
---
> #include "ns3/boolean.h"
> #include "ns3/string.h"
> #include "ns3/packet-socket-address.h"
42,51d41
< #include "ns3/spectrum-wifi-helper.h"
< #include "ns3/multi-model-spectrum-channel.h"
< #include "ns3/wifi-spectrum-signal-parameters.h"
< #include "ns3/yans-wifi-phy.h"
< #include "ns3/mgt-headers.h"
< #include "ns3/ht-configuration.h"
< #include "ns3/wifi-ppdu.h"
< #include "ns3/wifi-psdu.h"
< #include "ns3/waypoint-mobility-model.h"
< #include "ns3/wifi-mac-trailer.h"
65,83c55,73
<       rmac->GetAttribute ("Txop", ptr);
<       Ptr<Txop> txop = ptr.Get<Txop> ();
<       currentStream += txop->AssignStreams (currentStream);
< 
<       rmac->GetAttribute ("VO_Txop", ptr);
<       Ptr<QosTxop> vo_txop = ptr.Get<QosTxop> ();
<       currentStream += vo_txop->AssignStreams (currentStream);
< 
<       rmac->GetAttribute ("VI_Txop", ptr);
<       Ptr<QosTxop> vi_txop = ptr.Get<QosTxop> ();
<       currentStream += vi_txop->AssignStreams (currentStream);
< 
<       rmac->GetAttribute ("BE_Txop", ptr);
<       Ptr<QosTxop> be_txop = ptr.Get<QosTxop> ();
<       currentStream += be_txop->AssignStreams (currentStream);
< 
<       rmac->GetAttribute ("BK_Txop", ptr);
<       Ptr<QosTxop> bk_txop = ptr.Get<QosTxop> ();
<       bk_txop->AssignStreams (currentStream);
---
>       rmac->GetAttribute ("DcaTxop", ptr);
>       Ptr<DcaTxop> dcaTxop = ptr.Get<DcaTxop> ();
>       currentStream += dcaTxop->AssignStreams (currentStream);
> 
>       rmac->GetAttribute ("VO_EdcaTxopN", ptr);
>       Ptr<EdcaTxopN> vo_edcaTxopN = ptr.Get<EdcaTxopN> ();
>       currentStream += vo_edcaTxopN->AssignStreams (currentStream);
> 
>       rmac->GetAttribute ("VI_EdcaTxopN", ptr);
>       Ptr<EdcaTxopN> vi_edcaTxopN = ptr.Get<EdcaTxopN> ();
>       currentStream += vi_edcaTxopN->AssignStreams (currentStream);
> 
>       rmac->GetAttribute ("BE_EdcaTxopN", ptr);
>       Ptr<EdcaTxopN> be_edcaTxopN = ptr.Get<EdcaTxopN> ();
>       currentStream += be_edcaTxopN->AssignStreams (currentStream);
> 
>       rmac->GetAttribute ("BK_EdcaTxopN", ptr);
>       Ptr<EdcaTxopN> bk_edcaTxopN = ptr.Get<EdcaTxopN> ();
>       currentStream += bk_edcaTxopN->AssignStreams (currentStream);
87,92c77
< /**
<  * \ingroup wifi-test
<  * \ingroup tests
<  *
<  * \brief Wifi Test
<  */
---
> 
102d86
<   /// Run one function
104,108d87
<   /**
<    * Create one function
<    * \param pos the position
<    * \param channel the wifi channel
<    */
110,113d88
<   /**
<    * Send one packet function
<    * \param dev the device
<    */
116,118c91,93
<   ObjectFactory m_manager; ///< manager
<   ObjectFactory m_mac; ///< MAC
<   ObjectFactory m_propDelay; ///< propagation delay
---
>   ObjectFactory m_manager;
>   ObjectFactory m_mac;
>   ObjectFactory m_propDelay;
140d114
<   mac->SetDevice (dev);
213,218c187
< /**
<  * \ingroup wifi-test
<  * \ingroup tests
<  *
<  * \brief Qos Utils Is Old Packet Test
<  */
---
> //-----------------------------------------------------------------------------
246a216
> //-----------------------------------------------------------------------------
259,264d228
<   /**
<    * Create one function
<    * \param pos the position
<    * \param channel the wifi channel
<    * \returns the node
<    */
266,269d229
<   /**
<    * Send one packet function
<    * \param dev the device
<    */
271,274d230
<   /**
<    * Switch channel function
<    * \param dev the device
<    */
277,279c233,235
<   ObjectFactory m_manager; ///< manager
<   ObjectFactory m_mac; ///< MAC
<   ObjectFactory m_propDelay; ///< propagation delay
---
>   ObjectFactory m_manager;
>   ObjectFactory m_mac;
>   ObjectFactory m_propDelay;
290c246
<   Ptr<Packet> p = Create<Packet> (1000);
---
>   Ptr<Packet> p = Create<Packet> (9999);
308d263
<   mac->SetDevice (dev);
381c336
<  *    stated in Sec. 9.3.4.2 of IEEE 802.11-2012, (basic access, which
---
>  *    stated in Sec. 9.3.4.2 of IEEE 802.11-2012, (basic access, which 
383,386c338,341
<  *    "If, under these conditions, the medium is determined by the CS
<  *    mechanism to be busy when a STA desires to initiate the initial frame
<  *    of a frame exchange sequence (described in Annex G), exclusive of the
<  *    CF period, the random backoff procedure described in 9.3.4.3
---
>  *    "If, under these conditions, the medium is determined by the CS 
>  *    mechanism to be busy when a STA desires to initiate the initial frame 
>  *    of a frame exchange sequence (described in Annex G), exclusive of the 
>  *    CF period, the random backoff procedure described in 9.3.4.3 
396,397c351,352
<  * The following test case should _not_ generate virtual collision for
<  * the second frame.  The seed and run numbers were pick such that the
---
>  * The following test case should _not_ generate virtual collision for 
>  * the second frame.  The seed and run numbers were pick such that the 
416,419c371,374
<  * which generated a 0 slot backoff for frame 2.  Then, frame 2
<  * experiences a virtual collision and re-selects the backoff again.
<  * As a result, the _actual_ backoff experience by frame 2 is less likely
<  * to be 0 since that would require two successions of 0 backoff (one that
---
>  * which generated a 0 slot backoff for frame 2.  Then, frame 2 
>  * experiences a virtual collision and re-selects the backoff again. 
>  * As a result, the _actual_ backoff experience by frame 2 is less likely 
>  * to be 0 since that would require two successions of 0 backoff (one that 
422c377
<  * See \bugid{555} for past behavior.
---
>  * See \bugid{555} for past behavior.  
434,437d388
<   /**
<    * Send one packet function
<    * \param dev the device
<    */
440,453c391,399
<   ObjectFactory m_manager; ///< manager
<   ObjectFactory m_mac; ///< MAC
<   ObjectFactory m_propDelay; ///< propagation delay
< 
<   Time m_firstTransmissionTime; ///< first transmission time
<   Time m_secondTransmissionTime; ///< second transmission time
<   unsigned int m_numSentPackets; ///< number of sent packets
< 
<   /**
<    * Notify Phy transmit begin
<    * \param p the packet
<    * \param txPowerW the tx power
<    */
<   void NotifyPhyTxBegin (Ptr<const Packet> p, double txPowerW);
---
>   ObjectFactory m_manager;
>   ObjectFactory m_mac;
>   ObjectFactory m_propDelay;
> 
>   Time m_firstTransmissionTime;
>   Time m_secondTransmissionTime;
>   unsigned int m_numSentPackets;
> 
>   void NotifyPhyTxBegin (Ptr<const Packet> p);
462c408
< DcfImmediateAccessBroadcastTestCase::NotifyPhyTxBegin (Ptr<const Packet> p, double txPowerW)
---
> DcfImmediateAccessBroadcastTestCase::NotifyPhyTxBegin (Ptr<const Packet> p)
465a412
>       NS_ASSERT_MSG (Simulator::Now () == Time (Seconds (1)), "Packet 0 not transmitted at 1 second");
503d449
<   txMac->SetDevice (txDev);
506c452
<   //The below stream assignment will result in the Txop object
---
>   //The below stream assignment will result in the DcaTxop object
508c454
<   //Txop::EndTxNoAck() calls to StartBackoffNow()
---
>   //DcaTxop::EndTxNoAck() calls to StartBackoffNow()
541,544d486
<   // First packet is transmitted a DIFS after the packet is queued. A DIFS
<   // is 2 slots (2 * 9 = 18 us) plus a SIFS (16 us), i.e., 34 us
<   Time expectedFirstTransmissionTime = Seconds (1.0) + MicroSeconds (34);
< 
550,551c492,493
<   Time expectedSecondTransmissionTime = expectedFirstTransmissionTime + MicroSeconds (expectedWait1);
<   NS_TEST_ASSERT_MSG_EQ (m_firstTransmissionTime, expectedFirstTransmissionTime, "The first transmission time not correct!");
---
>   Time expectedSecondTransmissionTime = MicroSeconds (expectedWait1) + MilliSeconds (1000);
>   NS_TEST_ASSERT_MSG_EQ (m_firstTransmissionTime, MilliSeconds (1000), "The first transmission time not correct!");
580c522
<   uint32_t m_received; ///< received
---
>   uint32_t m_received;
582,587d523
<   /**
<    * Receive function
<    * \param context the context
<    * \param p the packet
<    * \param adr the address
<    */
616a553,554
>   Config::SetDefault ("ns3::WifiRemoteStationManager::FragmentationThreshold", StringValue ("2304"));
> 
676c614
<   wifiStaNode.Get (0)->AddApplication (client);
---
>   wifiStaNode.Get(0)->AddApplication (client);
682c620
<   wifiApNode.Get (0)->AddApplication (server);
---
>   wifiApNode.Get(0)->AddApplication (server);
699,868c637
< //-----------------------------------------------------------------------------
< /**
<  * Make sure that fragmentation works with QoS stations.
<  *
<  * The scenario considers a TCP transmission between an 802.11n station and an 802.11n
<  * access point.
<  */
< 
< class QosFragmentationTestCase : public TestCase
< {
< public:
<   QosFragmentationTestCase ();
<   virtual ~QosFragmentationTestCase ();
< 
<   virtual void DoRun (void);
< 
< 
< private:
<   uint32_t m_received; ///< received packets
<   uint32_t m_fragments; ///< transmitted fragments
< 
<   /**
<    * Receive function
<    * \param context the context
<    * \param p the packet
<    * \param adr the address
<    */
<   void Receive (std::string context, Ptr<const Packet> p, const Address &adr);
< 
<   /**
<    * Callback invoked when PHY transmits a packet
<    * \param context the context
<    * \param p the packet
<    * \param power the tx power
<    */
<   void Transmit (std::string context, Ptr<const Packet> p, double power);
< };
< 
< QosFragmentationTestCase::QosFragmentationTestCase ()
<   : TestCase ("Test case for fragmentation with QoS stations"),
<     m_received (0),
<     m_fragments (0)
< {
< }
< 
< QosFragmentationTestCase::~QosFragmentationTestCase ()
< {
< }
< 
< void
< QosFragmentationTestCase::Receive (std::string context, Ptr<const Packet> p, const Address &adr)
< {
<   if (p->GetSize () == 1400)
<     {
<       m_received++;
<     }
< }
< 
< void
< QosFragmentationTestCase::Transmit (std::string context, Ptr<const Packet> p, double power)
< {
<   WifiMacHeader hdr;
<   p->PeekHeader (hdr);
<   if (hdr.IsQosData ())
<     {
<       NS_TEST_EXPECT_MSG_LT_OR_EQ (p->GetSize (), 400, "Unexpected fragment size");
<       m_fragments++;
<     }
< }
< 
< void
< QosFragmentationTestCase::DoRun (void)
< {
<   NodeContainer wifiStaNode;
<   wifiStaNode.Create (1);
< 
<   NodeContainer wifiApNode;
<   wifiApNode.Create (1);
< 
<   YansWifiChannelHelper channel = YansWifiChannelHelper::Default ();
<   YansWifiPhyHelper phy = YansWifiPhyHelper::Default ();
<   phy.SetChannel (channel.Create ());
< 
<   WifiHelper wifi;
<   wifi.SetStandard (WIFI_PHY_STANDARD_80211n_5GHZ);
<   wifi.SetRemoteStationManager ("ns3::ConstantRateWifiManager",
<                                 "DataMode", StringValue ("HtMcs7"));
< 
<   WifiMacHelper mac;
<   Ssid ssid = Ssid ("ns-3-ssid");
<   mac.SetType ("ns3::StaWifiMac",
<                "Ssid", SsidValue (ssid),
<                "ActiveProbing", BooleanValue (false));
< 
<   NetDeviceContainer staDevices;
<   staDevices = wifi.Install (phy, mac, wifiStaNode);
< 
<   mac.SetType ("ns3::ApWifiMac",
<                "Ssid", SsidValue (ssid),
<                "BeaconGeneration", BooleanValue (true));
< 
<   NetDeviceContainer apDevices;
<   apDevices = wifi.Install (phy, mac, wifiApNode);
< 
<   MobilityHelper mobility;
<   Ptr<ListPositionAllocator> positionAlloc = CreateObject<ListPositionAllocator> ();
< 
<   positionAlloc->Add (Vector (0.0, 0.0, 0.0));
<   positionAlloc->Add (Vector (1.0, 0.0, 0.0));
<   mobility.SetPositionAllocator (positionAlloc);
< 
<   mobility.SetMobilityModel ("ns3::ConstantPositionMobilityModel");
<   mobility.Install (wifiApNode);
<   mobility.Install (wifiStaNode);
< 
<   Ptr<WifiNetDevice> ap_device = DynamicCast<WifiNetDevice> (apDevices.Get (0));
<   Ptr<WifiNetDevice> sta_device = DynamicCast<WifiNetDevice> (staDevices.Get (0));
< 
<   // set the TXOP limit on BE AC
<   Ptr<RegularWifiMac> sta_mac = DynamicCast<RegularWifiMac> (sta_device->GetMac ());
<   NS_ASSERT (sta_mac);
<   PointerValue ptr;
<   sta_mac->GetAttribute ("BE_Txop", ptr);
<   ptr.Get<QosTxop> ()->SetTxopLimit (MicroSeconds (3008));
< 
<   PacketSocketAddress socket;
<   socket.SetSingleDevice (sta_device->GetIfIndex ());
<   socket.SetPhysicalAddress (ap_device->GetAddress ());
<   socket.SetProtocol (1);
< 
<   // give packet socket powers to nodes.
<   PacketSocketHelper packetSocket;
<   packetSocket.Install (wifiStaNode);
<   packetSocket.Install (wifiApNode);
< 
<   Ptr<PacketSocketClient> client = CreateObject<PacketSocketClient> ();
<   client->SetAttribute ("PacketSize", UintegerValue (1400));
<   client->SetAttribute ("MaxPackets", UintegerValue (1));
<   client->SetRemote (socket);
<   wifiStaNode.Get (0)->AddApplication (client);
<   client->SetStartTime (Seconds (1));
<   client->SetStopTime (Seconds (3.0));
< 
<   Ptr<PacketSocketServer> server = CreateObject<PacketSocketServer> ();
<   server->SetLocal (socket);
<   wifiApNode.Get (0)->AddApplication (server);
<   server->SetStartTime (Seconds (0.0));
<   server->SetStopTime (Seconds (4.0));
< 
<   Config::Connect ("/NodeList/*/ApplicationList/0/$ns3::PacketSocketServer/Rx", MakeCallback (&QosFragmentationTestCase::Receive, this));
< 
<   Config::Set ("/NodeList/0/DeviceList/0/RemoteStationManager/FragmentationThreshold", StringValue ("400"));
<   Config::Connect ("/NodeList/0/DeviceList/0/Phy/PhyTxBegin", MakeCallback (&QosFragmentationTestCase::Transmit, this));
< 
<   Simulator::Stop (Seconds (5));
<   Simulator::Run ();
< 
<   Simulator::Destroy ();
< 
<   NS_TEST_ASSERT_MSG_EQ (m_received, 1, "Unexpected number of received packets");
<   NS_TEST_ASSERT_MSG_EQ (m_fragments, 4, "Unexpected number of transmitted fragments");
< }
< 
< /**
<  * \ingroup wifi-test
<  * \ingroup tests
<  *
<  * \brief Set Channel Frequency Test
<  */
< class SetChannelFrequencyTest : public TestCase
---
> class SetChannelFrequencyTest: public TestCase
877,881c646
<   /**
<    * Get yans wifi phy function
<    * \param nc the device collection
<    * \returns the wifi phy
<    */
---
> 
923,1195c688,961
<     // case 0
<     // Default configuration, without WifiHelper::SetStandard or WifiHelper
<     phySta = CreateObject<YansWifiPhy> ();
<     // The default results in an invalid configuration of channel 0,
<     // width 20, and frequency 0 MHz
<     NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelNumber (), 0, "default configuration");
<     NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelWidth (), 20, "default configuration");
<     NS_TEST_ASSERT_MSG_EQ (phySta->GetFrequency (), 0, "default configuration");
<   }
<   {
<     // case 1
<     WifiHelper wifi;
<     // By default, WifiHelper will use WIFI_PHY_STANDARD_80211a
<     staDevice = wifi.Install (phy, macSta, wifiStaNode.Get (0));
<     phySta = GetYansWifiPhyPtr (staDevice);
<     // We expect channel 36, width 20, frequency 5180
<     NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelNumber (), 36, "default configuration");
<     NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelWidth (), 20, "default configuration");
<     NS_TEST_ASSERT_MSG_EQ (phySta->GetFrequency (), 5180, "default configuration");
<   }
<   {
<     // case 2
<     WifiHelper wifi;
<     wifi.SetStandard (WIFI_PHY_STANDARD_80211b);
<     staDevice = wifi.Install (phy, macSta, wifiStaNode.Get (0));
<     phySta = GetYansWifiPhyPtr (staDevice);
<     // We expect channel 1, width 22, frequency 2412
<     NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelNumber (), 1, "802.11b configuration");
<     NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelWidth (), 22, "802.11b configuration");
<     NS_TEST_ASSERT_MSG_EQ (phySta->GetFrequency (), 2412, "802.11b configuration");
<   }
<   {
<     // case 3
<     WifiHelper wifi;
<     wifi.SetStandard (WIFI_PHY_STANDARD_80211g);
<     staDevice = wifi.Install (phy, macSta, wifiStaNode.Get (0));
<     phySta = GetYansWifiPhyPtr (staDevice);
<     // We expect channel 1, width 20, frequency 2412
<     NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelNumber (), 1, "802.11g configuration");
<     NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelWidth (), 20, "802.11g configuration");
<     NS_TEST_ASSERT_MSG_EQ (phySta->GetFrequency (), 2412, "802.11g configuration");
<   }
<   {
<     // case 4
<     WifiHelper wifi;
<     wifi.SetRemoteStationManager ("ns3::IdealWifiManager");
<     wifi.SetStandard (WIFI_PHY_STANDARD_80211n_5GHZ);
<     staDevice = wifi.Install (phy, macSta, wifiStaNode.Get (0));
<     phySta = GetYansWifiPhyPtr (staDevice);
<     NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelNumber (), 36, "802.11n-5GHz configuration");
<     NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelWidth (), 20, "802.11n-5GHz configuration");
<     NS_TEST_ASSERT_MSG_EQ (phySta->GetFrequency (), 5180, "802.11n-5GHz configuration");
<   }
<   {
<     // case 5
<     WifiHelper wifi;
<     wifi.SetRemoteStationManager ("ns3::IdealWifiManager");
<     wifi.SetStandard (WIFI_PHY_STANDARD_80211n_2_4GHZ);
<     staDevice = wifi.Install (phy, macSta, wifiStaNode.Get (0));
<     phySta = GetYansWifiPhyPtr (staDevice);
<     NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelNumber (), 1, "802.11n-2.4GHz configuration");
<     NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelWidth (), 20, "802.11n-2.4GHz configuration");
<     NS_TEST_ASSERT_MSG_EQ (phySta->GetFrequency (), 2412, "802.11n-2.4GHz configuration");
<   }
<   {
<     // case 6
<     WifiHelper wifi;
<     wifi.SetRemoteStationManager ("ns3::IdealWifiManager");
<     wifi.SetStandard (WIFI_PHY_STANDARD_80211ac);
<     staDevice = wifi.Install (phy, macSta, wifiStaNode.Get (0));
<     phySta = GetYansWifiPhyPtr (staDevice);
<     NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelNumber (), 42, "802.11ac configuration");
<     NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelWidth (), 80, "802.11ac configuration");
<     NS_TEST_ASSERT_MSG_EQ (phySta->GetFrequency (), 5210, "802.11ac configuration");
<   }
<   {
<     // case 7
<     WifiHelper wifi;
<     wifi.SetRemoteStationManager ("ns3::IdealWifiManager");
<     wifi.SetStandard (WIFI_PHY_STANDARD_80211_10MHZ);
<     staDevice = wifi.Install (phy, macSta, wifiStaNode.Get (0));
<     phySta = GetYansWifiPhyPtr (staDevice);
<     NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelNumber (), 172, "802.11 10Mhz configuration");
<     NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelWidth (), 10, "802.11 10Mhz configuration");
<     NS_TEST_ASSERT_MSG_EQ (phySta->GetFrequency (), 5860, "802.11 10Mhz configuration");
<   }
<   {
<     // case 8
<     WifiHelper wifi;
<     wifi.SetRemoteStationManager ("ns3::IdealWifiManager");
<     wifi.SetStandard (WIFI_PHY_STANDARD_80211_5MHZ);
<     staDevice = wifi.Install (phy, macSta, wifiStaNode.Get (0));
<     phySta = GetYansWifiPhyPtr (staDevice);
<     NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelNumber (), 0, "802.11 5Mhz configuration");
<     NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelWidth (), 5, "802.11 5Mhz configuration");
<     NS_TEST_ASSERT_MSG_EQ (phySta->GetFrequency (), 5860, "802.11 5Mhz configuration");
<   }
<   {
<     // case 9
<     WifiHelper wifi;
<     wifi.SetRemoteStationManager ("ns3::IdealWifiManager");
<     wifi.SetStandard (WIFI_PHY_STANDARD_holland);
<     staDevice = wifi.Install (phy, macSta, wifiStaNode.Get (0));
<     phySta = GetYansWifiPhyPtr (staDevice);
<     // We expect channel 36, width 20, frequency 5180
<     NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelNumber (), 36, "802.11 5Mhz configuration");
<     NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelWidth (), 20, "802.11 5Mhz configuration");
<     NS_TEST_ASSERT_MSG_EQ (phySta->GetFrequency (), 5180, "802.11 5Mhz configuration");
<   }
<   {
<     // case 10
<     WifiHelper wifi;
<     wifi.SetRemoteStationManager ("ns3::IdealWifiManager");
<     wifi.SetStandard (WIFI_PHY_STANDARD_80211n_5GHZ);
<     phy.Set ("ChannelNumber", UintegerValue (44));
<     staDevice = wifi.Install (phy, macSta, wifiStaNode.Get (0));
<     phySta = GetYansWifiPhyPtr (staDevice);
<     NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelNumber (), 44, "802.11 5GHz configuration");
<     NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelWidth (), 20, "802.11 5GHz configuration");
<     NS_TEST_ASSERT_MSG_EQ (phySta->GetFrequency (), 5220, "802.11 5GHz configuration");
<   }
<   {
<     // case 11
<     WifiHelper wifi;
<     wifi.SetRemoteStationManager ("ns3::IdealWifiManager");
<     phy.Set ("ChannelNumber", UintegerValue (44));
<     staDevice = wifi.Install (phy, macSta, wifiStaNode.Get (0));
<     phySta = GetYansWifiPhyPtr (staDevice);
<     // Post-install reconfiguration to channel number 40
<     Config::Set ("/NodeList/*/DeviceList/*/$ns3::WifiNetDevice/Phy/$ns3::YansWifiPhy/ChannelNumber", UintegerValue (40));
<     NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelNumber (), 40, "802.11 5GHz configuration");
<     NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelWidth (), 20, "802.11 5GHz configuration");
<     NS_TEST_ASSERT_MSG_EQ (phySta->GetFrequency (), 5200, "802.11 5GHz configuration");
<   }
<   {
<     // case 12
<     WifiHelper wifi;
<     wifi.SetRemoteStationManager ("ns3::IdealWifiManager");
<     phy.Set ("ChannelNumber", UintegerValue (44));
<     staDevice = wifi.Install (phy, macSta, wifiStaNode.Get (0));
<     phySta = GetYansWifiPhyPtr (staDevice);
<     // Post-install reconfiguration to channel width 40 MHz
<     Config::Set ("/NodeList/*/DeviceList/*/$ns3::WifiNetDevice/Phy/$ns3::YansWifiPhy/ChannelWidth", UintegerValue (40));
<     // Although channel 44 is configured originally for 20 MHz, we
<     // allow it to be used for 40 MHz here
<     NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelNumber (), 44, "802.11 5GHz configuration");
<     NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelWidth (), 40, "802.11 5GHz configuration");
<     NS_TEST_ASSERT_MSG_EQ (phySta->GetFrequency (), 5220, "802.11 5GHz configuration");
<   }
<   {
<     // case 13
<     WifiHelper wifi;
<     wifi.SetRemoteStationManager ("ns3::IdealWifiManager");
<     wifi.SetStandard (WIFI_PHY_STANDARD_80211n_5GHZ);
<     staDevice = wifi.Install (phy, macSta, wifiStaNode.Get (0));
<     phySta = GetYansWifiPhyPtr (staDevice);
<     phySta->SetAttribute ("ChannelNumber", UintegerValue (44));
<     // Post-install reconfiguration to channel width 40 MHz
<     Config::Set ("/NodeList/*/DeviceList/*/$ns3::WifiNetDevice/Phy/$ns3::YansWifiPhy/ChannelWidth", UintegerValue (40));
<     // Although channel 44 is configured originally for 20 MHz, we
<     // allow it to be used for 40 MHz here
<     NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelNumber (), 44, "802.11 5GHz configuration");
<     NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelWidth (), 40, "802.11 5GHz configuration");
<     NS_TEST_ASSERT_MSG_EQ (phySta->GetFrequency (), 5220, "802.11 5GHz configuration");
<   }
<   {
<     // case 14
<     WifiHelper wifi;
<     wifi.SetRemoteStationManager ("ns3::IdealWifiManager");
<     // Test that setting Frequency to a non-standard value will zero the
<     // channel number
<     wifi.SetStandard (WIFI_PHY_STANDARD_80211n_5GHZ);
<     staDevice = wifi.Install (phy, macSta, wifiStaNode.Get (0));
<     phySta = GetYansWifiPhyPtr (staDevice);
<     phySta->SetAttribute ("Frequency", UintegerValue (5281));
<     // We expect channel number to be zero since frequency doesn't match
<     NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelNumber (), 0, "802.11 5GHz configuration");
<     NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelWidth (), 20, "802.11 5GHz configuration");
<     NS_TEST_ASSERT_MSG_EQ (phySta->GetFrequency (), 5281, "802.11 5GHz configuration");
<   }
<   {
<     // case 15:
<     WifiHelper wifi;
<     wifi.SetRemoteStationManager ("ns3::IdealWifiManager");
<     wifi.SetStandard (WIFI_PHY_STANDARD_80211n_5GHZ);
<     staDevice = wifi.Install (phy, macSta, wifiStaNode.Get (0));
<     phySta = GetYansWifiPhyPtr (staDevice);
<     // Test that setting Frequency to a standard value will set the
<     // channel number correctly
<     phySta->SetAttribute ("Frequency", UintegerValue (5500));
<     // We expect channel number to be 100 due to frequency 5500
<     NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelNumber (), 100, "802.11 5GHz configuration");
<     NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelWidth (), 20, "802.11 5GHz configuration");
<     NS_TEST_ASSERT_MSG_EQ (phySta->GetFrequency (), 5500, "802.11 5GHz configuration");
<   }
<   {
<     // case 16:
<     WifiHelper wifi;
<     wifi.SetRemoteStationManager ("ns3::IdealWifiManager");
<     wifi.SetStandard (WIFI_PHY_STANDARD_80211n_5GHZ);
<     staDevice = wifi.Install (phy, macSta, wifiStaNode.Get (0));
<     phySta = GetYansWifiPhyPtr (staDevice);
<     // This case will error exit due to invalid channel number unless
<     // we provide the DefineChannelNumber() below
<     phySta->DefineChannelNumber (99, WIFI_PHY_STANDARD_80211n_5GHZ, 5185, 40);
<     phySta->SetAttribute ("ChannelNumber", UintegerValue (99));
<   }
<   {
<     // case 17:
<     WifiHelper wifi;
<     wifi.SetRemoteStationManager ("ns3::IdealWifiManager");
<     // Test how channel number behaves when frequency is non-standard
<     wifi.SetStandard (WIFI_PHY_STANDARD_80211n_5GHZ);
<     staDevice = wifi.Install (phy, macSta, wifiStaNode.Get (0));
<     phySta = GetYansWifiPhyPtr (staDevice);
<     phySta->SetAttribute ("Frequency", UintegerValue (5181));
<     // We expect channel number to be 0 due to unknown center frequency 5181
<     NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelNumber (), 0, "802.11 5GHz configuration");
<     NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelWidth (), 20, "802.11 5GHz configuration");
<     NS_TEST_ASSERT_MSG_EQ (phySta->GetFrequency (), 5181, "802.11 5GHz configuration");
<     phySta->SetAttribute ("Frequency", UintegerValue (5180));
<     // We expect channel number to be 36 due to known center frequency 5180
<     NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelNumber (), 36, "802.11 5GHz configuration");
<     NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelWidth (), 20, "802.11 5GHz configuration");
<     NS_TEST_ASSERT_MSG_EQ (phySta->GetFrequency (), 5180, "802.11 5GHz configuration");
<     phySta->SetAttribute ("Frequency", UintegerValue (5179));
<     // We expect channel number to be 0 due to unknown center frequency 5179
<     NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelNumber (), 0, "802.11 5GHz configuration");
<     NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelWidth (), 20, "802.11 5GHz configuration");
<     NS_TEST_ASSERT_MSG_EQ (phySta->GetFrequency (), 5179, "802.11 5GHz configuration");
<     phySta->SetAttribute ("ChannelNumber", UintegerValue (36));
<     NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelNumber (), 36, "802.11 5GHz configuration");
<     NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelWidth (), 20, "802.11 5GHz configuration");
<     NS_TEST_ASSERT_MSG_EQ (phySta->GetFrequency (), 5180, "802.11 5GHz configuration");
<   }
<   {
<     // case 18:
<     WifiHelper wifi;
<     wifi.SetRemoteStationManager ("ns3::IdealWifiManager");
<     // Set both channel and frequency to consistent values
<     wifi.SetStandard (WIFI_PHY_STANDARD_80211n_5GHZ);
<     staDevice = wifi.Install (phy, macSta, wifiStaNode.Get (0));
<     phySta = GetYansWifiPhyPtr (staDevice);
<     phySta->SetAttribute ("Frequency", UintegerValue (5200));
<     phySta->SetAttribute ("ChannelNumber", UintegerValue (40));
<     NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelNumber (), 40, "802.11 5GHz configuration");
<     NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelWidth (), 20, "802.11 5GHz configuration");
<     NS_TEST_ASSERT_MSG_EQ (phySta->GetFrequency (), 5200, "802.11 5GHz configuration");
<     // Set both channel and frequency to inconsistent values
<     phySta->SetAttribute ("Frequency", UintegerValue (5200));
<     phySta->SetAttribute ("ChannelNumber", UintegerValue (36));
<     // We expect channel number to be 36
<     NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelNumber (), 36, "802.11 5GHz configuration");
<     NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelWidth (), 20, "802.11 5GHz configuration");
<     NS_TEST_ASSERT_MSG_EQ (phySta->GetFrequency (), 5180, "802.11 5GHz configuration");
<     phySta->SetAttribute ("ChannelNumber", UintegerValue (36));
<     phySta->SetAttribute ("Frequency", UintegerValue (5200));
<     // We expect channel number to be 40
<     NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelNumber (), 40, "802.11 5GHz configuration");
<     NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelWidth (), 20, "802.11 5GHz configuration");
<     NS_TEST_ASSERT_MSG_EQ (phySta->GetFrequency (), 5200, "802.11 5GHz configuration");
<     phySta->SetAttribute ("Frequency", UintegerValue (5179));
<     phySta->SetAttribute ("ChannelNumber", UintegerValue (36));
<     // We expect channel number to be 36
<     NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelNumber (), 36, "802.11 5GHz configuration");
<     NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelWidth (), 20, "802.11 5GHz configuration");
<     NS_TEST_ASSERT_MSG_EQ (phySta->GetFrequency (), 5180, "802.11 5GHz configuration");
<     phySta->SetAttribute ("ChannelNumber", UintegerValue (36));
<     phySta->SetAttribute ("Frequency", UintegerValue (5179));
<     // We expect channel number to be 0
<     NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelNumber (), 0, "802.11 5GHz configuration");
<     NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelWidth (), 20, "802.11 5GHz configuration");
<     NS_TEST_ASSERT_MSG_EQ (phySta->GetFrequency (), 5179, "802.11 5GHz configuration");
---
>       // case 0
>       // Default configuration, without WifiHelper::SetStandard or WifiHelper
>       phySta = CreateObject<YansWifiPhy> ();
>       // The default results in an invalid configuration of channel 0,
>       // width 20, and frequency 0 MHz
>       NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelNumber (), 0, "default configuration");
>       NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelWidth (), 20, "default configuration");
>       NS_TEST_ASSERT_MSG_EQ (phySta->GetFrequency (), 0, "default configuration");
>   }
>   {
>       // case 1
>       WifiHelper wifi;
>       // By default, WifiHelper will use WIFI_PHY_STANDARD_80211a
>       staDevice = wifi.Install (phy, macSta, wifiStaNode.Get(0));
>       phySta = GetYansWifiPhyPtr (staDevice);
>       // We expect channel 36, width 20, frequency 5180
>       NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelNumber (), 36, "default configuration");
>       NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelWidth (), 20, "default configuration");
>       NS_TEST_ASSERT_MSG_EQ (phySta->GetFrequency (), 5180, "default configuration");
>   }
>   {
>       // case 2
>       WifiHelper wifi;
>       wifi.SetStandard (WIFI_PHY_STANDARD_80211b);
>       staDevice = wifi.Install (phy, macSta, wifiStaNode.Get(0));
>       phySta = GetYansWifiPhyPtr (staDevice);
>       // We expect channel 1, width 22, frequency 2412
>       NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelNumber (), 1, "802.11b configuration");
>       NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelWidth (), 22, "802.11b configuration");
>       NS_TEST_ASSERT_MSG_EQ (phySta->GetFrequency (), 2412, "802.11b configuration");
>   }
>   {
>       // case 3
>       WifiHelper wifi;
>       wifi.SetStandard (WIFI_PHY_STANDARD_80211g);
>       staDevice = wifi.Install (phy, macSta, wifiStaNode.Get(0));
>       phySta = GetYansWifiPhyPtr (staDevice);
>       // We expect channel 1, width 20, frequency 2412
>       NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelNumber (), 1, "802.11g configuration");
>       NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelWidth (), 20, "802.11g configuration");
>       NS_TEST_ASSERT_MSG_EQ (phySta->GetFrequency (), 2412, "802.11g configuration");
>   }
>   {
>       // case 4
>       WifiHelper wifi;
>       wifi.SetRemoteStationManager ("ns3::IdealWifiManager");
>       wifi.SetStandard (WIFI_PHY_STANDARD_80211n_5GHZ);
>       staDevice = wifi.Install (phy, macSta, wifiStaNode.Get(0));
>       phySta = GetYansWifiPhyPtr (staDevice);
>       NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelNumber (), 36, "802.11n-5GHz configuration");
>       NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelWidth (), 20, "802.11n-5GHz configuration");
>       NS_TEST_ASSERT_MSG_EQ (phySta->GetFrequency (), 5180, "802.11n-5GHz configuration");
>   }
>   {
>       // case 5
>       WifiHelper wifi;
>       wifi.SetRemoteStationManager ("ns3::IdealWifiManager");
>       wifi.SetStandard (WIFI_PHY_STANDARD_80211n_2_4GHZ);
>       staDevice = wifi.Install (phy, macSta, wifiStaNode.Get(0));
>       phySta = GetYansWifiPhyPtr (staDevice);
>       NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelNumber (), 1, "802.11n-2.4GHz configuration");
>       NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelWidth (), 20, "802.11n-2.4GHz configuration");
>       NS_TEST_ASSERT_MSG_EQ (phySta->GetFrequency (), 2412, "802.11n-2.4GHz configuration");
>   }
>   {
>       // case 6
>       WifiHelper wifi;
>       wifi.SetRemoteStationManager ("ns3::IdealWifiManager");
>       wifi.SetStandard (WIFI_PHY_STANDARD_80211ac);
>       staDevice = wifi.Install (phy, macSta, wifiStaNode.Get(0));
>       phySta = GetYansWifiPhyPtr (staDevice);
>       NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelNumber (), 42, "802.11ac configuration");
>       NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelWidth (), 80, "802.11ac configuration");
>       NS_TEST_ASSERT_MSG_EQ (phySta->GetFrequency (), 5210, "802.11ac configuration");
>   }
>   {
>       // case 7
>       WifiHelper wifi;
>       wifi.SetRemoteStationManager ("ns3::IdealWifiManager");
>       wifi.SetStandard (WIFI_PHY_STANDARD_80211_10MHZ);
>       staDevice = wifi.Install (phy, macSta, wifiStaNode.Get(0));
>       phySta = GetYansWifiPhyPtr (staDevice);
>       NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelNumber (), 172, "802.11 10Mhz configuration");
>       NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelWidth (), 10, "802.11 10Mhz configuration");
>       NS_TEST_ASSERT_MSG_EQ (phySta->GetFrequency (), 5860, "802.11 10Mhz configuration");
>   }
>   {
>       // case 8
>       WifiHelper wifi;
>       wifi.SetRemoteStationManager ("ns3::IdealWifiManager");
>       wifi.SetStandard (WIFI_PHY_STANDARD_80211_5MHZ);
>       staDevice = wifi.Install (phy, macSta, wifiStaNode.Get(0));
>       phySta = GetYansWifiPhyPtr (staDevice);
>       NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelNumber (), 0, "802.11 5Mhz configuration");
>       NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelWidth (), 5, "802.11 5Mhz configuration");
>       NS_TEST_ASSERT_MSG_EQ (phySta->GetFrequency (), 5860, "802.11 5Mhz configuration");
>   }
>   {
>       // case 9
>       WifiHelper wifi;
>       wifi.SetRemoteStationManager ("ns3::IdealWifiManager");
>       wifi.SetStandard (WIFI_PHY_STANDARD_holland);
>       staDevice = wifi.Install (phy, macSta, wifiStaNode.Get(0));
>       phySta = GetYansWifiPhyPtr (staDevice);
>       // We expect channel 36, width 20, frequency 5180
>       NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelNumber (), 36, "802.11 5Mhz configuration");
>       NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelWidth (), 20, "802.11 5Mhz configuration");
>       NS_TEST_ASSERT_MSG_EQ (phySta->GetFrequency (), 5180, "802.11 5Mhz configuration");
>   }
>   {
>       // case 10
>       WifiHelper wifi;
>       wifi.SetRemoteStationManager ("ns3::IdealWifiManager");
>       wifi.SetStandard (WIFI_PHY_STANDARD_80211n_5GHZ);
>       phy.Set ("ChannelNumber", UintegerValue(44));
>       staDevice = wifi.Install (phy, macSta, wifiStaNode.Get(0));
>       phySta = GetYansWifiPhyPtr (staDevice);
>       NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelNumber (), 44, "802.11 5GHz configuration");
>       NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelWidth (), 20, "802.11 5GHz configuration");
>       NS_TEST_ASSERT_MSG_EQ (phySta->GetFrequency (), 5220, "802.11 5GHz configuration");
>   }
>   {
>       // case 11
>       WifiHelper wifi;
>       wifi.SetRemoteStationManager ("ns3::IdealWifiManager");
>       phy.Set ("ChannelNumber", UintegerValue(44));
>       staDevice = wifi.Install (phy, macSta, wifiStaNode.Get(0));
>       phySta = GetYansWifiPhyPtr (staDevice);
>       // Post-install reconfiguration to channel number 40
>       Config::Set ("/NodeList/*/DeviceList/*/$ns3::WifiNetDevice/Phy/$ns3::YansWifiPhy/ChannelNumber", UintegerValue(40));
>       NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelNumber (), 40, "802.11 5GHz configuration");
>       NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelWidth (), 20, "802.11 5GHz configuration");
>       NS_TEST_ASSERT_MSG_EQ (phySta->GetFrequency (), 5200, "802.11 5GHz configuration");
>   }
>   {
>       // case 12
>       WifiHelper wifi;
>       wifi.SetRemoteStationManager ("ns3::IdealWifiManager");
>       phy.Set ("ChannelNumber", UintegerValue (44));
>       staDevice = wifi.Install (phy, macSta, wifiStaNode.Get(0));
>       phySta = GetYansWifiPhyPtr (staDevice);
>       // Post-install reconfiguration to channel width 40 MHz
>       Config::Set ("/NodeList/*/DeviceList/*/$ns3::WifiNetDevice/Phy/$ns3::YansWifiPhy/ChannelWidth", UintegerValue(40));
>       // Although channel 44 is configured originally for 20 MHz, we
>       // allow it to be used for 40 MHz here
>       NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelNumber (), 44, "802.11 5GHz configuration");
>       NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelWidth (), 40, "802.11 5GHz configuration");
>       NS_TEST_ASSERT_MSG_EQ (phySta->GetFrequency (), 5220, "802.11 5GHz configuration");
>   }
>       // modify cases 13 and 14 to avoid Config::SetDefault ()
>   {
>       // case 13
>       WifiHelper wifi;
>       wifi.SetRemoteStationManager ("ns3::IdealWifiManager");
>       wifi.SetStandard (WIFI_PHY_STANDARD_80211n_5GHZ);
>       staDevice = wifi.Install (phy, macSta, wifiStaNode.Get(0));
>       phySta = GetYansWifiPhyPtr (staDevice);
>       phySta->SetAttribute ("ChannelNumber", UintegerValue (44));
>       // Post-install reconfiguration to channel width 40 MHz
>       Config::Set ("/NodeList/*/DeviceList/*/$ns3::WifiNetDevice/Phy/$ns3::YansWifiPhy/ChannelWidth", UintegerValue(40));
>       // Although channel 44 is configured originally for 20 MHz, we
>       // allow it to be used for 40 MHz here
>       NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelNumber (), 44, "802.11 5GHz configuration");
>       NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelWidth (), 40, "802.11 5GHz configuration");
>       NS_TEST_ASSERT_MSG_EQ (phySta->GetFrequency (), 5220, "802.11 5GHz configuration");
>   }
>   {
>       // case 14
>       WifiHelper wifi;
>       wifi.SetRemoteStationManager ("ns3::IdealWifiManager");
>       // Test that setting Frequency to a non-standard value will zero the
>       // channel number
>       wifi.SetStandard (WIFI_PHY_STANDARD_80211n_5GHZ);
>       staDevice = wifi.Install (phy, macSta, wifiStaNode.Get(0));
>       phySta = GetYansWifiPhyPtr (staDevice);
>       phySta->SetAttribute ("Frequency", UintegerValue (5281));
>       // We expect channel number to be zero since frequency doesn't match
>       NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelNumber (), 0, "802.11 5GHz configuration");
>       NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelWidth (), 20, "802.11 5GHz configuration");
>       NS_TEST_ASSERT_MSG_EQ (phySta->GetFrequency (), 5281, "802.11 5GHz configuration");
>   }
>   {
>       // case 15:
>       WifiHelper wifi;
>       wifi.SetRemoteStationManager ("ns3::IdealWifiManager");
>       wifi.SetStandard (WIFI_PHY_STANDARD_80211n_5GHZ);
>       staDevice = wifi.Install (phy, macSta, wifiStaNode.Get(0));
>       phySta = GetYansWifiPhyPtr (staDevice);
>       // Test that setting Frequency to a standard value will set the
>       // channel number correctly
>       phySta->SetAttribute ("Frequency", UintegerValue (5500));
>       // We expect channel number to be 100 due to frequency 5500
>       NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelNumber (), 100, "802.11 5GHz configuration");
>       NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelWidth (), 20, "802.11 5GHz configuration");
>       NS_TEST_ASSERT_MSG_EQ (phySta->GetFrequency (), 5500, "802.11 5GHz configuration");
>   }
>   {
>       // case 16:
>       WifiHelper wifi;
>       wifi.SetRemoteStationManager ("ns3::IdealWifiManager");
>       wifi.SetStandard (WIFI_PHY_STANDARD_80211n_5GHZ);
>       staDevice = wifi.Install (phy, macSta, wifiStaNode.Get (0));
>       phySta = GetYansWifiPhyPtr (staDevice);
>       // This case will error exit due to invalid channel number unless
>       // we provide the DefineChannelNumber() below
>       phySta->DefineChannelNumber (99, WIFI_PHY_STANDARD_80211n_5GHZ, 5185, 40);
>       phySta->SetAttribute ("ChannelNumber", UintegerValue (99));
>   }
>   {
>       // case 17:
>       WifiHelper wifi;
>       wifi.SetRemoteStationManager ("ns3::IdealWifiManager");
>       // Test how channel number behaves when frequency is non-standard
>       wifi.SetStandard (WIFI_PHY_STANDARD_80211n_5GHZ);
>       staDevice = wifi.Install (phy, macSta, wifiStaNode.Get(0));
>       phySta = GetYansWifiPhyPtr (staDevice);
>       phySta->SetAttribute ("Frequency", UintegerValue (5181));
>       // We expect channel number to be 0 due to unknown center frequency 5181
>       NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelNumber (), 0, "802.11 5GHz configuration");
>       NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelWidth (), 20, "802.11 5GHz configuration");
>       NS_TEST_ASSERT_MSG_EQ (phySta->GetFrequency (), 5181, "802.11 5GHz configuration");
>       phySta->SetAttribute ("Frequency", UintegerValue (5180));
>       // We expect channel number to be 36 due to known center frequency 5180
>       NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelNumber (), 36, "802.11 5GHz configuration");
>       NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelWidth (), 20, "802.11 5GHz configuration");
>       NS_TEST_ASSERT_MSG_EQ (phySta->GetFrequency (), 5180, "802.11 5GHz configuration");
>       phySta->SetAttribute ("Frequency", UintegerValue (5179));
>       // We expect channel number to be 0 due to unknown center frequency 5179
>       NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelNumber (), 0, "802.11 5GHz configuration");
>       NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelWidth (), 20, "802.11 5GHz configuration");
>       NS_TEST_ASSERT_MSG_EQ (phySta->GetFrequency (), 5179, "802.11 5GHz configuration");
>       phySta->SetAttribute ("ChannelNumber", UintegerValue (36));
>       NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelNumber (), 36, "802.11 5GHz configuration");
>       NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelWidth (), 20, "802.11 5GHz configuration");
>       NS_TEST_ASSERT_MSG_EQ (phySta->GetFrequency (), 5180, "802.11 5GHz configuration");
>   }
>   {
>       // case 18:
>       WifiHelper wifi;
>       wifi.SetRemoteStationManager ("ns3::IdealWifiManager");
>       // Set both channel and frequency to consistent values
>       wifi.SetStandard (WIFI_PHY_STANDARD_80211n_5GHZ);
>       staDevice = wifi.Install (phy, macSta, wifiStaNode.Get(0));
>       phySta = GetYansWifiPhyPtr (staDevice);
>       phySta->SetAttribute ("Frequency", UintegerValue (5200));
>       phySta->SetAttribute ("ChannelNumber", UintegerValue (40));
>       NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelNumber (), 40, "802.11 5GHz configuration");
>       NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelWidth (), 20, "802.11 5GHz configuration");
>       NS_TEST_ASSERT_MSG_EQ (phySta->GetFrequency (), 5200, "802.11 5GHz configuration");
>       // Set both channel and frequency to inconsistent values
>       phySta->SetAttribute ("Frequency", UintegerValue (5200));
>       phySta->SetAttribute ("ChannelNumber", UintegerValue (36));
>       // We expect channel number to be 36
>       NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelNumber (), 36, "802.11 5GHz configuration");
>       NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelWidth (), 20, "802.11 5GHz configuration");
>       NS_TEST_ASSERT_MSG_EQ (phySta->GetFrequency (), 5180, "802.11 5GHz configuration");
>       phySta->SetAttribute ("ChannelNumber", UintegerValue (36));
>       phySta->SetAttribute ("Frequency", UintegerValue (5200));
>       // We expect channel number to be 40
>       NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelNumber (), 40, "802.11 5GHz configuration");
>       NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelWidth (), 20, "802.11 5GHz configuration");
>       NS_TEST_ASSERT_MSG_EQ (phySta->GetFrequency (), 5200, "802.11 5GHz configuration");
>       phySta->SetAttribute ("Frequency", UintegerValue (5179));
>       phySta->SetAttribute ("ChannelNumber", UintegerValue (36));
>       // We expect channel number to be 36
>       NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelNumber (), 36, "802.11 5GHz configuration");
>       NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelWidth (), 20, "802.11 5GHz configuration");
>       NS_TEST_ASSERT_MSG_EQ (phySta->GetFrequency (), 5180, "802.11 5GHz configuration");
>       phySta->SetAttribute ("ChannelNumber", UintegerValue (36));
>       phySta->SetAttribute ("Frequency", UintegerValue (5179));
>       // We expect channel number to be 0
>       NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelNumber (), 0, "802.11 5GHz configuration");
>       NS_TEST_ASSERT_MSG_EQ (phySta->GetChannelWidth (), 20, "802.11 5GHz configuration");
>       NS_TEST_ASSERT_MSG_EQ (phySta->GetFrequency (), 5179, "802.11 5GHz configuration");
1198c964,965
<   Simulator::Destroy ();
---
> Simulator::Destroy ();
> 
1203c970
<  * Make sure that when virtual collision occurs the wifi remote station manager
---
>  * Make sure that when virtual collision occurs the wifi remote station manager 
1219c986
<   uint32_t m_countInternalCollisions; ///< count internal collisions
---
>   uint32_t m_countInternalCollisions;
1221d987
<   /// Populate ARP cache function
1223,1228c989
<   /**
<    * Transmit data failed function
<    * \param context the context
<    * \param adr the MAC address
<    */
<   void TxDataFailedTrace (std::string context, Mac48Address adress);
---
>   void TxDataFailedTrace (std::string context, Mac48Address adr);
1252c1013
< 
---
>     
1256c1017
<   RngSeedManager::SetRun (16);
---
>   RngSeedManager::SetRun (2);
1267,1269d1027
<   wifi.SetRemoteStationManager ("ns3::ConstantRateWifiManager",
<                                 "DataMode", StringValue ("OfdmRate54Mbps"),
<                                 "ControlMode", StringValue ("OfdmRate24Mbps"));
1307,1310c1065,1068
<   wifiNodes.Get (0)->AddApplication (clientLowPriority);
<   clientLowPriority->SetStartTime (Seconds (0.0));
<   clientLowPriority->SetStopTime (Seconds (1.0));
< 
---
>   wifiNodes.Get(0)->AddApplication (clientLowPriority);
>   clientLowPriority->SetStartTime (Seconds (1.0));
>   clientLowPriority->SetStopTime (Seconds (2.0));
>   
1316,1318c1074,1076
<   wifiNodes.Get (0)->AddApplication (clientHighPriority);
<   clientHighPriority->SetStartTime (Seconds (0.0));
<   clientHighPriority->SetStopTime (Seconds (1.0));
---
>   wifiNodes.Get(0)->AddApplication (clientHighPriority);
>   clientHighPriority->SetStartTime (Seconds (1.0));
>   clientHighPriority->SetStopTime (Seconds (2.0));
1322,1324c1080,1082
<   wifiNodes.Get (1)->AddApplication (server);
<   server->SetStartTime (Seconds (0.0));
<   server->SetStopTime (Seconds (1.0));
---
>   wifiNodes.Get(1)->AddApplication (server);
>   server->SetStartTime (Seconds (1.0));
>   server->SetStopTime (Seconds (2.0));
1328,2480d1085
<   Simulator::Stop (Seconds (1.0));
<   Simulator::Run ();
<   Simulator::Destroy ();
< 
<   NS_TEST_ASSERT_MSG_EQ (m_countInternalCollisions, 1, "unexpected number of internal collisions!");
< }
< 
< //-----------------------------------------------------------------------------
< /**
<  * Make sure that the correct channel width and center frequency have been set
<  * for OFDM basic rate transmissions and BSS channel widths larger than 20 MHz.
<  *
<  * The scenario considers a UDP transmission between a 40 MHz 802.11ac station and a
<  * 40 MHz 802.11ac access point. All transmission parameters are checked so as
<  * to ensure that only 2 {starting frequency, channelWidth, Number of subbands
<  * in SpectrumModel, modulation type} tuples are used.
<  *
<  * See \bugid{2843}
<  */
< 
< class Bug2843TestCase : public TestCase
< {
< public:
<   Bug2843TestCase ();
<   virtual ~Bug2843TestCase ();
<   virtual void DoRun (void);
< 
< private:
<   /**
<    * A tuple of {starting frequency, channelWidth, Number of subbands in SpectrumModel, modulation type}
<    */
<   typedef std::tuple<double, uint16_t, uint32_t, WifiModulationClass> FreqWidthSubbandModulationTuple;
<   std::vector<FreqWidthSubbandModulationTuple> m_distinctTuples; ///< vector of distinct {starting frequency, channelWidth, Number of subbands in SpectrumModel, modulation type} tuples
< 
<   /**
<    * Stores the distinct {starting frequency, channelWidth, Number of subbands in SpectrumModel, modulation type} tuples
<    * that have been used during the testcase run.
<    * \param context the context
<    * \param txParams spectrum signal parameters set by transmitter
<    */
<   void StoreDistinctTuple (std::string context, Ptr<SpectrumSignalParameters> txParams);
<   /**
<    * Triggers the arrival of a burst of 1000 Byte-long packets in the source device
<    * \param numPackets number of packets in burst
<    * \param sourceDevice pointer to the source NetDevice
<    * \param destination address of the destination device
<    */
<   void SendPacketBurst (uint8_t numPackets, Ptr<NetDevice> sourceDevice, Address& destination) const;
< 
<   uint16_t m_channelWidth; ///< channel width (in MHz)
< };
< 
< Bug2843TestCase::Bug2843TestCase ()
<   : TestCase ("Test case for Bug 2843"),
<     m_channelWidth (20)
< {
< }
< 
< Bug2843TestCase::~Bug2843TestCase ()
< {
< }
< 
< void
< Bug2843TestCase::StoreDistinctTuple (std::string context,  Ptr<SpectrumSignalParameters> txParams)
< {
<   // Extract starting frequency and number of subbands
<   Ptr<const SpectrumModel> c = txParams->psd->GetSpectrumModel ();
<   std::size_t numBands = c->GetNumBands ();
<   double startingFreq = c->Begin ()->fl;
< 
<   // Get channel bandwidth and modulation class
<   Ptr<const WifiSpectrumSignalParameters> wifiTxParams = DynamicCast<WifiSpectrumSignalParameters> (txParams);
< 
<   Ptr<WifiPpdu> ppdu = Copy (wifiTxParams->ppdu);
<   WifiTxVector txVector = ppdu->GetTxVector ();
<   m_channelWidth = txVector.GetChannelWidth ();
<   WifiModulationClass modulationClass = txVector.GetMode ().GetModulationClass ();
< 
<   // Build a tuple and check if seen before (if so store it)
<   FreqWidthSubbandModulationTuple tupleForCurrentTx = std::make_tuple (startingFreq, m_channelWidth, numBands, modulationClass);
<   bool found = false;
<   for (std::vector<FreqWidthSubbandModulationTuple>::const_iterator it = m_distinctTuples.begin (); it != m_distinctTuples.end (); it++)
<     {
<       if (*it == tupleForCurrentTx)
<         {
<           found = true;
<         }
<     }
<   if (!found)
<     {
<       m_distinctTuples.push_back (tupleForCurrentTx);
<     }
< }
< 
< void
< Bug2843TestCase::SendPacketBurst (uint8_t numPackets, Ptr<NetDevice> sourceDevice,
<                                   Address& destination) const
< {
<   for (uint8_t i = 0; i < numPackets; i++)
<     {
<       Ptr<Packet> pkt = Create<Packet> (1000);  // 1000 dummy bytes of data
<       sourceDevice->Send (pkt, destination, 0);
<     }
< }
< 
< void
< Bug2843TestCase::DoRun (void)
< {
<   uint16_t channelWidth = 40; // at least 40 MHz expected here
< 
<   NodeContainer wifiStaNode;
<   wifiStaNode.Create (1);
< 
<   NodeContainer wifiApNode;
<   wifiApNode.Create (1);
< 
<   SpectrumWifiPhyHelper spectrumPhy = SpectrumWifiPhyHelper::Default ();
<   Ptr<MultiModelSpectrumChannel> spectrumChannel = CreateObject<MultiModelSpectrumChannel> ();
<   Ptr<FriisPropagationLossModel> lossModel = CreateObject<FriisPropagationLossModel> ();
<   lossModel->SetFrequency (5.180e9);
<   spectrumChannel->AddPropagationLossModel (lossModel);
< 
<   Ptr<ConstantSpeedPropagationDelayModel> delayModel
<     = CreateObject<ConstantSpeedPropagationDelayModel> ();
<   spectrumChannel->SetPropagationDelayModel (delayModel);
< 
<   spectrumPhy.SetChannel (spectrumChannel);
<   spectrumPhy.SetErrorRateModel ("ns3::NistErrorRateModel");
<   spectrumPhy.Set ("Frequency", UintegerValue (5180));
<   spectrumPhy.Set ("ChannelWidth", UintegerValue (channelWidth));
<   spectrumPhy.Set ("TxPowerStart", DoubleValue (10));
<   spectrumPhy.Set ("TxPowerEnd", DoubleValue (10));
< 
<   WifiHelper wifi;
<   wifi.SetStandard (WIFI_PHY_STANDARD_80211ac);
<   wifi.SetRemoteStationManager ("ns3::ConstantRateWifiManager",
<                                 "DataMode", StringValue ("VhtMcs8"),
<                                 "ControlMode", StringValue ("VhtMcs8"),
<                                 "RtsCtsThreshold", StringValue ("500")); // so as to force RTS/CTS for data frames
< 
<   WifiMacHelper mac;
<   mac.SetType ("ns3::StaWifiMac");
<   NetDeviceContainer staDevice;
<   staDevice = wifi.Install (spectrumPhy, mac, wifiStaNode);
< 
<   mac.SetType ("ns3::ApWifiMac");
<   NetDeviceContainer apDevice;
<   apDevice = wifi.Install (spectrumPhy, mac, wifiApNode);
< 
<   MobilityHelper mobility;
<   Ptr<ListPositionAllocator> positionAlloc = CreateObject<ListPositionAllocator> ();
<   positionAlloc->Add (Vector (0.0, 0.0, 0.0));
<   positionAlloc->Add (Vector (1.0, 0.0, 0.0)); // put close enough in order to use MCS
<   mobility.SetPositionAllocator (positionAlloc);
< 
<   mobility.SetMobilityModel ("ns3::ConstantPositionMobilityModel");
<   mobility.Install (wifiApNode);
<   mobility.Install (wifiStaNode);
< 
<   // Send two 5 packet-bursts
<   Simulator::Schedule (Seconds (0.5), &Bug2843TestCase::SendPacketBurst, this, 5, apDevice.Get (0), staDevice.Get (0)->GetAddress ());
<   Simulator::Schedule (Seconds (0.6), &Bug2843TestCase::SendPacketBurst, this, 5, apDevice.Get (0), staDevice.Get (0)->GetAddress ());
< 
<   Config::Connect ("/ChannelList/*/$ns3::MultiModelSpectrumChannel/TxSigParams", MakeCallback (&Bug2843TestCase::StoreDistinctTuple, this));
< 
<   Simulator::Stop (Seconds (0.8));
<   Simulator::Run ();
< 
<   Simulator::Destroy ();
< 
<   // {starting frequency, channelWidth, Number of subbands in SpectrumModel, modulation type} tuples
<   std::size_t numberTuples = m_distinctTuples.size ();
<   NS_TEST_ASSERT_MSG_EQ (numberTuples, 2, "Only two distinct tuples expected");
<   NS_TEST_ASSERT_MSG_EQ (std::get<0> (m_distinctTuples[0]) - 20e6, std::get<0> (m_distinctTuples[1]), "The starting frequency of the first tuple should be shifted 20 MHz to the right wrt second tuple");
<   // Note that the first tuple should the one initiated by the beacon, i.e. non-HT OFDM (20 MHz)
<   NS_TEST_ASSERT_MSG_EQ (std::get<1> (m_distinctTuples[0]), 20, "First tuple's channel width should be 20 MHz");
<   NS_TEST_ASSERT_MSG_EQ (std::get<2> (m_distinctTuples[0]), 193, "First tuple should have 193 subbands (64+DC, 20MHz+DC, inband and 64*2 out-of-band, 20MHz on each side)");
<   NS_TEST_ASSERT_MSG_EQ (std::get<3> (m_distinctTuples[0]), WifiModulationClass::WIFI_MOD_CLASS_OFDM, "First tuple should be OFDM");
<   // Second tuple
<   NS_TEST_ASSERT_MSG_EQ (std::get<1> (m_distinctTuples[1]), channelWidth, "Second tuple's channel width should be 40 MHz");
<   NS_TEST_ASSERT_MSG_EQ (std::get<2> (m_distinctTuples[1]), 385, "Second tuple should have 385 subbands (128+DC, 40MHz+DC, inband and 128*2 out-of-band, 40MHz on each side)");
<   NS_TEST_ASSERT_MSG_EQ (std::get<3> (m_distinctTuples[1]), WifiModulationClass::WIFI_MOD_CLASS_VHT, "Second tuple should be VHT_OFDM");
< }
< 
< //-----------------------------------------------------------------------------
< /**
<  * Make sure that the channel width and the channel number can be changed at runtime.
<  *
<  * The scenario considers an access point and a station using a 20 MHz channel width.
<  * After 1s, we change the channel width and the channel number to use a 40 MHz channel.
<  * The tests checks the operational channel width sent in Beacon frames
<  * and verify that a reassociation procedure is executed.
<  *
<  * See \bugid{2831}
<  */
< 
< class Bug2831TestCase : public TestCase
< {
< public:
<   Bug2831TestCase ();
<   virtual ~Bug2831TestCase ();
<   virtual void DoRun (void);
< 
< private:
<   /**
<    * Function called to change the supported channel width at runtime
<    */
<   void ChangeSupportedChannelWidth (void);
<   /**
<    * Callback triggered when a packet is received by the PHYs
<    * \param context the context
<    * \param p the received packet
<    */
<   void RxCallback (std::string context, Ptr<const Packet> p);
< 
<   Ptr<YansWifiPhy> m_apPhy; ///< AP PHY
<   Ptr<YansWifiPhy> m_staPhy; ///< STA PHY
< 
<   uint8_t m_reassocReqCount; ///< count number of reassociation requests
<   uint8_t m_reassocRespCount; ///< count number of reassociation responses
<   uint8_t m_countOperationalChannelWidth20; ///< count number of beacon frames announcing a 20 MHz operating channel width
<   uint8_t m_countOperationalChannelWidth40; ///< count number of beacon frames announcing a 40 MHz operating channel width
< };
< 
< Bug2831TestCase::Bug2831TestCase ()
<   : TestCase ("Test case for Bug 2831"),
<     m_reassocReqCount (0),
<     m_reassocRespCount (0),
<     m_countOperationalChannelWidth20 (0),
<     m_countOperationalChannelWidth40 (0)
< {
< }
< 
< Bug2831TestCase::~Bug2831TestCase ()
< {
< }
< 
< void
< Bug2831TestCase::ChangeSupportedChannelWidth ()
< {
<   m_apPhy->SetChannelNumber (38);
<   m_apPhy->SetChannelWidth (40);
<   m_staPhy->SetChannelNumber (38);
<   m_staPhy->SetChannelWidth (40);
< }
< 
< void
< Bug2831TestCase::RxCallback (std::string context, Ptr<const Packet> p)
< {
<   Ptr<Packet> packet = p->Copy ();
<   WifiMacHeader hdr;
<   packet->RemoveHeader (hdr);
<   /* Remove Trailer */
<   WifiMacTrailer fcs;
<   packet->RemoveTrailer (fcs);
<   if (hdr.IsReassocReq ())
<     {
<       m_reassocReqCount++;
<     }
<   else if (hdr.IsReassocResp ())
<     {
<       m_reassocRespCount++;
<     }
<   else if (hdr.IsBeacon ())
<     {
<       MgtBeaconHeader beacon;
<       packet->RemoveHeader (beacon);
<       Ptr<HtOperation> htOperation = StaticCast<HtOperation> (beacon.GetInformationElement (std::make_pair (IE_HT_OPERATION, 0)));
<       if (htOperation->GetStaChannelWidth () > 0)
<         {
<           m_countOperationalChannelWidth40++;
<         }
<       else
<         {
<           m_countOperationalChannelWidth20++;
<         }
<     }
< }
< 
< void
< Bug2831TestCase::DoRun (void)
< {
<   Ptr<YansWifiChannel> channel = CreateObject<YansWifiChannel> ();
<   ObjectFactory propDelay;
<   propDelay.SetTypeId ("ns3::ConstantSpeedPropagationDelayModel");
<   Ptr<PropagationDelayModel> propagationDelay = propDelay.Create<PropagationDelayModel> ();
<   Ptr<PropagationLossModel> propagationLoss = CreateObject<FriisPropagationLossModel> ();
<   channel->SetPropagationDelayModel (propagationDelay);
<   channel->SetPropagationLossModel (propagationLoss);
< 
<   Ptr<Node> apNode = CreateObject<Node> ();
<   Ptr<WifiNetDevice> apDev = CreateObject<WifiNetDevice> ();
<   Ptr<HtConfiguration> apHtConfiguration = CreateObject<HtConfiguration> ();
<   apDev->SetHtConfiguration (apHtConfiguration);
<   ObjectFactory mac;
<   mac.SetTypeId ("ns3::ApWifiMac");
<   mac.Set ("EnableBeaconJitter", BooleanValue (false));
<   Ptr<WifiMac> apMac = mac.Create<WifiMac> ();
<   apMac->SetDevice (apDev);
<   apMac->ConfigureStandard (WIFI_PHY_STANDARD_80211ax_5GHZ);
< 
<   Ptr<Node> staNode = CreateObject<Node> ();
<   Ptr<WifiNetDevice> staDev = CreateObject<WifiNetDevice> ();
<   Ptr<HtConfiguration> staHtConfiguration = CreateObject<HtConfiguration> ();
<   staDev->SetHtConfiguration (staHtConfiguration);
<   mac.SetTypeId ("ns3::StaWifiMac");
<   Ptr<WifiMac> staMac = mac.Create<WifiMac> ();
<   staMac->SetDevice (staDev);
<   staMac->ConfigureStandard (WIFI_PHY_STANDARD_80211ax_5GHZ);
< 
<   Ptr<ConstantPositionMobilityModel> apMobility = CreateObject<ConstantPositionMobilityModel> ();
<   apMobility->SetPosition (Vector (0.0, 0.0, 0.0));
<   apNode->AggregateObject (apMobility);
< 
<   Ptr<ErrorRateModel> error = CreateObject<YansErrorRateModel> ();
<   m_apPhy = CreateObject<YansWifiPhy> ();
<   m_apPhy->SetErrorRateModel (error);
<   m_apPhy->SetChannel (channel);
<   m_apPhy->SetMobility (apMobility);
<   m_apPhy->SetDevice (apDev);
<   m_apPhy->ConfigureStandard (WIFI_PHY_STANDARD_80211ax_5GHZ);
<   m_apPhy->SetChannelNumber (36);
<   m_apPhy->SetChannelWidth (20);
< 
<   Ptr<ConstantPositionMobilityModel> staMobility = CreateObject<ConstantPositionMobilityModel> ();
<   staMobility->SetPosition (Vector (1.0, 0.0, 0.0));
<   staNode->AggregateObject (staMobility);
< 
<   m_staPhy = CreateObject<YansWifiPhy> ();
<   m_staPhy->SetErrorRateModel (error);
<   m_staPhy->SetChannel (channel);
<   m_staPhy->SetMobility (staMobility);
<   m_staPhy->SetDevice (apDev);
<   m_staPhy->ConfigureStandard (WIFI_PHY_STANDARD_80211ax_5GHZ);
<   m_staPhy->SetChannelNumber (36);
<   m_staPhy->SetChannelWidth (20);
< 
<   apMac->SetAddress (Mac48Address::Allocate ());
<   apDev->SetMac (apMac);
<   apDev->SetPhy (m_apPhy);
<   ObjectFactory manager;
<   manager.SetTypeId ("ns3::ConstantRateWifiManager");
<   apDev->SetRemoteStationManager (manager.Create<WifiRemoteStationManager> ());
<   apNode->AddDevice (apDev);
< 
<   staMac->SetAddress (Mac48Address::Allocate ());
<   staDev->SetMac (staMac);
<   staDev->SetPhy (m_staPhy);
<   staDev->SetRemoteStationManager (manager.Create<WifiRemoteStationManager> ());
<   staNode->AddDevice (staDev);
< 
<   Config::Connect ("/NodeList/*/DeviceList/*/$ns3::WifiNetDevice/Phy/$ns3::WifiPhy/PhyRxBegin", MakeCallback (&Bug2831TestCase::RxCallback, this));
< 
<   Simulator::Schedule (Seconds (1.0), &Bug2831TestCase::ChangeSupportedChannelWidth, this);
< 
<   Simulator::Stop (Seconds (3.0));
<   Simulator::Run ();
<   Simulator::Destroy ();
< 
<   NS_TEST_ASSERT_MSG_EQ (m_reassocReqCount, 1, "Reassociation request not received");
<   NS_TEST_ASSERT_MSG_EQ (m_reassocRespCount, 1, "Reassociation response not received");
<   NS_TEST_ASSERT_MSG_EQ (m_countOperationalChannelWidth20, 10, "Incorrect operational channel width before channel change");
<   NS_TEST_ASSERT_MSG_EQ (m_countOperationalChannelWidth40, 20, "Incorrect operational channel width after channel change");
< }
< 
< //-----------------------------------------------------------------------------
< /**
<  * Make sure that Wifi STA is correctly associating to the best AP (i.e.,
<  * nearest from STA). We consider 3 AP and 1 STA. This test case consisted of
<  * three sub tests:
<  *   - The best AP sends its beacon later than the other APs. STA is expected
<  *     to associate to the best AP.
<  *   - The STA is using active scanning instead of passive, the rest of the
<  *     APs works normally. STA is expected to associate to the best AP
<  *   - The nearest AP is turned off after sending beacon and while STA is
<  *     still scanning. STA is expected to associate to the second best AP.
<  *
<  * See \bugid{2399}
<  * \todo Add explicit association refusal test if ns-3 implemented it.
<  */
< 
< class StaWifiMacScanningTestCase : public TestCase
< {
< public:
<   StaWifiMacScanningTestCase ();
<   virtual ~StaWifiMacScanningTestCase ();
<   virtual void DoRun (void);
< 
< private:
<   /**
<    * Callback function on STA assoc event
<    * \param context context string
<    * \param bssid the associated AP's bssid
<    */
<   void AssocCallback (std::string context, Mac48Address bssid);
<   /**
<    * Turn beacon generation on the AP node
<    * \param apNode the AP node
<    */
<   void TurnBeaconGenerationOn (Ptr<Node> apNode);
<   /**
<    * Turn the AP node off
<    * \param apNode the AP node
<    */
<   void TurnApOff (Ptr<Node> apNode);
<   /**
<    * Setup test
<    * \param nearestApBeaconGeneration set BeaconGeneration attribute of the nearest AP
<    * \param staActiveProbe set ActiveProbing attribute of the STA
<    * \return node container containing all nodes
<    */
<   NodeContainer Setup (bool nearestApBeaconGeneration, bool staActiveProbe);
< 
<   Mac48Address m_associatedApBssid; ///< Associated AP's bssid
< };
< 
< StaWifiMacScanningTestCase::StaWifiMacScanningTestCase ()
<   : TestCase ("Test case for StaWifiMac scanning capability")
< {
< }
< 
< StaWifiMacScanningTestCase::~StaWifiMacScanningTestCase ()
< {
< }
< 
< void
< StaWifiMacScanningTestCase::AssocCallback (std::string context, Mac48Address bssid)
< {
<   m_associatedApBssid = bssid;
< }
< 
< void
< StaWifiMacScanningTestCase::TurnBeaconGenerationOn (Ptr<Node> apNode)
< {
<   Ptr<WifiNetDevice> netDevice = DynamicCast<WifiNetDevice> (apNode->GetDevice (0));
<   Ptr<ApWifiMac> mac = DynamicCast<ApWifiMac> (netDevice->GetMac ());
<   mac->SetAttribute ("BeaconGeneration", BooleanValue (true));
< }
< 
< void
< StaWifiMacScanningTestCase::TurnApOff (Ptr<Node> apNode)
< {
<   Ptr<WifiNetDevice> netDevice = DynamicCast<WifiNetDevice> (apNode->GetDevice (0));
<   Ptr<WifiPhy> phy = netDevice->GetPhy ();
<   phy->SetOffMode ();
< }
< 
< NodeContainer
< StaWifiMacScanningTestCase::Setup (bool nearestApBeaconGeneration, bool staActiveProbe)
< {
<   NodeContainer apNodes;
<   apNodes.Create (2);
< 
<   Ptr<Node> apNodeNearest = CreateObject<Node> ();
<   Ptr<Node> staNode = CreateObject<Node> ();
< 
<   YansWifiPhyHelper phy = YansWifiPhyHelper::Default ();
<   YansWifiChannelHelper channel = YansWifiChannelHelper::Default ();
<   phy.SetChannel (channel.Create ());
< 
<   WifiHelper wifi;
<   wifi.SetStandard (WIFI_PHY_STANDARD_80211n_2_4GHZ);
<   wifi.SetRemoteStationManager ("ns3::ConstantRateWifiManager");
< 
<   WifiMacHelper mac;
<   NetDeviceContainer apDevice, apDeviceNearest;
<   mac.SetType ("ns3::ApWifiMac",
<                "BeaconGeneration", BooleanValue (true));
<   apDevice = wifi.Install (phy, mac, apNodes);
<   mac.SetType ("ns3::ApWifiMac",
<                "BeaconGeneration", BooleanValue (nearestApBeaconGeneration));
<   apDeviceNearest = wifi.Install (phy, mac, apNodeNearest);
< 
<   NetDeviceContainer staDevice;
<   mac.SetType ("ns3::StaWifiMac",
<                "ActiveProbing", BooleanValue (staActiveProbe));
<   staDevice = wifi.Install (phy, mac, staNode);
< 
<   MobilityHelper mobility;
<   Ptr<ListPositionAllocator> positionAlloc = CreateObject<ListPositionAllocator> ();
<   positionAlloc->Add (Vector (0.0, 0.0, 0.0));  // Furthest AP
<   positionAlloc->Add (Vector (10.0, 0.0, 0.0)); // Second nearest AP
<   positionAlloc->Add (Vector (5.0, 5.0, 0.0));  // Nearest AP
<   positionAlloc->Add (Vector (6.0, 5.0, 0.0));  // STA
<   mobility.SetPositionAllocator (positionAlloc);
< 
<   mobility.SetMobilityModel ("ns3::ConstantPositionMobilityModel");
<   mobility.Install (apNodes);
<   mobility.Install (apNodeNearest);
<   mobility.Install (staNode);
< 
<   Config::Connect ("/NodeList/*/DeviceList/*/$ns3::WifiNetDevice/Mac/$ns3::StaWifiMac/Assoc", MakeCallback (&StaWifiMacScanningTestCase::AssocCallback, this));
< 
<   NodeContainer allNodes = NodeContainer (apNodes, apNodeNearest, staNode);
<   return allNodes;
< }
< 
< void
< StaWifiMacScanningTestCase::DoRun (void)
< {
<   {
<     RngSeedManager::SetSeed (1);
<     RngSeedManager::SetRun (1);
< 
<     NodeContainer nodes = Setup (false, false);
<     Ptr<Node> nearestAp = nodes.Get (2);
<     Mac48Address nearestApAddr = DynamicCast<WifiNetDevice> (nearestAp->GetDevice (0))->GetMac ()->GetAddress ();
< 
<     Simulator::Schedule (Seconds (0.05), &StaWifiMacScanningTestCase::TurnBeaconGenerationOn, this, nearestAp);
< 
<     Simulator::Stop (Seconds (0.2));
<     Simulator::Run ();
<     Simulator::Destroy ();
< 
<     NS_TEST_ASSERT_MSG_EQ (m_associatedApBssid, nearestApAddr, "STA is associated to the wrong AP");
<   }
<   m_associatedApBssid = Mac48Address ();
<   {
<     RngSeedManager::SetSeed (1);
<     RngSeedManager::SetRun (1);
< 
<     NodeContainer nodes = Setup (true, true);
<     Ptr<Node> nearestAp = nodes.Get (2);
<     Mac48Address nearestApAddr = DynamicCast<WifiNetDevice> (nearestAp->GetDevice (0))->GetMac ()->GetAddress ();
< 
<     Simulator::Stop (Seconds (0.2));
<     Simulator::Run ();
<     Simulator::Destroy ();
< 
<     NS_TEST_ASSERT_MSG_EQ (m_associatedApBssid, nearestApAddr, "STA is associated to the wrong AP");
<   }
<   m_associatedApBssid = Mac48Address ();
<   {
<     RngSeedManager::SetSeed (1);
<     RngSeedManager::SetRun (1);
< 
<     NodeContainer nodes = Setup (true, false);
<     Ptr<Node> nearestAp = nodes.Get (2);
<     Mac48Address secondNearestApAddr = DynamicCast<WifiNetDevice> (nodes.Get (1)->GetDevice (0))->GetMac ()->GetAddress ();
< 
<     Simulator::Schedule (Seconds (0.1), &StaWifiMacScanningTestCase::TurnApOff, this, nearestAp);
< 
<     Simulator::Stop (Seconds (1.5));
<     Simulator::Run ();
<     Simulator::Destroy ();
< 
<     NS_TEST_ASSERT_MSG_EQ (m_associatedApBssid, secondNearestApAddr, "STA is associated to the wrong AP");
<   }
< }
< 
< //-----------------------------------------------------------------------------
< /**
<  * Make sure that the ADDBA handshake process is protected.
<  *
<  * The scenario considers an access point and a station. It utilizes
<  * ReceiveListErrorModel to drop by force ADDBA request on STA or ADDBA
<  * response on AP. The AP sends 5 packets of each 1000 bytes (thus generating
<  * BA agreement), 2 times during the test at 0.5s and 0.8s. We only drop the
<  * first ADDBA request/response of the first BA negotiation. Therefore, we
<  * expect that the packets still in queue after the failed BA agreement will be
<  * sent with normal MPDU, and packets queued after that should be sent with
<  * A-MPDU.
<  *
<  * This test consider 2 cases:
<  *
<  *   1. ADDBA request packets are blocked on receive at STA, triggering
<  *      transmission failure at AP
<  *   2. ADDBA response packets are blocked on receive at AP, STA stops
<  *      retransmission of ADDBA response
<  *
<  * See \bugid{2470}
<  */
< 
< class Bug2470TestCase : public TestCase
< {
< public:
<   Bug2470TestCase ();
<   virtual ~Bug2470TestCase ();
<   virtual void DoRun (void);
< 
< private:
<   /**
<    * Callback when ADDBA state changed
<    * \param context node context
<    * \param t the time the state changed
<    * \param recipient the MAC address of the recipient
<    * \param tid the TID
<    * \param state the state
<    */
<   void AddbaStateChangedCallback (std::string context, Time t, Mac48Address recipient, uint8_t tid, OriginatorBlockAckAgreement::State state);
<   /**
<    * Callback when packet is received
<    * \param context node context
<    * \param p the received packet
<    * \param channelFreqMhz the channel frequency in MHz
<    * \param txVector the TX vector
<    * \param aMpdu the A-MPDU info
<    * \param signalNoise the signal noise in dBm
<    */
<   void RxCallback (std::string context, Ptr<const Packet> p, uint16_t channelFreqMhz, WifiTxVector txVector, MpduInfo aMpdu, SignalNoiseDbm signalNoise);
<   /**
<    * Callback when packet is dropped
<    * \param context node context
<    * \param p the failed packet
<    * \param snr the SNR of the failed packet in linear scale
<    */
<   void RxErrorCallback (std::string context, Ptr<const Packet> p, double snr);
<   /**
<    * Triggers the arrival of a burst of 1000 Byte-long packets in the source device
<    * \param numPackets number of packets in burst
<    * \param sourceDevice pointer to the source NetDevice
<    * \param destination address of the destination device
<    */
<   void SendPacketBurst (uint32_t numPackets, Ptr<NetDevice> sourceDevice, Address& destination) const;
<   /**
<    * Run subtest for this test suite
<    * \param apErrorModel ErrorModel used for AP
<    * \param staErrorModel ErrorModel used for STA
<    */
<   void RunSubtest (PointerValue apErrorModel, PointerValue staErrorModel);
< 
<   uint16_t m_receivedNormalMpduCount; ///< Count received normal MPDU packets on STA
<   uint16_t m_receivedAmpduCount;      ///< Count received A-MPDU packets on STA
<   uint16_t m_failedActionCount;       ///< Count failed ADDBA request/response
<   uint16_t m_addbaEstablishedCount;   ///< Count number of times ADDBA state machine is in established state
<   uint16_t m_addbaPendingCount;       ///< Count number of times ADDBA state machine is in pending state
<   uint16_t m_addbaRejectedCount;      ///< Count number of times ADDBA state machine is in rejected state
<   uint16_t m_addbaNoReplyCount;       ///< Count number of times ADDBA state machine is in no_reply state
<   uint16_t m_addbaResetCount;         ///< Count number of times ADDBA state machine is in reset state
< };
< 
< Bug2470TestCase::Bug2470TestCase ()
<   : TestCase ("Test case for Bug 2470"),
<     m_receivedNormalMpduCount (0),
<     m_receivedAmpduCount (0),
<     m_failedActionCount (0),
<     m_addbaEstablishedCount (0),
<     m_addbaPendingCount (0),
<     m_addbaRejectedCount (0),
<     m_addbaNoReplyCount (0),
<     m_addbaResetCount (0)
< {
< }
< 
< Bug2470TestCase::~Bug2470TestCase ()
< {
< }
< 
< void
< Bug2470TestCase::AddbaStateChangedCallback (std::string context, Time t, Mac48Address recipient, uint8_t tid, OriginatorBlockAckAgreement::State state)
< {
<   switch (state)
<     {
<     case OriginatorBlockAckAgreement::ESTABLISHED:
<       m_addbaEstablishedCount++;
<       break;
<     case OriginatorBlockAckAgreement::PENDING:
<       m_addbaPendingCount++;
<       break;
<     case OriginatorBlockAckAgreement::REJECTED:
<       m_addbaRejectedCount++;
<       break;
<     case OriginatorBlockAckAgreement::NO_REPLY:
<       m_addbaNoReplyCount++;
<       break;
<     case OriginatorBlockAckAgreement::RESET:
<       m_addbaResetCount++;
<       break;
<     }
< }
< 
< void
< Bug2470TestCase::RxCallback (std::string context, Ptr<const Packet> p, uint16_t channelFreqMhz, WifiTxVector txVector, MpduInfo aMpdu, SignalNoiseDbm signalNoise)
< {
<   Ptr<Packet> packet = p->Copy ();
<   if (aMpdu.type != MpduType::NORMAL_MPDU)
<     {
<       m_receivedAmpduCount++;
<     }
<   else
<     {
<       WifiMacHeader hdr;
<       packet->RemoveHeader (hdr);
<       if (hdr.IsData ())
<         {
<           m_receivedNormalMpduCount++;
<         }
<     }
< }
< 
< void
< Bug2470TestCase::RxErrorCallback (std::string context, Ptr<const Packet> p, double snr)
< {
<   Ptr<Packet> packet = p->Copy ();
<   WifiMacHeader hdr;
<   packet->RemoveHeader (hdr);
<   if (hdr.IsAction ())
<     {
<       m_failedActionCount++;
<     }
< }
< 
< void
< Bug2470TestCase::SendPacketBurst (uint32_t numPackets, Ptr<NetDevice> sourceDevice,
<                                   Address& destination) const
< {
<   for (uint32_t i = 0; i < numPackets; i++)
<     {
<       Ptr<Packet> pkt = Create<Packet> (1000); // 1000 dummy bytes of data
<       sourceDevice->Send (pkt, destination, 0);
<     }
< }
< 
< void
< Bug2470TestCase::RunSubtest (PointerValue apErrorModel, PointerValue staErrorModel)
< {
<   RngSeedManager::SetSeed (1);
<   RngSeedManager::SetRun (1);
<   int64_t streamNumber = 200;
< 
<   NodeContainer wifiApNode, wifiStaNode;
<   wifiApNode.Create (1);
<   wifiStaNode.Create (1);
< 
<   YansWifiPhyHelper phy = YansWifiPhyHelper::Default ();
<   YansWifiChannelHelper channel = YansWifiChannelHelper::Default ();
<   phy.SetChannel (channel.Create ());
< 
<   WifiHelper wifi;
<   wifi.SetStandard (WIFI_PHY_STANDARD_80211n_5GHZ);
<   wifi.SetRemoteStationManager ("ns3::ConstantRateWifiManager",
<                                 "DataMode", StringValue ("HtMcs7"),
<                                 "ControlMode", StringValue ("HtMcs7"));
< 
<   WifiMacHelper mac;
<   NetDeviceContainer apDevice;
<   phy.Set ("PostReceptionErrorModel", apErrorModel);
<   mac.SetType ("ns3::ApWifiMac", "EnableBeaconJitter", BooleanValue (false));
<   apDevice = wifi.Install (phy, mac, wifiApNode);
< 
<   NetDeviceContainer staDevice;
<   phy.Set ("PostReceptionErrorModel", staErrorModel);
<   mac.SetType ("ns3::StaWifiMac");
<   staDevice = wifi.Install (phy, mac, wifiStaNode);
< 
<   // Assign fixed streams to random variables in use
<   wifi.AssignStreams (apDevice, streamNumber);
<   wifi.AssignStreams (staDevice, streamNumber);
< 
<   MobilityHelper mobility;
<   Ptr<ListPositionAllocator> positionAlloc = CreateObject<ListPositionAllocator> ();
<   positionAlloc->Add (Vector (0.0, 0.0, 0.0));
<   positionAlloc->Add (Vector (1.0, 0.0, 0.0));
<   mobility.SetPositionAllocator (positionAlloc);
< 
<   mobility.SetMobilityModel ("ns3::ConstantPositionMobilityModel");
<   mobility.Install (wifiApNode);
<   mobility.Install (wifiStaNode);
< 
<   Config::Connect ("/NodeList/*/DeviceList/*/$ns3::WifiNetDevice/Phy/$ns3::WifiPhy/MonitorSnifferRx", MakeCallback (&Bug2470TestCase::RxCallback, this));
<   Config::Connect ("/NodeList/*/DeviceList/*/Phy/State/RxError", MakeCallback (&Bug2470TestCase::RxErrorCallback, this));
<   Config::Connect ("/NodeList/*/DeviceList/*/$ns3::WifiNetDevice/Mac/$ns3::RegularWifiMac/BE_Txop/BlockAckManager/AgreementState", MakeCallback (&Bug2470TestCase::AddbaStateChangedCallback, this));
< 
<   Simulator::Schedule (Seconds (0.5), &Bug2470TestCase::SendPacketBurst, this, 1, apDevice.Get (0), staDevice.Get (0)->GetAddress ());
<   Simulator::Schedule (Seconds (0.5) + MicroSeconds (5), &Bug2470TestCase::SendPacketBurst, this, 4, apDevice.Get (0), staDevice.Get (0)->GetAddress ());
<   Simulator::Schedule (Seconds (0.8), &Bug2470TestCase::SendPacketBurst, this, 1, apDevice.Get (0), staDevice.Get (0)->GetAddress ());
<   Simulator::Schedule (Seconds (0.8) + MicroSeconds (5), &Bug2470TestCase::SendPacketBurst, this, 4, apDevice.Get (0), staDevice.Get (0)->GetAddress ());
< 
<   Simulator::Stop (Seconds (1.0));
<   Simulator::Run ();
<   Simulator::Destroy ();
< }
< 
< void
< Bug2470TestCase::DoRun (void)
< {
<   // Create ReceiveListErrorModel to corrupt ADDBA req packet. We use ReceiveListErrorModel
<   // instead of ListErrorModel since packet UID is incremented between simulations. But
<   // problem may occur because of random stream, therefore we suppress usage of RNG as
<   // much as possible (i.e., removing beacon jitter).
<   Ptr<ReceiveListErrorModel> staPem = CreateObject<ReceiveListErrorModel> ();
<   std::list<uint32_t> blackList;
<   // Block ADDBA request 6 times (== maximum number of MAC frame transmissions in the ADDBA response timeout interval)
<   blackList.push_back (8);
<   blackList.push_back (9);
<   blackList.push_back (10);
<   blackList.push_back (11);
<   blackList.push_back (12);
<   blackList.push_back (13);
<   staPem->SetList (blackList);
< 
<   {
<     RunSubtest (PointerValue (), PointerValue (staPem));
<     NS_TEST_ASSERT_MSG_EQ (m_failedActionCount, 6, "ADDBA request packets are not failed");
<     // There are two sets of 5 packets to be transmitted. The first 5 packets should be sent by normal
<     // MPDU because of failed ADDBA handshake. For the second set, the first packet should be sent by
<     // normal MPDU, and the rest with A-MPDU. In total we expect to receive 2 normal MPDU packets and
<     // 8 A-MPDU packets.
<     NS_TEST_ASSERT_MSG_EQ (m_receivedNormalMpduCount, 2, "Receiving incorrect number of normal MPDU packet on subtest 1");
<     NS_TEST_ASSERT_MSG_EQ (m_receivedAmpduCount, 8, "Receiving incorrect number of A-MPDU packet on subtest 1");
< 
<     NS_TEST_ASSERT_MSG_EQ (m_addbaEstablishedCount, 1, "Incorrect number of times the ADDBA state machine was in established state on subtest 1");
<     NS_TEST_ASSERT_MSG_EQ (m_addbaPendingCount, 1, "Incorrect number of times the ADDBA state machine was in pending state on subtest 1");
<     NS_TEST_ASSERT_MSG_EQ (m_addbaRejectedCount, 0, "Incorrect number of times the ADDBA state machine was in rejected state on subtest 1");
<     NS_TEST_ASSERT_MSG_EQ (m_addbaNoReplyCount, 0, "Incorrect number of times the ADDBA state machine was in no_reply state on subtest 1");
<     NS_TEST_ASSERT_MSG_EQ (m_addbaResetCount, 0, "Incorrect number of times the ADDBA state machine was in reset state on subtest 1");
<   }
< 
<   m_receivedNormalMpduCount = 0;
<   m_receivedAmpduCount = 0;
<   m_failedActionCount = 0;
<   m_addbaEstablishedCount = 0;
<   m_addbaPendingCount = 0;
<   m_addbaRejectedCount = 0;
<   m_addbaNoReplyCount = 0;
<   m_addbaResetCount = 0;
< 
<   Ptr<ReceiveListErrorModel> apPem = CreateObject<ReceiveListErrorModel> ();
<   blackList.clear ();
<   // Block ADDBA request 3 times (== maximum number of MAC frame transmissions in the ADDBA response timeout interval)
<   blackList.push_back (4);
<   blackList.push_back (5);
<   blackList.push_back (6);
<   apPem->SetList (blackList);
< 
<   {
<     RunSubtest (PointerValue (apPem), PointerValue ());
<     NS_TEST_ASSERT_MSG_EQ (m_failedActionCount, 3, "ADDBA response packets are not failed");
<     // Similar to subtest 1, we also expect to receive 6 normal MPDU packets and 4 A-MPDU packets.
<     NS_TEST_ASSERT_MSG_EQ (m_receivedNormalMpduCount, 6, "Receiving incorrect number of normal MPDU packet on subtest 2");
<     NS_TEST_ASSERT_MSG_EQ (m_receivedAmpduCount, 4, "Receiving incorrect number of A-MPDU packet on subtest 2");
< 
<     NS_TEST_ASSERT_MSG_EQ (m_addbaEstablishedCount, 1, "Incorrect number of times the ADDBA state machine was in established state on subtest 2");
<     NS_TEST_ASSERT_MSG_EQ (m_addbaPendingCount, 1, "Incorrect number of times the ADDBA state machine was in pending state on subtest 2");
<     NS_TEST_ASSERT_MSG_EQ (m_addbaRejectedCount, 0, "Incorrect number of times the ADDBA state machine was in rejected state on subtest 2");
<     NS_TEST_ASSERT_MSG_EQ (m_addbaNoReplyCount, 1, "Incorrect number of times the ADDBA state machine was in no_reply state on subtest 2");
<     NS_TEST_ASSERT_MSG_EQ (m_addbaResetCount, 0, "Incorrect number of times the ADDBA state machine was in reset state on subtest 2");
<   }
< 
<   // TODO: In the second test set, it does not go to reset state since ADDBA response is received after timeout (NO_REPLY)
<   // but before it does not enter RESET state. More tests should be written to verify all possible scenarios.
< }
< 
< 
< //-----------------------------------------------------------------------------
< /**
<  * Make sure that Ideal rate manager recovers when the station is moving away from the access point.
<  *
<  * The scenario considers an access point and a moving station.
<  * Initially, the station is located at 1 meter from the access point.
<  * After 1s, the station moves away from the access for 0.5s to
<  * reach a point away of 50 meters from the access point.
<  * The tests checks the Ideal rate manager is reset once it has
<  * failed to transmit a data packet, so that the next data packets
<  * can be successfully transmitted using a lower modulation.
<  *
<  * See \issueid{40}
<  */
< 
< class Issue40TestCase : public TestCase
< {
< public:
<   Issue40TestCase ();
<   virtual ~Issue40TestCase ();
<   virtual void DoRun (void);
< 
< private:
<   /**
<    * Run one function
<    * \param useAmpdu flag to indicate whether the test should be run with A-MPDU
<    */
<   void RunOne (bool useAmpdu);
< 
<   /**
<    * Callback when packet is successfully received
<    * \param context node context
<    * \param p the received packet
<    */
<   void RxSuccessCallback (std::string context, Ptr<const Packet> p);
<   /**
<    * Triggers the arrival of 1000 Byte-long packets in the source device
<    * \param numPackets number of packets in burst
<    * \param sourceDevice pointer to the source NetDevice
<    * \param destination address of the destination device
<    */
<    void SendPackets (uint8_t numPackets, Ptr<NetDevice> sourceDevice, Address& destination);
<   /**
<    * Transmit final data failed function
<    * \param context the context
<    * \param adr the MAC address
<    */
<   void TxFinalDataFailedCallback (std::string context, Mac48Address address);
< 
<   uint16_t m_rxCount; ///< Count number of successfully received data packets
<   uint16_t m_txCount; ///< Count number of transmitted data packets
<   uint16_t m_txMacFinalDataFailedCount; ///< Count number of unsuccessfully transmitted data packets
< };
< 
< Issue40TestCase::Issue40TestCase ()
<   : TestCase ("Test case for issue #40"),
<     m_rxCount (0),
<     m_txCount (0),
<     m_txMacFinalDataFailedCount (0)
< {
< }
< 
< Issue40TestCase::~Issue40TestCase ()
< {
< }
< 
< void
< Issue40TestCase::RxSuccessCallback (std::string context, Ptr<const Packet> p)
< {
<   m_rxCount++;
< }
< 
< void
< Issue40TestCase::SendPackets (uint8_t numPackets, Ptr<NetDevice> sourceDevice, Address& destination)
< {
<   for (uint8_t i = 0; i < numPackets; i++)
<     {
<       Ptr<Packet> pkt = Create<Packet> (1000); // 1000 dummy bytes of data
<       sourceDevice->Send (pkt, destination, 0);
<       m_txCount++;
<     }
< }
< 
< void
< Issue40TestCase::TxFinalDataFailedCallback (std::string context, Mac48Address address)
< {
<   m_txMacFinalDataFailedCount++;
< }
< 
< void
< Issue40TestCase::RunOne (bool useAmpdu)
< {
<   m_rxCount = 0;
<   m_txCount = 0;
<   m_txMacFinalDataFailedCount = 0;
< 
<   RngSeedManager::SetSeed (1);
<   RngSeedManager::SetRun (1);
<   int64_t streamNumber = 100;
< 
<   NodeContainer wifiApNode, wifiStaNode;
<   wifiApNode.Create (1);
<   wifiStaNode.Create (1);
< 
<   YansWifiPhyHelper phy = YansWifiPhyHelper::Default ();
<   YansWifiChannelHelper channel = YansWifiChannelHelper::Default ();
<   phy.SetChannel (channel.Create ());
< 
<   WifiHelper wifi;
<   wifi.SetStandard (WIFI_PHY_STANDARD_80211ac);
<   wifi.SetRemoteStationManager ("ns3::IdealWifiManager");
< 
<   WifiMacHelper mac;
<   NetDeviceContainer apDevice;
<   mac.SetType ("ns3::ApWifiMac");
<   apDevice = wifi.Install (phy, mac, wifiApNode);
< 
<   NetDeviceContainer staDevice;
<   mac.SetType ("ns3::StaWifiMac");
<   staDevice = wifi.Install (phy, mac, wifiStaNode);
< 
<   // Assign fixed streams to random variables in use
<   wifi.AssignStreams (apDevice, streamNumber);
<   wifi.AssignStreams (staDevice, streamNumber);
< 
<   MobilityHelper mobility;
<   Ptr<ListPositionAllocator> positionAlloc = CreateObject<ListPositionAllocator> ();
<   positionAlloc->Add (Vector (0.0, 0.0, 0.0));
<   positionAlloc->Add (Vector (10.0, 0.0, 0.0));
<   mobility.SetPositionAllocator (positionAlloc);
< 
<   mobility.SetMobilityModel ("ns3::ConstantPositionMobilityModel");
<   mobility.Install (wifiApNode);
< 
<   mobility.SetMobilityModel("ns3::WaypointMobilityModel");
<   mobility.Install (wifiStaNode);
< 
<   Config::Connect ("/NodeList/*/DeviceList/*/RemoteStationManager/MacTxFinalDataFailed", MakeCallback (&Issue40TestCase::TxFinalDataFailedCallback, this));
<   Config::Connect ("/NodeList/*/DeviceList/*/$ns3::WifiNetDevice/Mac/$ns3::WifiMac/MacRx", MakeCallback (&Issue40TestCase::RxSuccessCallback, this));
<               
<   Ptr<WaypointMobilityModel> staWaypointMobility = DynamicCast<WaypointMobilityModel>(wifiStaNode.Get(0)->GetObject<MobilityModel>());
<   staWaypointMobility->AddWaypoint (Waypoint (Seconds(1.0), Vector (10.0, 0.0, 0.0)));
<   staWaypointMobility->AddWaypoint (Waypoint (Seconds(1.5), Vector (50.0, 0.0, 0.0)));
< 
<   if (useAmpdu)
<     {
<       // Disable use of BAR that are sent with the lowest modulation so that we can also reproduce the problem with A-MPDU, i.e. the lack of feedback about SNR change
<       Ptr<WifiNetDevice> ap_device = DynamicCast<WifiNetDevice> (apDevice.Get (0));
<       Ptr<RegularWifiMac> ap_mac = DynamicCast<RegularWifiMac> (ap_device->GetMac ());
<       NS_ASSERT (ap_mac);
<       PointerValue ptr;
<       ap_mac->GetAttribute ("BE_Txop", ptr);
<       ptr.Get<QosTxop> ()->SetAttribute ("UseExplicitBarAfterMissedBlockAck", BooleanValue (false));
<   }
< 
<   // Transmit a first data packet before the station moves: it should be sent with a high modulation and successfully received
<   Simulator::Schedule (Seconds (0.5), &Issue40TestCase::SendPackets, this, useAmpdu ? 2 : 1, apDevice.Get (0), staDevice.Get (0)->GetAddress ());
< 
<   // Transmit a second data packet once the station is away from the access point: it should be sent with the same high modulation and be unsuccessfully received
<   Simulator::Schedule (Seconds (2.0), &Issue40TestCase::SendPackets, this, useAmpdu ? 2 : 1, apDevice.Get (0), staDevice.Get (0)->GetAddress ());
< 
<   // Keep on transmitting data packets while the station is away from the access point: it should be sent with a lower modulation and be successfully received
<   Simulator::Schedule (Seconds (2.1), &Issue40TestCase::SendPackets, this, useAmpdu ? 2 : 1, apDevice.Get (0), staDevice.Get (0)->GetAddress ());
<   Simulator::Schedule (Seconds (2.2), &Issue40TestCase::SendPackets, this, useAmpdu ? 2 : 1, apDevice.Get (0), staDevice.Get (0)->GetAddress ());
<   Simulator::Schedule (Seconds (2.3), &Issue40TestCase::SendPackets, this, useAmpdu ? 2 : 1, apDevice.Get (0), staDevice.Get (0)->GetAddress ());
<   Simulator::Schedule (Seconds (2.4), &Issue40TestCase::SendPackets, this, useAmpdu ? 2 : 1, apDevice.Get (0), staDevice.Get (0)->GetAddress ());
<   Simulator::Schedule (Seconds (2.5), &Issue40TestCase::SendPackets, this, useAmpdu ? 2 : 1, apDevice.Get (0), staDevice.Get (0)->GetAddress ());
< 
<   Simulator::Stop (Seconds (3.0));
<   Simulator::Run ();
< 
<   NS_TEST_ASSERT_MSG_EQ (m_txCount, (useAmpdu ? 14 : 7), "Incorrect number of transmitted packets");
<   NS_TEST_ASSERT_MSG_EQ (m_rxCount, (useAmpdu ? 12 : 6), "Incorrect number of successfully received packets");
<   NS_TEST_ASSERT_MSG_EQ (m_txMacFinalDataFailedCount, 1, "Incorrect number of dropped TX packets");
< 
<   Simulator::Destroy ();
< }
< 
< void
< Issue40TestCase::DoRun (void)
< {
<   //Test without A-MPDU
<   RunOne (false);
< 
<   //Test with A-MPDU
<   RunOne (true);
< }
< 
< //-----------------------------------------------------------------------------
< /**
<  * Make sure that Ideal rate manager is able to handle non best-effort traffic.
<  *
<  * The scenario considers an access point and a fixed station.
<  * The station first sends a best-effort packet to the access point,
<  * for which Ideal rate manager should select a VHT rate. Then,
<  * the station sends a non best-effort (voice) packet to the access point,
<  * and since SNR is unchanged, the same VHT rate should be used.
<  *
<  * See \issueid{169}
<  */
< 
< class Issue169TestCase : public TestCase
< {
< public:
<   Issue169TestCase ();
<   virtual ~Issue169TestCase ();
<   virtual void DoRun (void);
< 
< private:
<   /**
<    * Triggers the transmission of a 1000 Byte-long data packet from the source device
<    * \param numPackets number of packets in burst
<    * \param sourceDevice pointer to the source NetDevice
<    * \param destination address of the destination device
<    * \param priority the priority of the packets to send
<    */
<    void SendPackets (uint8_t numPackets, Ptr<NetDevice> sourceDevice, Address& destination, uint8_t priority);
< 
<   /**
<    * Callback that indicates a PSDU is being transmitted
<    * \param context the context
<    * \param psdu the PSDU to transmit
<    * \param txVector the TX vector
<    * \param txPowerW the TX power (W)
<    */
<   void TxCallback (std::string context, Ptr<const WifiPsdu> psdu, WifiTxVector txVector, double txPowerW);
< };
< 
< Issue169TestCase::Issue169TestCase ()
<   : TestCase ("Test case for issue #169")
< {
< }
< 
< Issue169TestCase::~Issue169TestCase ()
< {
< }
< 
< void
< Issue169TestCase::SendPackets (uint8_t numPackets, Ptr<NetDevice> sourceDevice, Address& destination, uint8_t priority)
< {
<   SocketPriorityTag priorityTag;
<   priorityTag.SetPriority (priority);
<   for (uint8_t i = 0; i < numPackets; i++)
<     {
<       Ptr<Packet> packet = Create<Packet> (1000); // 1000 dummy bytes of data
<       packet->AddPacketTag (priorityTag);
<       sourceDevice->Send (packet, destination, 0);
<     }
< }
< 
< void
< Issue169TestCase::TxCallback (std::string context, Ptr<const WifiPsdu> psdu, WifiTxVector txVector, double txPowerW)
< {
<   if (psdu->GetSize () >= 1000)
<     {
<       NS_TEST_ASSERT_MSG_EQ (txVector.GetMode ().GetModulationClass (), WifiModulationClass::WIFI_MOD_CLASS_VHT, "Ideal rate manager selected incorrect modulation class");
<     }
< }
< 
< void
< Issue169TestCase::DoRun (void)
< {
<   RngSeedManager::SetSeed (1);
<   RngSeedManager::SetRun (1);
<   int64_t streamNumber = 100;
< 
<   NodeContainer wifiApNode, wifiStaNode;
<   wifiApNode.Create (1);
<   wifiStaNode.Create (1);
< 
<   YansWifiPhyHelper phy = YansWifiPhyHelper::Default ();
<   YansWifiChannelHelper channel = YansWifiChannelHelper::Default ();
<   phy.SetChannel (channel.Create ());
< 
<   WifiHelper wifi;
<   wifi.SetStandard (WIFI_PHY_STANDARD_80211ac);
<   wifi.SetRemoteStationManager ("ns3::IdealWifiManager");
< 
<   WifiMacHelper mac;
<   NetDeviceContainer apDevice;
<   mac.SetType ("ns3::ApWifiMac");
<   apDevice = wifi.Install (phy, mac, wifiApNode);
< 
<   NetDeviceContainer staDevice;
<   mac.SetType ("ns3::StaWifiMac");
<   staDevice = wifi.Install (phy, mac, wifiStaNode);
< 
<   // Assign fixed streams to random variables in use
<   wifi.AssignStreams (apDevice, streamNumber);
<   wifi.AssignStreams (staDevice, streamNumber);
< 
<   MobilityHelper mobility;
<   Ptr<ListPositionAllocator> positionAlloc = CreateObject<ListPositionAllocator> ();
<   positionAlloc->Add (Vector (0.0, 0.0, 0.0));
<   positionAlloc->Add (Vector (1.0, 0.0, 0.0));
<   mobility.SetPositionAllocator (positionAlloc);
< 
<   mobility.SetMobilityModel ("ns3::ConstantPositionMobilityModel");
<   mobility.Install (wifiApNode);
<   mobility.Install (wifiStaNode);
< 
<   Config::Connect ("/NodeList/*/DeviceList/*/$ns3::WifiNetDevice/Phy/$ns3::WifiPhy/PhyTxPsduBegin", MakeCallback (&Issue169TestCase::TxCallback, this));
< 
<   //Send best-effort packet (i.e. priority 0)
<   Simulator::Schedule (Seconds (0.5), &Issue169TestCase::SendPackets, this, 1, apDevice.Get (0), staDevice.Get (0)->GetAddress (), 0);
< 
<   //Send non best-effort (voice) packet (i.e. priority 6)
<   Simulator::Schedule (Seconds (1.0), &Issue169TestCase::SendPackets, this, 1, apDevice.Get (0), staDevice.Get (0)->GetAddress (), 6);
< 
2483d1087
< 
2485,2549d1088
< }
< 
< 
< //-----------------------------------------------------------------------------
< /**
<  * Make sure that Ideal rate manager properly selects MCS based on the configured channel width.
<  *
<  * The scenario considers an access point and a fixed station.
<  * The access point first sends a 80 MHz PPDU to the station,
<  * for which Ideal rate manager should select VH-MCS 0 based
<  * on the distance (no interference generatd in this test). Then,
<  * the access point sends a 20 MHz PPDU to the station,
<  * which corresponds to a SNR 6 dB higher than previously, hence
<  * VHT-MCS 2 should be selected. Finally, the access point sends a
<  * 40 MHz PPDU to the station, which means corresponds to a SNR 3 dB
<  * lower than previously, hence VHT-MCS 1 should be selected.
<  */
< 
< class IdealRateManagerChannelWidthTest : public TestCase
< {
< public:
<   IdealRateManagerChannelWidthTest ();
<   virtual ~IdealRateManagerChannelWidthTest ();
<   virtual void DoRun (void);
< 
< private:
<   /**
<    * Change the configured channel width for all nodes
<    * \param channelWidth the channel width (in MHz)
<    */
<   void ChangeChannelWidth (uint16_t channelWidth);
< 
<   /**
<    * Triggers the transmission of a 1000 Byte-long data packet from the source device
<    * \param sourceDevice pointer to the source NetDevice
<    * \param destination address of the destination device
<    */
<    void SendPacket (Ptr<NetDevice> sourceDevice, Address& destination);
< 
<   /**
<    * Callback that indicates a PSDU is being transmitted
<    * \param context the context
<    * \param psdu the PSDU to transmit
<    * \param txVector the TX vector
<    * \param txPowerW the TX power (W)
<    */
<   void TxCallback (std::string context, Ptr<const WifiPsdu> psdu, WifiTxVector txVector, double txPowerW);
< 
<   /**
<    * Check if the selected WifiMode is correct
<    * \param expectedMode the expected WifiMode
<    */
<   void CheckLastSelectedMode (WifiMode expectedMode);
< 
<   WifiMode m_txMode; ///< Store the last selected mode to send data packet
< };
< 
< IdealRateManagerChannelWidthTest::IdealRateManagerChannelWidthTest ()
<   : TestCase ("Test case for use of channel bonding with Ideal rate manager")
< {
< }
< 
< IdealRateManagerChannelWidthTest::~IdealRateManagerChannelWidthTest ()
< {
< }
2551,2644c1090
< void
< IdealRateManagerChannelWidthTest::ChangeChannelWidth (uint16_t channelWidth)
< {
<   Config::Set ("/NodeList/*/DeviceList/*/$ns3::WifiNetDevice/Phy/ChannelWidth", UintegerValue (channelWidth));
< }
< 
< void
< IdealRateManagerChannelWidthTest::SendPacket (Ptr<NetDevice> sourceDevice, Address& destination)
< {
<   Ptr<Packet> packet = Create<Packet> (1000);
<   sourceDevice->Send (packet, destination, 0);
< }
< 
< void
< IdealRateManagerChannelWidthTest::TxCallback (std::string context, Ptr<const WifiPsdu> psdu, WifiTxVector txVector, double txPowerW)
< {
<   if (psdu->GetSize () >= 1000)
<     {
<       m_txMode = txVector.GetMode ();
<     }
< }
< 
< void
< IdealRateManagerChannelWidthTest::CheckLastSelectedMode (WifiMode expectedMode)
< {
<   NS_TEST_ASSERT_MSG_EQ (m_txMode, expectedMode, "Last selected WifiMode " << m_txMode << " does not match expected WifiMode " << expectedMode);
< }
< 
< void
< IdealRateManagerChannelWidthTest::DoRun (void)
< {
<   RngSeedManager::SetSeed (1);
<   RngSeedManager::SetRun (1);
<   int64_t streamNumber = 100;
< 
<   NodeContainer wifiApNode, wifiStaNode;
<   wifiApNode.Create (1);
<   wifiStaNode.Create (1);
< 
<   YansWifiPhyHelper phy = YansWifiPhyHelper::Default ();
<   YansWifiChannelHelper channel = YansWifiChannelHelper::Default ();
<   phy.SetChannel (channel.Create ());
< 
<   WifiHelper wifi;
<   wifi.SetStandard (WIFI_PHY_STANDARD_80211ac);
<   wifi.SetRemoteStationManager ("ns3::IdealWifiManager");
< 
<   WifiMacHelper mac;
<   NetDeviceContainer apDevice;
<   mac.SetType ("ns3::ApWifiMac");
<   apDevice = wifi.Install (phy, mac, wifiApNode);
< 
<   NetDeviceContainer staDevice;
<   mac.SetType ("ns3::StaWifiMac");
<   staDevice = wifi.Install (phy, mac, wifiStaNode);
< 
<   // Assign fixed streams to random variables in use
<   wifi.AssignStreams (apDevice, streamNumber);
<   wifi.AssignStreams (staDevice, streamNumber);
< 
<   MobilityHelper mobility;
<   Ptr<ListPositionAllocator> positionAlloc = CreateObject<ListPositionAllocator> ();
<   positionAlloc->Add (Vector (0.0, 0.0, 0.0));
<   positionAlloc->Add (Vector (50.0, 0.0, 0.0));
<   mobility.SetPositionAllocator (positionAlloc);
< 
<   mobility.SetMobilityModel ("ns3::ConstantPositionMobilityModel");
<   mobility.Install (wifiApNode);
<   mobility.Install (wifiStaNode);
< 
<   Config::Connect ("/NodeList/*/DeviceList/*/$ns3::WifiNetDevice/Phy/$ns3::WifiPhy/PhyTxPsduBegin", MakeCallback (&IdealRateManagerChannelWidthTest::TxCallback, this));
< 
<   //Set channel width to 80 MHz & send packet
<   Simulator::Schedule (Seconds (0.5), &IdealRateManagerChannelWidthTest::ChangeChannelWidth, this, 80);
<   Simulator::Schedule (Seconds (1.0), &IdealRateManagerChannelWidthTest::SendPacket, this, apDevice.Get (0), staDevice.Get (0)->GetAddress ());
<   //Selected rate should be VHT-MCS 0
<   Simulator::Schedule (Seconds (1.1), &IdealRateManagerChannelWidthTest::CheckLastSelectedMode, this, WifiPhy::GetVhtMcs0 ());
< 
<   //Set channel width to 20 MHz & send packet
<   Simulator::Schedule (Seconds (1.5), &IdealRateManagerChannelWidthTest::ChangeChannelWidth, this, 20);
<   Simulator::Schedule (Seconds (2.0), &IdealRateManagerChannelWidthTest::SendPacket, this, apDevice.Get (0), staDevice.Get (0)->GetAddress ());
<   //Selected rate should be VHT-MCS 2 since SNR should be 6 dB higher than previously
<   Simulator::Schedule (Seconds (2.1), &IdealRateManagerChannelWidthTest::CheckLastSelectedMode, this, WifiPhy::GetVhtMcs2 ());
< 
<   //Set channel width to 40 MHz & send packet
<   Simulator::Schedule (Seconds (2.5), &IdealRateManagerChannelWidthTest::ChangeChannelWidth, this, 40);
<   Simulator::Schedule (Seconds (3.0), &IdealRateManagerChannelWidthTest::SendPacket, this, apDevice.Get (0), staDevice.Get (0)->GetAddress ());
<   //Selected rate should be VHT-MCS 1 since SNR should be 3 dB lower than previously
<   Simulator::Schedule (Seconds (3.1), &IdealRateManagerChannelWidthTest::CheckLastSelectedMode, this, WifiPhy::GetVhtMcs1 ());
< 
<   Simulator::Stop (Seconds (3.2));
<   Simulator::Run ();
< 
<   Simulator::Destroy ();
---
>   NS_TEST_ASSERT_MSG_EQ (m_countInternalCollisions, 1, "unexpected number of internal collisions!");
2647d1092
< 
2649,2757d1093
< /**
<  * Test to validate that Ideal rate manager properly selects TXVECTOR in scenarios where MIMO is used.
<  * The test consider both balanced and unbalanced MIMO settings, and verify ideal picks the correct number
<  * of spatial streams and the correct MCS, taking into account potential diversity in AWGN channels when the
<  * number of antenna at the receiver is higher than the number of spatial streams used for the transmission.
<  */
< 
< class IdealRateManagerMimoTest : public TestCase
< {
< public:
<   IdealRateManagerMimoTest ();
<   virtual ~IdealRateManagerMimoTest ();
<   virtual void DoRun (void);
< 
< private:
<   /**
<    * Change the configured MIMO  settings  for AP node
<    * \param antennas the number of active antennas
<    * \param maxStreams the maximum number of allowed spatial streams
<    */
<   void SetApMimoSettings (uint8_t antennas, uint8_t maxStreams);
<   /**
<    * Change the configured MIMO  settings  for STA node
<    * \param antennas the number of active antennas
<    * \param maxStreams the maximum number of allowed spatial streams
<    */
<   void SetStaMimoSettings (uint8_t antennas, uint8_t maxStreams);
<   /**
<    * Triggers the transmission of a 1000 Byte-long data packet from the source device
<    * \param sourceDevice pointer to the source NetDevice
<    * \param destination address of the destination device
<    */
<    void SendPacket (Ptr<NetDevice> sourceDevice, Address& destination);
< 
<   /**
<    * Callback that indicates a PSDU is being transmitted
<    * \param context the context
<    * \param psdu the PSDU to transmit
<    * \param txVector the TX vector
<    * \param txPowerW the TX power (W)
<    */
<   void TxCallback (std::string context, Ptr<const WifiPsdu> psdu, WifiTxVector txVector, double txPowerW);
< 
<   /**
<    * Check if the selected WifiMode is correct
<    * \param expectedMode the expected WifiMode
<    */
<   void CheckLastSelectedMode (WifiMode expectedMode);
<   /**
<    * Check if the selected Nss is correct
<    * \param expectedNss the expected Nss
<    */
<   void CheckLastSelectedNss (uint8_t expectedNss);
< 
<   WifiTxVector m_txVector; ///< Store the last TXVECTOR used to transmit Data
< };
< 
< IdealRateManagerMimoTest::IdealRateManagerMimoTest ()
<   : TestCase ("Test case for use of imbalanced MIMO settings with Ideal rate manager")
< {
< }
< 
< IdealRateManagerMimoTest::~IdealRateManagerMimoTest ()
< {
< }
< 
< void
< IdealRateManagerMimoTest::SetApMimoSettings (uint8_t antennas, uint8_t maxStreams)
< {
<   Config::Set ("/NodeList/0/DeviceList/*/$ns3::WifiNetDevice/Phy/Antennas", UintegerValue (antennas));
<   Config::Set ("/NodeList/0/DeviceList/*/$ns3::WifiNetDevice/Phy/MaxSupportedTxSpatialStreams", UintegerValue (maxStreams));
<   Config::Set ("/NodeList/0/DeviceList/*/$ns3::WifiNetDevice/Phy/MaxSupportedRxSpatialStreams", UintegerValue (maxStreams));
< }
< 
< void
< IdealRateManagerMimoTest::SetStaMimoSettings (uint8_t antennas, uint8_t maxStreams)
< {
<   Config::Set ("/NodeList/1/DeviceList/*/$ns3::WifiNetDevice/Phy/Antennas", UintegerValue (antennas));
<   Config::Set ("/NodeList/1/DeviceList/*/$ns3::WifiNetDevice/Phy/MaxSupportedTxSpatialStreams", UintegerValue (maxStreams));
<   Config::Set ("/NodeList/1/DeviceList/*/$ns3::WifiNetDevice/Phy/MaxSupportedRxSpatialStreams", UintegerValue (maxStreams));
< }
< 
< void
< IdealRateManagerMimoTest::SendPacket (Ptr<NetDevice> sourceDevice, Address& destination)
< {
<   Ptr<Packet> packet = Create<Packet> (1000);
<   sourceDevice->Send (packet, destination, 0);
< }
< 
< void
< IdealRateManagerMimoTest::TxCallback (std::string context, Ptr<const WifiPsdu> psdu, WifiTxVector txVector, double txPowerW)
< {
<   if (psdu->GetSize () >= 1000)
<     {
<       m_txVector = txVector;
<     }
< }
< 
< void
< IdealRateManagerMimoTest::CheckLastSelectedNss (uint8_t expectedNss)
< {
<   NS_TEST_ASSERT_MSG_EQ (m_txVector.GetNss (), expectedNss, "Last selected Nss " << m_txVector.GetNss () << " does not match expected Nss " << expectedNss);
< }
< 
< void
< IdealRateManagerMimoTest::CheckLastSelectedMode (WifiMode expectedMode)
< {
<   NS_TEST_ASSERT_MSG_EQ (m_txVector.GetMode (), expectedMode, "Last selected WifiMode " << m_txVector.GetMode () << " does not match expected WifiMode " << expectedMode);
< }
2759,2938d1094
< void
< IdealRateManagerMimoTest::DoRun (void)
< {
<   RngSeedManager::SetSeed (1);
<   RngSeedManager::SetRun (1);
<   int64_t streamNumber = 100;
< 
<   NodeContainer wifiApNode, wifiStaNode;
<   wifiApNode.Create (1);
<   wifiStaNode.Create (1);
< 
<   YansWifiPhyHelper phy = YansWifiPhyHelper::Default ();
<   YansWifiChannelHelper channel = YansWifiChannelHelper::Default ();
<   phy.SetChannel (channel.Create ());
< 
<   WifiHelper wifi;
<   wifi.SetStandard (WIFI_PHY_STANDARD_80211ac);
<   wifi.SetRemoteStationManager ("ns3::IdealWifiManager");
< 
<   WifiMacHelper mac;
<   NetDeviceContainer apDevice;
<   mac.SetType ("ns3::ApWifiMac");
<   apDevice = wifi.Install (phy, mac, wifiApNode);
< 
<   NetDeviceContainer staDevice;
<   mac.SetType ("ns3::StaWifiMac");
<   staDevice = wifi.Install (phy, mac, wifiStaNode);
< 
<   // Assign fixed streams to random variables in use
<   wifi.AssignStreams (apDevice, streamNumber);
<   wifi.AssignStreams (staDevice, streamNumber);
< 
<   MobilityHelper mobility;
<   Ptr<ListPositionAllocator> positionAlloc = CreateObject<ListPositionAllocator> ();
<   positionAlloc->Add (Vector (0.0, 0.0, 0.0));
<   positionAlloc->Add (Vector (40.0, 0.0, 0.0));
<   mobility.SetPositionAllocator (positionAlloc);
< 
<   mobility.SetMobilityModel ("ns3::ConstantPositionMobilityModel");
<   mobility.Install (wifiApNode);
<   mobility.Install (wifiStaNode);
< 
<   Config::Connect ("/NodeList/*/DeviceList/*/$ns3::WifiNetDevice/Phy/$ns3::WifiPhy/PhyTxPsduBegin", MakeCallback (&IdealRateManagerMimoTest::TxCallback, this));
< 
< 
<   // TX: 1 antenna
<   Simulator::Schedule (Seconds (0.9), &IdealRateManagerMimoTest::SetApMimoSettings, this, 1, 1);
<   // RX: 1 antenna
<   Simulator::Schedule (Seconds (0.9), &IdealRateManagerMimoTest::SetStaMimoSettings, this, 1, 1);
<   // Send packets (2 times to get one feedback)
<   Simulator::Schedule (Seconds (1.0), &IdealRateManagerMimoTest::SendPacket, this, apDevice.Get (0), staDevice.Get (0)->GetAddress ());
<   Simulator::Schedule (Seconds (1.1), &IdealRateManagerMimoTest::SendPacket, this, apDevice.Get (0), staDevice.Get (0)->GetAddress ());
<   // Selected NSS should be 1 since both TX and RX support a single antenna
<   Simulator::Schedule (Seconds (1.2), &IdealRateManagerMimoTest::CheckLastSelectedNss, this, 1);
<   // Selected rate should be VHT-MCS1 because of settings and distance between TX and RX
<   Simulator::Schedule (Seconds (1.2), &IdealRateManagerMimoTest::CheckLastSelectedMode, this, WifiPhy::GetVhtMcs1 ());
< 
< 
<   // TX: 1 antenna
<   Simulator::Schedule (Seconds (1.9), &IdealRateManagerMimoTest::SetApMimoSettings, this, 1, 1);
<   // RX: 2 antennas, but only supports 1 spatial stream
<   Simulator::Schedule (Seconds (1.9), &IdealRateManagerMimoTest::SetStaMimoSettings, this, 2, 1);
<   // Send packets (2 times to get one feedback)
<   Simulator::Schedule (Seconds (2.0), &IdealRateManagerMimoTest::SendPacket, this, apDevice.Get (0), staDevice.Get (0)->GetAddress ());
<   Simulator::Schedule (Seconds (2.1), &IdealRateManagerMimoTest::SendPacket, this, apDevice.Get (0), staDevice.Get (0)->GetAddress ());
<   // Selected NSS should be 1 since both TX and RX support a single antenna
<   Simulator::Schedule (Seconds (2.2), &IdealRateManagerMimoTest::CheckLastSelectedNss, this, 1);
<   // Selected rate should be increased to VHT-MCS2 because of RX diversity resulting in SNR improvement of about 3dB
<   Simulator::Schedule (Seconds (2.2), &IdealRateManagerMimoTest::CheckLastSelectedMode, this, WifiPhy::GetVhtMcs2 ());
< 
< 
<   // TX: 1 antenna
<   Simulator::Schedule (Seconds (2.9), &IdealRateManagerMimoTest::SetApMimoSettings, this, 1, 1);
<   // RX: 2 antennas, and supports 2 spatial streams
<   Simulator::Schedule (Seconds (2.9), &IdealRateManagerMimoTest::SetStaMimoSettings, this, 2, 2);
<   // Send packets (2 times to get one feedback)
<   Simulator::Schedule (Seconds (3.0), &IdealRateManagerMimoTest::SendPacket, this, apDevice.Get (0), staDevice.Get (0)->GetAddress ());
<   Simulator::Schedule (Seconds (3.1), &IdealRateManagerMimoTest::SendPacket, this, apDevice.Get (0), staDevice.Get (0)->GetAddress ());
<   // Selected NSS should be 1 since TX supports a single antenna
<   Simulator::Schedule (Seconds (3.2), &IdealRateManagerMimoTest::CheckLastSelectedNss, this, 1);
<   // Selected rate should be as previously
<   Simulator::Schedule (Seconds (3.2), &IdealRateManagerMimoTest::CheckLastSelectedMode, this, WifiPhy::GetVhtMcs2 ());
< 
< 
<   // TX: 2 antennas, but only supports 1 spatial stream
<   Simulator::Schedule (Seconds (3.9), &IdealRateManagerMimoTest::SetApMimoSettings, this, 2, 1);
<   // RX: 1 antenna
<   Simulator::Schedule (Seconds (3.9), &IdealRateManagerMimoTest::SetStaMimoSettings, this, 1, 1);
<   // Send packets (2 times to get one feedback)
<   Simulator::Schedule (Seconds (4.0), &IdealRateManagerMimoTest::SendPacket, this, apDevice.Get (0), staDevice.Get (0)->GetAddress ());
<   Simulator::Schedule (Seconds (4.1), &IdealRateManagerMimoTest::SendPacket, this, apDevice.Get (0), staDevice.Get (0)->GetAddress ());
<   // Selected NSS should be 1 since both TX and RX support a single antenna
<   Simulator::Schedule (Seconds (4.2), &IdealRateManagerMimoTest::CheckLastSelectedNss, this, 1);
<   // Selected rate should be VHT-MCS1 because we do no longer have diversity in this scenario (more antennas at TX does not result in SNR improvement in AWGN channel)
<   Simulator::Schedule (Seconds (4.2), &IdealRateManagerMimoTest::CheckLastSelectedMode, this, WifiPhy::GetVhtMcs1 ());
< 
< 
<   // TX: 2 antennas, but only supports 1 spatial stream
<   Simulator::Schedule (Seconds (4.9), &IdealRateManagerMimoTest::SetApMimoSettings, this, 2, 1);
<   // RX: 2 antennas, but only supports 1 spatial stream
<   Simulator::Schedule (Seconds (4.9), &IdealRateManagerMimoTest::SetStaMimoSettings, this, 2, 1);
<   // Send packets (2 times to get one feedback)
<   Simulator::Schedule (Seconds (5.0), &IdealRateManagerMimoTest::SendPacket, this, apDevice.Get (0), staDevice.Get (0)->GetAddress ());
<   Simulator::Schedule (Seconds (5.1), &IdealRateManagerMimoTest::SendPacket, this, apDevice.Get (0), staDevice.Get (0)->GetAddress ());
<   // Selected NSS should be 1 since both TX and RX support a single antenna
<   Simulator::Schedule (Seconds (5.2), &IdealRateManagerMimoTest::CheckLastSelectedNss, this, 1);
<   // Selected rate should be increased to VHT-MCS2 because of RX diversity resulting in SNR improvement of about 3dB (more antennas at TX does not result in SNR improvement in AWGN channel)
<   Simulator::Schedule (Seconds (5.2), &IdealRateManagerMimoTest::CheckLastSelectedMode, this, WifiPhy::GetVhtMcs2 ());
< 
< 
<   // TX: 2 antennas, but only supports 1 spatial stream
<   Simulator::Schedule (Seconds (5.9), &IdealRateManagerMimoTest::SetApMimoSettings, this, 2, 1);
<   // RX: 2 antennas, and supports 2 spatial streams
<   Simulator::Schedule (Seconds (5.9), &IdealRateManagerMimoTest::SetStaMimoSettings, this, 2, 2);
<   // Send packets (2 times to get one feedback)
<   Simulator::Schedule (Seconds (6.0), &IdealRateManagerMimoTest::SendPacket, this, apDevice.Get (0), staDevice.Get (0)->GetAddress ());
<   Simulator::Schedule (Seconds (6.1), &IdealRateManagerMimoTest::SendPacket, this, apDevice.Get (0), staDevice.Get (0)->GetAddress ());
<   // Selected NSS should be 1 since TX supports a single antenna
<   Simulator::Schedule (Seconds (6.2), &IdealRateManagerMimoTest::CheckLastSelectedNss, this, 1);
<   // Selected rate should be as previously
<   Simulator::Schedule (Seconds (6.2), &IdealRateManagerMimoTest::CheckLastSelectedMode, this, WifiPhy::GetVhtMcs2 ());
< 
< 
<   // TX: 2 antennas, and supports 2 spatial streams
<   Simulator::Schedule (Seconds (6.9), &IdealRateManagerMimoTest::SetApMimoSettings, this, 2, 2);
<   // RX: 1 antenna
<   Simulator::Schedule (Seconds (6.9), &IdealRateManagerMimoTest::SetStaMimoSettings, this, 1, 1);
<   // Send packets (2 times to get one feedback)
<   Simulator::Schedule (Seconds (7.0), &IdealRateManagerMimoTest::SendPacket, this, apDevice.Get (0), staDevice.Get (0)->GetAddress ());
<   Simulator::Schedule (Seconds (7.1), &IdealRateManagerMimoTest::SendPacket, this, apDevice.Get (0), staDevice.Get (0)->GetAddress ());
<   // Selected NSS should be 1 since RX supports a single antenna
<   Simulator::Schedule (Seconds (7.2), &IdealRateManagerMimoTest::CheckLastSelectedNss, this, 1);
<   // Selected rate should be VHT-MCS1 because we do no longer have diversity in this scenario (more antennas at TX does not result in SNR improvement in AWGN channel)
<   Simulator::Schedule (Seconds (7.2), &IdealRateManagerMimoTest::CheckLastSelectedMode, this, WifiPhy::GetVhtMcs1 ());
< 
< 
<   // TX: 2 antennas, and supports 2 spatial streams
<   Simulator::Schedule (Seconds (7.9), &IdealRateManagerMimoTest::SetApMimoSettings, this, 2, 2);
<   // RX: 2 antennas, but only supports 1 spatial stream
<   Simulator::Schedule (Seconds (7.9), &IdealRateManagerMimoTest::SetStaMimoSettings, this, 2, 1);
<   // Send packets (2 times to get one feedback)
<   Simulator::Schedule (Seconds (8.0), &IdealRateManagerMimoTest::SendPacket, this, apDevice.Get (0), staDevice.Get (0)->GetAddress ());
<   Simulator::Schedule (Seconds (8.1), &IdealRateManagerMimoTest::SendPacket, this, apDevice.Get (0), staDevice.Get (0)->GetAddress ());
<   // Selected NSS should be 1 since RX supports a single antenna
<   Simulator::Schedule (Seconds (8.2), &IdealRateManagerMimoTest::CheckLastSelectedNss, this, 1);
<   // Selected rate should be increased to VHT-MCS2 because of RX diversity resulting in SNR improvement of about 3dB (more antennas at TX does not result in SNR improvement in AWGN channel)
<   Simulator::Schedule (Seconds (8.2), &IdealRateManagerMimoTest::CheckLastSelectedMode, this, WifiPhy::GetVhtMcs2 ());
< 
< 
<   // TX: 2 antennas, and supports 2 spatial streams
<   Simulator::Schedule (Seconds (8.9), &IdealRateManagerMimoTest::SetApMimoSettings, this, 2, 2);
<   // RX: 2 antennas, and supports 2 spatial streams
<   Simulator::Schedule (Seconds (8.9), &IdealRateManagerMimoTest::SetStaMimoSettings, this, 2, 2);
<   // Send packets (2 times to get one feedback)
<   Simulator::Schedule (Seconds (9.0), &IdealRateManagerMimoTest::SendPacket, this, apDevice.Get (0), staDevice.Get (0)->GetAddress ());
<   Simulator::Schedule (Seconds (9.1), &IdealRateManagerMimoTest::SendPacket, this, apDevice.Get (0), staDevice.Get (0)->GetAddress ());
<   // Selected NSS should be 2 since both TX and RX support 2 antennas
<   Simulator::Schedule (Seconds (9.2), &IdealRateManagerMimoTest::CheckLastSelectedNss, this, 2);
<   // Selecte rate should be the same as without diversity, as it uses 2 spatial streams so there is no more benefits from diversity in AWGN channels
<   Simulator::Schedule (Seconds (9.2), &IdealRateManagerMimoTest::CheckLastSelectedMode, this, WifiPhy::GetVhtMcs1 ());
< 
< 
<   // Verify we can go back to initial situation
<   Simulator::Schedule (Seconds (9.9), &IdealRateManagerMimoTest::SetApMimoSettings, this, 1, 1);
<   Simulator::Schedule (Seconds (9.9), &IdealRateManagerMimoTest::SetStaMimoSettings, this, 1, 1);
<   Simulator::Schedule (Seconds (10.0), &IdealRateManagerMimoTest::SendPacket, this, apDevice.Get (0), staDevice.Get (0)->GetAddress ());
<   Simulator::Schedule (Seconds (10.1), &IdealRateManagerMimoTest::CheckLastSelectedNss, this, 1);
<   Simulator::Schedule (Seconds (10.1), &IdealRateManagerMimoTest::CheckLastSelectedMode, this, WifiPhy::GetVhtMcs1 ());
< 
<   Simulator::Stop (Seconds (10.2));
<   Simulator::Run ();
<   Simulator::Destroy ();
< }
< 
< /**
<  * \ingroup wifi-test
<  * \ingroup tests
<  *
<  * \brief Wifi Test Suite
<  */
2946c1102
<   : TestSuite ("wifi-devices", UNIT)
---
>   : TestSuite ("devices-wifi", UNIT)
2953d1108
<   AddTestCase (new QosFragmentationTestCase, TestCase::QUICK);
2956,2963d1110
<   AddTestCase (new Bug2843TestCase, TestCase::QUICK); //Bug 2843
<   AddTestCase (new Bug2831TestCase, TestCase::QUICK); //Bug 2831
<   AddTestCase (new StaWifiMacScanningTestCase, TestCase::QUICK); //Bug 2399
<   AddTestCase (new Bug2470TestCase, TestCase::QUICK); //Bug 2470
<   AddTestCase (new Issue40TestCase, TestCase::QUICK); //Issue #40
<   AddTestCase (new Issue169TestCase, TestCase::QUICK); //Issue #169
<   AddTestCase (new IdealRateManagerChannelWidthTest, TestCase::QUICK);
<   AddTestCase (new IdealRateManagerMimoTest, TestCase::QUICK);
2966c1113
< static WifiTestSuite g_wifiTestSuite; ///< the test suite
---
> static WifiTestSuite g_wifiTestSuite;
Only in ../../NS3-WiGig/src/wifi/test: wifi-transmit-mask-test.cc
