diff ../../NS3-WiGig/src/flow-monitor/model/flow-classifier.h ../../ns-3-dev/src/flow-monitor/model/flow-classifier.h
72c72
<   virtual void SerializeToXmlStream (std::ostream &os, uint16_t indent) const = 0;
---
>   virtual void SerializeToXmlStream (std::ostream &os, int indent) const = 0;
79,84d78
<   ///
<   /// \brief Add a number of spaces for indentation purposes.
<   /// \param os The stream to write to.
<   /// \param level The number of spaces to add.
<   void Indent (std::ostream &os, uint16_t level) const;
< 
86,91d79
< 
< inline void
< FlowClassifier::Indent (std::ostream &os, uint16_t level) const
< {
<   for (uint16_t __xpto = 0; __xpto < level; __xpto++) os << ' ';
< }
diff ../../NS3-WiGig/src/flow-monitor/model/flow-monitor.cc ../../ns-3-dev/src/flow-monitor/model/flow-monitor.cc
27a28,29
> #define INDENT(level) for (int __xpto = 0; __xpto < level; __xpto++) os << ' ';
> 
35a38
> 
85c88
<   NS_LOG_FUNCTION (this);
---
>   // m_histogramBinWidth=DEFAULT_BIN_WIDTH;
91,93d93
<   NS_LOG_FUNCTION (this);
<   Simulator::Cancel (m_startEvent);
<   Simulator::Cancel (m_stopEvent);
111d110
<   NS_LOG_FUNCTION (this);
142d140
<   NS_LOG_FUNCTION (this << probe << flowId << packetId << packetSize);
145d142
<       NS_LOG_DEBUG ("FlowMonitor not enabled; returning");
172d168
<   NS_LOG_FUNCTION (this << probe << flowId << packetId << packetSize);
175d170
<       NS_LOG_DEBUG ("FlowMonitor not enabled; returning");
198d192
<   NS_LOG_FUNCTION (this << probe << flowId << packetId << packetSize);
201d194
<       NS_LOG_DEBUG ("FlowMonitor not enabled; returning");
264d256
<   NS_LOG_FUNCTION (this << probe << flowId << packetId << packetSize << reasonCode);
267d258
<       NS_LOG_DEBUG ("FlowMonitor not enabled; returning");
305d295
<   NS_LOG_FUNCTION (this << maxDelay.GetSeconds ());
365d354
<   NS_LOG_FUNCTION (this << time.GetSeconds ());
368d356
<       NS_LOG_DEBUG ("FlowMonitor already enabled; returning");
372d359
<   NS_LOG_DEBUG ("Scheduling start at " << time.GetSeconds ());
379c366,369
<   NS_LOG_FUNCTION (this << time.GetSeconds ());
---
>   if (!m_enabled)
>     {
>       return;
>     }
381d370
<   NS_LOG_DEBUG ("Scheduling stop at " << time.GetSeconds ());
389d377
<   NS_LOG_FUNCTION (this);
392d379
<       NS_LOG_DEBUG ("FlowMonitor already enabled; returning");
402d388
<   NS_LOG_FUNCTION (this);
405d390
<       NS_LOG_DEBUG ("FlowMonitor not enabled; returning");
419c404
< FlowMonitor::SerializeToXmlStream (std::ostream &os, uint16_t indent, bool enableHistograms, bool enableProbes)
---
> FlowMonitor::SerializeToXmlStream (std::ostream &os, int indent, bool enableHistograms, bool enableProbes)
421d405
<   NS_LOG_FUNCTION (this << indent << enableHistograms << enableProbes);
424c408
<   os << std::string ( indent, ' ' ) << "<FlowMonitor>\n";
---
>   INDENT (indent); os << "<FlowMonitor>\n";
426c410
<   os << std::string ( indent, ' ' ) << "<FlowStats>\n";
---
>   INDENT (indent); os << "<FlowStats>\n";
431c415,416
<       os << std::string ( indent, ' ' );
---
> 
>       INDENT (indent);
449a435
> 
453c439
<           os << std::string ( indent, ' ' );
---
>           INDENT (indent);
460c446
<           os << std::string ( indent, ' ' );
---
>           INDENT (indent);
474c460
<       os << std::string ( indent, ' ' ) << "</Flow>\n";
---
>       INDENT (indent); os << "</Flow>\n";
477c463
<   os << std::string ( indent, ' ' ) << "</FlowStats>\n";
---
>   INDENT (indent); os << "</FlowStats>\n";
488c474
<       os << std::string ( indent, ' ' ) << "<FlowProbes>\n";
---
>       INDENT (indent); os << "<FlowProbes>\n";
495c481
<       os << std::string ( indent, ' ' ) << "</FlowProbes>\n";
---
>       INDENT (indent); os << "</FlowProbes>\n";
499c485
<   os << std::string ( indent, ' ' ) << "</FlowMonitor>\n";
---
>   INDENT (indent); os << "</FlowMonitor>\n";
504c490
< FlowMonitor::SerializeToXmlString (uint16_t indent, bool enableHistograms, bool enableProbes)
---
> FlowMonitor::SerializeToXmlString (int indent, bool enableHistograms, bool enableProbes)
506d491
<   NS_LOG_FUNCTION (this << indent << enableHistograms << enableProbes);
516d500
<   NS_LOG_FUNCTION (this << fileName << enableHistograms << enableProbes);
diff ../../NS3-WiGig/src/flow-monitor/model/flow-monitor.h ../../ns-3-dev/src/flow-monitor/model/flow-monitor.h
146c146
<   virtual TypeId GetInstanceTypeId () const;
---
>   TypeId GetInstanceTypeId () const;
154d153
<   /// This method overwrites any previous calls to Start()
158d156
<   /// This method overwrites any previous calls to Stop()
246c244
<   void SerializeToXmlStream (std::ostream &os, uint16_t indent, bool enableHistograms, bool enableProbes);
---
>   void SerializeToXmlStream (std::ostream &os, int indent, bool enableHistograms, bool enableProbes);
253c251
<   std::string SerializeToXmlString (uint16_t indent, bool enableHistograms, bool enableProbes);
---
>   std::string SerializeToXmlString (int indent, bool enableHistograms, bool enableProbes);
diff ../../NS3-WiGig/src/flow-monitor/model/flow-probe.cc ../../ns-3-dev/src/flow-monitor/model/flow-probe.cc
86c86
< FlowProbe::SerializeToXmlStream (std::ostream &os, uint16_t indent, uint32_t index) const
---
> FlowProbe::SerializeToXmlStream (std::ostream &os, int indent, uint32_t index) const
88c88,90
<   os << std::string ( indent, ' ' ) << "<FlowProbe index=\"" << index << "\">\n";
---
>   #define INDENT(level) for (int __xpto = 0; __xpto < level; __xpto++) os << ' ';
> 
>   INDENT (indent); os << "<FlowProbe index=\"" << index << "\">\n";
94c96
<       os << std::string ( indent, ' ' );
---
>       INDENT (indent);
104c106
<           os << std::string ( indent, ' ' );
---
>           INDENT (indent);
111c113
<           os << std::string ( indent, ' ' );
---
>           INDENT (indent);
117c119
<       os << std::string ( indent, ' ' ) << "</FlowStats>\n";
---
>       INDENT (indent); os << "</FlowStats>\n";
120c122
<   os << std::string ( indent, ' ' ) << "</FlowProbe>\n";
---
>   INDENT (indent); os << "</FlowProbe>\n";
diff ../../NS3-WiGig/src/flow-monitor/model/flow-probe.h ../../ns-3-dev/src/flow-monitor/model/flow-probe.h
103c103
<   void SerializeToXmlStream (std::ostream &os, uint16_t indent, uint32_t index) const;
---
>   void SerializeToXmlStream (std::ostream &os, int indent, uint32_t index) const;
diff ../../NS3-WiGig/src/flow-monitor/model/histogram.cc ../../ns-3-dev/src/flow-monitor/model/histogram.cc
103a104
> 
105c106
< Histogram::SerializeToXmlStream (std::ostream &os, uint16_t indent, std::string elementName) const
---
> Histogram::SerializeToXmlStream (std::ostream &os, int indent, std::string elementName) const
107,109c108,112
<   os << std::string ( indent, ' ' ) << "<" << elementName // << " binWidth=\"" << m_binWidth << "\""
<      << " nBins=\"" << m_histogram.size () << "\""
<      << " >\n";
---
> #define INDENT(level) for (int __xpto = 0; __xpto < level; __xpto++) os << ' ';
> 
>   INDENT (indent); os << "<" << elementName // << " binWidth=\"" << m_binWidth << "\""
>                       << " nBins=\"" << m_histogram.size () << "\""
>                       << " >\n";
117c120
<           os << std::string ( indent, ' ' );
---
>           INDENT (indent);
127c130
<   os << std::string ( indent+2, ' ' );
---
>   INDENT (indent + 2);
139c142,143
<   os << std::string ( indent, ' ' ) << "</" << elementName << ">\n";
---
>   INDENT (indent); os << "</" << elementName << ">\n";
> #undef INDENT
diff ../../NS3-WiGig/src/flow-monitor/model/histogram.h ../../ns-3-dev/src/flow-monitor/model/histogram.h
112c112
<   void SerializeToXmlStream (std::ostream &os, uint16_t indent, std::string elementName) const;
---
>   void SerializeToXmlStream (std::ostream &os, int indent, std::string elementName) const;
diff ../../NS3-WiGig/src/flow-monitor/model/ipv4-flow-classifier.cc ../../ns-3-dev/src/flow-monitor/model/ipv4-flow-classifier.cc
26d25
< #include <algorithm>
160d158
<       m_flowDscpMap[newFlowId];
167,177d164
<   // increment the counter of packets with the same DSCP value
<   Ipv4Header::DscpType dscp = ipHeader.GetDscp ();
<   std::pair<std::map<Ipv4Header::DscpType, uint32_t>::iterator, bool> dscpInserter
<     = m_flowDscpMap[insert.first->second].insert (std::pair<Ipv4Header::DscpType, uint32_t> (dscp, 1));
< 
<   // if the insertion did not succeed, we need to increment the counter
<   if (!dscpInserter.second)
<     {
<       m_flowDscpMap[insert.first->second][dscp] ++;
<     }
< 
201,223d187
< bool
< Ipv4FlowClassifier::SortByCount::operator() (std::pair<Ipv4Header::DscpType, uint32_t> left,
<                                              std::pair<Ipv4Header::DscpType, uint32_t> right)
< {
<   return left.second > right.second;
< }
< 
< std::vector<std::pair<Ipv4Header::DscpType, uint32_t> >
< Ipv4FlowClassifier::GetDscpCounts (FlowId flowId) const
< {
<   std::map<FlowId, std::map<Ipv4Header::DscpType, uint32_t> >::const_iterator flow
<     = m_flowDscpMap.find (flowId);
< 
<   if (flow == m_flowDscpMap.end ())
<     {
<       NS_FATAL_ERROR ("Could not find the flow with ID " << flowId);
<     }
< 
<   std::vector<std::pair<Ipv4Header::DscpType, uint32_t> > v (flow->second.begin (), flow->second.end ());
<   std::sort (v.begin (), v.end (), SortByCount ());
<   return v;
< }
< 
225c189
< Ipv4FlowClassifier::SerializeToXmlStream (std::ostream &os, uint16_t indent) const
---
> Ipv4FlowClassifier::SerializeToXmlStream (std::ostream &os, int indent) const
227c191,193
<   Indent (os, indent); os << "<Ipv4FlowClassifier>\n";
---
> #define INDENT(level) for (int __xpto = 0; __xpto < level; __xpto++) os << ' ';
> 
>   INDENT (indent); os << "<Ipv4FlowClassifier>\n";
233c199
<       Indent (os, indent);
---
>       INDENT (indent);
239,256c205,206
<          << " destinationPort=\"" << iter->first.destinationPort << "\">\n";
< 
<       indent += 2;
<       std::map<FlowId, std::map<Ipv4Header::DscpType, uint32_t> >::const_iterator flow
<         = m_flowDscpMap.find (iter->second);
< 
<       if (flow != m_flowDscpMap.end ())
<         {
<           for (std::map<Ipv4Header::DscpType, uint32_t>::const_iterator i = flow->second.begin (); i != flow->second.end (); i++)
<             {
<               Indent (os, indent);
<               os << "<Dscp value=\"0x" << std::hex << static_cast<uint32_t> (i->first) << "\""
<                  << " packets=\"" << std::dec << i->second << "\" />\n";
<             }
<         }
< 
<       indent -= 2;
<       Indent (os, indent); os << "</Flow>\n";
---
>          << " destinationPort=\"" << iter->first.destinationPort << "\""
>          << " />\n";
260c210,212
<   Indent (os, indent); os << "</Ipv4FlowClassifier>\n";
---
>   INDENT (indent); os << "</Ipv4FlowClassifier>\n";
> 
> #undef INDENT
diff ../../NS3-WiGig/src/flow-monitor/model/ipv4-flow-classifier.h ../../ns-3-dev/src/flow-monitor/model/ipv4-flow-classifier.h
72,91c72
<   /// Comparator used to sort the vector of DSCP values
<   class SortByCount
<   {
<   public:
<     /// Comparator function
<     /// \param left left operand
<     /// \param right right operand
<     /// \return true if left DSCP is greater than right DSCP
<     bool operator() (std::pair<Ipv4Header::DscpType, uint32_t> left,
<                      std::pair<Ipv4Header::DscpType, uint32_t> right);
<   };
< 
<   /// \brief get the DSCP values of the packets belonging to the flow with the
<   /// given FlowId, sorted in decreasing order of number of packets seen with
<   /// that DSCP value
<   /// \param flowId the identifier of the flow of interest
<   /// \returns the vector of DSCP values
<   std::vector<std::pair<Ipv4Header::DscpType, uint32_t> > GetDscpCounts (FlowId flowId) const;
< 
<   virtual void SerializeToXmlStream (std::ostream &os, uint16_t indent) const;
---
>   virtual void SerializeToXmlStream (std::ostream &os, int indent) const;
99,100d79
<   /// Map FlowIds to (DSCP value, packet count) pairs
<   std::map<FlowId, std::map<Ipv4Header::DscpType, uint32_t> > m_flowDscpMap;
diff ../../NS3-WiGig/src/flow-monitor/model/ipv4-flow-probe.cc ../../ns-3-dev/src/flow-monitor/model/ipv4-flow-probe.cc
471c471
< Ipv4FlowProbe::QueueDiscDropLogger (Ptr<const QueueDiscItem> item)
---
> Ipv4FlowProbe::QueueDiscDropLogger (Ptr<const QueueItem> item)
diff ../../NS3-WiGig/src/flow-monitor/model/ipv4-flow-probe.h ../../ns-3-dev/src/flow-monitor/model/ipv4-flow-probe.h
27d26
< #include "ns3/queue-item.h"
116,117c115,116
<   /// \param item queue disc item
<   void QueueDiscDropLogger (Ptr<const QueueDiscItem> item);
---
>   /// \param item queue item
>   void QueueDiscDropLogger (Ptr<const QueueItem> item);
diff ../../NS3-WiGig/src/flow-monitor/model/ipv6-flow-classifier.cc ../../ns-3-dev/src/flow-monitor/model/ipv6-flow-classifier.cc
27d26
< #include <algorithm>
161d159
<       m_flowDscpMap[newFlowId];
168,178d165
<   // increment the counter of packets with the same DSCP value
<   Ipv6Header::DscpType dscp = ipHeader.GetDscp ();
<   std::pair<std::map<Ipv6Header::DscpType, uint32_t>::iterator, bool> dscpInserter
<     = m_flowDscpMap[insert.first->second].insert (std::pair<Ipv6Header::DscpType, uint32_t> (dscp, 1));
< 
<   // if the insertion did not succeed, we need to increment the counter
<   if (!dscpInserter.second)
<     {
<       m_flowDscpMap[insert.first->second][dscp] ++;
<     }
< 
202,224d188
< bool
< Ipv6FlowClassifier::SortByCount::operator() (std::pair<Ipv6Header::DscpType, uint32_t> left,
<                                              std::pair<Ipv6Header::DscpType, uint32_t> right)
< {
<   return left.second > right.second;
< }
< 
< std::vector<std::pair<Ipv6Header::DscpType, uint32_t> >
< Ipv6FlowClassifier::GetDscpCounts (FlowId flowId) const
< {
<   std::map<FlowId, std::map<Ipv6Header::DscpType, uint32_t> >::const_iterator flow
<     = m_flowDscpMap.find (flowId);
< 
<   if (flow == m_flowDscpMap.end ())
<     {
<       NS_FATAL_ERROR ("Could not find the flow with ID " << flowId);
<     }
< 
<   std::vector<std::pair<Ipv6Header::DscpType, uint32_t> > v (flow->second.begin (), flow->second.end ());
<   std::sort (v.begin (), v.end (), SortByCount ());
<   return v;
< }
< 
226c190
< Ipv6FlowClassifier::SerializeToXmlStream (std::ostream &os, uint16_t indent) const
---
> Ipv6FlowClassifier::SerializeToXmlStream (std::ostream &os, int indent) const
228c192,194
<   Indent (os, indent); os << "<Ipv6FlowClassifier>\n";
---
> #define INDENT(level) for (int __xpto = 0; __xpto < level; __xpto++) os << ' ';
> 
>   INDENT (indent); os << "<Ipv6FlowClassifier>\n";
234c200
<       Indent (os, indent);
---
>       INDENT (indent);
240,257c206,207
<          << " destinationPort=\"" << iter->first.destinationPort << "\">\n";
< 
<       indent += 2;
<       std::map<FlowId, std::map<Ipv6Header::DscpType, uint32_t> >::const_iterator flow
<         = m_flowDscpMap.find (iter->second);
< 
<       if (flow != m_flowDscpMap.end ())
<         {
<           for (std::map<Ipv6Header::DscpType, uint32_t>::const_iterator i = flow->second.begin (); i != flow->second.end (); i++)
<             {
<               Indent (os, indent);
<               os << "<Dscp value=\"0x" << std::hex << static_cast<uint32_t> (i->first) << "\""
<                  << " packets=\"" << std::dec << i->second << "\" />\n";
<             }
<         }
< 
<       indent -= 2;
<       Indent (os, indent); os << "</Flow>\n";
---
>          << " destinationPort=\"" << iter->first.destinationPort << "\""
>          << " />\n";
261c211
<   Indent (os, indent); os << "</Ipv6FlowClassifier>\n";
---
>   INDENT (indent); os << "</Ipv6FlowClassifier>\n";
262a213
> #undef INDENT
diff ../../NS3-WiGig/src/flow-monitor/model/ipv6-flow-classifier.h ../../ns-3-dev/src/flow-monitor/model/ipv6-flow-classifier.h
73,92c73
<   /// Comparator used to sort the vector of DSCP values
<   class SortByCount
<   {
<   public:
<     /// Comparator function
<     /// \param left left operand
<     /// \param right right operand
<     /// \return true if left DSCP is greater than right DSCP
<     bool operator() (std::pair<Ipv6Header::DscpType, uint32_t> left,
<                      std::pair<Ipv6Header::DscpType, uint32_t> right);
<   };
< 
<   /// \brief get the DSCP values of the packets belonging to the flow with the
<   /// given FlowId, sorted in decreasing order of number of packets seen with
<   /// that DSCP value
<   /// \param flowId the identifier of the flow of interest
<   /// \returns the vector of DSCP values
<   std::vector<std::pair<Ipv6Header::DscpType, uint32_t> > GetDscpCounts (FlowId flowId) const;
< 
<   virtual void SerializeToXmlStream (std::ostream &os, uint16_t indent) const;
---
>   virtual void SerializeToXmlStream (std::ostream &os, int indent) const;
100,101d80
<   /// Map FlowIds to (DSCP value, packet count) pairs
<   std::map<FlowId, std::map<Ipv6Header::DscpType, uint32_t> > m_flowDscpMap;
diff ../../NS3-WiGig/src/flow-monitor/model/ipv6-flow-probe.cc ../../ns-3-dev/src/flow-monitor/model/ipv6-flow-probe.cc
415c415
< Ipv6FlowProbe::QueueDiscDropLogger (Ptr<const QueueDiscItem> item)
---
> Ipv6FlowProbe::QueueDiscDropLogger (Ptr<const QueueItem> item)
diff ../../NS3-WiGig/src/flow-monitor/model/ipv6-flow-probe.h ../../ns-3-dev/src/flow-monitor/model/ipv6-flow-probe.h
28d27
< #include "ns3/queue-item.h"
122,123c121,122
<   /// \param item queue disc item
<   void QueueDiscDropLogger (Ptr<const QueueDiscItem> item);
---
>   /// \param item queue item
>   void QueueDiscDropLogger (Ptr<const QueueItem> item);
