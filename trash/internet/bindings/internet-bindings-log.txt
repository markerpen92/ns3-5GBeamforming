diff ../../NS3-WiGig/src/internet/bindings/callbacks_list.py ../../ns-3-dev-git/src/internet/bindings/callbacks_list.py
3d2
<     ['void', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'],
23,24d21
<     ['void', 'ns3::Ptr<ns3::Packet>', 'ns3::Ipv4Header', 'unsigned short', 'ns3::Ptr<ns3::Ipv4Interface>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'],
<     ['void', 'ns3::Ipv4Address', 'unsigned char', 'unsigned char', 'unsigned char', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'],
26,28d22
<     ['void', 'ns3::Ptr<ns3::Packet>', 'ns3::Ipv6Header', 'unsigned short', 'ns3::Ptr<ns3::Ipv6Interface>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'],
<     ['void', 'ns3::Ipv6Address', 'unsigned char', 'unsigned char', 'unsigned char', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'],
<     ['void', 'ns3::SequenceNumber<unsigned int, int>', 'ns3::SequenceNumber<unsigned int, int>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'],
30a25
>     ['void', 'ns3::SequenceNumber<unsigned int, int>', 'ns3::SequenceNumber<unsigned int, int>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'],
32,34d26
<     ['void', 'unsigned char', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'],
<     ['void', 'const ns3::TcpRateOps::TcpRateConnection &', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'],
<     ['void', 'const ns3::TcpRateOps::TcpRateSample &', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'],
35a28,29
>     ['void', 'ns3::Ipv4Address', 'unsigned char', 'unsigned char', 'unsigned char', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'],
>     ['void', 'ns3::Ipv6Address', 'unsigned char', 'unsigned char', 'unsigned char', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'],
diff ../../NS3-WiGig/src/internet/bindings/modulegen__gcc_ILP32.py ../../ns-3-dev-git/src/internet/bindings/modulegen__gcc_ILP32.py
30c30
<     module.add_class('AsciiTraceHelperForDevice', import_from_module='ns.network', allow_subclassing=True)
---
>     module.add_class('AsciiTraceHelperForDevice', allow_subclassing=True, import_from_module='ns.network')
39,41c39,41
<     typehandlers.add_type_alias('std::list< ns3::AttributeConstructionList::Item > const_iterator', 'ns3::AttributeConstructionList::CIterator')
<     typehandlers.add_type_alias('std::list< ns3::AttributeConstructionList::Item > const_iterator*', 'ns3::AttributeConstructionList::CIterator*')
<     typehandlers.add_type_alias('std::list< ns3::AttributeConstructionList::Item > const_iterator&', 'ns3::AttributeConstructionList::CIterator&')
---
>     typehandlers.add_type_alias(u'std::list< ns3::AttributeConstructionList::Item > const_iterator', u'ns3::AttributeConstructionList::CIterator')
>     typehandlers.add_type_alias(u'std::list< ns3::AttributeConstructionList::Item > const_iterator*', u'ns3::AttributeConstructionList::CIterator*')
>     typehandlers.add_type_alias(u'std::list< ns3::AttributeConstructionList::Item > const_iterator&', u'ns3::AttributeConstructionList::CIterator&')
150,159d149
<     ## ipv4-end-point.h (module 'internet'): ns3::Ipv4EndPoint [class]
<     module.add_class('Ipv4EndPoint')
<     ## ipv4-end-point-demux.h (module 'internet'): ns3::Ipv4EndPointDemux [class]
<     module.add_class('Ipv4EndPointDemux')
<     typehandlers.add_type_alias('std::list< ns3::Ipv4EndPoint * >', 'ns3::Ipv4EndPointDemux::EndPoints')
<     typehandlers.add_type_alias('std::list< ns3::Ipv4EndPoint * >*', 'ns3::Ipv4EndPointDemux::EndPoints*')
<     typehandlers.add_type_alias('std::list< ns3::Ipv4EndPoint * >&', 'ns3::Ipv4EndPointDemux::EndPoints&')
<     typehandlers.add_type_alias('std::list< ns3::Ipv4EndPoint * > iterator', 'ns3::Ipv4EndPointDemux::EndPointsI')
<     typehandlers.add_type_alias('std::list< ns3::Ipv4EndPoint * > iterator*', 'ns3::Ipv4EndPointDemux::EndPointsI*')
<     typehandlers.add_type_alias('std::list< ns3::Ipv4EndPoint * > iterator&', 'ns3::Ipv4EndPointDemux::EndPointsI&')
166,168c156,158
<     typehandlers.add_type_alias('std::vector< std::pair< ns3::Ptr< ns3::Ipv4 >, unsigned int > > const_iterator', 'ns3::Ipv4InterfaceContainer::Iterator')
<     typehandlers.add_type_alias('std::vector< std::pair< ns3::Ptr< ns3::Ipv4 >, unsigned int > > const_iterator*', 'ns3::Ipv4InterfaceContainer::Iterator*')
<     typehandlers.add_type_alias('std::vector< std::pair< ns3::Ptr< ns3::Ipv4 >, unsigned int > > const_iterator&', 'ns3::Ipv4InterfaceContainer::Iterator&')
---
>     typehandlers.add_type_alias(u'std::vector< std::pair< ns3::Ptr< ns3::Ipv4 >, unsigned int > > const_iterator', u'ns3::Ipv4InterfaceContainer::Iterator')
>     typehandlers.add_type_alias(u'std::vector< std::pair< ns3::Ptr< ns3::Ipv4 >, unsigned int > > const_iterator*', u'ns3::Ipv4InterfaceContainer::Iterator*')
>     typehandlers.add_type_alias(u'std::vector< std::pair< ns3::Ptr< ns3::Ipv4 >, unsigned int > > const_iterator&', u'ns3::Ipv4InterfaceContainer::Iterator&')
187,196d176
<     ## ipv6-end-point.h (module 'internet'): ns3::Ipv6EndPoint [class]
<     module.add_class('Ipv6EndPoint')
<     ## ipv6-end-point-demux.h (module 'internet'): ns3::Ipv6EndPointDemux [class]
<     module.add_class('Ipv6EndPointDemux')
<     typehandlers.add_type_alias('std::list< ns3::Ipv6EndPoint * >', 'ns3::Ipv6EndPointDemux::EndPoints')
<     typehandlers.add_type_alias('std::list< ns3::Ipv6EndPoint * >*', 'ns3::Ipv6EndPointDemux::EndPoints*')
<     typehandlers.add_type_alias('std::list< ns3::Ipv6EndPoint * >&', 'ns3::Ipv6EndPointDemux::EndPoints&')
<     typehandlers.add_type_alias('std::list< ns3::Ipv6EndPoint * > iterator', 'ns3::Ipv6EndPointDemux::EndPointsI')
<     typehandlers.add_type_alias('std::list< ns3::Ipv6EndPoint * > iterator*', 'ns3::Ipv6EndPointDemux::EndPointsI*')
<     typehandlers.add_type_alias('std::list< ns3::Ipv6EndPoint * > iterator&', 'ns3::Ipv6EndPointDemux::EndPointsI&')
205,207c185,187
<     typehandlers.add_type_alias('std::vector< std::pair< ns3::Ptr< ns3::Ipv6 >, unsigned int > > const_iterator', 'ns3::Ipv6InterfaceContainer::Iterator')
<     typehandlers.add_type_alias('std::vector< std::pair< ns3::Ptr< ns3::Ipv6 >, unsigned int > > const_iterator*', 'ns3::Ipv6InterfaceContainer::Iterator*')
<     typehandlers.add_type_alias('std::vector< std::pair< ns3::Ptr< ns3::Ipv6 >, unsigned int > > const_iterator&', 'ns3::Ipv6InterfaceContainer::Iterator&')
---
>     typehandlers.add_type_alias(u'std::vector< std::pair< ns3::Ptr< ns3::Ipv6 >, unsigned int > > const_iterator', u'ns3::Ipv6InterfaceContainer::Iterator')
>     typehandlers.add_type_alias(u'std::vector< std::pair< ns3::Ptr< ns3::Ipv6 >, unsigned int > > const_iterator*', u'ns3::Ipv6InterfaceContainer::Iterator*')
>     typehandlers.add_type_alias(u'std::vector< std::pair< ns3::Ptr< ns3::Ipv6 >, unsigned int > > const_iterator&', u'ns3::Ipv6InterfaceContainer::Iterator&')
220,222c200,202
<     typehandlers.add_type_alias('void ( * ) ( ns3::Mac48Address )', 'ns3::Mac48Address::TracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Mac48Address )*', 'ns3::Mac48Address::TracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Mac48Address )&', 'ns3::Mac48Address::TracedCallback&')
---
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Mac48Address )', u'ns3::Mac48Address::TracedCallback')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Mac48Address )*', u'ns3::Mac48Address::TracedCallback*')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Mac48Address )&', u'ns3::Mac48Address::TracedCallback&')
231,233c211,213
<     typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::NetDevice > > const_iterator', 'ns3::NetDeviceContainer::Iterator')
<     typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::NetDevice > > const_iterator*', 'ns3::NetDeviceContainer::Iterator*')
<     typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::NetDevice > > const_iterator&', 'ns3::NetDeviceContainer::Iterator&')
---
>     typehandlers.add_type_alias(u'std::vector< ns3::Ptr< ns3::NetDevice > > const_iterator', u'ns3::NetDeviceContainer::Iterator')
>     typehandlers.add_type_alias(u'std::vector< ns3::Ptr< ns3::NetDevice > > const_iterator*', u'ns3::NetDeviceContainer::Iterator*')
>     typehandlers.add_type_alias(u'std::vector< ns3::Ptr< ns3::NetDevice > > const_iterator&', u'ns3::NetDeviceContainer::Iterator&')
236,238c216,218
<     typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::Node > > const_iterator', 'ns3::NodeContainer::Iterator')
<     typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::Node > > const_iterator*', 'ns3::NodeContainer::Iterator*')
<     typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::Node > > const_iterator&', 'ns3::NodeContainer::Iterator&')
---
>     typehandlers.add_type_alias(u'std::vector< ns3::Ptr< ns3::Node > > const_iterator', u'ns3::NodeContainer::Iterator')
>     typehandlers.add_type_alias(u'std::vector< ns3::Ptr< ns3::Node > > const_iterator*', u'ns3::NodeContainer::Iterator*')
>     typehandlers.add_type_alias(u'std::vector< ns3::Ptr< ns3::Node > > const_iterator&', u'ns3::NodeContainer::Iterator&')
240c220
<     module.add_class('ObjectBase', import_from_module='ns.core', allow_subclassing=True)
---
>     module.add_class('ObjectBase', allow_subclassing=True, import_from_module='ns.core')
270c250
<     module.add_class('PcapHelperForDevice', import_from_module='ns.network', allow_subclassing=True)
---
>     module.add_class('PcapHelperForDevice', allow_subclassing=True, import_from_module='ns.network')
293,295c273,275
<     typehandlers.add_type_alias('std::pair< ns3::Ipv4Address, int >', 'ns3::SPFVertex::NodeExit_t')
<     typehandlers.add_type_alias('std::pair< ns3::Ipv4Address, int >*', 'ns3::SPFVertex::NodeExit_t*')
<     typehandlers.add_type_alias('std::pair< ns3::Ipv4Address, int >&', 'ns3::SPFVertex::NodeExit_t&')
---
>     typehandlers.add_type_alias(u'std::pair< ns3::Ipv4Address, int >', u'ns3::SPFVertex::NodeExit_t')
>     typehandlers.add_type_alias(u'std::pair< ns3::Ipv4Address, int >*', u'ns3::SPFVertex::NodeExit_t*')
>     typehandlers.add_type_alias(u'std::pair< ns3::Ipv4Address, int >&', u'ns3::SPFVertex::NodeExit_t&')
299c279
<     module.add_class('SimpleRefCount', import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), automatic_type_narrowing=True, parent=root_module['ns3::ObjectBase'], template_parameters=['ns3::Object', 'ns3::ObjectBase', 'ns3::ObjectDeleter'])
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::Object', 'ns3::ObjectBase', 'ns3::ObjectDeleter'], parent=root_module['ns3::ObjectBase'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
301c281
<     module.add_class('Simulator', import_from_module='ns.core', destructor_visibility='private')
---
>     module.add_class('Simulator', destructor_visibility='private', import_from_module='ns.core')
308c288
<     ## tcp-tx-item.h (module 'internet'): ns3::TcpTxItem [class]
---
>     ## tcp-tx-buffer.h (module 'internet'): ns3::TcpTxItem [class]
310,311d289
<     ## tcp-tx-item.h (module 'internet'): ns3::TcpTxItem::RateInformation [struct]
<     module.add_class('RateInformation', outer_class=root_module['ns3::TcpTxItem'])
321c299
<     module.add_class('TimerImpl', import_from_module='ns.core', allow_subclassing=True)
---
>     module.add_class('TimerImpl', allow_subclassing=True, import_from_module='ns.core')
346,348c324,326
<     typehandlers.add_type_alias('uint32_t', 'ns3::TypeId::hash_t')
<     typehandlers.add_type_alias('uint32_t*', 'ns3::TypeId::hash_t*')
<     typehandlers.add_type_alias('uint32_t&', 'ns3::TypeId::hash_t&')
---
>     typehandlers.add_type_alias(u'uint32_t', u'ns3::TypeId::hash_t')
>     typehandlers.add_type_alias(u'uint32_t*', u'ns3::TypeId::hash_t*')
>     typehandlers.add_type_alias(u'uint32_t&', u'ns3::TypeId::hash_t&')
484c462
<     module.add_class('SimpleRefCount', import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), automatic_type_narrowing=True, parent=root_module['ns3::empty'], template_parameters=['ns3::AttributeAccessor', 'ns3::empty', 'ns3::DefaultDeleter<ns3::AttributeAccessor>'])
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::AttributeAccessor', 'ns3::empty', 'ns3::DefaultDeleter<ns3::AttributeAccessor>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
486c464
<     module.add_class('SimpleRefCount', import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), automatic_type_narrowing=True, parent=root_module['ns3::empty'], template_parameters=['ns3::AttributeChecker', 'ns3::empty', 'ns3::DefaultDeleter<ns3::AttributeChecker>'])
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::AttributeChecker', 'ns3::empty', 'ns3::DefaultDeleter<ns3::AttributeChecker>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
488c466
<     module.add_class('SimpleRefCount', import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), automatic_type_narrowing=True, parent=root_module['ns3::empty'], template_parameters=['ns3::AttributeValue', 'ns3::empty', 'ns3::DefaultDeleter<ns3::AttributeValue>'])
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::AttributeValue', 'ns3::empty', 'ns3::DefaultDeleter<ns3::AttributeValue>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
490c468
<     module.add_class('SimpleRefCount', import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), automatic_type_narrowing=True, parent=root_module['ns3::empty'], template_parameters=['ns3::CallbackImplBase', 'ns3::empty', 'ns3::DefaultDeleter<ns3::CallbackImplBase>'])
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::CallbackImplBase', 'ns3::empty', 'ns3::DefaultDeleter<ns3::CallbackImplBase>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
492c470
<     module.add_class('SimpleRefCount', import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), automatic_type_narrowing=True, parent=root_module['ns3::empty'], template_parameters=['ns3::EventImpl', 'ns3::empty', 'ns3::DefaultDeleter<ns3::EventImpl>'])
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::EventImpl', 'ns3::empty', 'ns3::DefaultDeleter<ns3::EventImpl>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
494c472
<     module.add_class('SimpleRefCount', import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), automatic_type_narrowing=True, parent=root_module['ns3::empty'], template_parameters=['ns3::Hash::Implementation', 'ns3::empty', 'ns3::DefaultDeleter<ns3::Hash::Implementation>'])
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::Hash::Implementation', 'ns3::empty', 'ns3::DefaultDeleter<ns3::Hash::Implementation>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
496c474
<     module.add_class('SimpleRefCount', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), automatic_type_narrowing=True, parent=root_module['ns3::empty'], template_parameters=['ns3::Ipv4MulticastRoute', 'ns3::empty', 'ns3::DefaultDeleter<ns3::Ipv4MulticastRoute>'])
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, template_parameters=['ns3::Ipv4MulticastRoute', 'ns3::empty', 'ns3::DefaultDeleter<ns3::Ipv4MulticastRoute>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
498c476
<     module.add_class('SimpleRefCount', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), automatic_type_narrowing=True, parent=root_module['ns3::empty'], template_parameters=['ns3::Ipv4Route', 'ns3::empty', 'ns3::DefaultDeleter<ns3::Ipv4Route>'])
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, template_parameters=['ns3::Ipv4Route', 'ns3::empty', 'ns3::DefaultDeleter<ns3::Ipv4Route>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
500c478
<     module.add_class('SimpleRefCount', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), automatic_type_narrowing=True, parent=root_module['ns3::empty'], template_parameters=['ns3::Ipv6MulticastRoute', 'ns3::empty', 'ns3::DefaultDeleter<ns3::Ipv6MulticastRoute>'])
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, template_parameters=['ns3::Ipv6MulticastRoute', 'ns3::empty', 'ns3::DefaultDeleter<ns3::Ipv6MulticastRoute>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
502c480
<     module.add_class('SimpleRefCount', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), automatic_type_narrowing=True, parent=root_module['ns3::empty'], template_parameters=['ns3::Ipv6Route', 'ns3::empty', 'ns3::DefaultDeleter<ns3::Ipv6Route>'])
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, template_parameters=['ns3::Ipv6Route', 'ns3::empty', 'ns3::DefaultDeleter<ns3::Ipv6Route>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
504c482
<     module.add_class('SimpleRefCount', import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), automatic_type_narrowing=True, parent=root_module['ns3::empty'], template_parameters=['ns3::NixVector', 'ns3::empty', 'ns3::DefaultDeleter<ns3::NixVector>'])
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::NixVector', 'ns3::empty', 'ns3::DefaultDeleter<ns3::NixVector>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
506c484
<     module.add_class('SimpleRefCount', import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), automatic_type_narrowing=True, parent=root_module['ns3::empty'], template_parameters=['ns3::OutputStreamWrapper', 'ns3::empty', 'ns3::DefaultDeleter<ns3::OutputStreamWrapper>'])
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::OutputStreamWrapper', 'ns3::empty', 'ns3::DefaultDeleter<ns3::OutputStreamWrapper>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
508c486
<     module.add_class('SimpleRefCount', import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), automatic_type_narrowing=True, parent=root_module['ns3::empty'], template_parameters=['ns3::Packet', 'ns3::empty', 'ns3::DefaultDeleter<ns3::Packet>'])
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::Packet', 'ns3::empty', 'ns3::DefaultDeleter<ns3::Packet>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
510c488
<     module.add_class('SimpleRefCount', import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), automatic_type_narrowing=True, parent=root_module['ns3::empty'], template_parameters=['ns3::QueueItem', 'ns3::empty', 'ns3::DefaultDeleter<ns3::QueueItem>'])
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::QueueItem', 'ns3::empty', 'ns3::DefaultDeleter<ns3::QueueItem>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
512c490
<     module.add_class('SimpleRefCount', import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), automatic_type_narrowing=True, parent=root_module['ns3::empty'], template_parameters=['ns3::TraceSourceAccessor', 'ns3::empty', 'ns3::DefaultDeleter<ns3::TraceSourceAccessor>'])
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::TraceSourceAccessor', 'ns3::empty', 'ns3::DefaultDeleter<ns3::TraceSourceAccessor>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
543,548c521,526
<     typehandlers.add_type_alias('std::list< ns3::Ptr< ns3::TcpOption const > >', 'ns3::TcpHeader::TcpOptionList')
<     typehandlers.add_type_alias('std::list< ns3::Ptr< ns3::TcpOption const > >*', 'ns3::TcpHeader::TcpOptionList*')
<     typehandlers.add_type_alias('std::list< ns3::Ptr< ns3::TcpOption const > >&', 'ns3::TcpHeader::TcpOptionList&')
<     typehandlers.add_type_alias('ns3::TcpHeader::Flags_t', 'ns3::TcpHeader::Flags_t')
<     typehandlers.add_type_alias('ns3::TcpHeader::Flags_t*', 'ns3::TcpHeader::Flags_t*')
<     typehandlers.add_type_alias('ns3::TcpHeader::Flags_t&', 'ns3::TcpHeader::Flags_t&')
---
>     typehandlers.add_type_alias(u'std::list< ns3::Ptr< ns3::TcpOption const > >', u'ns3::TcpHeader::TcpOptionList')
>     typehandlers.add_type_alias(u'std::list< ns3::Ptr< ns3::TcpOption const > >*', u'ns3::TcpHeader::TcpOptionList*')
>     typehandlers.add_type_alias(u'std::list< ns3::Ptr< ns3::TcpOption const > >&', u'ns3::TcpHeader::TcpOptionList&')
>     typehandlers.add_type_alias(u'ns3::TcpHeader::Flags_t', u'ns3::TcpHeader::Flags_t')
>     typehandlers.add_type_alias(u'ns3::TcpHeader::Flags_t*', u'ns3::TcpHeader::Flags_t*')
>     typehandlers.add_type_alias(u'ns3::TcpHeader::Flags_t&', u'ns3::TcpHeader::Flags_t&')
563,568c541,546
<     typehandlers.add_type_alias('std::pair< ns3::SequenceNumber< unsigned int, int >, ns3::SequenceNumber< unsigned int, int > >', 'ns3::TcpOptionSack::SackBlock')
<     typehandlers.add_type_alias('std::pair< ns3::SequenceNumber< unsigned int, int >, ns3::SequenceNumber< unsigned int, int > >*', 'ns3::TcpOptionSack::SackBlock*')
<     typehandlers.add_type_alias('std::pair< ns3::SequenceNumber< unsigned int, int >, ns3::SequenceNumber< unsigned int, int > >&', 'ns3::TcpOptionSack::SackBlock&')
<     typehandlers.add_type_alias('std::list< std::pair< ns3::SequenceNumber< unsigned int, int >, ns3::SequenceNumber< unsigned int, int > > >', 'ns3::TcpOptionSack::SackList')
<     typehandlers.add_type_alias('std::list< std::pair< ns3::SequenceNumber< unsigned int, int >, ns3::SequenceNumber< unsigned int, int > > >*', 'ns3::TcpOptionSack::SackList*')
<     typehandlers.add_type_alias('std::list< std::pair< ns3::SequenceNumber< unsigned int, int >, ns3::SequenceNumber< unsigned int, int > > >&', 'ns3::TcpOptionSack::SackList&')
---
>     typehandlers.add_type_alias(u'std::pair< ns3::SequenceNumber< unsigned int, int >, ns3::SequenceNumber< unsigned int, int > >', u'ns3::TcpOptionSack::SackBlock')
>     typehandlers.add_type_alias(u'std::pair< ns3::SequenceNumber< unsigned int, int >, ns3::SequenceNumber< unsigned int, int > >*', u'ns3::TcpOptionSack::SackBlock*')
>     typehandlers.add_type_alias(u'std::pair< ns3::SequenceNumber< unsigned int, int >, ns3::SequenceNumber< unsigned int, int > >&', u'ns3::TcpOptionSack::SackBlock&')
>     typehandlers.add_type_alias(u'std::list< std::pair< ns3::SequenceNumber< unsigned int, int >, ns3::SequenceNumber< unsigned int, int > > >', u'ns3::TcpOptionSack::SackList')
>     typehandlers.add_type_alias(u'std::list< std::pair< ns3::SequenceNumber< unsigned int, int >, ns3::SequenceNumber< unsigned int, int > > >*', u'ns3::TcpOptionSack::SackList*')
>     typehandlers.add_type_alias(u'std::list< std::pair< ns3::SequenceNumber< unsigned int, int >, ns3::SequenceNumber< unsigned int, int > > >&', u'ns3::TcpOptionSack::SackList&')
577,582d554
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps [class]
<     module.add_class('TcpRateOps', parent=root_module['ns3::Object'])
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateConnection [struct]
<     module.add_class('TcpRateConnection', outer_class=root_module['ns3::TcpRateOps'])
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateSample [struct]
<     module.add_class('TcpRateSample', outer_class=root_module['ns3::TcpRateOps'])
593,595c565,567
<     typehandlers.add_type_alias('ns3::TcpSocket::TcpStates_t', 'ns3::TcpSocket::TcpStates_t')
<     typehandlers.add_type_alias('ns3::TcpSocket::TcpStates_t*', 'ns3::TcpSocket::TcpStates_t*')
<     typehandlers.add_type_alias('ns3::TcpSocket::TcpStates_t&', 'ns3::TcpSocket::TcpStates_t&')
---
>     typehandlers.add_type_alias(u'ns3::TcpSocket::TcpStates_t', u'ns3::TcpSocket::TcpStates_t')
>     typehandlers.add_type_alias(u'ns3::TcpSocket::TcpStates_t*', u'ns3::TcpSocket::TcpStates_t*')
>     typehandlers.add_type_alias(u'ns3::TcpSocket::TcpStates_t&', u'ns3::TcpSocket::TcpStates_t&')
598,600c570,577
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const > const, ns3::TcpHeader const &, ns3::Ptr< ns3::TcpSocketBase const > const )', 'ns3::TcpSocketBase::TcpTxRxTracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const > const, ns3::TcpHeader const &, ns3::Ptr< ns3::TcpSocketBase const > const )*', 'ns3::TcpSocketBase::TcpTxRxTracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const > const, ns3::TcpHeader const &, ns3::Ptr< ns3::TcpSocketBase const > const )&', 'ns3::TcpSocketBase::TcpTxRxTracedCallback&')
---
>     ## tcp-socket-base.h (module 'internet'): ns3::TcpSocketBase::EcnMode_t [enumeration]
>     module.add_enum('EcnMode_t', ['NoEcn', 'ClassicEcn'], outer_class=root_module['ns3::TcpSocketBase'])
>     typehandlers.add_type_alias(u'ns3::TcpSocketBase::EcnMode_t', u'ns3::TcpSocketBase::EcnMode_t')
>     typehandlers.add_type_alias(u'ns3::TcpSocketBase::EcnMode_t*', u'ns3::TcpSocketBase::EcnMode_t*')
>     typehandlers.add_type_alias(u'ns3::TcpSocketBase::EcnMode_t&', u'ns3::TcpSocketBase::EcnMode_t&')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const > const, ns3::TcpHeader const &, ns3::Ptr< ns3::TcpSocketBase const > const )', u'ns3::TcpSocketBase::TcpTxRxTracedCallback')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const > const, ns3::TcpHeader const &, ns3::Ptr< ns3::TcpSocketBase const > const )*', u'ns3::TcpSocketBase::TcpTxRxTracedCallback*')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const > const, ns3::TcpHeader const &, ns3::Ptr< ns3::TcpSocketBase const > const )&', u'ns3::TcpSocketBase::TcpTxRxTracedCallback&')
609,614d585
<     ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::UseEcn_t [enumeration]
<     module.add_enum('UseEcn_t', ['Off', 'On', 'AcceptOnly'], outer_class=root_module['ns3::TcpSocketState'])
<     ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::EcnCodePoint_t [enumeration]
<     module.add_enum('EcnCodePoint_t', ['NotECT', 'Ect1', 'Ect0', 'CongExp'], outer_class=root_module['ns3::TcpSocketState'])
<     ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::EcnMode_t [enumeration]
<     module.add_enum('EcnMode_t', ['ClassicEcn', 'DctcpEcn'], outer_class=root_module['ns3::TcpSocketState'])
617,634c588,596
<     typehandlers.add_type_alias('ns3::TcpSocketState::TcpCongState_t', 'ns3::TcpSocketState::TcpCongState_t')
<     typehandlers.add_type_alias('ns3::TcpSocketState::TcpCongState_t*', 'ns3::TcpSocketState::TcpCongState_t*')
<     typehandlers.add_type_alias('ns3::TcpSocketState::TcpCongState_t&', 'ns3::TcpSocketState::TcpCongState_t&')
<     typehandlers.add_type_alias('ns3::TcpSocketState::TcpCAEvent_t', 'ns3::TcpSocketState::TcpCAEvent_t')
<     typehandlers.add_type_alias('ns3::TcpSocketState::TcpCAEvent_t*', 'ns3::TcpSocketState::TcpCAEvent_t*')
<     typehandlers.add_type_alias('ns3::TcpSocketState::TcpCAEvent_t&', 'ns3::TcpSocketState::TcpCAEvent_t&')
<     typehandlers.add_type_alias('ns3::TcpSocketState::UseEcn_t', 'ns3::TcpSocketState::UseEcn_t')
<     typehandlers.add_type_alias('ns3::TcpSocketState::UseEcn_t*', 'ns3::TcpSocketState::UseEcn_t*')
<     typehandlers.add_type_alias('ns3::TcpSocketState::UseEcn_t&', 'ns3::TcpSocketState::UseEcn_t&')
<     typehandlers.add_type_alias('ns3::TcpSocketState::EcnCodePoint_t', 'ns3::TcpSocketState::EcnCodePoint_t')
<     typehandlers.add_type_alias('ns3::TcpSocketState::EcnCodePoint_t*', 'ns3::TcpSocketState::EcnCodePoint_t*')
<     typehandlers.add_type_alias('ns3::TcpSocketState::EcnCodePoint_t&', 'ns3::TcpSocketState::EcnCodePoint_t&')
<     typehandlers.add_type_alias('ns3::TcpSocketState::EcnMode_t', 'ns3::TcpSocketState::EcnMode_t')
<     typehandlers.add_type_alias('ns3::TcpSocketState::EcnMode_t*', 'ns3::TcpSocketState::EcnMode_t*')
<     typehandlers.add_type_alias('ns3::TcpSocketState::EcnMode_t&', 'ns3::TcpSocketState::EcnMode_t&')
<     typehandlers.add_type_alias('ns3::TcpSocketState::EcnState_t', 'ns3::TcpSocketState::EcnState_t')
<     typehandlers.add_type_alias('ns3::TcpSocketState::EcnState_t*', 'ns3::TcpSocketState::EcnState_t*')
<     typehandlers.add_type_alias('ns3::TcpSocketState::EcnState_t&', 'ns3::TcpSocketState::EcnState_t&')
---
>     typehandlers.add_type_alias(u'ns3::TcpSocketState::TcpCongState_t', u'ns3::TcpSocketState::TcpCongState_t')
>     typehandlers.add_type_alias(u'ns3::TcpSocketState::TcpCongState_t*', u'ns3::TcpSocketState::TcpCongState_t*')
>     typehandlers.add_type_alias(u'ns3::TcpSocketState::TcpCongState_t&', u'ns3::TcpSocketState::TcpCongState_t&')
>     typehandlers.add_type_alias(u'ns3::TcpSocketState::TcpCAEvent_t', u'ns3::TcpSocketState::TcpCAEvent_t')
>     typehandlers.add_type_alias(u'ns3::TcpSocketState::TcpCAEvent_t*', u'ns3::TcpSocketState::TcpCAEvent_t*')
>     typehandlers.add_type_alias(u'ns3::TcpSocketState::TcpCAEvent_t&', u'ns3::TcpSocketState::TcpCAEvent_t&')
>     typehandlers.add_type_alias(u'ns3::TcpSocketState::EcnState_t', u'ns3::TcpSocketState::EcnState_t')
>     typehandlers.add_type_alias(u'ns3::TcpSocketState::EcnState_t*', u'ns3::TcpSocketState::EcnState_t*')
>     typehandlers.add_type_alias(u'ns3::TcpSocketState::EcnState_t&', u'ns3::TcpSocketState::EcnState_t&')
653,655c615,617
<     typehandlers.add_type_alias('void ( * ) ( ns3::Time )', 'ns3::Time::TracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Time )*', 'ns3::Time::TracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Time )&', 'ns3::Time::TracedCallback&')
---
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Time )', u'ns3::Time::TracedCallback')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Time )*', u'ns3::Time::TracedCallback*')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Time )&', u'ns3::Time::TracedCallback&')
686,688c648,650
<     typehandlers.add_type_alias('std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv4Header >', 'ns3::ArpCache::Ipv4PayloadHeaderPair')
<     typehandlers.add_type_alias('std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv4Header >*', 'ns3::ArpCache::Ipv4PayloadHeaderPair*')
<     typehandlers.add_type_alias('std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv4Header >&', 'ns3::ArpCache::Ipv4PayloadHeaderPair&')
---
>     typehandlers.add_type_alias(u'std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv4Header >', u'ns3::ArpCache::Ipv4PayloadHeaderPair')
>     typehandlers.add_type_alias(u'std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv4Header >*', u'ns3::ArpCache::Ipv4PayloadHeaderPair*')
>     typehandlers.add_type_alias(u'std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv4Header >&', u'ns3::ArpCache::Ipv4PayloadHeaderPair&')
698c660
<     module.add_class('AttributeChecker', import_from_module='ns.core', automatic_type_narrowing=True, allow_subclassing=False, parent=root_module['ns3::SimpleRefCount< ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker> >'])
---
>     module.add_class('AttributeChecker', allow_subclassing=False, automatic_type_narrowing=True, import_from_module='ns.core', parent=root_module['ns3::SimpleRefCount< ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker> >'])
700c662
<     module.add_class('AttributeValue', import_from_module='ns.core', automatic_type_narrowing=True, allow_subclassing=False, parent=root_module['ns3::SimpleRefCount< ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue> >'])
---
>     module.add_class('AttributeValue', allow_subclassing=False, automatic_type_narrowing=True, import_from_module='ns.core', parent=root_module['ns3::SimpleRefCount< ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue> >'])
757,762c719,724
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Ipv4Address, ns3::Ipv4Address, unsigned char, ns3::Ptr< ns3::Ipv4Route >, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::IpL4Protocol::DownTargetCallback')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Ipv4Address, ns3::Ipv4Address, unsigned char, ns3::Ptr< ns3::Ipv4Route >, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::IpL4Protocol::DownTargetCallback*')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Ipv4Address, ns3::Ipv4Address, unsigned char, ns3::Ptr< ns3::Ipv4Route >, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::IpL4Protocol::DownTargetCallback&')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Ipv6Address, ns3::Ipv6Address, unsigned char, ns3::Ptr< ns3::Ipv6Route >, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::IpL4Protocol::DownTargetCallback6')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Ipv6Address, ns3::Ipv6Address, unsigned char, ns3::Ptr< ns3::Ipv6Route >, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::IpL4Protocol::DownTargetCallback6*')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Ipv6Address, ns3::Ipv6Address, unsigned char, ns3::Ptr< ns3::Ipv6Route >, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::IpL4Protocol::DownTargetCallback6&')
---
>     typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Ipv4Address, ns3::Ipv4Address, unsigned char, ns3::Ptr< ns3::Ipv4Route >, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', u'ns3::IpL4Protocol::DownTargetCallback')
>     typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Ipv4Address, ns3::Ipv4Address, unsigned char, ns3::Ptr< ns3::Ipv4Route >, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', u'ns3::IpL4Protocol::DownTargetCallback*')
>     typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Ipv4Address, ns3::Ipv4Address, unsigned char, ns3::Ptr< ns3::Ipv4Route >, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', u'ns3::IpL4Protocol::DownTargetCallback&')
>     typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Ipv6Address, ns3::Ipv6Address, unsigned char, ns3::Ptr< ns3::Ipv6Route >, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', u'ns3::IpL4Protocol::DownTargetCallback6')
>     typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Ipv6Address, ns3::Ipv6Address, unsigned char, ns3::Ptr< ns3::Ipv6Route >, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', u'ns3::IpL4Protocol::DownTargetCallback6*')
>     typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Ipv6Address, ns3::Ipv6Address, unsigned char, ns3::Ptr< ns3::Ipv6Route >, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', u'ns3::IpL4Protocol::DownTargetCallback6&')
774,783c736,745
<     module.add_enum('DropReason', ['DROP_TTL_EXPIRED', 'DROP_NO_ROUTE', 'DROP_BAD_CHECKSUM', 'DROP_INTERFACE_DOWN', 'DROP_ROUTE_ERROR', 'DROP_FRAGMENT_TIMEOUT', 'DROP_DUPLICATE'], outer_class=root_module['ns3::Ipv4L3Protocol'])
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ipv4Header const &, ns3::Ptr< ns3::Packet const >, uint32_t )', 'ns3::Ipv4L3Protocol::SentTracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ipv4Header const &, ns3::Ptr< ns3::Packet const >, uint32_t )*', 'ns3::Ipv4L3Protocol::SentTracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ipv4Header const &, ns3::Ptr< ns3::Packet const >, uint32_t )&', 'ns3::Ipv4L3Protocol::SentTracedCallback&')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Ptr< ns3::Ipv4 >, uint32_t )', 'ns3::Ipv4L3Protocol::TxRxTracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Ptr< ns3::Ipv4 >, uint32_t )*', 'ns3::Ipv4L3Protocol::TxRxTracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Ptr< ns3::Ipv4 >, uint32_t )&', 'ns3::Ipv4L3Protocol::TxRxTracedCallback&')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ipv4Header const &, ns3::Ptr< ns3::Packet const >, ns3::Ipv4L3Protocol::DropReason, ns3::Ptr< ns3::Ipv4 >, uint32_t )', 'ns3::Ipv4L3Protocol::DropTracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ipv4Header const &, ns3::Ptr< ns3::Packet const >, ns3::Ipv4L3Protocol::DropReason, ns3::Ptr< ns3::Ipv4 >, uint32_t )*', 'ns3::Ipv4L3Protocol::DropTracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ipv4Header const &, ns3::Ptr< ns3::Packet const >, ns3::Ipv4L3Protocol::DropReason, ns3::Ptr< ns3::Ipv4 >, uint32_t )&', 'ns3::Ipv4L3Protocol::DropTracedCallback&')
---
>     module.add_enum('DropReason', ['DROP_TTL_EXPIRED', 'DROP_NO_ROUTE', 'DROP_BAD_CHECKSUM', 'DROP_INTERFACE_DOWN', 'DROP_ROUTE_ERROR', 'DROP_FRAGMENT_TIMEOUT'], outer_class=root_module['ns3::Ipv4L3Protocol'])
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ipv4Header const &, ns3::Ptr< ns3::Packet const >, uint32_t )', u'ns3::Ipv4L3Protocol::SentTracedCallback')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ipv4Header const &, ns3::Ptr< ns3::Packet const >, uint32_t )*', u'ns3::Ipv4L3Protocol::SentTracedCallback*')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ipv4Header const &, ns3::Ptr< ns3::Packet const >, uint32_t )&', u'ns3::Ipv4L3Protocol::SentTracedCallback&')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Ptr< ns3::Ipv4 >, uint32_t )', u'ns3::Ipv4L3Protocol::TxRxTracedCallback')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Ptr< ns3::Ipv4 >, uint32_t )*', u'ns3::Ipv4L3Protocol::TxRxTracedCallback*')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Ptr< ns3::Ipv4 >, uint32_t )&', u'ns3::Ipv4L3Protocol::TxRxTracedCallback&')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ipv4Header const &, ns3::Ptr< ns3::Packet const >, ns3::Ipv4L3Protocol::DropReason, ns3::Ptr< ns3::Ipv4 >, uint32_t )', u'ns3::Ipv4L3Protocol::DropTracedCallback')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ipv4Header const &, ns3::Ptr< ns3::Packet const >, ns3::Ipv4L3Protocol::DropReason, ns3::Ptr< ns3::Ipv4 >, uint32_t )*', u'ns3::Ipv4L3Protocol::DropTracedCallback*')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ipv4Header const &, ns3::Ptr< ns3::Packet const >, ns3::Ipv4L3Protocol::DropReason, ns3::Ptr< ns3::Ipv4 >, uint32_t )&', u'ns3::Ipv4L3Protocol::DropTracedCallback&')
800,811c762,773
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Ipv4Route >, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::Ipv4RoutingProtocol::UnicastForwardCallback')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Ipv4Route >, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::Ipv4RoutingProtocol::UnicastForwardCallback*')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Ipv4Route >, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::Ipv4RoutingProtocol::UnicastForwardCallback&')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Ipv4MulticastRoute >, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::Ipv4RoutingProtocol::MulticastForwardCallback')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Ipv4MulticastRoute >, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::Ipv4RoutingProtocol::MulticastForwardCallback*')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Ipv4MulticastRoute >, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::Ipv4RoutingProtocol::MulticastForwardCallback&')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::Ipv4RoutingProtocol::LocalDeliverCallback')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::Ipv4RoutingProtocol::LocalDeliverCallback*')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::Ipv4RoutingProtocol::LocalDeliverCallback&')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::Socket::SocketErrno, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::Ipv4RoutingProtocol::ErrorCallback')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::Socket::SocketErrno, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::Ipv4RoutingProtocol::ErrorCallback*')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::Socket::SocketErrno, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::Ipv4RoutingProtocol::ErrorCallback&')
---
>     typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Ipv4Route >, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', u'ns3::Ipv4RoutingProtocol::UnicastForwardCallback')
>     typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Ipv4Route >, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', u'ns3::Ipv4RoutingProtocol::UnicastForwardCallback*')
>     typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Ipv4Route >, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', u'ns3::Ipv4RoutingProtocol::UnicastForwardCallback&')
>     typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Ipv4MulticastRoute >, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', u'ns3::Ipv4RoutingProtocol::MulticastForwardCallback')
>     typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Ipv4MulticastRoute >, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', u'ns3::Ipv4RoutingProtocol::MulticastForwardCallback*')
>     typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Ipv4MulticastRoute >, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', u'ns3::Ipv4RoutingProtocol::MulticastForwardCallback&')
>     typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', u'ns3::Ipv4RoutingProtocol::LocalDeliverCallback')
>     typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', u'ns3::Ipv4RoutingProtocol::LocalDeliverCallback*')
>     typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', u'ns3::Ipv4RoutingProtocol::LocalDeliverCallback&')
>     typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::Socket::SocketErrno, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', u'ns3::Ipv4RoutingProtocol::ErrorCallback')
>     typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::Socket::SocketErrno, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', u'ns3::Ipv4RoutingProtocol::ErrorCallback*')
>     typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::Socket::SocketErrno, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', u'ns3::Ipv4RoutingProtocol::ErrorCallback&')
838,840c800,802
<     typehandlers.add_type_alias('std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv6Header >', 'ns3::Ipv6ExtensionFragment::Ipv6PayloadHeaderPair')
<     typehandlers.add_type_alias('std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv6Header >*', 'ns3::Ipv6ExtensionFragment::Ipv6PayloadHeaderPair*')
<     typehandlers.add_type_alias('std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv6Header >&', 'ns3::Ipv6ExtensionFragment::Ipv6PayloadHeaderPair&')
---
>     typehandlers.add_type_alias(u'std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv6Header >', u'ns3::Ipv6ExtensionFragment::Ipv6PayloadHeaderPair')
>     typehandlers.add_type_alias(u'std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv6Header >*', u'ns3::Ipv6ExtensionFragment::Ipv6PayloadHeaderPair*')
>     typehandlers.add_type_alias(u'std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv6Header >&', u'ns3::Ipv6ExtensionFragment::Ipv6PayloadHeaderPair&')
857,865c819,827
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ipv6Header const &, ns3::Ptr< ns3::Packet const >, uint32_t )', 'ns3::Ipv6L3Protocol::SentTracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ipv6Header const &, ns3::Ptr< ns3::Packet const >, uint32_t )*', 'ns3::Ipv6L3Protocol::SentTracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ipv6Header const &, ns3::Ptr< ns3::Packet const >, uint32_t )&', 'ns3::Ipv6L3Protocol::SentTracedCallback&')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Ptr< ns3::Ipv6 >, uint32_t )', 'ns3::Ipv6L3Protocol::TxRxTracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Ptr< ns3::Ipv6 >, uint32_t )*', 'ns3::Ipv6L3Protocol::TxRxTracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Ptr< ns3::Ipv6 >, uint32_t )&', 'ns3::Ipv6L3Protocol::TxRxTracedCallback&')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ipv6Header const &, ns3::Ptr< ns3::Packet const >, ns3::Ipv6L3Protocol::DropReason, ns3::Ptr< ns3::Ipv6 >, uint32_t )', 'ns3::Ipv6L3Protocol::DropTracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ipv6Header const &, ns3::Ptr< ns3::Packet const >, ns3::Ipv6L3Protocol::DropReason, ns3::Ptr< ns3::Ipv6 >, uint32_t )*', 'ns3::Ipv6L3Protocol::DropTracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ipv6Header const &, ns3::Ptr< ns3::Packet const >, ns3::Ipv6L3Protocol::DropReason, ns3::Ptr< ns3::Ipv6 >, uint32_t )&', 'ns3::Ipv6L3Protocol::DropTracedCallback&')
---
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ipv6Header const &, ns3::Ptr< ns3::Packet const >, uint32_t )', u'ns3::Ipv6L3Protocol::SentTracedCallback')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ipv6Header const &, ns3::Ptr< ns3::Packet const >, uint32_t )*', u'ns3::Ipv6L3Protocol::SentTracedCallback*')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ipv6Header const &, ns3::Ptr< ns3::Packet const >, uint32_t )&', u'ns3::Ipv6L3Protocol::SentTracedCallback&')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Ptr< ns3::Ipv6 >, uint32_t )', u'ns3::Ipv6L3Protocol::TxRxTracedCallback')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Ptr< ns3::Ipv6 >, uint32_t )*', u'ns3::Ipv6L3Protocol::TxRxTracedCallback*')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Ptr< ns3::Ipv6 >, uint32_t )&', u'ns3::Ipv6L3Protocol::TxRxTracedCallback&')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ipv6Header const &, ns3::Ptr< ns3::Packet const >, ns3::Ipv6L3Protocol::DropReason, ns3::Ptr< ns3::Ipv6 >, uint32_t )', u'ns3::Ipv6L3Protocol::DropTracedCallback')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ipv6Header const &, ns3::Ptr< ns3::Packet const >, ns3::Ipv6L3Protocol::DropReason, ns3::Ptr< ns3::Ipv6 >, uint32_t )*', u'ns3::Ipv6L3Protocol::DropTracedCallback*')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ipv6Header const &, ns3::Ptr< ns3::Packet const >, ns3::Ipv6L3Protocol::DropReason, ns3::Ptr< ns3::Ipv6 >, uint32_t )&', u'ns3::Ipv6L3Protocol::DropTracedCallback&')
892,903c854,865
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice const >, ns3::Ptr< ns3::Ipv6Route >, ns3::Ptr< ns3::Packet const >, ns3::Ipv6Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::Ipv6RoutingProtocol::UnicastForwardCallback')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice const >, ns3::Ptr< ns3::Ipv6Route >, ns3::Ptr< ns3::Packet const >, ns3::Ipv6Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::Ipv6RoutingProtocol::UnicastForwardCallback*')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice const >, ns3::Ptr< ns3::Ipv6Route >, ns3::Ptr< ns3::Packet const >, ns3::Ipv6Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::Ipv6RoutingProtocol::UnicastForwardCallback&')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice const >, ns3::Ptr< ns3::Ipv6MulticastRoute >, ns3::Ptr< ns3::Packet const >, ns3::Ipv6Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::Ipv6RoutingProtocol::MulticastForwardCallback')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice const >, ns3::Ptr< ns3::Ipv6MulticastRoute >, ns3::Ptr< ns3::Packet const >, ns3::Ipv6Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::Ipv6RoutingProtocol::MulticastForwardCallback*')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice const >, ns3::Ptr< ns3::Ipv6MulticastRoute >, ns3::Ptr< ns3::Packet const >, ns3::Ipv6Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::Ipv6RoutingProtocol::MulticastForwardCallback&')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv6Header const &, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::Ipv6RoutingProtocol::LocalDeliverCallback')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv6Header const &, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::Ipv6RoutingProtocol::LocalDeliverCallback*')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv6Header const &, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::Ipv6RoutingProtocol::LocalDeliverCallback&')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv6Header const &, ns3::Socket::SocketErrno, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::Ipv6RoutingProtocol::ErrorCallback')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv6Header const &, ns3::Socket::SocketErrno, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::Ipv6RoutingProtocol::ErrorCallback*')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv6Header const &, ns3::Socket::SocketErrno, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::Ipv6RoutingProtocol::ErrorCallback&')
---
>     typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::NetDevice const >, ns3::Ptr< ns3::Ipv6Route >, ns3::Ptr< ns3::Packet const >, ns3::Ipv6Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', u'ns3::Ipv6RoutingProtocol::UnicastForwardCallback')
>     typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::NetDevice const >, ns3::Ptr< ns3::Ipv6Route >, ns3::Ptr< ns3::Packet const >, ns3::Ipv6Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', u'ns3::Ipv6RoutingProtocol::UnicastForwardCallback*')
>     typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::NetDevice const >, ns3::Ptr< ns3::Ipv6Route >, ns3::Ptr< ns3::Packet const >, ns3::Ipv6Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', u'ns3::Ipv6RoutingProtocol::UnicastForwardCallback&')
>     typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::NetDevice const >, ns3::Ptr< ns3::Ipv6MulticastRoute >, ns3::Ptr< ns3::Packet const >, ns3::Ipv6Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', u'ns3::Ipv6RoutingProtocol::MulticastForwardCallback')
>     typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::NetDevice const >, ns3::Ptr< ns3::Ipv6MulticastRoute >, ns3::Ptr< ns3::Packet const >, ns3::Ipv6Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', u'ns3::Ipv6RoutingProtocol::MulticastForwardCallback*')
>     typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::NetDevice const >, ns3::Ptr< ns3::Ipv6MulticastRoute >, ns3::Ptr< ns3::Packet const >, ns3::Ipv6Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', u'ns3::Ipv6RoutingProtocol::MulticastForwardCallback&')
>     typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv6Header const &, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', u'ns3::Ipv6RoutingProtocol::LocalDeliverCallback')
>     typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv6Header const &, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', u'ns3::Ipv6RoutingProtocol::LocalDeliverCallback*')
>     typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv6Header const &, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', u'ns3::Ipv6RoutingProtocol::LocalDeliverCallback&')
>     typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv6Header const &, ns3::Socket::SocketErrno, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', u'ns3::Ipv6RoutingProtocol::ErrorCallback')
>     typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv6Header const &, ns3::Socket::SocketErrno, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', u'ns3::Ipv6RoutingProtocol::ErrorCallback*')
>     typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv6Header const &, ns3::Socket::SocketErrno, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', u'ns3::Ipv6RoutingProtocol::ErrorCallback&')
916,918c878,880
<     typehandlers.add_type_alias('std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv6Header >', 'ns3::NdiscCache::Ipv6PayloadHeaderPair')
<     typehandlers.add_type_alias('std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv6Header >*', 'ns3::NdiscCache::Ipv6PayloadHeaderPair*')
<     typehandlers.add_type_alias('std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv6Header >&', 'ns3::NdiscCache::Ipv6PayloadHeaderPair&')
---
>     typehandlers.add_type_alias(u'std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv6Header >', u'ns3::NdiscCache::Ipv6PayloadHeaderPair')
>     typehandlers.add_type_alias(u'std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv6Header >*', u'ns3::NdiscCache::Ipv6PayloadHeaderPair*')
>     typehandlers.add_type_alias(u'std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv6Header >&', u'ns3::NdiscCache::Ipv6PayloadHeaderPair&')
923,931c885,893
<     typehandlers.add_type_alias('void ( * ) (  )', 'ns3::NetDevice::LinkChangeTracedCallback')
<     typehandlers.add_type_alias('void ( * ) (  )*', 'ns3::NetDevice::LinkChangeTracedCallback*')
<     typehandlers.add_type_alias('void ( * ) (  )&', 'ns3::NetDevice::LinkChangeTracedCallback&')
<     typehandlers.add_type_alias('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::NetDevice::ReceiveCallback')
<     typehandlers.add_type_alias('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::NetDevice::ReceiveCallback*')
<     typehandlers.add_type_alias('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::NetDevice::ReceiveCallback&')
<     typehandlers.add_type_alias('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >', 'ns3::NetDevice::PromiscReceiveCallback')
<     typehandlers.add_type_alias('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::NetDevice::PromiscReceiveCallback*')
<     typehandlers.add_type_alias('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::NetDevice::PromiscReceiveCallback&')
---
>     typehandlers.add_type_alias(u'void ( * ) (  )', u'ns3::NetDevice::LinkChangeTracedCallback')
>     typehandlers.add_type_alias(u'void ( * ) (  )*', u'ns3::NetDevice::LinkChangeTracedCallback*')
>     typehandlers.add_type_alias(u'void ( * ) (  )&', u'ns3::NetDevice::LinkChangeTracedCallback&')
>     typehandlers.add_type_alias(u'ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', u'ns3::NetDevice::ReceiveCallback')
>     typehandlers.add_type_alias(u'ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', u'ns3::NetDevice::ReceiveCallback*')
>     typehandlers.add_type_alias(u'ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', u'ns3::NetDevice::ReceiveCallback&')
>     typehandlers.add_type_alias(u'ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >', u'ns3::NetDevice::PromiscReceiveCallback')
>     typehandlers.add_type_alias(u'ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >*', u'ns3::NetDevice::PromiscReceiveCallback*')
>     typehandlers.add_type_alias(u'ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >&', u'ns3::NetDevice::PromiscReceiveCallback&')
936,941c898,903
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >', 'ns3::Node::ProtocolHandler')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::Node::ProtocolHandler*')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::Node::ProtocolHandler&')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::Node::DeviceAdditionListener')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::Node::DeviceAdditionListener*')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::Node::DeviceAdditionListener&')
---
>     typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >', u'ns3::Node::ProtocolHandler')
>     typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >*', u'ns3::Node::ProtocolHandler*')
>     typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >&', u'ns3::Node::ProtocolHandler&')
>     typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', u'ns3::Node::DeviceAdditionListener')
>     typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', u'ns3::Node::DeviceAdditionListener*')
>     typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', u'ns3::Node::DeviceAdditionListener&')
952,969c914,931
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const > )', 'ns3::Packet::TracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const > )*', 'ns3::Packet::TracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const > )&', 'ns3::Packet::TracedCallback&')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Address const & )', 'ns3::Packet::AddressTracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Address const & )*', 'ns3::Packet::AddressTracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Address const & )&', 'ns3::Packet::AddressTracedCallback&')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const > const, ns3::Address const &, ns3::Address const & )', 'ns3::Packet::TwoAddressTracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const > const, ns3::Address const &, ns3::Address const & )*', 'ns3::Packet::TwoAddressTracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const > const, ns3::Address const &, ns3::Address const & )&', 'ns3::Packet::TwoAddressTracedCallback&')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Mac48Address )', 'ns3::Packet::Mac48AddressTracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Mac48Address )*', 'ns3::Packet::Mac48AddressTracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Mac48Address )&', 'ns3::Packet::Mac48AddressTracedCallback&')
<     typehandlers.add_type_alias('void ( * ) ( uint32_t, uint32_t )', 'ns3::Packet::SizeTracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( uint32_t, uint32_t )*', 'ns3::Packet::SizeTracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( uint32_t, uint32_t )&', 'ns3::Packet::SizeTracedCallback&')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, double )', 'ns3::Packet::SinrTracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, double )*', 'ns3::Packet::SinrTracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, double )&', 'ns3::Packet::SinrTracedCallback&')
---
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const > )', u'ns3::Packet::TracedCallback')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const > )*', u'ns3::Packet::TracedCallback*')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const > )&', u'ns3::Packet::TracedCallback&')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Address const & )', u'ns3::Packet::AddressTracedCallback')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Address const & )*', u'ns3::Packet::AddressTracedCallback*')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Address const & )&', u'ns3::Packet::AddressTracedCallback&')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const > const, ns3::Address const &, ns3::Address const & )', u'ns3::Packet::TwoAddressTracedCallback')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const > const, ns3::Address const &, ns3::Address const & )*', u'ns3::Packet::TwoAddressTracedCallback*')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const > const, ns3::Address const &, ns3::Address const & )&', u'ns3::Packet::TwoAddressTracedCallback&')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Mac48Address )', u'ns3::Packet::Mac48AddressTracedCallback')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Mac48Address )*', u'ns3::Packet::Mac48AddressTracedCallback*')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Mac48Address )&', u'ns3::Packet::Mac48AddressTracedCallback&')
>     typehandlers.add_type_alias(u'void ( * ) ( uint32_t, uint32_t )', u'ns3::Packet::SizeTracedCallback')
>     typehandlers.add_type_alias(u'void ( * ) ( uint32_t, uint32_t )*', u'ns3::Packet::SizeTracedCallback*')
>     typehandlers.add_type_alias(u'void ( * ) ( uint32_t, uint32_t )&', u'ns3::Packet::SizeTracedCallback&')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const >, double )', u'ns3::Packet::SinrTracedCallback')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const >, double )*', u'ns3::Packet::SinrTracedCallback*')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const >, double )&', u'ns3::Packet::SinrTracedCallback&')
978,980c940,942
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::QueueItem const > )', 'ns3::QueueItem::TracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::QueueItem const > )*', 'ns3::QueueItem::TracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::QueueItem const > )&', 'ns3::QueueItem::TracedCallback&')
---
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::QueueItem const > )', u'ns3::QueueItem::TracedCallback')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::QueueItem const > )*', u'ns3::QueueItem::TracedCallback*')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::QueueItem const > )&', u'ns3::QueueItem::TracedCallback&')
993,994d954
<     ## tcp-dctcp.h (module 'internet'): ns3::TcpDctcp [class]
<     module.add_class('TcpDctcp', parent=root_module['ns3::TcpNewReno'])
1013,1023c973,975
<     typehandlers.add_type_alias('ns3::TcpPrrRecovery::ReductionBound_t', 'ns3::TcpPrrRecovery::ReductionBound_t')
<     typehandlers.add_type_alias('ns3::TcpPrrRecovery::ReductionBound_t*', 'ns3::TcpPrrRecovery::ReductionBound_t*')
<     typehandlers.add_type_alias('ns3::TcpPrrRecovery::ReductionBound_t&', 'ns3::TcpPrrRecovery::ReductionBound_t&')
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateLinux [class]
<     module.add_class('TcpRateLinux', parent=root_module['ns3::TcpRateOps'])
<     typehandlers.add_type_alias('void ( * ) ( ns3::TcpRateOps::TcpRateConnection const & )', 'ns3::TcpRateLinux::TcpRateUpdated')
<     typehandlers.add_type_alias('void ( * ) ( ns3::TcpRateOps::TcpRateConnection const & )*', 'ns3::TcpRateLinux::TcpRateUpdated*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::TcpRateOps::TcpRateConnection const & )&', 'ns3::TcpRateLinux::TcpRateUpdated&')
<     typehandlers.add_type_alias('void ( * ) ( ns3::TcpRateOps::TcpRateSample const & )', 'ns3::TcpRateLinux::TcpRateSampleUpdated')
<     typehandlers.add_type_alias('void ( * ) ( ns3::TcpRateOps::TcpRateSample const & )*', 'ns3::TcpRateLinux::TcpRateSampleUpdated*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::TcpRateOps::TcpRateSample const & )&', 'ns3::TcpRateLinux::TcpRateSampleUpdated&')
---
>     typehandlers.add_type_alias(u'ns3::TcpPrrRecovery::ReductionBound_t', u'ns3::TcpPrrRecovery::ReductionBound_t')
>     typehandlers.add_type_alias(u'ns3::TcpPrrRecovery::ReductionBound_t*', u'ns3::TcpPrrRecovery::ReductionBound_t*')
>     typehandlers.add_type_alias(u'ns3::TcpPrrRecovery::ReductionBound_t&', u'ns3::TcpPrrRecovery::ReductionBound_t&')
1043c995
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['bool', 'ns3::Ptr<ns3::NetDevice>', 'ns3::Ptr<const ns3::Packet>', 'unsigned short', 'const ns3::Address &', 'const ns3::Address &', 'ns3::NetDevice::PacketType', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
---
>     module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['bool', 'ns3::Ptr<ns3::NetDevice>', 'ns3::Ptr<const ns3::Packet>', 'unsigned short', 'const ns3::Address &', 'const ns3::Address &', 'ns3::NetDevice::PacketType', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
1045c997
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['bool', 'ns3::Ptr<ns3::NetDevice>', 'ns3::Ptr<const ns3::Packet>', 'unsigned short', 'const ns3::Address &', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
---
>     module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['bool', 'ns3::Ptr<ns3::NetDevice>', 'ns3::Ptr<const ns3::Packet>', 'unsigned short', 'const ns3::Address &', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
1047c999
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['bool', 'ns3::Ptr<ns3::Socket>', 'const ns3::Address &', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
---
>     module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['bool', 'ns3::Ptr<ns3::Socket>', 'const ns3::Address &', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
1049c1001
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['ns3::ObjectBase *', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
---
>     module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['ns3::ObjectBase *', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
1051c1003
<     module.add_class('CallbackImpl', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'const ns3::Ipv4Header &', 'ns3::Ptr<const ns3::Packet>', 'ns3::Ipv4L3Protocol::DropReason', 'ns3::Ptr<ns3::Ipv4>', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
---
>     module.add_class('CallbackImpl', template_parameters=['void', 'const ns3::Ipv4Header &', 'ns3::Ptr<const ns3::Packet>', 'ns3::Ipv4L3Protocol::DropReason', 'ns3::Ptr<ns3::Ipv4>', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
1053c1005
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'const ns3::Ipv4Header &', 'ns3::Ptr<const ns3::Packet>', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
---
>     module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'const ns3::Ipv4Header &', 'ns3::Ptr<const ns3::Packet>', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
1055c1007
<     module.add_class('CallbackImpl', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'const ns3::Ipv6Header &', 'ns3::Ptr<const ns3::Packet>', 'ns3::Ipv6L3Protocol::DropReason', 'ns3::Ptr<ns3::Ipv6>', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
---
>     module.add_class('CallbackImpl', template_parameters=['void', 'const ns3::Ipv6Header &', 'ns3::Ptr<const ns3::Packet>', 'ns3::Ipv6L3Protocol::DropReason', 'ns3::Ptr<ns3::Ipv6>', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
1057,1061c1009
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'const ns3::Ipv6Header &', 'ns3::Ptr<const ns3::Packet>', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::TcpRateOps::TcpRateConnection &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'const ns3::TcpRateOps::TcpRateConnection &', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::TcpRateOps::TcpRateSample &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'const ns3::TcpRateOps::TcpRateSample &', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
---
>     module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'const ns3::Ipv6Header &', 'ns3::Ptr<const ns3::Packet>', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
1063,1067c1011
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'double', 'double', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ipv4Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ipv4Address', 'unsigned char', 'unsigned char', 'unsigned char', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ipv6Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ipv6Address', 'unsigned char', 'unsigned char', 'unsigned char', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
---
>     module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'double', 'double', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
1069c1013
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<const ns3::Packet>', 'const ns3::TcpHeader &', 'ns3::Ptr<const ns3::TcpSocketBase>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
---
>     module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'ns3::Ptr<const ns3::Packet>', 'const ns3::TcpHeader &', 'ns3::Ptr<const ns3::TcpSocketBase>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
1071c1015
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<const ns3::Packet>', 'ns3::Ptr<ns3::Ipv4>', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
---
>     module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'ns3::Ptr<const ns3::Packet>', 'ns3::Ptr<ns3::Ipv4>', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
1073c1017
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<const ns3::Packet>', 'ns3::Ptr<ns3::Ipv6>', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
---
>     module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'ns3::Ptr<const ns3::Packet>', 'ns3::Ptr<ns3::Ipv6>', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
1075c1019
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<const ns3::Packet>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
---
>     module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'ns3::Ptr<const ns3::Packet>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
1077c1021
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<ns3::NetDevice>', 'ns3::Ptr<const ns3::Packet>', 'unsigned short', 'const ns3::Address &', 'const ns3::Address &', 'ns3::NetDevice::PacketType', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
---
>     module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'ns3::Ptr<ns3::NetDevice>', 'ns3::Ptr<const ns3::Packet>', 'unsigned short', 'const ns3::Address &', 'const ns3::Address &', 'ns3::NetDevice::PacketType', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
1079c1023
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<ns3::NetDevice>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
---
>     module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'ns3::Ptr<ns3::NetDevice>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
1081,1083c1025
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<ns3::Packet>', 'ns3::Ipv4Address', 'ns3::Ipv4Address', 'unsigned char', 'ns3::Ptr<ns3::Ipv4Route>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv4Header, unsigned short, ns3::Ptr<ns3::Ipv4Interface>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<ns3::Packet>', 'ns3::Ipv4Header', 'unsigned short', 'ns3::Ptr<ns3::Ipv4Interface>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
---
>     module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'ns3::Ptr<ns3::Packet>', 'ns3::Ipv4Address', 'ns3::Ipv4Address', 'unsigned char', 'ns3::Ptr<ns3::Ipv4Route>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
1085,1087c1027
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<ns3::Packet>', 'ns3::Ipv6Address', 'ns3::Ipv6Address', 'unsigned char', 'ns3::Ptr<ns3::Ipv6Route>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv6Header, unsigned short, ns3::Ptr<ns3::Ipv6Interface>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<ns3::Packet>', 'ns3::Ipv6Header', 'unsigned short', 'ns3::Ptr<ns3::Ipv6Interface>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
---
>     module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'ns3::Ptr<ns3::Packet>', 'ns3::Ipv6Address', 'ns3::Ipv6Address', 'unsigned char', 'ns3::Ptr<ns3::Ipv6Route>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
1089c1029
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<ns3::Socket>', 'const ns3::Address &', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
---
>     module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'ns3::Ptr<ns3::Socket>', 'const ns3::Address &', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
1091c1031
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<ns3::Socket>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
---
>     module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'ns3::Ptr<ns3::Socket>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
1093c1033
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<ns3::Socket>', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
---
>     module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'ns3::Ptr<ns3::Socket>', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
1095c1035
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::SequenceNumber<unsigned int, int>', 'ns3::SequenceNumber<unsigned int, int>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
---
>     module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'ns3::SequenceNumber<unsigned int, int>', 'ns3::SequenceNumber<unsigned int, int>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
1097c1037
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::TcpSocket::TcpStates_t', 'ns3::TcpSocket::TcpStates_t', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
---
>     module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'ns3::TcpSocket::TcpStates_t', 'ns3::TcpSocket::TcpStates_t', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
1099c1039
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::TcpSocketState::EcnState_t', 'ns3::TcpSocketState::EcnState_t', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
---
>     module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'ns3::TcpSocketState::EcnState_t', 'ns3::TcpSocketState::EcnState_t', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
1101c1041
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::TcpSocketState::TcpCongState_t', 'ns3::TcpSocketState::TcpCongState_t', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
---
>     module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'ns3::TcpSocketState::TcpCongState_t', 'ns3::TcpSocketState::TcpCongState_t', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
1103,1105c1043
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Time', 'ns3::Time', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
---
>     module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'ns3::Time', 'ns3::Time', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
1107c1045
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'unsigned int', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
---
>     module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'unsigned int', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
1134,1169c1072,1103
<     module.add_container('std::list< ns3::Ipv4EndPoint * >', 'ns3::Ipv4EndPoint *', container_type='list')
<     module.add_container('ns3::Ipv4EndPointDemux::EndPoints', 'ns3::Ipv4EndPoint *', container_type='list')
<     module.add_container('std::vector< unsigned int >', 'unsigned int', container_type='vector')
<     module.add_container('std::vector< bool >', 'bool', container_type='vector')
<     module.add_container('std::list< ns3::Ipv6EndPoint * >', 'ns3::Ipv6EndPoint *', container_type='list')
<     module.add_container('ns3::Ipv6EndPointDemux::EndPoints', 'ns3::Ipv6EndPoint *', container_type='list')
<     module.add_container('std::list< ns3::RipRte >', 'ns3::RipRte', container_type='list')
<     module.add_container('std::list< ns3::RipNgRte >', 'ns3::RipNgRte', container_type='list')
<     module.add_container('std::vector< ns3::Ipv6Address >', 'ns3::Ipv6Address', container_type='vector')
<     module.add_container('std::list< ns3::Ptr< ns3::TcpOption const > >', 'ns3::Ptr< ns3::TcpOption const >', container_type='list')
<     module.add_container('std::list< std::pair< ns3::SequenceNumber< unsigned int, int >, ns3::SequenceNumber< unsigned int, int > > >', 'std::pair< ns3::SequenceNumber< unsigned int, int >, ns3::SequenceNumber< unsigned int, int > >', container_type='list')
<     module.add_container('ns3::TcpOptionSack::SackList', 'std::pair< ns3::SequenceNumber< unsigned int, int >, ns3::SequenceNumber< unsigned int, int > >', container_type='list')
<     module.add_container('std::list< std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv4Header > >', 'std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv4Header >', container_type='list')
<     module.add_container('std::list< ns3::ArpCache::Entry * >', 'ns3::ArpCache::Entry *', container_type='list')
<     module.add_container('std::map< unsigned int, unsigned int >', ('unsigned int', 'unsigned int'), container_type='map')
<     module.add_container('std::list< std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv6Header > >', 'std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv6Header >', container_type='list')
<     module.add_container('std::list< ns3::NdiscCache::Entry * >', 'ns3::NdiscCache::Entry *', container_type='list')
<     module.add_container('std::set< unsigned int >', 'unsigned int', container_type='set')
<     typehandlers.add_type_alias('void ( * ) ( ns3::TcpSocketState::TcpCongState_t const, ns3::TcpSocketState::TcpCongState_t const )', 'ns3::TcpCongStatesTracedValueCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::TcpSocketState::TcpCongState_t const, ns3::TcpSocketState::TcpCongState_t const )*', 'ns3::TcpCongStatesTracedValueCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::TcpSocketState::TcpCongState_t const, ns3::TcpSocketState::TcpCongState_t const )&', 'ns3::TcpCongStatesTracedValueCallback&')
<     typehandlers.add_type_alias('void ( * ) ( ns3::TcpSocketState::EcnState_t const, ns3::TcpSocketState::EcnState_t const )', 'ns3::EcnStatesTracedValueCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::TcpSocketState::EcnState_t const, ns3::TcpSocketState::EcnState_t const )*', 'ns3::EcnStatesTracedValueCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::TcpSocketState::EcnState_t const, ns3::TcpSocketState::EcnState_t const )&', 'ns3::EcnStatesTracedValueCallback&')
<     typehandlers.add_type_alias('void ( * ) ( ns3::TcpSocket::TcpStates_t const, ns3::TcpSocket::TcpStates_t const )', 'ns3::TcpStatesTracedValueCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::TcpSocket::TcpStates_t const, ns3::TcpSocket::TcpStates_t const )*', 'ns3::TcpStatesTracedValueCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::TcpSocket::TcpStates_t const, ns3::TcpSocket::TcpStates_t const )&', 'ns3::TcpStatesTracedValueCallback&')
<     typehandlers.add_type_alias('ns3::SequenceNumber< unsigned int, int >', 'ns3::SequenceNumber32')
<     typehandlers.add_type_alias('ns3::SequenceNumber< unsigned int, int >*', 'ns3::SequenceNumber32*')
<     typehandlers.add_type_alias('ns3::SequenceNumber< unsigned int, int >&', 'ns3::SequenceNumber32&')
<     typehandlers.add_type_alias('ns3::SequenceNumber< unsigned short, short >', 'ns3::SequenceNumber16')
<     typehandlers.add_type_alias('ns3::SequenceNumber< unsigned short, short >*', 'ns3::SequenceNumber16*')
<     typehandlers.add_type_alias('ns3::SequenceNumber< unsigned short, short >&', 'ns3::SequenceNumber16&')
<     typehandlers.add_type_alias('ns3::SequenceNumber< unsigned char, signed char >', 'ns3::SequenceNumber8')
<     typehandlers.add_type_alias('ns3::SequenceNumber< unsigned char, signed char >*', 'ns3::SequenceNumber8*')
<     typehandlers.add_type_alias('ns3::SequenceNumber< unsigned char, signed char >&', 'ns3::SequenceNumber8&')
---
>     module.add_container('std::vector< unsigned int >', 'unsigned int', container_type=u'vector')
>     module.add_container('std::vector< bool >', 'bool', container_type=u'vector')
>     module.add_container('std::list< ns3::RipRte >', 'ns3::RipRte', container_type=u'list')
>     module.add_container('std::list< ns3::RipNgRte >', 'ns3::RipNgRte', container_type=u'list')
>     module.add_container('std::vector< ns3::Ipv6Address >', 'ns3::Ipv6Address', container_type=u'vector')
>     module.add_container('std::list< ns3::Ptr< ns3::TcpOption const > >', 'ns3::Ptr< ns3::TcpOption const >', container_type=u'list')
>     module.add_container('std::list< std::pair< ns3::SequenceNumber< unsigned int, int >, ns3::SequenceNumber< unsigned int, int > > >', 'std::pair< ns3::SequenceNumber< unsigned int, int >, ns3::SequenceNumber< unsigned int, int > >', container_type=u'list')
>     module.add_container('ns3::TcpOptionSack::SackList', 'std::pair< ns3::SequenceNumber< unsigned int, int >, ns3::SequenceNumber< unsigned int, int > >', container_type=u'list')
>     module.add_container('std::list< std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv4Header > >', 'std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv4Header >', container_type=u'list')
>     module.add_container('std::list< ns3::ArpCache::Entry * >', 'ns3::ArpCache::Entry *', container_type=u'list')
>     module.add_container('std::map< unsigned int, unsigned int >', ('unsigned int', 'unsigned int'), container_type=u'map')
>     module.add_container('std::list< std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv6Header > >', 'std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv6Header >', container_type=u'list')
>     module.add_container('std::list< ns3::NdiscCache::Entry * >', 'ns3::NdiscCache::Entry *', container_type=u'list')
>     module.add_container('std::set< unsigned int >', 'unsigned int', container_type=u'set')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::TcpSocketState::TcpCongState_t const, ns3::TcpSocketState::TcpCongState_t const )', u'ns3::TcpCongStatesTracedValueCallback')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::TcpSocketState::TcpCongState_t const, ns3::TcpSocketState::TcpCongState_t const )*', u'ns3::TcpCongStatesTracedValueCallback*')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::TcpSocketState::TcpCongState_t const, ns3::TcpSocketState::TcpCongState_t const )&', u'ns3::TcpCongStatesTracedValueCallback&')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::TcpSocketState::EcnState_t const, ns3::TcpSocketState::EcnState_t const )', u'ns3::EcnStatesTracedValueCallback')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::TcpSocketState::EcnState_t const, ns3::TcpSocketState::EcnState_t const )*', u'ns3::EcnStatesTracedValueCallback*')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::TcpSocketState::EcnState_t const, ns3::TcpSocketState::EcnState_t const )&', u'ns3::EcnStatesTracedValueCallback&')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::TcpSocket::TcpStates_t const, ns3::TcpSocket::TcpStates_t const )', u'ns3::TcpStatesTracedValueCallback')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::TcpSocket::TcpStates_t const, ns3::TcpSocket::TcpStates_t const )*', u'ns3::TcpStatesTracedValueCallback*')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::TcpSocket::TcpStates_t const, ns3::TcpSocket::TcpStates_t const )&', u'ns3::TcpStatesTracedValueCallback&')
>     typehandlers.add_type_alias(u'ns3::SequenceNumber< unsigned int, int >', u'ns3::SequenceNumber32')
>     typehandlers.add_type_alias(u'ns3::SequenceNumber< unsigned int, int >*', u'ns3::SequenceNumber32*')
>     typehandlers.add_type_alias(u'ns3::SequenceNumber< unsigned int, int >&', u'ns3::SequenceNumber32&')
>     typehandlers.add_type_alias(u'ns3::SequenceNumber< unsigned short, short >', u'ns3::SequenceNumber16')
>     typehandlers.add_type_alias(u'ns3::SequenceNumber< unsigned short, short >*', u'ns3::SequenceNumber16*')
>     typehandlers.add_type_alias(u'ns3::SequenceNumber< unsigned short, short >&', u'ns3::SequenceNumber16&')
>     typehandlers.add_type_alias(u'ns3::SequenceNumber< unsigned char, signed char >', u'ns3::SequenceNumber8')
>     typehandlers.add_type_alias(u'ns3::SequenceNumber< unsigned char, signed char >*', u'ns3::SequenceNumber8*')
>     typehandlers.add_type_alias(u'ns3::SequenceNumber< unsigned char, signed char >&', u'ns3::SequenceNumber8&')
1204,1209c1138,1143
<     typehandlers.add_type_alias('uint32_t ( * ) ( char const *, std::size_t const )', 'ns3::Hash::Hash32Function_ptr')
<     typehandlers.add_type_alias('uint32_t ( * ) ( char const *, std::size_t const )*', 'ns3::Hash::Hash32Function_ptr*')
<     typehandlers.add_type_alias('uint32_t ( * ) ( char const *, std::size_t const )&', 'ns3::Hash::Hash32Function_ptr&')
<     typehandlers.add_type_alias('uint64_t ( * ) ( char const *, std::size_t const )', 'ns3::Hash::Hash64Function_ptr')
<     typehandlers.add_type_alias('uint64_t ( * ) ( char const *, std::size_t const )*', 'ns3::Hash::Hash64Function_ptr*')
<     typehandlers.add_type_alias('uint64_t ( * ) ( char const *, std::size_t const )&', 'ns3::Hash::Hash64Function_ptr&')
---
>     typehandlers.add_type_alias(u'uint32_t ( * ) ( char const *, std::size_t const )', u'ns3::Hash::Hash32Function_ptr')
>     typehandlers.add_type_alias(u'uint32_t ( * ) ( char const *, std::size_t const )*', u'ns3::Hash::Hash32Function_ptr*')
>     typehandlers.add_type_alias(u'uint32_t ( * ) ( char const *, std::size_t const )&', u'ns3::Hash::Hash32Function_ptr&')
>     typehandlers.add_type_alias(u'uint64_t ( * ) ( char const *, std::size_t const )', u'ns3::Hash::Hash64Function_ptr')
>     typehandlers.add_type_alias(u'uint64_t ( * ) ( char const *, std::size_t const )*', u'ns3::Hash::Hash64Function_ptr*')
>     typehandlers.add_type_alias(u'uint64_t ( * ) ( char const *, std::size_t const )&', u'ns3::Hash::Hash64Function_ptr&')
1232,1270c1166,1204
<     typehandlers.add_type_alias('void ( * ) ( ns3::Time, ns3::Time )', 'ns3::TracedValueCallback::Time')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Time, ns3::Time )*', 'ns3::TracedValueCallback::Time*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Time, ns3::Time )&', 'ns3::TracedValueCallback::Time&')
<     typehandlers.add_type_alias('void ( * ) ( ns3::TcpSocketState::TcpCongState_t const, ns3::TcpSocketState::TcpCongState_t const )', 'ns3::TracedValueCallback::TcpCongState')
<     typehandlers.add_type_alias('void ( * ) ( ns3::TcpSocketState::TcpCongState_t const, ns3::TcpSocketState::TcpCongState_t const )*', 'ns3::TracedValueCallback::TcpCongState*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::TcpSocketState::TcpCongState_t const, ns3::TcpSocketState::TcpCongState_t const )&', 'ns3::TracedValueCallback::TcpCongState&')
<     typehandlers.add_type_alias('void ( * ) ( ns3::TcpSocketState::EcnState_t const, ns3::TcpSocketState::EcnState_t const )', 'ns3::TracedValueCallback::EcnState')
<     typehandlers.add_type_alias('void ( * ) ( ns3::TcpSocketState::EcnState_t const, ns3::TcpSocketState::EcnState_t const )*', 'ns3::TracedValueCallback::EcnState*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::TcpSocketState::EcnState_t const, ns3::TcpSocketState::EcnState_t const )&', 'ns3::TracedValueCallback::EcnState&')
<     typehandlers.add_type_alias('void ( * ) ( ns3::SequenceNumber32, ns3::SequenceNumber32 )', 'ns3::TracedValueCallback::SequenceNumber32')
<     typehandlers.add_type_alias('void ( * ) ( ns3::SequenceNumber32, ns3::SequenceNumber32 )*', 'ns3::TracedValueCallback::SequenceNumber32*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::SequenceNumber32, ns3::SequenceNumber32 )&', 'ns3::TracedValueCallback::SequenceNumber32&')
<     typehandlers.add_type_alias('void ( * ) ( bool, bool )', 'ns3::TracedValueCallback::Bool')
<     typehandlers.add_type_alias('void ( * ) ( bool, bool )*', 'ns3::TracedValueCallback::Bool*')
<     typehandlers.add_type_alias('void ( * ) ( bool, bool )&', 'ns3::TracedValueCallback::Bool&')
<     typehandlers.add_type_alias('void ( * ) ( int8_t, int8_t )', 'ns3::TracedValueCallback::Int8')
<     typehandlers.add_type_alias('void ( * ) ( int8_t, int8_t )*', 'ns3::TracedValueCallback::Int8*')
<     typehandlers.add_type_alias('void ( * ) ( int8_t, int8_t )&', 'ns3::TracedValueCallback::Int8&')
<     typehandlers.add_type_alias('void ( * ) ( uint8_t, uint8_t )', 'ns3::TracedValueCallback::Uint8')
<     typehandlers.add_type_alias('void ( * ) ( uint8_t, uint8_t )*', 'ns3::TracedValueCallback::Uint8*')
<     typehandlers.add_type_alias('void ( * ) ( uint8_t, uint8_t )&', 'ns3::TracedValueCallback::Uint8&')
<     typehandlers.add_type_alias('void ( * ) ( int16_t, int16_t )', 'ns3::TracedValueCallback::Int16')
<     typehandlers.add_type_alias('void ( * ) ( int16_t, int16_t )*', 'ns3::TracedValueCallback::Int16*')
<     typehandlers.add_type_alias('void ( * ) ( int16_t, int16_t )&', 'ns3::TracedValueCallback::Int16&')
<     typehandlers.add_type_alias('void ( * ) ( uint16_t, uint16_t )', 'ns3::TracedValueCallback::Uint16')
<     typehandlers.add_type_alias('void ( * ) ( uint16_t, uint16_t )*', 'ns3::TracedValueCallback::Uint16*')
<     typehandlers.add_type_alias('void ( * ) ( uint16_t, uint16_t )&', 'ns3::TracedValueCallback::Uint16&')
<     typehandlers.add_type_alias('void ( * ) ( int32_t, int32_t )', 'ns3::TracedValueCallback::Int32')
<     typehandlers.add_type_alias('void ( * ) ( int32_t, int32_t )*', 'ns3::TracedValueCallback::Int32*')
<     typehandlers.add_type_alias('void ( * ) ( int32_t, int32_t )&', 'ns3::TracedValueCallback::Int32&')
<     typehandlers.add_type_alias('void ( * ) ( uint32_t, uint32_t )', 'ns3::TracedValueCallback::Uint32')
<     typehandlers.add_type_alias('void ( * ) ( uint32_t, uint32_t )*', 'ns3::TracedValueCallback::Uint32*')
<     typehandlers.add_type_alias('void ( * ) ( uint32_t, uint32_t )&', 'ns3::TracedValueCallback::Uint32&')
<     typehandlers.add_type_alias('void ( * ) ( double, double )', 'ns3::TracedValueCallback::Double')
<     typehandlers.add_type_alias('void ( * ) ( double, double )*', 'ns3::TracedValueCallback::Double*')
<     typehandlers.add_type_alias('void ( * ) ( double, double )&', 'ns3::TracedValueCallback::Double&')
<     typehandlers.add_type_alias('void ( * ) (  )', 'ns3::TracedValueCallback::Void')
<     typehandlers.add_type_alias('void ( * ) (  )*', 'ns3::TracedValueCallback::Void*')
<     typehandlers.add_type_alias('void ( * ) (  )&', 'ns3::TracedValueCallback::Void&')
---
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Time, ns3::Time )', u'ns3::TracedValueCallback::Time')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Time, ns3::Time )*', u'ns3::TracedValueCallback::Time*')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Time, ns3::Time )&', u'ns3::TracedValueCallback::Time&')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::TcpSocketState::TcpCongState_t const, ns3::TcpSocketState::TcpCongState_t const )', u'ns3::TracedValueCallback::TcpCongState')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::TcpSocketState::TcpCongState_t const, ns3::TcpSocketState::TcpCongState_t const )*', u'ns3::TracedValueCallback::TcpCongState*')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::TcpSocketState::TcpCongState_t const, ns3::TcpSocketState::TcpCongState_t const )&', u'ns3::TracedValueCallback::TcpCongState&')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::TcpSocketState::EcnState_t const, ns3::TcpSocketState::EcnState_t const )', u'ns3::TracedValueCallback::EcnState')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::TcpSocketState::EcnState_t const, ns3::TcpSocketState::EcnState_t const )*', u'ns3::TracedValueCallback::EcnState*')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::TcpSocketState::EcnState_t const, ns3::TcpSocketState::EcnState_t const )&', u'ns3::TracedValueCallback::EcnState&')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::SequenceNumber32, ns3::SequenceNumber32 )', u'ns3::TracedValueCallback::SequenceNumber32')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::SequenceNumber32, ns3::SequenceNumber32 )*', u'ns3::TracedValueCallback::SequenceNumber32*')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::SequenceNumber32, ns3::SequenceNumber32 )&', u'ns3::TracedValueCallback::SequenceNumber32&')
>     typehandlers.add_type_alias(u'void ( * ) ( bool, bool )', u'ns3::TracedValueCallback::Bool')
>     typehandlers.add_type_alias(u'void ( * ) ( bool, bool )*', u'ns3::TracedValueCallback::Bool*')
>     typehandlers.add_type_alias(u'void ( * ) ( bool, bool )&', u'ns3::TracedValueCallback::Bool&')
>     typehandlers.add_type_alias(u'void ( * ) ( int8_t, int8_t )', u'ns3::TracedValueCallback::Int8')
>     typehandlers.add_type_alias(u'void ( * ) ( int8_t, int8_t )*', u'ns3::TracedValueCallback::Int8*')
>     typehandlers.add_type_alias(u'void ( * ) ( int8_t, int8_t )&', u'ns3::TracedValueCallback::Int8&')
>     typehandlers.add_type_alias(u'void ( * ) ( uint8_t, uint8_t )', u'ns3::TracedValueCallback::Uint8')
>     typehandlers.add_type_alias(u'void ( * ) ( uint8_t, uint8_t )*', u'ns3::TracedValueCallback::Uint8*')
>     typehandlers.add_type_alias(u'void ( * ) ( uint8_t, uint8_t )&', u'ns3::TracedValueCallback::Uint8&')
>     typehandlers.add_type_alias(u'void ( * ) ( int16_t, int16_t )', u'ns3::TracedValueCallback::Int16')
>     typehandlers.add_type_alias(u'void ( * ) ( int16_t, int16_t )*', u'ns3::TracedValueCallback::Int16*')
>     typehandlers.add_type_alias(u'void ( * ) ( int16_t, int16_t )&', u'ns3::TracedValueCallback::Int16&')
>     typehandlers.add_type_alias(u'void ( * ) ( uint16_t, uint16_t )', u'ns3::TracedValueCallback::Uint16')
>     typehandlers.add_type_alias(u'void ( * ) ( uint16_t, uint16_t )*', u'ns3::TracedValueCallback::Uint16*')
>     typehandlers.add_type_alias(u'void ( * ) ( uint16_t, uint16_t )&', u'ns3::TracedValueCallback::Uint16&')
>     typehandlers.add_type_alias(u'void ( * ) ( int32_t, int32_t )', u'ns3::TracedValueCallback::Int32')
>     typehandlers.add_type_alias(u'void ( * ) ( int32_t, int32_t )*', u'ns3::TracedValueCallback::Int32*')
>     typehandlers.add_type_alias(u'void ( * ) ( int32_t, int32_t )&', u'ns3::TracedValueCallback::Int32&')
>     typehandlers.add_type_alias(u'void ( * ) ( uint32_t, uint32_t )', u'ns3::TracedValueCallback::Uint32')
>     typehandlers.add_type_alias(u'void ( * ) ( uint32_t, uint32_t )*', u'ns3::TracedValueCallback::Uint32*')
>     typehandlers.add_type_alias(u'void ( * ) ( uint32_t, uint32_t )&', u'ns3::TracedValueCallback::Uint32&')
>     typehandlers.add_type_alias(u'void ( * ) ( double, double )', u'ns3::TracedValueCallback::Double')
>     typehandlers.add_type_alias(u'void ( * ) ( double, double )*', u'ns3::TracedValueCallback::Double*')
>     typehandlers.add_type_alias(u'void ( * ) ( double, double )&', u'ns3::TracedValueCallback::Double&')
>     typehandlers.add_type_alias(u'void ( * ) (  )', u'ns3::TracedValueCallback::Void')
>     typehandlers.add_type_alias(u'void ( * ) (  )*', u'ns3::TracedValueCallback::Void*')
>     typehandlers.add_type_alias(u'void ( * ) (  )&', u'ns3::TracedValueCallback::Void&')
1325,1326d1258
<     register_Ns3Ipv4EndPoint_methods(root_module, root_module['ns3::Ipv4EndPoint'])
<     register_Ns3Ipv4EndPointDemux_methods(root_module, root_module['ns3::Ipv4EndPointDemux'])
1337,1338d1268
<     register_Ns3Ipv6EndPoint_methods(root_module, root_module['ns3::Ipv6EndPoint'])
<     register_Ns3Ipv6EndPointDemux_methods(root_module, root_module['ns3::Ipv6EndPointDemux'])
1378d1307
<     register_Ns3TcpTxItemRateInformation_methods(root_module, root_module['ns3::TcpTxItem::RateInformation'])
1477,1479d1405
<     register_Ns3TcpRateOps_methods(root_module, root_module['ns3::TcpRateOps'])
<     register_Ns3TcpRateOpsTcpRateConnection_methods(root_module, root_module['ns3::TcpRateOps::TcpRateConnection'])
<     register_Ns3TcpRateOpsTcpRateSample_methods(root_module, root_module['ns3::TcpRateOps::TcpRateSample'])
1605d1530
<     register_Ns3TcpDctcp_methods(root_module, root_module['ns3::TcpDctcp'])
1614d1538
<     register_Ns3TcpRateLinux_methods(root_module, root_module['ns3::TcpRateLinux'])
1632,1633d1555
<     register_Ns3CallbackImpl__Void_Const_ns3TcpRateOpsTcpRateConnection___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, const ns3::TcpRateOps::TcpRateConnection &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
<     register_Ns3CallbackImpl__Void_Const_ns3TcpRateOpsTcpRateSample___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, const ns3::TcpRateOps::TcpRateSample &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
1635,1636d1556
<     register_Ns3CallbackImpl__Void_Ns3Ipv4Address_Unsigned_char_Unsigned_char_Unsigned_char_Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ipv4Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
<     register_Ns3CallbackImpl__Void_Ns3Ipv6Address_Unsigned_char_Unsigned_char_Unsigned_char_Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ipv6Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
1644d1563
<     register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Ns3Ipv4Header_Unsigned_short_Ns3Ptr__lt__ns3Ipv4Interface__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<ns3::Packet>, ns3::Ipv4Header, unsigned short, ns3::Ptr<ns3::Ipv4Interface>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
1646d1564
<     register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Ns3Ipv6Header_Unsigned_short_Ns3Ptr__lt__ns3Ipv6Interface__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<ns3::Packet>, ns3::Ipv6Header, unsigned short, ns3::Ptr<ns3::Ipv6Interface>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
1655d1572
<     register_Ns3CallbackImpl__Void_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
1863c1780
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
1923c1840
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
1983c1900
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
2463c2380
<                    is_const=True, deprecated=True)
---
>                    deprecated=True, is_const=True)
3145c3062
<                    is_const=True, deprecated=True)
---
>                    is_const=True)
3278,3395d3194
< def register_Ns3Ipv4EndPoint_methods(root_module, cls):
<     ## ipv4-end-point.h (module 'internet'): ns3::Ipv4EndPoint::Ipv4EndPoint(ns3::Ipv4EndPoint const & arg0) [constructor]
<     cls.add_constructor([param('ns3::Ipv4EndPoint const &', 'arg0')])
<     ## ipv4-end-point.h (module 'internet'): ns3::Ipv4EndPoint::Ipv4EndPoint(ns3::Ipv4Address address, uint16_t port) [constructor]
<     cls.add_constructor([param('ns3::Ipv4Address', 'address'), param('uint16_t', 'port')])
<     ## ipv4-end-point.h (module 'internet'): void ns3::Ipv4EndPoint::BindToNetDevice(ns3::Ptr<ns3::NetDevice> netdevice) [member function]
<     cls.add_method('BindToNetDevice', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::NetDevice >', 'netdevice')])
<     ## ipv4-end-point.h (module 'internet'): void ns3::Ipv4EndPoint::ForwardIcmp(ns3::Ipv4Address icmpSource, uint8_t icmpTtl, uint8_t icmpType, uint8_t icmpCode, uint32_t icmpInfo) [member function]
<     cls.add_method('ForwardIcmp', 
<                    'void', 
<                    [param('ns3::Ipv4Address', 'icmpSource'), param('uint8_t', 'icmpTtl'), param('uint8_t', 'icmpType'), param('uint8_t', 'icmpCode'), param('uint32_t', 'icmpInfo')])
<     ## ipv4-end-point.h (module 'internet'): void ns3::Ipv4EndPoint::ForwardUp(ns3::Ptr<ns3::Packet> p, ns3::Ipv4Header const & header, uint16_t sport, ns3::Ptr<ns3::Ipv4Interface> incomingInterface) [member function]
<     cls.add_method('ForwardUp', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Packet >', 'p'), param('ns3::Ipv4Header const &', 'header'), param('uint16_t', 'sport'), param('ns3::Ptr< ns3::Ipv4Interface >', 'incomingInterface')])
<     ## ipv4-end-point.h (module 'internet'): ns3::Ptr<ns3::NetDevice> ns3::Ipv4EndPoint::GetBoundNetDevice() [member function]
<     cls.add_method('GetBoundNetDevice', 
<                    'ns3::Ptr< ns3::NetDevice >', 
<                    [])
<     ## ipv4-end-point.h (module 'internet'): ns3::Ipv4Address ns3::Ipv4EndPoint::GetLocalAddress() [member function]
<     cls.add_method('GetLocalAddress', 
<                    'ns3::Ipv4Address', 
<                    [])
<     ## ipv4-end-point.h (module 'internet'): uint16_t ns3::Ipv4EndPoint::GetLocalPort() [member function]
<     cls.add_method('GetLocalPort', 
<                    'uint16_t', 
<                    [])
<     ## ipv4-end-point.h (module 'internet'): ns3::Ipv4Address ns3::Ipv4EndPoint::GetPeerAddress() [member function]
<     cls.add_method('GetPeerAddress', 
<                    'ns3::Ipv4Address', 
<                    [])
<     ## ipv4-end-point.h (module 'internet'): uint16_t ns3::Ipv4EndPoint::GetPeerPort() [member function]
<     cls.add_method('GetPeerPort', 
<                    'uint16_t', 
<                    [])
<     ## ipv4-end-point.h (module 'internet'): bool ns3::Ipv4EndPoint::IsRxEnabled() [member function]
<     cls.add_method('IsRxEnabled', 
<                    'bool', 
<                    [])
<     ## ipv4-end-point.h (module 'internet'): void ns3::Ipv4EndPoint::SetDestroyCallback(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> callback) [member function]
<     cls.add_method('SetDestroyCallback', 
<                    'void', 
<                    [param('ns3::Callback< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'callback')])
<     ## ipv4-end-point.h (module 'internet'): void ns3::Ipv4EndPoint::SetIcmpCallback(ns3::Callback<void, ns3::Ipv4Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty> callback) [member function]
<     cls.add_method('SetIcmpCallback', 
<                    'void', 
<                    [param('ns3::Callback< void, ns3::Ipv4Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'callback')])
<     ## ipv4-end-point.h (module 'internet'): void ns3::Ipv4EndPoint::SetLocalAddress(ns3::Ipv4Address address) [member function]
<     cls.add_method('SetLocalAddress', 
<                    'void', 
<                    [param('ns3::Ipv4Address', 'address')])
<     ## ipv4-end-point.h (module 'internet'): void ns3::Ipv4EndPoint::SetPeer(ns3::Ipv4Address address, uint16_t port) [member function]
<     cls.add_method('SetPeer', 
<                    'void', 
<                    [param('ns3::Ipv4Address', 'address'), param('uint16_t', 'port')])
<     ## ipv4-end-point.h (module 'internet'): void ns3::Ipv4EndPoint::SetRxCallback(ns3::Callback<void, ns3::Ptr<ns3::Packet>, ns3::Ipv4Header, unsigned short, ns3::Ptr<ns3::Ipv4Interface>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> callback) [member function]
<     cls.add_method('SetRxCallback', 
<                    'void', 
<                    [param('ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Ipv4Header, unsigned short, ns3::Ptr< ns3::Ipv4Interface >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'callback')])
<     ## ipv4-end-point.h (module 'internet'): void ns3::Ipv4EndPoint::SetRxEnabled(bool enabled) [member function]
<     cls.add_method('SetRxEnabled', 
<                    'void', 
<                    [param('bool', 'enabled')])
<     return
< 
< def register_Ns3Ipv4EndPointDemux_methods(root_module, cls):
<     ## ipv4-end-point-demux.h (module 'internet'): ns3::Ipv4EndPointDemux::Ipv4EndPointDemux(ns3::Ipv4EndPointDemux const & arg0) [constructor]
<     cls.add_constructor([param('ns3::Ipv4EndPointDemux const &', 'arg0')])
<     ## ipv4-end-point-demux.h (module 'internet'): ns3::Ipv4EndPointDemux::Ipv4EndPointDemux() [constructor]
<     cls.add_constructor([])
<     ## ipv4-end-point-demux.h (module 'internet'): ns3::Ipv4EndPoint * ns3::Ipv4EndPointDemux::Allocate() [member function]
<     cls.add_method('Allocate', 
<                    'ns3::Ipv4EndPoint *', 
<                    [])
<     ## ipv4-end-point-demux.h (module 'internet'): ns3::Ipv4EndPoint * ns3::Ipv4EndPointDemux::Allocate(ns3::Ipv4Address address) [member function]
<     cls.add_method('Allocate', 
<                    'ns3::Ipv4EndPoint *', 
<                    [param('ns3::Ipv4Address', 'address')])
<     ## ipv4-end-point-demux.h (module 'internet'): ns3::Ipv4EndPoint * ns3::Ipv4EndPointDemux::Allocate(ns3::Ptr<ns3::NetDevice> boundNetDevice, uint16_t port) [member function]
<     cls.add_method('Allocate', 
<                    'ns3::Ipv4EndPoint *', 
<                    [param('ns3::Ptr< ns3::NetDevice >', 'boundNetDevice'), param('uint16_t', 'port')])
<     ## ipv4-end-point-demux.h (module 'internet'): ns3::Ipv4EndPoint * ns3::Ipv4EndPointDemux::Allocate(ns3::Ptr<ns3::NetDevice> boundNetDevice, ns3::Ipv4Address address, uint16_t port) [member function]
<     cls.add_method('Allocate', 
<                    'ns3::Ipv4EndPoint *', 
<                    [param('ns3::Ptr< ns3::NetDevice >', 'boundNetDevice'), param('ns3::Ipv4Address', 'address'), param('uint16_t', 'port')])
<     ## ipv4-end-point-demux.h (module 'internet'): ns3::Ipv4EndPoint * ns3::Ipv4EndPointDemux::Allocate(ns3::Ptr<ns3::NetDevice> boundNetDevice, ns3::Ipv4Address localAddress, uint16_t localPort, ns3::Ipv4Address peerAddress, uint16_t peerPort) [member function]
<     cls.add_method('Allocate', 
<                    'ns3::Ipv4EndPoint *', 
<                    [param('ns3::Ptr< ns3::NetDevice >', 'boundNetDevice'), param('ns3::Ipv4Address', 'localAddress'), param('uint16_t', 'localPort'), param('ns3::Ipv4Address', 'peerAddress'), param('uint16_t', 'peerPort')])
<     ## ipv4-end-point-demux.h (module 'internet'): void ns3::Ipv4EndPointDemux::DeAllocate(ns3::Ipv4EndPoint * endPoint) [member function]
<     cls.add_method('DeAllocate', 
<                    'void', 
<                    [param('ns3::Ipv4EndPoint *', 'endPoint')])
<     ## ipv4-end-point-demux.h (module 'internet'): ns3::Ipv4EndPointDemux::EndPoints ns3::Ipv4EndPointDemux::GetAllEndPoints() [member function]
<     cls.add_method('GetAllEndPoints', 
<                    'ns3::Ipv4EndPointDemux::EndPoints', 
<                    [])
<     ## ipv4-end-point-demux.h (module 'internet'): ns3::Ipv4EndPointDemux::EndPoints ns3::Ipv4EndPointDemux::Lookup(ns3::Ipv4Address daddr, uint16_t dport, ns3::Ipv4Address saddr, uint16_t sport, ns3::Ptr<ns3::Ipv4Interface> incomingInterface) [member function]
<     cls.add_method('Lookup', 
<                    'ns3::Ipv4EndPointDemux::EndPoints', 
<                    [param('ns3::Ipv4Address', 'daddr'), param('uint16_t', 'dport'), param('ns3::Ipv4Address', 'saddr'), param('uint16_t', 'sport'), param('ns3::Ptr< ns3::Ipv4Interface >', 'incomingInterface')])
<     ## ipv4-end-point-demux.h (module 'internet'): bool ns3::Ipv4EndPointDemux::LookupLocal(ns3::Ptr<ns3::NetDevice> boundNetDevice, ns3::Ipv4Address addr, uint16_t port) [member function]
<     cls.add_method('LookupLocal', 
<                    'bool', 
<                    [param('ns3::Ptr< ns3::NetDevice >', 'boundNetDevice'), param('ns3::Ipv4Address', 'addr'), param('uint16_t', 'port')])
<     ## ipv4-end-point-demux.h (module 'internet'): bool ns3::Ipv4EndPointDemux::LookupPortLocal(uint16_t port) [member function]
<     cls.add_method('LookupPortLocal', 
<                    'bool', 
<                    [param('uint16_t', 'port')])
<     ## ipv4-end-point-demux.h (module 'internet'): ns3::Ipv4EndPoint * ns3::Ipv4EndPointDemux::SimpleLookup(ns3::Ipv4Address daddr, uint16_t dport, ns3::Ipv4Address saddr, uint16_t sport) [member function]
<     cls.add_method('SimpleLookup', 
<                    'ns3::Ipv4EndPoint *', 
<                    [param('ns3::Ipv4Address', 'daddr'), param('uint16_t', 'dport'), param('ns3::Ipv4Address', 'saddr'), param('uint16_t', 'sport')])
<     return
< 
3555c3354
<                    is_const=True, deprecated=True)
---
>                    is_const=True)
3627c3426
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
3632c3431
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
3825c3624
<     ## ipv6-address.h (module 'network'): ns3::Ipv6Address ns3::Ipv6Address::CombinePrefix(ns3::Ipv6Prefix const & prefix) const [member function]
---
>     ## ipv6-address.h (module 'network'): ns3::Ipv6Address ns3::Ipv6Address::CombinePrefix(ns3::Ipv6Prefix const & prefix) [member function]
3828,3829c3627
<                    [param('ns3::Ipv6Prefix const &', 'prefix')], 
<                    is_const=True)
---
>                    [param('ns3::Ipv6Prefix const &', 'prefix')])
3885,3889d3682
<     ## ipv6-address.h (module 'network'): bool ns3::Ipv6Address::HasPrefix(ns3::Ipv6Prefix const & prefix) const [member function]
<     cls.add_method('HasPrefix', 
<                    'bool', 
<                    [param('ns3::Ipv6Prefix const &', 'prefix')], 
<                    is_const=True)
3894c3687
<                    is_const=True, deprecated=True)
---
>                    deprecated=True, is_const=True)
3919c3712
<                    is_const=True, deprecated=True)
---
>                    is_const=True)
3955,3959d3747
<     ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::MakeAutoconfiguredAddress(ns3::Address addr, ns3::Ipv6Address prefix) [member function]
<     cls.add_method('MakeAutoconfiguredAddress', 
<                    'ns3::Ipv6Address', 
<                    [param('ns3::Address', 'addr'), param('ns3::Ipv6Address', 'prefix')], 
<                    is_static=True)
3980,3984d3767
<     ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::MakeAutoconfiguredLinkLocalAddress(ns3::Address mac) [member function]
<     cls.add_method('MakeAutoconfiguredLinkLocalAddress', 
<                    'ns3::Ipv6Address', 
<                    [param('ns3::Address', 'mac')], 
<                    is_static=True)
4134,4256d3916
< def register_Ns3Ipv6EndPoint_methods(root_module, cls):
<     ## ipv6-end-point.h (module 'internet'): ns3::Ipv6EndPoint::Ipv6EndPoint(ns3::Ipv6EndPoint const & arg0) [constructor]
<     cls.add_constructor([param('ns3::Ipv6EndPoint const &', 'arg0')])
<     ## ipv6-end-point.h (module 'internet'): ns3::Ipv6EndPoint::Ipv6EndPoint(ns3::Ipv6Address addr, uint16_t port) [constructor]
<     cls.add_constructor([param('ns3::Ipv6Address', 'addr'), param('uint16_t', 'port')])
<     ## ipv6-end-point.h (module 'internet'): void ns3::Ipv6EndPoint::BindToNetDevice(ns3::Ptr<ns3::NetDevice> netdevice) [member function]
<     cls.add_method('BindToNetDevice', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::NetDevice >', 'netdevice')])
<     ## ipv6-end-point.h (module 'internet'): void ns3::Ipv6EndPoint::ForwardIcmp(ns3::Ipv6Address src, uint8_t ttl, uint8_t type, uint8_t code, uint32_t info) [member function]
<     cls.add_method('ForwardIcmp', 
<                    'void', 
<                    [param('ns3::Ipv6Address', 'src'), param('uint8_t', 'ttl'), param('uint8_t', 'type'), param('uint8_t', 'code'), param('uint32_t', 'info')])
<     ## ipv6-end-point.h (module 'internet'): void ns3::Ipv6EndPoint::ForwardUp(ns3::Ptr<ns3::Packet> p, ns3::Ipv6Header header, uint16_t port, ns3::Ptr<ns3::Ipv6Interface> incomingInterface) [member function]
<     cls.add_method('ForwardUp', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Packet >', 'p'), param('ns3::Ipv6Header', 'header'), param('uint16_t', 'port'), param('ns3::Ptr< ns3::Ipv6Interface >', 'incomingInterface')])
<     ## ipv6-end-point.h (module 'internet'): ns3::Ptr<ns3::NetDevice> ns3::Ipv6EndPoint::GetBoundNetDevice() [member function]
<     cls.add_method('GetBoundNetDevice', 
<                    'ns3::Ptr< ns3::NetDevice >', 
<                    [])
<     ## ipv6-end-point.h (module 'internet'): ns3::Ipv6Address ns3::Ipv6EndPoint::GetLocalAddress() [member function]
<     cls.add_method('GetLocalAddress', 
<                    'ns3::Ipv6Address', 
<                    [])
<     ## ipv6-end-point.h (module 'internet'): uint16_t ns3::Ipv6EndPoint::GetLocalPort() [member function]
<     cls.add_method('GetLocalPort', 
<                    'uint16_t', 
<                    [])
<     ## ipv6-end-point.h (module 'internet'): ns3::Ipv6Address ns3::Ipv6EndPoint::GetPeerAddress() [member function]
<     cls.add_method('GetPeerAddress', 
<                    'ns3::Ipv6Address', 
<                    [])
<     ## ipv6-end-point.h (module 'internet'): uint16_t ns3::Ipv6EndPoint::GetPeerPort() [member function]
<     cls.add_method('GetPeerPort', 
<                    'uint16_t', 
<                    [])
<     ## ipv6-end-point.h (module 'internet'): bool ns3::Ipv6EndPoint::IsRxEnabled() [member function]
<     cls.add_method('IsRxEnabled', 
<                    'bool', 
<                    [])
<     ## ipv6-end-point.h (module 'internet'): void ns3::Ipv6EndPoint::SetDestroyCallback(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> callback) [member function]
<     cls.add_method('SetDestroyCallback', 
<                    'void', 
<                    [param('ns3::Callback< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'callback')])
<     ## ipv6-end-point.h (module 'internet'): void ns3::Ipv6EndPoint::SetIcmpCallback(ns3::Callback<void, ns3::Ipv6Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty> callback) [member function]
<     cls.add_method('SetIcmpCallback', 
<                    'void', 
<                    [param('ns3::Callback< void, ns3::Ipv6Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'callback')])
<     ## ipv6-end-point.h (module 'internet'): void ns3::Ipv6EndPoint::SetLocalAddress(ns3::Ipv6Address addr) [member function]
<     cls.add_method('SetLocalAddress', 
<                    'void', 
<                    [param('ns3::Ipv6Address', 'addr')])
<     ## ipv6-end-point.h (module 'internet'): void ns3::Ipv6EndPoint::SetLocalPort(uint16_t port) [member function]
<     cls.add_method('SetLocalPort', 
<                    'void', 
<                    [param('uint16_t', 'port')])
<     ## ipv6-end-point.h (module 'internet'): void ns3::Ipv6EndPoint::SetPeer(ns3::Ipv6Address addr, uint16_t port) [member function]
<     cls.add_method('SetPeer', 
<                    'void', 
<                    [param('ns3::Ipv6Address', 'addr'), param('uint16_t', 'port')])
<     ## ipv6-end-point.h (module 'internet'): void ns3::Ipv6EndPoint::SetRxCallback(ns3::Callback<void, ns3::Ptr<ns3::Packet>, ns3::Ipv6Header, unsigned short, ns3::Ptr<ns3::Ipv6Interface>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> callback) [member function]
<     cls.add_method('SetRxCallback', 
<                    'void', 
<                    [param('ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Ipv6Header, unsigned short, ns3::Ptr< ns3::Ipv6Interface >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'callback')])
<     ## ipv6-end-point.h (module 'internet'): void ns3::Ipv6EndPoint::SetRxEnabled(bool enabled) [member function]
<     cls.add_method('SetRxEnabled', 
<                    'void', 
<                    [param('bool', 'enabled')])
<     return
< 
< def register_Ns3Ipv6EndPointDemux_methods(root_module, cls):
<     ## ipv6-end-point-demux.h (module 'internet'): ns3::Ipv6EndPointDemux::Ipv6EndPointDemux(ns3::Ipv6EndPointDemux const & arg0) [constructor]
<     cls.add_constructor([param('ns3::Ipv6EndPointDemux const &', 'arg0')])
<     ## ipv6-end-point-demux.h (module 'internet'): ns3::Ipv6EndPointDemux::Ipv6EndPointDemux() [constructor]
<     cls.add_constructor([])
<     ## ipv6-end-point-demux.h (module 'internet'): ns3::Ipv6EndPoint * ns3::Ipv6EndPointDemux::Allocate() [member function]
<     cls.add_method('Allocate', 
<                    'ns3::Ipv6EndPoint *', 
<                    [])
<     ## ipv6-end-point-demux.h (module 'internet'): ns3::Ipv6EndPoint * ns3::Ipv6EndPointDemux::Allocate(ns3::Ipv6Address address) [member function]
<     cls.add_method('Allocate', 
<                    'ns3::Ipv6EndPoint *', 
<                    [param('ns3::Ipv6Address', 'address')])
<     ## ipv6-end-point-demux.h (module 'internet'): ns3::Ipv6EndPoint * ns3::Ipv6EndPointDemux::Allocate(ns3::Ptr<ns3::NetDevice> boundNetDevice, uint16_t port) [member function]
<     cls.add_method('Allocate', 
<                    'ns3::Ipv6EndPoint *', 
<                    [param('ns3::Ptr< ns3::NetDevice >', 'boundNetDevice'), param('uint16_t', 'port')])
<     ## ipv6-end-point-demux.h (module 'internet'): ns3::Ipv6EndPoint * ns3::Ipv6EndPointDemux::Allocate(ns3::Ptr<ns3::NetDevice> boundNetDevice, ns3::Ipv6Address address, uint16_t port) [member function]
<     cls.add_method('Allocate', 
<                    'ns3::Ipv6EndPoint *', 
<                    [param('ns3::Ptr< ns3::NetDevice >', 'boundNetDevice'), param('ns3::Ipv6Address', 'address'), param('uint16_t', 'port')])
<     ## ipv6-end-point-demux.h (module 'internet'): ns3::Ipv6EndPoint * ns3::Ipv6EndPointDemux::Allocate(ns3::Ptr<ns3::NetDevice> boundNetDevice, ns3::Ipv6Address localAddress, uint16_t localPort, ns3::Ipv6Address peerAddress, uint16_t peerPort) [member function]
<     cls.add_method('Allocate', 
<                    'ns3::Ipv6EndPoint *', 
<                    [param('ns3::Ptr< ns3::NetDevice >', 'boundNetDevice'), param('ns3::Ipv6Address', 'localAddress'), param('uint16_t', 'localPort'), param('ns3::Ipv6Address', 'peerAddress'), param('uint16_t', 'peerPort')])
<     ## ipv6-end-point-demux.h (module 'internet'): void ns3::Ipv6EndPointDemux::DeAllocate(ns3::Ipv6EndPoint * endPoint) [member function]
<     cls.add_method('DeAllocate', 
<                    'void', 
<                    [param('ns3::Ipv6EndPoint *', 'endPoint')])
<     ## ipv6-end-point-demux.h (module 'internet'): ns3::Ipv6EndPointDemux::EndPoints ns3::Ipv6EndPointDemux::GetEndPoints() const [member function]
<     cls.add_method('GetEndPoints', 
<                    'ns3::Ipv6EndPointDemux::EndPoints', 
<                    [], 
<                    is_const=True)
<     ## ipv6-end-point-demux.h (module 'internet'): ns3::Ipv6EndPointDemux::EndPoints ns3::Ipv6EndPointDemux::Lookup(ns3::Ipv6Address dst, uint16_t dport, ns3::Ipv6Address src, uint16_t sport, ns3::Ptr<ns3::Ipv6Interface> incomingInterface) [member function]
<     cls.add_method('Lookup', 
<                    'ns3::Ipv6EndPointDemux::EndPoints', 
<                    [param('ns3::Ipv6Address', 'dst'), param('uint16_t', 'dport'), param('ns3::Ipv6Address', 'src'), param('uint16_t', 'sport'), param('ns3::Ptr< ns3::Ipv6Interface >', 'incomingInterface')])
<     ## ipv6-end-point-demux.h (module 'internet'): bool ns3::Ipv6EndPointDemux::LookupLocal(ns3::Ptr<ns3::NetDevice> boundNetDevice, ns3::Ipv6Address addr, uint16_t port) [member function]
<     cls.add_method('LookupLocal', 
<                    'bool', 
<                    [param('ns3::Ptr< ns3::NetDevice >', 'boundNetDevice'), param('ns3::Ipv6Address', 'addr'), param('uint16_t', 'port')])
<     ## ipv6-end-point-demux.h (module 'internet'): bool ns3::Ipv6EndPointDemux::LookupPortLocal(uint16_t port) [member function]
<     cls.add_method('LookupPortLocal', 
<                    'bool', 
<                    [param('uint16_t', 'port')])
<     ## ipv6-end-point-demux.h (module 'internet'): ns3::Ipv6EndPoint * ns3::Ipv6EndPointDemux::SimpleLookup(ns3::Ipv6Address dst, uint16_t dport, ns3::Ipv6Address src, uint16_t sport) [member function]
<     cls.add_method('SimpleLookup', 
<                    'ns3::Ipv6EndPoint *', 
<                    [param('ns3::Ipv6Address', 'dst'), param('uint16_t', 'dport'), param('ns3::Ipv6Address', 'src'), param('uint16_t', 'sport')])
<     return
< 
4444,4447d4103
<     ## ipv6-address.h (module 'network'): ns3::Ipv6Prefix::Ipv6Prefix(uint8_t * prefix, uint8_t prefixLength) [constructor]
<     cls.add_constructor([param('uint8_t *', 'prefix'), param('uint8_t', 'prefixLength')])
<     ## ipv6-address.h (module 'network'): ns3::Ipv6Prefix::Ipv6Prefix(char const * prefix, uint8_t prefixLength) [constructor]
<     cls.add_constructor([param('char const *', 'prefix'), param('uint8_t', 'prefixLength')])
4464,4468d4119
<     ## ipv6-address.h (module 'network'): uint8_t ns3::Ipv6Prefix::GetMinimumPrefixLength() const [member function]
<     cls.add_method('GetMinimumPrefixLength', 
<                    'uint8_t', 
<                    [], 
<                    is_const=True)
4488c4139
<                    is_const=True, deprecated=True)
---
>                    is_const=True)
4499,4502d4149
<     ## ipv6-address.h (module 'network'): void ns3::Ipv6Prefix::SetPrefixLength(uint8_t prefixLength) [member function]
<     cls.add_method('SetPrefixLength', 
<                    'void', 
<                    [param('uint8_t', 'prefixLength')])
4514c4161
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
4519c4166
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
4941c4588
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
4980c4627
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
5013,5017d4659
<     ## object-factory.h (module 'core'): bool ns3::ObjectFactory::IsTypeIdSet() const [member function]
<     cls.add_method('IsTypeIdSet', 
<                    'bool', 
<                    [], 
<                    is_const=True)
5408c5050
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
5444c5086
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
5480c5122
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
5784,5788c5426,5430
<     cls.add_binary_numeric_operator('+', root_module['ns3::SequenceNumber32'], root_module['ns3::SequenceNumber32'], param('ns3::SequenceNumber< unsigned int, int > const &', 'right'))
<     cls.add_binary_numeric_operator('+', root_module['ns3::SequenceNumber32'], root_module['ns3::SequenceNumber32'], param('int', 'right'))
<     cls.add_inplace_numeric_operator('+=', param('int', 'right'))
<     cls.add_binary_numeric_operator('-', root_module['ns3::SequenceNumber32'], root_module['ns3::SequenceNumber32'], param('int', 'right'))
<     cls.add_inplace_numeric_operator('-=', param('int', 'right'))
---
>     cls.add_binary_numeric_operator('+', root_module['ns3::SequenceNumber32'], root_module['ns3::SequenceNumber32'], param('ns3::SequenceNumber< unsigned int, int > const &', u'right'))
>     cls.add_binary_numeric_operator('+', root_module['ns3::SequenceNumber32'], root_module['ns3::SequenceNumber32'], param('int', u'right'))
>     cls.add_inplace_numeric_operator('+=', param('int', u'right'))
>     cls.add_binary_numeric_operator('-', root_module['ns3::SequenceNumber32'], root_module['ns3::SequenceNumber32'], param('int', u'right'))
>     cls.add_inplace_numeric_operator('-=', param('int', u'right'))
5837,5841d5478
<     ## simulator.h (module 'core'): static uint64_t ns3::Simulator::GetEventCount() [member function]
<     cls.add_method('GetEventCount', 
<                    'uint64_t', 
<                    [], 
<                    is_static=True)
5908c5545
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
5913c5550
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
5923c5560
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
5928c5565
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
5996c5633
<     ## tcp-tx-item.h (module 'internet'): ns3::TcpTxItem::TcpTxItem() [constructor]
---
>     ## tcp-tx-buffer.h (module 'internet'): ns3::TcpTxItem::TcpTxItem() [constructor]
5998c5635
<     ## tcp-tx-item.h (module 'internet'): ns3::TcpTxItem::TcpTxItem(ns3::TcpTxItem const & arg0) [constructor]
---
>     ## tcp-tx-buffer.h (module 'internet'): ns3::TcpTxItem::TcpTxItem(ns3::TcpTxItem const & arg0) [constructor]
6000,6019c5637
<     ## tcp-tx-item.h (module 'internet'): ns3::Time const & ns3::TcpTxItem::GetLastSent() const [member function]
<     cls.add_method('GetLastSent', 
<                    'ns3::Time const &', 
<                    [], 
<                    is_const=True)
<     ## tcp-tx-item.h (module 'internet'): ns3::Ptr<const ns3::Packet> ns3::TcpTxItem::GetPacket() const [member function]
<     cls.add_method('GetPacket', 
<                    'ns3::Ptr< ns3::Packet const >', 
<                    [], 
<                    is_const=True)
<     ## tcp-tx-item.h (module 'internet'): ns3::Ptr<ns3::Packet> ns3::TcpTxItem::GetPacketCopy() const [member function]
<     cls.add_method('GetPacketCopy', 
<                    'ns3::Ptr< ns3::Packet >', 
<                    [], 
<                    is_const=True)
<     ## tcp-tx-item.h (module 'internet'): ns3::TcpTxItem::RateInformation & ns3::TcpTxItem::GetRateInformation() [member function]
<     cls.add_method('GetRateInformation', 
<                    'ns3::TcpTxItem::RateInformation &', 
<                    [])
<     ## tcp-tx-item.h (module 'internet'): uint32_t ns3::TcpTxItem::GetSeqSize() const [member function]
---
>     ## tcp-tx-buffer.h (module 'internet'): uint32_t ns3::TcpTxItem::GetSeqSize() const [member function]
6024,6034c5642
<     ## tcp-tx-item.h (module 'internet'): bool ns3::TcpTxItem::IsRetrans() const [member function]
<     cls.add_method('IsRetrans', 
<                    'bool', 
<                    [], 
<                    is_const=True)
<     ## tcp-tx-item.h (module 'internet'): bool ns3::TcpTxItem::IsSacked() const [member function]
<     cls.add_method('IsSacked', 
<                    'bool', 
<                    [], 
<                    is_const=True)
<     ## tcp-tx-item.h (module 'internet'): void ns3::TcpTxItem::Print(std::ostream & os) const [member function]
---
>     ## tcp-tx-buffer.h (module 'internet'): void ns3::TcpTxItem::Print(std::ostream & os) const [member function]
6039,6053c5647,5658
<     return
< 
< def register_Ns3TcpTxItemRateInformation_methods(root_module, cls):
<     ## tcp-tx-item.h (module 'internet'): ns3::TcpTxItem::RateInformation::RateInformation() [constructor]
<     cls.add_constructor([])
<     ## tcp-tx-item.h (module 'internet'): ns3::TcpTxItem::RateInformation::RateInformation(ns3::TcpTxItem::RateInformation const & arg0) [constructor]
<     cls.add_constructor([param('ns3::TcpTxItem::RateInformation const &', 'arg0')])
<     ## tcp-tx-item.h (module 'internet'): ns3::TcpTxItem::RateInformation::m_delivered [variable]
<     cls.add_instance_attribute('m_delivered', 'uint64_t', is_const=False)
<     ## tcp-tx-item.h (module 'internet'): ns3::TcpTxItem::RateInformation::m_deliveredTime [variable]
<     cls.add_instance_attribute('m_deliveredTime', 'ns3::Time', is_const=False)
<     ## tcp-tx-item.h (module 'internet'): ns3::TcpTxItem::RateInformation::m_firstSent [variable]
<     cls.add_instance_attribute('m_firstSent', 'ns3::Time', is_const=False)
<     ## tcp-tx-item.h (module 'internet'): ns3::TcpTxItem::RateInformation::m_isAppLimited [variable]
<     cls.add_instance_attribute('m_isAppLimited', 'bool', is_const=False)
---
>     ## tcp-tx-buffer.h (module 'internet'): ns3::TcpTxItem::m_lastSent [variable]
>     cls.add_instance_attribute('m_lastSent', 'ns3::Time', is_const=False)
>     ## tcp-tx-buffer.h (module 'internet'): ns3::TcpTxItem::m_lost [variable]
>     cls.add_instance_attribute('m_lost', 'bool', is_const=False)
>     ## tcp-tx-buffer.h (module 'internet'): ns3::TcpTxItem::m_packet [variable]
>     cls.add_instance_attribute('m_packet', 'ns3::Ptr< ns3::Packet >', is_const=False)
>     ## tcp-tx-buffer.h (module 'internet'): ns3::TcpTxItem::m_retrans [variable]
>     cls.add_instance_attribute('m_retrans', 'bool', is_const=False)
>     ## tcp-tx-buffer.h (module 'internet'): ns3::TcpTxItem::m_sacked [variable]
>     cls.add_instance_attribute('m_sacked', 'bool', is_const=False)
>     ## tcp-tx-buffer.h (module 'internet'): ns3::TcpTxItem::m_startSeq [variable]
>     cls.add_instance_attribute('m_startSeq', 'ns3::SequenceNumber32', is_const=False)
6140c5745
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
6145c5750
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
6191,6192d5795
<     ## traced-value.h (module 'core'): ns3::TracedValue<ns3::SequenceNumber<unsigned int, int> >::TracedValue(ns3::TracedValue<ns3::SequenceNumber<unsigned int, int> > const & other) [constructor]
<     cls.add_constructor([param('ns3::TracedValue< ns3::SequenceNumber< unsigned int, int > > const &', 'other')])
6194a5798,5799
>     ## traced-value.h (module 'core'): ns3::TracedValue<ns3::SequenceNumber<unsigned int, int> >::TracedValue(ns3::TracedValue<ns3::SequenceNumber<unsigned int, int> > const & other) [constructor]
>     cls.add_constructor([param('ns3::TracedValue< ns3::SequenceNumber< unsigned int, int > > const &', 'other')])
6331c5936
<     cls.add_binary_numeric_operator('/', root_module['ns3::TracedValue< unsigned int >'], root_module['ns3::TracedValue< unsigned int >'], param('unsigned int const &', 'right'))
---
>     cls.add_binary_numeric_operator('/', root_module['ns3::TracedValue< unsigned int >'], root_module['ns3::TracedValue< unsigned int >'], param('unsigned int const &', u'right'))
6598,6602c6203,6206
<     cls.add_binary_numeric_operator('*', root_module['ns3::Time'], root_module['ns3::int64x64_t'], param('ns3::Time const &', 'right'))
<     cls.add_binary_numeric_operator('+', root_module['ns3::int64x64_t'], root_module['ns3::int64x64_t'], param('ns3::int64x64_t const &', 'right'))
<     cls.add_binary_numeric_operator('-', root_module['ns3::int64x64_t'], root_module['ns3::int64x64_t'], param('ns3::int64x64_t const &', 'right'))
<     cls.add_binary_numeric_operator('*', root_module['ns3::int64x64_t'], root_module['ns3::int64x64_t'], param('ns3::int64x64_t const &', 'right'))
<     cls.add_binary_numeric_operator('/', root_module['ns3::int64x64_t'], root_module['ns3::int64x64_t'], param('ns3::int64x64_t const &', 'right'))
---
>     cls.add_binary_numeric_operator('+', root_module['ns3::int64x64_t'], root_module['ns3::int64x64_t'], param('ns3::int64x64_t const &', u'right'))
>     cls.add_binary_numeric_operator('-', root_module['ns3::int64x64_t'], root_module['ns3::int64x64_t'], param('ns3::int64x64_t const &', u'right'))
>     cls.add_binary_numeric_operator('*', root_module['ns3::int64x64_t'], root_module['ns3::int64x64_t'], param('ns3::int64x64_t const &', u'right'))
>     cls.add_binary_numeric_operator('/', root_module['ns3::int64x64_t'], root_module['ns3::int64x64_t'], param('ns3::int64x64_t const &', u'right'))
6610,6613c6214,6217
<     cls.add_inplace_numeric_operator('+=', param('ns3::int64x64_t const &', 'right'))
<     cls.add_inplace_numeric_operator('-=', param('ns3::int64x64_t const &', 'right'))
<     cls.add_inplace_numeric_operator('*=', param('ns3::int64x64_t const &', 'right'))
<     cls.add_inplace_numeric_operator('/=', param('ns3::int64x64_t const &', 'right'))
---
>     cls.add_inplace_numeric_operator('+=', param('ns3::int64x64_t const &', u'right'))
>     cls.add_inplace_numeric_operator('-=', param('ns3::int64x64_t const &', u'right'))
>     cls.add_inplace_numeric_operator('*=', param('ns3::int64x64_t const &', u'right'))
>     cls.add_inplace_numeric_operator('/=', param('ns3::int64x64_t const &', u'right'))
6674c6278
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
6689c6293
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
6702c6306
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
6707c6311
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
6717c6321
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
6722c6326
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
6766c6370
<                    is_virtual=True, visibility='private')
---
>                    visibility='private', is_virtual=True)
6771c6375
<                    is_const=True, is_virtual=True, visibility='private')
---
>                    is_const=True, visibility='private', is_virtual=True)
6776c6380
<                    is_const=True, is_virtual=True, visibility='private')
---
>                    is_const=True, visibility='private', is_virtual=True)
6781c6385
<                    is_const=True, is_virtual=True, visibility='private')
---
>                    is_const=True, visibility='private', is_virtual=True)
6786c6390
<                    is_const=True, is_virtual=True, visibility='private')
---
>                    is_const=True, visibility='private', is_virtual=True)
7924c7528
<                    is_virtual=True, visibility='private')
---
>                    visibility='private', is_virtual=True)
7929c7533
<                    is_virtual=True, visibility='private')
---
>                    visibility='private', is_virtual=True)
7934c7538
<                    is_virtual=True, visibility='private')
---
>                    visibility='private', is_virtual=True)
7939c7543
<                    is_virtual=True, visibility='private')
---
>                    visibility='private', is_virtual=True)
8893c8497
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
8898c8502
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
8903c8507
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
8943c8547
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
8948c8552
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
9061c8665
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
9066c8670
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
9370c8974
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
9400c9004
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
9594c9198
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
9599c9203
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
9604c9208
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
9614c9218
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
9619c9223
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
9629c9233
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
9638c9242
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
9663c9267
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
9668c9272
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
9678c9282
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
9683c9287
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
9688c9292
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
9693c9297
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
9748c9352
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
9753c9357
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
9766c9370
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
9779c9383
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
9792c9396
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
9805c9409
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
9872c9476
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
9877c9481
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
9882c9486
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
9954c9558
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
10247,10251d9850
<     ## tcp-congestion-ops.h (module 'internet'): void ns3::TcpCongestionOps::CongControl(ns3::Ptr<ns3::TcpSocketState> tcb, ns3::TcpRateOps::TcpRateConnection const & rc, ns3::TcpRateOps::TcpRateSample const & rs) [member function]
<     cls.add_method('CongControl', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb'), param('ns3::TcpRateOps::TcpRateConnection const &', 'rc'), param('ns3::TcpRateOps::TcpRateSample const &', 'rs')], 
<                    is_virtual=True)
10266c9865
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
10271c9870
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
10276c9875
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
10282,10286d9880
<     ## tcp-congestion-ops.h (module 'internet'): bool ns3::TcpCongestionOps::HasCongControl() const [member function]
<     cls.add_method('HasCongControl', 
<                    'bool', 
<                    [], 
<                    is_const=True, is_virtual=True)
10291,10296c9885
<                    is_virtual=True)
<     ## tcp-congestion-ops.h (module 'internet'): void ns3::TcpCongestionOps::Init(ns3::Ptr<ns3::TcpSocketState> tcb) [member function]
<     cls.add_method('Init', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb')], 
<                    is_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
10302,10306d9890
<     ## tcp-congestion-ops.h (module 'internet'): void ns3::TcpCongestionOps::ReduceCwnd(ns3::Ptr<ns3::TcpSocketState> tcb) [member function]
<     cls.add_method('ReduceCwnd', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb')], 
<                    is_virtual=True, is_pure_virtual=True)
10501,10505d10084
<     ## tcp-congestion-ops.h (module 'internet'): void ns3::TcpNewReno::ReduceCwnd(ns3::Ptr<ns3::TcpSocketState> tcb) [member function]
<     cls.add_method('ReduceCwnd', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb')], 
<                    is_virtual=True)
10510c10089
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
10515c10094
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
10532c10111
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
10542c10121
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
10547c10126
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
10562c10141
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
10567c10146
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
10971,11068d10549
< def register_Ns3TcpRateOps_methods(root_module, cls):
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateOps() [constructor]
<     cls.add_constructor([])
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateOps(ns3::TcpRateOps const & arg0) [constructor]
<     cls.add_constructor([param('ns3::TcpRateOps const &', 'arg0')])
<     ## tcp-rate-ops.h (module 'internet'): void ns3::TcpRateOps::CalculateAppLimited(uint32_t cWnd, uint32_t in_flight, uint32_t segmentSize, ns3::SequenceNumber32 const & tailSeq, ns3::SequenceNumber32 const & nextTx, uint32_t const lostOut, uint32_t const retransOut) [member function]
<     cls.add_method('CalculateAppLimited', 
<                    'void', 
<                    [param('uint32_t', 'cWnd'), param('uint32_t', 'in_flight'), param('uint32_t', 'segmentSize'), param('ns3::SequenceNumber32 const &', 'tailSeq'), param('ns3::SequenceNumber32 const &', 'nextTx'), param('uint32_t const', 'lostOut'), param('uint32_t const', 'retransOut')], 
<                    is_virtual=True, is_pure_virtual=True)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateSample const & ns3::TcpRateOps::GenerateSample(uint32_t delivered, uint32_t lost, bool is_sack_reneg, uint32_t priorInFlight, ns3::Time const & minRtt) [member function]
<     cls.add_method('GenerateSample', 
<                    'ns3::TcpRateOps::TcpRateSample const &', 
<                    [param('uint32_t', 'delivered'), param('uint32_t', 'lost'), param('bool', 'is_sack_reneg'), param('uint32_t', 'priorInFlight'), param('ns3::Time const &', 'minRtt')], 
<                    is_virtual=True, is_pure_virtual=True)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateConnection const & ns3::TcpRateOps::GetConnectionRate() [member function]
<     cls.add_method('GetConnectionRate', 
<                    'ns3::TcpRateOps::TcpRateConnection const &', 
<                    [], 
<                    is_virtual=True, is_pure_virtual=True)
<     ## tcp-rate-ops.h (module 'internet'): static ns3::TypeId ns3::TcpRateOps::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## tcp-rate-ops.h (module 'internet'): void ns3::TcpRateOps::SkbDelivered(ns3::TcpTxItem * skb) [member function]
<     cls.add_method('SkbDelivered', 
<                    'void', 
<                    [param('ns3::TcpTxItem *', 'skb')], 
<                    is_virtual=True, is_pure_virtual=True)
<     ## tcp-rate-ops.h (module 'internet'): void ns3::TcpRateOps::SkbSent(ns3::TcpTxItem * skb, bool isStartOfTransmission) [member function]
<     cls.add_method('SkbSent', 
<                    'void', 
<                    [param('ns3::TcpTxItem *', 'skb'), param('bool', 'isStartOfTransmission')], 
<                    is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3TcpRateOpsTcpRateConnection_methods(root_module, cls):
<     cls.add_output_stream_operator()
<     cls.add_binary_comparison_operator('==')
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateConnection::TcpRateConnection() [constructor]
<     cls.add_constructor([])
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateConnection::TcpRateConnection(ns3::TcpRateOps::TcpRateConnection const & arg0) [constructor]
<     cls.add_constructor([param('ns3::TcpRateOps::TcpRateConnection const &', 'arg0')])
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateConnection::m_appLimited [variable]
<     cls.add_instance_attribute('m_appLimited', 'uint32_t', is_const=False)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateConnection::m_delivered [variable]
<     cls.add_instance_attribute('m_delivered', 'uint64_t', is_const=False)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateConnection::m_deliveredTime [variable]
<     cls.add_instance_attribute('m_deliveredTime', 'ns3::Time', is_const=False)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateConnection::m_firstSentTime [variable]
<     cls.add_instance_attribute('m_firstSentTime', 'ns3::Time', is_const=False)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateConnection::m_rateAppLimited [variable]
<     cls.add_instance_attribute('m_rateAppLimited', 'bool', is_const=False)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateConnection::m_rateDelivered [variable]
<     cls.add_instance_attribute('m_rateDelivered', 'int32_t', is_const=False)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateConnection::m_rateInterval [variable]
<     cls.add_instance_attribute('m_rateInterval', 'ns3::Time', is_const=False)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateConnection::m_txItemDelivered [variable]
<     cls.add_instance_attribute('m_txItemDelivered', 'uint32_t', is_const=False)
<     return
< 
< def register_Ns3TcpRateOpsTcpRateSample_methods(root_module, cls):
<     cls.add_output_stream_operator()
<     cls.add_binary_comparison_operator('==')
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateSample::TcpRateSample() [constructor]
<     cls.add_constructor([])
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateSample::TcpRateSample(ns3::TcpRateOps::TcpRateSample const & arg0) [constructor]
<     cls.add_constructor([param('ns3::TcpRateOps::TcpRateSample const &', 'arg0')])
<     ## tcp-rate-ops.h (module 'internet'): bool ns3::TcpRateOps::TcpRateSample::IsValid() const [member function]
<     cls.add_method('IsValid', 
<                    'bool', 
<                    [], 
<                    is_const=True)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateSample::m_ackElapsed [variable]
<     cls.add_instance_attribute('m_ackElapsed', 'ns3::Time', is_const=False)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateSample::m_ackedSacked [variable]
<     cls.add_instance_attribute('m_ackedSacked', 'uint32_t', is_const=False)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateSample::m_bytesLoss [variable]
<     cls.add_instance_attribute('m_bytesLoss', 'uint32_t', is_const=False)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateSample::m_delivered [variable]
<     cls.add_instance_attribute('m_delivered', 'int32_t', is_const=False)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateSample::m_deliveryRate [variable]
<     cls.add_instance_attribute('m_deliveryRate', 'ns3::DataRate', is_const=False)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateSample::m_interval [variable]
<     cls.add_instance_attribute('m_interval', 'ns3::Time', is_const=False)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateSample::m_isAppLimited [variable]
<     cls.add_instance_attribute('m_isAppLimited', 'bool', is_const=False)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateSample::m_priorDelivered [variable]
<     cls.add_instance_attribute('m_priorDelivered', 'uint32_t', is_const=False)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateSample::m_priorInFlight [variable]
<     cls.add_instance_attribute('m_priorInFlight', 'uint32_t', is_const=False)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateSample::m_priorTime [variable]
<     cls.add_instance_attribute('m_priorTime', 'ns3::Time', is_const=False)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateSample::m_sendElapsed [variable]
<     cls.add_instance_attribute('m_sendElapsed', 'ns3::Time', is_const=False)
<     return
< 
11074c10555
<     ## tcp-recovery-ops.h (module 'internet'): void ns3::TcpRecoveryOps::DoRecovery(ns3::Ptr<ns3::TcpSocketState> tcb, uint32_t deliveredBytes) [member function]
---
>     ## tcp-recovery-ops.h (module 'internet'): void ns3::TcpRecoveryOps::DoRecovery(ns3::Ptr<ns3::TcpSocketState> tcb, uint32_t lastAckedBytes, uint32_t lastSackedBytes) [member function]
11077,11079c10558,10560
<                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb'), param('uint32_t', 'deliveredBytes')], 
<                    is_virtual=True, is_pure_virtual=True)
<     ## tcp-recovery-ops.h (module 'internet'): void ns3::TcpRecoveryOps::EnterRecovery(ns3::Ptr<ns3::TcpSocketState> tcb, uint32_t dupAckCount, uint32_t unAckDataCount, uint32_t deliveredBytes) [member function]
---
>                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb'), param('uint32_t', 'lastAckedBytes'), param('uint32_t', 'lastSackedBytes')], 
>                    is_pure_virtual=True, is_virtual=True)
>     ## tcp-recovery-ops.h (module 'internet'): void ns3::TcpRecoveryOps::EnterRecovery(ns3::Ptr<ns3::TcpSocketState> tcb, uint32_t dupAckCount, uint32_t unAckDataCount, uint32_t lastSackedBytes) [member function]
11082,11083c10563,10564
<                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb'), param('uint32_t', 'dupAckCount'), param('uint32_t', 'unAckDataCount'), param('uint32_t', 'deliveredBytes')], 
<                    is_virtual=True, is_pure_virtual=True)
---
>                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb'), param('uint32_t', 'dupAckCount'), param('uint32_t', 'unAckDataCount'), param('uint32_t', 'lastSackedBytes')], 
>                    is_pure_virtual=True, is_virtual=True)
11088c10569
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
11093c10574
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
11098c10579
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
11220c10701
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
11239c10720
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
11244c10725
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
11249c10730
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
11254c10735
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
11259c10740
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
11264c10745
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
11269c10750
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
11274c10755
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
11279c10760
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
11284c10765
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
11289c10770
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
11294c10775
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
11299c10780
<                    is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
11304c10785
<                    is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
11309c10790
<                    is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
11314c10795
<                    is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
11319c10800
<                    is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
11324c10805
<                    is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
11329c10810
<                    is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
11334c10815
<                    is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
11339c10820
<                    is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
11344c10825
<                    is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
11349c10830
<                    is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
11354c10835
<                    is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
11497,11501d10977
<     ## tcp-socket-base.h (module 'internet'): uint8_t ns3::TcpSocketBase::MarkEcnCodePoint(uint8_t const tos, ns3::TcpSocketState::EcnCodePoint_t const codePoint) const [member function]
<     cls.add_method('MarkEcnCodePoint', 
<                    'uint8_t', 
<                    [param('uint8_t const', 'tos'), param('ns3::TcpSocketState::EcnCodePoint_t const', 'codePoint')], 
<                    is_const=True)
11539a11016,11019
>     ## tcp-socket-base.h (module 'internet'): void ns3::TcpSocketBase::SetEcn(ns3::TcpSocketBase::EcnMode_t ecnMode) [member function]
>     cls.add_method('SetEcn', 
>                    'void', 
>                    [param('ns3::TcpSocketBase::EcnMode_t', 'ecnMode')])
11567,11570d11046
<     ## tcp-socket-base.h (module 'internet'): void ns3::TcpSocketBase::SetUseEcn(ns3::TcpSocketState::UseEcn_t useEcn) [member function]
<     cls.add_method('SetUseEcn', 
<                    'void', 
<                    [param('ns3::TcpSocketState::UseEcn_t', 'useEcn')])
11669c11145
<                    is_const=True, is_virtual=True, visibility='protected')
---
>                    is_const=True, visibility='protected', is_virtual=True)
11674c11150
<                    is_const=True, is_virtual=True, visibility='protected')
---
>                    is_const=True, visibility='protected', is_virtual=True)
11679c11155
<                    is_const=True, is_virtual=True, visibility='protected')
---
>                    is_const=True, visibility='protected', is_virtual=True)
11699c11175
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
11714c11190
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
11739c11215
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
11750c11226
<     ## tcp-socket-base.h (module 'internet'): void ns3::TcpSocketBase::DupAck(uint32_t currentDelivered) [member function]
---
>     ## tcp-socket-base.h (module 'internet'): void ns3::TcpSocketBase::DupAck() [member function]
11753c11229
<                    [param('uint32_t', 'currentDelivered')], 
---
>                    [], 
11755c11231
<     ## tcp-socket-base.h (module 'internet'): void ns3::TcpSocketBase::EnterRecovery(uint32_t currentDelivered) [member function]
---
>     ## tcp-socket-base.h (module 'internet'): void ns3::TcpSocketBase::EnterRecovery() [member function]
11758c11234
<                    [param('uint32_t', 'currentDelivered')], 
---
>                    [], 
11764c11240
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
11769c11245
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
11794c11270
<                    is_const=True, is_virtual=True, visibility='protected')
---
>                    is_const=True, visibility='protected', is_virtual=True)
11799c11275
<                    is_const=True, is_virtual=True, visibility='protected')
---
>                    is_const=True, visibility='protected', is_virtual=True)
11804c11280
<                    is_const=True, is_virtual=True, visibility='protected')
---
>                    is_const=True, visibility='protected', is_virtual=True)
11809c11285
<                    is_const=True, is_virtual=True, visibility='protected')
---
>                    is_const=True, visibility='protected', is_virtual=True)
11814c11290
<                    is_const=True, is_virtual=True, visibility='protected')
---
>                    is_const=True, visibility='protected', is_virtual=True)
11819c11295
<                    is_const=True, is_virtual=True, visibility='protected')
---
>                    is_const=True, visibility='protected', is_virtual=True)
11824c11300
<                    is_const=True, is_virtual=True, visibility='protected')
---
>                    is_const=True, visibility='protected', is_virtual=True)
11829c11305
<                    is_const=True, is_virtual=True, visibility='protected')
---
>                    is_const=True, visibility='protected', is_virtual=True)
11834c11310
<                    is_const=True, is_virtual=True, visibility='protected')
---
>                    is_const=True, visibility='protected', is_virtual=True)
11839c11315
<                    is_const=True, is_virtual=True, visibility='protected')
---
>                    is_const=True, visibility='protected', is_virtual=True)
11844c11320
<                    is_const=True, is_virtual=True, visibility='protected')
---
>                    is_const=True, visibility='protected', is_virtual=True)
11849c11325
<                    is_const=True, is_virtual=True, visibility='protected')
---
>                    is_const=True, visibility='protected', is_virtual=True)
11854c11330
<                    is_const=True, is_virtual=True, visibility='protected')
---
>                    is_const=True, visibility='protected', is_virtual=True)
11869c11345
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
11874c11350
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
11894,11895c11370,11371
<                    is_virtual=True, visibility='protected')
<     ## tcp-socket-base.h (module 'internet'): void ns3::TcpSocketBase::ProcessAck(ns3::SequenceNumber32 const & ackNumber, bool scoreboardUpdated, uint32_t currentDelivered, ns3::SequenceNumber32 const & oldHeadSequence) [member function]
---
>                    visibility='protected', is_virtual=True)
>     ## tcp-socket-base.h (module 'internet'): void ns3::TcpSocketBase::ProcessAck(ns3::SequenceNumber32 const & ackNumber, bool scoreboardUpdated, ns3::SequenceNumber32 const & oldHeadSequence) [member function]
11898,11899c11374,11375
<                    [param('ns3::SequenceNumber32 const &', 'ackNumber'), param('bool', 'scoreboardUpdated'), param('uint32_t', 'currentDelivered'), param('ns3::SequenceNumber32 const &', 'oldHeadSequence')], 
<                    is_virtual=True, visibility='protected')
---
>                    [param('ns3::SequenceNumber32 const &', 'ackNumber'), param('bool', 'scoreboardUpdated'), param('ns3::SequenceNumber32 const &', 'oldHeadSequence')], 
>                    visibility='protected', is_virtual=True)
11920c11396
<     ## tcp-socket-base.h (module 'internet'): uint32_t ns3::TcpSocketBase::ProcessOptionSack(ns3::Ptr<const ns3::TcpOption> const option) [member function]
---
>     ## tcp-socket-base.h (module 'internet'): bool ns3::TcpSocketBase::ProcessOptionSack(ns3::Ptr<const ns3::TcpOption> const option) [member function]
11922c11398
<                    'uint32_t', 
---
>                    'bool', 
11959,11960c11435,11436
<                    is_virtual=True, visibility='protected')
<     ## tcp-socket-base.h (module 'internet'): void ns3::TcpSocketBase::ReadOptions(ns3::TcpHeader const & tcpHeader, uint32_t * bytesSacked) [member function]
---
>                    visibility='protected', is_virtual=True)
>     ## tcp-socket-base.h (module 'internet'): void ns3::TcpSocketBase::ReadOptions(ns3::TcpHeader const & tcpHeader, bool & scoreboardUpdated) [member function]
11963c11439
<                    [param('ns3::TcpHeader const &', 'tcpHeader'), param('uint32_t *', 'bytesSacked')], 
---
>                    [param('ns3::TcpHeader const &', 'tcpHeader'), param('bool &', 'scoreboardUpdated')], 
11969c11445
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
11974c11450
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
11984c11460
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
11989c11465
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
12004c11480
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
12009c11485
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
12014c11490
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
12019c11495
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
12024c11500
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
12029c11505
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
12034c11510
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
12039c11515
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
12044c11520
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
12049c11525
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
12054c11530
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
12059c11535
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
12064c11540
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
12089c11565
<                    is_const=True, is_virtual=True, visibility='protected')
---
>                    is_const=True, visibility='protected', is_virtual=True)
12094c11570
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
12104c11580
<                    is_const=True, is_virtual=True, visibility='protected')
---
>                    is_const=True, visibility='protected', is_virtual=True)
12153,12154d11628
<     ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::m_ecnMode [variable]
<     cls.add_instance_attribute('m_ecnMode', 'ns3::TcpSocketState::EcnMode_t', is_const=False)
12157,12158d11630
<     ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::m_ectCodePoint [variable]
<     cls.add_instance_attribute('m_ectCodePoint', 'ns3::TcpSocketState::EcnCodePoint_t', is_const=False)
12181,12182d11652
<     ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::m_rxBuffer [variable]
<     cls.add_instance_attribute('m_rxBuffer', 'ns3::Ptr< ns3::TcpRxBuffer >', is_const=False)
12185,12186d11654
<     ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::m_sendEmptyPacketCallback [variable]
<     cls.add_instance_attribute('m_sendEmptyPacketCallback', 'ns3::Callback< void, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', is_const=False)
12189,12190d11656
<     ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::m_useEcn [variable]
<     cls.add_instance_attribute('m_useEcn', 'ns3::TcpSocketState::UseEcn_t', is_const=False)
12217c11683
<     ## tcp-tx-buffer.h (module 'internet'): ns3::TcpTxItem * ns3::TcpTxBuffer::CopyFromSequence(uint32_t numBytes, ns3::SequenceNumber32 const & seq) [member function]
---
>     ## tcp-tx-buffer.h (module 'internet'): ns3::Ptr<ns3::Packet> ns3::TcpTxBuffer::CopyFromSequence(uint32_t numBytes, ns3::SequenceNumber32 const & seq) [member function]
12219c11685
<                    'ns3::TcpTxItem *', 
---
>                    'ns3::Ptr< ns3::Packet >', 
12225c11691
<     ## tcp-tx-buffer.h (module 'internet'): void ns3::TcpTxBuffer::DiscardUpTo(ns3::SequenceNumber32 const & seq, ns3::Callback<void, ns3::TcpTxItem *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & beforeDelCb=ns3::TcpTxBuffer::m_nullCb) [member function]
---
>     ## tcp-tx-buffer.h (module 'internet'): void ns3::TcpTxBuffer::DiscardUpTo(ns3::SequenceNumber32 const & seq) [member function]
12228c11694
<                    [param('ns3::SequenceNumber32 const &', 'seq'), param('ns3::Callback< void, ns3::TcpTxItem *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'beforeDelCb', default_value='ns3::TcpTxBuffer::m_nullCb')])
---
>                    [param('ns3::SequenceNumber32 const &', 'seq')])
12325c11791
<     ## tcp-tx-buffer.h (module 'internet'): uint32_t ns3::TcpTxBuffer::Update(ns3::TcpOptionSack::SackList const & list, ns3::Callback<void, ns3::TcpTxItem *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & sackedCb=ns3::TcpTxBuffer::m_nullCb) [member function]
---
>     ## tcp-tx-buffer.h (module 'internet'): bool ns3::TcpTxBuffer::Update(ns3::TcpOptionSack::SackList const & list) [member function]
12327,12328c11793,11794
<                    'uint32_t', 
<                    [param('ns3::TcpOptionSack::SackList const &', 'list'), param('ns3::Callback< void, ns3::TcpTxItem *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'sackedCb', default_value='ns3::TcpTxBuffer::m_nullCb')])
---
>                    'bool', 
>                    [param('ns3::TcpOptionSack::SackList const &', 'list')])
12491,12499c11957,11962
<     cls.add_binary_numeric_operator('+', root_module['ns3::Time'], root_module['ns3::Time'], param('ns3::Time const &', 'right'))
<     cls.add_binary_numeric_operator('-', root_module['ns3::Time'], root_module['ns3::Time'], param('ns3::Time const &', 'right'))
<     cls.add_binary_numeric_operator('*', root_module['ns3::Time'], root_module['ns3::Time'], param('int64_t const &', 'right'))
<     cls.add_binary_numeric_operator('*', root_module['ns3::Time'], root_module['ns3::Time'], param('ns3::int64x64_t const &', 'right'))
<     cls.add_binary_numeric_operator('/', root_module['ns3::int64x64_t'], root_module['ns3::Time'], param('ns3::Time const &', 'right'))
<     cls.add_binary_numeric_operator('/', root_module['ns3::Time'], root_module['ns3::Time'], param('int64_t const &', 'right'))
<     cls.add_binary_numeric_operator('/', root_module['ns3::Time'], root_module['ns3::Time'], param('ns3::int64x64_t const &', 'right'))
<     cls.add_inplace_numeric_operator('+=', param('ns3::Time const &', 'right'))
<     cls.add_inplace_numeric_operator('-=', param('ns3::Time const &', 'right'))
---
>     cls.add_binary_numeric_operator('+', root_module['ns3::Time'], root_module['ns3::Time'], param('ns3::Time const &', u'right'))
>     cls.add_binary_numeric_operator('-', root_module['ns3::Time'], root_module['ns3::Time'], param('ns3::Time const &', u'right'))
>     cls.add_binary_numeric_operator('*', root_module['ns3::Time'], root_module['ns3::Time'], param('int64_t const &', u'right'))
>     cls.add_binary_numeric_operator('/', root_module['ns3::Time'], root_module['ns3::Time'], param('int64_t const &', u'right'))
>     cls.add_inplace_numeric_operator('+=', param('ns3::Time const &', u'right'))
>     cls.add_inplace_numeric_operator('-=', param('ns3::Time const &', u'right'))
12694c12157
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
12699c12162
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
12704c12167
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
12709c12172
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
12758c12221
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
12768c12231
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
12778c12241
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
12783c12246
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
12931c12394
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
12936c12399
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
12941c12404
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
12946c12409
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
12951c12414
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
12956c12419
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
12961c12424
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
12966c12429
<                    is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
12971c12434
<                    is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
12976c12439
<                    is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
12981c12444
<                    is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
12986c12449
<                    is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
13238c12701
<                    is_virtual=True, visibility='private')
---
>                    visibility='private', is_virtual=True)
13321a12785,12789
>     ## arp-cache.h (module 'internet'): void ns3::ArpCache::Entry::SetMacAddresss(ns3::Address macAddress) [member function]
>     cls.add_method('SetMacAddresss', 
>                    'void', 
>                    [param('ns3::Address', 'macAddress')], 
>                    deprecated=True)
13455c12923
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
13460c12928
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
13472c12940
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
13477c12945
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
13482c12950
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
13487c12955
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
13499c12967
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
13504c12972
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
13509c12977
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
13519c12987
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
13524c12992
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
13529c12997
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
13541c13009
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
13546c13014
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
13551c13019
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
13611c13079
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
13616c13084
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
13626,13631c13094
<                    is_static=True, template_parameters=['ns3::ObjectBase*'], visibility='protected')
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True, template_parameters=['void'], visibility='protected')
---
>                    is_static=True, visibility='protected', template_parameters=[u'ns3::ObjectBase*'])
13636c13099
<                    is_static=True, template_parameters=['ns3::SequenceNumber<unsigned int', ' int> '], visibility='protected')
---
>                    is_static=True, visibility='protected', template_parameters=[u'void'])
13641c13104
<                    is_static=True, template_parameters=['unsigned int'], visibility='protected')
---
>                    is_static=True, visibility='protected', template_parameters=[u'unsigned int'])
13646c13109
<                    is_static=True, template_parameters=['ns3::TcpSocketState::TcpCongState_t'], visibility='protected')
---
>                    is_static=True, visibility='protected', template_parameters=[u'ns3::TcpSocketState::TcpCongState_t'])
13651c13114
<                    is_static=True, template_parameters=['ns3::TcpSocketState::EcnState_t'], visibility='protected')
---
>                    is_static=True, visibility='protected', template_parameters=[u'ns3::TcpSocketState::EcnState_t'])
13656c13119
<                    is_static=True, template_parameters=['ns3::Time'], visibility='protected')
---
>                    is_static=True, visibility='protected', template_parameters=[u'ns3::SequenceNumber<unsigned int', u' int> '])
13661c13124
<                    is_static=True, template_parameters=['double'], visibility='protected')
---
>                    is_static=True, visibility='protected', template_parameters=[u'ns3::Time'])
13666c13129
<                    is_static=True, template_parameters=['ns3::TcpSocket::TcpStates_t'], visibility='protected')
---
>                    is_static=True, visibility='protected', template_parameters=[u'double'])
13671c13134
<                    is_static=True, template_parameters=['ns3::Ptr<ns3::Packet const> '], visibility='protected')
---
>                    is_static=True, visibility='protected', template_parameters=[u'ns3::TcpSocket::TcpStates_t'])
13676c13139
<                    is_static=True, template_parameters=['ns3::Ptr<ns3::NetDevice> '], visibility='protected')
---
>                    is_static=True, visibility='protected', template_parameters=[u'ns3::Ptr<ns3::Packet const> '])
13681c13144
<                    is_static=True, template_parameters=['unsigned short'], visibility='protected')
---
>                    is_static=True, visibility='protected', template_parameters=[u'ns3::Ptr<ns3::NetDevice> '])
13686c13149
<                    is_static=True, template_parameters=['ns3::Address const&'], visibility='protected')
---
>                    is_static=True, visibility='protected', template_parameters=[u'unsigned short'])
13691c13154
<                    is_static=True, template_parameters=['ns3::NetDevice::PacketType'], visibility='protected')
---
>                    is_static=True, visibility='protected', template_parameters=[u'ns3::Address const&'])
13696c13159
<                    is_static=True, template_parameters=['ns3::Ptr<ns3::Packet> '], visibility='protected')
---
>                    is_static=True, visibility='protected', template_parameters=[u'ns3::NetDevice::PacketType'])
13701c13164
<                    is_static=True, template_parameters=['ns3::Ipv4Address'], visibility='protected')
---
>                    is_static=True, visibility='protected', template_parameters=[u'ns3::Ptr<ns3::Packet> '])
13706c13169
<                    is_static=True, template_parameters=['unsigned char'], visibility='protected')
---
>                    is_static=True, visibility='protected', template_parameters=[u'ns3::Ipv4Address'])
13711c13174
<                    is_static=True, template_parameters=['ns3::Ptr<ns3::Ipv4Route> '], visibility='protected')
---
>                    is_static=True, visibility='protected', template_parameters=[u'unsigned char'])
13716c13179
<                    is_static=True, template_parameters=['ns3::Ipv6Address'], visibility='protected')
---
>                    is_static=True, visibility='protected', template_parameters=[u'ns3::Ptr<ns3::Ipv4Route> '])
13721c13184
<                    is_static=True, template_parameters=['ns3::Ptr<ns3::Ipv6Route> '], visibility='protected')
---
>                    is_static=True, visibility='protected', template_parameters=[u'ns3::Ipv6Address'])
13726c13189
<                    is_static=True, template_parameters=['ns3::Ptr<ns3::Socket> '], visibility='protected')
---
>                    is_static=True, visibility='protected', template_parameters=[u'ns3::Ptr<ns3::Ipv6Route> '])
13731c13194
<                    is_static=True, template_parameters=['bool'], visibility='protected')
---
>                    is_static=True, visibility='protected', template_parameters=[u'ns3::Ptr<ns3::Socket> '])
13736c13199
<                    is_static=True, template_parameters=['ns3::Ipv4Header const&'], visibility='protected')
---
>                    is_static=True, visibility='protected', template_parameters=[u'bool'])
13741c13204
<                    is_static=True, template_parameters=['ns3::Ptr<ns3::Ipv4> '], visibility='protected')
---
>                    is_static=True, visibility='protected', template_parameters=[u'ns3::Ipv4Header const&'])
13746c13209
<                    is_static=True, template_parameters=['ns3::Ipv4L3Protocol::DropReason'], visibility='protected')
---
>                    is_static=True, visibility='protected', template_parameters=[u'ns3::Ptr<ns3::Ipv4> '])
13751c13214
<                    is_static=True, template_parameters=['ns3::Ptr<ns3::Ipv6> '], visibility='protected')
---
>                    is_static=True, visibility='protected', template_parameters=[u'ns3::Ipv4L3Protocol::DropReason'])
13756c13219
<                    is_static=True, template_parameters=['ns3::Ipv6Header const&'], visibility='protected')
---
>                    is_static=True, visibility='protected', template_parameters=[u'ns3::Ptr<ns3::Ipv6> '])
13761c13224
<                    is_static=True, template_parameters=['ns3::Ipv6L3Protocol::DropReason'], visibility='protected')
---
>                    is_static=True, visibility='protected', template_parameters=[u'ns3::Ipv6Header const&'])
13766c13229
<                    is_static=True, template_parameters=['ns3::Ipv4Header'], visibility='protected')
---
>                    is_static=True, visibility='protected', template_parameters=[u'ns3::Ipv6L3Protocol::DropReason'])
13771c13234
<                    is_static=True, template_parameters=['ns3::Ptr<ns3::Ipv4Interface> '], visibility='protected')
---
>                    is_static=True, visibility='protected', template_parameters=[u'ns3::TcpHeader const&'])
13776,13801c13239
<                    is_static=True, template_parameters=['ns3::Ipv6Header'], visibility='protected')
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True, template_parameters=['ns3::Ptr<ns3::Ipv6Interface> '], visibility='protected')
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True, template_parameters=['ns3::TcpRateOps::TcpRateConnection const&'], visibility='protected')
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True, template_parameters=['ns3::TcpRateOps::TcpRateSample const&'], visibility='protected')
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True, template_parameters=['ns3::TcpHeader const&'], visibility='protected')
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True, template_parameters=['ns3::Ptr<ns3::TcpSocketBase const> '], visibility='protected')
---
>                    is_static=True, visibility='protected', template_parameters=[u'ns3::Ptr<ns3::TcpSocketBase const> '])
13841c13279
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
13851c13289
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
14049c13487
<                    is_virtual=True, visibility='private')
---
>                    visibility='private', is_virtual=True)
14054c13492
<                    is_virtual=True, visibility='private')
---
>                    visibility='private', is_virtual=True)
14130c13568
<                    is_const=True, is_virtual=True, visibility='private')
---
>                    is_const=True, visibility='private', is_virtual=True)
14135c13573
<                    is_virtual=True, visibility='private')
---
>                    visibility='private', is_virtual=True)
14140c13578
<                    is_const=True, is_virtual=True, visibility='private')
---
>                    is_const=True, visibility='private', is_virtual=True)
14280c13718
<                    is_virtual=True, is_pure_virtual=True, visibility='protected')
---
>                    is_pure_virtual=True, visibility='protected', is_virtual=True)
14418c13856
<                    is_virtual=True, visibility='private')
---
>                    visibility='private', is_virtual=True)
14566c14004
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
14571c14009
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
14576c14014
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
14586c14024
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14591c14029
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14606c14044
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14611c14049
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14623c14061
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14628c14066
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14633c14071
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14638c14076
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14643c14081
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
14648c14086
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
14653c14091
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
14658c14096
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
14663c14101
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
14668c14106
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
14673c14111
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
14678c14116
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
14683c14121
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14688c14126
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
14693c14131
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
14698c14136
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
14708c14146
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14713c14151
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14718c14156
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
14723c14161
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
14728c14166
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
14733c14171
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14738c14176
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14743c14181
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14748c14186
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14753c14191
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14758c14196
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14763c14201
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14768c14206
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14773c14211
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14778c14216
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14783c14221
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14788c14226
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14793c14231
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14800c14238
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
14805c14243
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
14810c14248
<                    is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
14815c14253
<                    is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
14958c14396
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
15167c14605
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
15172c14610
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
15177c14615
<                    is_const=True, is_virtual=True, visibility='private')
---
>                    is_const=True, visibility='private', is_virtual=True)
15182c14620
<                    is_const=True, is_virtual=True, visibility='private')
---
>                    is_const=True, visibility='private', is_virtual=True)
15187c14625
<                    is_virtual=True, visibility='private')
---
>                    visibility='private', is_virtual=True)
15192c14630
<                    is_virtual=True, visibility='private')
---
>                    visibility='private', is_virtual=True)
15296c14734
<                    is_const=True, is_virtual=True, visibility='private')
---
>                    is_const=True, visibility='private', is_virtual=True)
15301c14739
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
15447c14885
<                    is_virtual=True, visibility='private')
---
>                    visibility='private', is_virtual=True)
15508c14946
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15513c14951
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15518c14956
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15523c14961
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15528c14966
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
15533c14971
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15538c14976
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15543c14981
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15669c15107
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
15681c15119
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15686c15124
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15691c15129
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
15696c15134
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
15701c15139
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
15706c15144
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
15711c15149
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
15716c15154
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
15721c15159
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
15726c15164
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
15731c15169
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15736c15174
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
15741c15179
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
15746c15184
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
15756c15194
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15761c15199
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15766c15204
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
15771c15209
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
15776c15214
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15781c15219
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15786c15224
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15791c15229
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15796c15234
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15801c15239
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15806c15244
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15811c15249
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15816c15254
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15821c15259
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15826c15264
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15831c15269
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15836c15274
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15841c15279
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15848c15286
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
15853c15291
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
15858c15296
<                    is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
15863c15301
<                    is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
15919c15357
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
15934c15372
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
16037c15475
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
16192c15630
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
16401c15839
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
16558c15996
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
16808c16246
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
16813c16251
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
16818c16256
<                    is_virtual=True, visibility='private')
---
>                    visibility='private', is_virtual=True)
16823c16261
<                    is_const=True, is_virtual=True, visibility='private')
---
>                    is_const=True, visibility='private', is_virtual=True)
16828c16266
<                    is_virtual=True, visibility='private')
---
>                    visibility='private', is_virtual=True)
16833c16271
<                    is_const=True, is_virtual=True, visibility='private')
---
>                    is_const=True, visibility='private', is_virtual=True)
16838c16276
<                    is_virtual=True, visibility='private')
---
>                    visibility='private', is_virtual=True)
16843c16281
<                    is_const=True, is_virtual=True, visibility='private')
---
>                    is_const=True, visibility='private', is_virtual=True)
16903c16341
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
16913c16351
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
17030c16468
<                    is_const=True, is_virtual=True, visibility='private')
---
>                    is_const=True, visibility='private', is_virtual=True)
17035c16473
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
17182c16620
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
17187c16625
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
17192c16630
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
17197c16635
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
17202c16640
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
17207c16645
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
17212c16650
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
17217c16655
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
17222c16660
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
17227c16665
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
17375c16813
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
17516c16954
<                    is_virtual=True, visibility='private')
---
>                    visibility='private', is_virtual=True)
17672c17110
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
17677c17115
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
17682c17120
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
17687c17125
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
17692c17130
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
17697c17135
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
17702c17140
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
17707c17145
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
17712c17150
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
17722c17160
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
17727c17165
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
17732c17170
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
17737c17175
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
17742c17180
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
17747c17185
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
17752c17190
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
17757c17195
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
17762c17200
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
17767c17205
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
17772c17210
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
17777c17215
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
17782c17220
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
17787c17225
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
17792c17230
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
17919c17357
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
17924c17362
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
18046,18050d17483
<     ## packet.h (module 'network'): void ns3::Packet::AddByteTag(ns3::Tag const & tag, uint32_t start, uint32_t end) const [member function]
<     cls.add_method('AddByteTag', 
<                    'void', 
<                    [param('ns3::Tag const &', 'tag'), param('uint32_t', 'start'), param('uint32_t', 'end')], 
<                    is_const=True)
18236c17669
<                    is_const=True, deprecated=True)
---
>                    deprecated=True, is_const=True)
18281c17714
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
18286c17719
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
18405c17838
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
18410c17843
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
18503c17936
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
18508c17941
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
18541,18545d17973
<     ## tcp-bic.h (module 'internet'): void ns3::TcpBic::ReduceCwnd(ns3::Ptr<ns3::TcpSocketState> tcb) [member function]
<     cls.add_method('ReduceCwnd', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb')], 
<                    is_virtual=True)
18550c17978
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
18558c17986
<     ## tcp-recovery-ops.h (module 'internet'): void ns3::TcpClassicRecovery::DoRecovery(ns3::Ptr<ns3::TcpSocketState> tcb, uint32_t deliveredBytes) [member function]
---
>     ## tcp-recovery-ops.h (module 'internet'): void ns3::TcpClassicRecovery::DoRecovery(ns3::Ptr<ns3::TcpSocketState> tcb, uint32_t lastAckedBytes, uint32_t lastSackedBytes) [member function]
18561c17989
<                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb'), param('uint32_t', 'deliveredBytes')], 
---
>                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb'), param('uint32_t', 'lastAckedBytes'), param('uint32_t', 'lastSackedBytes')], 
18563c17991
<     ## tcp-recovery-ops.h (module 'internet'): void ns3::TcpClassicRecovery::EnterRecovery(ns3::Ptr<ns3::TcpSocketState> tcb, uint32_t dupAckCount, uint32_t unAckDataCount, uint32_t deliveredBytes) [member function]
---
>     ## tcp-recovery-ops.h (module 'internet'): void ns3::TcpClassicRecovery::EnterRecovery(ns3::Ptr<ns3::TcpSocketState> tcb, uint32_t dupAckCount, uint32_t unAckDataCount, uint32_t lastSackedBytes) [member function]
18566c17994
<                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb'), param('uint32_t', 'dupAckCount'), param('uint32_t', 'unAckDataCount'), param('uint32_t', 'deliveredBytes')], 
---
>                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb'), param('uint32_t', 'dupAckCount'), param('uint32_t', 'unAckDataCount'), param('uint32_t', 'lastSackedBytes')], 
18590,18631d18017
< def register_Ns3TcpDctcp_methods(root_module, cls):
<     ## tcp-dctcp.h (module 'internet'): ns3::TcpDctcp::TcpDctcp() [constructor]
<     cls.add_constructor([])
<     ## tcp-dctcp.h (module 'internet'): ns3::TcpDctcp::TcpDctcp(ns3::TcpDctcp const & sock) [constructor]
<     cls.add_constructor([param('ns3::TcpDctcp const &', 'sock')])
<     ## tcp-dctcp.h (module 'internet'): void ns3::TcpDctcp::CwndEvent(ns3::Ptr<ns3::TcpSocketState> tcb, ns3::TcpSocketState::TcpCAEvent_t const event) [member function]
<     cls.add_method('CwndEvent', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb'), param('ns3::TcpSocketState::TcpCAEvent_t const', 'event')], 
<                    is_virtual=True)
<     ## tcp-dctcp.h (module 'internet'): ns3::Ptr<ns3::TcpCongestionOps> ns3::TcpDctcp::Fork() [member function]
<     cls.add_method('Fork', 
<                    'ns3::Ptr< ns3::TcpCongestionOps >', 
<                    [], 
<                    is_virtual=True)
<     ## tcp-dctcp.h (module 'internet'): std::string ns3::TcpDctcp::GetName() const [member function]
<     cls.add_method('GetName', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## tcp-dctcp.h (module 'internet'): static ns3::TypeId ns3::TcpDctcp::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## tcp-dctcp.h (module 'internet'): void ns3::TcpDctcp::Init(ns3::Ptr<ns3::TcpSocketState> tcb) [member function]
<     cls.add_method('Init', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb')], 
<                    is_virtual=True)
<     ## tcp-dctcp.h (module 'internet'): void ns3::TcpDctcp::PktsAcked(ns3::Ptr<ns3::TcpSocketState> tcb, uint32_t segmentsAcked, ns3::Time const & rtt) [member function]
<     cls.add_method('PktsAcked', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb'), param('uint32_t', 'segmentsAcked'), param('ns3::Time const &', 'rtt')], 
<                    is_virtual=True)
<     ## tcp-dctcp.h (module 'internet'): void ns3::TcpDctcp::ReduceCwnd(ns3::Ptr<ns3::TcpSocketState> tcb) [member function]
<     cls.add_method('ReduceCwnd', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb')], 
<                    is_virtual=True)
<     return
< 
18671c18057
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
18708c18094
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
18740c18126
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
18745c18131
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
18926c18312
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
18931c18317
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
18982c18368
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
19014c18400
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
19022c18408
<     ## tcp-prr-recovery.h (module 'internet'): void ns3::TcpPrrRecovery::DoRecovery(ns3::Ptr<ns3::TcpSocketState> tcb, uint32_t deliveredBytes) [member function]
---
>     ## tcp-prr-recovery.h (module 'internet'): void ns3::TcpPrrRecovery::DoRecovery(ns3::Ptr<ns3::TcpSocketState> tcb, uint32_t lastAckedBytes, uint32_t lastSackedBytes) [member function]
19025c18411
<                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb'), param('uint32_t', 'deliveredBytes')], 
---
>                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb'), param('uint32_t', 'lastAckedBytes'), param('uint32_t', 'lastSackedBytes')], 
19027c18413
<     ## tcp-prr-recovery.h (module 'internet'): void ns3::TcpPrrRecovery::EnterRecovery(ns3::Ptr<ns3::TcpSocketState> tcb, uint32_t dupAckCount, uint32_t unAckDataCount, uint32_t deliveredBytes) [member function]
---
>     ## tcp-prr-recovery.h (module 'internet'): void ns3::TcpPrrRecovery::EnterRecovery(ns3::Ptr<ns3::TcpSocketState> tcb, uint32_t dupAckCount, uint32_t unAckDataCount, uint32_t lastSackedBytes) [member function]
19030c18416
<                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb'), param('uint32_t', 'dupAckCount'), param('uint32_t', 'unAckDataCount'), param('uint32_t', 'deliveredBytes')], 
---
>                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb'), param('uint32_t', 'dupAckCount'), param('uint32_t', 'unAckDataCount'), param('uint32_t', 'lastSackedBytes')], 
19059,19095d18444
< def register_Ns3TcpRateLinux_methods(root_module, cls):
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateLinux::TcpRateLinux() [constructor]
<     cls.add_constructor([])
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateLinux::TcpRateLinux(ns3::TcpRateLinux const & arg0) [constructor]
<     cls.add_constructor([param('ns3::TcpRateLinux const &', 'arg0')])
<     ## tcp-rate-ops.h (module 'internet'): void ns3::TcpRateLinux::CalculateAppLimited(uint32_t cWnd, uint32_t in_flight, uint32_t segmentSize, ns3::SequenceNumber32 const & tailSeq, ns3::SequenceNumber32 const & nextTx, uint32_t const lostOut, uint32_t const retransOut) [member function]
<     cls.add_method('CalculateAppLimited', 
<                    'void', 
<                    [param('uint32_t', 'cWnd'), param('uint32_t', 'in_flight'), param('uint32_t', 'segmentSize'), param('ns3::SequenceNumber32 const &', 'tailSeq'), param('ns3::SequenceNumber32 const &', 'nextTx'), param('uint32_t const', 'lostOut'), param('uint32_t const', 'retransOut')], 
<                    is_virtual=True)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateSample const & ns3::TcpRateLinux::GenerateSample(uint32_t delivered, uint32_t lost, bool is_sack_reneg, uint32_t priorInFlight, ns3::Time const & minRtt) [member function]
<     cls.add_method('GenerateSample', 
<                    'ns3::TcpRateOps::TcpRateSample const &', 
<                    [param('uint32_t', 'delivered'), param('uint32_t', 'lost'), param('bool', 'is_sack_reneg'), param('uint32_t', 'priorInFlight'), param('ns3::Time const &', 'minRtt')], 
<                    is_virtual=True)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateConnection const & ns3::TcpRateLinux::GetConnectionRate() [member function]
<     cls.add_method('GetConnectionRate', 
<                    'ns3::TcpRateOps::TcpRateConnection const &', 
<                    [], 
<                    is_virtual=True)
<     ## tcp-rate-ops.h (module 'internet'): static ns3::TypeId ns3::TcpRateLinux::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## tcp-rate-ops.h (module 'internet'): void ns3::TcpRateLinux::SkbDelivered(ns3::TcpTxItem * skb) [member function]
<     cls.add_method('SkbDelivered', 
<                    'void', 
<                    [param('ns3::TcpTxItem *', 'skb')], 
<                    is_virtual=True)
<     ## tcp-rate-ops.h (module 'internet'): void ns3::TcpRateLinux::SkbSent(ns3::TcpTxItem * skb, bool isStartOfTransmission) [member function]
<     cls.add_method('SkbSent', 
<                    'void', 
<                    [param('ns3::TcpTxItem *', 'skb'), param('bool', 'isStartOfTransmission')], 
<                    is_virtual=True)
<     return
< 
19300c18649
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
19305c18654
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
19551c18900
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
19598c18947
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True, custom_name=u'__call__')
19620c18969
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True, custom_name=u'__call__')
19642c18991
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True, custom_name=u'__call__')
19664c19013
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True, custom_name=u'__call__')
19686c19035
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True, custom_name=u'__call__')
19708c19057
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True, custom_name=u'__call__')
19730c19079
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True, custom_name=u'__call__')
19752,19796c19101
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3CallbackImpl__Void_Const_ns3TcpRateOpsTcpRateConnection___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::TcpRateOps::TcpRateConnection &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
<     cls.add_constructor([])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::TcpRateOps::TcpRateConnection &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, const ns3::TcpRateOps::TcpRateConnection &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< void, ns3::TcpRateOps::TcpRateConnection const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, const ns3::TcpRateOps::TcpRateConnection &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True)
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, const ns3::TcpRateOps::TcpRateConnection &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): void ns3::CallbackImpl<void, const ns3::TcpRateOps::TcpRateConnection &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::TcpRateOps::TcpRateConnection const & arg0) [member operator]
<     cls.add_method('operator()', 
<                    'void', 
<                    [param('ns3::TcpRateOps::TcpRateConnection const &', 'arg0')], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3CallbackImpl__Void_Const_ns3TcpRateOpsTcpRateSample___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::TcpRateOps::TcpRateSample &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
<     cls.add_constructor([])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::TcpRateOps::TcpRateSample &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, const ns3::TcpRateOps::TcpRateSample &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< void, ns3::TcpRateOps::TcpRateSample const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, const ns3::TcpRateOps::TcpRateSample &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True)
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, const ns3::TcpRateOps::TcpRateSample &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): void ns3::CallbackImpl<void, const ns3::TcpRateOps::TcpRateSample &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::TcpRateOps::TcpRateSample const & arg0) [member operator]
<     cls.add_method('operator()', 
<                    'void', 
<                    [param('ns3::TcpRateOps::TcpRateSample const &', 'arg0')], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True, custom_name=u'__call__')
19818,19862c19123
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3CallbackImpl__Void_Ns3Ipv4Address_Unsigned_char_Unsigned_char_Unsigned_char_Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ipv4Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
<     cls.add_constructor([])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ipv4Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ipv4Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ipv4Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ipv4Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True)
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ipv4Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ipv4Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ipv4Address arg0, unsigned char arg1, unsigned char arg2, unsigned char arg3, unsigned int arg4) [member operator]
<     cls.add_method('operator()', 
<                    'void', 
<                    [param('ns3::Ipv4Address', 'arg0'), param('unsigned char', 'arg1'), param('unsigned char', 'arg2'), param('unsigned char', 'arg3'), param('unsigned int', 'arg4')], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3CallbackImpl__Void_Ns3Ipv6Address_Unsigned_char_Unsigned_char_Unsigned_char_Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ipv6Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
<     cls.add_constructor([])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ipv6Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ipv6Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ipv6Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ipv6Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True)
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ipv6Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ipv6Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ipv6Address arg0, unsigned char arg1, unsigned char arg2, unsigned char arg3, unsigned int arg4) [member operator]
<     cls.add_method('operator()', 
<                    'void', 
<                    [param('ns3::Ipv6Address', 'arg0'), param('unsigned char', 'arg1'), param('unsigned char', 'arg2'), param('unsigned char', 'arg3'), param('unsigned int', 'arg4')], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True, custom_name=u'__call__')
19884c19145
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True, custom_name=u'__call__')
19906c19167
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True, custom_name=u'__call__')
19928c19189
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True, custom_name=u'__call__')
19950c19211
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True, custom_name=u'__call__')
19972c19233
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True, custom_name=u'__call__')
19994c19255
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True, custom_name=u'__call__')
20016,20038c19277
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Ns3Ipv4Header_Unsigned_short_Ns3Ptr__lt__ns3Ipv4Interface__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv4Header, unsigned short, ns3::Ptr<ns3::Ipv4Interface>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
<     cls.add_constructor([])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv4Header, unsigned short, ns3::Ptr<ns3::Ipv4Interface>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv4Header, unsigned short, ns3::Ptr<ns3::Ipv4Interface>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::Packet >, ns3::Ipv4Header, unsigned short, ns3::Ptr< ns3::Ipv4Interface >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv4Header, unsigned short, ns3::Ptr<ns3::Ipv4Interface>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True)
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv4Header, unsigned short, ns3::Ptr<ns3::Ipv4Interface>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv4Header, unsigned short, ns3::Ptr<ns3::Ipv4Interface>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<ns3::Packet> arg0, ns3::Ipv4Header arg1, short unsigned int arg2, ns3::Ptr<ns3::Ipv4Interface> arg3) [member operator]
<     cls.add_method('operator()', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Packet >', 'arg0'), param('ns3::Ipv4Header', 'arg1'), param('short unsigned int', 'arg2'), param('ns3::Ptr< ns3::Ipv4Interface >', 'arg3')], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True, custom_name=u'__call__')
20060,20082c19299
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Ns3Ipv6Header_Unsigned_short_Ns3Ptr__lt__ns3Ipv6Interface__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv6Header, unsigned short, ns3::Ptr<ns3::Ipv6Interface>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
<     cls.add_constructor([])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv6Header, unsigned short, ns3::Ptr<ns3::Ipv6Interface>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv6Header, unsigned short, ns3::Ptr<ns3::Ipv6Interface>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::Packet >, ns3::Ipv6Header, unsigned short, ns3::Ptr< ns3::Ipv6Interface >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv6Header, unsigned short, ns3::Ptr<ns3::Ipv6Interface>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True)
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv6Header, unsigned short, ns3::Ptr<ns3::Ipv6Interface>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv6Header, unsigned short, ns3::Ptr<ns3::Ipv6Interface>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<ns3::Packet> arg0, ns3::Ipv6Header arg1, short unsigned int arg2, ns3::Ptr<ns3::Ipv6Interface> arg3) [member operator]
<     cls.add_method('operator()', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Packet >', 'arg0'), param('ns3::Ipv6Header', 'arg1'), param('short unsigned int', 'arg2'), param('ns3::Ptr< ns3::Ipv6Interface >', 'arg3')], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True, custom_name=u'__call__')
20104c19321
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True, custom_name=u'__call__')
20126c19343
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True, custom_name=u'__call__')
20148c19365
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True, custom_name=u'__call__')
20170c19387
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True, custom_name=u'__call__')
20192c19409
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True, custom_name=u'__call__')
20214c19431
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True, custom_name=u'__call__')
20236c19453
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True, custom_name=u'__call__')
20258,20280c19475
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3CallbackImpl__Void_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
<     cls.add_constructor([])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True)
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()() [member operator]
<     cls.add_method('operator()', 
<                    'void', 
<                    [], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True, custom_name=u'__call__')
20302c19497
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True, custom_name=u'__call__')
20377c19572
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
20382c19577
<                    is_virtual=True, visibility='private')
---
>                    visibility='private', is_virtual=True)
20397,20398c19592
<                    [param('ns3::Ptr< ns3::NetDevice >', 'device'), param('ns3::Ptr< ns3::Ipv6Interface >', 'interface')], 
<                    is_virtual=True)
---
>                    [param('ns3::Ptr< ns3::NetDevice >', 'device'), param('ns3::Ptr< ns3::Ipv6Interface >', 'interface')])
20433,20437d19626
<     ## icmpv6-l4-protocol.h (module 'internet'): ns3::TypeId ns3::Icmpv6L4Protocol::GetInstanceTypeId() const [member function]
<     cls.add_method('GetInstanceTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_const=True, is_virtual=True)
20448,20451d19636
<     ## icmpv6-l4-protocol.h (module 'internet'): ns3::Ptr<ns3::Node> ns3::Icmpv6L4Protocol::GetNode() [member function]
<     cls.add_method('GetNode', 
<                    'ns3::Ptr< ns3::Node >', 
<                    [])
20545,20546c19730
<                    [param('ns3::Ipv6Address', 'src'), param('ns3::Ipv6Address', 'dst'), param('ns3::Ipv6Address', 'target'), param('ns3::Address', 'hardwareAddress')], 
<                    is_virtual=True)
---
>                    [param('ns3::Ipv6Address', 'src'), param('ns3::Ipv6Address', 'dst'), param('ns3::Ipv6Address', 'target'), param('ns3::Address', 'hardwareAddress')])
20565,20575c19749
<                    is_virtual=True, visibility='protected')
<     ## icmpv6-l4-protocol.h (module 'internet'): ns3::Ptr<ns3::NdiscCache> ns3::Icmpv6L4Protocol::FindCache(ns3::Ptr<ns3::NetDevice> device) [member function]
<     cls.add_method('FindCache', 
<                    'ns3::Ptr< ns3::NdiscCache >', 
<                    [param('ns3::Ptr< ns3::NetDevice >', 'device')], 
<                    visibility='protected')
<     ## icmpv6-l4-protocol.h (module 'internet'): void ns3::Icmpv6L4Protocol::Forward(ns3::Ipv6Address source, ns3::Icmpv6Header icmp, uint32_t info, ns3::Ipv6Header ipHeader, uint8_t const * payload) [member function]
<     cls.add_method('Forward', 
<                    'void', 
<                    [param('ns3::Ipv6Address', 'source'), param('ns3::Icmpv6Header', 'icmp'), param('uint32_t', 'info'), param('ns3::Ipv6Header', 'ipHeader'), param('uint8_t const *', 'payload')], 
<                    visibility='protected')
---
>                    visibility='protected', is_virtual=True)
20580c19754
<                    is_const=True, is_virtual=True, visibility='protected')
---
>                    is_const=True, visibility='private', is_virtual=True)
20585,20640c19759
<                    is_const=True, is_virtual=True, visibility='protected')
<     ## icmpv6-l4-protocol.h (module 'internet'): void ns3::Icmpv6L4Protocol::HandleDestinationUnreachable(ns3::Ptr<ns3::Packet> p, ns3::Ipv6Address const & src, ns3::Ipv6Address const & dst, ns3::Ptr<ns3::Ipv6Interface> interface) [member function]
<     cls.add_method('HandleDestinationUnreachable', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Packet >', 'p'), param('ns3::Ipv6Address const &', 'src'), param('ns3::Ipv6Address const &', 'dst'), param('ns3::Ptr< ns3::Ipv6Interface >', 'interface')], 
<                    visibility='protected')
<     ## icmpv6-l4-protocol.h (module 'internet'): void ns3::Icmpv6L4Protocol::HandleEchoRequest(ns3::Ptr<ns3::Packet> p, ns3::Ipv6Address const & src, ns3::Ipv6Address const & dst, ns3::Ptr<ns3::Ipv6Interface> interface) [member function]
<     cls.add_method('HandleEchoRequest', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Packet >', 'p'), param('ns3::Ipv6Address const &', 'src'), param('ns3::Ipv6Address const &', 'dst'), param('ns3::Ptr< ns3::Ipv6Interface >', 'interface')], 
<                    visibility='protected')
<     ## icmpv6-l4-protocol.h (module 'internet'): void ns3::Icmpv6L4Protocol::HandleNA(ns3::Ptr<ns3::Packet> p, ns3::Ipv6Address const & src, ns3::Ipv6Address const & dst, ns3::Ptr<ns3::Ipv6Interface> interface) [member function]
<     cls.add_method('HandleNA', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Packet >', 'p'), param('ns3::Ipv6Address const &', 'src'), param('ns3::Ipv6Address const &', 'dst'), param('ns3::Ptr< ns3::Ipv6Interface >', 'interface')], 
<                    visibility='protected')
<     ## icmpv6-l4-protocol.h (module 'internet'): void ns3::Icmpv6L4Protocol::HandleNS(ns3::Ptr<ns3::Packet> p, ns3::Ipv6Address const & src, ns3::Ipv6Address const & dst, ns3::Ptr<ns3::Ipv6Interface> interface) [member function]
<     cls.add_method('HandleNS', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Packet >', 'p'), param('ns3::Ipv6Address const &', 'src'), param('ns3::Ipv6Address const &', 'dst'), param('ns3::Ptr< ns3::Ipv6Interface >', 'interface')], 
<                    visibility='protected')
<     ## icmpv6-l4-protocol.h (module 'internet'): void ns3::Icmpv6L4Protocol::HandlePacketTooBig(ns3::Ptr<ns3::Packet> p, ns3::Ipv6Address const & src, ns3::Ipv6Address const & dst, ns3::Ptr<ns3::Ipv6Interface> interface) [member function]
<     cls.add_method('HandlePacketTooBig', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Packet >', 'p'), param('ns3::Ipv6Address const &', 'src'), param('ns3::Ipv6Address const &', 'dst'), param('ns3::Ptr< ns3::Ipv6Interface >', 'interface')], 
<                    visibility='protected')
<     ## icmpv6-l4-protocol.h (module 'internet'): void ns3::Icmpv6L4Protocol::HandleParameterError(ns3::Ptr<ns3::Packet> p, ns3::Ipv6Address const & src, ns3::Ipv6Address const & dst, ns3::Ptr<ns3::Ipv6Interface> interface) [member function]
<     cls.add_method('HandleParameterError', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Packet >', 'p'), param('ns3::Ipv6Address const &', 'src'), param('ns3::Ipv6Address const &', 'dst'), param('ns3::Ptr< ns3::Ipv6Interface >', 'interface')], 
<                    visibility='protected')
<     ## icmpv6-l4-protocol.h (module 'internet'): void ns3::Icmpv6L4Protocol::HandleRA(ns3::Ptr<ns3::Packet> p, ns3::Ipv6Address const & src, ns3::Ipv6Address const & dst, ns3::Ptr<ns3::Ipv6Interface> interface) [member function]
<     cls.add_method('HandleRA', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Packet >', 'p'), param('ns3::Ipv6Address const &', 'src'), param('ns3::Ipv6Address const &', 'dst'), param('ns3::Ptr< ns3::Ipv6Interface >', 'interface')], 
<                    visibility='protected')
<     ## icmpv6-l4-protocol.h (module 'internet'): void ns3::Icmpv6L4Protocol::HandleRS(ns3::Ptr<ns3::Packet> p, ns3::Ipv6Address const & src, ns3::Ipv6Address const & dst, ns3::Ptr<ns3::Ipv6Interface> interface) [member function]
<     cls.add_method('HandleRS', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Packet >', 'p'), param('ns3::Ipv6Address const &', 'src'), param('ns3::Ipv6Address const &', 'dst'), param('ns3::Ptr< ns3::Ipv6Interface >', 'interface')], 
<                    visibility='protected')
<     ## icmpv6-l4-protocol.h (module 'internet'): void ns3::Icmpv6L4Protocol::HandleRedirection(ns3::Ptr<ns3::Packet> p, ns3::Ipv6Address const & src, ns3::Ipv6Address const & dst, ns3::Ptr<ns3::Ipv6Interface> interface) [member function]
<     cls.add_method('HandleRedirection', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Packet >', 'p'), param('ns3::Ipv6Address const &', 'src'), param('ns3::Ipv6Address const &', 'dst'), param('ns3::Ptr< ns3::Ipv6Interface >', 'interface')], 
<                    visibility='protected')
<     ## icmpv6-l4-protocol.h (module 'internet'): void ns3::Icmpv6L4Protocol::HandleTimeExceeded(ns3::Ptr<ns3::Packet> p, ns3::Ipv6Address const & src, ns3::Ipv6Address const & dst, ns3::Ptr<ns3::Ipv6Interface> interface) [member function]
<     cls.add_method('HandleTimeExceeded', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Packet >', 'p'), param('ns3::Ipv6Address const &', 'src'), param('ns3::Ipv6Address const &', 'dst'), param('ns3::Ptr< ns3::Ipv6Interface >', 'interface')], 
<                    visibility='protected')
<     ## icmpv6-l4-protocol.h (module 'internet'): void ns3::Icmpv6L4Protocol::ReceiveLLA(ns3::Icmpv6OptionLinkLayerAddress lla, ns3::Ipv6Address const & src, ns3::Ipv6Address const & dst, ns3::Ptr<ns3::Ipv6Interface> interface) [member function]
<     cls.add_method('ReceiveLLA', 
<                    'void', 
<                    [param('ns3::Icmpv6OptionLinkLayerAddress', 'lla'), param('ns3::Ipv6Address const &', 'src'), param('ns3::Ipv6Address const &', 'dst'), param('ns3::Ptr< ns3::Ipv6Interface >', 'interface')], 
<                    visibility='protected')
---
>                    is_const=True, visibility='private', is_virtual=True)
20645c19764
<                    is_virtual=True, visibility='protected')
---
>                    visibility='private', is_virtual=True)
20650c19769
<                    is_virtual=True, visibility='protected')
---
>                    visibility='private', is_virtual=True)
20745c19864
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
20817c19936
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
20822c19941
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
20959c20078
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
21127c20246
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
21165c20284
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
21175c20294
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
21307c20426
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
21317c20436
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
diff ../../NS3-WiGig/src/internet/bindings/modulegen__gcc_LP64.py ../../ns-3-dev-git/src/internet/bindings/modulegen__gcc_LP64.py
30c30
<     module.add_class('AsciiTraceHelperForDevice', import_from_module='ns.network', allow_subclassing=True)
---
>     module.add_class('AsciiTraceHelperForDevice', allow_subclassing=True, import_from_module='ns.network')
39,41c39,41
<     typehandlers.add_type_alias('std::list< ns3::AttributeConstructionList::Item > const_iterator', 'ns3::AttributeConstructionList::CIterator')
<     typehandlers.add_type_alias('std::list< ns3::AttributeConstructionList::Item > const_iterator*', 'ns3::AttributeConstructionList::CIterator*')
<     typehandlers.add_type_alias('std::list< ns3::AttributeConstructionList::Item > const_iterator&', 'ns3::AttributeConstructionList::CIterator&')
---
>     typehandlers.add_type_alias(u'std::list< ns3::AttributeConstructionList::Item > const_iterator', u'ns3::AttributeConstructionList::CIterator')
>     typehandlers.add_type_alias(u'std::list< ns3::AttributeConstructionList::Item > const_iterator*', u'ns3::AttributeConstructionList::CIterator*')
>     typehandlers.add_type_alias(u'std::list< ns3::AttributeConstructionList::Item > const_iterator&', u'ns3::AttributeConstructionList::CIterator&')
150,159d149
<     ## ipv4-end-point.h (module 'internet'): ns3::Ipv4EndPoint [class]
<     module.add_class('Ipv4EndPoint')
<     ## ipv4-end-point-demux.h (module 'internet'): ns3::Ipv4EndPointDemux [class]
<     module.add_class('Ipv4EndPointDemux')
<     typehandlers.add_type_alias('std::list< ns3::Ipv4EndPoint * >', 'ns3::Ipv4EndPointDemux::EndPoints')
<     typehandlers.add_type_alias('std::list< ns3::Ipv4EndPoint * >*', 'ns3::Ipv4EndPointDemux::EndPoints*')
<     typehandlers.add_type_alias('std::list< ns3::Ipv4EndPoint * >&', 'ns3::Ipv4EndPointDemux::EndPoints&')
<     typehandlers.add_type_alias('std::list< ns3::Ipv4EndPoint * > iterator', 'ns3::Ipv4EndPointDemux::EndPointsI')
<     typehandlers.add_type_alias('std::list< ns3::Ipv4EndPoint * > iterator*', 'ns3::Ipv4EndPointDemux::EndPointsI*')
<     typehandlers.add_type_alias('std::list< ns3::Ipv4EndPoint * > iterator&', 'ns3::Ipv4EndPointDemux::EndPointsI&')
166,168c156,158
<     typehandlers.add_type_alias('std::vector< std::pair< ns3::Ptr< ns3::Ipv4 >, unsigned int > > const_iterator', 'ns3::Ipv4InterfaceContainer::Iterator')
<     typehandlers.add_type_alias('std::vector< std::pair< ns3::Ptr< ns3::Ipv4 >, unsigned int > > const_iterator*', 'ns3::Ipv4InterfaceContainer::Iterator*')
<     typehandlers.add_type_alias('std::vector< std::pair< ns3::Ptr< ns3::Ipv4 >, unsigned int > > const_iterator&', 'ns3::Ipv4InterfaceContainer::Iterator&')
---
>     typehandlers.add_type_alias(u'std::vector< std::pair< ns3::Ptr< ns3::Ipv4 >, unsigned int > > const_iterator', u'ns3::Ipv4InterfaceContainer::Iterator')
>     typehandlers.add_type_alias(u'std::vector< std::pair< ns3::Ptr< ns3::Ipv4 >, unsigned int > > const_iterator*', u'ns3::Ipv4InterfaceContainer::Iterator*')
>     typehandlers.add_type_alias(u'std::vector< std::pair< ns3::Ptr< ns3::Ipv4 >, unsigned int > > const_iterator&', u'ns3::Ipv4InterfaceContainer::Iterator&')
187,196d176
<     ## ipv6-end-point.h (module 'internet'): ns3::Ipv6EndPoint [class]
<     module.add_class('Ipv6EndPoint')
<     ## ipv6-end-point-demux.h (module 'internet'): ns3::Ipv6EndPointDemux [class]
<     module.add_class('Ipv6EndPointDemux')
<     typehandlers.add_type_alias('std::list< ns3::Ipv6EndPoint * >', 'ns3::Ipv6EndPointDemux::EndPoints')
<     typehandlers.add_type_alias('std::list< ns3::Ipv6EndPoint * >*', 'ns3::Ipv6EndPointDemux::EndPoints*')
<     typehandlers.add_type_alias('std::list< ns3::Ipv6EndPoint * >&', 'ns3::Ipv6EndPointDemux::EndPoints&')
<     typehandlers.add_type_alias('std::list< ns3::Ipv6EndPoint * > iterator', 'ns3::Ipv6EndPointDemux::EndPointsI')
<     typehandlers.add_type_alias('std::list< ns3::Ipv6EndPoint * > iterator*', 'ns3::Ipv6EndPointDemux::EndPointsI*')
<     typehandlers.add_type_alias('std::list< ns3::Ipv6EndPoint * > iterator&', 'ns3::Ipv6EndPointDemux::EndPointsI&')
205,207c185,187
<     typehandlers.add_type_alias('std::vector< std::pair< ns3::Ptr< ns3::Ipv6 >, unsigned int > > const_iterator', 'ns3::Ipv6InterfaceContainer::Iterator')
<     typehandlers.add_type_alias('std::vector< std::pair< ns3::Ptr< ns3::Ipv6 >, unsigned int > > const_iterator*', 'ns3::Ipv6InterfaceContainer::Iterator*')
<     typehandlers.add_type_alias('std::vector< std::pair< ns3::Ptr< ns3::Ipv6 >, unsigned int > > const_iterator&', 'ns3::Ipv6InterfaceContainer::Iterator&')
---
>     typehandlers.add_type_alias(u'std::vector< std::pair< ns3::Ptr< ns3::Ipv6 >, unsigned int > > const_iterator', u'ns3::Ipv6InterfaceContainer::Iterator')
>     typehandlers.add_type_alias(u'std::vector< std::pair< ns3::Ptr< ns3::Ipv6 >, unsigned int > > const_iterator*', u'ns3::Ipv6InterfaceContainer::Iterator*')
>     typehandlers.add_type_alias(u'std::vector< std::pair< ns3::Ptr< ns3::Ipv6 >, unsigned int > > const_iterator&', u'ns3::Ipv6InterfaceContainer::Iterator&')
220,222c200,202
<     typehandlers.add_type_alias('void ( * ) ( ns3::Mac48Address )', 'ns3::Mac48Address::TracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Mac48Address )*', 'ns3::Mac48Address::TracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Mac48Address )&', 'ns3::Mac48Address::TracedCallback&')
---
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Mac48Address )', u'ns3::Mac48Address::TracedCallback')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Mac48Address )*', u'ns3::Mac48Address::TracedCallback*')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Mac48Address )&', u'ns3::Mac48Address::TracedCallback&')
231,233c211,213
<     typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::NetDevice > > const_iterator', 'ns3::NetDeviceContainer::Iterator')
<     typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::NetDevice > > const_iterator*', 'ns3::NetDeviceContainer::Iterator*')
<     typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::NetDevice > > const_iterator&', 'ns3::NetDeviceContainer::Iterator&')
---
>     typehandlers.add_type_alias(u'std::vector< ns3::Ptr< ns3::NetDevice > > const_iterator', u'ns3::NetDeviceContainer::Iterator')
>     typehandlers.add_type_alias(u'std::vector< ns3::Ptr< ns3::NetDevice > > const_iterator*', u'ns3::NetDeviceContainer::Iterator*')
>     typehandlers.add_type_alias(u'std::vector< ns3::Ptr< ns3::NetDevice > > const_iterator&', u'ns3::NetDeviceContainer::Iterator&')
236,238c216,218
<     typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::Node > > const_iterator', 'ns3::NodeContainer::Iterator')
<     typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::Node > > const_iterator*', 'ns3::NodeContainer::Iterator*')
<     typehandlers.add_type_alias('std::vector< ns3::Ptr< ns3::Node > > const_iterator&', 'ns3::NodeContainer::Iterator&')
---
>     typehandlers.add_type_alias(u'std::vector< ns3::Ptr< ns3::Node > > const_iterator', u'ns3::NodeContainer::Iterator')
>     typehandlers.add_type_alias(u'std::vector< ns3::Ptr< ns3::Node > > const_iterator*', u'ns3::NodeContainer::Iterator*')
>     typehandlers.add_type_alias(u'std::vector< ns3::Ptr< ns3::Node > > const_iterator&', u'ns3::NodeContainer::Iterator&')
240c220
<     module.add_class('ObjectBase', import_from_module='ns.core', allow_subclassing=True)
---
>     module.add_class('ObjectBase', allow_subclassing=True, import_from_module='ns.core')
270c250
<     module.add_class('PcapHelperForDevice', import_from_module='ns.network', allow_subclassing=True)
---
>     module.add_class('PcapHelperForDevice', allow_subclassing=True, import_from_module='ns.network')
293,295c273,275
<     typehandlers.add_type_alias('std::pair< ns3::Ipv4Address, int >', 'ns3::SPFVertex::NodeExit_t')
<     typehandlers.add_type_alias('std::pair< ns3::Ipv4Address, int >*', 'ns3::SPFVertex::NodeExit_t*')
<     typehandlers.add_type_alias('std::pair< ns3::Ipv4Address, int >&', 'ns3::SPFVertex::NodeExit_t&')
---
>     typehandlers.add_type_alias(u'std::pair< ns3::Ipv4Address, int >', u'ns3::SPFVertex::NodeExit_t')
>     typehandlers.add_type_alias(u'std::pair< ns3::Ipv4Address, int >*', u'ns3::SPFVertex::NodeExit_t*')
>     typehandlers.add_type_alias(u'std::pair< ns3::Ipv4Address, int >&', u'ns3::SPFVertex::NodeExit_t&')
299c279
<     module.add_class('SimpleRefCount', import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), automatic_type_narrowing=True, parent=root_module['ns3::ObjectBase'], template_parameters=['ns3::Object', 'ns3::ObjectBase', 'ns3::ObjectDeleter'])
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::Object', 'ns3::ObjectBase', 'ns3::ObjectDeleter'], parent=root_module['ns3::ObjectBase'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
301c281
<     module.add_class('Simulator', import_from_module='ns.core', destructor_visibility='private')
---
>     module.add_class('Simulator', destructor_visibility='private', import_from_module='ns.core')
308c288
<     ## tcp-tx-item.h (module 'internet'): ns3::TcpTxItem [class]
---
>     ## tcp-tx-buffer.h (module 'internet'): ns3::TcpTxItem [class]
310,311d289
<     ## tcp-tx-item.h (module 'internet'): ns3::TcpTxItem::RateInformation [struct]
<     module.add_class('RateInformation', outer_class=root_module['ns3::TcpTxItem'])
321c299
<     module.add_class('TimerImpl', import_from_module='ns.core', allow_subclassing=True)
---
>     module.add_class('TimerImpl', allow_subclassing=True, import_from_module='ns.core')
346,348c324,326
<     typehandlers.add_type_alias('uint32_t', 'ns3::TypeId::hash_t')
<     typehandlers.add_type_alias('uint32_t*', 'ns3::TypeId::hash_t*')
<     typehandlers.add_type_alias('uint32_t&', 'ns3::TypeId::hash_t&')
---
>     typehandlers.add_type_alias(u'uint32_t', u'ns3::TypeId::hash_t')
>     typehandlers.add_type_alias(u'uint32_t*', u'ns3::TypeId::hash_t*')
>     typehandlers.add_type_alias(u'uint32_t&', u'ns3::TypeId::hash_t&')
484c462
<     module.add_class('SimpleRefCount', import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), automatic_type_narrowing=True, parent=root_module['ns3::empty'], template_parameters=['ns3::AttributeAccessor', 'ns3::empty', 'ns3::DefaultDeleter<ns3::AttributeAccessor>'])
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::AttributeAccessor', 'ns3::empty', 'ns3::DefaultDeleter<ns3::AttributeAccessor>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
486c464
<     module.add_class('SimpleRefCount', import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), automatic_type_narrowing=True, parent=root_module['ns3::empty'], template_parameters=['ns3::AttributeChecker', 'ns3::empty', 'ns3::DefaultDeleter<ns3::AttributeChecker>'])
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::AttributeChecker', 'ns3::empty', 'ns3::DefaultDeleter<ns3::AttributeChecker>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
488c466
<     module.add_class('SimpleRefCount', import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), automatic_type_narrowing=True, parent=root_module['ns3::empty'], template_parameters=['ns3::AttributeValue', 'ns3::empty', 'ns3::DefaultDeleter<ns3::AttributeValue>'])
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::AttributeValue', 'ns3::empty', 'ns3::DefaultDeleter<ns3::AttributeValue>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
490c468
<     module.add_class('SimpleRefCount', import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), automatic_type_narrowing=True, parent=root_module['ns3::empty'], template_parameters=['ns3::CallbackImplBase', 'ns3::empty', 'ns3::DefaultDeleter<ns3::CallbackImplBase>'])
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::CallbackImplBase', 'ns3::empty', 'ns3::DefaultDeleter<ns3::CallbackImplBase>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
492c470
<     module.add_class('SimpleRefCount', import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), automatic_type_narrowing=True, parent=root_module['ns3::empty'], template_parameters=['ns3::EventImpl', 'ns3::empty', 'ns3::DefaultDeleter<ns3::EventImpl>'])
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::EventImpl', 'ns3::empty', 'ns3::DefaultDeleter<ns3::EventImpl>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
494c472
<     module.add_class('SimpleRefCount', import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), automatic_type_narrowing=True, parent=root_module['ns3::empty'], template_parameters=['ns3::Hash::Implementation', 'ns3::empty', 'ns3::DefaultDeleter<ns3::Hash::Implementation>'])
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::Hash::Implementation', 'ns3::empty', 'ns3::DefaultDeleter<ns3::Hash::Implementation>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
496c474
<     module.add_class('SimpleRefCount', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), automatic_type_narrowing=True, parent=root_module['ns3::empty'], template_parameters=['ns3::Ipv4MulticastRoute', 'ns3::empty', 'ns3::DefaultDeleter<ns3::Ipv4MulticastRoute>'])
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, template_parameters=['ns3::Ipv4MulticastRoute', 'ns3::empty', 'ns3::DefaultDeleter<ns3::Ipv4MulticastRoute>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
498c476
<     module.add_class('SimpleRefCount', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), automatic_type_narrowing=True, parent=root_module['ns3::empty'], template_parameters=['ns3::Ipv4Route', 'ns3::empty', 'ns3::DefaultDeleter<ns3::Ipv4Route>'])
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, template_parameters=['ns3::Ipv4Route', 'ns3::empty', 'ns3::DefaultDeleter<ns3::Ipv4Route>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
500c478
<     module.add_class('SimpleRefCount', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), automatic_type_narrowing=True, parent=root_module['ns3::empty'], template_parameters=['ns3::Ipv6MulticastRoute', 'ns3::empty', 'ns3::DefaultDeleter<ns3::Ipv6MulticastRoute>'])
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, template_parameters=['ns3::Ipv6MulticastRoute', 'ns3::empty', 'ns3::DefaultDeleter<ns3::Ipv6MulticastRoute>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
502c480
<     module.add_class('SimpleRefCount', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), automatic_type_narrowing=True, parent=root_module['ns3::empty'], template_parameters=['ns3::Ipv6Route', 'ns3::empty', 'ns3::DefaultDeleter<ns3::Ipv6Route>'])
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, template_parameters=['ns3::Ipv6Route', 'ns3::empty', 'ns3::DefaultDeleter<ns3::Ipv6Route>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
504c482
<     module.add_class('SimpleRefCount', import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), automatic_type_narrowing=True, parent=root_module['ns3::empty'], template_parameters=['ns3::NixVector', 'ns3::empty', 'ns3::DefaultDeleter<ns3::NixVector>'])
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::NixVector', 'ns3::empty', 'ns3::DefaultDeleter<ns3::NixVector>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
506c484
<     module.add_class('SimpleRefCount', import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), automatic_type_narrowing=True, parent=root_module['ns3::empty'], template_parameters=['ns3::OutputStreamWrapper', 'ns3::empty', 'ns3::DefaultDeleter<ns3::OutputStreamWrapper>'])
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::OutputStreamWrapper', 'ns3::empty', 'ns3::DefaultDeleter<ns3::OutputStreamWrapper>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
508c486
<     module.add_class('SimpleRefCount', import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), automatic_type_narrowing=True, parent=root_module['ns3::empty'], template_parameters=['ns3::Packet', 'ns3::empty', 'ns3::DefaultDeleter<ns3::Packet>'])
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::Packet', 'ns3::empty', 'ns3::DefaultDeleter<ns3::Packet>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
510c488
<     module.add_class('SimpleRefCount', import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), automatic_type_narrowing=True, parent=root_module['ns3::empty'], template_parameters=['ns3::QueueItem', 'ns3::empty', 'ns3::DefaultDeleter<ns3::QueueItem>'])
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::QueueItem', 'ns3::empty', 'ns3::DefaultDeleter<ns3::QueueItem>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
512c490
<     module.add_class('SimpleRefCount', import_from_module='ns.core', memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'), automatic_type_narrowing=True, parent=root_module['ns3::empty'], template_parameters=['ns3::TraceSourceAccessor', 'ns3::empty', 'ns3::DefaultDeleter<ns3::TraceSourceAccessor>'])
---
>     module.add_class('SimpleRefCount', automatic_type_narrowing=True, import_from_module='ns.core', template_parameters=['ns3::TraceSourceAccessor', 'ns3::empty', 'ns3::DefaultDeleter<ns3::TraceSourceAccessor>'], parent=root_module['ns3::empty'], memory_policy=cppclass.ReferenceCountingMethodsPolicy(incref_method='Ref', decref_method='Unref', peekref_method='GetReferenceCount'))
543,548c521,526
<     typehandlers.add_type_alias('std::list< ns3::Ptr< ns3::TcpOption const > >', 'ns3::TcpHeader::TcpOptionList')
<     typehandlers.add_type_alias('std::list< ns3::Ptr< ns3::TcpOption const > >*', 'ns3::TcpHeader::TcpOptionList*')
<     typehandlers.add_type_alias('std::list< ns3::Ptr< ns3::TcpOption const > >&', 'ns3::TcpHeader::TcpOptionList&')
<     typehandlers.add_type_alias('ns3::TcpHeader::Flags_t', 'ns3::TcpHeader::Flags_t')
<     typehandlers.add_type_alias('ns3::TcpHeader::Flags_t*', 'ns3::TcpHeader::Flags_t*')
<     typehandlers.add_type_alias('ns3::TcpHeader::Flags_t&', 'ns3::TcpHeader::Flags_t&')
---
>     typehandlers.add_type_alias(u'std::list< ns3::Ptr< ns3::TcpOption const > >', u'ns3::TcpHeader::TcpOptionList')
>     typehandlers.add_type_alias(u'std::list< ns3::Ptr< ns3::TcpOption const > >*', u'ns3::TcpHeader::TcpOptionList*')
>     typehandlers.add_type_alias(u'std::list< ns3::Ptr< ns3::TcpOption const > >&', u'ns3::TcpHeader::TcpOptionList&')
>     typehandlers.add_type_alias(u'ns3::TcpHeader::Flags_t', u'ns3::TcpHeader::Flags_t')
>     typehandlers.add_type_alias(u'ns3::TcpHeader::Flags_t*', u'ns3::TcpHeader::Flags_t*')
>     typehandlers.add_type_alias(u'ns3::TcpHeader::Flags_t&', u'ns3::TcpHeader::Flags_t&')
563,568c541,546
<     typehandlers.add_type_alias('std::pair< ns3::SequenceNumber< unsigned int, int >, ns3::SequenceNumber< unsigned int, int > >', 'ns3::TcpOptionSack::SackBlock')
<     typehandlers.add_type_alias('std::pair< ns3::SequenceNumber< unsigned int, int >, ns3::SequenceNumber< unsigned int, int > >*', 'ns3::TcpOptionSack::SackBlock*')
<     typehandlers.add_type_alias('std::pair< ns3::SequenceNumber< unsigned int, int >, ns3::SequenceNumber< unsigned int, int > >&', 'ns3::TcpOptionSack::SackBlock&')
<     typehandlers.add_type_alias('std::list< std::pair< ns3::SequenceNumber< unsigned int, int >, ns3::SequenceNumber< unsigned int, int > > >', 'ns3::TcpOptionSack::SackList')
<     typehandlers.add_type_alias('std::list< std::pair< ns3::SequenceNumber< unsigned int, int >, ns3::SequenceNumber< unsigned int, int > > >*', 'ns3::TcpOptionSack::SackList*')
<     typehandlers.add_type_alias('std::list< std::pair< ns3::SequenceNumber< unsigned int, int >, ns3::SequenceNumber< unsigned int, int > > >&', 'ns3::TcpOptionSack::SackList&')
---
>     typehandlers.add_type_alias(u'std::pair< ns3::SequenceNumber< unsigned int, int >, ns3::SequenceNumber< unsigned int, int > >', u'ns3::TcpOptionSack::SackBlock')
>     typehandlers.add_type_alias(u'std::pair< ns3::SequenceNumber< unsigned int, int >, ns3::SequenceNumber< unsigned int, int > >*', u'ns3::TcpOptionSack::SackBlock*')
>     typehandlers.add_type_alias(u'std::pair< ns3::SequenceNumber< unsigned int, int >, ns3::SequenceNumber< unsigned int, int > >&', u'ns3::TcpOptionSack::SackBlock&')
>     typehandlers.add_type_alias(u'std::list< std::pair< ns3::SequenceNumber< unsigned int, int >, ns3::SequenceNumber< unsigned int, int > > >', u'ns3::TcpOptionSack::SackList')
>     typehandlers.add_type_alias(u'std::list< std::pair< ns3::SequenceNumber< unsigned int, int >, ns3::SequenceNumber< unsigned int, int > > >*', u'ns3::TcpOptionSack::SackList*')
>     typehandlers.add_type_alias(u'std::list< std::pair< ns3::SequenceNumber< unsigned int, int >, ns3::SequenceNumber< unsigned int, int > > >&', u'ns3::TcpOptionSack::SackList&')
577,582d554
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps [class]
<     module.add_class('TcpRateOps', parent=root_module['ns3::Object'])
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateConnection [struct]
<     module.add_class('TcpRateConnection', outer_class=root_module['ns3::TcpRateOps'])
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateSample [struct]
<     module.add_class('TcpRateSample', outer_class=root_module['ns3::TcpRateOps'])
593,595c565,567
<     typehandlers.add_type_alias('ns3::TcpSocket::TcpStates_t', 'ns3::TcpSocket::TcpStates_t')
<     typehandlers.add_type_alias('ns3::TcpSocket::TcpStates_t*', 'ns3::TcpSocket::TcpStates_t*')
<     typehandlers.add_type_alias('ns3::TcpSocket::TcpStates_t&', 'ns3::TcpSocket::TcpStates_t&')
---
>     typehandlers.add_type_alias(u'ns3::TcpSocket::TcpStates_t', u'ns3::TcpSocket::TcpStates_t')
>     typehandlers.add_type_alias(u'ns3::TcpSocket::TcpStates_t*', u'ns3::TcpSocket::TcpStates_t*')
>     typehandlers.add_type_alias(u'ns3::TcpSocket::TcpStates_t&', u'ns3::TcpSocket::TcpStates_t&')
598,600c570,577
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const > const, ns3::TcpHeader const &, ns3::Ptr< ns3::TcpSocketBase const > const )', 'ns3::TcpSocketBase::TcpTxRxTracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const > const, ns3::TcpHeader const &, ns3::Ptr< ns3::TcpSocketBase const > const )*', 'ns3::TcpSocketBase::TcpTxRxTracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const > const, ns3::TcpHeader const &, ns3::Ptr< ns3::TcpSocketBase const > const )&', 'ns3::TcpSocketBase::TcpTxRxTracedCallback&')
---
>     ## tcp-socket-base.h (module 'internet'): ns3::TcpSocketBase::EcnMode_t [enumeration]
>     module.add_enum('EcnMode_t', ['NoEcn', 'ClassicEcn'], outer_class=root_module['ns3::TcpSocketBase'])
>     typehandlers.add_type_alias(u'ns3::TcpSocketBase::EcnMode_t', u'ns3::TcpSocketBase::EcnMode_t')
>     typehandlers.add_type_alias(u'ns3::TcpSocketBase::EcnMode_t*', u'ns3::TcpSocketBase::EcnMode_t*')
>     typehandlers.add_type_alias(u'ns3::TcpSocketBase::EcnMode_t&', u'ns3::TcpSocketBase::EcnMode_t&')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const > const, ns3::TcpHeader const &, ns3::Ptr< ns3::TcpSocketBase const > const )', u'ns3::TcpSocketBase::TcpTxRxTracedCallback')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const > const, ns3::TcpHeader const &, ns3::Ptr< ns3::TcpSocketBase const > const )*', u'ns3::TcpSocketBase::TcpTxRxTracedCallback*')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const > const, ns3::TcpHeader const &, ns3::Ptr< ns3::TcpSocketBase const > const )&', u'ns3::TcpSocketBase::TcpTxRxTracedCallback&')
609,614d585
<     ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::UseEcn_t [enumeration]
<     module.add_enum('UseEcn_t', ['Off', 'On', 'AcceptOnly'], outer_class=root_module['ns3::TcpSocketState'])
<     ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::EcnCodePoint_t [enumeration]
<     module.add_enum('EcnCodePoint_t', ['NotECT', 'Ect1', 'Ect0', 'CongExp'], outer_class=root_module['ns3::TcpSocketState'])
<     ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::EcnMode_t [enumeration]
<     module.add_enum('EcnMode_t', ['ClassicEcn', 'DctcpEcn'], outer_class=root_module['ns3::TcpSocketState'])
617,634c588,596
<     typehandlers.add_type_alias('ns3::TcpSocketState::TcpCongState_t', 'ns3::TcpSocketState::TcpCongState_t')
<     typehandlers.add_type_alias('ns3::TcpSocketState::TcpCongState_t*', 'ns3::TcpSocketState::TcpCongState_t*')
<     typehandlers.add_type_alias('ns3::TcpSocketState::TcpCongState_t&', 'ns3::TcpSocketState::TcpCongState_t&')
<     typehandlers.add_type_alias('ns3::TcpSocketState::TcpCAEvent_t', 'ns3::TcpSocketState::TcpCAEvent_t')
<     typehandlers.add_type_alias('ns3::TcpSocketState::TcpCAEvent_t*', 'ns3::TcpSocketState::TcpCAEvent_t*')
<     typehandlers.add_type_alias('ns3::TcpSocketState::TcpCAEvent_t&', 'ns3::TcpSocketState::TcpCAEvent_t&')
<     typehandlers.add_type_alias('ns3::TcpSocketState::UseEcn_t', 'ns3::TcpSocketState::UseEcn_t')
<     typehandlers.add_type_alias('ns3::TcpSocketState::UseEcn_t*', 'ns3::TcpSocketState::UseEcn_t*')
<     typehandlers.add_type_alias('ns3::TcpSocketState::UseEcn_t&', 'ns3::TcpSocketState::UseEcn_t&')
<     typehandlers.add_type_alias('ns3::TcpSocketState::EcnCodePoint_t', 'ns3::TcpSocketState::EcnCodePoint_t')
<     typehandlers.add_type_alias('ns3::TcpSocketState::EcnCodePoint_t*', 'ns3::TcpSocketState::EcnCodePoint_t*')
<     typehandlers.add_type_alias('ns3::TcpSocketState::EcnCodePoint_t&', 'ns3::TcpSocketState::EcnCodePoint_t&')
<     typehandlers.add_type_alias('ns3::TcpSocketState::EcnMode_t', 'ns3::TcpSocketState::EcnMode_t')
<     typehandlers.add_type_alias('ns3::TcpSocketState::EcnMode_t*', 'ns3::TcpSocketState::EcnMode_t*')
<     typehandlers.add_type_alias('ns3::TcpSocketState::EcnMode_t&', 'ns3::TcpSocketState::EcnMode_t&')
<     typehandlers.add_type_alias('ns3::TcpSocketState::EcnState_t', 'ns3::TcpSocketState::EcnState_t')
<     typehandlers.add_type_alias('ns3::TcpSocketState::EcnState_t*', 'ns3::TcpSocketState::EcnState_t*')
<     typehandlers.add_type_alias('ns3::TcpSocketState::EcnState_t&', 'ns3::TcpSocketState::EcnState_t&')
---
>     typehandlers.add_type_alias(u'ns3::TcpSocketState::TcpCongState_t', u'ns3::TcpSocketState::TcpCongState_t')
>     typehandlers.add_type_alias(u'ns3::TcpSocketState::TcpCongState_t*', u'ns3::TcpSocketState::TcpCongState_t*')
>     typehandlers.add_type_alias(u'ns3::TcpSocketState::TcpCongState_t&', u'ns3::TcpSocketState::TcpCongState_t&')
>     typehandlers.add_type_alias(u'ns3::TcpSocketState::TcpCAEvent_t', u'ns3::TcpSocketState::TcpCAEvent_t')
>     typehandlers.add_type_alias(u'ns3::TcpSocketState::TcpCAEvent_t*', u'ns3::TcpSocketState::TcpCAEvent_t*')
>     typehandlers.add_type_alias(u'ns3::TcpSocketState::TcpCAEvent_t&', u'ns3::TcpSocketState::TcpCAEvent_t&')
>     typehandlers.add_type_alias(u'ns3::TcpSocketState::EcnState_t', u'ns3::TcpSocketState::EcnState_t')
>     typehandlers.add_type_alias(u'ns3::TcpSocketState::EcnState_t*', u'ns3::TcpSocketState::EcnState_t*')
>     typehandlers.add_type_alias(u'ns3::TcpSocketState::EcnState_t&', u'ns3::TcpSocketState::EcnState_t&')
653,655c615,617
<     typehandlers.add_type_alias('void ( * ) ( ns3::Time )', 'ns3::Time::TracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Time )*', 'ns3::Time::TracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Time )&', 'ns3::Time::TracedCallback&')
---
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Time )', u'ns3::Time::TracedCallback')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Time )*', u'ns3::Time::TracedCallback*')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Time )&', u'ns3::Time::TracedCallback&')
686,688c648,650
<     typehandlers.add_type_alias('std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv4Header >', 'ns3::ArpCache::Ipv4PayloadHeaderPair')
<     typehandlers.add_type_alias('std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv4Header >*', 'ns3::ArpCache::Ipv4PayloadHeaderPair*')
<     typehandlers.add_type_alias('std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv4Header >&', 'ns3::ArpCache::Ipv4PayloadHeaderPair&')
---
>     typehandlers.add_type_alias(u'std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv4Header >', u'ns3::ArpCache::Ipv4PayloadHeaderPair')
>     typehandlers.add_type_alias(u'std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv4Header >*', u'ns3::ArpCache::Ipv4PayloadHeaderPair*')
>     typehandlers.add_type_alias(u'std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv4Header >&', u'ns3::ArpCache::Ipv4PayloadHeaderPair&')
698c660
<     module.add_class('AttributeChecker', import_from_module='ns.core', automatic_type_narrowing=True, allow_subclassing=False, parent=root_module['ns3::SimpleRefCount< ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker> >'])
---
>     module.add_class('AttributeChecker', allow_subclassing=False, automatic_type_narrowing=True, import_from_module='ns.core', parent=root_module['ns3::SimpleRefCount< ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker> >'])
700c662
<     module.add_class('AttributeValue', import_from_module='ns.core', automatic_type_narrowing=True, allow_subclassing=False, parent=root_module['ns3::SimpleRefCount< ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue> >'])
---
>     module.add_class('AttributeValue', allow_subclassing=False, automatic_type_narrowing=True, import_from_module='ns.core', parent=root_module['ns3::SimpleRefCount< ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue> >'])
757,762c719,724
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Ipv4Address, ns3::Ipv4Address, unsigned char, ns3::Ptr< ns3::Ipv4Route >, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::IpL4Protocol::DownTargetCallback')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Ipv4Address, ns3::Ipv4Address, unsigned char, ns3::Ptr< ns3::Ipv4Route >, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::IpL4Protocol::DownTargetCallback*')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Ipv4Address, ns3::Ipv4Address, unsigned char, ns3::Ptr< ns3::Ipv4Route >, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::IpL4Protocol::DownTargetCallback&')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Ipv6Address, ns3::Ipv6Address, unsigned char, ns3::Ptr< ns3::Ipv6Route >, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::IpL4Protocol::DownTargetCallback6')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Ipv6Address, ns3::Ipv6Address, unsigned char, ns3::Ptr< ns3::Ipv6Route >, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::IpL4Protocol::DownTargetCallback6*')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Ipv6Address, ns3::Ipv6Address, unsigned char, ns3::Ptr< ns3::Ipv6Route >, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::IpL4Protocol::DownTargetCallback6&')
---
>     typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Ipv4Address, ns3::Ipv4Address, unsigned char, ns3::Ptr< ns3::Ipv4Route >, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', u'ns3::IpL4Protocol::DownTargetCallback')
>     typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Ipv4Address, ns3::Ipv4Address, unsigned char, ns3::Ptr< ns3::Ipv4Route >, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', u'ns3::IpL4Protocol::DownTargetCallback*')
>     typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Ipv4Address, ns3::Ipv4Address, unsigned char, ns3::Ptr< ns3::Ipv4Route >, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', u'ns3::IpL4Protocol::DownTargetCallback&')
>     typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Ipv6Address, ns3::Ipv6Address, unsigned char, ns3::Ptr< ns3::Ipv6Route >, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', u'ns3::IpL4Protocol::DownTargetCallback6')
>     typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Ipv6Address, ns3::Ipv6Address, unsigned char, ns3::Ptr< ns3::Ipv6Route >, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', u'ns3::IpL4Protocol::DownTargetCallback6*')
>     typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Ipv6Address, ns3::Ipv6Address, unsigned char, ns3::Ptr< ns3::Ipv6Route >, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', u'ns3::IpL4Protocol::DownTargetCallback6&')
774,783c736,745
<     module.add_enum('DropReason', ['DROP_TTL_EXPIRED', 'DROP_NO_ROUTE', 'DROP_BAD_CHECKSUM', 'DROP_INTERFACE_DOWN', 'DROP_ROUTE_ERROR', 'DROP_FRAGMENT_TIMEOUT', 'DROP_DUPLICATE'], outer_class=root_module['ns3::Ipv4L3Protocol'])
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ipv4Header const &, ns3::Ptr< ns3::Packet const >, uint32_t )', 'ns3::Ipv4L3Protocol::SentTracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ipv4Header const &, ns3::Ptr< ns3::Packet const >, uint32_t )*', 'ns3::Ipv4L3Protocol::SentTracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ipv4Header const &, ns3::Ptr< ns3::Packet const >, uint32_t )&', 'ns3::Ipv4L3Protocol::SentTracedCallback&')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Ptr< ns3::Ipv4 >, uint32_t )', 'ns3::Ipv4L3Protocol::TxRxTracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Ptr< ns3::Ipv4 >, uint32_t )*', 'ns3::Ipv4L3Protocol::TxRxTracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Ptr< ns3::Ipv4 >, uint32_t )&', 'ns3::Ipv4L3Protocol::TxRxTracedCallback&')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ipv4Header const &, ns3::Ptr< ns3::Packet const >, ns3::Ipv4L3Protocol::DropReason, ns3::Ptr< ns3::Ipv4 >, uint32_t )', 'ns3::Ipv4L3Protocol::DropTracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ipv4Header const &, ns3::Ptr< ns3::Packet const >, ns3::Ipv4L3Protocol::DropReason, ns3::Ptr< ns3::Ipv4 >, uint32_t )*', 'ns3::Ipv4L3Protocol::DropTracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ipv4Header const &, ns3::Ptr< ns3::Packet const >, ns3::Ipv4L3Protocol::DropReason, ns3::Ptr< ns3::Ipv4 >, uint32_t )&', 'ns3::Ipv4L3Protocol::DropTracedCallback&')
---
>     module.add_enum('DropReason', ['DROP_TTL_EXPIRED', 'DROP_NO_ROUTE', 'DROP_BAD_CHECKSUM', 'DROP_INTERFACE_DOWN', 'DROP_ROUTE_ERROR', 'DROP_FRAGMENT_TIMEOUT'], outer_class=root_module['ns3::Ipv4L3Protocol'])
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ipv4Header const &, ns3::Ptr< ns3::Packet const >, uint32_t )', u'ns3::Ipv4L3Protocol::SentTracedCallback')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ipv4Header const &, ns3::Ptr< ns3::Packet const >, uint32_t )*', u'ns3::Ipv4L3Protocol::SentTracedCallback*')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ipv4Header const &, ns3::Ptr< ns3::Packet const >, uint32_t )&', u'ns3::Ipv4L3Protocol::SentTracedCallback&')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Ptr< ns3::Ipv4 >, uint32_t )', u'ns3::Ipv4L3Protocol::TxRxTracedCallback')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Ptr< ns3::Ipv4 >, uint32_t )*', u'ns3::Ipv4L3Protocol::TxRxTracedCallback*')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Ptr< ns3::Ipv4 >, uint32_t )&', u'ns3::Ipv4L3Protocol::TxRxTracedCallback&')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ipv4Header const &, ns3::Ptr< ns3::Packet const >, ns3::Ipv4L3Protocol::DropReason, ns3::Ptr< ns3::Ipv4 >, uint32_t )', u'ns3::Ipv4L3Protocol::DropTracedCallback')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ipv4Header const &, ns3::Ptr< ns3::Packet const >, ns3::Ipv4L3Protocol::DropReason, ns3::Ptr< ns3::Ipv4 >, uint32_t )*', u'ns3::Ipv4L3Protocol::DropTracedCallback*')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ipv4Header const &, ns3::Ptr< ns3::Packet const >, ns3::Ipv4L3Protocol::DropReason, ns3::Ptr< ns3::Ipv4 >, uint32_t )&', u'ns3::Ipv4L3Protocol::DropTracedCallback&')
800,811c762,773
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Ipv4Route >, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::Ipv4RoutingProtocol::UnicastForwardCallback')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Ipv4Route >, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::Ipv4RoutingProtocol::UnicastForwardCallback*')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Ipv4Route >, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::Ipv4RoutingProtocol::UnicastForwardCallback&')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Ipv4MulticastRoute >, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::Ipv4RoutingProtocol::MulticastForwardCallback')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Ipv4MulticastRoute >, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::Ipv4RoutingProtocol::MulticastForwardCallback*')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Ipv4MulticastRoute >, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::Ipv4RoutingProtocol::MulticastForwardCallback&')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::Ipv4RoutingProtocol::LocalDeliverCallback')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::Ipv4RoutingProtocol::LocalDeliverCallback*')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::Ipv4RoutingProtocol::LocalDeliverCallback&')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::Socket::SocketErrno, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::Ipv4RoutingProtocol::ErrorCallback')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::Socket::SocketErrno, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::Ipv4RoutingProtocol::ErrorCallback*')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::Socket::SocketErrno, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::Ipv4RoutingProtocol::ErrorCallback&')
---
>     typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Ipv4Route >, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', u'ns3::Ipv4RoutingProtocol::UnicastForwardCallback')
>     typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Ipv4Route >, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', u'ns3::Ipv4RoutingProtocol::UnicastForwardCallback*')
>     typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Ipv4Route >, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', u'ns3::Ipv4RoutingProtocol::UnicastForwardCallback&')
>     typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Ipv4MulticastRoute >, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', u'ns3::Ipv4RoutingProtocol::MulticastForwardCallback')
>     typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Ipv4MulticastRoute >, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', u'ns3::Ipv4RoutingProtocol::MulticastForwardCallback*')
>     typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Ipv4MulticastRoute >, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', u'ns3::Ipv4RoutingProtocol::MulticastForwardCallback&')
>     typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', u'ns3::Ipv4RoutingProtocol::LocalDeliverCallback')
>     typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', u'ns3::Ipv4RoutingProtocol::LocalDeliverCallback*')
>     typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', u'ns3::Ipv4RoutingProtocol::LocalDeliverCallback&')
>     typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::Socket::SocketErrno, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', u'ns3::Ipv4RoutingProtocol::ErrorCallback')
>     typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::Socket::SocketErrno, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', u'ns3::Ipv4RoutingProtocol::ErrorCallback*')
>     typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv4Header const &, ns3::Socket::SocketErrno, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', u'ns3::Ipv4RoutingProtocol::ErrorCallback&')
838,840c800,802
<     typehandlers.add_type_alias('std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv6Header >', 'ns3::Ipv6ExtensionFragment::Ipv6PayloadHeaderPair')
<     typehandlers.add_type_alias('std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv6Header >*', 'ns3::Ipv6ExtensionFragment::Ipv6PayloadHeaderPair*')
<     typehandlers.add_type_alias('std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv6Header >&', 'ns3::Ipv6ExtensionFragment::Ipv6PayloadHeaderPair&')
---
>     typehandlers.add_type_alias(u'std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv6Header >', u'ns3::Ipv6ExtensionFragment::Ipv6PayloadHeaderPair')
>     typehandlers.add_type_alias(u'std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv6Header >*', u'ns3::Ipv6ExtensionFragment::Ipv6PayloadHeaderPair*')
>     typehandlers.add_type_alias(u'std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv6Header >&', u'ns3::Ipv6ExtensionFragment::Ipv6PayloadHeaderPair&')
857,865c819,827
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ipv6Header const &, ns3::Ptr< ns3::Packet const >, uint32_t )', 'ns3::Ipv6L3Protocol::SentTracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ipv6Header const &, ns3::Ptr< ns3::Packet const >, uint32_t )*', 'ns3::Ipv6L3Protocol::SentTracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ipv6Header const &, ns3::Ptr< ns3::Packet const >, uint32_t )&', 'ns3::Ipv6L3Protocol::SentTracedCallback&')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Ptr< ns3::Ipv6 >, uint32_t )', 'ns3::Ipv6L3Protocol::TxRxTracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Ptr< ns3::Ipv6 >, uint32_t )*', 'ns3::Ipv6L3Protocol::TxRxTracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Ptr< ns3::Ipv6 >, uint32_t )&', 'ns3::Ipv6L3Protocol::TxRxTracedCallback&')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ipv6Header const &, ns3::Ptr< ns3::Packet const >, ns3::Ipv6L3Protocol::DropReason, ns3::Ptr< ns3::Ipv6 >, uint32_t )', 'ns3::Ipv6L3Protocol::DropTracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ipv6Header const &, ns3::Ptr< ns3::Packet const >, ns3::Ipv6L3Protocol::DropReason, ns3::Ptr< ns3::Ipv6 >, uint32_t )*', 'ns3::Ipv6L3Protocol::DropTracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ipv6Header const &, ns3::Ptr< ns3::Packet const >, ns3::Ipv6L3Protocol::DropReason, ns3::Ptr< ns3::Ipv6 >, uint32_t )&', 'ns3::Ipv6L3Protocol::DropTracedCallback&')
---
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ipv6Header const &, ns3::Ptr< ns3::Packet const >, uint32_t )', u'ns3::Ipv6L3Protocol::SentTracedCallback')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ipv6Header const &, ns3::Ptr< ns3::Packet const >, uint32_t )*', u'ns3::Ipv6L3Protocol::SentTracedCallback*')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ipv6Header const &, ns3::Ptr< ns3::Packet const >, uint32_t )&', u'ns3::Ipv6L3Protocol::SentTracedCallback&')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Ptr< ns3::Ipv6 >, uint32_t )', u'ns3::Ipv6L3Protocol::TxRxTracedCallback')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Ptr< ns3::Ipv6 >, uint32_t )*', u'ns3::Ipv6L3Protocol::TxRxTracedCallback*')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Ptr< ns3::Ipv6 >, uint32_t )&', u'ns3::Ipv6L3Protocol::TxRxTracedCallback&')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ipv6Header const &, ns3::Ptr< ns3::Packet const >, ns3::Ipv6L3Protocol::DropReason, ns3::Ptr< ns3::Ipv6 >, uint32_t )', u'ns3::Ipv6L3Protocol::DropTracedCallback')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ipv6Header const &, ns3::Ptr< ns3::Packet const >, ns3::Ipv6L3Protocol::DropReason, ns3::Ptr< ns3::Ipv6 >, uint32_t )*', u'ns3::Ipv6L3Protocol::DropTracedCallback*')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ipv6Header const &, ns3::Ptr< ns3::Packet const >, ns3::Ipv6L3Protocol::DropReason, ns3::Ptr< ns3::Ipv6 >, uint32_t )&', u'ns3::Ipv6L3Protocol::DropTracedCallback&')
892,903c854,865
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice const >, ns3::Ptr< ns3::Ipv6Route >, ns3::Ptr< ns3::Packet const >, ns3::Ipv6Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::Ipv6RoutingProtocol::UnicastForwardCallback')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice const >, ns3::Ptr< ns3::Ipv6Route >, ns3::Ptr< ns3::Packet const >, ns3::Ipv6Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::Ipv6RoutingProtocol::UnicastForwardCallback*')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice const >, ns3::Ptr< ns3::Ipv6Route >, ns3::Ptr< ns3::Packet const >, ns3::Ipv6Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::Ipv6RoutingProtocol::UnicastForwardCallback&')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice const >, ns3::Ptr< ns3::Ipv6MulticastRoute >, ns3::Ptr< ns3::Packet const >, ns3::Ipv6Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::Ipv6RoutingProtocol::MulticastForwardCallback')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice const >, ns3::Ptr< ns3::Ipv6MulticastRoute >, ns3::Ptr< ns3::Packet const >, ns3::Ipv6Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::Ipv6RoutingProtocol::MulticastForwardCallback*')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice const >, ns3::Ptr< ns3::Ipv6MulticastRoute >, ns3::Ptr< ns3::Packet const >, ns3::Ipv6Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::Ipv6RoutingProtocol::MulticastForwardCallback&')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv6Header const &, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::Ipv6RoutingProtocol::LocalDeliverCallback')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv6Header const &, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::Ipv6RoutingProtocol::LocalDeliverCallback*')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv6Header const &, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::Ipv6RoutingProtocol::LocalDeliverCallback&')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv6Header const &, ns3::Socket::SocketErrno, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::Ipv6RoutingProtocol::ErrorCallback')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv6Header const &, ns3::Socket::SocketErrno, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::Ipv6RoutingProtocol::ErrorCallback*')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv6Header const &, ns3::Socket::SocketErrno, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::Ipv6RoutingProtocol::ErrorCallback&')
---
>     typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::NetDevice const >, ns3::Ptr< ns3::Ipv6Route >, ns3::Ptr< ns3::Packet const >, ns3::Ipv6Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', u'ns3::Ipv6RoutingProtocol::UnicastForwardCallback')
>     typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::NetDevice const >, ns3::Ptr< ns3::Ipv6Route >, ns3::Ptr< ns3::Packet const >, ns3::Ipv6Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', u'ns3::Ipv6RoutingProtocol::UnicastForwardCallback*')
>     typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::NetDevice const >, ns3::Ptr< ns3::Ipv6Route >, ns3::Ptr< ns3::Packet const >, ns3::Ipv6Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', u'ns3::Ipv6RoutingProtocol::UnicastForwardCallback&')
>     typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::NetDevice const >, ns3::Ptr< ns3::Ipv6MulticastRoute >, ns3::Ptr< ns3::Packet const >, ns3::Ipv6Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', u'ns3::Ipv6RoutingProtocol::MulticastForwardCallback')
>     typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::NetDevice const >, ns3::Ptr< ns3::Ipv6MulticastRoute >, ns3::Ptr< ns3::Packet const >, ns3::Ipv6Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', u'ns3::Ipv6RoutingProtocol::MulticastForwardCallback*')
>     typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::NetDevice const >, ns3::Ptr< ns3::Ipv6MulticastRoute >, ns3::Ptr< ns3::Packet const >, ns3::Ipv6Header const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', u'ns3::Ipv6RoutingProtocol::MulticastForwardCallback&')
>     typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv6Header const &, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', u'ns3::Ipv6RoutingProtocol::LocalDeliverCallback')
>     typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv6Header const &, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', u'ns3::Ipv6RoutingProtocol::LocalDeliverCallback*')
>     typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv6Header const &, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', u'ns3::Ipv6RoutingProtocol::LocalDeliverCallback&')
>     typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv6Header const &, ns3::Socket::SocketErrno, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', u'ns3::Ipv6RoutingProtocol::ErrorCallback')
>     typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv6Header const &, ns3::Socket::SocketErrno, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', u'ns3::Ipv6RoutingProtocol::ErrorCallback*')
>     typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::Packet const >, ns3::Ipv6Header const &, ns3::Socket::SocketErrno, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', u'ns3::Ipv6RoutingProtocol::ErrorCallback&')
916,918c878,880
<     typehandlers.add_type_alias('std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv6Header >', 'ns3::NdiscCache::Ipv6PayloadHeaderPair')
<     typehandlers.add_type_alias('std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv6Header >*', 'ns3::NdiscCache::Ipv6PayloadHeaderPair*')
<     typehandlers.add_type_alias('std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv6Header >&', 'ns3::NdiscCache::Ipv6PayloadHeaderPair&')
---
>     typehandlers.add_type_alias(u'std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv6Header >', u'ns3::NdiscCache::Ipv6PayloadHeaderPair')
>     typehandlers.add_type_alias(u'std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv6Header >*', u'ns3::NdiscCache::Ipv6PayloadHeaderPair*')
>     typehandlers.add_type_alias(u'std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv6Header >&', u'ns3::NdiscCache::Ipv6PayloadHeaderPair&')
923,931c885,893
<     typehandlers.add_type_alias('void ( * ) (  )', 'ns3::NetDevice::LinkChangeTracedCallback')
<     typehandlers.add_type_alias('void ( * ) (  )*', 'ns3::NetDevice::LinkChangeTracedCallback*')
<     typehandlers.add_type_alias('void ( * ) (  )&', 'ns3::NetDevice::LinkChangeTracedCallback&')
<     typehandlers.add_type_alias('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::NetDevice::ReceiveCallback')
<     typehandlers.add_type_alias('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::NetDevice::ReceiveCallback*')
<     typehandlers.add_type_alias('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::NetDevice::ReceiveCallback&')
<     typehandlers.add_type_alias('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >', 'ns3::NetDevice::PromiscReceiveCallback')
<     typehandlers.add_type_alias('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::NetDevice::PromiscReceiveCallback*')
<     typehandlers.add_type_alias('ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::NetDevice::PromiscReceiveCallback&')
---
>     typehandlers.add_type_alias(u'void ( * ) (  )', u'ns3::NetDevice::LinkChangeTracedCallback')
>     typehandlers.add_type_alias(u'void ( * ) (  )*', u'ns3::NetDevice::LinkChangeTracedCallback*')
>     typehandlers.add_type_alias(u'void ( * ) (  )&', u'ns3::NetDevice::LinkChangeTracedCallback&')
>     typehandlers.add_type_alias(u'ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', u'ns3::NetDevice::ReceiveCallback')
>     typehandlers.add_type_alias(u'ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', u'ns3::NetDevice::ReceiveCallback*')
>     typehandlers.add_type_alias(u'ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', u'ns3::NetDevice::ReceiveCallback&')
>     typehandlers.add_type_alias(u'ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >', u'ns3::NetDevice::PromiscReceiveCallback')
>     typehandlers.add_type_alias(u'ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >*', u'ns3::NetDevice::PromiscReceiveCallback*')
>     typehandlers.add_type_alias(u'ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >&', u'ns3::NetDevice::PromiscReceiveCallback&')
936,941c898,903
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >', 'ns3::Node::ProtocolHandler')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::Node::ProtocolHandler*')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::Node::ProtocolHandler&')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'ns3::Node::DeviceAdditionListener')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', 'ns3::Node::DeviceAdditionListener*')
<     typehandlers.add_type_alias('ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', 'ns3::Node::DeviceAdditionListener&')
---
>     typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >', u'ns3::Node::ProtocolHandler')
>     typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >*', u'ns3::Node::ProtocolHandler*')
>     typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >&', u'ns3::Node::ProtocolHandler&')
>     typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', u'ns3::Node::DeviceAdditionListener')
>     typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >*', u'ns3::Node::DeviceAdditionListener*')
>     typehandlers.add_type_alias(u'ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >&', u'ns3::Node::DeviceAdditionListener&')
952,969c914,931
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const > )', 'ns3::Packet::TracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const > )*', 'ns3::Packet::TracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const > )&', 'ns3::Packet::TracedCallback&')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Address const & )', 'ns3::Packet::AddressTracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Address const & )*', 'ns3::Packet::AddressTracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Address const & )&', 'ns3::Packet::AddressTracedCallback&')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const > const, ns3::Address const &, ns3::Address const & )', 'ns3::Packet::TwoAddressTracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const > const, ns3::Address const &, ns3::Address const & )*', 'ns3::Packet::TwoAddressTracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const > const, ns3::Address const &, ns3::Address const & )&', 'ns3::Packet::TwoAddressTracedCallback&')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Mac48Address )', 'ns3::Packet::Mac48AddressTracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Mac48Address )*', 'ns3::Packet::Mac48AddressTracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Mac48Address )&', 'ns3::Packet::Mac48AddressTracedCallback&')
<     typehandlers.add_type_alias('void ( * ) ( uint32_t, uint32_t )', 'ns3::Packet::SizeTracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( uint32_t, uint32_t )*', 'ns3::Packet::SizeTracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( uint32_t, uint32_t )&', 'ns3::Packet::SizeTracedCallback&')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, double )', 'ns3::Packet::SinrTracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, double )*', 'ns3::Packet::SinrTracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::Packet const >, double )&', 'ns3::Packet::SinrTracedCallback&')
---
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const > )', u'ns3::Packet::TracedCallback')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const > )*', u'ns3::Packet::TracedCallback*')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const > )&', u'ns3::Packet::TracedCallback&')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Address const & )', u'ns3::Packet::AddressTracedCallback')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Address const & )*', u'ns3::Packet::AddressTracedCallback*')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Address const & )&', u'ns3::Packet::AddressTracedCallback&')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const > const, ns3::Address const &, ns3::Address const & )', u'ns3::Packet::TwoAddressTracedCallback')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const > const, ns3::Address const &, ns3::Address const & )*', u'ns3::Packet::TwoAddressTracedCallback*')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const > const, ns3::Address const &, ns3::Address const & )&', u'ns3::Packet::TwoAddressTracedCallback&')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Mac48Address )', u'ns3::Packet::Mac48AddressTracedCallback')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Mac48Address )*', u'ns3::Packet::Mac48AddressTracedCallback*')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const >, ns3::Mac48Address )&', u'ns3::Packet::Mac48AddressTracedCallback&')
>     typehandlers.add_type_alias(u'void ( * ) ( uint32_t, uint32_t )', u'ns3::Packet::SizeTracedCallback')
>     typehandlers.add_type_alias(u'void ( * ) ( uint32_t, uint32_t )*', u'ns3::Packet::SizeTracedCallback*')
>     typehandlers.add_type_alias(u'void ( * ) ( uint32_t, uint32_t )&', u'ns3::Packet::SizeTracedCallback&')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const >, double )', u'ns3::Packet::SinrTracedCallback')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const >, double )*', u'ns3::Packet::SinrTracedCallback*')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::Packet const >, double )&', u'ns3::Packet::SinrTracedCallback&')
978,980c940,942
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::QueueItem const > )', 'ns3::QueueItem::TracedCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::QueueItem const > )*', 'ns3::QueueItem::TracedCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Ptr< ns3::QueueItem const > )&', 'ns3::QueueItem::TracedCallback&')
---
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::QueueItem const > )', u'ns3::QueueItem::TracedCallback')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::QueueItem const > )*', u'ns3::QueueItem::TracedCallback*')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Ptr< ns3::QueueItem const > )&', u'ns3::QueueItem::TracedCallback&')
993,994d954
<     ## tcp-dctcp.h (module 'internet'): ns3::TcpDctcp [class]
<     module.add_class('TcpDctcp', parent=root_module['ns3::TcpNewReno'])
1013,1023c973,975
<     typehandlers.add_type_alias('ns3::TcpPrrRecovery::ReductionBound_t', 'ns3::TcpPrrRecovery::ReductionBound_t')
<     typehandlers.add_type_alias('ns3::TcpPrrRecovery::ReductionBound_t*', 'ns3::TcpPrrRecovery::ReductionBound_t*')
<     typehandlers.add_type_alias('ns3::TcpPrrRecovery::ReductionBound_t&', 'ns3::TcpPrrRecovery::ReductionBound_t&')
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateLinux [class]
<     module.add_class('TcpRateLinux', parent=root_module['ns3::TcpRateOps'])
<     typehandlers.add_type_alias('void ( * ) ( ns3::TcpRateOps::TcpRateConnection const & )', 'ns3::TcpRateLinux::TcpRateUpdated')
<     typehandlers.add_type_alias('void ( * ) ( ns3::TcpRateOps::TcpRateConnection const & )*', 'ns3::TcpRateLinux::TcpRateUpdated*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::TcpRateOps::TcpRateConnection const & )&', 'ns3::TcpRateLinux::TcpRateUpdated&')
<     typehandlers.add_type_alias('void ( * ) ( ns3::TcpRateOps::TcpRateSample const & )', 'ns3::TcpRateLinux::TcpRateSampleUpdated')
<     typehandlers.add_type_alias('void ( * ) ( ns3::TcpRateOps::TcpRateSample const & )*', 'ns3::TcpRateLinux::TcpRateSampleUpdated*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::TcpRateOps::TcpRateSample const & )&', 'ns3::TcpRateLinux::TcpRateSampleUpdated&')
---
>     typehandlers.add_type_alias(u'ns3::TcpPrrRecovery::ReductionBound_t', u'ns3::TcpPrrRecovery::ReductionBound_t')
>     typehandlers.add_type_alias(u'ns3::TcpPrrRecovery::ReductionBound_t*', u'ns3::TcpPrrRecovery::ReductionBound_t*')
>     typehandlers.add_type_alias(u'ns3::TcpPrrRecovery::ReductionBound_t&', u'ns3::TcpPrrRecovery::ReductionBound_t&')
1043c995
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['bool', 'ns3::Ptr<ns3::NetDevice>', 'ns3::Ptr<const ns3::Packet>', 'unsigned short', 'const ns3::Address &', 'const ns3::Address &', 'ns3::NetDevice::PacketType', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
---
>     module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['bool', 'ns3::Ptr<ns3::NetDevice>', 'ns3::Ptr<const ns3::Packet>', 'unsigned short', 'const ns3::Address &', 'const ns3::Address &', 'ns3::NetDevice::PacketType', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
1045c997
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['bool', 'ns3::Ptr<ns3::NetDevice>', 'ns3::Ptr<const ns3::Packet>', 'unsigned short', 'const ns3::Address &', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
---
>     module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['bool', 'ns3::Ptr<ns3::NetDevice>', 'ns3::Ptr<const ns3::Packet>', 'unsigned short', 'const ns3::Address &', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
1047c999
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['bool', 'ns3::Ptr<ns3::Socket>', 'const ns3::Address &', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
---
>     module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['bool', 'ns3::Ptr<ns3::Socket>', 'const ns3::Address &', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
1049c1001
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['ns3::ObjectBase *', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
---
>     module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['ns3::ObjectBase *', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
1051c1003
<     module.add_class('CallbackImpl', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'const ns3::Ipv4Header &', 'ns3::Ptr<const ns3::Packet>', 'ns3::Ipv4L3Protocol::DropReason', 'ns3::Ptr<ns3::Ipv4>', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
---
>     module.add_class('CallbackImpl', template_parameters=['void', 'const ns3::Ipv4Header &', 'ns3::Ptr<const ns3::Packet>', 'ns3::Ipv4L3Protocol::DropReason', 'ns3::Ptr<ns3::Ipv4>', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
1053c1005
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'const ns3::Ipv4Header &', 'ns3::Ptr<const ns3::Packet>', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
---
>     module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'const ns3::Ipv4Header &', 'ns3::Ptr<const ns3::Packet>', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
1055c1007
<     module.add_class('CallbackImpl', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'const ns3::Ipv6Header &', 'ns3::Ptr<const ns3::Packet>', 'ns3::Ipv6L3Protocol::DropReason', 'ns3::Ptr<ns3::Ipv6>', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
---
>     module.add_class('CallbackImpl', template_parameters=['void', 'const ns3::Ipv6Header &', 'ns3::Ptr<const ns3::Packet>', 'ns3::Ipv6L3Protocol::DropReason', 'ns3::Ptr<ns3::Ipv6>', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
1057,1061c1009
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'const ns3::Ipv6Header &', 'ns3::Ptr<const ns3::Packet>', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::TcpRateOps::TcpRateConnection &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'const ns3::TcpRateOps::TcpRateConnection &', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::TcpRateOps::TcpRateSample &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'const ns3::TcpRateOps::TcpRateSample &', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
---
>     module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'const ns3::Ipv6Header &', 'ns3::Ptr<const ns3::Packet>', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
1063,1067c1011
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'double', 'double', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ipv4Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ipv4Address', 'unsigned char', 'unsigned char', 'unsigned char', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ipv6Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ipv6Address', 'unsigned char', 'unsigned char', 'unsigned char', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
---
>     module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'double', 'double', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
1069c1013
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<const ns3::Packet>', 'const ns3::TcpHeader &', 'ns3::Ptr<const ns3::TcpSocketBase>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
---
>     module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'ns3::Ptr<const ns3::Packet>', 'const ns3::TcpHeader &', 'ns3::Ptr<const ns3::TcpSocketBase>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
1071c1015
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<const ns3::Packet>', 'ns3::Ptr<ns3::Ipv4>', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
---
>     module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'ns3::Ptr<const ns3::Packet>', 'ns3::Ptr<ns3::Ipv4>', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
1073c1017
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<const ns3::Packet>', 'ns3::Ptr<ns3::Ipv6>', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
---
>     module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'ns3::Ptr<const ns3::Packet>', 'ns3::Ptr<ns3::Ipv6>', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
1075c1019
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<const ns3::Packet>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
---
>     module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'ns3::Ptr<const ns3::Packet>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
1077c1021
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<ns3::NetDevice>', 'ns3::Ptr<const ns3::Packet>', 'unsigned short', 'const ns3::Address &', 'const ns3::Address &', 'ns3::NetDevice::PacketType', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
---
>     module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'ns3::Ptr<ns3::NetDevice>', 'ns3::Ptr<const ns3::Packet>', 'unsigned short', 'const ns3::Address &', 'const ns3::Address &', 'ns3::NetDevice::PacketType', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
1079c1023
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<ns3::NetDevice>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
---
>     module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'ns3::Ptr<ns3::NetDevice>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
1081,1083c1025
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<ns3::Packet>', 'ns3::Ipv4Address', 'ns3::Ipv4Address', 'unsigned char', 'ns3::Ptr<ns3::Ipv4Route>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv4Header, unsigned short, ns3::Ptr<ns3::Ipv4Interface>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<ns3::Packet>', 'ns3::Ipv4Header', 'unsigned short', 'ns3::Ptr<ns3::Ipv4Interface>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
---
>     module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'ns3::Ptr<ns3::Packet>', 'ns3::Ipv4Address', 'ns3::Ipv4Address', 'unsigned char', 'ns3::Ptr<ns3::Ipv4Route>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
1085,1087c1027
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<ns3::Packet>', 'ns3::Ipv6Address', 'ns3::Ipv6Address', 'unsigned char', 'ns3::Ptr<ns3::Ipv6Route>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv6Header, unsigned short, ns3::Ptr<ns3::Ipv6Interface>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<ns3::Packet>', 'ns3::Ipv6Header', 'unsigned short', 'ns3::Ptr<ns3::Ipv6Interface>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
---
>     module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'ns3::Ptr<ns3::Packet>', 'ns3::Ipv6Address', 'ns3::Ipv6Address', 'unsigned char', 'ns3::Ptr<ns3::Ipv6Route>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
1089c1029
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<ns3::Socket>', 'const ns3::Address &', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
---
>     module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'ns3::Ptr<ns3::Socket>', 'const ns3::Address &', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
1091c1031
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<ns3::Socket>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
---
>     module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'ns3::Ptr<ns3::Socket>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
1093c1033
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Ptr<ns3::Socket>', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
---
>     module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'ns3::Ptr<ns3::Socket>', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
1095c1035
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::SequenceNumber<unsigned int, int>', 'ns3::SequenceNumber<unsigned int, int>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
---
>     module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'ns3::SequenceNumber<unsigned int, int>', 'ns3::SequenceNumber<unsigned int, int>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
1097c1037
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::TcpSocket::TcpStates_t', 'ns3::TcpSocket::TcpStates_t', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
---
>     module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'ns3::TcpSocket::TcpStates_t', 'ns3::TcpSocket::TcpStates_t', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
1099c1039
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::TcpSocketState::EcnState_t', 'ns3::TcpSocketState::EcnState_t', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
---
>     module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'ns3::TcpSocketState::EcnState_t', 'ns3::TcpSocketState::EcnState_t', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
1101c1041
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::TcpSocketState::TcpCongState_t', 'ns3::TcpSocketState::TcpCongState_t', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
---
>     module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'ns3::TcpSocketState::TcpCongState_t', 'ns3::TcpSocketState::TcpCongState_t', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
1103,1105c1043
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::Time', 'ns3::Time', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> [class]
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
---
>     module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'ns3::Time', 'ns3::Time', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
1107c1045
<     module.add_class('CallbackImpl', import_from_module='ns.core', parent=root_module['ns3::CallbackImplBase'], template_parameters=['void', 'unsigned int', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'])
---
>     module.add_class('CallbackImpl', import_from_module='ns.core', template_parameters=['void', 'unsigned int', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], parent=root_module['ns3::CallbackImplBase'])
1134,1169c1072,1103
<     module.add_container('std::list< ns3::Ipv4EndPoint * >', 'ns3::Ipv4EndPoint *', container_type='list')
<     module.add_container('ns3::Ipv4EndPointDemux::EndPoints', 'ns3::Ipv4EndPoint *', container_type='list')
<     module.add_container('std::vector< unsigned int >', 'unsigned int', container_type='vector')
<     module.add_container('std::vector< bool >', 'bool', container_type='vector')
<     module.add_container('std::list< ns3::Ipv6EndPoint * >', 'ns3::Ipv6EndPoint *', container_type='list')
<     module.add_container('ns3::Ipv6EndPointDemux::EndPoints', 'ns3::Ipv6EndPoint *', container_type='list')
<     module.add_container('std::list< ns3::RipRte >', 'ns3::RipRte', container_type='list')
<     module.add_container('std::list< ns3::RipNgRte >', 'ns3::RipNgRte', container_type='list')
<     module.add_container('std::vector< ns3::Ipv6Address >', 'ns3::Ipv6Address', container_type='vector')
<     module.add_container('std::list< ns3::Ptr< ns3::TcpOption const > >', 'ns3::Ptr< ns3::TcpOption const >', container_type='list')
<     module.add_container('std::list< std::pair< ns3::SequenceNumber< unsigned int, int >, ns3::SequenceNumber< unsigned int, int > > >', 'std::pair< ns3::SequenceNumber< unsigned int, int >, ns3::SequenceNumber< unsigned int, int > >', container_type='list')
<     module.add_container('ns3::TcpOptionSack::SackList', 'std::pair< ns3::SequenceNumber< unsigned int, int >, ns3::SequenceNumber< unsigned int, int > >', container_type='list')
<     module.add_container('std::list< std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv4Header > >', 'std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv4Header >', container_type='list')
<     module.add_container('std::list< ns3::ArpCache::Entry * >', 'ns3::ArpCache::Entry *', container_type='list')
<     module.add_container('std::map< unsigned int, unsigned int >', ('unsigned int', 'unsigned int'), container_type='map')
<     module.add_container('std::list< std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv6Header > >', 'std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv6Header >', container_type='list')
<     module.add_container('std::list< ns3::NdiscCache::Entry * >', 'ns3::NdiscCache::Entry *', container_type='list')
<     module.add_container('std::set< unsigned int >', 'unsigned int', container_type='set')
<     typehandlers.add_type_alias('void ( * ) ( ns3::TcpSocketState::TcpCongState_t const, ns3::TcpSocketState::TcpCongState_t const )', 'ns3::TcpCongStatesTracedValueCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::TcpSocketState::TcpCongState_t const, ns3::TcpSocketState::TcpCongState_t const )*', 'ns3::TcpCongStatesTracedValueCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::TcpSocketState::TcpCongState_t const, ns3::TcpSocketState::TcpCongState_t const )&', 'ns3::TcpCongStatesTracedValueCallback&')
<     typehandlers.add_type_alias('void ( * ) ( ns3::TcpSocketState::EcnState_t const, ns3::TcpSocketState::EcnState_t const )', 'ns3::EcnStatesTracedValueCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::TcpSocketState::EcnState_t const, ns3::TcpSocketState::EcnState_t const )*', 'ns3::EcnStatesTracedValueCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::TcpSocketState::EcnState_t const, ns3::TcpSocketState::EcnState_t const )&', 'ns3::EcnStatesTracedValueCallback&')
<     typehandlers.add_type_alias('void ( * ) ( ns3::TcpSocket::TcpStates_t const, ns3::TcpSocket::TcpStates_t const )', 'ns3::TcpStatesTracedValueCallback')
<     typehandlers.add_type_alias('void ( * ) ( ns3::TcpSocket::TcpStates_t const, ns3::TcpSocket::TcpStates_t const )*', 'ns3::TcpStatesTracedValueCallback*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::TcpSocket::TcpStates_t const, ns3::TcpSocket::TcpStates_t const )&', 'ns3::TcpStatesTracedValueCallback&')
<     typehandlers.add_type_alias('ns3::SequenceNumber< unsigned int, int >', 'ns3::SequenceNumber32')
<     typehandlers.add_type_alias('ns3::SequenceNumber< unsigned int, int >*', 'ns3::SequenceNumber32*')
<     typehandlers.add_type_alias('ns3::SequenceNumber< unsigned int, int >&', 'ns3::SequenceNumber32&')
<     typehandlers.add_type_alias('ns3::SequenceNumber< unsigned short, short >', 'ns3::SequenceNumber16')
<     typehandlers.add_type_alias('ns3::SequenceNumber< unsigned short, short >*', 'ns3::SequenceNumber16*')
<     typehandlers.add_type_alias('ns3::SequenceNumber< unsigned short, short >&', 'ns3::SequenceNumber16&')
<     typehandlers.add_type_alias('ns3::SequenceNumber< unsigned char, signed char >', 'ns3::SequenceNumber8')
<     typehandlers.add_type_alias('ns3::SequenceNumber< unsigned char, signed char >*', 'ns3::SequenceNumber8*')
<     typehandlers.add_type_alias('ns3::SequenceNumber< unsigned char, signed char >&', 'ns3::SequenceNumber8&')
---
>     module.add_container('std::vector< unsigned int >', 'unsigned int', container_type=u'vector')
>     module.add_container('std::vector< bool >', 'bool', container_type=u'vector')
>     module.add_container('std::list< ns3::RipRte >', 'ns3::RipRte', container_type=u'list')
>     module.add_container('std::list< ns3::RipNgRte >', 'ns3::RipNgRte', container_type=u'list')
>     module.add_container('std::vector< ns3::Ipv6Address >', 'ns3::Ipv6Address', container_type=u'vector')
>     module.add_container('std::list< ns3::Ptr< ns3::TcpOption const > >', 'ns3::Ptr< ns3::TcpOption const >', container_type=u'list')
>     module.add_container('std::list< std::pair< ns3::SequenceNumber< unsigned int, int >, ns3::SequenceNumber< unsigned int, int > > >', 'std::pair< ns3::SequenceNumber< unsigned int, int >, ns3::SequenceNumber< unsigned int, int > >', container_type=u'list')
>     module.add_container('ns3::TcpOptionSack::SackList', 'std::pair< ns3::SequenceNumber< unsigned int, int >, ns3::SequenceNumber< unsigned int, int > >', container_type=u'list')
>     module.add_container('std::list< std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv4Header > >', 'std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv4Header >', container_type=u'list')
>     module.add_container('std::list< ns3::ArpCache::Entry * >', 'ns3::ArpCache::Entry *', container_type=u'list')
>     module.add_container('std::map< unsigned int, unsigned int >', ('unsigned int', 'unsigned int'), container_type=u'map')
>     module.add_container('std::list< std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv6Header > >', 'std::pair< ns3::Ptr< ns3::Packet >, ns3::Ipv6Header >', container_type=u'list')
>     module.add_container('std::list< ns3::NdiscCache::Entry * >', 'ns3::NdiscCache::Entry *', container_type=u'list')
>     module.add_container('std::set< unsigned int >', 'unsigned int', container_type=u'set')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::TcpSocketState::TcpCongState_t const, ns3::TcpSocketState::TcpCongState_t const )', u'ns3::TcpCongStatesTracedValueCallback')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::TcpSocketState::TcpCongState_t const, ns3::TcpSocketState::TcpCongState_t const )*', u'ns3::TcpCongStatesTracedValueCallback*')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::TcpSocketState::TcpCongState_t const, ns3::TcpSocketState::TcpCongState_t const )&', u'ns3::TcpCongStatesTracedValueCallback&')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::TcpSocketState::EcnState_t const, ns3::TcpSocketState::EcnState_t const )', u'ns3::EcnStatesTracedValueCallback')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::TcpSocketState::EcnState_t const, ns3::TcpSocketState::EcnState_t const )*', u'ns3::EcnStatesTracedValueCallback*')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::TcpSocketState::EcnState_t const, ns3::TcpSocketState::EcnState_t const )&', u'ns3::EcnStatesTracedValueCallback&')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::TcpSocket::TcpStates_t const, ns3::TcpSocket::TcpStates_t const )', u'ns3::TcpStatesTracedValueCallback')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::TcpSocket::TcpStates_t const, ns3::TcpSocket::TcpStates_t const )*', u'ns3::TcpStatesTracedValueCallback*')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::TcpSocket::TcpStates_t const, ns3::TcpSocket::TcpStates_t const )&', u'ns3::TcpStatesTracedValueCallback&')
>     typehandlers.add_type_alias(u'ns3::SequenceNumber< unsigned int, int >', u'ns3::SequenceNumber32')
>     typehandlers.add_type_alias(u'ns3::SequenceNumber< unsigned int, int >*', u'ns3::SequenceNumber32*')
>     typehandlers.add_type_alias(u'ns3::SequenceNumber< unsigned int, int >&', u'ns3::SequenceNumber32&')
>     typehandlers.add_type_alias(u'ns3::SequenceNumber< unsigned short, short >', u'ns3::SequenceNumber16')
>     typehandlers.add_type_alias(u'ns3::SequenceNumber< unsigned short, short >*', u'ns3::SequenceNumber16*')
>     typehandlers.add_type_alias(u'ns3::SequenceNumber< unsigned short, short >&', u'ns3::SequenceNumber16&')
>     typehandlers.add_type_alias(u'ns3::SequenceNumber< unsigned char, signed char >', u'ns3::SequenceNumber8')
>     typehandlers.add_type_alias(u'ns3::SequenceNumber< unsigned char, signed char >*', u'ns3::SequenceNumber8*')
>     typehandlers.add_type_alias(u'ns3::SequenceNumber< unsigned char, signed char >&', u'ns3::SequenceNumber8&')
1204,1209c1138,1143
<     typehandlers.add_type_alias('uint32_t ( * ) ( char const *, std::size_t const )', 'ns3::Hash::Hash32Function_ptr')
<     typehandlers.add_type_alias('uint32_t ( * ) ( char const *, std::size_t const )*', 'ns3::Hash::Hash32Function_ptr*')
<     typehandlers.add_type_alias('uint32_t ( * ) ( char const *, std::size_t const )&', 'ns3::Hash::Hash32Function_ptr&')
<     typehandlers.add_type_alias('uint64_t ( * ) ( char const *, std::size_t const )', 'ns3::Hash::Hash64Function_ptr')
<     typehandlers.add_type_alias('uint64_t ( * ) ( char const *, std::size_t const )*', 'ns3::Hash::Hash64Function_ptr*')
<     typehandlers.add_type_alias('uint64_t ( * ) ( char const *, std::size_t const )&', 'ns3::Hash::Hash64Function_ptr&')
---
>     typehandlers.add_type_alias(u'uint32_t ( * ) ( char const *, std::size_t const )', u'ns3::Hash::Hash32Function_ptr')
>     typehandlers.add_type_alias(u'uint32_t ( * ) ( char const *, std::size_t const )*', u'ns3::Hash::Hash32Function_ptr*')
>     typehandlers.add_type_alias(u'uint32_t ( * ) ( char const *, std::size_t const )&', u'ns3::Hash::Hash32Function_ptr&')
>     typehandlers.add_type_alias(u'uint64_t ( * ) ( char const *, std::size_t const )', u'ns3::Hash::Hash64Function_ptr')
>     typehandlers.add_type_alias(u'uint64_t ( * ) ( char const *, std::size_t const )*', u'ns3::Hash::Hash64Function_ptr*')
>     typehandlers.add_type_alias(u'uint64_t ( * ) ( char const *, std::size_t const )&', u'ns3::Hash::Hash64Function_ptr&')
1232,1270c1166,1204
<     typehandlers.add_type_alias('void ( * ) ( ns3::Time, ns3::Time )', 'ns3::TracedValueCallback::Time')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Time, ns3::Time )*', 'ns3::TracedValueCallback::Time*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::Time, ns3::Time )&', 'ns3::TracedValueCallback::Time&')
<     typehandlers.add_type_alias('void ( * ) ( ns3::TcpSocketState::TcpCongState_t const, ns3::TcpSocketState::TcpCongState_t const )', 'ns3::TracedValueCallback::TcpCongState')
<     typehandlers.add_type_alias('void ( * ) ( ns3::TcpSocketState::TcpCongState_t const, ns3::TcpSocketState::TcpCongState_t const )*', 'ns3::TracedValueCallback::TcpCongState*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::TcpSocketState::TcpCongState_t const, ns3::TcpSocketState::TcpCongState_t const )&', 'ns3::TracedValueCallback::TcpCongState&')
<     typehandlers.add_type_alias('void ( * ) ( ns3::TcpSocketState::EcnState_t const, ns3::TcpSocketState::EcnState_t const )', 'ns3::TracedValueCallback::EcnState')
<     typehandlers.add_type_alias('void ( * ) ( ns3::TcpSocketState::EcnState_t const, ns3::TcpSocketState::EcnState_t const )*', 'ns3::TracedValueCallback::EcnState*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::TcpSocketState::EcnState_t const, ns3::TcpSocketState::EcnState_t const )&', 'ns3::TracedValueCallback::EcnState&')
<     typehandlers.add_type_alias('void ( * ) ( ns3::SequenceNumber32, ns3::SequenceNumber32 )', 'ns3::TracedValueCallback::SequenceNumber32')
<     typehandlers.add_type_alias('void ( * ) ( ns3::SequenceNumber32, ns3::SequenceNumber32 )*', 'ns3::TracedValueCallback::SequenceNumber32*')
<     typehandlers.add_type_alias('void ( * ) ( ns3::SequenceNumber32, ns3::SequenceNumber32 )&', 'ns3::TracedValueCallback::SequenceNumber32&')
<     typehandlers.add_type_alias('void ( * ) ( bool, bool )', 'ns3::TracedValueCallback::Bool')
<     typehandlers.add_type_alias('void ( * ) ( bool, bool )*', 'ns3::TracedValueCallback::Bool*')
<     typehandlers.add_type_alias('void ( * ) ( bool, bool )&', 'ns3::TracedValueCallback::Bool&')
<     typehandlers.add_type_alias('void ( * ) ( int8_t, int8_t )', 'ns3::TracedValueCallback::Int8')
<     typehandlers.add_type_alias('void ( * ) ( int8_t, int8_t )*', 'ns3::TracedValueCallback::Int8*')
<     typehandlers.add_type_alias('void ( * ) ( int8_t, int8_t )&', 'ns3::TracedValueCallback::Int8&')
<     typehandlers.add_type_alias('void ( * ) ( uint8_t, uint8_t )', 'ns3::TracedValueCallback::Uint8')
<     typehandlers.add_type_alias('void ( * ) ( uint8_t, uint8_t )*', 'ns3::TracedValueCallback::Uint8*')
<     typehandlers.add_type_alias('void ( * ) ( uint8_t, uint8_t )&', 'ns3::TracedValueCallback::Uint8&')
<     typehandlers.add_type_alias('void ( * ) ( int16_t, int16_t )', 'ns3::TracedValueCallback::Int16')
<     typehandlers.add_type_alias('void ( * ) ( int16_t, int16_t )*', 'ns3::TracedValueCallback::Int16*')
<     typehandlers.add_type_alias('void ( * ) ( int16_t, int16_t )&', 'ns3::TracedValueCallback::Int16&')
<     typehandlers.add_type_alias('void ( * ) ( uint16_t, uint16_t )', 'ns3::TracedValueCallback::Uint16')
<     typehandlers.add_type_alias('void ( * ) ( uint16_t, uint16_t )*', 'ns3::TracedValueCallback::Uint16*')
<     typehandlers.add_type_alias('void ( * ) ( uint16_t, uint16_t )&', 'ns3::TracedValueCallback::Uint16&')
<     typehandlers.add_type_alias('void ( * ) ( int32_t, int32_t )', 'ns3::TracedValueCallback::Int32')
<     typehandlers.add_type_alias('void ( * ) ( int32_t, int32_t )*', 'ns3::TracedValueCallback::Int32*')
<     typehandlers.add_type_alias('void ( * ) ( int32_t, int32_t )&', 'ns3::TracedValueCallback::Int32&')
<     typehandlers.add_type_alias('void ( * ) ( uint32_t, uint32_t )', 'ns3::TracedValueCallback::Uint32')
<     typehandlers.add_type_alias('void ( * ) ( uint32_t, uint32_t )*', 'ns3::TracedValueCallback::Uint32*')
<     typehandlers.add_type_alias('void ( * ) ( uint32_t, uint32_t )&', 'ns3::TracedValueCallback::Uint32&')
<     typehandlers.add_type_alias('void ( * ) ( double, double )', 'ns3::TracedValueCallback::Double')
<     typehandlers.add_type_alias('void ( * ) ( double, double )*', 'ns3::TracedValueCallback::Double*')
<     typehandlers.add_type_alias('void ( * ) ( double, double )&', 'ns3::TracedValueCallback::Double&')
<     typehandlers.add_type_alias('void ( * ) (  )', 'ns3::TracedValueCallback::Void')
<     typehandlers.add_type_alias('void ( * ) (  )*', 'ns3::TracedValueCallback::Void*')
<     typehandlers.add_type_alias('void ( * ) (  )&', 'ns3::TracedValueCallback::Void&')
---
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Time, ns3::Time )', u'ns3::TracedValueCallback::Time')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Time, ns3::Time )*', u'ns3::TracedValueCallback::Time*')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::Time, ns3::Time )&', u'ns3::TracedValueCallback::Time&')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::TcpSocketState::TcpCongState_t const, ns3::TcpSocketState::TcpCongState_t const )', u'ns3::TracedValueCallback::TcpCongState')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::TcpSocketState::TcpCongState_t const, ns3::TcpSocketState::TcpCongState_t const )*', u'ns3::TracedValueCallback::TcpCongState*')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::TcpSocketState::TcpCongState_t const, ns3::TcpSocketState::TcpCongState_t const )&', u'ns3::TracedValueCallback::TcpCongState&')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::TcpSocketState::EcnState_t const, ns3::TcpSocketState::EcnState_t const )', u'ns3::TracedValueCallback::EcnState')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::TcpSocketState::EcnState_t const, ns3::TcpSocketState::EcnState_t const )*', u'ns3::TracedValueCallback::EcnState*')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::TcpSocketState::EcnState_t const, ns3::TcpSocketState::EcnState_t const )&', u'ns3::TracedValueCallback::EcnState&')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::SequenceNumber32, ns3::SequenceNumber32 )', u'ns3::TracedValueCallback::SequenceNumber32')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::SequenceNumber32, ns3::SequenceNumber32 )*', u'ns3::TracedValueCallback::SequenceNumber32*')
>     typehandlers.add_type_alias(u'void ( * ) ( ns3::SequenceNumber32, ns3::SequenceNumber32 )&', u'ns3::TracedValueCallback::SequenceNumber32&')
>     typehandlers.add_type_alias(u'void ( * ) ( bool, bool )', u'ns3::TracedValueCallback::Bool')
>     typehandlers.add_type_alias(u'void ( * ) ( bool, bool )*', u'ns3::TracedValueCallback::Bool*')
>     typehandlers.add_type_alias(u'void ( * ) ( bool, bool )&', u'ns3::TracedValueCallback::Bool&')
>     typehandlers.add_type_alias(u'void ( * ) ( int8_t, int8_t )', u'ns3::TracedValueCallback::Int8')
>     typehandlers.add_type_alias(u'void ( * ) ( int8_t, int8_t )*', u'ns3::TracedValueCallback::Int8*')
>     typehandlers.add_type_alias(u'void ( * ) ( int8_t, int8_t )&', u'ns3::TracedValueCallback::Int8&')
>     typehandlers.add_type_alias(u'void ( * ) ( uint8_t, uint8_t )', u'ns3::TracedValueCallback::Uint8')
>     typehandlers.add_type_alias(u'void ( * ) ( uint8_t, uint8_t )*', u'ns3::TracedValueCallback::Uint8*')
>     typehandlers.add_type_alias(u'void ( * ) ( uint8_t, uint8_t )&', u'ns3::TracedValueCallback::Uint8&')
>     typehandlers.add_type_alias(u'void ( * ) ( int16_t, int16_t )', u'ns3::TracedValueCallback::Int16')
>     typehandlers.add_type_alias(u'void ( * ) ( int16_t, int16_t )*', u'ns3::TracedValueCallback::Int16*')
>     typehandlers.add_type_alias(u'void ( * ) ( int16_t, int16_t )&', u'ns3::TracedValueCallback::Int16&')
>     typehandlers.add_type_alias(u'void ( * ) ( uint16_t, uint16_t )', u'ns3::TracedValueCallback::Uint16')
>     typehandlers.add_type_alias(u'void ( * ) ( uint16_t, uint16_t )*', u'ns3::TracedValueCallback::Uint16*')
>     typehandlers.add_type_alias(u'void ( * ) ( uint16_t, uint16_t )&', u'ns3::TracedValueCallback::Uint16&')
>     typehandlers.add_type_alias(u'void ( * ) ( int32_t, int32_t )', u'ns3::TracedValueCallback::Int32')
>     typehandlers.add_type_alias(u'void ( * ) ( int32_t, int32_t )*', u'ns3::TracedValueCallback::Int32*')
>     typehandlers.add_type_alias(u'void ( * ) ( int32_t, int32_t )&', u'ns3::TracedValueCallback::Int32&')
>     typehandlers.add_type_alias(u'void ( * ) ( uint32_t, uint32_t )', u'ns3::TracedValueCallback::Uint32')
>     typehandlers.add_type_alias(u'void ( * ) ( uint32_t, uint32_t )*', u'ns3::TracedValueCallback::Uint32*')
>     typehandlers.add_type_alias(u'void ( * ) ( uint32_t, uint32_t )&', u'ns3::TracedValueCallback::Uint32&')
>     typehandlers.add_type_alias(u'void ( * ) ( double, double )', u'ns3::TracedValueCallback::Double')
>     typehandlers.add_type_alias(u'void ( * ) ( double, double )*', u'ns3::TracedValueCallback::Double*')
>     typehandlers.add_type_alias(u'void ( * ) ( double, double )&', u'ns3::TracedValueCallback::Double&')
>     typehandlers.add_type_alias(u'void ( * ) (  )', u'ns3::TracedValueCallback::Void')
>     typehandlers.add_type_alias(u'void ( * ) (  )*', u'ns3::TracedValueCallback::Void*')
>     typehandlers.add_type_alias(u'void ( * ) (  )&', u'ns3::TracedValueCallback::Void&')
1325,1326d1258
<     register_Ns3Ipv4EndPoint_methods(root_module, root_module['ns3::Ipv4EndPoint'])
<     register_Ns3Ipv4EndPointDemux_methods(root_module, root_module['ns3::Ipv4EndPointDemux'])
1337,1338d1268
<     register_Ns3Ipv6EndPoint_methods(root_module, root_module['ns3::Ipv6EndPoint'])
<     register_Ns3Ipv6EndPointDemux_methods(root_module, root_module['ns3::Ipv6EndPointDemux'])
1378d1307
<     register_Ns3TcpTxItemRateInformation_methods(root_module, root_module['ns3::TcpTxItem::RateInformation'])
1477,1479d1405
<     register_Ns3TcpRateOps_methods(root_module, root_module['ns3::TcpRateOps'])
<     register_Ns3TcpRateOpsTcpRateConnection_methods(root_module, root_module['ns3::TcpRateOps::TcpRateConnection'])
<     register_Ns3TcpRateOpsTcpRateSample_methods(root_module, root_module['ns3::TcpRateOps::TcpRateSample'])
1605d1530
<     register_Ns3TcpDctcp_methods(root_module, root_module['ns3::TcpDctcp'])
1614d1538
<     register_Ns3TcpRateLinux_methods(root_module, root_module['ns3::TcpRateLinux'])
1632,1633d1555
<     register_Ns3CallbackImpl__Void_Const_ns3TcpRateOpsTcpRateConnection___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, const ns3::TcpRateOps::TcpRateConnection &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
<     register_Ns3CallbackImpl__Void_Const_ns3TcpRateOpsTcpRateSample___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, const ns3::TcpRateOps::TcpRateSample &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
1635,1636d1556
<     register_Ns3CallbackImpl__Void_Ns3Ipv4Address_Unsigned_char_Unsigned_char_Unsigned_char_Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ipv4Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
<     register_Ns3CallbackImpl__Void_Ns3Ipv6Address_Unsigned_char_Unsigned_char_Unsigned_char_Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ipv6Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
1644d1563
<     register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Ns3Ipv4Header_Unsigned_short_Ns3Ptr__lt__ns3Ipv4Interface__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<ns3::Packet>, ns3::Ipv4Header, unsigned short, ns3::Ptr<ns3::Ipv4Interface>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
1646d1564
<     register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Ns3Ipv6Header_Unsigned_short_Ns3Ptr__lt__ns3Ipv6Interface__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::Ptr<ns3::Packet>, ns3::Ipv6Header, unsigned short, ns3::Ptr<ns3::Ipv6Interface>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
1655d1572
<     register_Ns3CallbackImpl__Void_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, root_module['ns3::CallbackImpl< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'])
1863c1780
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
1923c1840
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
1983c1900
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
2463c2380
<                    is_const=True, deprecated=True)
---
>                    deprecated=True, is_const=True)
3145c3062
<                    is_const=True, deprecated=True)
---
>                    is_const=True)
3278,3395d3194
< def register_Ns3Ipv4EndPoint_methods(root_module, cls):
<     ## ipv4-end-point.h (module 'internet'): ns3::Ipv4EndPoint::Ipv4EndPoint(ns3::Ipv4EndPoint const & arg0) [constructor]
<     cls.add_constructor([param('ns3::Ipv4EndPoint const &', 'arg0')])
<     ## ipv4-end-point.h (module 'internet'): ns3::Ipv4EndPoint::Ipv4EndPoint(ns3::Ipv4Address address, uint16_t port) [constructor]
<     cls.add_constructor([param('ns3::Ipv4Address', 'address'), param('uint16_t', 'port')])
<     ## ipv4-end-point.h (module 'internet'): void ns3::Ipv4EndPoint::BindToNetDevice(ns3::Ptr<ns3::NetDevice> netdevice) [member function]
<     cls.add_method('BindToNetDevice', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::NetDevice >', 'netdevice')])
<     ## ipv4-end-point.h (module 'internet'): void ns3::Ipv4EndPoint::ForwardIcmp(ns3::Ipv4Address icmpSource, uint8_t icmpTtl, uint8_t icmpType, uint8_t icmpCode, uint32_t icmpInfo) [member function]
<     cls.add_method('ForwardIcmp', 
<                    'void', 
<                    [param('ns3::Ipv4Address', 'icmpSource'), param('uint8_t', 'icmpTtl'), param('uint8_t', 'icmpType'), param('uint8_t', 'icmpCode'), param('uint32_t', 'icmpInfo')])
<     ## ipv4-end-point.h (module 'internet'): void ns3::Ipv4EndPoint::ForwardUp(ns3::Ptr<ns3::Packet> p, ns3::Ipv4Header const & header, uint16_t sport, ns3::Ptr<ns3::Ipv4Interface> incomingInterface) [member function]
<     cls.add_method('ForwardUp', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Packet >', 'p'), param('ns3::Ipv4Header const &', 'header'), param('uint16_t', 'sport'), param('ns3::Ptr< ns3::Ipv4Interface >', 'incomingInterface')])
<     ## ipv4-end-point.h (module 'internet'): ns3::Ptr<ns3::NetDevice> ns3::Ipv4EndPoint::GetBoundNetDevice() [member function]
<     cls.add_method('GetBoundNetDevice', 
<                    'ns3::Ptr< ns3::NetDevice >', 
<                    [])
<     ## ipv4-end-point.h (module 'internet'): ns3::Ipv4Address ns3::Ipv4EndPoint::GetLocalAddress() [member function]
<     cls.add_method('GetLocalAddress', 
<                    'ns3::Ipv4Address', 
<                    [])
<     ## ipv4-end-point.h (module 'internet'): uint16_t ns3::Ipv4EndPoint::GetLocalPort() [member function]
<     cls.add_method('GetLocalPort', 
<                    'uint16_t', 
<                    [])
<     ## ipv4-end-point.h (module 'internet'): ns3::Ipv4Address ns3::Ipv4EndPoint::GetPeerAddress() [member function]
<     cls.add_method('GetPeerAddress', 
<                    'ns3::Ipv4Address', 
<                    [])
<     ## ipv4-end-point.h (module 'internet'): uint16_t ns3::Ipv4EndPoint::GetPeerPort() [member function]
<     cls.add_method('GetPeerPort', 
<                    'uint16_t', 
<                    [])
<     ## ipv4-end-point.h (module 'internet'): bool ns3::Ipv4EndPoint::IsRxEnabled() [member function]
<     cls.add_method('IsRxEnabled', 
<                    'bool', 
<                    [])
<     ## ipv4-end-point.h (module 'internet'): void ns3::Ipv4EndPoint::SetDestroyCallback(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> callback) [member function]
<     cls.add_method('SetDestroyCallback', 
<                    'void', 
<                    [param('ns3::Callback< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'callback')])
<     ## ipv4-end-point.h (module 'internet'): void ns3::Ipv4EndPoint::SetIcmpCallback(ns3::Callback<void, ns3::Ipv4Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty> callback) [member function]
<     cls.add_method('SetIcmpCallback', 
<                    'void', 
<                    [param('ns3::Callback< void, ns3::Ipv4Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'callback')])
<     ## ipv4-end-point.h (module 'internet'): void ns3::Ipv4EndPoint::SetLocalAddress(ns3::Ipv4Address address) [member function]
<     cls.add_method('SetLocalAddress', 
<                    'void', 
<                    [param('ns3::Ipv4Address', 'address')])
<     ## ipv4-end-point.h (module 'internet'): void ns3::Ipv4EndPoint::SetPeer(ns3::Ipv4Address address, uint16_t port) [member function]
<     cls.add_method('SetPeer', 
<                    'void', 
<                    [param('ns3::Ipv4Address', 'address'), param('uint16_t', 'port')])
<     ## ipv4-end-point.h (module 'internet'): void ns3::Ipv4EndPoint::SetRxCallback(ns3::Callback<void, ns3::Ptr<ns3::Packet>, ns3::Ipv4Header, unsigned short, ns3::Ptr<ns3::Ipv4Interface>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> callback) [member function]
<     cls.add_method('SetRxCallback', 
<                    'void', 
<                    [param('ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Ipv4Header, unsigned short, ns3::Ptr< ns3::Ipv4Interface >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'callback')])
<     ## ipv4-end-point.h (module 'internet'): void ns3::Ipv4EndPoint::SetRxEnabled(bool enabled) [member function]
<     cls.add_method('SetRxEnabled', 
<                    'void', 
<                    [param('bool', 'enabled')])
<     return
< 
< def register_Ns3Ipv4EndPointDemux_methods(root_module, cls):
<     ## ipv4-end-point-demux.h (module 'internet'): ns3::Ipv4EndPointDemux::Ipv4EndPointDemux(ns3::Ipv4EndPointDemux const & arg0) [constructor]
<     cls.add_constructor([param('ns3::Ipv4EndPointDemux const &', 'arg0')])
<     ## ipv4-end-point-demux.h (module 'internet'): ns3::Ipv4EndPointDemux::Ipv4EndPointDemux() [constructor]
<     cls.add_constructor([])
<     ## ipv4-end-point-demux.h (module 'internet'): ns3::Ipv4EndPoint * ns3::Ipv4EndPointDemux::Allocate() [member function]
<     cls.add_method('Allocate', 
<                    'ns3::Ipv4EndPoint *', 
<                    [])
<     ## ipv4-end-point-demux.h (module 'internet'): ns3::Ipv4EndPoint * ns3::Ipv4EndPointDemux::Allocate(ns3::Ipv4Address address) [member function]
<     cls.add_method('Allocate', 
<                    'ns3::Ipv4EndPoint *', 
<                    [param('ns3::Ipv4Address', 'address')])
<     ## ipv4-end-point-demux.h (module 'internet'): ns3::Ipv4EndPoint * ns3::Ipv4EndPointDemux::Allocate(ns3::Ptr<ns3::NetDevice> boundNetDevice, uint16_t port) [member function]
<     cls.add_method('Allocate', 
<                    'ns3::Ipv4EndPoint *', 
<                    [param('ns3::Ptr< ns3::NetDevice >', 'boundNetDevice'), param('uint16_t', 'port')])
<     ## ipv4-end-point-demux.h (module 'internet'): ns3::Ipv4EndPoint * ns3::Ipv4EndPointDemux::Allocate(ns3::Ptr<ns3::NetDevice> boundNetDevice, ns3::Ipv4Address address, uint16_t port) [member function]
<     cls.add_method('Allocate', 
<                    'ns3::Ipv4EndPoint *', 
<                    [param('ns3::Ptr< ns3::NetDevice >', 'boundNetDevice'), param('ns3::Ipv4Address', 'address'), param('uint16_t', 'port')])
<     ## ipv4-end-point-demux.h (module 'internet'): ns3::Ipv4EndPoint * ns3::Ipv4EndPointDemux::Allocate(ns3::Ptr<ns3::NetDevice> boundNetDevice, ns3::Ipv4Address localAddress, uint16_t localPort, ns3::Ipv4Address peerAddress, uint16_t peerPort) [member function]
<     cls.add_method('Allocate', 
<                    'ns3::Ipv4EndPoint *', 
<                    [param('ns3::Ptr< ns3::NetDevice >', 'boundNetDevice'), param('ns3::Ipv4Address', 'localAddress'), param('uint16_t', 'localPort'), param('ns3::Ipv4Address', 'peerAddress'), param('uint16_t', 'peerPort')])
<     ## ipv4-end-point-demux.h (module 'internet'): void ns3::Ipv4EndPointDemux::DeAllocate(ns3::Ipv4EndPoint * endPoint) [member function]
<     cls.add_method('DeAllocate', 
<                    'void', 
<                    [param('ns3::Ipv4EndPoint *', 'endPoint')])
<     ## ipv4-end-point-demux.h (module 'internet'): ns3::Ipv4EndPointDemux::EndPoints ns3::Ipv4EndPointDemux::GetAllEndPoints() [member function]
<     cls.add_method('GetAllEndPoints', 
<                    'ns3::Ipv4EndPointDemux::EndPoints', 
<                    [])
<     ## ipv4-end-point-demux.h (module 'internet'): ns3::Ipv4EndPointDemux::EndPoints ns3::Ipv4EndPointDemux::Lookup(ns3::Ipv4Address daddr, uint16_t dport, ns3::Ipv4Address saddr, uint16_t sport, ns3::Ptr<ns3::Ipv4Interface> incomingInterface) [member function]
<     cls.add_method('Lookup', 
<                    'ns3::Ipv4EndPointDemux::EndPoints', 
<                    [param('ns3::Ipv4Address', 'daddr'), param('uint16_t', 'dport'), param('ns3::Ipv4Address', 'saddr'), param('uint16_t', 'sport'), param('ns3::Ptr< ns3::Ipv4Interface >', 'incomingInterface')])
<     ## ipv4-end-point-demux.h (module 'internet'): bool ns3::Ipv4EndPointDemux::LookupLocal(ns3::Ptr<ns3::NetDevice> boundNetDevice, ns3::Ipv4Address addr, uint16_t port) [member function]
<     cls.add_method('LookupLocal', 
<                    'bool', 
<                    [param('ns3::Ptr< ns3::NetDevice >', 'boundNetDevice'), param('ns3::Ipv4Address', 'addr'), param('uint16_t', 'port')])
<     ## ipv4-end-point-demux.h (module 'internet'): bool ns3::Ipv4EndPointDemux::LookupPortLocal(uint16_t port) [member function]
<     cls.add_method('LookupPortLocal', 
<                    'bool', 
<                    [param('uint16_t', 'port')])
<     ## ipv4-end-point-demux.h (module 'internet'): ns3::Ipv4EndPoint * ns3::Ipv4EndPointDemux::SimpleLookup(ns3::Ipv4Address daddr, uint16_t dport, ns3::Ipv4Address saddr, uint16_t sport) [member function]
<     cls.add_method('SimpleLookup', 
<                    'ns3::Ipv4EndPoint *', 
<                    [param('ns3::Ipv4Address', 'daddr'), param('uint16_t', 'dport'), param('ns3::Ipv4Address', 'saddr'), param('uint16_t', 'sport')])
<     return
< 
3555c3354
<                    is_const=True, deprecated=True)
---
>                    is_const=True)
3627c3426
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
3632c3431
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
3825c3624
<     ## ipv6-address.h (module 'network'): ns3::Ipv6Address ns3::Ipv6Address::CombinePrefix(ns3::Ipv6Prefix const & prefix) const [member function]
---
>     ## ipv6-address.h (module 'network'): ns3::Ipv6Address ns3::Ipv6Address::CombinePrefix(ns3::Ipv6Prefix const & prefix) [member function]
3828,3829c3627
<                    [param('ns3::Ipv6Prefix const &', 'prefix')], 
<                    is_const=True)
---
>                    [param('ns3::Ipv6Prefix const &', 'prefix')])
3885,3889d3682
<     ## ipv6-address.h (module 'network'): bool ns3::Ipv6Address::HasPrefix(ns3::Ipv6Prefix const & prefix) const [member function]
<     cls.add_method('HasPrefix', 
<                    'bool', 
<                    [param('ns3::Ipv6Prefix const &', 'prefix')], 
<                    is_const=True)
3894c3687
<                    is_const=True, deprecated=True)
---
>                    deprecated=True, is_const=True)
3919c3712
<                    is_const=True, deprecated=True)
---
>                    is_const=True)
3955,3959d3747
<     ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::MakeAutoconfiguredAddress(ns3::Address addr, ns3::Ipv6Address prefix) [member function]
<     cls.add_method('MakeAutoconfiguredAddress', 
<                    'ns3::Ipv6Address', 
<                    [param('ns3::Address', 'addr'), param('ns3::Ipv6Address', 'prefix')], 
<                    is_static=True)
3980,3984d3767
<     ## ipv6-address.h (module 'network'): static ns3::Ipv6Address ns3::Ipv6Address::MakeAutoconfiguredLinkLocalAddress(ns3::Address mac) [member function]
<     cls.add_method('MakeAutoconfiguredLinkLocalAddress', 
<                    'ns3::Ipv6Address', 
<                    [param('ns3::Address', 'mac')], 
<                    is_static=True)
4134,4256d3916
< def register_Ns3Ipv6EndPoint_methods(root_module, cls):
<     ## ipv6-end-point.h (module 'internet'): ns3::Ipv6EndPoint::Ipv6EndPoint(ns3::Ipv6EndPoint const & arg0) [constructor]
<     cls.add_constructor([param('ns3::Ipv6EndPoint const &', 'arg0')])
<     ## ipv6-end-point.h (module 'internet'): ns3::Ipv6EndPoint::Ipv6EndPoint(ns3::Ipv6Address addr, uint16_t port) [constructor]
<     cls.add_constructor([param('ns3::Ipv6Address', 'addr'), param('uint16_t', 'port')])
<     ## ipv6-end-point.h (module 'internet'): void ns3::Ipv6EndPoint::BindToNetDevice(ns3::Ptr<ns3::NetDevice> netdevice) [member function]
<     cls.add_method('BindToNetDevice', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::NetDevice >', 'netdevice')])
<     ## ipv6-end-point.h (module 'internet'): void ns3::Ipv6EndPoint::ForwardIcmp(ns3::Ipv6Address src, uint8_t ttl, uint8_t type, uint8_t code, uint32_t info) [member function]
<     cls.add_method('ForwardIcmp', 
<                    'void', 
<                    [param('ns3::Ipv6Address', 'src'), param('uint8_t', 'ttl'), param('uint8_t', 'type'), param('uint8_t', 'code'), param('uint32_t', 'info')])
<     ## ipv6-end-point.h (module 'internet'): void ns3::Ipv6EndPoint::ForwardUp(ns3::Ptr<ns3::Packet> p, ns3::Ipv6Header header, uint16_t port, ns3::Ptr<ns3::Ipv6Interface> incomingInterface) [member function]
<     cls.add_method('ForwardUp', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Packet >', 'p'), param('ns3::Ipv6Header', 'header'), param('uint16_t', 'port'), param('ns3::Ptr< ns3::Ipv6Interface >', 'incomingInterface')])
<     ## ipv6-end-point.h (module 'internet'): ns3::Ptr<ns3::NetDevice> ns3::Ipv6EndPoint::GetBoundNetDevice() [member function]
<     cls.add_method('GetBoundNetDevice', 
<                    'ns3::Ptr< ns3::NetDevice >', 
<                    [])
<     ## ipv6-end-point.h (module 'internet'): ns3::Ipv6Address ns3::Ipv6EndPoint::GetLocalAddress() [member function]
<     cls.add_method('GetLocalAddress', 
<                    'ns3::Ipv6Address', 
<                    [])
<     ## ipv6-end-point.h (module 'internet'): uint16_t ns3::Ipv6EndPoint::GetLocalPort() [member function]
<     cls.add_method('GetLocalPort', 
<                    'uint16_t', 
<                    [])
<     ## ipv6-end-point.h (module 'internet'): ns3::Ipv6Address ns3::Ipv6EndPoint::GetPeerAddress() [member function]
<     cls.add_method('GetPeerAddress', 
<                    'ns3::Ipv6Address', 
<                    [])
<     ## ipv6-end-point.h (module 'internet'): uint16_t ns3::Ipv6EndPoint::GetPeerPort() [member function]
<     cls.add_method('GetPeerPort', 
<                    'uint16_t', 
<                    [])
<     ## ipv6-end-point.h (module 'internet'): bool ns3::Ipv6EndPoint::IsRxEnabled() [member function]
<     cls.add_method('IsRxEnabled', 
<                    'bool', 
<                    [])
<     ## ipv6-end-point.h (module 'internet'): void ns3::Ipv6EndPoint::SetDestroyCallback(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> callback) [member function]
<     cls.add_method('SetDestroyCallback', 
<                    'void', 
<                    [param('ns3::Callback< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'callback')])
<     ## ipv6-end-point.h (module 'internet'): void ns3::Ipv6EndPoint::SetIcmpCallback(ns3::Callback<void, ns3::Ipv6Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty> callback) [member function]
<     cls.add_method('SetIcmpCallback', 
<                    'void', 
<                    [param('ns3::Callback< void, ns3::Ipv6Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'callback')])
<     ## ipv6-end-point.h (module 'internet'): void ns3::Ipv6EndPoint::SetLocalAddress(ns3::Ipv6Address addr) [member function]
<     cls.add_method('SetLocalAddress', 
<                    'void', 
<                    [param('ns3::Ipv6Address', 'addr')])
<     ## ipv6-end-point.h (module 'internet'): void ns3::Ipv6EndPoint::SetLocalPort(uint16_t port) [member function]
<     cls.add_method('SetLocalPort', 
<                    'void', 
<                    [param('uint16_t', 'port')])
<     ## ipv6-end-point.h (module 'internet'): void ns3::Ipv6EndPoint::SetPeer(ns3::Ipv6Address addr, uint16_t port) [member function]
<     cls.add_method('SetPeer', 
<                    'void', 
<                    [param('ns3::Ipv6Address', 'addr'), param('uint16_t', 'port')])
<     ## ipv6-end-point.h (module 'internet'): void ns3::Ipv6EndPoint::SetRxCallback(ns3::Callback<void, ns3::Ptr<ns3::Packet>, ns3::Ipv6Header, unsigned short, ns3::Ptr<ns3::Ipv6Interface>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> callback) [member function]
<     cls.add_method('SetRxCallback', 
<                    'void', 
<                    [param('ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Ipv6Header, unsigned short, ns3::Ptr< ns3::Ipv6Interface >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', 'callback')])
<     ## ipv6-end-point.h (module 'internet'): void ns3::Ipv6EndPoint::SetRxEnabled(bool enabled) [member function]
<     cls.add_method('SetRxEnabled', 
<                    'void', 
<                    [param('bool', 'enabled')])
<     return
< 
< def register_Ns3Ipv6EndPointDemux_methods(root_module, cls):
<     ## ipv6-end-point-demux.h (module 'internet'): ns3::Ipv6EndPointDemux::Ipv6EndPointDemux(ns3::Ipv6EndPointDemux const & arg0) [constructor]
<     cls.add_constructor([param('ns3::Ipv6EndPointDemux const &', 'arg0')])
<     ## ipv6-end-point-demux.h (module 'internet'): ns3::Ipv6EndPointDemux::Ipv6EndPointDemux() [constructor]
<     cls.add_constructor([])
<     ## ipv6-end-point-demux.h (module 'internet'): ns3::Ipv6EndPoint * ns3::Ipv6EndPointDemux::Allocate() [member function]
<     cls.add_method('Allocate', 
<                    'ns3::Ipv6EndPoint *', 
<                    [])
<     ## ipv6-end-point-demux.h (module 'internet'): ns3::Ipv6EndPoint * ns3::Ipv6EndPointDemux::Allocate(ns3::Ipv6Address address) [member function]
<     cls.add_method('Allocate', 
<                    'ns3::Ipv6EndPoint *', 
<                    [param('ns3::Ipv6Address', 'address')])
<     ## ipv6-end-point-demux.h (module 'internet'): ns3::Ipv6EndPoint * ns3::Ipv6EndPointDemux::Allocate(ns3::Ptr<ns3::NetDevice> boundNetDevice, uint16_t port) [member function]
<     cls.add_method('Allocate', 
<                    'ns3::Ipv6EndPoint *', 
<                    [param('ns3::Ptr< ns3::NetDevice >', 'boundNetDevice'), param('uint16_t', 'port')])
<     ## ipv6-end-point-demux.h (module 'internet'): ns3::Ipv6EndPoint * ns3::Ipv6EndPointDemux::Allocate(ns3::Ptr<ns3::NetDevice> boundNetDevice, ns3::Ipv6Address address, uint16_t port) [member function]
<     cls.add_method('Allocate', 
<                    'ns3::Ipv6EndPoint *', 
<                    [param('ns3::Ptr< ns3::NetDevice >', 'boundNetDevice'), param('ns3::Ipv6Address', 'address'), param('uint16_t', 'port')])
<     ## ipv6-end-point-demux.h (module 'internet'): ns3::Ipv6EndPoint * ns3::Ipv6EndPointDemux::Allocate(ns3::Ptr<ns3::NetDevice> boundNetDevice, ns3::Ipv6Address localAddress, uint16_t localPort, ns3::Ipv6Address peerAddress, uint16_t peerPort) [member function]
<     cls.add_method('Allocate', 
<                    'ns3::Ipv6EndPoint *', 
<                    [param('ns3::Ptr< ns3::NetDevice >', 'boundNetDevice'), param('ns3::Ipv6Address', 'localAddress'), param('uint16_t', 'localPort'), param('ns3::Ipv6Address', 'peerAddress'), param('uint16_t', 'peerPort')])
<     ## ipv6-end-point-demux.h (module 'internet'): void ns3::Ipv6EndPointDemux::DeAllocate(ns3::Ipv6EndPoint * endPoint) [member function]
<     cls.add_method('DeAllocate', 
<                    'void', 
<                    [param('ns3::Ipv6EndPoint *', 'endPoint')])
<     ## ipv6-end-point-demux.h (module 'internet'): ns3::Ipv6EndPointDemux::EndPoints ns3::Ipv6EndPointDemux::GetEndPoints() const [member function]
<     cls.add_method('GetEndPoints', 
<                    'ns3::Ipv6EndPointDemux::EndPoints', 
<                    [], 
<                    is_const=True)
<     ## ipv6-end-point-demux.h (module 'internet'): ns3::Ipv6EndPointDemux::EndPoints ns3::Ipv6EndPointDemux::Lookup(ns3::Ipv6Address dst, uint16_t dport, ns3::Ipv6Address src, uint16_t sport, ns3::Ptr<ns3::Ipv6Interface> incomingInterface) [member function]
<     cls.add_method('Lookup', 
<                    'ns3::Ipv6EndPointDemux::EndPoints', 
<                    [param('ns3::Ipv6Address', 'dst'), param('uint16_t', 'dport'), param('ns3::Ipv6Address', 'src'), param('uint16_t', 'sport'), param('ns3::Ptr< ns3::Ipv6Interface >', 'incomingInterface')])
<     ## ipv6-end-point-demux.h (module 'internet'): bool ns3::Ipv6EndPointDemux::LookupLocal(ns3::Ptr<ns3::NetDevice> boundNetDevice, ns3::Ipv6Address addr, uint16_t port) [member function]
<     cls.add_method('LookupLocal', 
<                    'bool', 
<                    [param('ns3::Ptr< ns3::NetDevice >', 'boundNetDevice'), param('ns3::Ipv6Address', 'addr'), param('uint16_t', 'port')])
<     ## ipv6-end-point-demux.h (module 'internet'): bool ns3::Ipv6EndPointDemux::LookupPortLocal(uint16_t port) [member function]
<     cls.add_method('LookupPortLocal', 
<                    'bool', 
<                    [param('uint16_t', 'port')])
<     ## ipv6-end-point-demux.h (module 'internet'): ns3::Ipv6EndPoint * ns3::Ipv6EndPointDemux::SimpleLookup(ns3::Ipv6Address dst, uint16_t dport, ns3::Ipv6Address src, uint16_t sport) [member function]
<     cls.add_method('SimpleLookup', 
<                    'ns3::Ipv6EndPoint *', 
<                    [param('ns3::Ipv6Address', 'dst'), param('uint16_t', 'dport'), param('ns3::Ipv6Address', 'src'), param('uint16_t', 'sport')])
<     return
< 
4444,4447d4103
<     ## ipv6-address.h (module 'network'): ns3::Ipv6Prefix::Ipv6Prefix(uint8_t * prefix, uint8_t prefixLength) [constructor]
<     cls.add_constructor([param('uint8_t *', 'prefix'), param('uint8_t', 'prefixLength')])
<     ## ipv6-address.h (module 'network'): ns3::Ipv6Prefix::Ipv6Prefix(char const * prefix, uint8_t prefixLength) [constructor]
<     cls.add_constructor([param('char const *', 'prefix'), param('uint8_t', 'prefixLength')])
4464,4468d4119
<     ## ipv6-address.h (module 'network'): uint8_t ns3::Ipv6Prefix::GetMinimumPrefixLength() const [member function]
<     cls.add_method('GetMinimumPrefixLength', 
<                    'uint8_t', 
<                    [], 
<                    is_const=True)
4488c4139
<                    is_const=True, deprecated=True)
---
>                    is_const=True)
4499,4502d4149
<     ## ipv6-address.h (module 'network'): void ns3::Ipv6Prefix::SetPrefixLength(uint8_t prefixLength) [member function]
<     cls.add_method('SetPrefixLength', 
<                    'void', 
<                    [param('uint8_t', 'prefixLength')])
4514c4161
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
4519c4166
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
4941c4588
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
4980c4627
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
5013,5017d4659
<     ## object-factory.h (module 'core'): bool ns3::ObjectFactory::IsTypeIdSet() const [member function]
<     cls.add_method('IsTypeIdSet', 
<                    'bool', 
<                    [], 
<                    is_const=True)
5408c5050
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
5444c5086
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
5480c5122
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
5784,5788c5426,5430
<     cls.add_binary_numeric_operator('+', root_module['ns3::SequenceNumber32'], root_module['ns3::SequenceNumber32'], param('ns3::SequenceNumber< unsigned int, int > const &', 'right'))
<     cls.add_binary_numeric_operator('+', root_module['ns3::SequenceNumber32'], root_module['ns3::SequenceNumber32'], param('int', 'right'))
<     cls.add_inplace_numeric_operator('+=', param('int', 'right'))
<     cls.add_binary_numeric_operator('-', root_module['ns3::SequenceNumber32'], root_module['ns3::SequenceNumber32'], param('int', 'right'))
<     cls.add_inplace_numeric_operator('-=', param('int', 'right'))
---
>     cls.add_binary_numeric_operator('+', root_module['ns3::SequenceNumber32'], root_module['ns3::SequenceNumber32'], param('ns3::SequenceNumber< unsigned int, int > const &', u'right'))
>     cls.add_binary_numeric_operator('+', root_module['ns3::SequenceNumber32'], root_module['ns3::SequenceNumber32'], param('int', u'right'))
>     cls.add_inplace_numeric_operator('+=', param('int', u'right'))
>     cls.add_binary_numeric_operator('-', root_module['ns3::SequenceNumber32'], root_module['ns3::SequenceNumber32'], param('int', u'right'))
>     cls.add_inplace_numeric_operator('-=', param('int', u'right'))
5837,5841d5478
<     ## simulator.h (module 'core'): static uint64_t ns3::Simulator::GetEventCount() [member function]
<     cls.add_method('GetEventCount', 
<                    'uint64_t', 
<                    [], 
<                    is_static=True)
5908c5545
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
5913c5550
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
5923c5560
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
5928c5565
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
5996c5633
<     ## tcp-tx-item.h (module 'internet'): ns3::TcpTxItem::TcpTxItem() [constructor]
---
>     ## tcp-tx-buffer.h (module 'internet'): ns3::TcpTxItem::TcpTxItem() [constructor]
5998c5635
<     ## tcp-tx-item.h (module 'internet'): ns3::TcpTxItem::TcpTxItem(ns3::TcpTxItem const & arg0) [constructor]
---
>     ## tcp-tx-buffer.h (module 'internet'): ns3::TcpTxItem::TcpTxItem(ns3::TcpTxItem const & arg0) [constructor]
6000,6019c5637
<     ## tcp-tx-item.h (module 'internet'): ns3::Time const & ns3::TcpTxItem::GetLastSent() const [member function]
<     cls.add_method('GetLastSent', 
<                    'ns3::Time const &', 
<                    [], 
<                    is_const=True)
<     ## tcp-tx-item.h (module 'internet'): ns3::Ptr<const ns3::Packet> ns3::TcpTxItem::GetPacket() const [member function]
<     cls.add_method('GetPacket', 
<                    'ns3::Ptr< ns3::Packet const >', 
<                    [], 
<                    is_const=True)
<     ## tcp-tx-item.h (module 'internet'): ns3::Ptr<ns3::Packet> ns3::TcpTxItem::GetPacketCopy() const [member function]
<     cls.add_method('GetPacketCopy', 
<                    'ns3::Ptr< ns3::Packet >', 
<                    [], 
<                    is_const=True)
<     ## tcp-tx-item.h (module 'internet'): ns3::TcpTxItem::RateInformation & ns3::TcpTxItem::GetRateInformation() [member function]
<     cls.add_method('GetRateInformation', 
<                    'ns3::TcpTxItem::RateInformation &', 
<                    [])
<     ## tcp-tx-item.h (module 'internet'): uint32_t ns3::TcpTxItem::GetSeqSize() const [member function]
---
>     ## tcp-tx-buffer.h (module 'internet'): uint32_t ns3::TcpTxItem::GetSeqSize() const [member function]
6024,6034c5642
<     ## tcp-tx-item.h (module 'internet'): bool ns3::TcpTxItem::IsRetrans() const [member function]
<     cls.add_method('IsRetrans', 
<                    'bool', 
<                    [], 
<                    is_const=True)
<     ## tcp-tx-item.h (module 'internet'): bool ns3::TcpTxItem::IsSacked() const [member function]
<     cls.add_method('IsSacked', 
<                    'bool', 
<                    [], 
<                    is_const=True)
<     ## tcp-tx-item.h (module 'internet'): void ns3::TcpTxItem::Print(std::ostream & os) const [member function]
---
>     ## tcp-tx-buffer.h (module 'internet'): void ns3::TcpTxItem::Print(std::ostream & os) const [member function]
6039,6053c5647,5658
<     return
< 
< def register_Ns3TcpTxItemRateInformation_methods(root_module, cls):
<     ## tcp-tx-item.h (module 'internet'): ns3::TcpTxItem::RateInformation::RateInformation() [constructor]
<     cls.add_constructor([])
<     ## tcp-tx-item.h (module 'internet'): ns3::TcpTxItem::RateInformation::RateInformation(ns3::TcpTxItem::RateInformation const & arg0) [constructor]
<     cls.add_constructor([param('ns3::TcpTxItem::RateInformation const &', 'arg0')])
<     ## tcp-tx-item.h (module 'internet'): ns3::TcpTxItem::RateInformation::m_delivered [variable]
<     cls.add_instance_attribute('m_delivered', 'uint64_t', is_const=False)
<     ## tcp-tx-item.h (module 'internet'): ns3::TcpTxItem::RateInformation::m_deliveredTime [variable]
<     cls.add_instance_attribute('m_deliveredTime', 'ns3::Time', is_const=False)
<     ## tcp-tx-item.h (module 'internet'): ns3::TcpTxItem::RateInformation::m_firstSent [variable]
<     cls.add_instance_attribute('m_firstSent', 'ns3::Time', is_const=False)
<     ## tcp-tx-item.h (module 'internet'): ns3::TcpTxItem::RateInformation::m_isAppLimited [variable]
<     cls.add_instance_attribute('m_isAppLimited', 'bool', is_const=False)
---
>     ## tcp-tx-buffer.h (module 'internet'): ns3::TcpTxItem::m_lastSent [variable]
>     cls.add_instance_attribute('m_lastSent', 'ns3::Time', is_const=False)
>     ## tcp-tx-buffer.h (module 'internet'): ns3::TcpTxItem::m_lost [variable]
>     cls.add_instance_attribute('m_lost', 'bool', is_const=False)
>     ## tcp-tx-buffer.h (module 'internet'): ns3::TcpTxItem::m_packet [variable]
>     cls.add_instance_attribute('m_packet', 'ns3::Ptr< ns3::Packet >', is_const=False)
>     ## tcp-tx-buffer.h (module 'internet'): ns3::TcpTxItem::m_retrans [variable]
>     cls.add_instance_attribute('m_retrans', 'bool', is_const=False)
>     ## tcp-tx-buffer.h (module 'internet'): ns3::TcpTxItem::m_sacked [variable]
>     cls.add_instance_attribute('m_sacked', 'bool', is_const=False)
>     ## tcp-tx-buffer.h (module 'internet'): ns3::TcpTxItem::m_startSeq [variable]
>     cls.add_instance_attribute('m_startSeq', 'ns3::SequenceNumber32', is_const=False)
6140c5745
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
6145c5750
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
6191,6192d5795
<     ## traced-value.h (module 'core'): ns3::TracedValue<ns3::SequenceNumber<unsigned int, int> >::TracedValue(ns3::TracedValue<ns3::SequenceNumber<unsigned int, int> > const & other) [constructor]
<     cls.add_constructor([param('ns3::TracedValue< ns3::SequenceNumber< unsigned int, int > > const &', 'other')])
6194a5798,5799
>     ## traced-value.h (module 'core'): ns3::TracedValue<ns3::SequenceNumber<unsigned int, int> >::TracedValue(ns3::TracedValue<ns3::SequenceNumber<unsigned int, int> > const & other) [constructor]
>     cls.add_constructor([param('ns3::TracedValue< ns3::SequenceNumber< unsigned int, int > > const &', 'other')])
6331c5936
<     cls.add_binary_numeric_operator('/', root_module['ns3::TracedValue< unsigned int >'], root_module['ns3::TracedValue< unsigned int >'], param('unsigned int const &', 'right'))
---
>     cls.add_binary_numeric_operator('/', root_module['ns3::TracedValue< unsigned int >'], root_module['ns3::TracedValue< unsigned int >'], param('unsigned int const &', u'right'))
6598,6602c6203,6206
<     cls.add_binary_numeric_operator('*', root_module['ns3::Time'], root_module['ns3::int64x64_t'], param('ns3::Time const &', 'right'))
<     cls.add_binary_numeric_operator('+', root_module['ns3::int64x64_t'], root_module['ns3::int64x64_t'], param('ns3::int64x64_t const &', 'right'))
<     cls.add_binary_numeric_operator('-', root_module['ns3::int64x64_t'], root_module['ns3::int64x64_t'], param('ns3::int64x64_t const &', 'right'))
<     cls.add_binary_numeric_operator('*', root_module['ns3::int64x64_t'], root_module['ns3::int64x64_t'], param('ns3::int64x64_t const &', 'right'))
<     cls.add_binary_numeric_operator('/', root_module['ns3::int64x64_t'], root_module['ns3::int64x64_t'], param('ns3::int64x64_t const &', 'right'))
---
>     cls.add_binary_numeric_operator('+', root_module['ns3::int64x64_t'], root_module['ns3::int64x64_t'], param('ns3::int64x64_t const &', u'right'))
>     cls.add_binary_numeric_operator('-', root_module['ns3::int64x64_t'], root_module['ns3::int64x64_t'], param('ns3::int64x64_t const &', u'right'))
>     cls.add_binary_numeric_operator('*', root_module['ns3::int64x64_t'], root_module['ns3::int64x64_t'], param('ns3::int64x64_t const &', u'right'))
>     cls.add_binary_numeric_operator('/', root_module['ns3::int64x64_t'], root_module['ns3::int64x64_t'], param('ns3::int64x64_t const &', u'right'))
6610,6613c6214,6217
<     cls.add_inplace_numeric_operator('+=', param('ns3::int64x64_t const &', 'right'))
<     cls.add_inplace_numeric_operator('-=', param('ns3::int64x64_t const &', 'right'))
<     cls.add_inplace_numeric_operator('*=', param('ns3::int64x64_t const &', 'right'))
<     cls.add_inplace_numeric_operator('/=', param('ns3::int64x64_t const &', 'right'))
---
>     cls.add_inplace_numeric_operator('+=', param('ns3::int64x64_t const &', u'right'))
>     cls.add_inplace_numeric_operator('-=', param('ns3::int64x64_t const &', u'right'))
>     cls.add_inplace_numeric_operator('*=', param('ns3::int64x64_t const &', u'right'))
>     cls.add_inplace_numeric_operator('/=', param('ns3::int64x64_t const &', u'right'))
6674c6278
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
6689c6293
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
6702c6306
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
6707c6311
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
6717c6321
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
6722c6326
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
6766c6370
<                    is_virtual=True, visibility='private')
---
>                    visibility='private', is_virtual=True)
6771c6375
<                    is_const=True, is_virtual=True, visibility='private')
---
>                    is_const=True, visibility='private', is_virtual=True)
6776c6380
<                    is_const=True, is_virtual=True, visibility='private')
---
>                    is_const=True, visibility='private', is_virtual=True)
6781c6385
<                    is_const=True, is_virtual=True, visibility='private')
---
>                    is_const=True, visibility='private', is_virtual=True)
6786c6390
<                    is_const=True, is_virtual=True, visibility='private')
---
>                    is_const=True, visibility='private', is_virtual=True)
7924c7528
<                    is_virtual=True, visibility='private')
---
>                    visibility='private', is_virtual=True)
7929c7533
<                    is_virtual=True, visibility='private')
---
>                    visibility='private', is_virtual=True)
7934c7538
<                    is_virtual=True, visibility='private')
---
>                    visibility='private', is_virtual=True)
7939c7543
<                    is_virtual=True, visibility='private')
---
>                    visibility='private', is_virtual=True)
8893c8497
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
8898c8502
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
8903c8507
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
8943c8547
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
8948c8552
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
9061c8665
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
9066c8670
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
9370c8974
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
9400c9004
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
9594c9198
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
9599c9203
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
9604c9208
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
9614c9218
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
9619c9223
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
9629c9233
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
9638c9242
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
9663c9267
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
9668c9272
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
9678c9282
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
9683c9287
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
9688c9292
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
9693c9297
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
9748c9352
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
9753c9357
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
9766c9370
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
9779c9383
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
9792c9396
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
9805c9409
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
9872c9476
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
9877c9481
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
9882c9486
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
9954c9558
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
10247,10251d9850
<     ## tcp-congestion-ops.h (module 'internet'): void ns3::TcpCongestionOps::CongControl(ns3::Ptr<ns3::TcpSocketState> tcb, ns3::TcpRateOps::TcpRateConnection const & rc, ns3::TcpRateOps::TcpRateSample const & rs) [member function]
<     cls.add_method('CongControl', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb'), param('ns3::TcpRateOps::TcpRateConnection const &', 'rc'), param('ns3::TcpRateOps::TcpRateSample const &', 'rs')], 
<                    is_virtual=True)
10266c9865
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
10271c9870
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
10276c9875
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
10282,10286d9880
<     ## tcp-congestion-ops.h (module 'internet'): bool ns3::TcpCongestionOps::HasCongControl() const [member function]
<     cls.add_method('HasCongControl', 
<                    'bool', 
<                    [], 
<                    is_const=True, is_virtual=True)
10291,10296c9885
<                    is_virtual=True)
<     ## tcp-congestion-ops.h (module 'internet'): void ns3::TcpCongestionOps::Init(ns3::Ptr<ns3::TcpSocketState> tcb) [member function]
<     cls.add_method('Init', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb')], 
<                    is_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
10302,10306d9890
<     ## tcp-congestion-ops.h (module 'internet'): void ns3::TcpCongestionOps::ReduceCwnd(ns3::Ptr<ns3::TcpSocketState> tcb) [member function]
<     cls.add_method('ReduceCwnd', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb')], 
<                    is_virtual=True, is_pure_virtual=True)
10501,10505d10084
<     ## tcp-congestion-ops.h (module 'internet'): void ns3::TcpNewReno::ReduceCwnd(ns3::Ptr<ns3::TcpSocketState> tcb) [member function]
<     cls.add_method('ReduceCwnd', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb')], 
<                    is_virtual=True)
10510c10089
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
10515c10094
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
10532c10111
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
10542c10121
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
10547c10126
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
10562c10141
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
10567c10146
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
10971,11068d10549
< def register_Ns3TcpRateOps_methods(root_module, cls):
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateOps() [constructor]
<     cls.add_constructor([])
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateOps(ns3::TcpRateOps const & arg0) [constructor]
<     cls.add_constructor([param('ns3::TcpRateOps const &', 'arg0')])
<     ## tcp-rate-ops.h (module 'internet'): void ns3::TcpRateOps::CalculateAppLimited(uint32_t cWnd, uint32_t in_flight, uint32_t segmentSize, ns3::SequenceNumber32 const & tailSeq, ns3::SequenceNumber32 const & nextTx, uint32_t const lostOut, uint32_t const retransOut) [member function]
<     cls.add_method('CalculateAppLimited', 
<                    'void', 
<                    [param('uint32_t', 'cWnd'), param('uint32_t', 'in_flight'), param('uint32_t', 'segmentSize'), param('ns3::SequenceNumber32 const &', 'tailSeq'), param('ns3::SequenceNumber32 const &', 'nextTx'), param('uint32_t const', 'lostOut'), param('uint32_t const', 'retransOut')], 
<                    is_virtual=True, is_pure_virtual=True)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateSample const & ns3::TcpRateOps::GenerateSample(uint32_t delivered, uint32_t lost, bool is_sack_reneg, uint32_t priorInFlight, ns3::Time const & minRtt) [member function]
<     cls.add_method('GenerateSample', 
<                    'ns3::TcpRateOps::TcpRateSample const &', 
<                    [param('uint32_t', 'delivered'), param('uint32_t', 'lost'), param('bool', 'is_sack_reneg'), param('uint32_t', 'priorInFlight'), param('ns3::Time const &', 'minRtt')], 
<                    is_virtual=True, is_pure_virtual=True)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateConnection const & ns3::TcpRateOps::GetConnectionRate() [member function]
<     cls.add_method('GetConnectionRate', 
<                    'ns3::TcpRateOps::TcpRateConnection const &', 
<                    [], 
<                    is_virtual=True, is_pure_virtual=True)
<     ## tcp-rate-ops.h (module 'internet'): static ns3::TypeId ns3::TcpRateOps::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## tcp-rate-ops.h (module 'internet'): void ns3::TcpRateOps::SkbDelivered(ns3::TcpTxItem * skb) [member function]
<     cls.add_method('SkbDelivered', 
<                    'void', 
<                    [param('ns3::TcpTxItem *', 'skb')], 
<                    is_virtual=True, is_pure_virtual=True)
<     ## tcp-rate-ops.h (module 'internet'): void ns3::TcpRateOps::SkbSent(ns3::TcpTxItem * skb, bool isStartOfTransmission) [member function]
<     cls.add_method('SkbSent', 
<                    'void', 
<                    [param('ns3::TcpTxItem *', 'skb'), param('bool', 'isStartOfTransmission')], 
<                    is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3TcpRateOpsTcpRateConnection_methods(root_module, cls):
<     cls.add_output_stream_operator()
<     cls.add_binary_comparison_operator('==')
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateConnection::TcpRateConnection() [constructor]
<     cls.add_constructor([])
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateConnection::TcpRateConnection(ns3::TcpRateOps::TcpRateConnection const & arg0) [constructor]
<     cls.add_constructor([param('ns3::TcpRateOps::TcpRateConnection const &', 'arg0')])
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateConnection::m_appLimited [variable]
<     cls.add_instance_attribute('m_appLimited', 'uint32_t', is_const=False)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateConnection::m_delivered [variable]
<     cls.add_instance_attribute('m_delivered', 'uint64_t', is_const=False)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateConnection::m_deliveredTime [variable]
<     cls.add_instance_attribute('m_deliveredTime', 'ns3::Time', is_const=False)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateConnection::m_firstSentTime [variable]
<     cls.add_instance_attribute('m_firstSentTime', 'ns3::Time', is_const=False)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateConnection::m_rateAppLimited [variable]
<     cls.add_instance_attribute('m_rateAppLimited', 'bool', is_const=False)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateConnection::m_rateDelivered [variable]
<     cls.add_instance_attribute('m_rateDelivered', 'int32_t', is_const=False)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateConnection::m_rateInterval [variable]
<     cls.add_instance_attribute('m_rateInterval', 'ns3::Time', is_const=False)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateConnection::m_txItemDelivered [variable]
<     cls.add_instance_attribute('m_txItemDelivered', 'uint32_t', is_const=False)
<     return
< 
< def register_Ns3TcpRateOpsTcpRateSample_methods(root_module, cls):
<     cls.add_output_stream_operator()
<     cls.add_binary_comparison_operator('==')
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateSample::TcpRateSample() [constructor]
<     cls.add_constructor([])
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateSample::TcpRateSample(ns3::TcpRateOps::TcpRateSample const & arg0) [constructor]
<     cls.add_constructor([param('ns3::TcpRateOps::TcpRateSample const &', 'arg0')])
<     ## tcp-rate-ops.h (module 'internet'): bool ns3::TcpRateOps::TcpRateSample::IsValid() const [member function]
<     cls.add_method('IsValid', 
<                    'bool', 
<                    [], 
<                    is_const=True)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateSample::m_ackElapsed [variable]
<     cls.add_instance_attribute('m_ackElapsed', 'ns3::Time', is_const=False)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateSample::m_ackedSacked [variable]
<     cls.add_instance_attribute('m_ackedSacked', 'uint32_t', is_const=False)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateSample::m_bytesLoss [variable]
<     cls.add_instance_attribute('m_bytesLoss', 'uint32_t', is_const=False)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateSample::m_delivered [variable]
<     cls.add_instance_attribute('m_delivered', 'int32_t', is_const=False)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateSample::m_deliveryRate [variable]
<     cls.add_instance_attribute('m_deliveryRate', 'ns3::DataRate', is_const=False)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateSample::m_interval [variable]
<     cls.add_instance_attribute('m_interval', 'ns3::Time', is_const=False)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateSample::m_isAppLimited [variable]
<     cls.add_instance_attribute('m_isAppLimited', 'bool', is_const=False)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateSample::m_priorDelivered [variable]
<     cls.add_instance_attribute('m_priorDelivered', 'uint32_t', is_const=False)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateSample::m_priorInFlight [variable]
<     cls.add_instance_attribute('m_priorInFlight', 'uint32_t', is_const=False)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateSample::m_priorTime [variable]
<     cls.add_instance_attribute('m_priorTime', 'ns3::Time', is_const=False)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateSample::m_sendElapsed [variable]
<     cls.add_instance_attribute('m_sendElapsed', 'ns3::Time', is_const=False)
<     return
< 
11074c10555
<     ## tcp-recovery-ops.h (module 'internet'): void ns3::TcpRecoveryOps::DoRecovery(ns3::Ptr<ns3::TcpSocketState> tcb, uint32_t deliveredBytes) [member function]
---
>     ## tcp-recovery-ops.h (module 'internet'): void ns3::TcpRecoveryOps::DoRecovery(ns3::Ptr<ns3::TcpSocketState> tcb, uint32_t lastAckedBytes, uint32_t lastSackedBytes) [member function]
11077,11079c10558,10560
<                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb'), param('uint32_t', 'deliveredBytes')], 
<                    is_virtual=True, is_pure_virtual=True)
<     ## tcp-recovery-ops.h (module 'internet'): void ns3::TcpRecoveryOps::EnterRecovery(ns3::Ptr<ns3::TcpSocketState> tcb, uint32_t dupAckCount, uint32_t unAckDataCount, uint32_t deliveredBytes) [member function]
---
>                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb'), param('uint32_t', 'lastAckedBytes'), param('uint32_t', 'lastSackedBytes')], 
>                    is_pure_virtual=True, is_virtual=True)
>     ## tcp-recovery-ops.h (module 'internet'): void ns3::TcpRecoveryOps::EnterRecovery(ns3::Ptr<ns3::TcpSocketState> tcb, uint32_t dupAckCount, uint32_t unAckDataCount, uint32_t lastSackedBytes) [member function]
11082,11083c10563,10564
<                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb'), param('uint32_t', 'dupAckCount'), param('uint32_t', 'unAckDataCount'), param('uint32_t', 'deliveredBytes')], 
<                    is_virtual=True, is_pure_virtual=True)
---
>                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb'), param('uint32_t', 'dupAckCount'), param('uint32_t', 'unAckDataCount'), param('uint32_t', 'lastSackedBytes')], 
>                    is_pure_virtual=True, is_virtual=True)
11088c10569
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
11093c10574
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
11098c10579
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
11220c10701
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
11239c10720
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
11244c10725
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
11249c10730
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
11254c10735
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
11259c10740
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
11264c10745
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
11269c10750
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
11274c10755
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
11279c10760
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
11284c10765
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
11289c10770
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
11294c10775
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
11299c10780
<                    is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
11304c10785
<                    is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
11309c10790
<                    is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
11314c10795
<                    is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
11319c10800
<                    is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
11324c10805
<                    is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
11329c10810
<                    is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
11334c10815
<                    is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
11339c10820
<                    is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
11344c10825
<                    is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
11349c10830
<                    is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
11354c10835
<                    is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
11497,11501d10977
<     ## tcp-socket-base.h (module 'internet'): uint8_t ns3::TcpSocketBase::MarkEcnCodePoint(uint8_t const tos, ns3::TcpSocketState::EcnCodePoint_t const codePoint) const [member function]
<     cls.add_method('MarkEcnCodePoint', 
<                    'uint8_t', 
<                    [param('uint8_t const', 'tos'), param('ns3::TcpSocketState::EcnCodePoint_t const', 'codePoint')], 
<                    is_const=True)
11539a11016,11019
>     ## tcp-socket-base.h (module 'internet'): void ns3::TcpSocketBase::SetEcn(ns3::TcpSocketBase::EcnMode_t ecnMode) [member function]
>     cls.add_method('SetEcn', 
>                    'void', 
>                    [param('ns3::TcpSocketBase::EcnMode_t', 'ecnMode')])
11567,11570d11046
<     ## tcp-socket-base.h (module 'internet'): void ns3::TcpSocketBase::SetUseEcn(ns3::TcpSocketState::UseEcn_t useEcn) [member function]
<     cls.add_method('SetUseEcn', 
<                    'void', 
<                    [param('ns3::TcpSocketState::UseEcn_t', 'useEcn')])
11669c11145
<                    is_const=True, is_virtual=True, visibility='protected')
---
>                    is_const=True, visibility='protected', is_virtual=True)
11674c11150
<                    is_const=True, is_virtual=True, visibility='protected')
---
>                    is_const=True, visibility='protected', is_virtual=True)
11679c11155
<                    is_const=True, is_virtual=True, visibility='protected')
---
>                    is_const=True, visibility='protected', is_virtual=True)
11699c11175
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
11714c11190
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
11739c11215
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
11750c11226
<     ## tcp-socket-base.h (module 'internet'): void ns3::TcpSocketBase::DupAck(uint32_t currentDelivered) [member function]
---
>     ## tcp-socket-base.h (module 'internet'): void ns3::TcpSocketBase::DupAck() [member function]
11753c11229
<                    [param('uint32_t', 'currentDelivered')], 
---
>                    [], 
11755c11231
<     ## tcp-socket-base.h (module 'internet'): void ns3::TcpSocketBase::EnterRecovery(uint32_t currentDelivered) [member function]
---
>     ## tcp-socket-base.h (module 'internet'): void ns3::TcpSocketBase::EnterRecovery() [member function]
11758c11234
<                    [param('uint32_t', 'currentDelivered')], 
---
>                    [], 
11764c11240
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
11769c11245
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
11794c11270
<                    is_const=True, is_virtual=True, visibility='protected')
---
>                    is_const=True, visibility='protected', is_virtual=True)
11799c11275
<                    is_const=True, is_virtual=True, visibility='protected')
---
>                    is_const=True, visibility='protected', is_virtual=True)
11804c11280
<                    is_const=True, is_virtual=True, visibility='protected')
---
>                    is_const=True, visibility='protected', is_virtual=True)
11809c11285
<                    is_const=True, is_virtual=True, visibility='protected')
---
>                    is_const=True, visibility='protected', is_virtual=True)
11814c11290
<                    is_const=True, is_virtual=True, visibility='protected')
---
>                    is_const=True, visibility='protected', is_virtual=True)
11819c11295
<                    is_const=True, is_virtual=True, visibility='protected')
---
>                    is_const=True, visibility='protected', is_virtual=True)
11824c11300
<                    is_const=True, is_virtual=True, visibility='protected')
---
>                    is_const=True, visibility='protected', is_virtual=True)
11829c11305
<                    is_const=True, is_virtual=True, visibility='protected')
---
>                    is_const=True, visibility='protected', is_virtual=True)
11834c11310
<                    is_const=True, is_virtual=True, visibility='protected')
---
>                    is_const=True, visibility='protected', is_virtual=True)
11839c11315
<                    is_const=True, is_virtual=True, visibility='protected')
---
>                    is_const=True, visibility='protected', is_virtual=True)
11844c11320
<                    is_const=True, is_virtual=True, visibility='protected')
---
>                    is_const=True, visibility='protected', is_virtual=True)
11849c11325
<                    is_const=True, is_virtual=True, visibility='protected')
---
>                    is_const=True, visibility='protected', is_virtual=True)
11854c11330
<                    is_const=True, is_virtual=True, visibility='protected')
---
>                    is_const=True, visibility='protected', is_virtual=True)
11869c11345
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
11874c11350
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
11894,11895c11370,11371
<                    is_virtual=True, visibility='protected')
<     ## tcp-socket-base.h (module 'internet'): void ns3::TcpSocketBase::ProcessAck(ns3::SequenceNumber32 const & ackNumber, bool scoreboardUpdated, uint32_t currentDelivered, ns3::SequenceNumber32 const & oldHeadSequence) [member function]
---
>                    visibility='protected', is_virtual=True)
>     ## tcp-socket-base.h (module 'internet'): void ns3::TcpSocketBase::ProcessAck(ns3::SequenceNumber32 const & ackNumber, bool scoreboardUpdated, ns3::SequenceNumber32 const & oldHeadSequence) [member function]
11898,11899c11374,11375
<                    [param('ns3::SequenceNumber32 const &', 'ackNumber'), param('bool', 'scoreboardUpdated'), param('uint32_t', 'currentDelivered'), param('ns3::SequenceNumber32 const &', 'oldHeadSequence')], 
<                    is_virtual=True, visibility='protected')
---
>                    [param('ns3::SequenceNumber32 const &', 'ackNumber'), param('bool', 'scoreboardUpdated'), param('ns3::SequenceNumber32 const &', 'oldHeadSequence')], 
>                    visibility='protected', is_virtual=True)
11920c11396
<     ## tcp-socket-base.h (module 'internet'): uint32_t ns3::TcpSocketBase::ProcessOptionSack(ns3::Ptr<const ns3::TcpOption> const option) [member function]
---
>     ## tcp-socket-base.h (module 'internet'): bool ns3::TcpSocketBase::ProcessOptionSack(ns3::Ptr<const ns3::TcpOption> const option) [member function]
11922c11398
<                    'uint32_t', 
---
>                    'bool', 
11959,11960c11435,11436
<                    is_virtual=True, visibility='protected')
<     ## tcp-socket-base.h (module 'internet'): void ns3::TcpSocketBase::ReadOptions(ns3::TcpHeader const & tcpHeader, uint32_t * bytesSacked) [member function]
---
>                    visibility='protected', is_virtual=True)
>     ## tcp-socket-base.h (module 'internet'): void ns3::TcpSocketBase::ReadOptions(ns3::TcpHeader const & tcpHeader, bool & scoreboardUpdated) [member function]
11963c11439
<                    [param('ns3::TcpHeader const &', 'tcpHeader'), param('uint32_t *', 'bytesSacked')], 
---
>                    [param('ns3::TcpHeader const &', 'tcpHeader'), param('bool &', 'scoreboardUpdated')], 
11969c11445
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
11974c11450
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
11984c11460
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
11989c11465
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
12004c11480
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
12009c11485
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
12014c11490
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
12019c11495
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
12024c11500
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
12029c11505
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
12034c11510
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
12039c11515
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
12044c11520
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
12049c11525
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
12054c11530
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
12059c11535
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
12064c11540
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
12089c11565
<                    is_const=True, is_virtual=True, visibility='protected')
---
>                    is_const=True, visibility='protected', is_virtual=True)
12094c11570
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
12104c11580
<                    is_const=True, is_virtual=True, visibility='protected')
---
>                    is_const=True, visibility='protected', is_virtual=True)
12153,12154d11628
<     ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::m_ecnMode [variable]
<     cls.add_instance_attribute('m_ecnMode', 'ns3::TcpSocketState::EcnMode_t', is_const=False)
12157,12158d11630
<     ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::m_ectCodePoint [variable]
<     cls.add_instance_attribute('m_ectCodePoint', 'ns3::TcpSocketState::EcnCodePoint_t', is_const=False)
12181,12182d11652
<     ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::m_rxBuffer [variable]
<     cls.add_instance_attribute('m_rxBuffer', 'ns3::Ptr< ns3::TcpRxBuffer >', is_const=False)
12185,12186d11654
<     ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::m_sendEmptyPacketCallback [variable]
<     cls.add_instance_attribute('m_sendEmptyPacketCallback', 'ns3::Callback< void, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >', is_const=False)
12189,12190d11656
<     ## tcp-socket-state.h (module 'internet'): ns3::TcpSocketState::m_useEcn [variable]
<     cls.add_instance_attribute('m_useEcn', 'ns3::TcpSocketState::UseEcn_t', is_const=False)
12217c11683
<     ## tcp-tx-buffer.h (module 'internet'): ns3::TcpTxItem * ns3::TcpTxBuffer::CopyFromSequence(uint32_t numBytes, ns3::SequenceNumber32 const & seq) [member function]
---
>     ## tcp-tx-buffer.h (module 'internet'): ns3::Ptr<ns3::Packet> ns3::TcpTxBuffer::CopyFromSequence(uint32_t numBytes, ns3::SequenceNumber32 const & seq) [member function]
12219c11685
<                    'ns3::TcpTxItem *', 
---
>                    'ns3::Ptr< ns3::Packet >', 
12225c11691
<     ## tcp-tx-buffer.h (module 'internet'): void ns3::TcpTxBuffer::DiscardUpTo(ns3::SequenceNumber32 const & seq, ns3::Callback<void, ns3::TcpTxItem *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & beforeDelCb=ns3::TcpTxBuffer::m_nullCb) [member function]
---
>     ## tcp-tx-buffer.h (module 'internet'): void ns3::TcpTxBuffer::DiscardUpTo(ns3::SequenceNumber32 const & seq) [member function]
12228c11694
<                    [param('ns3::SequenceNumber32 const &', 'seq'), param('ns3::Callback< void, ns3::TcpTxItem *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'beforeDelCb', default_value='ns3::TcpTxBuffer::m_nullCb')])
---
>                    [param('ns3::SequenceNumber32 const &', 'seq')])
12325c11791
<     ## tcp-tx-buffer.h (module 'internet'): uint32_t ns3::TcpTxBuffer::Update(ns3::TcpOptionSack::SackList const & list, ns3::Callback<void, ns3::TcpTxItem *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & sackedCb=ns3::TcpTxBuffer::m_nullCb) [member function]
---
>     ## tcp-tx-buffer.h (module 'internet'): bool ns3::TcpTxBuffer::Update(ns3::TcpOptionSack::SackList const & list) [member function]
12327,12328c11793,11794
<                    'uint32_t', 
<                    [param('ns3::TcpOptionSack::SackList const &', 'list'), param('ns3::Callback< void, ns3::TcpTxItem *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'sackedCb', default_value='ns3::TcpTxBuffer::m_nullCb')])
---
>                    'bool', 
>                    [param('ns3::TcpOptionSack::SackList const &', 'list')])
12491,12499c11957,11962
<     cls.add_binary_numeric_operator('+', root_module['ns3::Time'], root_module['ns3::Time'], param('ns3::Time const &', 'right'))
<     cls.add_binary_numeric_operator('-', root_module['ns3::Time'], root_module['ns3::Time'], param('ns3::Time const &', 'right'))
<     cls.add_binary_numeric_operator('*', root_module['ns3::Time'], root_module['ns3::Time'], param('int64_t const &', 'right'))
<     cls.add_binary_numeric_operator('*', root_module['ns3::Time'], root_module['ns3::Time'], param('ns3::int64x64_t const &', 'right'))
<     cls.add_binary_numeric_operator('/', root_module['ns3::int64x64_t'], root_module['ns3::Time'], param('ns3::Time const &', 'right'))
<     cls.add_binary_numeric_operator('/', root_module['ns3::Time'], root_module['ns3::Time'], param('int64_t const &', 'right'))
<     cls.add_binary_numeric_operator('/', root_module['ns3::Time'], root_module['ns3::Time'], param('ns3::int64x64_t const &', 'right'))
<     cls.add_inplace_numeric_operator('+=', param('ns3::Time const &', 'right'))
<     cls.add_inplace_numeric_operator('-=', param('ns3::Time const &', 'right'))
---
>     cls.add_binary_numeric_operator('+', root_module['ns3::Time'], root_module['ns3::Time'], param('ns3::Time const &', u'right'))
>     cls.add_binary_numeric_operator('-', root_module['ns3::Time'], root_module['ns3::Time'], param('ns3::Time const &', u'right'))
>     cls.add_binary_numeric_operator('*', root_module['ns3::Time'], root_module['ns3::Time'], param('int64_t const &', u'right'))
>     cls.add_binary_numeric_operator('/', root_module['ns3::Time'], root_module['ns3::Time'], param('int64_t const &', u'right'))
>     cls.add_inplace_numeric_operator('+=', param('ns3::Time const &', u'right'))
>     cls.add_inplace_numeric_operator('-=', param('ns3::Time const &', u'right'))
12694c12157
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
12699c12162
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
12704c12167
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
12709c12172
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
12758c12221
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
12768c12231
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
12778c12241
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
12783c12246
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
12931c12394
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
12936c12399
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
12941c12404
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
12946c12409
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
12951c12414
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
12956c12419
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
12961c12424
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
12966c12429
<                    is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
12971c12434
<                    is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
12976c12439
<                    is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
12981c12444
<                    is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
12986c12449
<                    is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
13238c12701
<                    is_virtual=True, visibility='private')
---
>                    visibility='private', is_virtual=True)
13321a12785,12789
>     ## arp-cache.h (module 'internet'): void ns3::ArpCache::Entry::SetMacAddresss(ns3::Address macAddress) [member function]
>     cls.add_method('SetMacAddresss', 
>                    'void', 
>                    [param('ns3::Address', 'macAddress')], 
>                    deprecated=True)
13455c12923
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
13460c12928
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
13472c12940
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
13477c12945
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
13482c12950
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
13487c12955
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
13499c12967
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
13504c12972
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
13509c12977
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
13519c12987
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
13524c12992
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
13529c12997
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
13541c13009
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
13546c13014
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
13551c13019
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
13611c13079
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
13616c13084
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
13626,13631c13094
<                    is_static=True, template_parameters=['ns3::ObjectBase*'], visibility='protected')
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True, template_parameters=['void'], visibility='protected')
---
>                    is_static=True, visibility='protected', template_parameters=[u'ns3::ObjectBase*'])
13636c13099
<                    is_static=True, template_parameters=['ns3::SequenceNumber<unsigned int', ' int> '], visibility='protected')
---
>                    is_static=True, visibility='protected', template_parameters=[u'void'])
13641c13104
<                    is_static=True, template_parameters=['unsigned int'], visibility='protected')
---
>                    is_static=True, visibility='protected', template_parameters=[u'unsigned int'])
13646c13109
<                    is_static=True, template_parameters=['ns3::TcpSocketState::TcpCongState_t'], visibility='protected')
---
>                    is_static=True, visibility='protected', template_parameters=[u'ns3::TcpSocketState::TcpCongState_t'])
13651c13114
<                    is_static=True, template_parameters=['ns3::TcpSocketState::EcnState_t'], visibility='protected')
---
>                    is_static=True, visibility='protected', template_parameters=[u'ns3::TcpSocketState::EcnState_t'])
13656c13119
<                    is_static=True, template_parameters=['ns3::Time'], visibility='protected')
---
>                    is_static=True, visibility='protected', template_parameters=[u'ns3::SequenceNumber<unsigned int', u' int> '])
13661c13124
<                    is_static=True, template_parameters=['double'], visibility='protected')
---
>                    is_static=True, visibility='protected', template_parameters=[u'ns3::Time'])
13666c13129
<                    is_static=True, template_parameters=['ns3::TcpSocket::TcpStates_t'], visibility='protected')
---
>                    is_static=True, visibility='protected', template_parameters=[u'double'])
13671c13134
<                    is_static=True, template_parameters=['ns3::Ptr<ns3::Packet const> '], visibility='protected')
---
>                    is_static=True, visibility='protected', template_parameters=[u'ns3::TcpSocket::TcpStates_t'])
13676c13139
<                    is_static=True, template_parameters=['ns3::Ptr<ns3::NetDevice> '], visibility='protected')
---
>                    is_static=True, visibility='protected', template_parameters=[u'ns3::Ptr<ns3::Packet const> '])
13681c13144
<                    is_static=True, template_parameters=['unsigned short'], visibility='protected')
---
>                    is_static=True, visibility='protected', template_parameters=[u'ns3::Ptr<ns3::NetDevice> '])
13686c13149
<                    is_static=True, template_parameters=['ns3::Address const&'], visibility='protected')
---
>                    is_static=True, visibility='protected', template_parameters=[u'unsigned short'])
13691c13154
<                    is_static=True, template_parameters=['ns3::NetDevice::PacketType'], visibility='protected')
---
>                    is_static=True, visibility='protected', template_parameters=[u'ns3::Address const&'])
13696c13159
<                    is_static=True, template_parameters=['ns3::Ptr<ns3::Packet> '], visibility='protected')
---
>                    is_static=True, visibility='protected', template_parameters=[u'ns3::NetDevice::PacketType'])
13701c13164
<                    is_static=True, template_parameters=['ns3::Ipv4Address'], visibility='protected')
---
>                    is_static=True, visibility='protected', template_parameters=[u'ns3::Ptr<ns3::Packet> '])
13706c13169
<                    is_static=True, template_parameters=['unsigned char'], visibility='protected')
---
>                    is_static=True, visibility='protected', template_parameters=[u'ns3::Ipv4Address'])
13711c13174
<                    is_static=True, template_parameters=['ns3::Ptr<ns3::Ipv4Route> '], visibility='protected')
---
>                    is_static=True, visibility='protected', template_parameters=[u'unsigned char'])
13716c13179
<                    is_static=True, template_parameters=['ns3::Ipv6Address'], visibility='protected')
---
>                    is_static=True, visibility='protected', template_parameters=[u'ns3::Ptr<ns3::Ipv4Route> '])
13721c13184
<                    is_static=True, template_parameters=['ns3::Ptr<ns3::Ipv6Route> '], visibility='protected')
---
>                    is_static=True, visibility='protected', template_parameters=[u'ns3::Ipv6Address'])
13726c13189
<                    is_static=True, template_parameters=['ns3::Ptr<ns3::Socket> '], visibility='protected')
---
>                    is_static=True, visibility='protected', template_parameters=[u'ns3::Ptr<ns3::Ipv6Route> '])
13731c13194
<                    is_static=True, template_parameters=['bool'], visibility='protected')
---
>                    is_static=True, visibility='protected', template_parameters=[u'ns3::Ptr<ns3::Socket> '])
13736c13199
<                    is_static=True, template_parameters=['ns3::Ipv4Header const&'], visibility='protected')
---
>                    is_static=True, visibility='protected', template_parameters=[u'bool'])
13741c13204
<                    is_static=True, template_parameters=['ns3::Ptr<ns3::Ipv4> '], visibility='protected')
---
>                    is_static=True, visibility='protected', template_parameters=[u'ns3::Ipv4Header const&'])
13746c13209
<                    is_static=True, template_parameters=['ns3::Ipv4L3Protocol::DropReason'], visibility='protected')
---
>                    is_static=True, visibility='protected', template_parameters=[u'ns3::Ptr<ns3::Ipv4> '])
13751c13214
<                    is_static=True, template_parameters=['ns3::Ptr<ns3::Ipv6> '], visibility='protected')
---
>                    is_static=True, visibility='protected', template_parameters=[u'ns3::Ipv4L3Protocol::DropReason'])
13756c13219
<                    is_static=True, template_parameters=['ns3::Ipv6Header const&'], visibility='protected')
---
>                    is_static=True, visibility='protected', template_parameters=[u'ns3::Ptr<ns3::Ipv6> '])
13761c13224
<                    is_static=True, template_parameters=['ns3::Ipv6L3Protocol::DropReason'], visibility='protected')
---
>                    is_static=True, visibility='protected', template_parameters=[u'ns3::Ipv6Header const&'])
13766c13229
<                    is_static=True, template_parameters=['ns3::Ipv4Header'], visibility='protected')
---
>                    is_static=True, visibility='protected', template_parameters=[u'ns3::Ipv6L3Protocol::DropReason'])
13771c13234
<                    is_static=True, template_parameters=['ns3::Ptr<ns3::Ipv4Interface> '], visibility='protected')
---
>                    is_static=True, visibility='protected', template_parameters=[u'ns3::TcpHeader const&'])
13776,13801c13239
<                    is_static=True, template_parameters=['ns3::Ipv6Header'], visibility='protected')
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True, template_parameters=['ns3::Ptr<ns3::Ipv6Interface> '], visibility='protected')
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True, template_parameters=['ns3::TcpRateOps::TcpRateConnection const&'], visibility='protected')
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True, template_parameters=['ns3::TcpRateOps::TcpRateSample const&'], visibility='protected')
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True, template_parameters=['ns3::TcpHeader const&'], visibility='protected')
<     ## callback.h (module 'core'): static std::string ns3::CallbackImplBase::GetCppTypeid() [member function]
<     cls.add_method('GetCppTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True, template_parameters=['ns3::Ptr<ns3::TcpSocketBase const> '], visibility='protected')
---
>                    is_static=True, visibility='protected', template_parameters=[u'ns3::Ptr<ns3::TcpSocketBase const> '])
13841c13279
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
13851c13289
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
14049c13487
<                    is_virtual=True, visibility='private')
---
>                    visibility='private', is_virtual=True)
14054c13492
<                    is_virtual=True, visibility='private')
---
>                    visibility='private', is_virtual=True)
14130c13568
<                    is_const=True, is_virtual=True, visibility='private')
---
>                    is_const=True, visibility='private', is_virtual=True)
14135c13573
<                    is_virtual=True, visibility='private')
---
>                    visibility='private', is_virtual=True)
14140c13578
<                    is_const=True, is_virtual=True, visibility='private')
---
>                    is_const=True, visibility='private', is_virtual=True)
14280c13718
<                    is_virtual=True, is_pure_virtual=True, visibility='protected')
---
>                    is_pure_virtual=True, visibility='protected', is_virtual=True)
14418c13856
<                    is_virtual=True, visibility='private')
---
>                    visibility='private', is_virtual=True)
14566c14004
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
14571c14009
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
14576c14014
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
14586c14024
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14591c14029
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14606c14044
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14611c14049
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14623c14061
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14628c14066
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14633c14071
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14638c14076
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14643c14081
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
14648c14086
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
14653c14091
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
14658c14096
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
14663c14101
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
14668c14106
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
14673c14111
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
14678c14116
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
14683c14121
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14688c14126
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
14693c14131
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
14698c14136
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
14708c14146
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14713c14151
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14718c14156
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
14723c14161
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
14728c14166
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
14733c14171
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14738c14176
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14743c14181
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14748c14186
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14753c14191
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14758c14196
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14763c14201
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14768c14206
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14773c14211
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14778c14216
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14783c14221
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14788c14226
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14793c14231
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
14800c14238
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
14805c14243
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
14810c14248
<                    is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
14815c14253
<                    is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
14958c14396
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
15167c14605
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
15172c14610
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
15177c14615
<                    is_const=True, is_virtual=True, visibility='private')
---
>                    is_const=True, visibility='private', is_virtual=True)
15182c14620
<                    is_const=True, is_virtual=True, visibility='private')
---
>                    is_const=True, visibility='private', is_virtual=True)
15187c14625
<                    is_virtual=True, visibility='private')
---
>                    visibility='private', is_virtual=True)
15192c14630
<                    is_virtual=True, visibility='private')
---
>                    visibility='private', is_virtual=True)
15296c14734
<                    is_const=True, is_virtual=True, visibility='private')
---
>                    is_const=True, visibility='private', is_virtual=True)
15301c14739
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
15447c14885
<                    is_virtual=True, visibility='private')
---
>                    visibility='private', is_virtual=True)
15508c14946
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15513c14951
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15518c14956
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15523c14961
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15528c14966
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
15533c14971
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15538c14976
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15543c14981
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15669c15107
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
15681c15119
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15686c15124
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15691c15129
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
15696c15134
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
15701c15139
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
15706c15144
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
15711c15149
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
15716c15154
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
15721c15159
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
15726c15164
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
15731c15169
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15736c15174
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
15741c15179
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
15746c15184
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
15756c15194
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15761c15199
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15766c15204
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
15771c15209
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
15776c15214
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15781c15219
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15786c15224
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15791c15229
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15796c15234
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15801c15239
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15806c15244
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15811c15249
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15816c15254
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15821c15259
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15826c15264
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15831c15269
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15836c15274
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15841c15279
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
15848c15286
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
15853c15291
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
15858c15296
<                    is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
15863c15301
<                    is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, visibility='private', is_virtual=True)
15919c15357
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
15934c15372
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
16037c15475
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
16192c15630
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
16401c15839
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
16558c15996
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
16808c16246
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
16813c16251
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
16818c16256
<                    is_virtual=True, visibility='private')
---
>                    visibility='private', is_virtual=True)
16823c16261
<                    is_const=True, is_virtual=True, visibility='private')
---
>                    is_const=True, visibility='private', is_virtual=True)
16828c16266
<                    is_virtual=True, visibility='private')
---
>                    visibility='private', is_virtual=True)
16833c16271
<                    is_const=True, is_virtual=True, visibility='private')
---
>                    is_const=True, visibility='private', is_virtual=True)
16838c16276
<                    is_virtual=True, visibility='private')
---
>                    visibility='private', is_virtual=True)
16843c16281
<                    is_const=True, is_virtual=True, visibility='private')
---
>                    is_const=True, visibility='private', is_virtual=True)
16903c16341
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
16913c16351
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
17030c16468
<                    is_const=True, is_virtual=True, visibility='private')
---
>                    is_const=True, visibility='private', is_virtual=True)
17035c16473
<                    is_const=True, is_virtual=True, is_pure_virtual=True, visibility='private')
---
>                    is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)
17182c16620
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
17187c16625
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
17192c16630
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
17197c16635
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
17202c16640
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
17207c16645
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
17212c16650
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
17217c16655
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
17222c16660
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
17227c16665
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
17375c16813
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
17516c16954
<                    is_virtual=True, visibility='private')
---
>                    visibility='private', is_virtual=True)
17672c17110
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
17677c17115
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
17682c17120
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
17687c17125
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
17692c17130
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
17697c17135
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
17702c17140
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
17707c17145
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
17712c17150
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
17722c17160
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
17727c17165
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
17732c17170
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
17737c17175
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
17742c17180
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
17747c17185
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
17752c17190
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
17757c17195
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
17762c17200
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
17767c17205
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
17772c17210
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
17777c17215
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
17782c17220
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
17787c17225
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
17792c17230
<                    is_const=True, is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_const=True, is_virtual=True)
17919c17357
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
17924c17362
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
18046,18050d17483
<     ## packet.h (module 'network'): void ns3::Packet::AddByteTag(ns3::Tag const & tag, uint32_t start, uint32_t end) const [member function]
<     cls.add_method('AddByteTag', 
<                    'void', 
<                    [param('ns3::Tag const &', 'tag'), param('uint32_t', 'start'), param('uint32_t', 'end')], 
<                    is_const=True)
18236c17669
<                    is_const=True, deprecated=True)
---
>                    deprecated=True, is_const=True)
18281c17714
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
18286c17719
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
18405c17838
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
18410c17843
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
18503c17936
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
18508c17941
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
18541,18545d17973
<     ## tcp-bic.h (module 'internet'): void ns3::TcpBic::ReduceCwnd(ns3::Ptr<ns3::TcpSocketState> tcb) [member function]
<     cls.add_method('ReduceCwnd', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb')], 
<                    is_virtual=True)
18550c17978
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
18558c17986
<     ## tcp-recovery-ops.h (module 'internet'): void ns3::TcpClassicRecovery::DoRecovery(ns3::Ptr<ns3::TcpSocketState> tcb, uint32_t deliveredBytes) [member function]
---
>     ## tcp-recovery-ops.h (module 'internet'): void ns3::TcpClassicRecovery::DoRecovery(ns3::Ptr<ns3::TcpSocketState> tcb, uint32_t lastAckedBytes, uint32_t lastSackedBytes) [member function]
18561c17989
<                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb'), param('uint32_t', 'deliveredBytes')], 
---
>                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb'), param('uint32_t', 'lastAckedBytes'), param('uint32_t', 'lastSackedBytes')], 
18563c17991
<     ## tcp-recovery-ops.h (module 'internet'): void ns3::TcpClassicRecovery::EnterRecovery(ns3::Ptr<ns3::TcpSocketState> tcb, uint32_t dupAckCount, uint32_t unAckDataCount, uint32_t deliveredBytes) [member function]
---
>     ## tcp-recovery-ops.h (module 'internet'): void ns3::TcpClassicRecovery::EnterRecovery(ns3::Ptr<ns3::TcpSocketState> tcb, uint32_t dupAckCount, uint32_t unAckDataCount, uint32_t lastSackedBytes) [member function]
18566c17994
<                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb'), param('uint32_t', 'dupAckCount'), param('uint32_t', 'unAckDataCount'), param('uint32_t', 'deliveredBytes')], 
---
>                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb'), param('uint32_t', 'dupAckCount'), param('uint32_t', 'unAckDataCount'), param('uint32_t', 'lastSackedBytes')], 
18590,18631d18017
< def register_Ns3TcpDctcp_methods(root_module, cls):
<     ## tcp-dctcp.h (module 'internet'): ns3::TcpDctcp::TcpDctcp() [constructor]
<     cls.add_constructor([])
<     ## tcp-dctcp.h (module 'internet'): ns3::TcpDctcp::TcpDctcp(ns3::TcpDctcp const & sock) [constructor]
<     cls.add_constructor([param('ns3::TcpDctcp const &', 'sock')])
<     ## tcp-dctcp.h (module 'internet'): void ns3::TcpDctcp::CwndEvent(ns3::Ptr<ns3::TcpSocketState> tcb, ns3::TcpSocketState::TcpCAEvent_t const event) [member function]
<     cls.add_method('CwndEvent', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb'), param('ns3::TcpSocketState::TcpCAEvent_t const', 'event')], 
<                    is_virtual=True)
<     ## tcp-dctcp.h (module 'internet'): ns3::Ptr<ns3::TcpCongestionOps> ns3::TcpDctcp::Fork() [member function]
<     cls.add_method('Fork', 
<                    'ns3::Ptr< ns3::TcpCongestionOps >', 
<                    [], 
<                    is_virtual=True)
<     ## tcp-dctcp.h (module 'internet'): std::string ns3::TcpDctcp::GetName() const [member function]
<     cls.add_method('GetName', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## tcp-dctcp.h (module 'internet'): static ns3::TypeId ns3::TcpDctcp::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## tcp-dctcp.h (module 'internet'): void ns3::TcpDctcp::Init(ns3::Ptr<ns3::TcpSocketState> tcb) [member function]
<     cls.add_method('Init', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb')], 
<                    is_virtual=True)
<     ## tcp-dctcp.h (module 'internet'): void ns3::TcpDctcp::PktsAcked(ns3::Ptr<ns3::TcpSocketState> tcb, uint32_t segmentsAcked, ns3::Time const & rtt) [member function]
<     cls.add_method('PktsAcked', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb'), param('uint32_t', 'segmentsAcked'), param('ns3::Time const &', 'rtt')], 
<                    is_virtual=True)
<     ## tcp-dctcp.h (module 'internet'): void ns3::TcpDctcp::ReduceCwnd(ns3::Ptr<ns3::TcpSocketState> tcb) [member function]
<     cls.add_method('ReduceCwnd', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb')], 
<                    is_virtual=True)
<     return
< 
18671c18057
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
18708c18094
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
18740c18126
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
18745c18131
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
18926c18312
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
18931c18317
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
18982c18368
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
19014c18400
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
19022c18408
<     ## tcp-prr-recovery.h (module 'internet'): void ns3::TcpPrrRecovery::DoRecovery(ns3::Ptr<ns3::TcpSocketState> tcb, uint32_t deliveredBytes) [member function]
---
>     ## tcp-prr-recovery.h (module 'internet'): void ns3::TcpPrrRecovery::DoRecovery(ns3::Ptr<ns3::TcpSocketState> tcb, uint32_t lastAckedBytes, uint32_t lastSackedBytes) [member function]
19025c18411
<                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb'), param('uint32_t', 'deliveredBytes')], 
---
>                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb'), param('uint32_t', 'lastAckedBytes'), param('uint32_t', 'lastSackedBytes')], 
19027c18413
<     ## tcp-prr-recovery.h (module 'internet'): void ns3::TcpPrrRecovery::EnterRecovery(ns3::Ptr<ns3::TcpSocketState> tcb, uint32_t dupAckCount, uint32_t unAckDataCount, uint32_t deliveredBytes) [member function]
---
>     ## tcp-prr-recovery.h (module 'internet'): void ns3::TcpPrrRecovery::EnterRecovery(ns3::Ptr<ns3::TcpSocketState> tcb, uint32_t dupAckCount, uint32_t unAckDataCount, uint32_t lastSackedBytes) [member function]
19030c18416
<                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb'), param('uint32_t', 'dupAckCount'), param('uint32_t', 'unAckDataCount'), param('uint32_t', 'deliveredBytes')], 
---
>                    [param('ns3::Ptr< ns3::TcpSocketState >', 'tcb'), param('uint32_t', 'dupAckCount'), param('uint32_t', 'unAckDataCount'), param('uint32_t', 'lastSackedBytes')], 
19059,19095d18444
< def register_Ns3TcpRateLinux_methods(root_module, cls):
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateLinux::TcpRateLinux() [constructor]
<     cls.add_constructor([])
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateLinux::TcpRateLinux(ns3::TcpRateLinux const & arg0) [constructor]
<     cls.add_constructor([param('ns3::TcpRateLinux const &', 'arg0')])
<     ## tcp-rate-ops.h (module 'internet'): void ns3::TcpRateLinux::CalculateAppLimited(uint32_t cWnd, uint32_t in_flight, uint32_t segmentSize, ns3::SequenceNumber32 const & tailSeq, ns3::SequenceNumber32 const & nextTx, uint32_t const lostOut, uint32_t const retransOut) [member function]
<     cls.add_method('CalculateAppLimited', 
<                    'void', 
<                    [param('uint32_t', 'cWnd'), param('uint32_t', 'in_flight'), param('uint32_t', 'segmentSize'), param('ns3::SequenceNumber32 const &', 'tailSeq'), param('ns3::SequenceNumber32 const &', 'nextTx'), param('uint32_t const', 'lostOut'), param('uint32_t const', 'retransOut')], 
<                    is_virtual=True)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateSample const & ns3::TcpRateLinux::GenerateSample(uint32_t delivered, uint32_t lost, bool is_sack_reneg, uint32_t priorInFlight, ns3::Time const & minRtt) [member function]
<     cls.add_method('GenerateSample', 
<                    'ns3::TcpRateOps::TcpRateSample const &', 
<                    [param('uint32_t', 'delivered'), param('uint32_t', 'lost'), param('bool', 'is_sack_reneg'), param('uint32_t', 'priorInFlight'), param('ns3::Time const &', 'minRtt')], 
<                    is_virtual=True)
<     ## tcp-rate-ops.h (module 'internet'): ns3::TcpRateOps::TcpRateConnection const & ns3::TcpRateLinux::GetConnectionRate() [member function]
<     cls.add_method('GetConnectionRate', 
<                    'ns3::TcpRateOps::TcpRateConnection const &', 
<                    [], 
<                    is_virtual=True)
<     ## tcp-rate-ops.h (module 'internet'): static ns3::TypeId ns3::TcpRateLinux::GetTypeId() [member function]
<     cls.add_method('GetTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_static=True)
<     ## tcp-rate-ops.h (module 'internet'): void ns3::TcpRateLinux::SkbDelivered(ns3::TcpTxItem * skb) [member function]
<     cls.add_method('SkbDelivered', 
<                    'void', 
<                    [param('ns3::TcpTxItem *', 'skb')], 
<                    is_virtual=True)
<     ## tcp-rate-ops.h (module 'internet'): void ns3::TcpRateLinux::SkbSent(ns3::TcpTxItem * skb, bool isStartOfTransmission) [member function]
<     cls.add_method('SkbSent', 
<                    'void', 
<                    [param('ns3::TcpTxItem *', 'skb'), param('bool', 'isStartOfTransmission')], 
<                    is_virtual=True)
<     return
< 
19300c18649
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
19305c18654
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
19551c18900
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
19598c18947
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True, custom_name=u'__call__')
19620c18969
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True, custom_name=u'__call__')
19642c18991
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True, custom_name=u'__call__')
19664c19013
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True, custom_name=u'__call__')
19686c19035
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True, custom_name=u'__call__')
19708c19057
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True, custom_name=u'__call__')
19730c19079
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True, custom_name=u'__call__')
19752,19796c19101
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3CallbackImpl__Void_Const_ns3TcpRateOpsTcpRateConnection___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::TcpRateOps::TcpRateConnection &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
<     cls.add_constructor([])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::TcpRateOps::TcpRateConnection &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, const ns3::TcpRateOps::TcpRateConnection &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< void, ns3::TcpRateOps::TcpRateConnection const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, const ns3::TcpRateOps::TcpRateConnection &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True)
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, const ns3::TcpRateOps::TcpRateConnection &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): void ns3::CallbackImpl<void, const ns3::TcpRateOps::TcpRateConnection &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::TcpRateOps::TcpRateConnection const & arg0) [member operator]
<     cls.add_method('operator()', 
<                    'void', 
<                    [param('ns3::TcpRateOps::TcpRateConnection const &', 'arg0')], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3CallbackImpl__Void_Const_ns3TcpRateOpsTcpRateSample___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::TcpRateOps::TcpRateSample &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
<     cls.add_constructor([])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, const ns3::TcpRateOps::TcpRateSample &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, const ns3::TcpRateOps::TcpRateSample &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< void, ns3::TcpRateOps::TcpRateSample const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, const ns3::TcpRateOps::TcpRateSample &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True)
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, const ns3::TcpRateOps::TcpRateSample &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): void ns3::CallbackImpl<void, const ns3::TcpRateOps::TcpRateSample &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::TcpRateOps::TcpRateSample const & arg0) [member operator]
<     cls.add_method('operator()', 
<                    'void', 
<                    [param('ns3::TcpRateOps::TcpRateSample const &', 'arg0')], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True, custom_name=u'__call__')
19818,19862c19123
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3CallbackImpl__Void_Ns3Ipv4Address_Unsigned_char_Unsigned_char_Unsigned_char_Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ipv4Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
<     cls.add_constructor([])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ipv4Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ipv4Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ipv4Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ipv4Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True)
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ipv4Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ipv4Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ipv4Address arg0, unsigned char arg1, unsigned char arg2, unsigned char arg3, unsigned int arg4) [member operator]
<     cls.add_method('operator()', 
<                    'void', 
<                    [param('ns3::Ipv4Address', 'arg0'), param('unsigned char', 'arg1'), param('unsigned char', 'arg2'), param('unsigned char', 'arg3'), param('unsigned int', 'arg4')], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3CallbackImpl__Void_Ns3Ipv6Address_Unsigned_char_Unsigned_char_Unsigned_char_Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ipv6Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
<     cls.add_constructor([])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ipv6Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ipv6Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ipv6Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ipv6Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True)
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ipv6Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ipv6Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ipv6Address arg0, unsigned char arg1, unsigned char arg2, unsigned char arg3, unsigned int arg4) [member operator]
<     cls.add_method('operator()', 
<                    'void', 
<                    [param('ns3::Ipv6Address', 'arg0'), param('unsigned char', 'arg1'), param('unsigned char', 'arg2'), param('unsigned char', 'arg3'), param('unsigned int', 'arg4')], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True, custom_name=u'__call__')
19884c19145
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True, custom_name=u'__call__')
19906c19167
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True, custom_name=u'__call__')
19928c19189
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True, custom_name=u'__call__')
19950c19211
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True, custom_name=u'__call__')
19972c19233
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True, custom_name=u'__call__')
19994c19255
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True, custom_name=u'__call__')
20016,20038c19277
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Ns3Ipv4Header_Unsigned_short_Ns3Ptr__lt__ns3Ipv4Interface__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv4Header, unsigned short, ns3::Ptr<ns3::Ipv4Interface>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
<     cls.add_constructor([])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv4Header, unsigned short, ns3::Ptr<ns3::Ipv4Interface>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv4Header, unsigned short, ns3::Ptr<ns3::Ipv4Interface>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::Packet >, ns3::Ipv4Header, unsigned short, ns3::Ptr< ns3::Ipv4Interface >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv4Header, unsigned short, ns3::Ptr<ns3::Ipv4Interface>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True)
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv4Header, unsigned short, ns3::Ptr<ns3::Ipv4Interface>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv4Header, unsigned short, ns3::Ptr<ns3::Ipv4Interface>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<ns3::Packet> arg0, ns3::Ipv4Header arg1, short unsigned int arg2, ns3::Ptr<ns3::Ipv4Interface> arg3) [member operator]
<     cls.add_method('operator()', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Packet >', 'arg0'), param('ns3::Ipv4Header', 'arg1'), param('short unsigned int', 'arg2'), param('ns3::Ptr< ns3::Ipv4Interface >', 'arg3')], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True, custom_name=u'__call__')
20060,20082c19299
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Ns3Ipv6Header_Unsigned_short_Ns3Ptr__lt__ns3Ipv6Interface__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv6Header, unsigned short, ns3::Ptr<ns3::Ipv6Interface>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
<     cls.add_constructor([])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv6Header, unsigned short, ns3::Ptr<ns3::Ipv6Interface>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv6Header, unsigned short, ns3::Ptr<ns3::Ipv6Interface>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< void, ns3::Ptr< ns3::Packet >, ns3::Ipv6Header, unsigned short, ns3::Ptr< ns3::Ipv6Interface >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv6Header, unsigned short, ns3::Ptr<ns3::Ipv6Interface>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True)
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv6Header, unsigned short, ns3::Ptr<ns3::Ipv6Interface>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv6Header, unsigned short, ns3::Ptr<ns3::Ipv6Interface>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()(ns3::Ptr<ns3::Packet> arg0, ns3::Ipv6Header arg1, short unsigned int arg2, ns3::Ptr<ns3::Ipv6Interface> arg3) [member operator]
<     cls.add_method('operator()', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Packet >', 'arg0'), param('ns3::Ipv6Header', 'arg1'), param('short unsigned int', 'arg2'), param('ns3::Ptr< ns3::Ipv6Interface >', 'arg3')], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True, custom_name=u'__call__')
20104c19321
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True, custom_name=u'__call__')
20126c19343
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True, custom_name=u'__call__')
20148c19365
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True, custom_name=u'__call__')
20170c19387
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True, custom_name=u'__call__')
20192c19409
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True, custom_name=u'__call__')
20214c19431
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True, custom_name=u'__call__')
20236c19453
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True, custom_name=u'__call__')
20258,20280c19475
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
<     return
< 
< def register_Ns3CallbackImpl__Void_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_methods(root_module, cls):
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl() [constructor]
<     cls.add_constructor([])
<     ## callback.h (module 'core'): ns3::CallbackImpl<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::CallbackImpl(ns3::CallbackImpl<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> const & arg0) [constructor]
<     cls.add_constructor([param('ns3::CallbackImpl< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > const &', 'arg0')])
<     ## callback.h (module 'core'): static std::string ns3::CallbackImpl<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::DoGetTypeid() [member function]
<     cls.add_method('DoGetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_static=True)
<     ## callback.h (module 'core'): std::string ns3::CallbackImpl<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::GetTypeid() const [member function]
<     cls.add_method('GetTypeid', 
<                    'std::string', 
<                    [], 
<                    is_const=True, is_virtual=True)
<     ## callback.h (module 'core'): void ns3::CallbackImpl<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>::operator()() [member operator]
<     cls.add_method('operator()', 
<                    'void', 
<                    [], 
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True, custom_name=u'__call__')
20302c19497
<                    custom_name='__call__', is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True, custom_name=u'__call__')
20377c19572
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
20382c19577
<                    is_virtual=True, visibility='private')
---
>                    visibility='private', is_virtual=True)
20397,20398c19592
<                    [param('ns3::Ptr< ns3::NetDevice >', 'device'), param('ns3::Ptr< ns3::Ipv6Interface >', 'interface')], 
<                    is_virtual=True)
---
>                    [param('ns3::Ptr< ns3::NetDevice >', 'device'), param('ns3::Ptr< ns3::Ipv6Interface >', 'interface')])
20433,20437d19626
<     ## icmpv6-l4-protocol.h (module 'internet'): ns3::TypeId ns3::Icmpv6L4Protocol::GetInstanceTypeId() const [member function]
<     cls.add_method('GetInstanceTypeId', 
<                    'ns3::TypeId', 
<                    [], 
<                    is_const=True, is_virtual=True)
20448,20451d19636
<     ## icmpv6-l4-protocol.h (module 'internet'): ns3::Ptr<ns3::Node> ns3::Icmpv6L4Protocol::GetNode() [member function]
<     cls.add_method('GetNode', 
<                    'ns3::Ptr< ns3::Node >', 
<                    [])
20545,20546c19730
<                    [param('ns3::Ipv6Address', 'src'), param('ns3::Ipv6Address', 'dst'), param('ns3::Ipv6Address', 'target'), param('ns3::Address', 'hardwareAddress')], 
<                    is_virtual=True)
---
>                    [param('ns3::Ipv6Address', 'src'), param('ns3::Ipv6Address', 'dst'), param('ns3::Ipv6Address', 'target'), param('ns3::Address', 'hardwareAddress')])
20565,20575c19749
<                    is_virtual=True, visibility='protected')
<     ## icmpv6-l4-protocol.h (module 'internet'): ns3::Ptr<ns3::NdiscCache> ns3::Icmpv6L4Protocol::FindCache(ns3::Ptr<ns3::NetDevice> device) [member function]
<     cls.add_method('FindCache', 
<                    'ns3::Ptr< ns3::NdiscCache >', 
<                    [param('ns3::Ptr< ns3::NetDevice >', 'device')], 
<                    visibility='protected')
<     ## icmpv6-l4-protocol.h (module 'internet'): void ns3::Icmpv6L4Protocol::Forward(ns3::Ipv6Address source, ns3::Icmpv6Header icmp, uint32_t info, ns3::Ipv6Header ipHeader, uint8_t const * payload) [member function]
<     cls.add_method('Forward', 
<                    'void', 
<                    [param('ns3::Ipv6Address', 'source'), param('ns3::Icmpv6Header', 'icmp'), param('uint32_t', 'info'), param('ns3::Ipv6Header', 'ipHeader'), param('uint8_t const *', 'payload')], 
<                    visibility='protected')
---
>                    visibility='protected', is_virtual=True)
20580c19754
<                    is_const=True, is_virtual=True, visibility='protected')
---
>                    is_const=True, visibility='private', is_virtual=True)
20585,20640c19759
<                    is_const=True, is_virtual=True, visibility='protected')
<     ## icmpv6-l4-protocol.h (module 'internet'): void ns3::Icmpv6L4Protocol::HandleDestinationUnreachable(ns3::Ptr<ns3::Packet> p, ns3::Ipv6Address const & src, ns3::Ipv6Address const & dst, ns3::Ptr<ns3::Ipv6Interface> interface) [member function]
<     cls.add_method('HandleDestinationUnreachable', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Packet >', 'p'), param('ns3::Ipv6Address const &', 'src'), param('ns3::Ipv6Address const &', 'dst'), param('ns3::Ptr< ns3::Ipv6Interface >', 'interface')], 
<                    visibility='protected')
<     ## icmpv6-l4-protocol.h (module 'internet'): void ns3::Icmpv6L4Protocol::HandleEchoRequest(ns3::Ptr<ns3::Packet> p, ns3::Ipv6Address const & src, ns3::Ipv6Address const & dst, ns3::Ptr<ns3::Ipv6Interface> interface) [member function]
<     cls.add_method('HandleEchoRequest', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Packet >', 'p'), param('ns3::Ipv6Address const &', 'src'), param('ns3::Ipv6Address const &', 'dst'), param('ns3::Ptr< ns3::Ipv6Interface >', 'interface')], 
<                    visibility='protected')
<     ## icmpv6-l4-protocol.h (module 'internet'): void ns3::Icmpv6L4Protocol::HandleNA(ns3::Ptr<ns3::Packet> p, ns3::Ipv6Address const & src, ns3::Ipv6Address const & dst, ns3::Ptr<ns3::Ipv6Interface> interface) [member function]
<     cls.add_method('HandleNA', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Packet >', 'p'), param('ns3::Ipv6Address const &', 'src'), param('ns3::Ipv6Address const &', 'dst'), param('ns3::Ptr< ns3::Ipv6Interface >', 'interface')], 
<                    visibility='protected')
<     ## icmpv6-l4-protocol.h (module 'internet'): void ns3::Icmpv6L4Protocol::HandleNS(ns3::Ptr<ns3::Packet> p, ns3::Ipv6Address const & src, ns3::Ipv6Address const & dst, ns3::Ptr<ns3::Ipv6Interface> interface) [member function]
<     cls.add_method('HandleNS', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Packet >', 'p'), param('ns3::Ipv6Address const &', 'src'), param('ns3::Ipv6Address const &', 'dst'), param('ns3::Ptr< ns3::Ipv6Interface >', 'interface')], 
<                    visibility='protected')
<     ## icmpv6-l4-protocol.h (module 'internet'): void ns3::Icmpv6L4Protocol::HandlePacketTooBig(ns3::Ptr<ns3::Packet> p, ns3::Ipv6Address const & src, ns3::Ipv6Address const & dst, ns3::Ptr<ns3::Ipv6Interface> interface) [member function]
<     cls.add_method('HandlePacketTooBig', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Packet >', 'p'), param('ns3::Ipv6Address const &', 'src'), param('ns3::Ipv6Address const &', 'dst'), param('ns3::Ptr< ns3::Ipv6Interface >', 'interface')], 
<                    visibility='protected')
<     ## icmpv6-l4-protocol.h (module 'internet'): void ns3::Icmpv6L4Protocol::HandleParameterError(ns3::Ptr<ns3::Packet> p, ns3::Ipv6Address const & src, ns3::Ipv6Address const & dst, ns3::Ptr<ns3::Ipv6Interface> interface) [member function]
<     cls.add_method('HandleParameterError', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Packet >', 'p'), param('ns3::Ipv6Address const &', 'src'), param('ns3::Ipv6Address const &', 'dst'), param('ns3::Ptr< ns3::Ipv6Interface >', 'interface')], 
<                    visibility='protected')
<     ## icmpv6-l4-protocol.h (module 'internet'): void ns3::Icmpv6L4Protocol::HandleRA(ns3::Ptr<ns3::Packet> p, ns3::Ipv6Address const & src, ns3::Ipv6Address const & dst, ns3::Ptr<ns3::Ipv6Interface> interface) [member function]
<     cls.add_method('HandleRA', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Packet >', 'p'), param('ns3::Ipv6Address const &', 'src'), param('ns3::Ipv6Address const &', 'dst'), param('ns3::Ptr< ns3::Ipv6Interface >', 'interface')], 
<                    visibility='protected')
<     ## icmpv6-l4-protocol.h (module 'internet'): void ns3::Icmpv6L4Protocol::HandleRS(ns3::Ptr<ns3::Packet> p, ns3::Ipv6Address const & src, ns3::Ipv6Address const & dst, ns3::Ptr<ns3::Ipv6Interface> interface) [member function]
<     cls.add_method('HandleRS', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Packet >', 'p'), param('ns3::Ipv6Address const &', 'src'), param('ns3::Ipv6Address const &', 'dst'), param('ns3::Ptr< ns3::Ipv6Interface >', 'interface')], 
<                    visibility='protected')
<     ## icmpv6-l4-protocol.h (module 'internet'): void ns3::Icmpv6L4Protocol::HandleRedirection(ns3::Ptr<ns3::Packet> p, ns3::Ipv6Address const & src, ns3::Ipv6Address const & dst, ns3::Ptr<ns3::Ipv6Interface> interface) [member function]
<     cls.add_method('HandleRedirection', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Packet >', 'p'), param('ns3::Ipv6Address const &', 'src'), param('ns3::Ipv6Address const &', 'dst'), param('ns3::Ptr< ns3::Ipv6Interface >', 'interface')], 
<                    visibility='protected')
<     ## icmpv6-l4-protocol.h (module 'internet'): void ns3::Icmpv6L4Protocol::HandleTimeExceeded(ns3::Ptr<ns3::Packet> p, ns3::Ipv6Address const & src, ns3::Ipv6Address const & dst, ns3::Ptr<ns3::Ipv6Interface> interface) [member function]
<     cls.add_method('HandleTimeExceeded', 
<                    'void', 
<                    [param('ns3::Ptr< ns3::Packet >', 'p'), param('ns3::Ipv6Address const &', 'src'), param('ns3::Ipv6Address const &', 'dst'), param('ns3::Ptr< ns3::Ipv6Interface >', 'interface')], 
<                    visibility='protected')
<     ## icmpv6-l4-protocol.h (module 'internet'): void ns3::Icmpv6L4Protocol::ReceiveLLA(ns3::Icmpv6OptionLinkLayerAddress lla, ns3::Ipv6Address const & src, ns3::Ipv6Address const & dst, ns3::Ptr<ns3::Ipv6Interface> interface) [member function]
<     cls.add_method('ReceiveLLA', 
<                    'void', 
<                    [param('ns3::Icmpv6OptionLinkLayerAddress', 'lla'), param('ns3::Ipv6Address const &', 'src'), param('ns3::Ipv6Address const &', 'dst'), param('ns3::Ptr< ns3::Ipv6Interface >', 'interface')], 
<                    visibility='protected')
---
>                    is_const=True, visibility='private', is_virtual=True)
20645c19764
<                    is_virtual=True, visibility='protected')
---
>                    visibility='private', is_virtual=True)
20650c19769
<                    is_virtual=True, visibility='protected')
---
>                    visibility='private', is_virtual=True)
20745c19864
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
20817c19936
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
20822c19941
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
20959c20078
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
21127c20246
<                    is_virtual=True, visibility='protected')
---
>                    visibility='protected', is_virtual=True)
21165c20284
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
21175c20294
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
21307c20426
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
21317c20436
<                    is_virtual=True, is_pure_virtual=True)
---
>                    is_pure_virtual=True, is_virtual=True)
